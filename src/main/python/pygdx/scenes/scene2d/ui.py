from __future__ import annotations
from overload import overload


 
from builtins import str
import java.lang.Long as __long
from pyquantum_helper import override
import java.lang.Class as __Class
__Class = __Class
import java.lang.Object as __object
import com.badlogic.gdx.scenes.scene2d.ui.TooltipManager as __TooltipManager
__TooltipManager = __TooltipManager
import java.lang.String as __String
__String = __String
from builtins import type
import java.lang.Object as __Object
__Object = __Object
import java.lang.Integer as __int
from builtins import bool
from builtins import int
 
class TooltipManager():
    """com.badlogic.gdx.scenes.scene2d.ui.TooltipManager"""
 
    @staticmethod
    def __wrap(java_value: __TooltipManager) -> 'TooltipManager':
        return TooltipManager(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __TooltipManager):
        """
        Dynamic initializer for TooltipManager.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.lang.Object.toString()"""
        return str.__wrap(super(object, self).toString())

    @overload
    def instant(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TooltipManager.instant()"""
        super(TooltipManager, self).instant()

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def enter(self, arg0: 'Tooltip'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TooltipManager.enter(com.badlogic.gdx.scenes.scene2d.ui.Tooltip)"""
        super(__TooltipManager, self).enter(arg0)

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def __init__(self):
        """public com.badlogic.gdx.scenes.scene2d.ui.TooltipManager()"""
        val = __TooltipManager()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def hide(self, arg0: 'Tooltip'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TooltipManager.hide(com.badlogic.gdx.scenes.scene2d.ui.Tooltip)"""
        super(__TooltipManager, self).hide(arg0)

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def getInstance() -> 'TooltipManager':
        """public static com.badlogic.gdx.scenes.scene2d.ui.TooltipManager com.badlogic.gdx.scenes.scene2d.ui.TooltipManager.getInstance()"""
        return TooltipManager.__wrap(__TooltipManager.getInstance())

    @overload
    def touchDown(self, arg0: 'Tooltip'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TooltipManager.touchDown(com.badlogic.gdx.scenes.scene2d.ui.Tooltip)"""
        super(__TooltipManager, self).touchDown(arg0)

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @overload
    def hideAll(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TooltipManager.hideAll()"""
        super(TooltipManager, self).hideAll()

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def __init__(self, ):
        """public com.badlogic.gdx.scenes.scene2d.ui.TooltipManager()"""
        val = __TooltipManager()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0))

 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.TooltipManager
from builtins import str
import java.lang.Long as __long
from pyquantum_helper import override
import java.lang.Class as __Class
__Class = __Class
import java.lang.Object as __object
import com.badlogic.gdx.scenes.scene2d.ui.TooltipManager as __TooltipManager
__TooltipManager = __TooltipManager
import java.lang.String as __String
__String = __String
from builtins import type
import java.lang.Object as __Object
__Object = __Object
import java.lang.Integer as __int
from builtins import bool
from builtins import int
 
class TooltipManager():
    """com.badlogic.gdx.scenes.scene2d.ui.TooltipManager"""
 
    @staticmethod
    def __wrap(java_value: __TooltipManager) -> 'TooltipManager':
        return TooltipManager(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __TooltipManager):
        """
        Dynamic initializer for TooltipManager.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.lang.Object.toString()"""
        return str.__wrap(super(object, self).toString())

    @overload
    def instant(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TooltipManager.instant()"""
        super(TooltipManager, self).instant()

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def enter(self, arg0: 'Tooltip'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TooltipManager.enter(com.badlogic.gdx.scenes.scene2d.ui.Tooltip)"""
        super(__TooltipManager, self).enter(arg0)

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def __init__(self):
        """public com.badlogic.gdx.scenes.scene2d.ui.TooltipManager()"""
        val = __TooltipManager()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def hide(self, arg0: 'Tooltip'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TooltipManager.hide(com.badlogic.gdx.scenes.scene2d.ui.Tooltip)"""
        super(__TooltipManager, self).hide(arg0)

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def getInstance() -> 'TooltipManager':
        """public static com.badlogic.gdx.scenes.scene2d.ui.TooltipManager com.badlogic.gdx.scenes.scene2d.ui.TooltipManager.getInstance()"""
        return TooltipManager.__wrap(__TooltipManager.getInstance())

    @overload
    def touchDown(self, arg0: 'Tooltip'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TooltipManager.touchDown(com.badlogic.gdx.scenes.scene2d.ui.Tooltip)"""
        super(__TooltipManager, self).touchDown(arg0)

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @overload
    def hideAll(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TooltipManager.hideAll()"""
        super(TooltipManager, self).hideAll()

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def __init__(self, ):
        """public com.badlogic.gdx.scenes.scene2d.ui.TooltipManager()"""
        val = __TooltipManager()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0))

 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.TooltipManager 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.TextField$DefaultOnscreenKeyboard
from builtins import str
import java.lang.Boolean as __boolean
from pyquantum_helper import override
import java.lang.Object as __object
from builtins import type
import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import java.lang.String as __String
__String = __String
import com.badlogic.gdx.scenes.scene2d.ui.TextField as __TextField_DefaultOnscreenKeyboard
__DefaultOnscreenKeyboard = __TextField_DefaultOnscreenKeyboard.DefaultOnscreenKeyboard
import java.lang.Object as __Object
__Object = __Object
import java.lang.Integer as __int
from builtins import bool
from builtins import int
 
class DefaultOnscreenKeyboard(__OnscreenKeyboard, OnscreenKeyboard):
    """com.badlogic.gdx.scenes.scene2d.ui.TextField.DefaultOnscreenKeyboard"""
 
    @staticmethod
    def __wrap(java_value: __DefaultOnscreenKeyboard) -> 'DefaultOnscreenKeyboard':
        return DefaultOnscreenKeyboard(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __DefaultOnscreenKeyboard):
        """
        Dynamic initializer for DefaultOnscreenKeyboard.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def __init__(self, ):
        """public com.badlogic.gdx.scenes.scene2d.ui.TextField$DefaultOnscreenKeyboard()"""
        val = __DefaultOnscreenKeyboard()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def __init__(self):
        """public com.badlogic.gdx.scenes.scene2d.ui.TextField$DefaultOnscreenKeyboard()"""
        val = __DefaultOnscreenKeyboard()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.lang.Object.toString()"""
        return str.__wrap(super(object, self).toString())

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def show(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextField$DefaultOnscreenKeyboard.show(boolean)"""
        super(__DefaultOnscreenKeyboard, self).show(__boolean.valueOf(arg0))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0)) 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.Label
from pyquantum_helper import import_once as __import_once__
import com.badlogic.gdx.scenes.scene2d.Touchable as __Touchable
__Touchable = __Touchable
try:
    from pygdx.scenes import scene2d
except ImportError:
    scene2d = __import_once__("pygdx.scenes.scene2d")

import com.badlogic.gdx.graphics.Color as __Color
__Color = __Color
import java.lang.Boolean as __boolean
try:
    from pygdx.graphics import g2d
except ImportError:
    g2d = __import_once__("pygdx.graphics.g2d")

from builtins import type
import com.badlogic.gdx.scenes.scene2d.Group as __Group
__Group = __Group
import com.badlogic.gdx.math.Vector2 as __Vector2
__Vector2 = __Vector2
import java.lang.Class as __Class
__Class = __Class
import com.badlogic.gdx.utils.Array as __Array
__Array = __Array
import java.lang.String as __string
import com.badlogic.gdx.utils.StringBuilder as __StringBuilder
__StringBuilder = __StringBuilder
try:
    from pygdx import math
except ImportError:
    math = __import_once__("pygdx.math")

from builtins import bool
import com.badlogic.gdx.scenes.scene2d.ui.Widget as __Widget
__Widget = __Widget
import com.badlogic.gdx.graphics.g2d.GlyphLayout as __GlyphLayout
__GlyphLayout = __GlyphLayout
from builtins import str
try:
    from pygdx import utils
except ImportError:
    utils = __import_once__("pygdx.utils")

import java.lang.CharSequence as CharSequence
from pyquantum_helper import override
import java.lang.Object as __object
from builtins import float
from builtins import object
import com.badlogic.gdx.utils.DelayedRemovalArray as __DelayedRemovalArray
__DelayedRemovalArray = __DelayedRemovalArray
import java.lang.Long as __long
import java.lang.Float as __float
import java.lang.String as __String
__String = __String
try:
    from pygdx.graphics import glutils
except ImportError:
    glutils = __import_once__("pygdx.graphics.glutils")

import java.lang.Object as __Object
__Object = __Object
import com.badlogic.gdx.scenes.scene2d.Actor as __Actor
__Actor = __Actor
import java.lang.Integer as __int
import com.badlogic.gdx.scenes.scene2d.Stage as __Stage
__Stage = __Stage
import com.badlogic.gdx.scenes.scene2d.ui.Label as __Label
__Label = __Label
try:
    from pygdx import graphics
except ImportError:
    graphics = __import_once__("pygdx.graphics")

import com.badlogic.gdx.scenes.scene2d.ui.Label as __Label_LabelStyle
__LabelStyle = __Label_LabelStyle.LabelStyle
from builtins import int
 
class Label(__Widget, Widget):
    """com.badlogic.gdx.scenes.scene2d.ui.Label"""
 
    @staticmethod
    def __wrap(java_value: __Label) -> 'Label':
        return Label(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Label):
        """
        Dynamic initializer for Label.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def getY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getY()"""
        return float.__wrap(super(scene2d.Actor, self).getY())

    @overload
    def setEllipsis(self, arg0: str):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Label.setEllipsis(java.lang.String)"""
        super(__Label, self).setEllipsis(arg0)

    @overload
    def getGlyphLayout(self) -> 'g2d.GlyphLayout':
        """public com.badlogic.gdx.graphics.g2d.GlyphLayout com.badlogic.gdx.scenes.scene2d.ui.Label.getGlyphLayout()"""
        return 'g2d.GlyphLayout'.__wrap(super(Label, self).getGlyphLayout())

    @overload
    def setZIndex(self, arg0: int) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.setZIndex(int)"""
        return bool.__wrap(super(__scene2d.Actor, self).setZIndex(__int.valueOf(arg0)))

    @override
    @overload
    def setBounds(self, arg0: float, arg1: float, arg2: float, arg3: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setBounds(float,float,float,float)"""
        super(__scene2d.Actor, self).setBounds(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def needsLayout(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Widget.needsLayout()"""
        return bool.__wrap(super(Widget, self).needsLayout())

    @overload
    def getX(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getX(int)"""
        return float.__wrap(super(__scene2d.Actor, self).getX(__int.valueOf(arg0)))

    @override
    @overload
    def sizeBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.sizeBy(float)"""
        super(__scene2d.Actor, self).sizeBy(__float.valueOf(arg0))

    @override
    @overload
    def sizeBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.sizeBy(float,float)"""
        super(__scene2d.Actor, self).sizeBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def hasActions(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasActions()"""
        return bool.__wrap(super(scene2d.Actor, self).hasActions())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0))

    @override
    @overload
    def setScaleX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScaleX(float)"""
        super(__scene2d.Actor, self).setScaleX(__float.valueOf(arg0))

    @overload
    def setFontScale(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Label.setFontScale(float,float)"""
        super(__Label, self).setFontScale(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def getTouchable(self) -> 'scene2d.Touchable':
        """public com.badlogic.gdx.scenes.scene2d.Touchable com.badlogic.gdx.scenes.scene2d.Actor.getTouchable()"""
        return 'scene2d.Touchable'.__wrap(super(scene2d.Actor, self).getTouchable())

    @override
    @overload
    def removeAction(self, arg0: 'Action'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.removeAction(com.badlogic.gdx.scenes.scene2d.Action)"""
        super(__scene2d.Actor, self).removeAction(arg0)

    @override
    @overload
    def getX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getX()"""
        return float.__wrap(super(scene2d.Actor, self).getX())

    @overload
    def setEllipsis(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Label.setEllipsis(boolean)"""
        super(__Label, self).setEllipsis(__boolean.valueOf(arg0))

    @override
    @overload
    def getMaxWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Widget.getMaxWidth()"""
        return float.__wrap(super(Widget, self).getMaxWidth())

    @override
    @overload
    def toBack(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.toBack()"""
        super(scene2d.Actor, self).toBack()

    @override
    @overload
    def setDebug(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setDebug(boolean)"""
        super(__scene2d.Actor, self).setDebug(__boolean.valueOf(arg0))

    @overload
    def __init__(self, arg0: 'CharSequence', arg1: 'Skin', arg2: str):
        """public com.badlogic.gdx.scenes.scene2d.ui.Label(java.lang.CharSequence,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String)"""
        val = __Label(arg0, arg1, arg2)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def setX(self, arg0: float, arg1: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setX(float,int)"""
        super(__scene2d.Actor, self).setX(__float.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def screenToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.screenToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).screenToLocalCoordinates(arg0))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def getLabelAlign(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.ui.Label.getLabelAlign()"""
        return int.__wrap(super(Label, self).getLabelAlign())

    @override
    @overload
    def ancestorsVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.ancestorsVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).ancestorsVisible())

    @override
    @overload
    def getListeners(self) -> 'utils.DelayedRemovalArray':
        """public com.badlogic.gdx.utils.DelayedRemovalArray<com.badlogic.gdx.scenes.scene2d.EventListener> com.badlogic.gdx.scenes.scene2d.Actor.getListeners()"""
        return 'utils.DelayedRemovalArray'.__wrap(super(scene2d.Actor, self).getListeners())

    @override
    @overload
    def setFillParent(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.setFillParent(boolean)"""
        super(__Widget, self).setFillParent(__boolean.valueOf(arg0))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def getWrap(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Label.getWrap()"""
        return bool.__wrap(super(Label, self).getWrap())

    @overload
    def removeListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.removeListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).removeListener(arg0))

    @override
    @overload
    def isTouchFocusListener(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchFocusListener()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchFocusListener())

    @overload
    def localToStageCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToStageCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToStageCoordinates(arg0))

    @overload
    def setText(self, arg0: 'CharSequence'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Label.setText(java.lang.CharSequence)"""
        super(__Label, self).setText(arg0)

    @override
    @overload
    def setSize(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setSize(float,float)"""
        super(__scene2d.Actor, self).setSize(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def getZIndex(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.Actor.getZIndex()"""
        return int.__wrap(super(scene2d.Actor, self).getZIndex())

    @override
    @overload
    def clipBegin(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.clipBegin()"""
        return bool.__wrap(super(scene2d.Actor, self).clipBegin())

    @override
    @overload
    def invalidateHierarchy(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.invalidateHierarchy()"""
        super(Widget, self).invalidateHierarchy()

    @override
    @overload
    def moveBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.moveBy(float,float)"""
        super(__scene2d.Actor, self).moveBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def getY(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getY(int)"""
        return float.__wrap(super(__scene2d.Actor, self).getY(__int.valueOf(arg0)))

    @override
    @overload
    def setOrigin(self, arg0: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOrigin(int)"""
        super(__scene2d.Actor, self).setOrigin(__int.valueOf(arg0))

    @overload
    def isDescendantOf(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isDescendantOf(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Actor, self).isDescendantOf(arg0))

    @override
    @overload
    def getParent(self) -> 'scene2d.Group':
        """public com.badlogic.gdx.scenes.scene2d.Group com.badlogic.gdx.scenes.scene2d.Actor.getParent()"""
        return 'scene2d.Group'.__wrap(super(scene2d.Actor, self).getParent())

    @overload
    def getFontScaleX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Label.getFontScaleX()"""
        return float.__wrap(super(Label, self).getFontScaleX())

    @override
    @overload
    def clearListeners(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clearListeners()"""
        super(scene2d.Actor, self).clearListeners()

    @overload
    def localToActorCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToActorCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToActorCoordinates(arg0, arg1))

    @override
    @overload
    def setName(self, arg0: str):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setName(java.lang.String)"""
        super(__scene2d.Actor, self).setName(arg0)

    @overload
    def getFontScaleY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Label.getFontScaleY()"""
        return float.__wrap(super(Label, self).getFontScaleY())

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @override
    @overload
    def setLayoutEnabled(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.setLayoutEnabled(boolean)"""
        super(__Widget, self).setLayoutEnabled(__boolean.valueOf(arg0))

    @override
    @overload
    def setOriginX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOriginX(float)"""
        super(__scene2d.Actor, self).setOriginX(__float.valueOf(arg0))

    @override
    @overload
    def getHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getHeight()"""
        return float.__wrap(super(scene2d.Actor, self).getHeight())

    @override
    @overload
    def validate(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.validate()"""
        super(Widget, self).validate()

    @override
    @overload
    def hasKeyboardFocus(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasKeyboardFocus()"""
        return bool.__wrap(super(scene2d.Actor, self).hasKeyboardFocus())

    @override
    @overload
    def getOriginY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getOriginY()"""
        return float.__wrap(super(scene2d.Actor, self).getOriginY())

    @override
    @overload
    def clipEnd(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clipEnd()"""
        super(scene2d.Actor, self).clipEnd()

    @override
    @overload
    def getUserObject(self) -> object:
        """public java.lang.Object com.badlogic.gdx.scenes.scene2d.Actor.getUserObject()"""
        return object.__wrap(super(scene2d.Actor, self).getUserObject())

    @override
    @overload
    def pack(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.pack()"""
        super(Widget, self).pack()

    @override
    @overload
    def layout(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Label.layout()"""
        super(Label, self).layout()

    @overload
    def setFontScale(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Label.setFontScale(float)"""
        super(__Label, self).setFontScale(__float.valueOf(arg0))

    @override
    @overload
    def getDebug(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.getDebug()"""
        return bool.__wrap(super(scene2d.Actor, self).getDebug())

    @override
    @overload
    def setHeight(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setHeight(float)"""
        super(__scene2d.Actor, self).setHeight(__float.valueOf(arg0))

    @override
    @overload
    def setScale(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScale(float)"""
        super(__scene2d.Actor, self).setScale(__float.valueOf(arg0))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def rotateBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.rotateBy(float)"""
        super(__scene2d.Actor, self).rotateBy(__float.valueOf(arg0))

    @override
    @overload
    def invalidate(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Label.invalidate()"""
        super(Label, self).invalidate()

    @override
    @overload
    def getMinHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Widget.getMinHeight()"""
        return float.__wrap(super(Widget, self).getMinHeight())

    @override
    @overload
    def setScale(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScale(float,float)"""
        super(__scene2d.Actor, self).setScale(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def addListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.addListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).addListener(arg0))

    @overload
    def setStyle(self, arg0: 'LabelStyle'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Label.setStyle(com.badlogic.gdx.scenes.scene2d.ui.Label$LabelStyle)"""
        super(__Label, self).setStyle(arg0)

    @overload
    def parentToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.parentToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).parentToLocalCoordinates(arg0))

    @overload
    def setWrap(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Label.setWrap(boolean)"""
        super(__Label, self).setWrap(__boolean.valueOf(arg0))

    @override
    @overload
    def getRotation(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getRotation()"""
        return float.__wrap(super(scene2d.Actor, self).getRotation())

    @override
    @overload
    def setVisible(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setVisible(boolean)"""
        super(__scene2d.Actor, self).setVisible(__boolean.valueOf(arg0))

    @override
    @overload
    def setY(self, arg0: float, arg1: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setY(float,int)"""
        super(__scene2d.Actor, self).setY(__float.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def setX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setX(float)"""
        super(__scene2d.Actor, self).setX(__float.valueOf(arg0))

    @override
    @overload
    def setOrigin(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOrigin(float,float)"""
        super(__scene2d.Actor, self).setOrigin(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def getRight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getRight()"""
        return float.__wrap(super(scene2d.Actor, self).getRight())

    @overload
    def setFontScaleY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Label.setFontScaleY(float)"""
        super(__Label, self).setFontScaleY(__float.valueOf(arg0))

    @overload
    def isAscendantOf(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isAscendantOf(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Actor, self).isAscendantOf(arg0))

    @override
    @overload
    def setWidth(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setWidth(float)"""
        super(__scene2d.Actor, self).setWidth(__float.valueOf(arg0))

    @override
    @overload
    def isTouchFocusTarget(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchFocusTarget()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchFocusTarget())

    @override
    @overload
    def hasParent(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasParent()"""
        return bool.__wrap(super(scene2d.Actor, self).hasParent())

    @override
    @overload
    def setPosition(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setPosition(float,float)"""
        super(__scene2d.Actor, self).setPosition(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def textEquals(self, arg0: 'CharSequence') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Label.textEquals(java.lang.CharSequence)"""
        return bool.__wrap(super(__Label, self).textEquals(arg0))

    @override
    @overload
    def getScaleY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getScaleY()"""
        return float.__wrap(super(scene2d.Actor, self).getScaleY())

    @override
    @overload
    def getWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getWidth()"""
        return float.__wrap(super(scene2d.Actor, self).getWidth())

    @override
    @overload
    def setOriginY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOriginY(float)"""
        super(__scene2d.Actor, self).setOriginY(__float.valueOf(arg0))

    @override
    @overload
    def setPosition(self, arg0: float, arg1: float, arg2: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setPosition(float,float,int)"""
        super(__scene2d.Actor, self).setPosition(__float.valueOf(arg0), __float.valueOf(arg1), __int.valueOf(arg2))

    @overload
    def removeCaptureListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.removeCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).removeCaptureListener(arg0))

    @override
    @overload
    def setColor(self, arg0: 'Color'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setColor(com.badlogic.gdx.graphics.Color)"""
        super(__scene2d.Actor, self).setColor(arg0)

    @overload
    def localToScreenCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToScreenCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToScreenCoordinates(arg0))

    @overload
    def __init__(self, arg0: 'CharSequence', arg1: 'Skin'):
        """public com.badlogic.gdx.scenes.scene2d.ui.Label(java.lang.CharSequence,com.badlogic.gdx.scenes.scene2d.ui.Skin)"""
        val = __Label(arg0, arg1)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def drawDebug(self, arg0: 'ShapeRenderer'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.drawDebug(com.badlogic.gdx.graphics.glutils.ShapeRenderer)"""
        super(__scene2d.Actor, self).drawDebug(arg0)

    @override
    @overload
    def setTouchable(self, arg0: 'Touchable'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setTouchable(com.badlogic.gdx.scenes.scene2d.Touchable)"""
        super(__scene2d.Actor, self).setTouchable(arg0)

    @overload
    def setAlignment(self, arg0: int):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Label.setAlignment(int)"""
        super(__Label, self).setAlignment(__int.valueOf(arg0))

    @overload
    def addCaptureListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.addCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).addCaptureListener(arg0))

    @overload
    def fire(self, arg0: 'Event') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.fire(com.badlogic.gdx.scenes.scene2d.Event)"""
        return bool.__wrap(super(__scene2d.Actor, self).fire(arg0))

    @override
    @overload
    def getMaxHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Widget.getMaxHeight()"""
        return float.__wrap(super(Widget, self).getMaxHeight())

    @override
    @overload
    def remove(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.remove()"""
        return bool.__wrap(super(scene2d.Actor, self).remove())

    @overload
    def hit(self, arg0: float, arg1: float, arg2: bool) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.Actor.hit(float,float,boolean)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Actor, self).hit(__float.valueOf(arg0), __float.valueOf(arg1), __boolean.valueOf(arg2)))

    @overload
    def localToParentCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToParentCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToParentCoordinates(arg0))

    @overload
    def getLineAlign(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.ui.Label.getLineAlign()"""
        return int.__wrap(super(Label, self).getLineAlign())

    @override
    @overload
    def clear(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clear()"""
        super(scene2d.Actor, self).clear()

    @override
    @overload
    def getName(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.Actor.getName()"""
        return str.__wrap(super(scene2d.Actor, self).getName())

    @override
    @overload
    def isVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).isVisible())

    @overload
    def getText(self) -> 'utils.StringBuilder':
        """public com.badlogic.gdx.utils.StringBuilder com.badlogic.gdx.scenes.scene2d.ui.Label.getText()"""
        return 'utils.StringBuilder'.__wrap(super(Label, self).getText())

    @overload
    def setAlignment(self, arg0: int, arg1: int):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Label.setAlignment(int,int)"""
        super(__Label, self).setAlignment(__int.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def getCaptureListeners(self) -> 'utils.DelayedRemovalArray':
        """public com.badlogic.gdx.utils.DelayedRemovalArray<com.badlogic.gdx.scenes.scene2d.EventListener> com.badlogic.gdx.scenes.scene2d.Actor.getCaptureListeners()"""
        return 'utils.DelayedRemovalArray'.__wrap(super(scene2d.Actor, self).getCaptureListeners())

    @override
    @overload
    def debug(self) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.Actor.debug()"""
        return 'scene2d.Actor'.__wrap(super(scene2d.Actor, self).debug())

    @override
    @overload
    def getTop(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getTop()"""
        return float.__wrap(super(scene2d.Actor, self).getTop())

    @override
    @overload
    def setY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setY(float)"""
        super(__scene2d.Actor, self).setY(__float.valueOf(arg0))

    @override
    @overload
    def getMinWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Widget.getMinWidth()"""
        return float.__wrap(super(Widget, self).getMinWidth())

    @override
    @overload
    def clearActions(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clearActions()"""
        super(scene2d.Actor, self).clearActions()

    @override
    @overload
    def getPrefHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Label.getPrefHeight()"""
        return float.__wrap(super(Label, self).getPrefHeight())

    @override
    @overload
    def scaleBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.scaleBy(float,float)"""
        super(__scene2d.Actor, self).scaleBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def setRotation(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setRotation(float)"""
        super(__scene2d.Actor, self).setRotation(__float.valueOf(arg0))

    @override
    @overload
    def getScaleX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getScaleX()"""
        return float.__wrap(super(scene2d.Actor, self).getScaleX())

    @overload
    def __init__(self, arg0: 'CharSequence', arg1: 'Skin', arg2: str, arg3: str):
        """public com.badlogic.gdx.scenes.scene2d.ui.Label(java.lang.CharSequence,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String,java.lang.String)"""
        val = __Label(arg0, arg1, arg2, arg3)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def firstAscendant(self, arg0: 'Class') -> 'scene2d.Actor':
        """public <T extends com.badlogic.gdx.scenes.scene2d.Actor> T com.badlogic.gdx.scenes.scene2d.Actor.firstAscendant(java.lang.Class<T>)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Actor, self).firstAscendant(arg0))

    @overload
    def notify(self, arg0: 'Event', arg1: bool) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.notify(com.badlogic.gdx.scenes.scene2d.Event,boolean)"""
        return bool.__wrap(super(__scene2d.Actor, self).notify(arg0, __boolean.valueOf(arg1)))

    @override
    @overload
    def act(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.act(float)"""
        super(__scene2d.Actor, self).act(__float.valueOf(arg0))

    @override
    @overload
    def draw(self, arg0: 'Batch', arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Label.draw(com.badlogic.gdx.graphics.g2d.Batch,float)"""
        super(__Label, self).draw(arg0, __float.valueOf(arg1))

    @override
    @overload
    def setUserObject(self, arg0: object):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setUserObject(java.lang.Object)"""
        super(__scene2d.Actor, self).setUserObject(arg0)

    @override
    @overload
    def setScaleY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScaleY(float)"""
        super(__scene2d.Actor, self).setScaleY(__float.valueOf(arg0))

    @override
    @overload
    def hasScrollFocus(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasScrollFocus()"""
        return bool.__wrap(super(scene2d.Actor, self).hasScrollFocus())

    @override
    @overload
    def toFront(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.toFront()"""
        super(scene2d.Actor, self).toFront()

    @override
    @overload
    def scaleBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.scaleBy(float)"""
        super(__scene2d.Actor, self).scaleBy(__float.valueOf(arg0))

    @overload
    def stageToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.stageToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).stageToLocalCoordinates(arg0))

    @override
    @overload
    def getOriginX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getOriginX()"""
        return float.__wrap(super(scene2d.Actor, self).getOriginX())

    @overload
    def setFontScaleX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Label.setFontScaleX(float)"""
        super(__Label, self).setFontScaleX(__float.valueOf(arg0))

    @override
    @overload
    def getPrefWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Label.getPrefWidth()"""
        return float.__wrap(super(Label, self).getPrefWidth())

    @override
    @overload
    def ascendantsVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.ascendantsVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).ascendantsVisible())

    @override
    @overload
    def getColor(self) -> 'graphics.Color':
        """public com.badlogic.gdx.graphics.Color com.badlogic.gdx.scenes.scene2d.Actor.getColor()"""
        return 'graphics.Color'.__wrap(super(scene2d.Actor, self).getColor())

    @overload
    def __init__(self, arg0: 'CharSequence', arg1: 'LabelStyle'):
        """public com.badlogic.gdx.scenes.scene2d.ui.Label(java.lang.CharSequence,com.badlogic.gdx.scenes.scene2d.ui.Label$LabelStyle)"""
        val = __Label(arg0, arg1)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @override
    @overload
    def getStage(self) -> 'scene2d.Stage':
        """public com.badlogic.gdx.scenes.scene2d.Stage com.badlogic.gdx.scenes.scene2d.Actor.getStage()"""
        return 'scene2d.Stage'.__wrap(super(scene2d.Actor, self).getStage())

    @overload
    def getStyle(self) -> 'LabelStyle':
        """public com.badlogic.gdx.scenes.scene2d.ui.Label$LabelStyle com.badlogic.gdx.scenes.scene2d.ui.Label.getStyle()"""
        return 'LabelStyle'.__wrap(super(Label, self).getStyle())

    @override
    @overload
    def addAction(self, arg0: 'Action'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.addAction(com.badlogic.gdx.scenes.scene2d.Action)"""
        super(__scene2d.Actor, self).addAction(arg0)

    @overload
    def __init__(self, arg0: 'CharSequence', arg1: 'Skin', arg2: str, arg3: 'Color'):
        """public com.badlogic.gdx.scenes.scene2d.ui.Label(java.lang.CharSequence,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String,com.badlogic.gdx.graphics.Color)"""
        val = __Label(arg0, arg1, arg2, arg3)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def setText(self, arg0: int) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Label.setText(int)"""
        return bool.__wrap(super(__Label, self).setText(__int.valueOf(arg0)))

    @override
    @overload
    def setColor(self, arg0: float, arg1: float, arg2: float, arg3: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setColor(float,float,float,float)"""
        super(__scene2d.Actor, self).setColor(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3))

    @override
    @overload
    def isTouchable(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchable()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchable())

    @overload
    def localToAscendantCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToAscendantCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToAscendantCoordinates(arg0, arg1))

    @overload
    def clipBegin(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.clipBegin(float,float,float,float)"""
        return bool.__wrap(super(__scene2d.Actor, self).clipBegin(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3)))

    @override
    @overload
    def getActions(self) -> 'utils.Array':
        """public com.badlogic.gdx.utils.Array<com.badlogic.gdx.scenes.scene2d.Action> com.badlogic.gdx.scenes.scene2d.Actor.getActions()"""
        return 'utils.Array'.__wrap(super(scene2d.Actor, self).getActions())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.ui.Label.toString()"""
        return str.__wrap(super(Label, self).toString()) 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.SplitPane$SplitPaneStyle
from pyquantum_helper import import_once as __import_once__
from builtins import str
try:
    from pygdx.scenes.scene2d import utils
except ImportError:
    utils = __import_once__("pygdx.scenes.scene2d.utils")

from pyquantum_helper import override
import java.lang.Object as __object
from builtins import type
import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import java.lang.String as __String
__String = __String
import com.badlogic.gdx.scenes.scene2d.ui.SplitPane as __SplitPane_SplitPaneStyle
__SplitPaneStyle = __SplitPane_SplitPaneStyle.SplitPaneStyle
import java.lang.Object as __Object
__Object = __Object
import java.lang.Integer as __int
from builtins import bool
from builtins import int
 
class SplitPaneStyle():
    """com.badlogic.gdx.scenes.scene2d.ui.SplitPane.SplitPaneStyle"""
 
    @staticmethod
    def __wrap(java_value: __SplitPaneStyle) -> 'SplitPaneStyle':
        return SplitPaneStyle(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __SplitPaneStyle):
        """
        Dynamic initializer for SplitPaneStyle.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.lang.Object.toString()"""
        return str.__wrap(super(object, self).toString())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def __init__(self):
        """public com.badlogic.gdx.scenes.scene2d.ui.SplitPane$SplitPaneStyle()"""
        val = __SplitPaneStyle()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def __init__(self, arg0: 'Drawable'):
        """public com.badlogic.gdx.scenes.scene2d.ui.SplitPane$SplitPaneStyle(com.badlogic.gdx.scenes.scene2d.utils.Drawable)"""
        val = __SplitPaneStyle(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def __init__(self, arg0: 'SplitPaneStyle'):
        """public com.badlogic.gdx.scenes.scene2d.ui.SplitPane$SplitPaneStyle(com.badlogic.gdx.scenes.scene2d.ui.SplitPane$SplitPaneStyle)"""
        val = __SplitPaneStyle(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def __init__(self, ):
        """public com.badlogic.gdx.scenes.scene2d.ui.SplitPane$SplitPaneStyle()"""
        val = __SplitPaneStyle()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0)) 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.Slider$SliderStyle
from pyquantum_helper import import_once as __import_once__
from builtins import str
try:
    from pygdx.scenes.scene2d import utils
except ImportError:
    utils = __import_once__("pygdx.scenes.scene2d.utils")

from pyquantum_helper import override
import java.lang.Object as __object
from builtins import type
import java.lang.Long as __long
import com.badlogic.gdx.scenes.scene2d.ui.Slider as __Slider_SliderStyle
__SliderStyle = __Slider_SliderStyle.SliderStyle
import java.lang.Class as __Class
__Class = __Class
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import java.lang.Integer as __int
from builtins import bool
from builtins import int
 
class SliderStyle(__ProgressBarStyle, ProgressBarStyle):
    """com.badlogic.gdx.scenes.scene2d.ui.Slider.SliderStyle"""
 
    @staticmethod
    def __wrap(java_value: __SliderStyle) -> 'SliderStyle':
        return SliderStyle(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __SliderStyle):
        """
        Dynamic initializer for SliderStyle.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.lang.Object.toString()"""
        return str.__wrap(super(object, self).toString())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @overload
    def __init__(self, arg0: 'SliderStyle'):
        """public com.badlogic.gdx.scenes.scene2d.ui.Slider$SliderStyle(com.badlogic.gdx.scenes.scene2d.ui.Slider$SliderStyle)"""
        val = __SliderStyle(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def __init__(self, arg0: 'Drawable', arg1: 'Drawable'):
        """public com.badlogic.gdx.scenes.scene2d.ui.Slider$SliderStyle(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable)"""
        val = __SliderStyle(arg0, arg1)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def __init__(self, ):
        """public com.badlogic.gdx.scenes.scene2d.ui.Slider$SliderStyle()"""
        val = __SliderStyle()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0))

    @overload
    def __init__(self):
        """public com.badlogic.gdx.scenes.scene2d.ui.Slider$SliderStyle()"""
        val = __SliderStyle()
        self.__dict__ = val.__dict__
        self.__wrapper = val 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.Table$Debug
from builtins import str
from pyquantum_helper import override
import java.lang.Object as __object
from builtins import type
import java.util.Optional as __Optional
__Optional = __Optional
from typing import List
import java.lang.Enum as Enum
import com.badlogic.gdx.scenes.scene2d.ui.Table as __Table_Debug
__Debug = __Table_Debug.Debug
import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import java.lang.String as __string
import java.lang.String as __String
__String = __String
import java.util.Optional as Optional
import java.lang.Object as __Object
__Object = __Object
import java.lang.Integer as __int
import java.lang.Enum as __Enum
__Enum = __Enum
from builtins import bool
from builtins import int
 
class Debug(__Enum, Enum):
    """com.badlogic.gdx.scenes.scene2d.ui.Table.Debug"""
 
    @staticmethod
    def __wrap(java_value: __Debug) -> 'Debug':
        return Debug(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Debug):
        """
        Dynamic initializer for Debug.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def valueOf(arg0: 'Class', arg1: str) -> 'Enum':
        """public static <T extends java.lang.Enum<T>> T java.lang.Enum.valueOf(java.lang.Class<T>,java.lang.String)"""
        return Enum.__wrap(__Enum.valueOf(arg0, arg1))

    @staticmethod
    @overload
    def valueOf(arg0: str) -> 'Debug':
        """public static com.badlogic.gdx.scenes.scene2d.ui.Table$Debug com.badlogic.gdx.scenes.scene2d.ui.Table$Debug.valueOf(java.lang.String)"""
        return Debug.__wrap(__Debug.valueOf(arg0))

    @override
    @overload
    def name(self) -> str:
        """public final java.lang.String java.lang.Enum.name()"""
        return str.__wrap(super(Enum, self).name())

    @staticmethod
    @overload
    def values() -> List['Debug']:
        """public static com.badlogic.gdx.scenes.scene2d.ui.Table$Debug[] com.badlogic.gdx.scenes.scene2d.ui.Table$Debug.values()"""
        return List[Debug].__wrap(__Debug.values())

    @override
    @overload
    def hashCode(self) -> int:
        """public final int java.lang.Enum.hashCode()"""
        return int.__wrap(super(Enum, self).hashCode())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def describeConstable(self) -> 'Optional':
        """public final java.util.Optional<java.lang.Enum$EnumDesc<E>> java.lang.Enum.describeConstable()"""
        return 'Optional'.__wrap(super(Enum, self).describeConstable())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @overload
    def compareTo(self, arg0: 'Enum') -> int:
        """public final int java.lang.Enum.compareTo(E)"""
        return int.__wrap(super(__Enum, self).compareTo(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def equals(self, arg0: object) -> bool:
        """public final boolean java.lang.Enum.equals(java.lang.Object)"""
        return bool.__wrap(super(__Enum, self).equals(arg0))

    @override
    @overload
    def getDeclaringClass(self) -> 'type.Class':
        """public final java.lang.Class<E> java.lang.Enum.getDeclaringClass()"""
        return 'type.Class'.__wrap(super(Enum, self).getDeclaringClass())

    @override
    @overload
    def ordinal(self) -> int:
        """public final int java.lang.Enum.ordinal()"""
        return int.__wrap(super(Enum, self).ordinal())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.lang.Enum.toString()"""
        return str.__wrap(super(Enum, self).toString()) 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup
from pyquantum_helper import import_once as __import_once__
from builtins import str
try:
    from pygdx import utils
except ImportError:
    utils = __import_once__("pygdx.utils")

import java.lang.Boolean as __boolean
from pyquantum_helper import override
import java.lang.Object as __object
from builtins import type
import com.badlogic.gdx.scenes.scene2d.ui.Button as __Button
__Button = __Button
import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import com.badlogic.gdx.utils.Array as __Array
__Array = __Array
import java.lang.String as __string
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import java.lang.Integer as __int
from builtins import bool
import com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup as __ButtonGroup
__ButtonGroup = __ButtonGroup
from builtins import int
 
class ButtonGroup():
    """com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup"""
 
    @staticmethod
    def __wrap(java_value: __ButtonGroup) -> 'ButtonGroup':
        return ButtonGroup(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __ButtonGroup):
        """
        Dynamic initializer for ButtonGroup.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def remove(self, *arg0: 'Button'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup.remove(T...)"""
        super(__ButtonGroup, self).remove(arg0)

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def getButtons(self) -> 'utils.Array':
        """public com.badlogic.gdx.utils.Array<T> com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup.getButtons()"""
        return 'utils.Array'.__wrap(super(ButtonGroup, self).getButtons())

    @overload
    def uncheckAll(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup.uncheckAll()"""
        super(ButtonGroup, self).uncheckAll()

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def setChecked(self, arg0: str):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup.setChecked(java.lang.String)"""
        super(__ButtonGroup, self).setChecked(arg0)

    @overload
    def __init__(self, ):
        """public com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup()"""
        val = __ButtonGroup()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def getChecked(self) -> 'Button':
        """public T com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup.getChecked()"""
        return 'Button'.__wrap(super(ButtonGroup, self).getChecked())

    @overload
    def getAllChecked(self) -> 'utils.Array':
        """public com.badlogic.gdx.utils.Array<T> com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup.getAllChecked()"""
        return 'utils.Array'.__wrap(super(ButtonGroup, self).getAllChecked())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def getCheckedIndex(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup.getCheckedIndex()"""
        return int.__wrap(super(ButtonGroup, self).getCheckedIndex())

    @overload
    def __init__(self, *arg0: 'Button'):
        """public com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup(T...)"""
        val = __ButtonGroup(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @overload
    def add(self, *arg0: 'Button'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup.add(T...)"""
        super(__ButtonGroup, self).add(arg0)

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0))

    @overload
    def setMaxCheckCount(self, arg0: int):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup.setMaxCheckCount(int)"""
        super(__ButtonGroup, self).setMaxCheckCount(__int.valueOf(arg0))

    @overload
    def setMinCheckCount(self, arg0: int):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup.setMinCheckCount(int)"""
        super(__ButtonGroup, self).setMinCheckCount(__int.valueOf(arg0))

    @overload
    def clear(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup.clear()"""
        super(ButtonGroup, self).clear()

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.lang.Object.toString()"""
        return str.__wrap(super(object, self).toString())

    @overload
    def add(self, arg0: 'Button'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup.add(T)"""
        super(__ButtonGroup, self).add(arg0)

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @overload
    def __init__(self):
        """public com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup()"""
        val = __ButtonGroup()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def setUncheckLast(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup.setUncheckLast(boolean)"""
        super(__ButtonGroup, self).setUncheckLast(__boolean.valueOf(arg0))

    @overload
    def remove(self, arg0: 'Button'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup.remove(T)"""
        super(__ButtonGroup, self).remove(arg0)

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait() 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.SplitPane
from pyquantum_helper import import_once as __import_once__
import com.badlogic.gdx.scenes.scene2d.Touchable as __Touchable
__Touchable = __Touchable
try:
    from pygdx.scenes import scene2d
except ImportError:
    scene2d = __import_once__("pygdx.scenes.scene2d")

import com.badlogic.gdx.graphics.Color as __Color
__Color = __Color
import java.lang.Boolean as __boolean
try:
    from pygdx.graphics import g2d
except ImportError:
    g2d = __import_once__("pygdx.graphics.g2d")

from builtins import type
import com.badlogic.gdx.scenes.scene2d.Group as __Group
__Group = __Group
import com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup as __WidgetGroup
__WidgetGroup = __WidgetGroup
import com.badlogic.gdx.math.Vector2 as __Vector2
__Vector2 = __Vector2
import com.badlogic.gdx.math.Rectangle as __Rectangle
__Rectangle = __Rectangle
import java.lang.Class as __Class
__Class = __Class
import com.badlogic.gdx.utils.Array as __Array
__Array = __Array
import java.lang.String as __string
import com.badlogic.gdx.scenes.scene2d.ui.SplitPane as __SplitPane
__SplitPane = __SplitPane
try:
    from pygdx import math
except ImportError:
    math = __import_once__("pygdx.math")

from builtins import bool
from builtins import str
try:
    from pygdx import utils
except ImportError:
    utils = __import_once__("pygdx.utils")

from pyquantum_helper import override
import java.lang.Object as __object
from builtins import float
from builtins import object
import com.badlogic.gdx.utils.DelayedRemovalArray as __DelayedRemovalArray
__DelayedRemovalArray = __DelayedRemovalArray
import java.lang.Long as __long
import java.lang.Float as __float
import java.lang.String as __String
__String = __String
import com.badlogic.gdx.scenes.scene2d.ui.SplitPane as __SplitPane_SplitPaneStyle
__SplitPaneStyle = __SplitPane_SplitPaneStyle.SplitPaneStyle
try:
    from pygdx.graphics import glutils
except ImportError:
    glutils = __import_once__("pygdx.graphics.glutils")

import java.lang.Object as __Object
__Object = __Object
import com.badlogic.gdx.utils.SnapshotArray as __SnapshotArray
__SnapshotArray = __SnapshotArray
import com.badlogic.gdx.scenes.scene2d.Actor as __Actor
__Actor = __Actor
import java.lang.Integer as __int
import com.badlogic.gdx.scenes.scene2d.Stage as __Stage
__Stage = __Stage
try:
    from pygdx import graphics
except ImportError:
    graphics = __import_once__("pygdx.graphics")

from builtins import int
 
class SplitPane(__WidgetGroup, WidgetGroup):
    """com.badlogic.gdx.scenes.scene2d.ui.SplitPane"""
 
    @staticmethod
    def __wrap(java_value: __SplitPane) -> 'SplitPane':
        return SplitPane(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __SplitPane):
        """
        Dynamic initializer for SplitPane.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def getY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getY()"""
        return float.__wrap(super(scene2d.Actor, self).getY())

    @overload
    def setMinSplitAmount(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.SplitPane.setMinSplitAmount(float)"""
        super(__SplitPane, self).setMinSplitAmount(__float.valueOf(arg0))

    @overload
    def localToDescendantCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Group.localToDescendantCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Group, self).localToDescendantCoordinates(arg0, arg1))

    @overload
    def setZIndex(self, arg0: int) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.setZIndex(int)"""
        return bool.__wrap(super(__scene2d.Actor, self).setZIndex(__int.valueOf(arg0)))

    @override
    @overload
    def setBounds(self, arg0: float, arg1: float, arg2: float, arg3: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setBounds(float,float,float,float)"""
        super(__scene2d.Actor, self).setBounds(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def getPrefHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.SplitPane.getPrefHeight()"""
        return float.__wrap(super(SplitPane, self).getPrefHeight())

    @overload
    def getStyle(self) -> 'SplitPaneStyle':
        """public com.badlogic.gdx.scenes.scene2d.ui.SplitPane$SplitPaneStyle com.badlogic.gdx.scenes.scene2d.ui.SplitPane.getStyle()"""
        return 'SplitPaneStyle'.__wrap(super(SplitPane, self).getStyle())

    @overload
    def getX(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getX(int)"""
        return float.__wrap(super(__scene2d.Actor, self).getX(__int.valueOf(arg0)))

    @override
    @overload
    def sizeBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.sizeBy(float)"""
        super(__scene2d.Actor, self).sizeBy(__float.valueOf(arg0))

    @overload
    def removeActor(self, arg0: 'Actor', arg1: bool) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.SplitPane.removeActor(com.badlogic.gdx.scenes.scene2d.Actor,boolean)"""
        return bool.__wrap(super(__SplitPane, self).removeActor(arg0, __boolean.valueOf(arg1)))

    @overload
    def findActor(self, arg0: str) -> 'scene2d.Actor':
        """public <T extends com.badlogic.gdx.scenes.scene2d.Actor> T com.badlogic.gdx.scenes.scene2d.Group.findActor(java.lang.String)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Group, self).findActor(arg0))

    @override
    @overload
    def invalidate(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.invalidate()"""
        super(WidgetGroup, self).invalidate()

    @override
    @overload
    def sizeBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.sizeBy(float,float)"""
        super(__scene2d.Actor, self).sizeBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def hasActions(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasActions()"""
        return bool.__wrap(super(scene2d.Actor, self).hasActions())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0))

    @override
    @overload
    def setScaleX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScaleX(float)"""
        super(__scene2d.Actor, self).setScaleX(__float.valueOf(arg0))

    @override
    @overload
    def getTouchable(self) -> 'scene2d.Touchable':
        """public com.badlogic.gdx.scenes.scene2d.Touchable com.badlogic.gdx.scenes.scene2d.Actor.getTouchable()"""
        return 'scene2d.Touchable'.__wrap(super(scene2d.Actor, self).getTouchable())

    @override
    @overload
    def removeAction(self, arg0: 'Action'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.removeAction(com.badlogic.gdx.scenes.scene2d.Action)"""
        super(__scene2d.Actor, self).removeAction(arg0)

    @override
    @overload
    def getX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getX()"""
        return float.__wrap(super(scene2d.Actor, self).getX())

    @overload
    def setStyle(self, arg0: 'SplitPaneStyle'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.SplitPane.setStyle(com.badlogic.gdx.scenes.scene2d.ui.SplitPane$SplitPaneStyle)"""
        super(__SplitPane, self).setStyle(arg0)

    @override
    @overload
    def toBack(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.toBack()"""
        super(scene2d.Actor, self).toBack()

    @override
    @overload
    def getMaxWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.getMaxWidth()"""
        return float.__wrap(super(WidgetGroup, self).getMaxWidth())

    @override
    @overload
    def setDebug(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setDebug(boolean)"""
        super(__scene2d.Actor, self).setDebug(__boolean.valueOf(arg0))

    @override
    @overload
    def setX(self, arg0: float, arg1: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setX(float,int)"""
        super(__scene2d.Actor, self).setX(__float.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def screenToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.screenToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).screenToLocalCoordinates(arg0))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def ancestorsVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.ancestorsVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).ancestorsVisible())

    @override
    @overload
    def getListeners(self) -> 'utils.DelayedRemovalArray':
        """public com.badlogic.gdx.utils.DelayedRemovalArray<com.badlogic.gdx.scenes.scene2d.EventListener> com.badlogic.gdx.scenes.scene2d.Actor.getListeners()"""
        return 'utils.DelayedRemovalArray'.__wrap(super(scene2d.Actor, self).getListeners())

    @override
    @overload
    def getMinWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.SplitPane.getMinWidth()"""
        return float.__wrap(super(SplitPane, self).getMinWidth())

    @overload
    def setSecondWidget(self, arg0: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.SplitPane.setSecondWidget(com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__SplitPane, self).setSecondWidget(arg0)

    @override
    @overload
    def debugAll(self) -> 'scene2d.Group':
        """public com.badlogic.gdx.scenes.scene2d.Group com.badlogic.gdx.scenes.scene2d.Group.debugAll()"""
        return 'scene2d.Group'.__wrap(super(scene2d.Group, self).debugAll())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def draw(self, arg0: 'Batch', arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.SplitPane.draw(com.badlogic.gdx.graphics.g2d.Batch,float)"""
        super(__SplitPane, self).draw(arg0, __float.valueOf(arg1))

    @overload
    def removeListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.removeListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).removeListener(arg0))

    @override
    @overload
    def isTouchFocusListener(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchFocusListener()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchFocusListener())

    @overload
    def localToStageCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToStageCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToStageCoordinates(arg0))

    @override
    @overload
    def setSize(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setSize(float,float)"""
        super(__scene2d.Actor, self).setSize(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def getZIndex(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.Actor.getZIndex()"""
        return int.__wrap(super(scene2d.Actor, self).getZIndex())

    @override
    @overload
    def clipBegin(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.clipBegin()"""
        return bool.__wrap(super(scene2d.Actor, self).clipBegin())

    @override
    @overload
    def getMinHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.SplitPane.getMinHeight()"""
        return float.__wrap(super(SplitPane, self).getMinHeight())

    @override
    @overload
    def moveBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.moveBy(float,float)"""
        super(__scene2d.Actor, self).moveBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def getY(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getY(int)"""
        return float.__wrap(super(__scene2d.Actor, self).getY(__int.valueOf(arg0)))

    @override
    @overload
    def setOrigin(self, arg0: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOrigin(int)"""
        super(__scene2d.Actor, self).setOrigin(__int.valueOf(arg0))

    @override
    @overload
    def validate(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.validate()"""
        super(WidgetGroup, self).validate()

    @overload
    def isDescendantOf(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isDescendantOf(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Actor, self).isDescendantOf(arg0))

    @override
    @overload
    def getParent(self) -> 'scene2d.Group':
        """public com.badlogic.gdx.scenes.scene2d.Group com.badlogic.gdx.scenes.scene2d.Actor.getParent()"""
        return 'scene2d.Group'.__wrap(super(scene2d.Actor, self).getParent())

    @override
    @overload
    def clearListeners(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clearListeners()"""
        super(scene2d.Actor, self).clearListeners()

    @overload
    def localToActorCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToActorCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToActorCoordinates(arg0, arg1))

    @override
    @overload
    def setName(self, arg0: str):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setName(java.lang.String)"""
        super(__scene2d.Actor, self).setName(arg0)

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @override
    @overload
    def setOriginX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOriginX(float)"""
        super(__scene2d.Actor, self).setOriginX(__float.valueOf(arg0))

    @override
    @overload
    def getHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getHeight()"""
        return float.__wrap(super(scene2d.Actor, self).getHeight())

    @overload
    def swapActor(self, arg0: 'Actor', arg1: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.swapActor(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Group, self).swapActor(arg0, arg1))

    @override
    @overload
    def hasKeyboardFocus(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasKeyboardFocus()"""
        return bool.__wrap(super(scene2d.Actor, self).hasKeyboardFocus())

    @override
    @overload
    def layout(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.SplitPane.layout()"""
        super(SplitPane, self).layout()

    @override
    @overload
    def getOriginY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getOriginY()"""
        return float.__wrap(super(scene2d.Actor, self).getOriginY())

    @override
    @overload
    def pack(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.pack()"""
        super(WidgetGroup, self).pack()

    @override
    @overload
    def clipEnd(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clipEnd()"""
        super(scene2d.Actor, self).clipEnd()

    @override
    @overload
    def getUserObject(self) -> object:
        """public java.lang.Object com.badlogic.gdx.scenes.scene2d.Actor.getUserObject()"""
        return object.__wrap(super(scene2d.Actor, self).getUserObject())

    @overload
    def removeActor(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.SplitPane.removeActor(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__SplitPane, self).removeActor(arg0))

    @override
    @overload
    def getDebug(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.getDebug()"""
        return bool.__wrap(super(scene2d.Actor, self).getDebug())

    @override
    @overload
    def setHeight(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setHeight(float)"""
        super(__scene2d.Actor, self).setHeight(__float.valueOf(arg0))

    @override
    @overload
    def setScale(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScale(float)"""
        super(__scene2d.Actor, self).setScale(__float.valueOf(arg0))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def rotateBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.rotateBy(float)"""
        super(__scene2d.Actor, self).rotateBy(__float.valueOf(arg0))

    @override
    @overload
    def setDebug(self, arg0: bool, arg1: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Group.setDebug(boolean,boolean)"""
        super(__scene2d.Group, self).setDebug(__boolean.valueOf(arg0), __boolean.valueOf(arg1))

    @override
    @overload
    def addActor(self, arg0: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.SplitPane.addActor(com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__SplitPane, self).addActor(arg0)

    @override
    @overload
    def drawDebug(self, arg0: 'ShapeRenderer'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.drawDebug(com.badlogic.gdx.graphics.glutils.ShapeRenderer)"""
        super(__scene2d.Group, self).drawDebug(arg0)

    @override
    @overload
    def setScale(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScale(float,float)"""
        super(__scene2d.Actor, self).setScale(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def setTransform(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Group.setTransform(boolean)"""
        super(__scene2d.Group, self).setTransform(__boolean.valueOf(arg0))

    @overload
    def addListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.addListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).addListener(arg0))

    @overload
    def isCursorOverHandle(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.SplitPane.isCursorOverHandle()"""
        return bool.__wrap(super(SplitPane, self).isCursorOverHandle())

    @overload
    def setMaxSplitAmount(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.SplitPane.setMaxSplitAmount(float)"""
        super(__SplitPane, self).setMaxSplitAmount(__float.valueOf(arg0))

    @overload
    def parentToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.parentToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).parentToLocalCoordinates(arg0))

    @override
    @overload
    def getRotation(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getRotation()"""
        return float.__wrap(super(scene2d.Actor, self).getRotation())

    @override
    @overload
    def setVisible(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setVisible(boolean)"""
        super(__scene2d.Actor, self).setVisible(__boolean.valueOf(arg0))

    @override
    @overload
    def setY(self, arg0: float, arg1: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setY(float,int)"""
        super(__scene2d.Actor, self).setY(__float.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def setFillParent(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.setFillParent(boolean)"""
        super(__WidgetGroup, self).setFillParent(__boolean.valueOf(arg0))

    @override
    @overload
    def getMaxHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.getMaxHeight()"""
        return float.__wrap(super(WidgetGroup, self).getMaxHeight())

    @override
    @overload
    def needsLayout(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.needsLayout()"""
        return bool.__wrap(super(WidgetGroup, self).needsLayout())

    @override
    @overload
    def setX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setX(float)"""
        super(__scene2d.Actor, self).setX(__float.valueOf(arg0))

    @override
    @overload
    def setOrigin(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOrigin(float,float)"""
        super(__scene2d.Actor, self).setOrigin(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def __init__(self, arg0: 'Actor', arg1: 'Actor', arg2: bool, arg3: 'Skin', arg4: str):
        """public com.badlogic.gdx.scenes.scene2d.ui.SplitPane(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor,boolean,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String)"""
        val = __SplitPane(arg0, arg1, __boolean.valueOf(arg2), arg3, arg4)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def getCullingArea(self) -> 'math.Rectangle':
        """public com.badlogic.gdx.math.Rectangle com.badlogic.gdx.scenes.scene2d.Group.getCullingArea()"""
        return 'math.Rectangle'.__wrap(super(scene2d.Group, self).getCullingArea())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def getRight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getRight()"""
        return float.__wrap(super(scene2d.Actor, self).getRight())

    @overload
    def isAscendantOf(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isAscendantOf(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Actor, self).isAscendantOf(arg0))

    @override
    @overload
    def setWidth(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setWidth(float)"""
        super(__scene2d.Actor, self).setWidth(__float.valueOf(arg0))

    @override
    @overload
    def isTouchFocusTarget(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchFocusTarget()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchFocusTarget())

    @override
    @overload
    def hasParent(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasParent()"""
        return bool.__wrap(super(scene2d.Actor, self).hasParent())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.Group.toString()"""
        return str.__wrap(super(scene2d.Group, self).toString())

    @override
    @overload
    def setPosition(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setPosition(float,float)"""
        super(__scene2d.Actor, self).setPosition(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def getChildren(self) -> 'utils.SnapshotArray':
        """public com.badlogic.gdx.utils.SnapshotArray<com.badlogic.gdx.scenes.scene2d.Actor> com.badlogic.gdx.scenes.scene2d.Group.getChildren()"""
        return 'utils.SnapshotArray'.__wrap(super(scene2d.Group, self).getChildren())

    @override
    @overload
    def getScaleY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getScaleY()"""
        return float.__wrap(super(scene2d.Actor, self).getScaleY())

    @override
    @overload
    def getWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getWidth()"""
        return float.__wrap(super(scene2d.Actor, self).getWidth())

    @override
    @overload
    def setOriginY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOriginY(float)"""
        super(__scene2d.Actor, self).setOriginY(__float.valueOf(arg0))

    @override
    @overload
    def setPosition(self, arg0: float, arg1: float, arg2: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setPosition(float,float,int)"""
        super(__scene2d.Actor, self).setPosition(__float.valueOf(arg0), __float.valueOf(arg1), __int.valueOf(arg2))

    @override
    @overload
    def setLayoutEnabled(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.setLayoutEnabled(boolean)"""
        super(__WidgetGroup, self).setLayoutEnabled(__boolean.valueOf(arg0))

    @overload
    def removeCaptureListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.removeCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).removeCaptureListener(arg0))

    @override
    @overload
    def invalidateHierarchy(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.invalidateHierarchy()"""
        super(WidgetGroup, self).invalidateHierarchy()

    @overload
    def setVertical(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.SplitPane.setVertical(boolean)"""
        super(__SplitPane, self).setVertical(__boolean.valueOf(arg0))

    @override
    @overload
    def setColor(self, arg0: 'Color'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setColor(com.badlogic.gdx.graphics.Color)"""
        super(__scene2d.Actor, self).setColor(arg0)

    @overload
    def localToScreenCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToScreenCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToScreenCoordinates(arg0))

    @override
    @overload
    def clear(self):
        """public void com.badlogic.gdx.scenes.scene2d.Group.clear()"""
        super(scene2d.Group, self).clear()

    @override
    @overload
    def setTouchable(self, arg0: 'Touchable'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setTouchable(com.badlogic.gdx.scenes.scene2d.Touchable)"""
        super(__scene2d.Actor, self).setTouchable(arg0)

    @overload
    def addCaptureListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.addCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).addCaptureListener(arg0))

    @overload
    def fire(self, arg0: 'Event') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.fire(com.badlogic.gdx.scenes.scene2d.Event)"""
        return bool.__wrap(super(__scene2d.Actor, self).fire(arg0))

    @override
    @overload
    def remove(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.remove()"""
        return bool.__wrap(super(scene2d.Actor, self).remove())

    @overload
    def hit(self, arg0: float, arg1: float, arg2: bool) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.hit(float,float,boolean)"""
        return 'scene2d.Actor'.__wrap(super(__WidgetGroup, self).hit(__float.valueOf(arg0), __float.valueOf(arg1), __boolean.valueOf(arg2)))

    @override
    @overload
    def clearChildren(self):
        """public void com.badlogic.gdx.scenes.scene2d.Group.clearChildren()"""
        super(scene2d.Group, self).clearChildren()

    @overload
    def getSplitAmount(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.SplitPane.getSplitAmount()"""
        return float.__wrap(super(SplitPane, self).getSplitAmount())

    @overload
    def localToParentCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToParentCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToParentCoordinates(arg0))

    @override
    @overload
    def setCullingArea(self, arg0: 'Rectangle'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.setCullingArea(com.badlogic.gdx.math.Rectangle)"""
        super(__scene2d.Group, self).setCullingArea(arg0)

    @override
    @overload
    def getName(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.Actor.getName()"""
        return str.__wrap(super(scene2d.Actor, self).getName())

    @override
    @overload
    def isVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).isVisible())

    @overload
    def __init__(self, arg0: 'Actor', arg1: 'Actor', arg2: bool, arg3: 'Skin'):
        """public com.badlogic.gdx.scenes.scene2d.ui.SplitPane(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor,boolean,com.badlogic.gdx.scenes.scene2d.ui.Skin)"""
        val = __SplitPane(arg0, arg1, __boolean.valueOf(arg2), arg3)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def getCaptureListeners(self) -> 'utils.DelayedRemovalArray':
        """public com.badlogic.gdx.utils.DelayedRemovalArray<com.badlogic.gdx.scenes.scene2d.EventListener> com.badlogic.gdx.scenes.scene2d.Actor.getCaptureListeners()"""
        return 'utils.DelayedRemovalArray'.__wrap(super(scene2d.Actor, self).getCaptureListeners())

    @override
    @overload
    def debug(self) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.Actor.debug()"""
        return 'scene2d.Actor'.__wrap(super(scene2d.Actor, self).debug())

    @override
    @overload
    def clear(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Group.clear(boolean)"""
        super(__scene2d.Group, self).clear(__boolean.valueOf(arg0))

    @override
    @overload
    def getTop(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getTop()"""
        return float.__wrap(super(scene2d.Actor, self).getTop())

    @override
    @overload
    def setY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setY(float)"""
        super(__scene2d.Actor, self).setY(__float.valueOf(arg0))

    @override
    @overload
    def clearActions(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clearActions()"""
        super(scene2d.Actor, self).clearActions()

    @override
    @overload
    def addActorAfter(self, arg0: 'Actor', arg1: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.addActorAfter(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__scene2d.Group, self).addActorAfter(arg0, arg1)

    @override
    @overload
    def scaleBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.scaleBy(float,float)"""
        super(__scene2d.Actor, self).scaleBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def setRotation(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setRotation(float)"""
        super(__scene2d.Actor, self).setRotation(__float.valueOf(arg0))

    @override
    @overload
    def addActorAt(self, arg0: int, arg1: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.SplitPane.addActorAt(int,com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__SplitPane, self).addActorAt(__int.valueOf(arg0), arg1)

    @override
    @overload
    def getPrefWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.SplitPane.getPrefWidth()"""
        return float.__wrap(super(SplitPane, self).getPrefWidth())

    @override
    @overload
    def getScaleX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getScaleX()"""
        return float.__wrap(super(scene2d.Actor, self).getScaleX())

    @overload
    def firstAscendant(self, arg0: 'Class') -> 'scene2d.Actor':
        """public <T extends com.badlogic.gdx.scenes.scene2d.Actor> T com.badlogic.gdx.scenes.scene2d.Actor.firstAscendant(java.lang.Class<T>)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Actor, self).firstAscendant(arg0))

    @overload
    def notify(self, arg0: 'Event', arg1: bool) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.notify(com.badlogic.gdx.scenes.scene2d.Event,boolean)"""
        return bool.__wrap(super(__scene2d.Actor, self).notify(arg0, __boolean.valueOf(arg1)))

    @override
    @overload
    def act(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Group.act(float)"""
        super(__scene2d.Group, self).act(__float.valueOf(arg0))

    @override
    @overload
    def setUserObject(self, arg0: object):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setUserObject(java.lang.Object)"""
        super(__scene2d.Actor, self).setUserObject(arg0)

    @override
    @overload
    def setScaleY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScaleY(float)"""
        super(__scene2d.Actor, self).setScaleY(__float.valueOf(arg0))

    @override
    @overload
    def hasScrollFocus(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasScrollFocus()"""
        return bool.__wrap(super(scene2d.Actor, self).hasScrollFocus())

    @override
    @overload
    def toFront(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.toFront()"""
        super(scene2d.Actor, self).toFront()

    @override
    @overload
    def scaleBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.scaleBy(float)"""
        super(__scene2d.Actor, self).scaleBy(__float.valueOf(arg0))

    @overload
    def stageToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.stageToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).stageToLocalCoordinates(arg0))

    @overload
    def getMinSplitAmount(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.SplitPane.getMinSplitAmount()"""
        return float.__wrap(super(SplitPane, self).getMinSplitAmount())

    @overload
    def swapActor(self, arg0: int, arg1: int) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.swapActor(int,int)"""
        return bool.__wrap(super(__scene2d.Group, self).swapActor(__int.valueOf(arg0), __int.valueOf(arg1)))

    @overload
    def setFirstWidget(self, arg0: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.SplitPane.setFirstWidget(com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__SplitPane, self).setFirstWidget(arg0)

    @override
    @overload
    def getOriginX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getOriginX()"""
        return float.__wrap(super(scene2d.Actor, self).getOriginX())

    @overload
    def getChild(self, arg0: int) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.Group.getChild(int)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Group, self).getChild(__int.valueOf(arg0)))

    @override
    @overload
    def hasChildren(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.hasChildren()"""
        return bool.__wrap(super(scene2d.Group, self).hasChildren())

    @override
    @overload
    def ascendantsVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.ascendantsVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).ascendantsVisible())

    @overload
    def setSplitAmount(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.SplitPane.setSplitAmount(float)"""
        super(__SplitPane, self).setSplitAmount(__float.valueOf(arg0))

    @overload
    def getMaxSplitAmount(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.SplitPane.getMaxSplitAmount()"""
        return float.__wrap(super(SplitPane, self).getMaxSplitAmount())

    @override
    @overload
    def clearChildren(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Group.clearChildren(boolean)"""
        super(__scene2d.Group, self).clearChildren(__boolean.valueOf(arg0))

    @override
    @overload
    def getColor(self) -> 'graphics.Color':
        """public com.badlogic.gdx.graphics.Color com.badlogic.gdx.scenes.scene2d.Actor.getColor()"""
        return 'graphics.Color'.__wrap(super(scene2d.Actor, self).getColor())

    @override
    @overload
    def isTransform(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.isTransform()"""
        return bool.__wrap(super(scene2d.Group, self).isTransform())

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @override
    @overload
    def getStage(self) -> 'scene2d.Stage':
        """public com.badlogic.gdx.scenes.scene2d.Stage com.badlogic.gdx.scenes.scene2d.Actor.getStage()"""
        return 'scene2d.Stage'.__wrap(super(scene2d.Actor, self).getStage())

    @override
    @overload
    def addAction(self, arg0: 'Action'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.addAction(com.badlogic.gdx.scenes.scene2d.Action)"""
        super(__scene2d.Actor, self).addAction(arg0)

    @override
    @overload
    def addActorBefore(self, arg0: 'Actor', arg1: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.SplitPane.addActorBefore(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__SplitPane, self).addActorBefore(arg0, arg1)

    @overload
    def __init__(self, arg0: 'Actor', arg1: 'Actor', arg2: bool, arg3: 'SplitPaneStyle'):
        """public com.badlogic.gdx.scenes.scene2d.ui.SplitPane(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor,boolean,com.badlogic.gdx.scenes.scene2d.ui.SplitPane$SplitPaneStyle)"""
        val = __SplitPane(arg0, arg1, __boolean.valueOf(arg2), arg3)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def setColor(self, arg0: float, arg1: float, arg2: float, arg3: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setColor(float,float,float,float)"""
        super(__scene2d.Actor, self).setColor(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3))

    @override
    @overload
    def isTouchable(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchable()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchable())

    @overload
    def isVertical(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.SplitPane.isVertical()"""
        return bool.__wrap(super(SplitPane, self).isVertical())

    @overload
    def localToAscendantCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToAscendantCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToAscendantCoordinates(arg0, arg1))

    @overload
    def clipBegin(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.clipBegin(float,float,float,float)"""
        return bool.__wrap(super(__scene2d.Actor, self).clipBegin(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3)))

    @override
    @overload
    def getActions(self) -> 'utils.Array':
        """public com.badlogic.gdx.utils.Array<com.badlogic.gdx.scenes.scene2d.Action> com.badlogic.gdx.scenes.scene2d.Actor.getActions()"""
        return 'utils.Array'.__wrap(super(scene2d.Actor, self).getActions())

    @overload
    def removeActorAt(self, arg0: int, arg1: bool) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.ui.SplitPane.removeActorAt(int,boolean)"""
        return 'scene2d.Actor'.__wrap(super(__SplitPane, self).removeActorAt(__int.valueOf(arg0), __boolean.valueOf(arg1))) 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.TextTooltip
from pyquantum_helper import import_once as __import_once__
try:
    from pygdx.scenes import scene2d
except ImportError:
    scene2d = __import_once__("pygdx.scenes.scene2d")

from builtins import str
import java.lang.Character as __char
from pyquantum_helper import override
import java.lang.Boolean as __boolean
import java.lang.Object as __object
from builtins import type
import com.badlogic.gdx.scenes.scene2d.ui.TextTooltip as __TextTooltip
__TextTooltip = __TextTooltip
import com.badlogic.gdx.scenes.scene2d.InputListener as __InputListener
__InputListener = __InputListener
import java.lang.Long as __long
import java.lang.Float as __float
import java.lang.Class as __Class
__Class = __Class
import com.badlogic.gdx.scenes.scene2d.ui.TooltipManager as __TooltipManager
__TooltipManager = __TooltipManager
import com.badlogic.gdx.scenes.scene2d.ui.Container as __Container
__Container = __Container
import java.lang.String as __String
__String = __String
import java.lang.String as __string
import java.lang.Object as __Object
__Object = __Object
import com.badlogic.gdx.scenes.scene2d.ui.Tooltip as __Tooltip
__Tooltip = __Tooltip
import com.badlogic.gdx.scenes.scene2d.Actor as __Actor
__Actor = __Actor
import java.lang.Integer as __int
from builtins import bool
from builtins import int
 
class TextTooltip(__Tooltip, Tooltip):
    """com.badlogic.gdx.scenes.scene2d.ui.TextTooltip"""
 
    @staticmethod
    def __wrap(java_value: __TextTooltip) -> 'TextTooltip':
        return TextTooltip(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __TextTooltip):
        """
        Dynamic initializer for TextTooltip.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def __init__(self, arg0: str, arg1: 'TooltipManager', arg2: 'Skin'):
        """public com.badlogic.gdx.scenes.scene2d.ui.TextTooltip(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.TooltipManager,com.badlogic.gdx.scenes.scene2d.ui.Skin)"""
        val = __TextTooltip(arg0, arg1, arg2)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def getContainer(self) -> 'Container':
        """public com.badlogic.gdx.scenes.scene2d.ui.Container<T> com.badlogic.gdx.scenes.scene2d.ui.Tooltip.getContainer()"""
        return 'Container'.__wrap(super(Tooltip, self).getContainer())

    @override
    @overload
    def touchDragged(self, arg0: 'InputEvent', arg1: float, arg2: float, arg3: int):
        """public void com.badlogic.gdx.scenes.scene2d.InputListener.touchDragged(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int)"""
        super(__scene2d.InputListener, self).touchDragged(arg0, __float.valueOf(arg1), __float.valueOf(arg2), __int.valueOf(arg3))

    @override
    @overload
    def getManager(self) -> 'TooltipManager':
        """public com.badlogic.gdx.scenes.scene2d.ui.TooltipManager com.badlogic.gdx.scenes.scene2d.ui.Tooltip.getManager()"""
        return 'TooltipManager'.__wrap(super(Tooltip, self).getManager())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @override
    @overload
    def setInstant(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Tooltip.setInstant(boolean)"""
        super(__Tooltip, self).setInstant(__boolean.valueOf(arg0))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0))

    @overload
    def __init__(self, arg0: str, arg1: 'TooltipManager', arg2: 'Skin', arg3: str):
        """public com.badlogic.gdx.scenes.scene2d.ui.TextTooltip(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.TooltipManager,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String)"""
        val = __TextTooltip(arg0, arg1, arg2, arg3)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def hide(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Tooltip.hide()"""
        super(Tooltip, self).hide()

    @override
    @overload
    def touchUp(self, arg0: 'InputEvent', arg1: float, arg2: float, arg3: int, arg4: int):
        """public void com.badlogic.gdx.scenes.scene2d.InputListener.touchUp(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int)"""
        super(__scene2d.InputListener, self).touchUp(arg0, __float.valueOf(arg1), __float.valueOf(arg2), __int.valueOf(arg3), __int.valueOf(arg4))

    @overload
    def __init__(self, arg0: str, arg1: 'TooltipManager', arg2: 'TextTooltipStyle'):
        """public com.badlogic.gdx.scenes.scene2d.ui.TextTooltip(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.TooltipManager,com.badlogic.gdx.scenes.scene2d.ui.TextTooltip$TextTooltipStyle)"""
        val = __TextTooltip(arg0, arg1, arg2)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def __init__(self, arg0: str, arg1: 'TextTooltipStyle'):
        """public com.badlogic.gdx.scenes.scene2d.ui.TextTooltip(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.TextTooltip$TextTooltipStyle)"""
        val = __TextTooltip(arg0, arg1)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.lang.Object.toString()"""
        return str.__wrap(super(object, self).toString())

    @override
    @overload
    def setAlways(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Tooltip.setAlways(boolean)"""
        super(__Tooltip, self).setAlways(__boolean.valueOf(arg0))

    @overload
    def __init__(self, arg0: str, arg1: 'Skin', arg2: str):
        """public com.badlogic.gdx.scenes.scene2d.ui.TextTooltip(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String)"""
        val = __TextTooltip(arg0, arg1, arg2)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def setStyle(self, arg0: 'TextTooltipStyle'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextTooltip.setStyle(com.badlogic.gdx.scenes.scene2d.ui.TextTooltip$TextTooltipStyle)"""
        super(__TextTooltip, self).setStyle(arg0)

    @override
    @overload
    def enter(self, arg0: 'InputEvent', arg1: float, arg2: float, arg3: int, arg4: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Tooltip.enter(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__Tooltip, self).enter(arg0, __float.valueOf(arg1), __float.valueOf(arg2), __int.valueOf(arg3), arg4)

    @overload
    def keyTyped(self, arg0: 'InputEvent', arg1: str) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.InputListener.keyTyped(com.badlogic.gdx.scenes.scene2d.InputEvent,char)"""
        return bool.__wrap(super(__scene2d.InputListener, self).keyTyped(arg0, __char.valueOf(arg1)))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @overload
    def __init__(self, arg0: str, arg1: 'Skin'):
        """public com.badlogic.gdx.scenes.scene2d.ui.TextTooltip(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin)"""
        val = __TextTooltip(arg0, arg1)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def setActor(self, arg0: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Tooltip.setActor(T)"""
        super(__Tooltip, self).setActor(arg0)

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @override
    @overload
    def setTouchIndependent(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Tooltip.setTouchIndependent(boolean)"""
        super(__Tooltip, self).setTouchIndependent(__boolean.valueOf(arg0))

    @overload
    def keyDown(self, arg0: 'InputEvent', arg1: int) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.InputListener.keyDown(com.badlogic.gdx.scenes.scene2d.InputEvent,int)"""
        return bool.__wrap(super(__scene2d.InputListener, self).keyDown(arg0, __int.valueOf(arg1)))

    @overload
    def scrolled(self, arg0: 'InputEvent', arg1: float, arg2: float, arg3: float, arg4: float) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.InputListener.scrolled(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,float,float)"""
        return bool.__wrap(super(__scene2d.InputListener, self).scrolled(arg0, __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3), __float.valueOf(arg4)))

    @overload
    def keyUp(self, arg0: 'InputEvent', arg1: int) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.InputListener.keyUp(com.badlogic.gdx.scenes.scene2d.InputEvent,int)"""
        return bool.__wrap(super(__scene2d.InputListener, self).keyUp(arg0, __int.valueOf(arg1)))

    @overload
    def handle(self, arg0: 'Event') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.InputListener.handle(com.badlogic.gdx.scenes.scene2d.Event)"""
        return bool.__wrap(super(__scene2d.InputListener, self).handle(arg0))

    @override
    @overload
    def getActor(self) -> 'scene2d.Actor':
        """public T com.badlogic.gdx.scenes.scene2d.ui.Tooltip.getActor()"""
        return 'scene2d.Actor'.__wrap(super(Tooltip, self).getActor())

    @override
    @overload
    def exit(self, arg0: 'InputEvent', arg1: float, arg2: float, arg3: int, arg4: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Tooltip.exit(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__Tooltip, self).exit(arg0, __float.valueOf(arg1), __float.valueOf(arg2), __int.valueOf(arg3), arg4)

    @overload
    def mouseMoved(self, arg0: 'InputEvent', arg1: float, arg2: float) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Tooltip.mouseMoved(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float)"""
        return bool.__wrap(super(__Tooltip, self).mouseMoved(arg0, __float.valueOf(arg1), __float.valueOf(arg2)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def touchDown(self, arg0: 'InputEvent', arg1: float, arg2: float, arg3: int, arg4: int) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Tooltip.touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int)"""
        return bool.__wrap(super(__Tooltip, self).touchDown(arg0, __float.valueOf(arg1), __float.valueOf(arg2), __int.valueOf(arg3), __int.valueOf(arg4))) 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.TextArea$TextAreaListener
from pyquantum_helper import import_once as __import_once__
try:
    from pygdx.scenes import scene2d
except ImportError:
    scene2d = __import_once__("pygdx.scenes.scene2d")

from builtins import str
import java.lang.Character as __char
from pyquantum_helper import override
import java.lang.Boolean as __boolean
import java.lang.Object as __object
from builtins import type
from builtins import float
import com.badlogic.gdx.scenes.scene2d.InputListener as __InputListener
__InputListener = __InputListener
import com.badlogic.gdx.scenes.scene2d.utils.ClickListener as __ClickListener
__ClickListener = __ClickListener
import java.lang.Long as __long
import java.lang.Float as __float
import java.lang.Class as __Class
__Class = __Class
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import com.badlogic.gdx.scenes.scene2d.ui.TextArea as __TextArea_TextAreaListener
__TextAreaListener = __TextArea_TextAreaListener.TextAreaListener
import java.lang.Integer as __int
import com.badlogic.gdx.scenes.scene2d.ui.TextField as __TextField_TextFieldClickListener
__TextFieldClickListener = __TextField_TextFieldClickListener.TextFieldClickListener
from builtins import bool
from builtins import int
 
class TextAreaListener(__TextFieldClickListener, TextFieldClickListener):
    """com.badlogic.gdx.scenes.scene2d.ui.TextArea.TextAreaListener"""
 
    @staticmethod
    def __wrap(java_value: __TextAreaListener) -> 'TextAreaListener':
        return TextAreaListener(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __TextAreaListener):
        """
        Dynamic initializer for TextAreaListener.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def clicked(self, arg0: 'InputEvent', arg1: float, arg2: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldClickListener.clicked(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float)"""
        super(__TextFieldClickListener, self).clicked(arg0, __float.valueOf(arg1), __float.valueOf(arg2))

    @override
    @overload
    def setButton(self, arg0: int):
        """public void com.badlogic.gdx.scenes.scene2d.utils.ClickListener.setButton(int)"""
        super(__utils.ClickListener, self).setButton(__int.valueOf(arg0))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def getTouchDownY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.utils.ClickListener.getTouchDownY()"""
        return float.__wrap(super(utils.ClickListener, self).getTouchDownY())

    @overload
    def inTapSquare(self, arg0: float, arg1: float) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.utils.ClickListener.inTapSquare(float,float)"""
        return bool.__wrap(super(__utils.ClickListener, self).inTapSquare(__float.valueOf(arg0), __float.valueOf(arg1)))

    @override
    @overload
    def touchDragged(self, arg0: 'InputEvent', arg1: float, arg2: float, arg3: int):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldClickListener.touchDragged(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int)"""
        super(__TextFieldClickListener, self).touchDragged(arg0, __float.valueOf(arg1), __float.valueOf(arg2), __int.valueOf(arg3))

    @override
    @overload
    def getButton(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.utils.ClickListener.getButton()"""
        return int.__wrap(super(utils.ClickListener, self).getButton())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def getTapSquareSize(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.utils.ClickListener.getTapSquareSize()"""
        return float.__wrap(super(utils.ClickListener, self).getTapSquareSize())

    @overload
    def touchDown(self, arg0: 'InputEvent', arg1: float, arg2: float, arg3: int, arg4: int) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldClickListener.touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int)"""
        return bool.__wrap(super(__TextFieldClickListener, self).touchDown(arg0, __float.valueOf(arg1), __float.valueOf(arg2), __int.valueOf(arg3), __int.valueOf(arg4)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def enter(self, arg0: 'InputEvent', arg1: float, arg2: float, arg3: int, arg4: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.utils.ClickListener.enter(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__utils.ClickListener, self).enter(arg0, __float.valueOf(arg1), __float.valueOf(arg2), __int.valueOf(arg3), arg4)

    @override
    @overload
    def setVisualPressed(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.utils.ClickListener.setVisualPressed(boolean)"""
        super(__utils.ClickListener, self).setVisualPressed(__boolean.valueOf(arg0))

    @override
    @overload
    def inTapSquare(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.utils.ClickListener.inTapSquare()"""
        return bool.__wrap(super(utils.ClickListener, self).inTapSquare())

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0))

    @overload
    def keyTyped(self, arg0: 'InputEvent', arg1: str) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.TextArea$TextAreaListener.keyTyped(com.badlogic.gdx.scenes.scene2d.InputEvent,char)"""
        return bool.__wrap(super(__TextAreaListener, self).keyTyped(arg0, __char.valueOf(arg1)))

    @override
    @overload
    def setTapCount(self, arg0: int):
        """public void com.badlogic.gdx.scenes.scene2d.utils.ClickListener.setTapCount(int)"""
        super(__utils.ClickListener, self).setTapCount(__int.valueOf(arg0))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.lang.Object.toString()"""
        return str.__wrap(super(object, self).toString())

    @override
    @overload
    def getPressedButton(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.utils.ClickListener.getPressedButton()"""
        return int.__wrap(super(utils.ClickListener, self).getPressedButton())

    @overload
    def mouseMoved(self, arg0: 'InputEvent', arg1: float, arg2: float) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.InputListener.mouseMoved(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float)"""
        return bool.__wrap(super(__scene2d.InputListener, self).mouseMoved(arg0, __float.valueOf(arg1), __float.valueOf(arg2)))

    @override
    @overload
    def invalidateTapSquare(self):
        """public void com.badlogic.gdx.scenes.scene2d.utils.ClickListener.invalidateTapSquare()"""
        super(utils.ClickListener, self).invalidateTapSquare()

    @override
    @overload
    def getPressedPointer(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.utils.ClickListener.getPressedPointer()"""
        return int.__wrap(super(utils.ClickListener, self).getPressedPointer())

    @override
    @overload
    def isOver(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.utils.ClickListener.isOver()"""
        return bool.__wrap(super(utils.ClickListener, self).isOver())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def setTapSquareSize(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.utils.ClickListener.setTapSquareSize(float)"""
        super(__utils.ClickListener, self).setTapSquareSize(__float.valueOf(arg0))

    @override
    @overload
    def isPressed(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.utils.ClickListener.isPressed()"""
        return bool.__wrap(super(utils.ClickListener, self).isPressed())

    @override
    @overload
    def setTapCountInterval(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.utils.ClickListener.setTapCountInterval(float)"""
        super(__utils.ClickListener, self).setTapCountInterval(__float.valueOf(arg0))

    @override
    @overload
    def isVisualPressed(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.utils.ClickListener.isVisualPressed()"""
        return bool.__wrap(super(utils.ClickListener, self).isVisualPressed())

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def keyDown(self, arg0: 'InputEvent', arg1: int) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.TextArea$TextAreaListener.keyDown(com.badlogic.gdx.scenes.scene2d.InputEvent,int)"""
        return bool.__wrap(super(__TextAreaListener, self).keyDown(arg0, __int.valueOf(arg1)))

    @overload
    def isOver(self, arg0: 'Actor', arg1: float, arg2: float) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.utils.ClickListener.isOver(com.badlogic.gdx.scenes.scene2d.Actor,float,float)"""
        return bool.__wrap(super(__utils.ClickListener, self).isOver(arg0, __float.valueOf(arg1), __float.valueOf(arg2)))

    @overload
    def scrolled(self, arg0: 'InputEvent', arg1: float, arg2: float, arg3: float, arg4: float) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.InputListener.scrolled(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,float,float)"""
        return bool.__wrap(super(__scene2d.InputListener, self).scrolled(arg0, __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3), __float.valueOf(arg4)))

    @override
    @overload
    def getTapCount(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.utils.ClickListener.getTapCount()"""
        return int.__wrap(super(utils.ClickListener, self).getTapCount())

    @overload
    def handle(self, arg0: 'Event') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.InputListener.handle(com.badlogic.gdx.scenes.scene2d.Event)"""
        return bool.__wrap(super(__scene2d.InputListener, self).handle(arg0))

    @override
    @overload
    def exit(self, arg0: 'InputEvent', arg1: float, arg2: float, arg3: int, arg4: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.utils.ClickListener.exit(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__utils.ClickListener, self).exit(arg0, __float.valueOf(arg1), __float.valueOf(arg2), __int.valueOf(arg3), arg4)

    @override
    @overload
    def cancel(self):
        """public void com.badlogic.gdx.scenes.scene2d.utils.ClickListener.cancel()"""
        super(utils.ClickListener, self).cancel()

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def __init__(self, arg0: 'TextArea'):
        """public com.badlogic.gdx.scenes.scene2d.ui.TextArea$TextAreaListener(com.badlogic.gdx.scenes.scene2d.ui.TextArea)"""
        val = __TextAreaListener(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def keyUp(self, arg0: 'InputEvent', arg1: int) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldClickListener.keyUp(com.badlogic.gdx.scenes.scene2d.InputEvent,int)"""
        return bool.__wrap(super(__TextFieldClickListener, self).keyUp(arg0, __int.valueOf(arg1)))

    @override
    @overload
    def touchUp(self, arg0: 'InputEvent', arg1: float, arg2: float, arg3: int, arg4: int):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldClickListener.touchUp(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int)"""
        super(__TextFieldClickListener, self).touchUp(arg0, __float.valueOf(arg1), __float.valueOf(arg2), __int.valueOf(arg3), __int.valueOf(arg4))

    @override
    @overload
    def getTouchDownX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.utils.ClickListener.getTouchDownX()"""
        return float.__wrap(super(utils.ClickListener, self).getTouchDownX()) 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldClickListener
from pyquantum_helper import import_once as __import_once__
try:
    from pygdx.scenes import scene2d
except ImportError:
    scene2d = __import_once__("pygdx.scenes.scene2d")

from builtins import str
import java.lang.Character as __char
from pyquantum_helper import override
import java.lang.Boolean as __boolean
import java.lang.Object as __object
from builtins import type
from builtins import float
import com.badlogic.gdx.scenes.scene2d.InputListener as __InputListener
__InputListener = __InputListener
import com.badlogic.gdx.scenes.scene2d.utils.ClickListener as __ClickListener
__ClickListener = __ClickListener
import java.lang.Long as __long
import java.lang.Float as __float
import java.lang.Class as __Class
__Class = __Class
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import com.badlogic.gdx.scenes.scene2d.ui.TextField as __TextField_TextFieldClickListener
__TextFieldClickListener = __TextField_TextFieldClickListener.TextFieldClickListener
import java.lang.Integer as __int
from builtins import bool
from builtins import int
 
class TextFieldClickListener(scene2d.__ClickListener, utils.ClickListener):
    """com.badlogic.gdx.scenes.scene2d.ui.TextField.TextFieldClickListener"""
 
    @staticmethod
    def __wrap(java_value: __TextFieldClickListener) -> 'TextFieldClickListener':
        return TextFieldClickListener(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __TextFieldClickListener):
        """
        Dynamic initializer for TextFieldClickListener.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def clicked(self, arg0: 'InputEvent', arg1: float, arg2: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldClickListener.clicked(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float)"""
        super(__TextFieldClickListener, self).clicked(arg0, __float.valueOf(arg1), __float.valueOf(arg2))

    @override
    @overload
    def setButton(self, arg0: int):
        """public void com.badlogic.gdx.scenes.scene2d.utils.ClickListener.setButton(int)"""
        super(__utils.ClickListener, self).setButton(__int.valueOf(arg0))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def getTouchDownY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.utils.ClickListener.getTouchDownY()"""
        return float.__wrap(super(utils.ClickListener, self).getTouchDownY())

    @overload
    def inTapSquare(self, arg0: float, arg1: float) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.utils.ClickListener.inTapSquare(float,float)"""
        return bool.__wrap(super(__utils.ClickListener, self).inTapSquare(__float.valueOf(arg0), __float.valueOf(arg1)))

    @override
    @overload
    def touchDragged(self, arg0: 'InputEvent', arg1: float, arg2: float, arg3: int):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldClickListener.touchDragged(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int)"""
        super(__TextFieldClickListener, self).touchDragged(arg0, __float.valueOf(arg1), __float.valueOf(arg2), __int.valueOf(arg3))

    @override
    @overload
    def getButton(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.utils.ClickListener.getButton()"""
        return int.__wrap(super(utils.ClickListener, self).getButton())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def getTapSquareSize(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.utils.ClickListener.getTapSquareSize()"""
        return float.__wrap(super(utils.ClickListener, self).getTapSquareSize())

    @overload
    def __init__(self, arg0: 'TextField'):
        """public com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldClickListener(com.badlogic.gdx.scenes.scene2d.ui.TextField)"""
        val = __TextFieldClickListener(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def touchDown(self, arg0: 'InputEvent', arg1: float, arg2: float, arg3: int, arg4: int) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldClickListener.touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int)"""
        return bool.__wrap(super(__TextFieldClickListener, self).touchDown(arg0, __float.valueOf(arg1), __float.valueOf(arg2), __int.valueOf(arg3), __int.valueOf(arg4)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def enter(self, arg0: 'InputEvent', arg1: float, arg2: float, arg3: int, arg4: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.utils.ClickListener.enter(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__utils.ClickListener, self).enter(arg0, __float.valueOf(arg1), __float.valueOf(arg2), __int.valueOf(arg3), arg4)

    @override
    @overload
    def setVisualPressed(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.utils.ClickListener.setVisualPressed(boolean)"""
        super(__utils.ClickListener, self).setVisualPressed(__boolean.valueOf(arg0))

    @override
    @overload
    def inTapSquare(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.utils.ClickListener.inTapSquare()"""
        return bool.__wrap(super(utils.ClickListener, self).inTapSquare())

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0))

    @override
    @overload
    def setTapCount(self, arg0: int):
        """public void com.badlogic.gdx.scenes.scene2d.utils.ClickListener.setTapCount(int)"""
        super(__utils.ClickListener, self).setTapCount(__int.valueOf(arg0))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.lang.Object.toString()"""
        return str.__wrap(super(object, self).toString())

    @overload
    def keyDown(self, arg0: 'InputEvent', arg1: int) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldClickListener.keyDown(com.badlogic.gdx.scenes.scene2d.InputEvent,int)"""
        return bool.__wrap(super(__TextFieldClickListener, self).keyDown(arg0, __int.valueOf(arg1)))

    @override
    @overload
    def getPressedButton(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.utils.ClickListener.getPressedButton()"""
        return int.__wrap(super(utils.ClickListener, self).getPressedButton())

    @overload
    def mouseMoved(self, arg0: 'InputEvent', arg1: float, arg2: float) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.InputListener.mouseMoved(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float)"""
        return bool.__wrap(super(__scene2d.InputListener, self).mouseMoved(arg0, __float.valueOf(arg1), __float.valueOf(arg2)))

    @override
    @overload
    def invalidateTapSquare(self):
        """public void com.badlogic.gdx.scenes.scene2d.utils.ClickListener.invalidateTapSquare()"""
        super(utils.ClickListener, self).invalidateTapSquare()

    @override
    @overload
    def getPressedPointer(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.utils.ClickListener.getPressedPointer()"""
        return int.__wrap(super(utils.ClickListener, self).getPressedPointer())

    @override
    @overload
    def isOver(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.utils.ClickListener.isOver()"""
        return bool.__wrap(super(utils.ClickListener, self).isOver())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def setTapSquareSize(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.utils.ClickListener.setTapSquareSize(float)"""
        super(__utils.ClickListener, self).setTapSquareSize(__float.valueOf(arg0))

    @override
    @overload
    def isPressed(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.utils.ClickListener.isPressed()"""
        return bool.__wrap(super(utils.ClickListener, self).isPressed())

    @overload
    def keyTyped(self, arg0: 'InputEvent', arg1: str) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldClickListener.keyTyped(com.badlogic.gdx.scenes.scene2d.InputEvent,char)"""
        return bool.__wrap(super(__TextFieldClickListener, self).keyTyped(arg0, __char.valueOf(arg1)))

    @override
    @overload
    def setTapCountInterval(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.utils.ClickListener.setTapCountInterval(float)"""
        super(__utils.ClickListener, self).setTapCountInterval(__float.valueOf(arg0))

    @override
    @overload
    def isVisualPressed(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.utils.ClickListener.isVisualPressed()"""
        return bool.__wrap(super(utils.ClickListener, self).isVisualPressed())

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def isOver(self, arg0: 'Actor', arg1: float, arg2: float) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.utils.ClickListener.isOver(com.badlogic.gdx.scenes.scene2d.Actor,float,float)"""
        return bool.__wrap(super(__utils.ClickListener, self).isOver(arg0, __float.valueOf(arg1), __float.valueOf(arg2)))

    @overload
    def scrolled(self, arg0: 'InputEvent', arg1: float, arg2: float, arg3: float, arg4: float) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.InputListener.scrolled(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,float,float)"""
        return bool.__wrap(super(__scene2d.InputListener, self).scrolled(arg0, __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3), __float.valueOf(arg4)))

    @override
    @overload
    def getTapCount(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.utils.ClickListener.getTapCount()"""
        return int.__wrap(super(utils.ClickListener, self).getTapCount())

    @overload
    def handle(self, arg0: 'Event') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.InputListener.handle(com.badlogic.gdx.scenes.scene2d.Event)"""
        return bool.__wrap(super(__scene2d.InputListener, self).handle(arg0))

    @override
    @overload
    def exit(self, arg0: 'InputEvent', arg1: float, arg2: float, arg3: int, arg4: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.utils.ClickListener.exit(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__utils.ClickListener, self).exit(arg0, __float.valueOf(arg1), __float.valueOf(arg2), __int.valueOf(arg3), arg4)

    @override
    @overload
    def cancel(self):
        """public void com.badlogic.gdx.scenes.scene2d.utils.ClickListener.cancel()"""
        super(utils.ClickListener, self).cancel()

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def keyUp(self, arg0: 'InputEvent', arg1: int) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldClickListener.keyUp(com.badlogic.gdx.scenes.scene2d.InputEvent,int)"""
        return bool.__wrap(super(__TextFieldClickListener, self).keyUp(arg0, __int.valueOf(arg1)))

    @override
    @overload
    def touchUp(self, arg0: 'InputEvent', arg1: float, arg2: float, arg3: int, arg4: int):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldClickListener.touchUp(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int)"""
        super(__TextFieldClickListener, self).touchUp(arg0, __float.valueOf(arg1), __float.valueOf(arg2), __int.valueOf(arg3), __int.valueOf(arg4))

    @override
    @overload
    def getTouchDownX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.utils.ClickListener.getTouchDownX()"""
        return float.__wrap(super(utils.ClickListener, self).getTouchDownX()) 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.Skin
from pyquantum_helper import import_once as __import_once__
import com.badlogic.gdx.graphics.Color as __Color
__Color = __Color
try:
    from pygdx.scenes import scene2d
except ImportError:
    scene2d = __import_once__("pygdx.scenes.scene2d")

import java.lang.Boolean as __boolean
try:
    from pygdx.graphics import g2d
except ImportError:
    g2d = __import_once__("pygdx.graphics.g2d")

from builtins import type
import java.lang.Class as __Class
__Class = __Class
import com.badlogic.gdx.utils.Array as __Array
__Array = __Array
import java.lang.String as __string
try:
    from pygdx import files
except ImportError:
    files = __import_once__("pygdx.files")

from builtins import bool
import com.badlogic.gdx.scenes.scene2d.utils.TiledDrawable as __TiledDrawable
__TiledDrawable = __TiledDrawable
from builtins import str
try:
    from pygdx.scenes.scene2d import utils
except ImportError:
    utils = __import_once__("pygdx.scenes.scene2d.utils")

try:
    from pygdx import utils
except ImportError:
    utils = __import_once__("pygdx.utils")

import com.badlogic.gdx.graphics.g2d.TextureAtlas as __TextureAtlas
__TextureAtlas = __TextureAtlas
from pyquantum_helper import override
import java.lang.Object as __object
import com.badlogic.gdx.utils.ObjectMap as __ObjectMap
__ObjectMap = __ObjectMap
from builtins import object
import com.badlogic.gdx.graphics.g2d.TextureRegion as __TextureRegion
__TextureRegion = __TextureRegion
import java.lang.Long as __long
import java.lang.Float as __float
import java.lang.String as __String
__String = __String
import com.badlogic.gdx.graphics.g2d.NinePatch as __NinePatch
__NinePatch = __NinePatch
import com.badlogic.gdx.scenes.scene2d.ui.Skin as __Skin
__Skin = __Skin
import java.lang.Object as __Object
__Object = __Object
import com.badlogic.gdx.graphics.g2d.Sprite as __Sprite
__Sprite = __Sprite
import java.lang.Integer as __int
try:
    from pygdx import graphics
except ImportError:
    graphics = __import_once__("pygdx.graphics")

import com.badlogic.gdx.scenes.scene2d.utils.Drawable as __Drawable
__Drawable = __Drawable
import com.badlogic.gdx.graphics.g2d.BitmapFont as __BitmapFont
__BitmapFont = __BitmapFont
from builtins import int
 
class Skin(pygdx.__Disposable, utils.Disposable):
    """com.badlogic.gdx.scenes.scene2d.ui.Skin"""
 
    @staticmethod
    def __wrap(java_value: __Skin) -> 'Skin':
        return Skin(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Skin):
        """
        Dynamic initializer for Skin.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def scale(self, arg0: 'Drawable'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Skin.scale(com.badlogic.gdx.scenes.scene2d.utils.Drawable)"""
        super(__Skin, self).scale(arg0)

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def optional(self, arg0: str, arg1: 'Class') -> object:
        """public <T> T com.badlogic.gdx.scenes.scene2d.ui.Skin.optional(java.lang.String,java.lang.Class<T>)"""
        return object.__wrap(super(__Skin, self).optional(arg0, arg1))

    @overload
    def getTiledDrawable(self, arg0: str) -> 'utils.TiledDrawable':
        """public com.badlogic.gdx.scenes.scene2d.utils.TiledDrawable com.badlogic.gdx.scenes.scene2d.ui.Skin.getTiledDrawable(java.lang.String)"""
        return 'utils.TiledDrawable'.__wrap(super(__Skin, self).getTiledDrawable(arg0))

    @overload
    def remove(self, arg0: str, arg1: 'Class'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Skin.remove(java.lang.String,java.lang.Class)"""
        super(__Skin, self).remove(arg0, arg1)

    @overload
    def getColor(self, arg0: str) -> 'graphics.Color':
        """public com.badlogic.gdx.graphics.Color com.badlogic.gdx.scenes.scene2d.ui.Skin.getColor(java.lang.String)"""
        return 'graphics.Color'.__wrap(super(__Skin, self).getColor(arg0))

    @overload
    def getFont(self, arg0: str) -> 'g2d.BitmapFont':
        """public com.badlogic.gdx.graphics.g2d.BitmapFont com.badlogic.gdx.scenes.scene2d.ui.Skin.getFont(java.lang.String)"""
        return 'g2d.BitmapFont'.__wrap(super(__Skin, self).getFont(arg0))

    @overload
    def getSprite(self, arg0: str) -> 'g2d.Sprite':
        """public com.badlogic.gdx.graphics.g2d.Sprite com.badlogic.gdx.scenes.scene2d.ui.Skin.getSprite(java.lang.String)"""
        return 'g2d.Sprite'.__wrap(super(__Skin, self).getSprite(arg0))

    @overload
    def __init__(self, arg0: 'FileHandle'):
        """public com.badlogic.gdx.scenes.scene2d.ui.Skin(com.badlogic.gdx.files.FileHandle)"""
        val = __Skin(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def setEnabled(self, arg0: 'Actor', arg1: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Skin.setEnabled(com.badlogic.gdx.scenes.scene2d.Actor,boolean)"""
        super(__Skin, self).setEnabled(arg0, __boolean.valueOf(arg1))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def __init__(self, arg0: 'TextureAtlas'):
        """public com.badlogic.gdx.scenes.scene2d.ui.Skin(com.badlogic.gdx.graphics.g2d.TextureAtlas)"""
        val = __Skin(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def newDrawable(self, arg0: str) -> 'utils.Drawable':
        """public com.badlogic.gdx.scenes.scene2d.utils.Drawable com.badlogic.gdx.scenes.scene2d.ui.Skin.newDrawable(java.lang.String)"""
        return 'utils.Drawable'.__wrap(super(__Skin, self).newDrawable(arg0))

    @override
    @overload
    def dispose(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Skin.dispose()"""
        super(Skin, self).dispose()

    @overload
    def newDrawable(self, arg0: 'Drawable') -> 'utils.Drawable':
        """public com.badlogic.gdx.scenes.scene2d.utils.Drawable com.badlogic.gdx.scenes.scene2d.ui.Skin.newDrawable(com.badlogic.gdx.scenes.scene2d.utils.Drawable)"""
        return 'utils.Drawable'.__wrap(super(__Skin, self).newDrawable(arg0))

    @overload
    def getRegions(self, arg0: str) -> 'utils.Array':
        """public com.badlogic.gdx.utils.Array<com.badlogic.gdx.graphics.g2d.TextureRegion> com.badlogic.gdx.scenes.scene2d.ui.Skin.getRegions(java.lang.String)"""
        return 'utils.Array'.__wrap(super(__Skin, self).getRegions(arg0))

    @overload
    def getPatch(self, arg0: str) -> 'g2d.NinePatch':
        """public com.badlogic.gdx.graphics.g2d.NinePatch com.badlogic.gdx.scenes.scene2d.ui.Skin.getPatch(java.lang.String)"""
        return 'g2d.NinePatch'.__wrap(super(__Skin, self).getPatch(arg0))

    @overload
    def newDrawable(self, arg0: str, arg1: 'Color') -> 'utils.Drawable':
        """public com.badlogic.gdx.scenes.scene2d.utils.Drawable com.badlogic.gdx.scenes.scene2d.ui.Skin.newDrawable(java.lang.String,com.badlogic.gdx.graphics.Color)"""
        return 'utils.Drawable'.__wrap(super(__Skin, self).newDrawable(arg0, arg1))

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @overload
    def newDrawable(self, arg0: str, arg1: float, arg2: float, arg3: float, arg4: float) -> 'utils.Drawable':
        """public com.badlogic.gdx.scenes.scene2d.utils.Drawable com.badlogic.gdx.scenes.scene2d.ui.Skin.newDrawable(java.lang.String,float,float,float,float)"""
        return 'utils.Drawable'.__wrap(super(__Skin, self).newDrawable(arg0, __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3), __float.valueOf(arg4)))

    @overload
    def getDrawable(self, arg0: str) -> 'utils.Drawable':
        """public com.badlogic.gdx.scenes.scene2d.utils.Drawable com.badlogic.gdx.scenes.scene2d.ui.Skin.getDrawable(java.lang.String)"""
        return 'utils.Drawable'.__wrap(super(__Skin, self).getDrawable(arg0))

    @overload
    def newDrawable(self, arg0: 'Drawable', arg1: float, arg2: float, arg3: float, arg4: float) -> 'utils.Drawable':
        """public com.badlogic.gdx.scenes.scene2d.utils.Drawable com.badlogic.gdx.scenes.scene2d.ui.Skin.newDrawable(com.badlogic.gdx.scenes.scene2d.utils.Drawable,float,float,float,float)"""
        return 'utils.Drawable'.__wrap(super(__Skin, self).newDrawable(arg0, __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3), __float.valueOf(arg4)))

    @overload
    def getRegion(self, arg0: str) -> 'g2d.TextureRegion':
        """public com.badlogic.gdx.graphics.g2d.TextureRegion com.badlogic.gdx.scenes.scene2d.ui.Skin.getRegion(java.lang.String)"""
        return 'g2d.TextureRegion'.__wrap(super(__Skin, self).getRegion(arg0))

    @overload
    def addRegions(self, arg0: 'TextureAtlas'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Skin.addRegions(com.badlogic.gdx.graphics.g2d.TextureAtlas)"""
        super(__Skin, self).addRegions(arg0)

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0))

    @overload
    def load(self, arg0: 'FileHandle'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Skin.load(com.badlogic.gdx.files.FileHandle)"""
        super(__Skin, self).load(arg0)

    @overload
    def __init__(self, arg0: 'FileHandle', arg1: 'TextureAtlas'):
        """public com.badlogic.gdx.scenes.scene2d.ui.Skin(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.g2d.TextureAtlas)"""
        val = __Skin(arg0, arg1)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.lang.Object.toString()"""
        return str.__wrap(super(object, self).toString())

    @overload
    def get(self, arg0: 'Class') -> object:
        """public <T> T com.badlogic.gdx.scenes.scene2d.ui.Skin.get(java.lang.Class<T>)"""
        return object.__wrap(super(__Skin, self).get(arg0))

    @overload
    def get(self, arg0: str, arg1: 'Class') -> object:
        """public <T> T com.badlogic.gdx.scenes.scene2d.ui.Skin.get(java.lang.String,java.lang.Class<T>)"""
        return object.__wrap(super(__Skin, self).get(arg0, arg1))

    @overload
    def has(self, arg0: str, arg1: 'Class') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Skin.has(java.lang.String,java.lang.Class)"""
        return bool.__wrap(super(__Skin, self).has(arg0, arg1))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def __init__(self):
        """public com.badlogic.gdx.scenes.scene2d.ui.Skin()"""
        val = __Skin()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def __init__(self, ):
        """public com.badlogic.gdx.scenes.scene2d.ui.Skin()"""
        val = __Skin()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def find(self, arg0: object) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.ui.Skin.find(java.lang.Object)"""
        return str.__wrap(super(__Skin, self).find(arg0))

    @overload
    def getJsonClassTags(self) -> 'utils.ObjectMap':
        """public com.badlogic.gdx.utils.ObjectMap<java.lang.String, java.lang.Class> com.badlogic.gdx.scenes.scene2d.ui.Skin.getJsonClassTags()"""
        return 'utils.ObjectMap'.__wrap(super(Skin, self).getJsonClassTags())

    @overload
    def add(self, arg0: str, arg1: object):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Skin.add(java.lang.String,java.lang.Object)"""
        super(__Skin, self).add(arg0, arg1)

    @overload
    def getAtlas(self) -> 'g2d.TextureAtlas':
        """public com.badlogic.gdx.graphics.g2d.TextureAtlas com.badlogic.gdx.scenes.scene2d.ui.Skin.getAtlas()"""
        return 'g2d.TextureAtlas'.__wrap(super(Skin, self).getAtlas())

    @overload
    def getAll(self, arg0: 'Class') -> 'utils.ObjectMap':
        """public <T> com.badlogic.gdx.utils.ObjectMap<java.lang.String, T> com.badlogic.gdx.scenes.scene2d.ui.Skin.getAll(java.lang.Class<T>)"""
        return 'utils.ObjectMap'.__wrap(super(__Skin, self).getAll(arg0))

    @overload
    def newDrawable(self, arg0: 'Drawable', arg1: 'Color') -> 'utils.Drawable':
        """public com.badlogic.gdx.scenes.scene2d.utils.Drawable com.badlogic.gdx.scenes.scene2d.ui.Skin.newDrawable(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.graphics.Color)"""
        return 'utils.Drawable'.__wrap(super(__Skin, self).newDrawable(arg0, arg1))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def add(self, arg0: str, arg1: object, arg2: 'Class'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Skin.add(java.lang.String,java.lang.Object,java.lang.Class)"""
        super(__Skin, self).add(arg0, arg1, arg2)

    @overload
    def setScale(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Skin.setScale(float)"""
        super(__Skin, self).setScale(__float.valueOf(arg0)) 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.ProgressBar
from pyquantum_helper import import_once as __import_once__
import com.badlogic.gdx.scenes.scene2d.Touchable as __Touchable
__Touchable = __Touchable
try:
    from pygdx.scenes import scene2d
except ImportError:
    scene2d = __import_once__("pygdx.scenes.scene2d")

import com.badlogic.gdx.graphics.Color as __Color
__Color = __Color
import java.lang.Boolean as __boolean
try:
    from pygdx.graphics import g2d
except ImportError:
    g2d = __import_once__("pygdx.graphics.g2d")

from builtins import type
import com.badlogic.gdx.scenes.scene2d.Group as __Group
__Group = __Group
import com.badlogic.gdx.scenes.scene2d.ui.ProgressBar as __ProgressBar
__ProgressBar = __ProgressBar
import com.badlogic.gdx.math.Vector2 as __Vector2
__Vector2 = __Vector2
import java.lang.Class as __Class
__Class = __Class
import com.badlogic.gdx.utils.Array as __Array
__Array = __Array
import java.lang.String as __string
try:
    from pygdx import math
except ImportError:
    math = __import_once__("pygdx.math")

from builtins import bool
import com.badlogic.gdx.scenes.scene2d.ui.Widget as __Widget
__Widget = __Widget
from builtins import str
try:
    from pygdx import utils
except ImportError:
    utils = __import_once__("pygdx.utils")

from pyquantum_helper import override
import java.lang.Object as __object
from builtins import float
from builtins import object
import com.badlogic.gdx.utils.DelayedRemovalArray as __DelayedRemovalArray
__DelayedRemovalArray = __DelayedRemovalArray
import java.lang.Long as __long
import java.lang.Float as __float
import java.lang.String as __String
__String = __String
try:
    from pygdx.graphics import glutils
except ImportError:
    glutils = __import_once__("pygdx.graphics.glutils")

import java.lang.Object as __Object
__Object = __Object
import com.badlogic.gdx.scenes.scene2d.Actor as __Actor
__Actor = __Actor
import java.lang.Integer as __int
import com.badlogic.gdx.scenes.scene2d.Stage as __Stage
__Stage = __Stage
try:
    from pygdx import graphics
except ImportError:
    graphics = __import_once__("pygdx.graphics")

import com.badlogic.gdx.scenes.scene2d.ui.ProgressBar as __ProgressBar_ProgressBarStyle
__ProgressBarStyle = __ProgressBar_ProgressBarStyle.ProgressBarStyle
from builtins import int
 
class ProgressBar(__Widget, Widget, scene2d.__Disableable, utils.Disableable):
    """com.badlogic.gdx.scenes.scene2d.ui.ProgressBar"""
 
    @staticmethod
    def __wrap(java_value: __ProgressBar) -> 'ProgressBar':
        return ProgressBar(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __ProgressBar):
        """
        Dynamic initializer for ProgressBar.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def getVisualValue(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.ProgressBar.getVisualValue()"""
        return float.__wrap(super(ProgressBar, self).getVisualValue())

    @override
    @overload
    def getY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getY()"""
        return float.__wrap(super(scene2d.Actor, self).getY())

    @overload
    def getPercent(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.ProgressBar.getPercent()"""
        return float.__wrap(super(ProgressBar, self).getPercent())

    @overload
    def setVisualInterpolation(self, arg0: 'Interpolation'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ProgressBar.setVisualInterpolation(com.badlogic.gdx.math.Interpolation)"""
        super(__ProgressBar, self).setVisualInterpolation(arg0)

    @overload
    def setZIndex(self, arg0: int) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.setZIndex(int)"""
        return bool.__wrap(super(__scene2d.Actor, self).setZIndex(__int.valueOf(arg0)))

    @override
    @overload
    def setBounds(self, arg0: float, arg1: float, arg2: float, arg3: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setBounds(float,float,float,float)"""
        super(__scene2d.Actor, self).setBounds(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def needsLayout(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Widget.needsLayout()"""
        return bool.__wrap(super(Widget, self).needsLayout())

    @overload
    def getX(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getX(int)"""
        return float.__wrap(super(__scene2d.Actor, self).getX(__int.valueOf(arg0)))

    @override
    @overload
    def sizeBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.sizeBy(float)"""
        super(__scene2d.Actor, self).sizeBy(__float.valueOf(arg0))

    @overload
    def getStepSize(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.ProgressBar.getStepSize()"""
        return float.__wrap(super(ProgressBar, self).getStepSize())

    @override
    @overload
    def sizeBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.sizeBy(float,float)"""
        super(__scene2d.Actor, self).sizeBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def hasActions(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasActions()"""
        return bool.__wrap(super(scene2d.Actor, self).hasActions())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0))

    @override
    @overload
    def setScaleX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScaleX(float)"""
        super(__scene2d.Actor, self).setScaleX(__float.valueOf(arg0))

    @override
    @overload
    def getTouchable(self) -> 'scene2d.Touchable':
        """public com.badlogic.gdx.scenes.scene2d.Touchable com.badlogic.gdx.scenes.scene2d.Actor.getTouchable()"""
        return 'scene2d.Touchable'.__wrap(super(scene2d.Actor, self).getTouchable())

    @override
    @overload
    def removeAction(self, arg0: 'Action'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.removeAction(com.badlogic.gdx.scenes.scene2d.Action)"""
        super(__scene2d.Actor, self).removeAction(arg0)

    @override
    @overload
    def getX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getX()"""
        return float.__wrap(super(scene2d.Actor, self).getX())

    @overload
    def setProgrammaticChangeEvents(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ProgressBar.setProgrammaticChangeEvents(boolean)"""
        super(__ProgressBar, self).setProgrammaticChangeEvents(__boolean.valueOf(arg0))

    @override
    @overload
    def getMaxWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Widget.getMaxWidth()"""
        return float.__wrap(super(Widget, self).getMaxWidth())

    @override
    @overload
    def toBack(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.toBack()"""
        super(scene2d.Actor, self).toBack()

    @override
    @overload
    def setDebug(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setDebug(boolean)"""
        super(__scene2d.Actor, self).setDebug(__boolean.valueOf(arg0))

    @override
    @overload
    def setX(self, arg0: float, arg1: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setX(float,int)"""
        super(__scene2d.Actor, self).setX(__float.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def screenToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.screenToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).screenToLocalCoordinates(arg0))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def ancestorsVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.ancestorsVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).ancestorsVisible())

    @override
    @overload
    def getListeners(self) -> 'utils.DelayedRemovalArray':
        """public com.badlogic.gdx.utils.DelayedRemovalArray<com.badlogic.gdx.scenes.scene2d.EventListener> com.badlogic.gdx.scenes.scene2d.Actor.getListeners()"""
        return 'utils.DelayedRemovalArray'.__wrap(super(scene2d.Actor, self).getListeners())

    @override
    @overload
    def setFillParent(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.setFillParent(boolean)"""
        super(__Widget, self).setFillParent(__boolean.valueOf(arg0))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def removeListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.removeListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).removeListener(arg0))

    @override
    @overload
    def isTouchFocusListener(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchFocusListener()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchFocusListener())

    @overload
    def localToStageCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToStageCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToStageCoordinates(arg0))

    @overload
    def __init__(self, arg0: float, arg1: float, arg2: float, arg3: bool, arg4: 'Skin', arg5: str):
        """public com.badlogic.gdx.scenes.scene2d.ui.ProgressBar(float,float,float,boolean,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String)"""
        val = __ProgressBar(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __boolean.valueOf(arg3), arg4, arg5)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def setSize(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setSize(float,float)"""
        super(__scene2d.Actor, self).setSize(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def getZIndex(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.Actor.getZIndex()"""
        return int.__wrap(super(scene2d.Actor, self).getZIndex())

    @override
    @overload
    def clipBegin(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.clipBegin()"""
        return bool.__wrap(super(scene2d.Actor, self).clipBegin())

    @override
    @overload
    def invalidateHierarchy(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.invalidateHierarchy()"""
        super(Widget, self).invalidateHierarchy()

    @override
    @overload
    def moveBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.moveBy(float,float)"""
        super(__scene2d.Actor, self).moveBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def getY(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getY(int)"""
        return float.__wrap(super(__scene2d.Actor, self).getY(__int.valueOf(arg0)))

    @override
    @overload
    def setOrigin(self, arg0: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOrigin(int)"""
        super(__scene2d.Actor, self).setOrigin(__int.valueOf(arg0))

    @overload
    def isDescendantOf(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isDescendantOf(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Actor, self).isDescendantOf(arg0))

    @override
    @overload
    def getParent(self) -> 'scene2d.Group':
        """public com.badlogic.gdx.scenes.scene2d.Group com.badlogic.gdx.scenes.scene2d.Actor.getParent()"""
        return 'scene2d.Group'.__wrap(super(scene2d.Actor, self).getParent())

    @override
    @overload
    def clearListeners(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clearListeners()"""
        super(scene2d.Actor, self).clearListeners()

    @overload
    def localToActorCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToActorCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToActorCoordinates(arg0, arg1))

    @override
    @overload
    def setName(self, arg0: str):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setName(java.lang.String)"""
        super(__scene2d.Actor, self).setName(arg0)

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @overload
    def setRange(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ProgressBar.setRange(float,float)"""
        super(__ProgressBar, self).setRange(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def setLayoutEnabled(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.setLayoutEnabled(boolean)"""
        super(__Widget, self).setLayoutEnabled(__boolean.valueOf(arg0))

    @override
    @overload
    def setOriginX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOriginX(float)"""
        super(__scene2d.Actor, self).setOriginX(__float.valueOf(arg0))

    @override
    @overload
    def getHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getHeight()"""
        return float.__wrap(super(scene2d.Actor, self).getHeight())

    @override
    @overload
    def validate(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.validate()"""
        super(Widget, self).validate()

    @override
    @overload
    def hasKeyboardFocus(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasKeyboardFocus()"""
        return bool.__wrap(super(scene2d.Actor, self).hasKeyboardFocus())

    @override
    @overload
    def isDisabled(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.ProgressBar.isDisabled()"""
        return bool.__wrap(super(ProgressBar, self).isDisabled())

    @override
    @overload
    def getOriginY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getOriginY()"""
        return float.__wrap(super(scene2d.Actor, self).getOriginY())

    @override
    @overload
    def layout(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.layout()"""
        super(Widget, self).layout()

    @override
    @overload
    def clipEnd(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clipEnd()"""
        super(scene2d.Actor, self).clipEnd()

    @override
    @overload
    def getUserObject(self) -> object:
        """public java.lang.Object com.badlogic.gdx.scenes.scene2d.Actor.getUserObject()"""
        return object.__wrap(super(scene2d.Actor, self).getUserObject())

    @overload
    def isAnimating(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.ProgressBar.isAnimating()"""
        return bool.__wrap(super(ProgressBar, self).isAnimating())

    @override
    @overload
    def pack(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.pack()"""
        super(Widget, self).pack()

    @override
    @overload
    def getDebug(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.getDebug()"""
        return bool.__wrap(super(scene2d.Actor, self).getDebug())

    @override
    @overload
    def setHeight(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setHeight(float)"""
        super(__scene2d.Actor, self).setHeight(__float.valueOf(arg0))

    @override
    @overload
    def setScale(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScale(float)"""
        super(__scene2d.Actor, self).setScale(__float.valueOf(arg0))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def rotateBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.rotateBy(float)"""
        super(__scene2d.Actor, self).rotateBy(__float.valueOf(arg0))

    @overload
    def __init__(self, arg0: float, arg1: float, arg2: float, arg3: bool, arg4: 'Skin'):
        """public com.badlogic.gdx.scenes.scene2d.ui.ProgressBar(float,float,float,boolean,com.badlogic.gdx.scenes.scene2d.ui.Skin)"""
        val = __ProgressBar(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __boolean.valueOf(arg3), arg4)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def getMinHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Widget.getMinHeight()"""
        return float.__wrap(super(Widget, self).getMinHeight())

    @override
    @overload
    def setScale(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScale(float,float)"""
        super(__scene2d.Actor, self).setScale(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def addListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.addListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).addListener(arg0))

    @overload
    def parentToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.parentToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).parentToLocalCoordinates(arg0))

    @overload
    def getStyle(self) -> 'ProgressBarStyle':
        """public com.badlogic.gdx.scenes.scene2d.ui.ProgressBar$ProgressBarStyle com.badlogic.gdx.scenes.scene2d.ui.ProgressBar.getStyle()"""
        return 'ProgressBarStyle'.__wrap(super(ProgressBar, self).getStyle())

    @overload
    def getVisualPercent(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.ProgressBar.getVisualPercent()"""
        return float.__wrap(super(ProgressBar, self).getVisualPercent())

    @override
    @overload
    def getRotation(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getRotation()"""
        return float.__wrap(super(scene2d.Actor, self).getRotation())

    @override
    @overload
    def setVisible(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setVisible(boolean)"""
        super(__scene2d.Actor, self).setVisible(__boolean.valueOf(arg0))

    @override
    @overload
    def setY(self, arg0: float, arg1: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setY(float,int)"""
        super(__scene2d.Actor, self).setY(__float.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def setX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setX(float)"""
        super(__scene2d.Actor, self).setX(__float.valueOf(arg0))

    @override
    @overload
    def invalidate(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.invalidate()"""
        super(Widget, self).invalidate()

    @override
    @overload
    def setOrigin(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOrigin(float,float)"""
        super(__scene2d.Actor, self).setOrigin(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def draw(self, arg0: 'Batch', arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ProgressBar.draw(com.badlogic.gdx.graphics.g2d.Batch,float)"""
        super(__ProgressBar, self).draw(arg0, __float.valueOf(arg1))

    @overload
    def setAnimateDuration(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ProgressBar.setAnimateDuration(float)"""
        super(__ProgressBar, self).setAnimateDuration(__float.valueOf(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def getRight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getRight()"""
        return float.__wrap(super(scene2d.Actor, self).getRight())

    @overload
    def isAscendantOf(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isAscendantOf(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Actor, self).isAscendantOf(arg0))

    @override
    @overload
    def setWidth(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setWidth(float)"""
        super(__scene2d.Actor, self).setWidth(__float.valueOf(arg0))

    @override
    @overload
    def isTouchFocusTarget(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchFocusTarget()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchFocusTarget())

    @overload
    def setRound(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ProgressBar.setRound(boolean)"""
        super(__ProgressBar, self).setRound(__boolean.valueOf(arg0))

    @override
    @overload
    def hasParent(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasParent()"""
        return bool.__wrap(super(scene2d.Actor, self).hasParent())

    @overload
    def getValue(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.ProgressBar.getValue()"""
        return float.__wrap(super(ProgressBar, self).getValue())

    @override
    @overload
    def setPosition(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setPosition(float,float)"""
        super(__scene2d.Actor, self).setPosition(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def getScaleY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getScaleY()"""
        return float.__wrap(super(scene2d.Actor, self).getScaleY())

    @override
    @overload
    def getWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getWidth()"""
        return float.__wrap(super(scene2d.Actor, self).getWidth())

    @override
    @overload
    def setOriginY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOriginY(float)"""
        super(__scene2d.Actor, self).setOriginY(__float.valueOf(arg0))

    @overload
    def setStyle(self, arg0: 'ProgressBarStyle'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ProgressBar.setStyle(com.badlogic.gdx.scenes.scene2d.ui.ProgressBar$ProgressBarStyle)"""
        super(__ProgressBar, self).setStyle(arg0)

    @override
    @overload
    def setPosition(self, arg0: float, arg1: float, arg2: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setPosition(float,float,int)"""
        super(__scene2d.Actor, self).setPosition(__float.valueOf(arg0), __float.valueOf(arg1), __int.valueOf(arg2))

    @overload
    def removeCaptureListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.removeCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).removeCaptureListener(arg0))

    @overload
    def updateVisualValue(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ProgressBar.updateVisualValue()"""
        super(ProgressBar, self).updateVisualValue()

    @override
    @overload
    def setColor(self, arg0: 'Color'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setColor(com.badlogic.gdx.graphics.Color)"""
        super(__scene2d.Actor, self).setColor(arg0)

    @overload
    def localToScreenCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToScreenCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToScreenCoordinates(arg0))

    @override
    @overload
    def drawDebug(self, arg0: 'ShapeRenderer'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.drawDebug(com.badlogic.gdx.graphics.glutils.ShapeRenderer)"""
        super(__scene2d.Actor, self).drawDebug(arg0)

    @override
    @overload
    def setTouchable(self, arg0: 'Touchable'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setTouchable(com.badlogic.gdx.scenes.scene2d.Touchable)"""
        super(__scene2d.Actor, self).setTouchable(arg0)

    @overload
    def addCaptureListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.addCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).addCaptureListener(arg0))

    @overload
    def fire(self, arg0: 'Event') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.fire(com.badlogic.gdx.scenes.scene2d.Event)"""
        return bool.__wrap(super(__scene2d.Actor, self).fire(arg0))

    @overload
    def isVertical(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.ProgressBar.isVertical()"""
        return bool.__wrap(super(ProgressBar, self).isVertical())

    @override
    @overload
    def getMaxHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Widget.getMaxHeight()"""
        return float.__wrap(super(Widget, self).getMaxHeight())

    @override
    @overload
    def remove(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.remove()"""
        return bool.__wrap(super(scene2d.Actor, self).remove())

    @overload
    def setStepSize(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ProgressBar.setStepSize(float)"""
        super(__ProgressBar, self).setStepSize(__float.valueOf(arg0))

    @overload
    def hit(self, arg0: float, arg1: float, arg2: bool) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.Actor.hit(float,float,boolean)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Actor, self).hit(__float.valueOf(arg0), __float.valueOf(arg1), __boolean.valueOf(arg2)))

    @overload
    def localToParentCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToParentCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToParentCoordinates(arg0))

    @override
    @overload
    def clear(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clear()"""
        super(scene2d.Actor, self).clear()

    @overload
    def getMinValue(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.ProgressBar.getMinValue()"""
        return float.__wrap(super(ProgressBar, self).getMinValue())

    @override
    @overload
    def getName(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.Actor.getName()"""
        return str.__wrap(super(scene2d.Actor, self).getName())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.Actor.toString()"""
        return str.__wrap(super(scene2d.Actor, self).toString())

    @override
    @overload
    def isVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).isVisible())

    @overload
    def setAnimateInterpolation(self, arg0: 'Interpolation'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ProgressBar.setAnimateInterpolation(com.badlogic.gdx.math.Interpolation)"""
        super(__ProgressBar, self).setAnimateInterpolation(arg0)

    @override
    @overload
    def getCaptureListeners(self) -> 'utils.DelayedRemovalArray':
        """public com.badlogic.gdx.utils.DelayedRemovalArray<com.badlogic.gdx.scenes.scene2d.EventListener> com.badlogic.gdx.scenes.scene2d.Actor.getCaptureListeners()"""
        return 'utils.DelayedRemovalArray'.__wrap(super(scene2d.Actor, self).getCaptureListeners())

    @override
    @overload
    def debug(self) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.Actor.debug()"""
        return 'scene2d.Actor'.__wrap(super(scene2d.Actor, self).debug())

    @override
    @overload
    def getTop(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getTop()"""
        return float.__wrap(super(scene2d.Actor, self).getTop())

    @override
    @overload
    def setY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setY(float)"""
        super(__scene2d.Actor, self).setY(__float.valueOf(arg0))

    @override
    @overload
    def getMinWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Widget.getMinWidth()"""
        return float.__wrap(super(Widget, self).getMinWidth())

    @override
    @overload
    def clearActions(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clearActions()"""
        super(scene2d.Actor, self).clearActions()

    @override
    @overload
    def scaleBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.scaleBy(float,float)"""
        super(__scene2d.Actor, self).scaleBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def setRotation(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setRotation(float)"""
        super(__scene2d.Actor, self).setRotation(__float.valueOf(arg0))

    @override
    @overload
    def getScaleX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getScaleX()"""
        return float.__wrap(super(scene2d.Actor, self).getScaleX())

    @overload
    def firstAscendant(self, arg0: 'Class') -> 'scene2d.Actor':
        """public <T extends com.badlogic.gdx.scenes.scene2d.Actor> T com.badlogic.gdx.scenes.scene2d.Actor.firstAscendant(java.lang.Class<T>)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Actor, self).firstAscendant(arg0))

    @override
    @overload
    def act(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ProgressBar.act(float)"""
        super(__ProgressBar, self).act(__float.valueOf(arg0))

    @overload
    def notify(self, arg0: 'Event', arg1: bool) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.notify(com.badlogic.gdx.scenes.scene2d.Event,boolean)"""
        return bool.__wrap(super(__scene2d.Actor, self).notify(arg0, __boolean.valueOf(arg1)))

    @override
    @overload
    def setUserObject(self, arg0: object):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setUserObject(java.lang.Object)"""
        super(__scene2d.Actor, self).setUserObject(arg0)

    @override
    @overload
    def setScaleY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScaleY(float)"""
        super(__scene2d.Actor, self).setScaleY(__float.valueOf(arg0))

    @override
    @overload
    def hasScrollFocus(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasScrollFocus()"""
        return bool.__wrap(super(scene2d.Actor, self).hasScrollFocus())

    @override
    @overload
    def toFront(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.toFront()"""
        super(scene2d.Actor, self).toFront()

    @override
    @overload
    def scaleBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.scaleBy(float)"""
        super(__scene2d.Actor, self).scaleBy(__float.valueOf(arg0))

    @overload
    def stageToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.stageToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).stageToLocalCoordinates(arg0))

    @override
    @overload
    def getOriginX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getOriginX()"""
        return float.__wrap(super(scene2d.Actor, self).getOriginX())

    @override
    @overload
    def getPrefWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.ProgressBar.getPrefWidth()"""
        return float.__wrap(super(ProgressBar, self).getPrefWidth())

    @override
    @overload
    def ascendantsVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.ascendantsVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).ascendantsVisible())

    @overload
    def setValue(self, arg0: float) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.ProgressBar.setValue(float)"""
        return bool.__wrap(super(__ProgressBar, self).setValue(__float.valueOf(arg0)))

    @override
    @overload
    def setDisabled(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ProgressBar.setDisabled(boolean)"""
        super(__ProgressBar, self).setDisabled(__boolean.valueOf(arg0))

    @override
    @overload
    def getColor(self) -> 'graphics.Color':
        """public com.badlogic.gdx.graphics.Color com.badlogic.gdx.scenes.scene2d.Actor.getColor()"""
        return 'graphics.Color'.__wrap(super(scene2d.Actor, self).getColor())

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @override
    @overload
    def getStage(self) -> 'scene2d.Stage':
        """public com.badlogic.gdx.scenes.scene2d.Stage com.badlogic.gdx.scenes.scene2d.Actor.getStage()"""
        return 'scene2d.Stage'.__wrap(super(scene2d.Actor, self).getStage())

    @overload
    def getMaxValue(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.ProgressBar.getMaxValue()"""
        return float.__wrap(super(ProgressBar, self).getMaxValue())

    @override
    @overload
    def addAction(self, arg0: 'Action'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.addAction(com.badlogic.gdx.scenes.scene2d.Action)"""
        super(__scene2d.Actor, self).addAction(arg0)

    @overload
    def __init__(self, arg0: float, arg1: float, arg2: float, arg3: bool, arg4: 'ProgressBarStyle'):
        """public com.badlogic.gdx.scenes.scene2d.ui.ProgressBar(float,float,float,boolean,com.badlogic.gdx.scenes.scene2d.ui.ProgressBar$ProgressBarStyle)"""
        val = __ProgressBar(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __boolean.valueOf(arg3), arg4)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def setColor(self, arg0: float, arg1: float, arg2: float, arg3: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setColor(float,float,float,float)"""
        super(__scene2d.Actor, self).setColor(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3))

    @override
    @overload
    def isTouchable(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchable()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchable())

    @overload
    def localToAscendantCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToAscendantCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToAscendantCoordinates(arg0, arg1))

    @overload
    def clipBegin(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.clipBegin(float,float,float,float)"""
        return bool.__wrap(super(__scene2d.Actor, self).clipBegin(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3)))

    @override
    @overload
    def getPrefHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.ProgressBar.getPrefHeight()"""
        return float.__wrap(super(ProgressBar, self).getPrefHeight())

    @override
    @overload
    def getActions(self) -> 'utils.Array':
        """public com.badlogic.gdx.utils.Array<com.badlogic.gdx.scenes.scene2d.Action> com.badlogic.gdx.scenes.scene2d.Actor.getActions()"""
        return 'utils.Array'.__wrap(super(scene2d.Actor, self).getActions()) 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle
from pyquantum_helper import import_once as __import_once__
from builtins import str
try:
    from pygdx.scenes.scene2d import utils
except ImportError:
    utils = __import_once__("pygdx.scenes.scene2d.utils")

from pyquantum_helper import override
import java.lang.Object as __object
from builtins import type
import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import com.badlogic.gdx.scenes.scene2d.ui.Button as __Button_ButtonStyle
__ButtonStyle = __Button_ButtonStyle.ButtonStyle
import java.lang.Integer as __int
from builtins import bool
from builtins import int
 
class ButtonStyle():
    """com.badlogic.gdx.scenes.scene2d.ui.Button.ButtonStyle"""
 
    @staticmethod
    def __wrap(java_value: __ButtonStyle) -> 'ButtonStyle':
        return ButtonStyle(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __ButtonStyle):
        """
        Dynamic initializer for ButtonStyle.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.lang.Object.toString()"""
        return str.__wrap(super(object, self).toString())

    @overload
    def __init__(self):
        """public com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle()"""
        val = __ButtonStyle()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def __init__(self, ):
        """public com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle()"""
        val = __ButtonStyle()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def __init__(self, arg0: 'ButtonStyle'):
        """public com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle(com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle)"""
        val = __ButtonStyle(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0))

    @overload
    def __init__(self, arg0: 'Drawable', arg1: 'Drawable', arg2: 'Drawable'):
        """public com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable)"""
        val = __ButtonStyle(arg0, arg1, arg2)
        self.__dict__ = val.__dict__
        self.__wrapper = val 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.Slider
from pyquantum_helper import import_once as __import_once__
import com.badlogic.gdx.scenes.scene2d.Touchable as __Touchable
__Touchable = __Touchable
try:
    from pygdx.scenes import scene2d
except ImportError:
    scene2d = __import_once__("pygdx.scenes.scene2d")

import com.badlogic.gdx.graphics.Color as __Color
__Color = __Color
import java.lang.Boolean as __boolean
try:
    from pygdx.graphics import g2d
except ImportError:
    g2d = __import_once__("pygdx.graphics.g2d")

from builtins import type
import com.badlogic.gdx.scenes.scene2d.Group as __Group
__Group = __Group
import com.badlogic.gdx.scenes.scene2d.ui.ProgressBar as __ProgressBar
__ProgressBar = __ProgressBar
import com.badlogic.gdx.math.Vector2 as __Vector2
__Vector2 = __Vector2
import com.badlogic.gdx.scenes.scene2d.ui.Slider as __Slider_SliderStyle
__SliderStyle = __Slider_SliderStyle.SliderStyle
import java.lang.Class as __Class
__Class = __Class
import com.badlogic.gdx.utils.Array as __Array
__Array = __Array
import java.lang.String as __string
try:
    from pygdx import math
except ImportError:
    math = __import_once__("pygdx.math")

from builtins import bool
import com.badlogic.gdx.scenes.scene2d.ui.Widget as __Widget
__Widget = __Widget
from builtins import str
try:
    from pygdx import utils
except ImportError:
    utils = __import_once__("pygdx.utils")

from pyquantum_helper import override
import java.lang.Object as __object
from builtins import float
from builtins import object
from typing import List
import com.badlogic.gdx.utils.DelayedRemovalArray as __DelayedRemovalArray
__DelayedRemovalArray = __DelayedRemovalArray
import java.lang.Long as __long
import java.lang.Float as __float
import java.lang.String as __String
__String = __String
import com.badlogic.gdx.scenes.scene2d.ui.Slider as __Slider
__Slider = __Slider
try:
    from pygdx.graphics import glutils
except ImportError:
    glutils = __import_once__("pygdx.graphics.glutils")

import java.lang.Object as __Object
__Object = __Object
import com.badlogic.gdx.scenes.scene2d.Actor as __Actor
__Actor = __Actor
import java.lang.Integer as __int
import com.badlogic.gdx.scenes.scene2d.Stage as __Stage
__Stage = __Stage
try:
    from pygdx import graphics
except ImportError:
    graphics = __import_once__("pygdx.graphics")

from builtins import int
 
class Slider(__ProgressBar, ProgressBar):
    """com.badlogic.gdx.scenes.scene2d.ui.Slider"""
 
    @staticmethod
    def __wrap(java_value: __Slider) -> 'Slider':
        return Slider(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Slider):
        """
        Dynamic initializer for Slider.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def getY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getY()"""
        return float.__wrap(super(scene2d.Actor, self).getY())

    @override
    @overload
    def getMinValue(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.ProgressBar.getMinValue()"""
        return float.__wrap(super(ProgressBar, self).getMinValue())

    @overload
    def setZIndex(self, arg0: int) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.setZIndex(int)"""
        return bool.__wrap(super(__scene2d.Actor, self).setZIndex(__int.valueOf(arg0)))

    @overload
    def __init__(self, arg0: float, arg1: float, arg2: float, arg3: bool, arg4: 'SliderStyle'):
        """public com.badlogic.gdx.scenes.scene2d.ui.Slider(float,float,float,boolean,com.badlogic.gdx.scenes.scene2d.ui.Slider$SliderStyle)"""
        val = __Slider(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __boolean.valueOf(arg3), arg4)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def setBounds(self, arg0: float, arg1: float, arg2: float, arg3: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setBounds(float,float,float,float)"""
        super(__scene2d.Actor, self).setBounds(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def setVisualPercent(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Slider.setVisualPercent(float)"""
        super(__Slider, self).setVisualPercent(__float.valueOf(arg0))

    @override
    @overload
    def needsLayout(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Widget.needsLayout()"""
        return bool.__wrap(super(Widget, self).needsLayout())

    @overload
    def isOver(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Slider.isOver()"""
        return bool.__wrap(super(Slider, self).isOver())

    @overload
    def getX(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getX(int)"""
        return float.__wrap(super(__scene2d.Actor, self).getX(__int.valueOf(arg0)))

    @override
    @overload
    def sizeBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.sizeBy(float)"""
        super(__scene2d.Actor, self).sizeBy(__float.valueOf(arg0))

    @override
    @overload
    def setRange(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ProgressBar.setRange(float,float)"""
        super(__ProgressBar, self).setRange(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def sizeBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.sizeBy(float,float)"""
        super(__scene2d.Actor, self).sizeBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def hasActions(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasActions()"""
        return bool.__wrap(super(scene2d.Actor, self).hasActions())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0))

    @override
    @overload
    def setScaleX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScaleX(float)"""
        super(__scene2d.Actor, self).setScaleX(__float.valueOf(arg0))

    @override
    @overload
    def getValue(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.ProgressBar.getValue()"""
        return float.__wrap(super(ProgressBar, self).getValue())

    @override
    @overload
    def getTouchable(self) -> 'scene2d.Touchable':
        """public com.badlogic.gdx.scenes.scene2d.Touchable com.badlogic.gdx.scenes.scene2d.Actor.getTouchable()"""
        return 'scene2d.Touchable'.__wrap(super(scene2d.Actor, self).getTouchable())

    @override
    @overload
    def removeAction(self, arg0: 'Action'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.removeAction(com.badlogic.gdx.scenes.scene2d.Action)"""
        super(__scene2d.Actor, self).removeAction(arg0)

    @override
    @overload
    def getX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getX()"""
        return float.__wrap(super(scene2d.Actor, self).getX())

    @override
    @overload
    def setStepSize(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ProgressBar.setStepSize(float)"""
        super(__ProgressBar, self).setStepSize(__float.valueOf(arg0))

    @overload
    def __init__(self, arg0: float, arg1: float, arg2: float, arg3: bool, arg4: 'Skin', arg5: str):
        """public com.badlogic.gdx.scenes.scene2d.ui.Slider(float,float,float,boolean,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String)"""
        val = __Slider(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __boolean.valueOf(arg3), arg4, arg5)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def getMaxWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Widget.getMaxWidth()"""
        return float.__wrap(super(Widget, self).getMaxWidth())

    @override
    @overload
    def toBack(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.toBack()"""
        super(scene2d.Actor, self).toBack()

    @override
    @overload
    def setProgrammaticChangeEvents(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ProgressBar.setProgrammaticChangeEvents(boolean)"""
        super(__ProgressBar, self).setProgrammaticChangeEvents(__boolean.valueOf(arg0))

    @override
    @overload
    def setDebug(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setDebug(boolean)"""
        super(__scene2d.Actor, self).setDebug(__boolean.valueOf(arg0))

    @override
    @overload
    def getStyle(self) -> 'SliderStyle':
        """public com.badlogic.gdx.scenes.scene2d.ui.Slider$SliderStyle com.badlogic.gdx.scenes.scene2d.ui.Slider.getStyle()"""
        return 'SliderStyle'.__wrap(super(Slider, self).getStyle())

    @override
    @overload
    def setX(self, arg0: float, arg1: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setX(float,int)"""
        super(__scene2d.Actor, self).setX(__float.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def screenToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.screenToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).screenToLocalCoordinates(arg0))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def ancestorsVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.ancestorsVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).ancestorsVisible())

    @override
    @overload
    def getListeners(self) -> 'utils.DelayedRemovalArray':
        """public com.badlogic.gdx.utils.DelayedRemovalArray<com.badlogic.gdx.scenes.scene2d.EventListener> com.badlogic.gdx.scenes.scene2d.Actor.getListeners()"""
        return 'utils.DelayedRemovalArray'.__wrap(super(scene2d.Actor, self).getListeners())

    @overload
    def isDragging(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Slider.isDragging()"""
        return bool.__wrap(super(Slider, self).isDragging())

    @override
    @overload
    def setFillParent(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.setFillParent(boolean)"""
        super(__Widget, self).setFillParent(__boolean.valueOf(arg0))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def removeListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.removeListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).removeListener(arg0))

    @override
    @overload
    def isTouchFocusListener(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchFocusListener()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchFocusListener())

    @overload
    def localToStageCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToStageCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToStageCoordinates(arg0))

    @override
    @overload
    def setSize(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setSize(float,float)"""
        super(__scene2d.Actor, self).setSize(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def getZIndex(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.Actor.getZIndex()"""
        return int.__wrap(super(scene2d.Actor, self).getZIndex())

    @override
    @overload
    def clipBegin(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.clipBegin()"""
        return bool.__wrap(super(scene2d.Actor, self).clipBegin())

    @override
    @overload
    def invalidateHierarchy(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.invalidateHierarchy()"""
        super(Widget, self).invalidateHierarchy()

    @override
    @overload
    def moveBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.moveBy(float,float)"""
        super(__scene2d.Actor, self).moveBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def getY(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getY(int)"""
        return float.__wrap(super(__scene2d.Actor, self).getY(__int.valueOf(arg0)))

    @override
    @overload
    def setOrigin(self, arg0: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOrigin(int)"""
        super(__scene2d.Actor, self).setOrigin(__int.valueOf(arg0))

    @overload
    def isDescendantOf(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isDescendantOf(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Actor, self).isDescendantOf(arg0))

    @override
    @overload
    def setStyle(self, arg0: 'ProgressBarStyle'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ProgressBar.setStyle(com.badlogic.gdx.scenes.scene2d.ui.ProgressBar$ProgressBarStyle)"""
        super(__ProgressBar, self).setStyle(arg0)

    @override
    @overload
    def getParent(self) -> 'scene2d.Group':
        """public com.badlogic.gdx.scenes.scene2d.Group com.badlogic.gdx.scenes.scene2d.Actor.getParent()"""
        return 'scene2d.Group'.__wrap(super(scene2d.Actor, self).getParent())

    @override
    @overload
    def clearListeners(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clearListeners()"""
        super(scene2d.Actor, self).clearListeners()

    @overload
    def localToActorCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToActorCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToActorCoordinates(arg0, arg1))

    @override
    @overload
    def setName(self, arg0: str):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setName(java.lang.String)"""
        super(__scene2d.Actor, self).setName(arg0)

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @override
    @overload
    def setLayoutEnabled(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.setLayoutEnabled(boolean)"""
        super(__Widget, self).setLayoutEnabled(__boolean.valueOf(arg0))

    @override
    @overload
    def setOriginX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOriginX(float)"""
        super(__scene2d.Actor, self).setOriginX(__float.valueOf(arg0))

    @override
    @overload
    def getHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getHeight()"""
        return float.__wrap(super(scene2d.Actor, self).getHeight())

    @override
    @overload
    def validate(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.validate()"""
        super(Widget, self).validate()

    @override
    @overload
    def hasKeyboardFocus(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasKeyboardFocus()"""
        return bool.__wrap(super(scene2d.Actor, self).hasKeyboardFocus())

    @override
    @overload
    def isDisabled(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.ProgressBar.isDisabled()"""
        return bool.__wrap(super(ProgressBar, self).isDisabled())

    @override
    @overload
    def getOriginY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getOriginY()"""
        return float.__wrap(super(scene2d.Actor, self).getOriginY())

    @override
    @overload
    def layout(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.layout()"""
        super(Widget, self).layout()

    @override
    @overload
    def clipEnd(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clipEnd()"""
        super(scene2d.Actor, self).clipEnd()

    @override
    @overload
    def getUserObject(self) -> object:
        """public java.lang.Object com.badlogic.gdx.scenes.scene2d.Actor.getUserObject()"""
        return object.__wrap(super(scene2d.Actor, self).getUserObject())

    @override
    @overload
    def pack(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.pack()"""
        super(Widget, self).pack()

    @override
    @overload
    def getDebug(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.getDebug()"""
        return bool.__wrap(super(scene2d.Actor, self).getDebug())

    @override
    @overload
    def setHeight(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setHeight(float)"""
        super(__scene2d.Actor, self).setHeight(__float.valueOf(arg0))

    @override
    @overload
    def setScale(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScale(float)"""
        super(__scene2d.Actor, self).setScale(__float.valueOf(arg0))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def setAnimateInterpolation(self, arg0: 'Interpolation'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ProgressBar.setAnimateInterpolation(com.badlogic.gdx.math.Interpolation)"""
        super(__ProgressBar, self).setAnimateInterpolation(arg0)

    @override
    @overload
    def rotateBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.rotateBy(float)"""
        super(__scene2d.Actor, self).rotateBy(__float.valueOf(arg0))

    @override
    @overload
    def getMinHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Widget.getMinHeight()"""
        return float.__wrap(super(Widget, self).getMinHeight())

    @override
    @overload
    def setScale(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScale(float,float)"""
        super(__scene2d.Actor, self).setScale(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def addListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.addListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).addListener(arg0))

    @override
    @overload
    def setVisualInterpolation(self, arg0: 'Interpolation'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ProgressBar.setVisualInterpolation(com.badlogic.gdx.math.Interpolation)"""
        super(__ProgressBar, self).setVisualInterpolation(arg0)

    @overload
    def parentToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.parentToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).parentToLocalCoordinates(arg0))

    @override
    @overload
    def getRotation(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getRotation()"""
        return float.__wrap(super(scene2d.Actor, self).getRotation())

    @override
    @overload
    def setVisible(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setVisible(boolean)"""
        super(__scene2d.Actor, self).setVisible(__boolean.valueOf(arg0))

    @overload
    def setSnapToValues(self, arg0: float, *arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Slider.setSnapToValues(float,float...)"""
        super(__Slider, self).setSnapToValues(__float.valueOf(arg0), arg1)

    @override
    @overload
    def setY(self, arg0: float, arg1: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setY(float,int)"""
        super(__scene2d.Actor, self).setY(__float.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def setX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setX(float)"""
        super(__scene2d.Actor, self).setX(__float.valueOf(arg0))

    @override
    @overload
    def invalidate(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.invalidate()"""
        super(Widget, self).invalidate()

    @override
    @overload
    def setOrigin(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOrigin(float,float)"""
        super(__scene2d.Actor, self).setOrigin(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def draw(self, arg0: 'Batch', arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ProgressBar.draw(com.badlogic.gdx.graphics.g2d.Batch,float)"""
        super(__ProgressBar, self).draw(arg0, __float.valueOf(arg1))

    @override
    @overload
    def setAnimateDuration(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ProgressBar.setAnimateDuration(float)"""
        super(__ProgressBar, self).setAnimateDuration(__float.valueOf(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def isVertical(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.ProgressBar.isVertical()"""
        return bool.__wrap(super(ProgressBar, self).isVertical())

    @override
    @overload
    def getRight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getRight()"""
        return float.__wrap(super(scene2d.Actor, self).getRight())

    @override
    @overload
    def updateVisualValue(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ProgressBar.updateVisualValue()"""
        super(ProgressBar, self).updateVisualValue()

    @overload
    def isAscendantOf(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isAscendantOf(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Actor, self).isAscendantOf(arg0))

    @override
    @overload
    def setWidth(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setWidth(float)"""
        super(__scene2d.Actor, self).setWidth(__float.valueOf(arg0))

    @override
    @overload
    def isTouchFocusTarget(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchFocusTarget()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchFocusTarget())

    @override
    @overload
    def hasParent(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasParent()"""
        return bool.__wrap(super(scene2d.Actor, self).hasParent())

    @override
    @overload
    def setPosition(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setPosition(float,float)"""
        super(__scene2d.Actor, self).setPosition(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def getVisualPercent(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.ProgressBar.getVisualPercent()"""
        return float.__wrap(super(ProgressBar, self).getVisualPercent())

    @override
    @overload
    def getScaleY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getScaleY()"""
        return float.__wrap(super(scene2d.Actor, self).getScaleY())

    @override
    @overload
    def getWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getWidth()"""
        return float.__wrap(super(scene2d.Actor, self).getWidth())

    @override
    @overload
    def setOriginY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOriginY(float)"""
        super(__scene2d.Actor, self).setOriginY(__float.valueOf(arg0))

    @override
    @overload
    def setPosition(self, arg0: float, arg1: float, arg2: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setPosition(float,float,int)"""
        super(__scene2d.Actor, self).setPosition(__float.valueOf(arg0), __float.valueOf(arg1), __int.valueOf(arg2))

    @overload
    def removeCaptureListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.removeCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).removeCaptureListener(arg0))

    @overload
    def __init__(self, arg0: float, arg1: float, arg2: float, arg3: bool, arg4: 'Skin'):
        """public com.badlogic.gdx.scenes.scene2d.ui.Slider(float,float,float,boolean,com.badlogic.gdx.scenes.scene2d.ui.Skin)"""
        val = __Slider(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __boolean.valueOf(arg3), arg4)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def setColor(self, arg0: 'Color'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setColor(com.badlogic.gdx.graphics.Color)"""
        super(__scene2d.Actor, self).setColor(arg0)

    @overload
    def localToScreenCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToScreenCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToScreenCoordinates(arg0))

    @override
    @overload
    def drawDebug(self, arg0: 'ShapeRenderer'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.drawDebug(com.badlogic.gdx.graphics.glutils.ShapeRenderer)"""
        super(__scene2d.Actor, self).drawDebug(arg0)

    @override
    @overload
    def setTouchable(self, arg0: 'Touchable'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setTouchable(com.badlogic.gdx.scenes.scene2d.Touchable)"""
        super(__scene2d.Actor, self).setTouchable(arg0)

    @overload
    def addCaptureListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.addCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).addCaptureListener(arg0))

    @overload
    def getSnapToValues(self) -> List[float]:
        """public float[] com.badlogic.gdx.scenes.scene2d.ui.Slider.getSnapToValues()"""
        return List[float].__wrap(super(Slider, self).getSnapToValues())

    @overload
    def fire(self, arg0: 'Event') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.fire(com.badlogic.gdx.scenes.scene2d.Event)"""
        return bool.__wrap(super(__scene2d.Actor, self).fire(arg0))

    @override
    @overload
    def getMaxHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Widget.getMaxHeight()"""
        return float.__wrap(super(Widget, self).getMaxHeight())

    @override
    @overload
    def remove(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.remove()"""
        return bool.__wrap(super(scene2d.Actor, self).remove())

    @override
    @overload
    def isAnimating(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.ProgressBar.isAnimating()"""
        return bool.__wrap(super(ProgressBar, self).isAnimating())

    @overload
    def hit(self, arg0: float, arg1: float, arg2: bool) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.Actor.hit(float,float,boolean)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Actor, self).hit(__float.valueOf(arg0), __float.valueOf(arg1), __boolean.valueOf(arg2)))

    @overload
    def localToParentCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToParentCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToParentCoordinates(arg0))

    @override
    @overload
    def clear(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clear()"""
        super(scene2d.Actor, self).clear()

    @override
    @overload
    def getName(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.Actor.getName()"""
        return str.__wrap(super(scene2d.Actor, self).getName())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.Actor.toString()"""
        return str.__wrap(super(scene2d.Actor, self).toString())

    @override
    @overload
    def isVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).isVisible())

    @override
    @overload
    def setRound(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ProgressBar.setRound(boolean)"""
        super(__ProgressBar, self).setRound(__boolean.valueOf(arg0))

    @override
    @overload
    def getCaptureListeners(self) -> 'utils.DelayedRemovalArray':
        """public com.badlogic.gdx.utils.DelayedRemovalArray<com.badlogic.gdx.scenes.scene2d.EventListener> com.badlogic.gdx.scenes.scene2d.Actor.getCaptureListeners()"""
        return 'utils.DelayedRemovalArray'.__wrap(super(scene2d.Actor, self).getCaptureListeners())

    @overload
    def setVisualInterpolationInverse(self, arg0: 'Interpolation'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Slider.setVisualInterpolationInverse(com.badlogic.gdx.math.Interpolation)"""
        super(__Slider, self).setVisualInterpolationInverse(arg0)

    @override
    @overload
    def debug(self) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.Actor.debug()"""
        return 'scene2d.Actor'.__wrap(super(scene2d.Actor, self).debug())

    @override
    @overload
    def getMaxValue(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.ProgressBar.getMaxValue()"""
        return float.__wrap(super(ProgressBar, self).getMaxValue())

    @override
    @overload
    def getTop(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getTop()"""
        return float.__wrap(super(scene2d.Actor, self).getTop())

    @override
    @overload
    def setY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setY(float)"""
        super(__scene2d.Actor, self).setY(__float.valueOf(arg0))

    @override
    @overload
    def getMinWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Widget.getMinWidth()"""
        return float.__wrap(super(Widget, self).getMinWidth())

    @override
    @overload
    def clearActions(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clearActions()"""
        super(scene2d.Actor, self).clearActions()

    @override
    @overload
    def scaleBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.scaleBy(float,float)"""
        super(__scene2d.Actor, self).scaleBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def setRotation(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setRotation(float)"""
        super(__scene2d.Actor, self).setRotation(__float.valueOf(arg0))

    @override
    @overload
    def getScaleX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getScaleX()"""
        return float.__wrap(super(scene2d.Actor, self).getScaleX())

    @overload
    def setSnapToValues(self, arg0: 'float', arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Slider.setSnapToValues(float[],float)"""
        super(__Slider, self).setSnapToValues(arg0, __float.valueOf(arg1))

    @overload
    def firstAscendant(self, arg0: 'Class') -> 'scene2d.Actor':
        """public <T extends com.badlogic.gdx.scenes.scene2d.Actor> T com.badlogic.gdx.scenes.scene2d.Actor.firstAscendant(java.lang.Class<T>)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Actor, self).firstAscendant(arg0))

    @override
    @overload
    def act(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ProgressBar.act(float)"""
        super(__ProgressBar, self).act(__float.valueOf(arg0))

    @override
    @overload
    def getStepSize(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.ProgressBar.getStepSize()"""
        return float.__wrap(super(ProgressBar, self).getStepSize())

    @overload
    def notify(self, arg0: 'Event', arg1: bool) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.notify(com.badlogic.gdx.scenes.scene2d.Event,boolean)"""
        return bool.__wrap(super(__scene2d.Actor, self).notify(arg0, __boolean.valueOf(arg1)))

    @override
    @overload
    def setUserObject(self, arg0: object):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setUserObject(java.lang.Object)"""
        super(__scene2d.Actor, self).setUserObject(arg0)

    @override
    @overload
    def setScaleY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScaleY(float)"""
        super(__scene2d.Actor, self).setScaleY(__float.valueOf(arg0))

    @override
    @overload
    def hasScrollFocus(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasScrollFocus()"""
        return bool.__wrap(super(scene2d.Actor, self).hasScrollFocus())

    @override
    @overload
    def toFront(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.toFront()"""
        super(scene2d.Actor, self).toFront()

    @override
    @overload
    def scaleBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.scaleBy(float)"""
        super(__scene2d.Actor, self).scaleBy(__float.valueOf(arg0))

    @overload
    def stageToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.stageToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).stageToLocalCoordinates(arg0))

    @override
    @overload
    def getVisualValue(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.ProgressBar.getVisualValue()"""
        return float.__wrap(super(ProgressBar, self).getVisualValue())

    @override
    @overload
    def getOriginX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getOriginX()"""
        return float.__wrap(super(scene2d.Actor, self).getOriginX())

    @override
    @overload
    def getPrefWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.ProgressBar.getPrefWidth()"""
        return float.__wrap(super(ProgressBar, self).getPrefWidth())

    @override
    @overload
    def ascendantsVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.ascendantsVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).ascendantsVisible())

    @overload
    def setValue(self, arg0: float) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.ProgressBar.setValue(float)"""
        return bool.__wrap(super(__ProgressBar, self).setValue(__float.valueOf(arg0)))

    @override
    @overload
    def setDisabled(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ProgressBar.setDisabled(boolean)"""
        super(__ProgressBar, self).setDisabled(__boolean.valueOf(arg0))

    @overload
    def setButton(self, arg0: int):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Slider.setButton(int)"""
        super(__Slider, self).setButton(__int.valueOf(arg0))

    @override
    @overload
    def getColor(self) -> 'graphics.Color':
        """public com.badlogic.gdx.graphics.Color com.badlogic.gdx.scenes.scene2d.Actor.getColor()"""
        return 'graphics.Color'.__wrap(super(scene2d.Actor, self).getColor())

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @override
    @overload
    def getStage(self) -> 'scene2d.Stage':
        """public com.badlogic.gdx.scenes.scene2d.Stage com.badlogic.gdx.scenes.scene2d.Actor.getStage()"""
        return 'scene2d.Stage'.__wrap(super(scene2d.Actor, self).getStage())

    @override
    @overload
    def getPercent(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.ProgressBar.getPercent()"""
        return float.__wrap(super(ProgressBar, self).getPercent())

    @override
    @overload
    def addAction(self, arg0: 'Action'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.addAction(com.badlogic.gdx.scenes.scene2d.Action)"""
        super(__scene2d.Actor, self).addAction(arg0)

    @override
    @overload
    def setColor(self, arg0: float, arg1: float, arg2: float, arg3: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setColor(float,float,float,float)"""
        super(__scene2d.Actor, self).setColor(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3))

    @overload
    def getSnapToValuesThreshold(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Slider.getSnapToValuesThreshold()"""
        return float.__wrap(super(Slider, self).getSnapToValuesThreshold())

    @override
    @overload
    def isTouchable(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchable()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchable())

    @overload
    def localToAscendantCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToAscendantCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToAscendantCoordinates(arg0, arg1))

    @overload
    def clipBegin(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.clipBegin(float,float,float,float)"""
        return bool.__wrap(super(__scene2d.Actor, self).clipBegin(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3)))

    @override
    @overload
    def getPrefHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.ProgressBar.getPrefHeight()"""
        return float.__wrap(super(ProgressBar, self).getPrefHeight())

    @override
    @overload
    def getActions(self) -> 'utils.Array':
        """public com.badlogic.gdx.utils.Array<com.badlogic.gdx.scenes.scene2d.Action> com.badlogic.gdx.scenes.scene2d.Actor.getActions()"""
        return 'utils.Array'.__wrap(super(scene2d.Actor, self).getActions()) 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxScrollPane
from pyquantum_helper import import_once as __import_once__
import com.badlogic.gdx.scenes.scene2d.Touchable as __Touchable
__Touchable = __Touchable
try:
    from pygdx.scenes import scene2d
except ImportError:
    scene2d = __import_once__("pygdx.scenes.scene2d")

import com.badlogic.gdx.graphics.Color as __Color
__Color = __Color
import com.badlogic.gdx.scenes.scene2d.ui.SelectBox as __SelectBox
__SelectBox = __SelectBox
import java.lang.Boolean as __boolean
try:
    from pygdx.graphics import g2d
except ImportError:
    g2d = __import_once__("pygdx.graphics.g2d")

from builtins import type
import com.badlogic.gdx.scenes.scene2d.Group as __Group
__Group = __Group
import com.badlogic.gdx.scenes.scene2d.ui.SelectBox as __SelectBox_SelectBoxScrollPane
__SelectBoxScrollPane = __SelectBox_SelectBoxScrollPane.SelectBoxScrollPane
import com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup as __WidgetGroup
__WidgetGroup = __WidgetGroup
import com.badlogic.gdx.math.Vector2 as __Vector2
__Vector2 = __Vector2
import com.badlogic.gdx.scenes.scene2d.ui.ScrollPane as __ScrollPane
__ScrollPane = __ScrollPane
import com.badlogic.gdx.math.Rectangle as __Rectangle
__Rectangle = __Rectangle
import java.lang.Class as __Class
__Class = __Class
import com.badlogic.gdx.utils.Array as __Array
__Array = __Array
import java.lang.String as __string
try:
    from pygdx import math
except ImportError:
    math = __import_once__("pygdx.math")

from builtins import bool
from builtins import str
try:
    from pygdx import utils
except ImportError:
    utils = __import_once__("pygdx.utils")

from pyquantum_helper import override
import java.lang.Object as __object
from builtins import float
import com.badlogic.gdx.scenes.scene2d.ui.List as __List
__List = __List
import com.badlogic.gdx.scenes.scene2d.ui.ScrollPane as __ScrollPane_ScrollPaneStyle
__ScrollPaneStyle = __ScrollPane_ScrollPaneStyle.ScrollPaneStyle
from builtins import object
import com.badlogic.gdx.utils.DelayedRemovalArray as __DelayedRemovalArray
__DelayedRemovalArray = __DelayedRemovalArray
import java.lang.Long as __long
import java.lang.Float as __float
import java.lang.String as __String
__String = __String
try:
    from pygdx.graphics import glutils
except ImportError:
    glutils = __import_once__("pygdx.graphics.glutils")

import java.lang.Object as __Object
__Object = __Object
import com.badlogic.gdx.utils.SnapshotArray as __SnapshotArray
__SnapshotArray = __SnapshotArray
import com.badlogic.gdx.scenes.scene2d.Actor as __Actor
__Actor = __Actor
import java.lang.Integer as __int
import com.badlogic.gdx.scenes.scene2d.Stage as __Stage
__Stage = __Stage
try:
    from pygdx import graphics
except ImportError:
    graphics = __import_once__("pygdx.graphics")

from builtins import int
 
class SelectBoxScrollPane(__ScrollPane, ScrollPane):
    """com.badlogic.gdx.scenes.scene2d.ui.SelectBox.SelectBoxScrollPane"""
 
    @staticmethod
    def __wrap(java_value: __SelectBoxScrollPane) -> 'SelectBoxScrollPane':
        return SelectBoxScrollPane(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __SelectBoxScrollPane):
        """
        Dynamic initializer for SelectBoxScrollPane.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def getY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getY()"""
        return float.__wrap(super(scene2d.Actor, self).getY())

    @override
    @overload
    def setScrollBarPositions(self, arg0: bool, arg1: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.setScrollBarPositions(boolean,boolean)"""
        super(__ScrollPane, self).setScrollBarPositions(__boolean.valueOf(arg0), __boolean.valueOf(arg1))

    @override
    @overload
    def setBounds(self, arg0: float, arg1: float, arg2: float, arg3: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setBounds(float,float,float,float)"""
        super(__scene2d.Actor, self).setBounds(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def findActor(self, arg0: str) -> 'scene2d.Actor':
        """public <T extends com.badlogic.gdx.scenes.scene2d.Actor> T com.badlogic.gdx.scenes.scene2d.Group.findActor(java.lang.String)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Group, self).findActor(arg0))

    @override
    @overload
    def getScrollY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.getScrollY()"""
        return float.__wrap(super(ScrollPane, self).getScrollY())

    @override
    @overload
    def isLeftEdge(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.isLeftEdge()"""
        return bool.__wrap(super(ScrollPane, self).isLeftEdge())

    @override
    @overload
    def getScrollWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.getScrollWidth()"""
        return float.__wrap(super(ScrollPane, self).getScrollWidth())

    @override
    @overload
    def isRightEdge(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.isRightEdge()"""
        return bool.__wrap(super(ScrollPane, self).isRightEdge())

    @override
    @overload
    def getTouchable(self) -> 'scene2d.Touchable':
        """public com.badlogic.gdx.scenes.scene2d.Touchable com.badlogic.gdx.scenes.scene2d.Actor.getTouchable()"""
        return 'scene2d.Touchable'.__wrap(super(scene2d.Actor, self).getTouchable())

    @override
    @overload
    def removeAction(self, arg0: 'Action'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.removeAction(com.badlogic.gdx.scenes.scene2d.Action)"""
        super(__scene2d.Actor, self).removeAction(arg0)

    @override
    @overload
    def getFadeScrollBars(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.getFadeScrollBars()"""
        return bool.__wrap(super(ScrollPane, self).getFadeScrollBars())

    @override
    @overload
    def setScrollX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.setScrollX(float)"""
        super(__ScrollPane, self).setScrollX(__float.valueOf(arg0))

    @override
    @overload
    def getMaxWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.getMaxWidth()"""
        return float.__wrap(super(WidgetGroup, self).getMaxWidth())

    @override
    @overload
    def setDebug(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setDebug(boolean)"""
        super(__scene2d.Actor, self).setDebug(__boolean.valueOf(arg0))

    @overload
    def hit(self, arg0: float, arg1: float, arg2: bool) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.hit(float,float,boolean)"""
        return 'scene2d.Actor'.__wrap(super(__ScrollPane, self).hit(__float.valueOf(arg0), __float.valueOf(arg1), __boolean.valueOf(arg2)))

    @override
    @overload
    def setScrollPercentX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.setScrollPercentX(float)"""
        super(__ScrollPane, self).setScrollPercentX(__float.valueOf(arg0))

    @override
    @overload
    def setX(self, arg0: float, arg1: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setX(float,int)"""
        super(__scene2d.Actor, self).setX(__float.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def getListeners(self) -> 'utils.DelayedRemovalArray':
        """public com.badlogic.gdx.utils.DelayedRemovalArray<com.badlogic.gdx.scenes.scene2d.EventListener> com.badlogic.gdx.scenes.scene2d.Actor.getListeners()"""
        return 'utils.DelayedRemovalArray'.__wrap(super(scene2d.Actor, self).getListeners())

    @override
    @overload
    def isDragging(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.isDragging()"""
        return bool.__wrap(super(ScrollPane, self).isDragging())

    @overload
    def removeListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.removeListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).removeListener(arg0))

    @override
    @overload
    def isTouchFocusListener(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchFocusListener()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchFocusListener())

    @overload
    def localToStageCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToStageCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToStageCoordinates(arg0))

    @override
    @overload
    def getPrefWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.getPrefWidth()"""
        return float.__wrap(super(ScrollPane, self).getPrefWidth())

    @override
    @overload
    def getMinHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.getMinHeight()"""
        return float.__wrap(super(ScrollPane, self).getMinHeight())

    @override
    @overload
    def clipBegin(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.clipBegin()"""
        return bool.__wrap(super(scene2d.Actor, self).clipBegin())

    @override
    @overload
    def moveBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.moveBy(float,float)"""
        super(__scene2d.Actor, self).moveBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def setName(self, arg0: str):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setName(java.lang.String)"""
        super(__scene2d.Actor, self).setName(arg0)

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @override
    @overload
    def act(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxScrollPane.act(float)"""
        super(__SelectBoxScrollPane, self).act(__float.valueOf(arg0))

    @overload
    def swapActor(self, arg0: 'Actor', arg1: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.swapActor(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Group, self).swapActor(arg0, arg1))

    @override
    @overload
    def setupOverscroll(self, arg0: float, arg1: float, arg2: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.setupOverscroll(float,float,float)"""
        super(__ScrollPane, self).setupOverscroll(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2))

    @override
    @overload
    def getVisualScrollPercentY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.getVisualScrollPercentY()"""
        return float.__wrap(super(ScrollPane, self).getVisualScrollPercentY())

    @override
    @overload
    def drawDebug(self, arg0: 'ShapeRenderer'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.drawDebug(com.badlogic.gdx.graphics.glutils.ShapeRenderer)"""
        super(__ScrollPane, self).drawDebug(arg0)

    @override
    @overload
    def getPrefHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.getPrefHeight()"""
        return float.__wrap(super(ScrollPane, self).getPrefHeight())

    @override
    @overload
    def getDebug(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.getDebug()"""
        return bool.__wrap(super(scene2d.Actor, self).getDebug())

    @override
    @overload
    def setHeight(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setHeight(float)"""
        super(__scene2d.Actor, self).setHeight(__float.valueOf(arg0))

    @override
    @overload
    def draw(self, arg0: 'Batch', arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxScrollPane.draw(com.badlogic.gdx.graphics.g2d.Batch,float)"""
        super(__SelectBoxScrollPane, self).draw(arg0, __float.valueOf(arg1))

    @override
    @overload
    def setScale(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScale(float)"""
        super(__scene2d.Actor, self).setScale(__float.valueOf(arg0))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getVisualScrollPercentX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.getVisualScrollPercentX()"""
        return float.__wrap(super(ScrollPane, self).getVisualScrollPercentX())

    @override
    @overload
    def getScrollBarHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.getScrollBarHeight()"""
        return float.__wrap(super(ScrollPane, self).getScrollBarHeight())

    @override
    @overload
    def setDebug(self, arg0: bool, arg1: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Group.setDebug(boolean,boolean)"""
        super(__scene2d.Group, self).setDebug(__boolean.valueOf(arg0), __boolean.valueOf(arg1))

    @override
    @overload
    def setScrollY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.setScrollY(float)"""
        super(__ScrollPane, self).setScrollY(__float.valueOf(arg0))

    @override
    @overload
    def setTransform(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Group.setTransform(boolean)"""
        super(__scene2d.Group, self).setTransform(__boolean.valueOf(arg0))

    @override
    @overload
    def isFlinging(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.isFlinging()"""
        return bool.__wrap(super(ScrollPane, self).isFlinging())

    @overload
    def parentToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.parentToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).parentToLocalCoordinates(arg0))

    @override
    @overload
    def getMaxY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.getMaxY()"""
        return float.__wrap(super(ScrollPane, self).getMaxY())

    @override
    @overload
    def fling(self, arg0: float, arg1: float, arg2: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.fling(float,float,float)"""
        super(__ScrollPane, self).fling(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2))

    @override
    @overload
    def getRotation(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getRotation()"""
        return float.__wrap(super(scene2d.Actor, self).getRotation())

    @override
    @overload
    def getMaxHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.getMaxHeight()"""
        return float.__wrap(super(WidgetGroup, self).getMaxHeight())

    @override
    @overload
    def getScrollPercentX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.getScrollPercentX()"""
        return float.__wrap(super(ScrollPane, self).getScrollPercentX())

    @override
    @overload
    def getVariableSizeKnobs(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.getVariableSizeKnobs()"""
        return bool.__wrap(super(ScrollPane, self).getVariableSizeKnobs())

    @overload
    def __init__(self, arg0: 'SelectBox'):
        """public com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxScrollPane(com.badlogic.gdx.scenes.scene2d.ui.SelectBox<T>)"""
        val = __SelectBoxScrollPane(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def updateVisualScroll(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.updateVisualScroll()"""
        super(ScrollPane, self).updateVisualScroll()

    @override
    @overload
    def getScrollBarWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.getScrollBarWidth()"""
        return float.__wrap(super(ScrollPane, self).getScrollBarWidth())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def setWidth(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setWidth(float)"""
        super(__scene2d.Actor, self).setWidth(__float.valueOf(arg0))

    @override
    @overload
    def isTouchFocusTarget(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchFocusTarget()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchFocusTarget())

    @overload
    def removeActor(self, arg0: 'Actor', arg1: bool) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.removeActor(com.badlogic.gdx.scenes.scene2d.Actor,boolean)"""
        return bool.__wrap(super(__ScrollPane, self).removeActor(arg0, __boolean.valueOf(arg1)))

    @override
    @overload
    def setPosition(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setPosition(float,float)"""
        super(__scene2d.Actor, self).setPosition(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def addActorAfter(self, arg0: 'Actor', arg1: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.addActorAfter(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__ScrollPane, self).addActorAfter(arg0, arg1)

    @override
    @overload
    def layout(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.layout()"""
        super(ScrollPane, self).layout()

    @override
    @overload
    def setOriginY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOriginY(float)"""
        super(__scene2d.Actor, self).setOriginY(__float.valueOf(arg0))

    @override
    @overload
    def setScrollbarsVisible(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.setScrollbarsVisible(boolean)"""
        super(__ScrollPane, self).setScrollbarsVisible(__boolean.valueOf(arg0))

    @override
    @overload
    def setOverscroll(self, arg0: bool, arg1: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.setOverscroll(boolean,boolean)"""
        super(__ScrollPane, self).setOverscroll(__boolean.valueOf(arg0), __boolean.valueOf(arg1))

    @overload
    def localToScreenCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToScreenCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToScreenCoordinates(arg0))

    @override
    @overload
    def clear(self):
        """public void com.badlogic.gdx.scenes.scene2d.Group.clear()"""
        super(scene2d.Group, self).clear()

    @override
    @overload
    def setTouchable(self, arg0: 'Touchable'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setTouchable(com.badlogic.gdx.scenes.scene2d.Touchable)"""
        super(__scene2d.Actor, self).setTouchable(arg0)

    @override
    @overload
    def setScrollBarTouch(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.setScrollBarTouch(boolean)"""
        super(__ScrollPane, self).setScrollBarTouch(__boolean.valueOf(arg0))

    @override
    @overload
    def getActor(self) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.getActor()"""
        return 'scene2d.Actor'.__wrap(super(ScrollPane, self).getActor())

    @override
    @overload
    def clearChildren(self):
        """public void com.badlogic.gdx.scenes.scene2d.Group.clearChildren()"""
        super(scene2d.Group, self).clearChildren()

    @overload
    def localToParentCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToParentCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToParentCoordinates(arg0))

    @override
    @overload
    def setCullingArea(self, arg0: 'Rectangle'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.setCullingArea(com.badlogic.gdx.math.Rectangle)"""
        super(__scene2d.Group, self).setCullingArea(arg0)

    @override
    @overload
    def getName(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.Actor.getName()"""
        return str.__wrap(super(scene2d.Actor, self).getName())

    @override
    @overload
    def getCaptureListeners(self) -> 'utils.DelayedRemovalArray':
        """public com.badlogic.gdx.utils.DelayedRemovalArray<com.badlogic.gdx.scenes.scene2d.EventListener> com.badlogic.gdx.scenes.scene2d.Actor.getCaptureListeners()"""
        return 'utils.DelayedRemovalArray'.__wrap(super(scene2d.Actor, self).getCaptureListeners())

    @override
    @overload
    def setActor(self, arg0: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.setActor(com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__ScrollPane, self).setActor(arg0)

    @override
    @overload
    def clear(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Group.clear(boolean)"""
        super(__scene2d.Group, self).clear(__boolean.valueOf(arg0))

    @override
    @overload
    def setY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setY(float)"""
        super(__scene2d.Actor, self).setY(__float.valueOf(arg0))

    @override
    @overload
    def scaleBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.scaleBy(float,float)"""
        super(__scene2d.Actor, self).scaleBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def notify(self, arg0: 'Event', arg1: bool) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.notify(com.badlogic.gdx.scenes.scene2d.Event,boolean)"""
        return bool.__wrap(super(__scene2d.Actor, self).notify(arg0, __boolean.valueOf(arg1)))

    @override
    @overload
    def cancelTouchFocus(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.cancelTouchFocus()"""
        super(ScrollPane, self).cancelTouchFocus()

    @override
    @overload
    def setUserObject(self, arg0: object):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setUserObject(java.lang.Object)"""
        super(__scene2d.Actor, self).setUserObject(arg0)

    @override
    @overload
    def hasScrollFocus(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasScrollFocus()"""
        return bool.__wrap(super(scene2d.Actor, self).hasScrollFocus())

    @override
    @overload
    def toFront(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.toFront()"""
        super(scene2d.Actor, self).toFront()

    @override
    @overload
    def scaleBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.scaleBy(float)"""
        super(__scene2d.Actor, self).scaleBy(__float.valueOf(arg0))

    @override
    @overload
    def getOriginX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getOriginX()"""
        return float.__wrap(super(scene2d.Actor, self).getOriginX())

    @overload
    def getChild(self, arg0: int) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.Group.getChild(int)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Group, self).getChild(__int.valueOf(arg0)))

    @override
    @overload
    def clearChildren(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Group.clearChildren(boolean)"""
        super(__scene2d.Group, self).clearChildren(__boolean.valueOf(arg0))

    @override
    @overload
    def setVariableSizeKnobs(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.setVariableSizeKnobs(boolean)"""
        super(__ScrollPane, self).setVariableSizeKnobs(__boolean.valueOf(arg0))

    @override
    @overload
    def getStage(self) -> 'scene2d.Stage':
        """public com.badlogic.gdx.scenes.scene2d.Stage com.badlogic.gdx.scenes.scene2d.Actor.getStage()"""
        return 'scene2d.Stage'.__wrap(super(scene2d.Actor, self).getStage())

    @override
    @overload
    def addAction(self, arg0: 'Action'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.addAction(com.badlogic.gdx.scenes.scene2d.Action)"""
        super(__scene2d.Actor, self).addAction(arg0)

    @override
    @overload
    def setColor(self, arg0: float, arg1: float, arg2: float, arg3: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setColor(float,float,float,float)"""
        super(__scene2d.Actor, self).setColor(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3))

    @overload
    def localToAscendantCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToAscendantCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToAscendantCoordinates(arg0, arg1))

    @override
    @overload
    def getActions(self) -> 'utils.Array':
        """public com.badlogic.gdx.utils.Array<com.badlogic.gdx.scenes.scene2d.Action> com.badlogic.gdx.scenes.scene2d.Actor.getActions()"""
        return 'utils.Array'.__wrap(super(scene2d.Actor, self).getActions())

    @override
    @overload
    def getMinWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.getMinWidth()"""
        return float.__wrap(super(ScrollPane, self).getMinWidth())

    @overload
    def localToDescendantCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Group.localToDescendantCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Group, self).localToDescendantCoordinates(arg0, arg1))

    @overload
    def setZIndex(self, arg0: int) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.setZIndex(int)"""
        return bool.__wrap(super(__scene2d.Actor, self).setZIndex(__int.valueOf(arg0)))

    @override
    @overload
    def isForceScrollX(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.isForceScrollX()"""
        return bool.__wrap(super(ScrollPane, self).isForceScrollX())

    @override
    @overload
    def getMaxX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.getMaxX()"""
        return float.__wrap(super(ScrollPane, self).getMaxX())

    @override
    @overload
    def isScrollingDisabledX(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.isScrollingDisabledX()"""
        return bool.__wrap(super(ScrollPane, self).isScrollingDisabledX())

    @overload
    def getX(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getX(int)"""
        return float.__wrap(super(__scene2d.Actor, self).getX(__int.valueOf(arg0)))

    @override
    @overload
    def sizeBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.sizeBy(float)"""
        super(__scene2d.Actor, self).sizeBy(__float.valueOf(arg0))

    @overload
    def removeActorAt(self, arg0: int, arg1: bool) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.removeActorAt(int,boolean)"""
        return 'scene2d.Actor'.__wrap(super(__ScrollPane, self).removeActorAt(__int.valueOf(arg0), __boolean.valueOf(arg1)))

    @override
    @overload
    def getStyle(self) -> 'ScrollPaneStyle':
        """public com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$ScrollPaneStyle com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.getStyle()"""
        return 'ScrollPaneStyle'.__wrap(super(ScrollPane, self).getStyle())

    @override
    @overload
    def setClamp(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.setClamp(boolean)"""
        super(__ScrollPane, self).setClamp(__boolean.valueOf(arg0))

    @override
    @overload
    def setScrollbarsOnTop(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.setScrollbarsOnTop(boolean)"""
        super(__ScrollPane, self).setScrollbarsOnTop(__boolean.valueOf(arg0))

    @override
    @overload
    def invalidate(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.invalidate()"""
        super(WidgetGroup, self).invalidate()

    @override
    @overload
    def sizeBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.sizeBy(float,float)"""
        super(__scene2d.Actor, self).sizeBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def hasActions(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasActions()"""
        return bool.__wrap(super(scene2d.Actor, self).hasActions())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0))

    @override
    @overload
    def setScaleX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScaleX(float)"""
        super(__scene2d.Actor, self).setScaleX(__float.valueOf(arg0))

    @override
    @overload
    def getX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getX()"""
        return float.__wrap(super(scene2d.Actor, self).getX())

    @override
    @overload
    def toBack(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.toBack()"""
        super(scene2d.Actor, self).toBack()

    @override
    @overload
    def scrollTo(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool, arg5: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.scrollTo(float,float,float,float,boolean,boolean)"""
        super(__ScrollPane, self).scrollTo(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3), __boolean.valueOf(arg4), __boolean.valueOf(arg5))

    @override
    @overload
    def getScrollHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.getScrollHeight()"""
        return float.__wrap(super(ScrollPane, self).getScrollHeight())

    @override
    @overload
    def isForceScrollY(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.isForceScrollY()"""
        return bool.__wrap(super(ScrollPane, self).isForceScrollY())

    @override
    @overload
    def getScrollPercentY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.getScrollPercentY()"""
        return float.__wrap(super(ScrollPane, self).getScrollPercentY())

    @overload
    def screenToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.screenToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).screenToLocalCoordinates(arg0))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def setFlingTime(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.setFlingTime(float)"""
        super(__ScrollPane, self).setFlingTime(__float.valueOf(arg0))

    @override
    @overload
    def ancestorsVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.ancestorsVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).ancestorsVisible())

    @overload
    def show(self, arg0: 'Stage'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxScrollPane.show(com.badlogic.gdx.scenes.scene2d.Stage)"""
        super(__SelectBoxScrollPane, self).show(arg0)

    @override
    @overload
    def setVelocityY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.setVelocityY(float)"""
        super(__ScrollPane, self).setVelocityY(__float.valueOf(arg0))

    @override
    @overload
    def debugAll(self) -> 'scene2d.Group':
        """public com.badlogic.gdx.scenes.scene2d.Group com.badlogic.gdx.scenes.scene2d.Group.debugAll()"""
        return 'scene2d.Group'.__wrap(super(scene2d.Group, self).debugAll())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def setSize(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setSize(float,float)"""
        super(__scene2d.Actor, self).setSize(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def getZIndex(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.Actor.getZIndex()"""
        return int.__wrap(super(scene2d.Actor, self).getZIndex())

    @overload
    def getY(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getY(int)"""
        return float.__wrap(super(__scene2d.Actor, self).getY(__int.valueOf(arg0)))

    @override
    @overload
    def setOrigin(self, arg0: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOrigin(int)"""
        super(__scene2d.Actor, self).setOrigin(__int.valueOf(arg0))

    @override
    @overload
    def validate(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.validate()"""
        super(WidgetGroup, self).validate()

    @overload
    def isDescendantOf(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isDescendantOf(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Actor, self).isDescendantOf(arg0))

    @override
    @overload
    def getParent(self) -> 'scene2d.Group':
        """public com.badlogic.gdx.scenes.scene2d.Group com.badlogic.gdx.scenes.scene2d.Actor.getParent()"""
        return 'scene2d.Group'.__wrap(super(scene2d.Actor, self).getParent())

    @override
    @overload
    def clearListeners(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clearListeners()"""
        super(scene2d.Actor, self).clearListeners()

    @overload
    def localToActorCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToActorCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToActorCoordinates(arg0, arg1))

    @override
    @overload
    def getScrollX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.getScrollX()"""
        return float.__wrap(super(ScrollPane, self).getScrollX())

    @override
    @overload
    def setOriginX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOriginX(float)"""
        super(__scene2d.Actor, self).setOriginX(__float.valueOf(arg0))

    @override
    @overload
    def getHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getHeight()"""
        return float.__wrap(super(scene2d.Actor, self).getHeight())

    @override
    @overload
    def hasKeyboardFocus(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasKeyboardFocus()"""
        return bool.__wrap(super(scene2d.Actor, self).hasKeyboardFocus())

    @override
    @overload
    def getOriginY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getOriginY()"""
        return float.__wrap(super(scene2d.Actor, self).getOriginY())

    @override
    @overload
    def isPanning(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.isPanning()"""
        return bool.__wrap(super(ScrollPane, self).isPanning())

    @override
    @overload
    def pack(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.pack()"""
        super(WidgetGroup, self).pack()

    @override
    @overload
    def clipEnd(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clipEnd()"""
        super(scene2d.Actor, self).clipEnd()

    @override
    @overload
    def getUserObject(self) -> object:
        """public java.lang.Object com.badlogic.gdx.scenes.scene2d.Actor.getUserObject()"""
        return object.__wrap(super(scene2d.Actor, self).getUserObject())

    @override
    @overload
    def getVisualScrollY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.getVisualScrollY()"""
        return float.__wrap(super(ScrollPane, self).getVisualScrollY())

    @override
    @overload
    def setScrollingDisabled(self, arg0: bool, arg1: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.setScrollingDisabled(boolean,boolean)"""
        super(__ScrollPane, self).setScrollingDisabled(__boolean.valueOf(arg0), __boolean.valueOf(arg1))

    @overload
    def getSelectBox(self) -> 'SelectBox':
        """public com.badlogic.gdx.scenes.scene2d.ui.SelectBox<T> com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxScrollPane.getSelectBox()"""
        return 'SelectBox'.__wrap(super(SelectBoxScrollPane, self).getSelectBox())

    @override
    @overload
    def rotateBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.rotateBy(float)"""
        super(__scene2d.Actor, self).rotateBy(__float.valueOf(arg0))

    @override
    @overload
    def setWidget(self, arg0: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.setWidget(com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__ScrollPane, self).setWidget(arg0)

    @override
    @overload
    def isScrollX(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.isScrollX()"""
        return bool.__wrap(super(ScrollPane, self).isScrollX())

    @override
    @overload
    def setScale(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScale(float,float)"""
        super(__scene2d.Actor, self).setScale(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def addActor(self, arg0: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.addActor(com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__ScrollPane, self).addActor(arg0)

    @override
    @overload
    def getWidget(self) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.getWidget()"""
        return 'scene2d.Actor'.__wrap(super(ScrollPane, self).getWidget())

    @overload
    def addListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.addListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).addListener(arg0))

    @override
    @overload
    def setCancelTouchFocus(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.setCancelTouchFocus(boolean)"""
        super(__ScrollPane, self).setCancelTouchFocus(__boolean.valueOf(arg0))

    @override
    @overload
    def setVelocityX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.setVelocityX(float)"""
        super(__ScrollPane, self).setVelocityX(__float.valueOf(arg0))

    @override
    @overload
    def setScrollPercentY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.setScrollPercentY(float)"""
        super(__ScrollPane, self).setScrollPercentY(__float.valueOf(arg0))

    @override
    @overload
    def setVisible(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setVisible(boolean)"""
        super(__scene2d.Actor, self).setVisible(__boolean.valueOf(arg0))

    @override
    @overload
    def setY(self, arg0: float, arg1: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setY(float,int)"""
        super(__scene2d.Actor, self).setY(__float.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def setFillParent(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.setFillParent(boolean)"""
        super(__WidgetGroup, self).setFillParent(__boolean.valueOf(arg0))

    @override
    @overload
    def needsLayout(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.needsLayout()"""
        return bool.__wrap(super(WidgetGroup, self).needsLayout())

    @override
    @overload
    def setFadeScrollBars(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.setFadeScrollBars(boolean)"""
        super(__ScrollPane, self).setFadeScrollBars(__boolean.valueOf(arg0))

    @override
    @overload
    def setX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setX(float)"""
        super(__scene2d.Actor, self).setX(__float.valueOf(arg0))

    @override
    @overload
    def setOrigin(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOrigin(float,float)"""
        super(__scene2d.Actor, self).setOrigin(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def getCullingArea(self) -> 'math.Rectangle':
        """public com.badlogic.gdx.math.Rectangle com.badlogic.gdx.scenes.scene2d.Group.getCullingArea()"""
        return 'math.Rectangle'.__wrap(super(scene2d.Group, self).getCullingArea())

    @override
    @overload
    def isBottomEdge(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.isBottomEdge()"""
        return bool.__wrap(super(ScrollPane, self).isBottomEdge())

    @override
    @overload
    def cancel(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.cancel()"""
        super(ScrollPane, self).cancel()

    @override
    @overload
    def getRight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getRight()"""
        return float.__wrap(super(scene2d.Actor, self).getRight())

    @overload
    def isAscendantOf(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isAscendantOf(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Actor, self).isAscendantOf(arg0))

    @override
    @overload
    def setFlickScroll(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.setFlickScroll(boolean)"""
        super(__ScrollPane, self).setFlickScroll(__boolean.valueOf(arg0))

    @override
    @overload
    def hasParent(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasParent()"""
        return bool.__wrap(super(scene2d.Actor, self).hasParent())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.Group.toString()"""
        return str.__wrap(super(scene2d.Group, self).toString())

    @override
    @overload
    def getOverscrollDistance(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.getOverscrollDistance()"""
        return float.__wrap(super(ScrollPane, self).getOverscrollDistance())

    @override
    @overload
    def getChildren(self) -> 'utils.SnapshotArray':
        """public com.badlogic.gdx.utils.SnapshotArray<com.badlogic.gdx.scenes.scene2d.Actor> com.badlogic.gdx.scenes.scene2d.Group.getChildren()"""
        return 'utils.SnapshotArray'.__wrap(super(scene2d.Group, self).getChildren())

    @override
    @overload
    def addActorAt(self, arg0: int, arg1: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.addActorAt(int,com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__ScrollPane, self).addActorAt(__int.valueOf(arg0), arg1)

    @override
    @overload
    def getScaleY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getScaleY()"""
        return float.__wrap(super(scene2d.Actor, self).getScaleY())

    @override
    @overload
    def setStyle(self, arg0: 'ScrollPaneStyle'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.setStyle(com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$ScrollPaneStyle)"""
        super(__ScrollPane, self).setStyle(arg0)

    @override
    @overload
    def getWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getWidth()"""
        return float.__wrap(super(scene2d.Actor, self).getWidth())

    @override
    @overload
    def setPosition(self, arg0: float, arg1: float, arg2: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setPosition(float,float,int)"""
        super(__scene2d.Actor, self).setPosition(__float.valueOf(arg0), __float.valueOf(arg1), __int.valueOf(arg2))

    @override
    @overload
    def setLayoutEnabled(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.setLayoutEnabled(boolean)"""
        super(__WidgetGroup, self).setLayoutEnabled(__boolean.valueOf(arg0))

    @overload
    def removeCaptureListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.removeCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).removeCaptureListener(arg0))

    @override
    @overload
    def invalidateHierarchy(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.invalidateHierarchy()"""
        super(WidgetGroup, self).invalidateHierarchy()

    @override
    @overload
    def setColor(self, arg0: 'Color'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setColor(com.badlogic.gdx.graphics.Color)"""
        super(__scene2d.Actor, self).setColor(arg0)

    @override
    @overload
    def isTopEdge(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.isTopEdge()"""
        return bool.__wrap(super(ScrollPane, self).isTopEdge())

    @overload
    def addCaptureListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.addCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).addCaptureListener(arg0))

    @overload
    def fire(self, arg0: 'Event') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.fire(com.badlogic.gdx.scenes.scene2d.Event)"""
        return bool.__wrap(super(__scene2d.Actor, self).fire(arg0))

    @override
    @overload
    def getVelocityX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.getVelocityX()"""
        return float.__wrap(super(ScrollPane, self).getVelocityX())

    @override
    @overload
    def getVisualScrollX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.getVisualScrollX()"""
        return float.__wrap(super(ScrollPane, self).getVisualScrollX())

    @override
    @overload
    def remove(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.remove()"""
        return bool.__wrap(super(scene2d.Actor, self).remove())

    @override
    @overload
    def isVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).isVisible())

    @override
    @overload
    def debug(self) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.Actor.debug()"""
        return 'scene2d.Actor'.__wrap(super(scene2d.Actor, self).debug())

    @override
    @overload
    def getTop(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getTop()"""
        return float.__wrap(super(scene2d.Actor, self).getTop())

    @override
    @overload
    def setSmoothScrolling(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.setSmoothScrolling(boolean)"""
        super(__ScrollPane, self).setSmoothScrolling(__boolean.valueOf(arg0))

    @override
    @overload
    def clearActions(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clearActions()"""
        super(scene2d.Actor, self).clearActions()

    @overload
    def hide(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxScrollPane.hide()"""
        super(SelectBoxScrollPane, self).hide()

    @override
    @overload
    def setRotation(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setRotation(float)"""
        super(__scene2d.Actor, self).setRotation(__float.valueOf(arg0))

    @override
    @overload
    def getScaleX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getScaleX()"""
        return float.__wrap(super(scene2d.Actor, self).getScaleX())

    @overload
    def firstAscendant(self, arg0: 'Class') -> 'scene2d.Actor':
        """public <T extends com.badlogic.gdx.scenes.scene2d.Actor> T com.badlogic.gdx.scenes.scene2d.Actor.firstAscendant(java.lang.Class<T>)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Actor, self).firstAscendant(arg0))

    @override
    @overload
    def setForceScroll(self, arg0: bool, arg1: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.setForceScroll(boolean,boolean)"""
        super(__ScrollPane, self).setForceScroll(__boolean.valueOf(arg0), __boolean.valueOf(arg1))

    @override
    @overload
    def setScaleY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScaleY(float)"""
        super(__scene2d.Actor, self).setScaleY(__float.valueOf(arg0))

    @override
    @overload
    def scrollTo(self, arg0: float, arg1: float, arg2: float, arg3: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.scrollTo(float,float,float,float)"""
        super(__ScrollPane, self).scrollTo(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3))

    @override
    @overload
    def isScrollingDisabledY(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.isScrollingDisabledY()"""
        return bool.__wrap(super(ScrollPane, self).isScrollingDisabledY())

    @overload
    def stageToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.stageToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).stageToLocalCoordinates(arg0))

    @overload
    def getList(self) -> 'List':
        """public com.badlogic.gdx.scenes.scene2d.ui.List<T> com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxScrollPane.getList()"""
        return 'List'.__wrap(super(SelectBoxScrollPane, self).getList())

    @overload
    def swapActor(self, arg0: int, arg1: int) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.swapActor(int,int)"""
        return bool.__wrap(super(__scene2d.Group, self).swapActor(__int.valueOf(arg0), __int.valueOf(arg1)))

    @override
    @overload
    def hasChildren(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.hasChildren()"""
        return bool.__wrap(super(scene2d.Group, self).hasChildren())

    @override
    @overload
    def ascendantsVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.ascendantsVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).ascendantsVisible())

    @override
    @overload
    def setupFadeScrollBars(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.setupFadeScrollBars(float,float)"""
        super(__ScrollPane, self).setupFadeScrollBars(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def removeActor(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.removeActor(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__ScrollPane, self).removeActor(arg0))

    @override
    @overload
    def getColor(self) -> 'graphics.Color':
        """public com.badlogic.gdx.graphics.Color com.badlogic.gdx.scenes.scene2d.Actor.getColor()"""
        return 'graphics.Color'.__wrap(super(scene2d.Actor, self).getColor())

    @override
    @overload
    def isTransform(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.isTransform()"""
        return bool.__wrap(super(scene2d.Group, self).isTransform())

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @override
    @overload
    def getVelocityY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.getVelocityY()"""
        return float.__wrap(super(ScrollPane, self).getVelocityY())

    @override
    @overload
    def addActorBefore(self, arg0: 'Actor', arg1: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.addActorBefore(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__ScrollPane, self).addActorBefore(arg0, arg1)

    @override
    @overload
    def isScrollY(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.isScrollY()"""
        return bool.__wrap(super(ScrollPane, self).isScrollY())

    @override
    @overload
    def setFlickScrollTapSquareSize(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.setFlickScrollTapSquareSize(float)"""
        super(__ScrollPane, self).setFlickScrollTapSquareSize(__float.valueOf(arg0))

    @override
    @overload
    def isTouchable(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchable()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchable())

    @overload
    def clipBegin(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.clipBegin(float,float,float,float)"""
        return bool.__wrap(super(__scene2d.Actor, self).clipBegin(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3))) 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.ImageButton$ImageButtonStyle
from pyquantum_helper import import_once as __import_once__
from builtins import str
try:
    from pygdx.scenes.scene2d import utils
except ImportError:
    utils = __import_once__("pygdx.scenes.scene2d.utils")

from pyquantum_helper import override
import java.lang.Object as __object
from builtins import type
import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import java.lang.String as __String
__String = __String
import com.badlogic.gdx.scenes.scene2d.ui.ImageButton as __ImageButton_ImageButtonStyle
__ImageButtonStyle = __ImageButton_ImageButtonStyle.ImageButtonStyle
import java.lang.Object as __Object
__Object = __Object
import java.lang.Integer as __int
from builtins import bool
from builtins import int
 
class ImageButtonStyle(__ButtonStyle, ButtonStyle):
    """com.badlogic.gdx.scenes.scene2d.ui.ImageButton.ImageButtonStyle"""
 
    @staticmethod
    def __wrap(java_value: __ImageButtonStyle) -> 'ImageButtonStyle':
        return ImageButtonStyle(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __ImageButtonStyle):
        """
        Dynamic initializer for ImageButtonStyle.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def __init__(self, arg0: 'ButtonStyle'):
        """public com.badlogic.gdx.scenes.scene2d.ui.ImageButton$ImageButtonStyle(com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle)"""
        val = __ImageButtonStyle(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.lang.Object.toString()"""
        return str.__wrap(super(object, self).toString())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @overload
    def __init__(self, arg0: 'Drawable', arg1: 'Drawable', arg2: 'Drawable', arg3: 'Drawable', arg4: 'Drawable', arg5: 'Drawable'):
        """public com.badlogic.gdx.scenes.scene2d.ui.ImageButton$ImageButtonStyle(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable)"""
        val = __ImageButtonStyle(arg0, arg1, arg2, arg3, arg4, arg5)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def __init__(self, arg0: 'ImageButtonStyle'):
        """public com.badlogic.gdx.scenes.scene2d.ui.ImageButton$ImageButtonStyle(com.badlogic.gdx.scenes.scene2d.ui.ImageButton$ImageButtonStyle)"""
        val = __ImageButtonStyle(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def __init__(self):
        """public com.badlogic.gdx.scenes.scene2d.ui.ImageButton$ImageButtonStyle()"""
        val = __ImageButtonStyle()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def __init__(self, ):
        """public com.badlogic.gdx.scenes.scene2d.ui.ImageButton$ImageButtonStyle()"""
        val = __ImageButtonStyle()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0)) 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup
from pyquantum_helper import import_once as __import_once__
import com.badlogic.gdx.scenes.scene2d.Touchable as __Touchable
__Touchable = __Touchable
try:
    from pygdx.scenes import scene2d
except ImportError:
    scene2d = __import_once__("pygdx.scenes.scene2d")

import com.badlogic.gdx.graphics.Color as __Color
__Color = __Color
import java.lang.Boolean as __boolean
try:
    from pygdx.graphics import g2d
except ImportError:
    g2d = __import_once__("pygdx.graphics.g2d")

from builtins import type
import com.badlogic.gdx.scenes.scene2d.Group as __Group
__Group = __Group
import com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup as __WidgetGroup
__WidgetGroup = __WidgetGroup
import com.badlogic.gdx.math.Vector2 as __Vector2
__Vector2 = __Vector2
import com.badlogic.gdx.math.Rectangle as __Rectangle
__Rectangle = __Rectangle
import java.lang.Class as __Class
__Class = __Class
import com.badlogic.gdx.utils.Array as __Array
__Array = __Array
import java.lang.String as __string
try:
    from pygdx import math
except ImportError:
    math = __import_once__("pygdx.math")

from builtins import bool
from builtins import str
try:
    from pygdx import utils
except ImportError:
    utils = __import_once__("pygdx.utils")

from pyquantum_helper import override
import java.lang.Object as __object
from builtins import float
from builtins import object
import com.badlogic.gdx.utils.DelayedRemovalArray as __DelayedRemovalArray
__DelayedRemovalArray = __DelayedRemovalArray
import java.lang.Long as __long
import java.lang.Float as __float
import com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup as __VerticalGroup
__VerticalGroup = __VerticalGroup
import java.lang.String as __String
__String = __String
try:
    from pygdx.graphics import glutils
except ImportError:
    glutils = __import_once__("pygdx.graphics.glutils")

import java.lang.Object as __Object
__Object = __Object
import com.badlogic.gdx.utils.SnapshotArray as __SnapshotArray
__SnapshotArray = __SnapshotArray
import com.badlogic.gdx.scenes.scene2d.Actor as __Actor
__Actor = __Actor
import java.lang.Integer as __int
import com.badlogic.gdx.scenes.scene2d.Stage as __Stage
__Stage = __Stage
try:
    from pygdx import graphics
except ImportError:
    graphics = __import_once__("pygdx.graphics")

from builtins import int
 
class VerticalGroup(__WidgetGroup, WidgetGroup):
    """com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup"""
 
    @staticmethod
    def __wrap(java_value: __VerticalGroup) -> 'VerticalGroup':
        return VerticalGroup(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __VerticalGroup):
        """
        Dynamic initializer for VerticalGroup.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def getY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getY()"""
        return float.__wrap(super(scene2d.Actor, self).getY())

    @overload
    def localToDescendantCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Group.localToDescendantCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Group, self).localToDescendantCoordinates(arg0, arg1))

    @overload
    def setZIndex(self, arg0: int) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.setZIndex(int)"""
        return bool.__wrap(super(__scene2d.Actor, self).setZIndex(__int.valueOf(arg0)))

    @override
    @overload
    def setBounds(self, arg0: float, arg1: float, arg2: float, arg3: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setBounds(float,float,float,float)"""
        super(__scene2d.Actor, self).setBounds(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def getX(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getX(int)"""
        return float.__wrap(super(__scene2d.Actor, self).getX(__int.valueOf(arg0)))

    @override
    @overload
    def sizeBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.sizeBy(float)"""
        super(__scene2d.Actor, self).sizeBy(__float.valueOf(arg0))

    @overload
    def findActor(self, arg0: str) -> 'scene2d.Actor':
        """public <T extends com.badlogic.gdx.scenes.scene2d.Actor> T com.badlogic.gdx.scenes.scene2d.Group.findActor(java.lang.String)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Group, self).findActor(arg0))

    @override
    @overload
    def sizeBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.sizeBy(float,float)"""
        super(__scene2d.Actor, self).sizeBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def reverse(self) -> 'VerticalGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup.reverse()"""
        return 'VerticalGroup'.__wrap(super(VerticalGroup, self).reverse())

    @override
    @overload
    def hasActions(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasActions()"""
        return bool.__wrap(super(scene2d.Actor, self).hasActions())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0))

    @override
    @overload
    def setScaleX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScaleX(float)"""
        super(__scene2d.Actor, self).setScaleX(__float.valueOf(arg0))

    @override
    @overload
    def getTouchable(self) -> 'scene2d.Touchable':
        """public com.badlogic.gdx.scenes.scene2d.Touchable com.badlogic.gdx.scenes.scene2d.Actor.getTouchable()"""
        return 'scene2d.Touchable'.__wrap(super(scene2d.Actor, self).getTouchable())

    @overload
    def space(self, arg0: float) -> 'VerticalGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup.space(float)"""
        return 'VerticalGroup'.__wrap(super(__VerticalGroup, self).space(__float.valueOf(arg0)))

    @override
    @overload
    def removeAction(self, arg0: 'Action'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.removeAction(com.badlogic.gdx.scenes.scene2d.Action)"""
        super(__scene2d.Actor, self).removeAction(arg0)

    @overload
    def getReverse(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup.getReverse()"""
        return bool.__wrap(super(VerticalGroup, self).getReverse())

    @override
    @overload
    def getX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getX()"""
        return float.__wrap(super(scene2d.Actor, self).getX())

    @overload
    def center(self) -> 'VerticalGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup.center()"""
        return 'VerticalGroup'.__wrap(super(VerticalGroup, self).center())

    @override
    @overload
    def toBack(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.toBack()"""
        super(scene2d.Actor, self).toBack()

    @overload
    def wrap(self) -> 'VerticalGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup.wrap()"""
        return 'VerticalGroup'.__wrap(super(VerticalGroup, self).wrap())

    @override
    @overload
    def getMaxWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.getMaxWidth()"""
        return float.__wrap(super(WidgetGroup, self).getMaxWidth())

    @override
    @overload
    def setDebug(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setDebug(boolean)"""
        super(__scene2d.Actor, self).setDebug(__boolean.valueOf(arg0))

    @overload
    def columnBottom(self) -> 'VerticalGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup.columnBottom()"""
        return 'VerticalGroup'.__wrap(super(VerticalGroup, self).columnBottom())

    @override
    @overload
    def setX(self, arg0: float, arg1: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setX(float,int)"""
        super(__scene2d.Actor, self).setX(__float.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def screenToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.screenToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).screenToLocalCoordinates(arg0))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def columnCenter(self) -> 'VerticalGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup.columnCenter()"""
        return 'VerticalGroup'.__wrap(super(VerticalGroup, self).columnCenter())

    @override
    @overload
    def ancestorsVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.ancestorsVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).ancestorsVisible())

    @override
    @overload
    def getListeners(self) -> 'utils.DelayedRemovalArray':
        """public com.badlogic.gdx.utils.DelayedRemovalArray<com.badlogic.gdx.scenes.scene2d.EventListener> com.badlogic.gdx.scenes.scene2d.Actor.getListeners()"""
        return 'utils.DelayedRemovalArray'.__wrap(super(scene2d.Actor, self).getListeners())

    @overload
    def wrapSpace(self, arg0: float) -> 'VerticalGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup.wrapSpace(float)"""
        return 'VerticalGroup'.__wrap(super(__VerticalGroup, self).wrapSpace(__float.valueOf(arg0)))

    @overload
    def getFill(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup.getFill()"""
        return float.__wrap(super(VerticalGroup, self).getFill())

    @override
    @overload
    def debugAll(self) -> 'scene2d.Group':
        """public com.badlogic.gdx.scenes.scene2d.Group com.badlogic.gdx.scenes.scene2d.Group.debugAll()"""
        return 'scene2d.Group'.__wrap(super(scene2d.Group, self).debugAll())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def removeListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.removeListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).removeListener(arg0))

    @override
    @overload
    def isTouchFocusListener(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchFocusListener()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchFocusListener())

    @overload
    def localToStageCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToStageCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToStageCoordinates(arg0))

    @override
    @overload
    def setSize(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setSize(float,float)"""
        super(__scene2d.Actor, self).setSize(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def getZIndex(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.Actor.getZIndex()"""
        return int.__wrap(super(scene2d.Actor, self).getZIndex())

    @override
    @overload
    def clipBegin(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.clipBegin()"""
        return bool.__wrap(super(scene2d.Actor, self).clipBegin())

    @overload
    def __init__(self, ):
        """public com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup()"""
        val = __VerticalGroup()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def moveBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.moveBy(float,float)"""
        super(__scene2d.Actor, self).moveBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def getY(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getY(int)"""
        return float.__wrap(super(__scene2d.Actor, self).getY(__int.valueOf(arg0)))

    @override
    @overload
    def setOrigin(self, arg0: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOrigin(int)"""
        super(__scene2d.Actor, self).setOrigin(__int.valueOf(arg0))

    @override
    @overload
    def validate(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.validate()"""
        super(WidgetGroup, self).validate()

    @overload
    def isDescendantOf(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isDescendantOf(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Actor, self).isDescendantOf(arg0))

    @overload
    def left(self) -> 'VerticalGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup.left()"""
        return 'VerticalGroup'.__wrap(super(VerticalGroup, self).left())

    @overload
    def padTop(self, arg0: float) -> 'VerticalGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup.padTop(float)"""
        return 'VerticalGroup'.__wrap(super(__VerticalGroup, self).padTop(__float.valueOf(arg0)))

    @override
    @overload
    def addActorBefore(self, arg0: 'Actor', arg1: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.addActorBefore(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__scene2d.Group, self).addActorBefore(arg0, arg1)

    @override
    @overload
    def getParent(self) -> 'scene2d.Group':
        """public com.badlogic.gdx.scenes.scene2d.Group com.badlogic.gdx.scenes.scene2d.Actor.getParent()"""
        return 'scene2d.Group'.__wrap(super(scene2d.Actor, self).getParent())

    @override
    @overload
    def clearListeners(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clearListeners()"""
        super(scene2d.Actor, self).clearListeners()

    @overload
    def localToActorCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToActorCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToActorCoordinates(arg0, arg1))

    @override
    @overload
    def setName(self, arg0: str):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setName(java.lang.String)"""
        super(__scene2d.Actor, self).setName(arg0)

    @overload
    def right(self) -> 'VerticalGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup.right()"""
        return 'VerticalGroup'.__wrap(super(VerticalGroup, self).right())

    @override
    @overload
    def layout(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup.layout()"""
        super(VerticalGroup, self).layout()

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @overload
    def pad(self, arg0: float) -> 'VerticalGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup.pad(float)"""
        return 'VerticalGroup'.__wrap(super(__VerticalGroup, self).pad(__float.valueOf(arg0)))

    @override
    @overload
    def setOriginX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOriginX(float)"""
        super(__scene2d.Actor, self).setOriginX(__float.valueOf(arg0))

    @override
    @overload
    def getHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getHeight()"""
        return float.__wrap(super(scene2d.Actor, self).getHeight())

    @overload
    def swapActor(self, arg0: 'Actor', arg1: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.swapActor(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Group, self).swapActor(arg0, arg1))

    @overload
    def expand(self, arg0: bool) -> 'VerticalGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup.expand(boolean)"""
        return 'VerticalGroup'.__wrap(super(__VerticalGroup, self).expand(__boolean.valueOf(arg0)))

    @overload
    def columnTop(self) -> 'VerticalGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup.columnTop()"""
        return 'VerticalGroup'.__wrap(super(VerticalGroup, self).columnTop())

    @override
    @overload
    def hasKeyboardFocus(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasKeyboardFocus()"""
        return bool.__wrap(super(scene2d.Actor, self).hasKeyboardFocus())

    @overload
    def getExpand(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup.getExpand()"""
        return bool.__wrap(super(VerticalGroup, self).getExpand())

    @override
    @overload
    def getOriginY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getOriginY()"""
        return float.__wrap(super(scene2d.Actor, self).getOriginY())

    @override
    @overload
    def pack(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.pack()"""
        super(WidgetGroup, self).pack()

    @override
    @overload
    def clipEnd(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clipEnd()"""
        super(scene2d.Actor, self).clipEnd()

    @override
    @overload
    def getMinWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.getMinWidth()"""
        return float.__wrap(super(WidgetGroup, self).getMinWidth())

    @override
    @overload
    def getUserObject(self) -> object:
        """public java.lang.Object com.badlogic.gdx.scenes.scene2d.Actor.getUserObject()"""
        return object.__wrap(super(scene2d.Actor, self).getUserObject())

    @overload
    def __init__(self):
        """public com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup()"""
        val = __VerticalGroup()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def getPadTop(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup.getPadTop()"""
        return float.__wrap(super(VerticalGroup, self).getPadTop())

    @override
    @overload
    def getDebug(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.getDebug()"""
        return bool.__wrap(super(scene2d.Actor, self).getDebug())

    @override
    @overload
    def setHeight(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setHeight(float)"""
        super(__scene2d.Actor, self).setHeight(__float.valueOf(arg0))

    @overload
    def bottom(self) -> 'VerticalGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup.bottom()"""
        return 'VerticalGroup'.__wrap(super(VerticalGroup, self).bottom())

    @override
    @overload
    def setScale(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScale(float)"""
        super(__scene2d.Actor, self).setScale(__float.valueOf(arg0))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @overload
    def getSpace(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup.getSpace()"""
        return float.__wrap(super(VerticalGroup, self).getSpace())

    @overload
    def getWrap(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup.getWrap()"""
        return bool.__wrap(super(VerticalGroup, self).getWrap())

    @override
    @overload
    def rotateBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.rotateBy(float)"""
        super(__scene2d.Actor, self).rotateBy(__float.valueOf(arg0))

    @override
    @overload
    def setDebug(self, arg0: bool, arg1: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Group.setDebug(boolean,boolean)"""
        super(__scene2d.Group, self).setDebug(__boolean.valueOf(arg0), __boolean.valueOf(arg1))

    @override
    @overload
    def drawDebug(self, arg0: 'ShapeRenderer'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.drawDebug(com.badlogic.gdx.graphics.glutils.ShapeRenderer)"""
        super(__scene2d.Group, self).drawDebug(arg0)

    @overload
    def reverse(self, arg0: bool) -> 'VerticalGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup.reverse(boolean)"""
        return 'VerticalGroup'.__wrap(super(__VerticalGroup, self).reverse(__boolean.valueOf(arg0)))

    @overload
    def padLeft(self, arg0: float) -> 'VerticalGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup.padLeft(float)"""
        return 'VerticalGroup'.__wrap(super(__VerticalGroup, self).padLeft(__float.valueOf(arg0)))

    @override
    @overload
    def setScale(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScale(float,float)"""
        super(__scene2d.Actor, self).setScale(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def setTransform(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Group.setTransform(boolean)"""
        super(__scene2d.Group, self).setTransform(__boolean.valueOf(arg0))

    @overload
    def addListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.addListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).addListener(arg0))

    @overload
    def parentToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.parentToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).parentToLocalCoordinates(arg0))

    @overload
    def getAlign(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup.getAlign()"""
        return int.__wrap(super(VerticalGroup, self).getAlign())

    @overload
    def expand(self) -> 'VerticalGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup.expand()"""
        return 'VerticalGroup'.__wrap(super(VerticalGroup, self).expand())

    @override
    @overload
    def getMinHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.getMinHeight()"""
        return float.__wrap(super(WidgetGroup, self).getMinHeight())

    @overload
    def columnLeft(self) -> 'VerticalGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup.columnLeft()"""
        return 'VerticalGroup'.__wrap(super(VerticalGroup, self).columnLeft())

    @override
    @overload
    def getRotation(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getRotation()"""
        return float.__wrap(super(scene2d.Actor, self).getRotation())

    @override
    @overload
    def setVisible(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setVisible(boolean)"""
        super(__scene2d.Actor, self).setVisible(__boolean.valueOf(arg0))

    @override
    @overload
    def setY(self, arg0: float, arg1: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setY(float,int)"""
        super(__scene2d.Actor, self).setY(__float.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def setFillParent(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.setFillParent(boolean)"""
        super(__WidgetGroup, self).setFillParent(__boolean.valueOf(arg0))

    @override
    @overload
    def getMaxHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.getMaxHeight()"""
        return float.__wrap(super(WidgetGroup, self).getMaxHeight())

    @overload
    def getPadBottom(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup.getPadBottom()"""
        return float.__wrap(super(VerticalGroup, self).getPadBottom())

    @override
    @overload
    def needsLayout(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.needsLayout()"""
        return bool.__wrap(super(WidgetGroup, self).needsLayout())

    @override
    @overload
    def setX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setX(float)"""
        super(__scene2d.Actor, self).setX(__float.valueOf(arg0))

    @override
    @overload
    def setOrigin(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOrigin(float,float)"""
        super(__scene2d.Actor, self).setOrigin(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def addActor(self, arg0: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.addActor(com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__scene2d.Group, self).addActor(arg0)

    @override
    @overload
    def getCullingArea(self) -> 'math.Rectangle':
        """public com.badlogic.gdx.math.Rectangle com.badlogic.gdx.scenes.scene2d.Group.getCullingArea()"""
        return 'math.Rectangle'.__wrap(super(scene2d.Group, self).getCullingArea())

    @overload
    def getWrapSpace(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup.getWrapSpace()"""
        return float.__wrap(super(VerticalGroup, self).getWrapSpace())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def getRight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getRight()"""
        return float.__wrap(super(scene2d.Actor, self).getRight())

    @overload
    def isAscendantOf(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isAscendantOf(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Actor, self).isAscendantOf(arg0))

    @override
    @overload
    def setWidth(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setWidth(float)"""
        super(__scene2d.Actor, self).setWidth(__float.valueOf(arg0))

    @override
    @overload
    def isTouchFocusTarget(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchFocusTarget()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchFocusTarget())

    @override
    @overload
    def hasParent(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasParent()"""
        return bool.__wrap(super(scene2d.Actor, self).hasParent())

    @overload
    def columnAlign(self, arg0: int) -> 'VerticalGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup.columnAlign(int)"""
        return 'VerticalGroup'.__wrap(super(__VerticalGroup, self).columnAlign(__int.valueOf(arg0)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.Group.toString()"""
        return str.__wrap(super(scene2d.Group, self).toString())

    @override
    @overload
    def getPrefWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup.getPrefWidth()"""
        return float.__wrap(super(VerticalGroup, self).getPrefWidth())

    @override
    @overload
    def setPosition(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setPosition(float,float)"""
        super(__scene2d.Actor, self).setPosition(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def getChildren(self) -> 'utils.SnapshotArray':
        """public com.badlogic.gdx.utils.SnapshotArray<com.badlogic.gdx.scenes.scene2d.Actor> com.badlogic.gdx.scenes.scene2d.Group.getChildren()"""
        return 'utils.SnapshotArray'.__wrap(super(scene2d.Group, self).getChildren())

    @overload
    def align(self, arg0: int) -> 'VerticalGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup.align(int)"""
        return 'VerticalGroup'.__wrap(super(__VerticalGroup, self).align(__int.valueOf(arg0)))

    @override
    @overload
    def addActorAt(self, arg0: int, arg1: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.addActorAt(int,com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__scene2d.Group, self).addActorAt(__int.valueOf(arg0), arg1)

    @override
    @overload
    def getScaleY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getScaleY()"""
        return float.__wrap(super(scene2d.Actor, self).getScaleY())

    @overload
    def getPadRight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup.getPadRight()"""
        return float.__wrap(super(VerticalGroup, self).getPadRight())

    @override
    @overload
    def getWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getWidth()"""
        return float.__wrap(super(scene2d.Actor, self).getWidth())

    @overload
    def removeActorAt(self, arg0: int, arg1: bool) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.Group.removeActorAt(int,boolean)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Group, self).removeActorAt(__int.valueOf(arg0), __boolean.valueOf(arg1)))

    @override
    @overload
    def setOriginY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOriginY(float)"""
        super(__scene2d.Actor, self).setOriginY(__float.valueOf(arg0))

    @override
    @overload
    def setPosition(self, arg0: float, arg1: float, arg2: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setPosition(float,float,int)"""
        super(__scene2d.Actor, self).setPosition(__float.valueOf(arg0), __float.valueOf(arg1), __int.valueOf(arg2))

    @override
    @overload
    def setLayoutEnabled(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.setLayoutEnabled(boolean)"""
        super(__WidgetGroup, self).setLayoutEnabled(__boolean.valueOf(arg0))

    @overload
    def removeCaptureListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.removeCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).removeCaptureListener(arg0))

    @override
    @overload
    def invalidateHierarchy(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.invalidateHierarchy()"""
        super(WidgetGroup, self).invalidateHierarchy()

    @override
    @overload
    def setColor(self, arg0: 'Color'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setColor(com.badlogic.gdx.graphics.Color)"""
        super(__scene2d.Actor, self).setColor(arg0)

    @overload
    def localToScreenCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToScreenCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToScreenCoordinates(arg0))

    @override
    @overload
    def clear(self):
        """public void com.badlogic.gdx.scenes.scene2d.Group.clear()"""
        super(scene2d.Group, self).clear()

    @overload
    def removeActor(self, arg0: 'Actor', arg1: bool) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.removeActor(com.badlogic.gdx.scenes.scene2d.Actor,boolean)"""
        return bool.__wrap(super(__scene2d.Group, self).removeActor(arg0, __boolean.valueOf(arg1)))

    @override
    @overload
    def setTouchable(self, arg0: 'Touchable'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setTouchable(com.badlogic.gdx.scenes.scene2d.Touchable)"""
        super(__scene2d.Actor, self).setTouchable(arg0)

    @overload
    def padRight(self, arg0: float) -> 'VerticalGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup.padRight(float)"""
        return 'VerticalGroup'.__wrap(super(__VerticalGroup, self).padRight(__float.valueOf(arg0)))

    @overload
    def addCaptureListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.addCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).addCaptureListener(arg0))

    @overload
    def fire(self, arg0: 'Event') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.fire(com.badlogic.gdx.scenes.scene2d.Event)"""
        return bool.__wrap(super(__scene2d.Actor, self).fire(arg0))

    @override
    @overload
    def remove(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.remove()"""
        return bool.__wrap(super(scene2d.Actor, self).remove())

    @overload
    def hit(self, arg0: float, arg1: float, arg2: bool) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.hit(float,float,boolean)"""
        return 'scene2d.Actor'.__wrap(super(__WidgetGroup, self).hit(__float.valueOf(arg0), __float.valueOf(arg1), __boolean.valueOf(arg2)))

    @override
    @overload
    def clearChildren(self):
        """public void com.badlogic.gdx.scenes.scene2d.Group.clearChildren()"""
        super(scene2d.Group, self).clearChildren()

    @overload
    def localToParentCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToParentCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToParentCoordinates(arg0))

    @override
    @overload
    def setCullingArea(self, arg0: 'Rectangle'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.setCullingArea(com.badlogic.gdx.math.Rectangle)"""
        super(__scene2d.Group, self).setCullingArea(arg0)

    @overload
    def top(self) -> 'VerticalGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup.top()"""
        return 'VerticalGroup'.__wrap(super(VerticalGroup, self).top())

    @override
    @overload
    def getName(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.Actor.getName()"""
        return str.__wrap(super(scene2d.Actor, self).getName())

    @override
    @overload
    def isVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).isVisible())

    @overload
    def setRound(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup.setRound(boolean)"""
        super(__VerticalGroup, self).setRound(__boolean.valueOf(arg0))

    @override
    @overload
    def getCaptureListeners(self) -> 'utils.DelayedRemovalArray':
        """public com.badlogic.gdx.utils.DelayedRemovalArray<com.badlogic.gdx.scenes.scene2d.EventListener> com.badlogic.gdx.scenes.scene2d.Actor.getCaptureListeners()"""
        return 'utils.DelayedRemovalArray'.__wrap(super(scene2d.Actor, self).getCaptureListeners())

    @overload
    def padBottom(self, arg0: float) -> 'VerticalGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup.padBottom(float)"""
        return 'VerticalGroup'.__wrap(super(__VerticalGroup, self).padBottom(__float.valueOf(arg0)))

    @overload
    def fill(self) -> 'VerticalGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup.fill()"""
        return 'VerticalGroup'.__wrap(super(VerticalGroup, self).fill())

    @override
    @overload
    def debug(self) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.Actor.debug()"""
        return 'scene2d.Actor'.__wrap(super(scene2d.Actor, self).debug())

    @override
    @overload
    def clear(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Group.clear(boolean)"""
        super(__scene2d.Group, self).clear(__boolean.valueOf(arg0))

    @override
    @overload
    def getTop(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getTop()"""
        return float.__wrap(super(scene2d.Actor, self).getTop())

    @override
    @overload
    def setY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setY(float)"""
        super(__scene2d.Actor, self).setY(__float.valueOf(arg0))

    @overload
    def getPadLeft(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup.getPadLeft()"""
        return float.__wrap(super(VerticalGroup, self).getPadLeft())

    @override
    @overload
    def clearActions(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clearActions()"""
        super(scene2d.Actor, self).clearActions()

    @override
    @overload
    def addActorAfter(self, arg0: 'Actor', arg1: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.addActorAfter(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__scene2d.Group, self).addActorAfter(arg0, arg1)

    @override
    @overload
    def scaleBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.scaleBy(float,float)"""
        super(__scene2d.Actor, self).scaleBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def setRotation(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setRotation(float)"""
        super(__scene2d.Actor, self).setRotation(__float.valueOf(arg0))

    @override
    @overload
    def getScaleX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getScaleX()"""
        return float.__wrap(super(scene2d.Actor, self).getScaleX())

    @overload
    def firstAscendant(self, arg0: 'Class') -> 'scene2d.Actor':
        """public <T extends com.badlogic.gdx.scenes.scene2d.Actor> T com.badlogic.gdx.scenes.scene2d.Actor.firstAscendant(java.lang.Class<T>)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Actor, self).firstAscendant(arg0))

    @overload
    def notify(self, arg0: 'Event', arg1: bool) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.notify(com.badlogic.gdx.scenes.scene2d.Event,boolean)"""
        return bool.__wrap(super(__scene2d.Actor, self).notify(arg0, __boolean.valueOf(arg1)))

    @override
    @overload
    def act(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Group.act(float)"""
        super(__scene2d.Group, self).act(__float.valueOf(arg0))

    @override
    @overload
    def setUserObject(self, arg0: object):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setUserObject(java.lang.Object)"""
        super(__scene2d.Actor, self).setUserObject(arg0)

    @override
    @overload
    def setScaleY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScaleY(float)"""
        super(__scene2d.Actor, self).setScaleY(__float.valueOf(arg0))

    @override
    @overload
    def hasScrollFocus(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasScrollFocus()"""
        return bool.__wrap(super(scene2d.Actor, self).hasScrollFocus())

    @override
    @overload
    def toFront(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.toFront()"""
        super(scene2d.Actor, self).toFront()

    @override
    @overload
    def scaleBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.scaleBy(float)"""
        super(__scene2d.Actor, self).scaleBy(__float.valueOf(arg0))

    @overload
    def stageToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.stageToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).stageToLocalCoordinates(arg0))

    @overload
    def swapActor(self, arg0: int, arg1: int) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.swapActor(int,int)"""
        return bool.__wrap(super(__scene2d.Group, self).swapActor(__int.valueOf(arg0), __int.valueOf(arg1)))

    @override
    @overload
    def getOriginX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getOriginX()"""
        return float.__wrap(super(scene2d.Actor, self).getOriginX())

    @overload
    def wrap(self, arg0: bool) -> 'VerticalGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup.wrap(boolean)"""
        return 'VerticalGroup'.__wrap(super(__VerticalGroup, self).wrap(__boolean.valueOf(arg0)))

    @override
    @overload
    def draw(self, arg0: 'Batch', arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.draw(com.badlogic.gdx.graphics.g2d.Batch,float)"""
        super(__WidgetGroup, self).draw(arg0, __float.valueOf(arg1))

    @overload
    def getChild(self, arg0: int) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.Group.getChild(int)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Group, self).getChild(__int.valueOf(arg0)))

    @override
    @overload
    def hasChildren(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.hasChildren()"""
        return bool.__wrap(super(scene2d.Group, self).hasChildren())

    @override
    @overload
    def ascendantsVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.ascendantsVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).ascendantsVisible())

    @overload
    def removeActor(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.removeActor(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Group, self).removeActor(arg0))

    @override
    @overload
    def clearChildren(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Group.clearChildren(boolean)"""
        super(__scene2d.Group, self).clearChildren(__boolean.valueOf(arg0))

    @override
    @overload
    def invalidate(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup.invalidate()"""
        super(VerticalGroup, self).invalidate()

    @overload
    def pad(self, arg0: float, arg1: float, arg2: float, arg3: float) -> 'VerticalGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup.pad(float,float,float,float)"""
        return 'VerticalGroup'.__wrap(super(__VerticalGroup, self).pad(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3)))

    @override
    @overload
    def getColor(self) -> 'graphics.Color':
        """public com.badlogic.gdx.graphics.Color com.badlogic.gdx.scenes.scene2d.Actor.getColor()"""
        return 'graphics.Color'.__wrap(super(scene2d.Actor, self).getColor())

    @override
    @overload
    def isTransform(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.isTransform()"""
        return bool.__wrap(super(scene2d.Group, self).isTransform())

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @override
    @overload
    def getStage(self) -> 'scene2d.Stage':
        """public com.badlogic.gdx.scenes.scene2d.Stage com.badlogic.gdx.scenes.scene2d.Actor.getStage()"""
        return 'scene2d.Stage'.__wrap(super(scene2d.Actor, self).getStage())

    @overload
    def columnRight(self) -> 'VerticalGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup.columnRight()"""
        return 'VerticalGroup'.__wrap(super(VerticalGroup, self).columnRight())

    @overload
    def grow(self) -> 'VerticalGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup.grow()"""
        return 'VerticalGroup'.__wrap(super(VerticalGroup, self).grow())

    @override
    @overload
    def addAction(self, arg0: 'Action'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.addAction(com.badlogic.gdx.scenes.scene2d.Action)"""
        super(__scene2d.Actor, self).addAction(arg0)

    @override
    @overload
    def setColor(self, arg0: float, arg1: float, arg2: float, arg3: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setColor(float,float,float,float)"""
        super(__scene2d.Actor, self).setColor(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3))

    @overload
    def getColumns(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup.getColumns()"""
        return int.__wrap(super(VerticalGroup, self).getColumns())

    @override
    @overload
    def isTouchable(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchable()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchable())

    @overload
    def localToAscendantCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToAscendantCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToAscendantCoordinates(arg0, arg1))

    @overload
    def clipBegin(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.clipBegin(float,float,float,float)"""
        return bool.__wrap(super(__scene2d.Actor, self).clipBegin(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3)))

    @override
    @overload
    def getPrefHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup.getPrefHeight()"""
        return float.__wrap(super(VerticalGroup, self).getPrefHeight())

    @override
    @overload
    def getActions(self) -> 'utils.Array':
        """public com.badlogic.gdx.utils.Array<com.badlogic.gdx.scenes.scene2d.Action> com.badlogic.gdx.scenes.scene2d.Actor.getActions()"""
        return 'utils.Array'.__wrap(super(scene2d.Actor, self).getActions())

    @overload
    def fill(self, arg0: float) -> 'VerticalGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup.fill(float)"""
        return 'VerticalGroup'.__wrap(super(__VerticalGroup, self).fill(__float.valueOf(arg0))) 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.ScrollPane
from pyquantum_helper import import_once as __import_once__
import com.badlogic.gdx.scenes.scene2d.Touchable as __Touchable
__Touchable = __Touchable
try:
    from pygdx.scenes import scene2d
except ImportError:
    scene2d = __import_once__("pygdx.scenes.scene2d")

import com.badlogic.gdx.graphics.Color as __Color
__Color = __Color
import java.lang.Boolean as __boolean
try:
    from pygdx.graphics import g2d
except ImportError:
    g2d = __import_once__("pygdx.graphics.g2d")

from builtins import type
import com.badlogic.gdx.scenes.scene2d.Group as __Group
__Group = __Group
import com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup as __WidgetGroup
__WidgetGroup = __WidgetGroup
import com.badlogic.gdx.math.Vector2 as __Vector2
__Vector2 = __Vector2
import com.badlogic.gdx.scenes.scene2d.ui.ScrollPane as __ScrollPane
__ScrollPane = __ScrollPane
import com.badlogic.gdx.math.Rectangle as __Rectangle
__Rectangle = __Rectangle
import java.lang.Class as __Class
__Class = __Class
import com.badlogic.gdx.utils.Array as __Array
__Array = __Array
import java.lang.String as __string
try:
    from pygdx import math
except ImportError:
    math = __import_once__("pygdx.math")

from builtins import bool
from builtins import str
try:
    from pygdx import utils
except ImportError:
    utils = __import_once__("pygdx.utils")

from pyquantum_helper import override
import java.lang.Object as __object
from builtins import float
import com.badlogic.gdx.scenes.scene2d.ui.ScrollPane as __ScrollPane_ScrollPaneStyle
__ScrollPaneStyle = __ScrollPane_ScrollPaneStyle.ScrollPaneStyle
from builtins import object
import com.badlogic.gdx.utils.DelayedRemovalArray as __DelayedRemovalArray
__DelayedRemovalArray = __DelayedRemovalArray
import java.lang.Long as __long
import java.lang.Float as __float
import java.lang.String as __String
__String = __String
try:
    from pygdx.graphics import glutils
except ImportError:
    glutils = __import_once__("pygdx.graphics.glutils")

import java.lang.Object as __Object
__Object = __Object
import com.badlogic.gdx.utils.SnapshotArray as __SnapshotArray
__SnapshotArray = __SnapshotArray
import com.badlogic.gdx.scenes.scene2d.Actor as __Actor
__Actor = __Actor
import java.lang.Integer as __int
import com.badlogic.gdx.scenes.scene2d.Stage as __Stage
__Stage = __Stage
try:
    from pygdx import graphics
except ImportError:
    graphics = __import_once__("pygdx.graphics")

from builtins import int
 
class ScrollPane(__WidgetGroup, WidgetGroup):
    """com.badlogic.gdx.scenes.scene2d.ui.ScrollPane"""
 
    @staticmethod
    def __wrap(java_value: __ScrollPane) -> 'ScrollPane':
        return ScrollPane(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __ScrollPane):
        """
        Dynamic initializer for ScrollPane.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def getY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getY()"""
        return float.__wrap(super(scene2d.Actor, self).getY())

    @override
    @overload
    def setBounds(self, arg0: float, arg1: float, arg2: float, arg3: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setBounds(float,float,float,float)"""
        super(__scene2d.Actor, self).setBounds(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def isScrollingDisabledY(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.isScrollingDisabledY()"""
        return bool.__wrap(super(ScrollPane, self).isScrollingDisabledY())

    @overload
    def getVelocityY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.getVelocityY()"""
        return float.__wrap(super(ScrollPane, self).getVelocityY())

    @overload
    def setFlickScrollTapSquareSize(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.setFlickScrollTapSquareSize(float)"""
        super(__ScrollPane, self).setFlickScrollTapSquareSize(__float.valueOf(arg0))

    @overload
    def findActor(self, arg0: str) -> 'scene2d.Actor':
        """public <T extends com.badlogic.gdx.scenes.scene2d.Actor> T com.badlogic.gdx.scenes.scene2d.Group.findActor(java.lang.String)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Group, self).findActor(arg0))

    @overload
    def isScrollX(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.isScrollX()"""
        return bool.__wrap(super(ScrollPane, self).isScrollX())

    @overload
    def fling(self, arg0: float, arg1: float, arg2: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.fling(float,float,float)"""
        super(__ScrollPane, self).fling(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2))

    @override
    @overload
    def getTouchable(self) -> 'scene2d.Touchable':
        """public com.badlogic.gdx.scenes.scene2d.Touchable com.badlogic.gdx.scenes.scene2d.Actor.getTouchable()"""
        return 'scene2d.Touchable'.__wrap(super(scene2d.Actor, self).getTouchable())

    @override
    @overload
    def removeAction(self, arg0: 'Action'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.removeAction(com.badlogic.gdx.scenes.scene2d.Action)"""
        super(__scene2d.Actor, self).removeAction(arg0)

    @overload
    def cancel(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.cancel()"""
        super(ScrollPane, self).cancel()

    @overload
    def setScrollingDisabled(self, arg0: bool, arg1: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.setScrollingDisabled(boolean,boolean)"""
        super(__ScrollPane, self).setScrollingDisabled(__boolean.valueOf(arg0), __boolean.valueOf(arg1))

    @override
    @overload
    def draw(self, arg0: 'Batch', arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.draw(com.badlogic.gdx.graphics.g2d.Batch,float)"""
        super(__ScrollPane, self).draw(arg0, __float.valueOf(arg1))

    @overload
    def setFlingTime(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.setFlingTime(float)"""
        super(__ScrollPane, self).setFlingTime(__float.valueOf(arg0))

    @overload
    def getFadeScrollBars(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.getFadeScrollBars()"""
        return bool.__wrap(super(ScrollPane, self).getFadeScrollBars())

    @override
    @overload
    def getMaxWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.getMaxWidth()"""
        return float.__wrap(super(WidgetGroup, self).getMaxWidth())

    @override
    @overload
    def setDebug(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setDebug(boolean)"""
        super(__scene2d.Actor, self).setDebug(__boolean.valueOf(arg0))

    @overload
    def hit(self, arg0: float, arg1: float, arg2: bool) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.hit(float,float,boolean)"""
        return 'scene2d.Actor'.__wrap(super(__ScrollPane, self).hit(__float.valueOf(arg0), __float.valueOf(arg1), __boolean.valueOf(arg2)))

    @overload
    def setScrollX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.setScrollX(float)"""
        super(__ScrollPane, self).setScrollX(__float.valueOf(arg0))

    @override
    @overload
    def setX(self, arg0: float, arg1: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setX(float,int)"""
        super(__scene2d.Actor, self).setX(__float.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def getListeners(self) -> 'utils.DelayedRemovalArray':
        """public com.badlogic.gdx.utils.DelayedRemovalArray<com.badlogic.gdx.scenes.scene2d.EventListener> com.badlogic.gdx.scenes.scene2d.Actor.getListeners()"""
        return 'utils.DelayedRemovalArray'.__wrap(super(scene2d.Actor, self).getListeners())

    @overload
    def removeListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.removeListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).removeListener(arg0))

    @override
    @overload
    def isTouchFocusListener(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchFocusListener()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchFocusListener())

    @overload
    def localToStageCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToStageCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToStageCoordinates(arg0))

    @override
    @overload
    def getPrefWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.getPrefWidth()"""
        return float.__wrap(super(ScrollPane, self).getPrefWidth())

    @override
    @overload
    def getMinHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.getMinHeight()"""
        return float.__wrap(super(ScrollPane, self).getMinHeight())

    @override
    @overload
    def clipBegin(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.clipBegin()"""
        return bool.__wrap(super(scene2d.Actor, self).clipBegin())

    @override
    @overload
    def moveBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.moveBy(float,float)"""
        super(__scene2d.Actor, self).moveBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def setName(self, arg0: str):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setName(java.lang.String)"""
        super(__scene2d.Actor, self).setName(arg0)

    @overload
    def getScrollBarHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.getScrollBarHeight()"""
        return float.__wrap(super(ScrollPane, self).getScrollBarHeight())

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @overload
    def swapActor(self, arg0: 'Actor', arg1: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.swapActor(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Group, self).swapActor(arg0, arg1))

    @override
    @overload
    def drawDebug(self, arg0: 'ShapeRenderer'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.drawDebug(com.badlogic.gdx.graphics.glutils.ShapeRenderer)"""
        super(__ScrollPane, self).drawDebug(arg0)

    @override
    @overload
    def getPrefHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.getPrefHeight()"""
        return float.__wrap(super(ScrollPane, self).getPrefHeight())

    @overload
    def getVisualScrollPercentY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.getVisualScrollPercentY()"""
        return float.__wrap(super(ScrollPane, self).getVisualScrollPercentY())

    @override
    @overload
    def getDebug(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.getDebug()"""
        return bool.__wrap(super(scene2d.Actor, self).getDebug())

    @override
    @overload
    def setHeight(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setHeight(float)"""
        super(__scene2d.Actor, self).setHeight(__float.valueOf(arg0))

    @override
    @overload
    def setScale(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScale(float)"""
        super(__scene2d.Actor, self).setScale(__float.valueOf(arg0))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @overload
    def isPanning(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.isPanning()"""
        return bool.__wrap(super(ScrollPane, self).isPanning())

    @overload
    def getVisualScrollPercentX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.getVisualScrollPercentX()"""
        return float.__wrap(super(ScrollPane, self).getVisualScrollPercentX())

    @override
    @overload
    def setDebug(self, arg0: bool, arg1: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Group.setDebug(boolean,boolean)"""
        super(__scene2d.Group, self).setDebug(__boolean.valueOf(arg0), __boolean.valueOf(arg1))

    @overload
    def updateVisualScroll(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.updateVisualScroll()"""
        super(ScrollPane, self).updateVisualScroll()

    @override
    @overload
    def setTransform(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Group.setTransform(boolean)"""
        super(__scene2d.Group, self).setTransform(__boolean.valueOf(arg0))

    @overload
    def parentToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.parentToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).parentToLocalCoordinates(arg0))

    @overload
    def isTopEdge(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.isTopEdge()"""
        return bool.__wrap(super(ScrollPane, self).isTopEdge())

    @override
    @overload
    def getRotation(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getRotation()"""
        return float.__wrap(super(scene2d.Actor, self).getRotation())

    @overload
    def setClamp(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.setClamp(boolean)"""
        super(__ScrollPane, self).setClamp(__boolean.valueOf(arg0))

    @override
    @overload
    def getMaxHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.getMaxHeight()"""
        return float.__wrap(super(WidgetGroup, self).getMaxHeight())

    @overload
    def getScrollBarWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.getScrollBarWidth()"""
        return float.__wrap(super(ScrollPane, self).getScrollBarWidth())

    @overload
    def getScrollX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.getScrollX()"""
        return float.__wrap(super(ScrollPane, self).getScrollX())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def setWidth(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setWidth(float)"""
        super(__scene2d.Actor, self).setWidth(__float.valueOf(arg0))

    @override
    @overload
    def isTouchFocusTarget(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchFocusTarget()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchFocusTarget())

    @overload
    def removeActor(self, arg0: 'Actor', arg1: bool) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.removeActor(com.badlogic.gdx.scenes.scene2d.Actor,boolean)"""
        return bool.__wrap(super(__ScrollPane, self).removeActor(arg0, __boolean.valueOf(arg1)))

    @overload
    def __init__(self, arg0: 'Actor'):
        """public com.badlogic.gdx.scenes.scene2d.ui.ScrollPane(com.badlogic.gdx.scenes.scene2d.Actor)"""
        val = __ScrollPane(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def setPosition(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setPosition(float,float)"""
        super(__scene2d.Actor, self).setPosition(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def isForceScrollY(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.isForceScrollY()"""
        return bool.__wrap(super(ScrollPane, self).isForceScrollY())

    @override
    @overload
    def addActorAfter(self, arg0: 'Actor', arg1: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.addActorAfter(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__ScrollPane, self).addActorAfter(arg0, arg1)

    @override
    @overload
    def layout(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.layout()"""
        super(ScrollPane, self).layout()

    @override
    @overload
    def setOriginY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOriginY(float)"""
        super(__scene2d.Actor, self).setOriginY(__float.valueOf(arg0))

    @overload
    def getVariableSizeKnobs(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.getVariableSizeKnobs()"""
        return bool.__wrap(super(ScrollPane, self).getVariableSizeKnobs())

    @overload
    def localToScreenCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToScreenCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToScreenCoordinates(arg0))

    @override
    @overload
    def clear(self):
        """public void com.badlogic.gdx.scenes.scene2d.Group.clear()"""
        super(scene2d.Group, self).clear()

    @override
    @overload
    def setTouchable(self, arg0: 'Touchable'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setTouchable(com.badlogic.gdx.scenes.scene2d.Touchable)"""
        super(__scene2d.Actor, self).setTouchable(arg0)

    @override
    @overload
    def clearChildren(self):
        """public void com.badlogic.gdx.scenes.scene2d.Group.clearChildren()"""
        super(scene2d.Group, self).clearChildren()

    @overload
    def getScrollPercentX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.getScrollPercentX()"""
        return float.__wrap(super(ScrollPane, self).getScrollPercentX())

    @overload
    def localToParentCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToParentCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToParentCoordinates(arg0))

    @override
    @overload
    def setCullingArea(self, arg0: 'Rectangle'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.setCullingArea(com.badlogic.gdx.math.Rectangle)"""
        super(__scene2d.Group, self).setCullingArea(arg0)

    @override
    @overload
    def getName(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.Actor.getName()"""
        return str.__wrap(super(scene2d.Actor, self).getName())

    @overload
    def setActor(self, arg0: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.setActor(com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__ScrollPane, self).setActor(arg0)

    @override
    @overload
    def getCaptureListeners(self) -> 'utils.DelayedRemovalArray':
        """public com.badlogic.gdx.utils.DelayedRemovalArray<com.badlogic.gdx.scenes.scene2d.EventListener> com.badlogic.gdx.scenes.scene2d.Actor.getCaptureListeners()"""
        return 'utils.DelayedRemovalArray'.__wrap(super(scene2d.Actor, self).getCaptureListeners())

    @override
    @overload
    def clear(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Group.clear(boolean)"""
        super(__scene2d.Group, self).clear(__boolean.valueOf(arg0))

    @override
    @overload
    def setY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setY(float)"""
        super(__scene2d.Actor, self).setY(__float.valueOf(arg0))

    @override
    @overload
    def scaleBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.scaleBy(float,float)"""
        super(__scene2d.Actor, self).scaleBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def isFlinging(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.isFlinging()"""
        return bool.__wrap(super(ScrollPane, self).isFlinging())

    @overload
    def __init__(self, arg0: 'Actor', arg1: 'Skin'):
        """public com.badlogic.gdx.scenes.scene2d.ui.ScrollPane(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.ui.Skin)"""
        val = __ScrollPane(arg0, arg1)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def isScrollY(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.isScrollY()"""
        return bool.__wrap(super(ScrollPane, self).isScrollY())

    @overload
    def notify(self, arg0: 'Event', arg1: bool) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.notify(com.badlogic.gdx.scenes.scene2d.Event,boolean)"""
        return bool.__wrap(super(__scene2d.Actor, self).notify(arg0, __boolean.valueOf(arg1)))

    @override
    @overload
    def setUserObject(self, arg0: object):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setUserObject(java.lang.Object)"""
        super(__scene2d.Actor, self).setUserObject(arg0)

    @override
    @overload
    def hasScrollFocus(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasScrollFocus()"""
        return bool.__wrap(super(scene2d.Actor, self).hasScrollFocus())

    @override
    @overload
    def toFront(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.toFront()"""
        super(scene2d.Actor, self).toFront()

    @override
    @overload
    def scaleBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.scaleBy(float)"""
        super(__scene2d.Actor, self).scaleBy(__float.valueOf(arg0))

    @override
    @overload
    def getOriginX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getOriginX()"""
        return float.__wrap(super(scene2d.Actor, self).getOriginX())

    @overload
    def getChild(self, arg0: int) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.Group.getChild(int)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Group, self).getChild(__int.valueOf(arg0)))

    @override
    @overload
    def clearChildren(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Group.clearChildren(boolean)"""
        super(__scene2d.Group, self).clearChildren(__boolean.valueOf(arg0))

    @overload
    def getVisualScrollY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.getVisualScrollY()"""
        return float.__wrap(super(ScrollPane, self).getVisualScrollY())

    @override
    @overload
    def getStage(self) -> 'scene2d.Stage':
        """public com.badlogic.gdx.scenes.scene2d.Stage com.badlogic.gdx.scenes.scene2d.Actor.getStage()"""
        return 'scene2d.Stage'.__wrap(super(scene2d.Actor, self).getStage())

    @override
    @overload
    def addAction(self, arg0: 'Action'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.addAction(com.badlogic.gdx.scenes.scene2d.Action)"""
        super(__scene2d.Actor, self).addAction(arg0)

    @override
    @overload
    def setColor(self, arg0: float, arg1: float, arg2: float, arg3: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setColor(float,float,float,float)"""
        super(__scene2d.Actor, self).setColor(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3))

    @overload
    def localToAscendantCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToAscendantCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToAscendantCoordinates(arg0, arg1))

    @override
    @overload
    def getActions(self) -> 'utils.Array':
        """public com.badlogic.gdx.utils.Array<com.badlogic.gdx.scenes.scene2d.Action> com.badlogic.gdx.scenes.scene2d.Actor.getActions()"""
        return 'utils.Array'.__wrap(super(scene2d.Actor, self).getActions())

    @override
    @overload
    def getMinWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.getMinWidth()"""
        return float.__wrap(super(ScrollPane, self).getMinWidth())

    @overload
    def setOverscroll(self, arg0: bool, arg1: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.setOverscroll(boolean,boolean)"""
        super(__ScrollPane, self).setOverscroll(__boolean.valueOf(arg0), __boolean.valueOf(arg1))

    @overload
    def getVelocityX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.getVelocityX()"""
        return float.__wrap(super(ScrollPane, self).getVelocityX())

    @overload
    def localToDescendantCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Group.localToDescendantCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Group, self).localToDescendantCoordinates(arg0, arg1))

    @overload
    def setZIndex(self, arg0: int) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.setZIndex(int)"""
        return bool.__wrap(super(__scene2d.Actor, self).setZIndex(__int.valueOf(arg0)))

    @overload
    def getX(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getX(int)"""
        return float.__wrap(super(__scene2d.Actor, self).getX(__int.valueOf(arg0)))

    @override
    @overload
    def sizeBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.sizeBy(float)"""
        super(__scene2d.Actor, self).sizeBy(__float.valueOf(arg0))

    @overload
    def removeActorAt(self, arg0: int, arg1: bool) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.removeActorAt(int,boolean)"""
        return 'scene2d.Actor'.__wrap(super(__ScrollPane, self).removeActorAt(__int.valueOf(arg0), __boolean.valueOf(arg1)))

    @overload
    def setScrollbarsOnTop(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.setScrollbarsOnTop(boolean)"""
        super(__ScrollPane, self).setScrollbarsOnTop(__boolean.valueOf(arg0))

    @overload
    def isDragging(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.isDragging()"""
        return bool.__wrap(super(ScrollPane, self).isDragging())

    @overload
    def getMaxX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.getMaxX()"""
        return float.__wrap(super(ScrollPane, self).getMaxX())

    @overload
    def setCancelTouchFocus(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.setCancelTouchFocus(boolean)"""
        super(__ScrollPane, self).setCancelTouchFocus(__boolean.valueOf(arg0))

    @override
    @overload
    def invalidate(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.invalidate()"""
        super(WidgetGroup, self).invalidate()

    @override
    @overload
    def sizeBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.sizeBy(float,float)"""
        super(__scene2d.Actor, self).sizeBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def hasActions(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasActions()"""
        return bool.__wrap(super(scene2d.Actor, self).hasActions())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0))

    @override
    @overload
    def setScaleX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScaleX(float)"""
        super(__scene2d.Actor, self).setScaleX(__float.valueOf(arg0))

    @overload
    def setupOverscroll(self, arg0: float, arg1: float, arg2: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.setupOverscroll(float,float,float)"""
        super(__ScrollPane, self).setupOverscroll(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2))

    @overload
    def isScrollingDisabledX(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.isScrollingDisabledX()"""
        return bool.__wrap(super(ScrollPane, self).isScrollingDisabledX())

    @override
    @overload
    def getX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getX()"""
        return float.__wrap(super(scene2d.Actor, self).getX())

    @overload
    def getStyle(self) -> 'ScrollPaneStyle':
        """public com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$ScrollPaneStyle com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.getStyle()"""
        return 'ScrollPaneStyle'.__wrap(super(ScrollPane, self).getStyle())

    @overload
    def scrollTo(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: bool, arg5: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.scrollTo(float,float,float,float,boolean,boolean)"""
        super(__ScrollPane, self).scrollTo(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3), __boolean.valueOf(arg4), __boolean.valueOf(arg5))

    @overload
    def getScrollPercentY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.getScrollPercentY()"""
        return float.__wrap(super(ScrollPane, self).getScrollPercentY())

    @overload
    def setScrollbarsVisible(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.setScrollbarsVisible(boolean)"""
        super(__ScrollPane, self).setScrollbarsVisible(__boolean.valueOf(arg0))

    @overload
    def isLeftEdge(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.isLeftEdge()"""
        return bool.__wrap(super(ScrollPane, self).isLeftEdge())

    @overload
    def setForceScroll(self, arg0: bool, arg1: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.setForceScroll(boolean,boolean)"""
        super(__ScrollPane, self).setForceScroll(__boolean.valueOf(arg0), __boolean.valueOf(arg1))

    @overload
    def setFlickScroll(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.setFlickScroll(boolean)"""
        super(__ScrollPane, self).setFlickScroll(__boolean.valueOf(arg0))

    @override
    @overload
    def toBack(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.toBack()"""
        super(scene2d.Actor, self).toBack()

    @overload
    def isBottomEdge(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.isBottomEdge()"""
        return bool.__wrap(super(ScrollPane, self).isBottomEdge())

    @overload
    def screenToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.screenToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).screenToLocalCoordinates(arg0))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def ancestorsVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.ancestorsVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).ancestorsVisible())

    @overload
    def setScrollPercentY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.setScrollPercentY(float)"""
        super(__ScrollPane, self).setScrollPercentY(__float.valueOf(arg0))

    @override
    @overload
    def debugAll(self) -> 'scene2d.Group':
        """public com.badlogic.gdx.scenes.scene2d.Group com.badlogic.gdx.scenes.scene2d.Group.debugAll()"""
        return 'scene2d.Group'.__wrap(super(scene2d.Group, self).debugAll())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def setSize(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setSize(float,float)"""
        super(__scene2d.Actor, self).setSize(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def getZIndex(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.Actor.getZIndex()"""
        return int.__wrap(super(scene2d.Actor, self).getZIndex())

    @overload
    def getY(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getY(int)"""
        return float.__wrap(super(__scene2d.Actor, self).getY(__int.valueOf(arg0)))

    @override
    @overload
    def setOrigin(self, arg0: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOrigin(int)"""
        super(__scene2d.Actor, self).setOrigin(__int.valueOf(arg0))

    @overload
    def __init__(self, arg0: 'Actor', arg1: 'ScrollPaneStyle'):
        """public com.badlogic.gdx.scenes.scene2d.ui.ScrollPane(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$ScrollPaneStyle)"""
        val = __ScrollPane(arg0, arg1)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def getScrollY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.getScrollY()"""
        return float.__wrap(super(ScrollPane, self).getScrollY())

    @override
    @overload
    def validate(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.validate()"""
        super(WidgetGroup, self).validate()

    @overload
    def isDescendantOf(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isDescendantOf(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Actor, self).isDescendantOf(arg0))

    @override
    @overload
    def getParent(self) -> 'scene2d.Group':
        """public com.badlogic.gdx.scenes.scene2d.Group com.badlogic.gdx.scenes.scene2d.Actor.getParent()"""
        return 'scene2d.Group'.__wrap(super(scene2d.Actor, self).getParent())

    @override
    @overload
    def clearListeners(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clearListeners()"""
        super(scene2d.Actor, self).clearListeners()

    @overload
    def localToActorCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToActorCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToActorCoordinates(arg0, arg1))

    @overload
    def isRightEdge(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.isRightEdge()"""
        return bool.__wrap(super(ScrollPane, self).isRightEdge())

    @override
    @overload
    def setOriginX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOriginX(float)"""
        super(__scene2d.Actor, self).setOriginX(__float.valueOf(arg0))

    @override
    @overload
    def getHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getHeight()"""
        return float.__wrap(super(scene2d.Actor, self).getHeight())

    @override
    @overload
    def hasKeyboardFocus(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasKeyboardFocus()"""
        return bool.__wrap(super(scene2d.Actor, self).hasKeyboardFocus())

    @override
    @overload
    def getOriginY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getOriginY()"""
        return float.__wrap(super(scene2d.Actor, self).getOriginY())

    @overload
    def setupFadeScrollBars(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.setupFadeScrollBars(float,float)"""
        super(__ScrollPane, self).setupFadeScrollBars(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def pack(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.pack()"""
        super(WidgetGroup, self).pack()

    @override
    @overload
    def clipEnd(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clipEnd()"""
        super(scene2d.Actor, self).clipEnd()

    @override
    @overload
    def getUserObject(self) -> object:
        """public java.lang.Object com.badlogic.gdx.scenes.scene2d.Actor.getUserObject()"""
        return object.__wrap(super(scene2d.Actor, self).getUserObject())

    @overload
    def setVariableSizeKnobs(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.setVariableSizeKnobs(boolean)"""
        super(__ScrollPane, self).setVariableSizeKnobs(__boolean.valueOf(arg0))

    @override
    @overload
    def rotateBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.rotateBy(float)"""
        super(__scene2d.Actor, self).rotateBy(__float.valueOf(arg0))

    @overload
    def setScrollPercentX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.setScrollPercentX(float)"""
        super(__ScrollPane, self).setScrollPercentX(__float.valueOf(arg0))

    @override
    @overload
    def setScale(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScale(float,float)"""
        super(__scene2d.Actor, self).setScale(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def addActor(self, arg0: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.addActor(com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__ScrollPane, self).addActor(arg0)

    @overload
    def addListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.addListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).addListener(arg0))

    @overload
    def getOverscrollDistance(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.getOverscrollDistance()"""
        return float.__wrap(super(ScrollPane, self).getOverscrollDistance())

    @overload
    def setVelocityX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.setVelocityX(float)"""
        super(__ScrollPane, self).setVelocityX(__float.valueOf(arg0))

    @overload
    def setWidget(self, arg0: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.setWidget(com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__ScrollPane, self).setWidget(arg0)

    @override
    @overload
    def setVisible(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setVisible(boolean)"""
        super(__scene2d.Actor, self).setVisible(__boolean.valueOf(arg0))

    @override
    @overload
    def setY(self, arg0: float, arg1: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setY(float,int)"""
        super(__scene2d.Actor, self).setY(__float.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def setFillParent(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.setFillParent(boolean)"""
        super(__WidgetGroup, self).setFillParent(__boolean.valueOf(arg0))

    @overload
    def setFadeScrollBars(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.setFadeScrollBars(boolean)"""
        super(__ScrollPane, self).setFadeScrollBars(__boolean.valueOf(arg0))

    @override
    @overload
    def needsLayout(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.needsLayout()"""
        return bool.__wrap(super(WidgetGroup, self).needsLayout())

    @override
    @overload
    def setX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setX(float)"""
        super(__scene2d.Actor, self).setX(__float.valueOf(arg0))

    @override
    @overload
    def setOrigin(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOrigin(float,float)"""
        super(__scene2d.Actor, self).setOrigin(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def getCullingArea(self) -> 'math.Rectangle':
        """public com.badlogic.gdx.math.Rectangle com.badlogic.gdx.scenes.scene2d.Group.getCullingArea()"""
        return 'math.Rectangle'.__wrap(super(scene2d.Group, self).getCullingArea())

    @overload
    def getMaxY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.getMaxY()"""
        return float.__wrap(super(ScrollPane, self).getMaxY())

    @override
    @overload
    def getRight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getRight()"""
        return float.__wrap(super(scene2d.Actor, self).getRight())

    @overload
    def isAscendantOf(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isAscendantOf(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Actor, self).isAscendantOf(arg0))

    @override
    @overload
    def hasParent(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasParent()"""
        return bool.__wrap(super(scene2d.Actor, self).hasParent())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.Group.toString()"""
        return str.__wrap(super(scene2d.Group, self).toString())

    @overload
    def getScrollWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.getScrollWidth()"""
        return float.__wrap(super(ScrollPane, self).getScrollWidth())

    @override
    @overload
    def getChildren(self) -> 'utils.SnapshotArray':
        """public com.badlogic.gdx.utils.SnapshotArray<com.badlogic.gdx.scenes.scene2d.Actor> com.badlogic.gdx.scenes.scene2d.Group.getChildren()"""
        return 'utils.SnapshotArray'.__wrap(super(scene2d.Group, self).getChildren())

    @overload
    def getScrollHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.getScrollHeight()"""
        return float.__wrap(super(ScrollPane, self).getScrollHeight())

    @override
    @overload
    def addActorAt(self, arg0: int, arg1: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.addActorAt(int,com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__ScrollPane, self).addActorAt(__int.valueOf(arg0), arg1)

    @override
    @overload
    def getScaleY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getScaleY()"""
        return float.__wrap(super(scene2d.Actor, self).getScaleY())

    @override
    @overload
    def getWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getWidth()"""
        return float.__wrap(super(scene2d.Actor, self).getWidth())

    @override
    @overload
    def setPosition(self, arg0: float, arg1: float, arg2: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setPosition(float,float,int)"""
        super(__scene2d.Actor, self).setPosition(__float.valueOf(arg0), __float.valueOf(arg1), __int.valueOf(arg2))

    @overload
    def setScrollBarPositions(self, arg0: bool, arg1: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.setScrollBarPositions(boolean,boolean)"""
        super(__ScrollPane, self).setScrollBarPositions(__boolean.valueOf(arg0), __boolean.valueOf(arg1))

    @override
    @overload
    def setLayoutEnabled(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.setLayoutEnabled(boolean)"""
        super(__WidgetGroup, self).setLayoutEnabled(__boolean.valueOf(arg0))

    @overload
    def removeCaptureListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.removeCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).removeCaptureListener(arg0))

    @override
    @overload
    def invalidateHierarchy(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.invalidateHierarchy()"""
        super(WidgetGroup, self).invalidateHierarchy()

    @overload
    def isForceScrollX(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.isForceScrollX()"""
        return bool.__wrap(super(ScrollPane, self).isForceScrollX())

    @override
    @overload
    def setColor(self, arg0: 'Color'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setColor(com.badlogic.gdx.graphics.Color)"""
        super(__scene2d.Actor, self).setColor(arg0)

    @overload
    def setScrollBarTouch(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.setScrollBarTouch(boolean)"""
        super(__ScrollPane, self).setScrollBarTouch(__boolean.valueOf(arg0))

    @overload
    def getVisualScrollX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.getVisualScrollX()"""
        return float.__wrap(super(ScrollPane, self).getVisualScrollX())

    @overload
    def addCaptureListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.addCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).addCaptureListener(arg0))

    @overload
    def fire(self, arg0: 'Event') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.fire(com.badlogic.gdx.scenes.scene2d.Event)"""
        return bool.__wrap(super(__scene2d.Actor, self).fire(arg0))

    @override
    @overload
    def remove(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.remove()"""
        return bool.__wrap(super(scene2d.Actor, self).remove())

    @overload
    def cancelTouchFocus(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.cancelTouchFocus()"""
        super(ScrollPane, self).cancelTouchFocus()

    @override
    @overload
    def isVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).isVisible())

    @override
    @overload
    def act(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.act(float)"""
        super(__ScrollPane, self).act(__float.valueOf(arg0))

    @overload
    def setVelocityY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.setVelocityY(float)"""
        super(__ScrollPane, self).setVelocityY(__float.valueOf(arg0))

    @overload
    def __init__(self, arg0: 'Actor', arg1: 'Skin', arg2: str):
        """public com.badlogic.gdx.scenes.scene2d.ui.ScrollPane(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String)"""
        val = __ScrollPane(arg0, arg1, arg2)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def debug(self) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.Actor.debug()"""
        return 'scene2d.Actor'.__wrap(super(scene2d.Actor, self).debug())

    @override
    @overload
    def getTop(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getTop()"""
        return float.__wrap(super(scene2d.Actor, self).getTop())

    @override
    @overload
    def clearActions(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clearActions()"""
        super(scene2d.Actor, self).clearActions()

    @override
    @overload
    def setRotation(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setRotation(float)"""
        super(__scene2d.Actor, self).setRotation(__float.valueOf(arg0))

    @override
    @overload
    def getScaleX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getScaleX()"""
        return float.__wrap(super(scene2d.Actor, self).getScaleX())

    @overload
    def firstAscendant(self, arg0: 'Class') -> 'scene2d.Actor':
        """public <T extends com.badlogic.gdx.scenes.scene2d.Actor> T com.badlogic.gdx.scenes.scene2d.Actor.firstAscendant(java.lang.Class<T>)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Actor, self).firstAscendant(arg0))

    @overload
    def getActor(self) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.getActor()"""
        return 'scene2d.Actor'.__wrap(super(ScrollPane, self).getActor())

    @override
    @overload
    def setScaleY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScaleY(float)"""
        super(__scene2d.Actor, self).setScaleY(__float.valueOf(arg0))

    @overload
    def stageToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.stageToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).stageToLocalCoordinates(arg0))

    @overload
    def setStyle(self, arg0: 'ScrollPaneStyle'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.setStyle(com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$ScrollPaneStyle)"""
        super(__ScrollPane, self).setStyle(arg0)

    @overload
    def swapActor(self, arg0: int, arg1: int) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.swapActor(int,int)"""
        return bool.__wrap(super(__scene2d.Group, self).swapActor(__int.valueOf(arg0), __int.valueOf(arg1)))

    @override
    @overload
    def hasChildren(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.hasChildren()"""
        return bool.__wrap(super(scene2d.Group, self).hasChildren())

    @override
    @overload
    def ascendantsVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.ascendantsVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).ascendantsVisible())

    @overload
    def setSmoothScrolling(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.setSmoothScrolling(boolean)"""
        super(__ScrollPane, self).setSmoothScrolling(__boolean.valueOf(arg0))

    @overload
    def removeActor(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.removeActor(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__ScrollPane, self).removeActor(arg0))

    @override
    @overload
    def getColor(self) -> 'graphics.Color':
        """public com.badlogic.gdx.graphics.Color com.badlogic.gdx.scenes.scene2d.Actor.getColor()"""
        return 'graphics.Color'.__wrap(super(scene2d.Actor, self).getColor())

    @override
    @overload
    def isTransform(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.isTransform()"""
        return bool.__wrap(super(scene2d.Group, self).isTransform())

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def getWidget(self) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.getWidget()"""
        return 'scene2d.Actor'.__wrap(super(ScrollPane, self).getWidget())

    @override
    @overload
    def addActorBefore(self, arg0: 'Actor', arg1: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.addActorBefore(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__ScrollPane, self).addActorBefore(arg0, arg1)

    @override
    @overload
    def isTouchable(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchable()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchable())

    @overload
    def setScrollY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.setScrollY(float)"""
        super(__ScrollPane, self).setScrollY(__float.valueOf(arg0))

    @overload
    def clipBegin(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.clipBegin(float,float,float,float)"""
        return bool.__wrap(super(__scene2d.Actor, self).clipBegin(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3)))

    @overload
    def scrollTo(self, arg0: float, arg1: float, arg2: float, arg3: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.scrollTo(float,float,float,float)"""
        super(__ScrollPane, self).scrollTo(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3)) 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.Image
from pyquantum_helper import import_once as __import_once__
import com.badlogic.gdx.scenes.scene2d.Touchable as __Touchable
__Touchable = __Touchable
try:
    from pygdx.scenes import scene2d
except ImportError:
    scene2d = __import_once__("pygdx.scenes.scene2d")

import com.badlogic.gdx.graphics.Color as __Color
__Color = __Color
import java.lang.Boolean as __boolean
try:
    from pygdx.graphics import g2d
except ImportError:
    g2d = __import_once__("pygdx.graphics.g2d")

from builtins import type
import com.badlogic.gdx.scenes.scene2d.Group as __Group
__Group = __Group
import com.badlogic.gdx.math.Vector2 as __Vector2
__Vector2 = __Vector2
import java.lang.Class as __Class
__Class = __Class
import com.badlogic.gdx.utils.Array as __Array
__Array = __Array
import java.lang.String as __string
try:
    from pygdx import math
except ImportError:
    math = __import_once__("pygdx.math")

from builtins import bool
import com.badlogic.gdx.scenes.scene2d.ui.Widget as __Widget
__Widget = __Widget
from builtins import str
try:
    from pygdx import utils
except ImportError:
    utils = __import_once__("pygdx.utils")

try:
    from pygdx.scenes.scene2d import utils
except ImportError:
    utils = __import_once__("pygdx.scenes.scene2d.utils")

from pyquantum_helper import override
import java.lang.Object as __object
from builtins import float
from builtins import object
import com.badlogic.gdx.scenes.scene2d.ui.Image as __Image
__Image = __Image
import com.badlogic.gdx.utils.DelayedRemovalArray as __DelayedRemovalArray
__DelayedRemovalArray = __DelayedRemovalArray
import java.lang.Long as __long
import java.lang.Float as __float
import java.lang.String as __String
__String = __String
try:
    from pygdx.graphics import glutils
except ImportError:
    glutils = __import_once__("pygdx.graphics.glutils")

import java.lang.Object as __Object
__Object = __Object
import com.badlogic.gdx.scenes.scene2d.Actor as __Actor
__Actor = __Actor
import java.lang.Integer as __int
import com.badlogic.gdx.scenes.scene2d.Stage as __Stage
__Stage = __Stage
import com.badlogic.gdx.scenes.scene2d.utils.Drawable as __Drawable
__Drawable = __Drawable
try:
    from pygdx import graphics
except ImportError:
    graphics = __import_once__("pygdx.graphics")

from builtins import int
 
class Image(__Widget, Widget):
    """com.badlogic.gdx.scenes.scene2d.ui.Image"""
 
    @staticmethod
    def __wrap(java_value: __Image) -> 'Image':
        return Image(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Image):
        """
        Dynamic initializer for Image.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def getY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getY()"""
        return float.__wrap(super(scene2d.Actor, self).getY())

    @overload
    def __init__(self, arg0: 'Drawable', arg1: 'Scaling', arg2: int):
        """public com.badlogic.gdx.scenes.scene2d.ui.Image(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.utils.Scaling,int)"""
        val = __Image(arg0, arg1, __int.valueOf(arg2))
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def setZIndex(self, arg0: int) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.setZIndex(int)"""
        return bool.__wrap(super(__scene2d.Actor, self).setZIndex(__int.valueOf(arg0)))

    @override
    @overload
    def setBounds(self, arg0: float, arg1: float, arg2: float, arg3: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setBounds(float,float,float,float)"""
        super(__scene2d.Actor, self).setBounds(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def needsLayout(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Widget.needsLayout()"""
        return bool.__wrap(super(Widget, self).needsLayout())

    @overload
    def getX(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getX(int)"""
        return float.__wrap(super(__scene2d.Actor, self).getX(__int.valueOf(arg0)))

    @override
    @overload
    def sizeBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.sizeBy(float)"""
        super(__scene2d.Actor, self).sizeBy(__float.valueOf(arg0))

    @override
    @overload
    def draw(self, arg0: 'Batch', arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Image.draw(com.badlogic.gdx.graphics.g2d.Batch,float)"""
        super(__Image, self).draw(arg0, __float.valueOf(arg1))

    @overload
    def setDrawable(self, arg0: 'Skin', arg1: str):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Image.setDrawable(com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String)"""
        super(__Image, self).setDrawable(arg0, arg1)

    @overload
    def __init__(self, arg0: 'TextureRegion'):
        """public com.badlogic.gdx.scenes.scene2d.ui.Image(com.badlogic.gdx.graphics.g2d.TextureRegion)"""
        val = __Image(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def sizeBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.sizeBy(float,float)"""
        super(__scene2d.Actor, self).sizeBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def hasActions(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasActions()"""
        return bool.__wrap(super(scene2d.Actor, self).hasActions())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0))

    @override
    @overload
    def setScaleX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScaleX(float)"""
        super(__scene2d.Actor, self).setScaleX(__float.valueOf(arg0))

    @override
    @overload
    def getTouchable(self) -> 'scene2d.Touchable':
        """public com.badlogic.gdx.scenes.scene2d.Touchable com.badlogic.gdx.scenes.scene2d.Actor.getTouchable()"""
        return 'scene2d.Touchable'.__wrap(super(scene2d.Actor, self).getTouchable())

    @override
    @overload
    def removeAction(self, arg0: 'Action'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.removeAction(com.badlogic.gdx.scenes.scene2d.Action)"""
        super(__scene2d.Actor, self).removeAction(arg0)

    @overload
    def getImageHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Image.getImageHeight()"""
        return float.__wrap(super(Image, self).getImageHeight())

    @override
    @overload
    def getX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getX()"""
        return float.__wrap(super(scene2d.Actor, self).getX())

    @overload
    def __init__(self, arg0: 'Texture'):
        """public com.badlogic.gdx.scenes.scene2d.ui.Image(com.badlogic.gdx.graphics.Texture)"""
        val = __Image(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def getMaxWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Widget.getMaxWidth()"""
        return float.__wrap(super(Widget, self).getMaxWidth())

    @override
    @overload
    def toBack(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.toBack()"""
        super(scene2d.Actor, self).toBack()

    @override
    @overload
    def setDebug(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setDebug(boolean)"""
        super(__scene2d.Actor, self).setDebug(__boolean.valueOf(arg0))

    @override
    @overload
    def setX(self, arg0: float, arg1: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setX(float,int)"""
        super(__scene2d.Actor, self).setX(__float.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def screenToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.screenToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).screenToLocalCoordinates(arg0))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def ancestorsVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.ancestorsVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).ancestorsVisible())

    @override
    @overload
    def getListeners(self) -> 'utils.DelayedRemovalArray':
        """public com.badlogic.gdx.utils.DelayedRemovalArray<com.badlogic.gdx.scenes.scene2d.EventListener> com.badlogic.gdx.scenes.scene2d.Actor.getListeners()"""
        return 'utils.DelayedRemovalArray'.__wrap(super(scene2d.Actor, self).getListeners())

    @override
    @overload
    def setFillParent(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.setFillParent(boolean)"""
        super(__Widget, self).setFillParent(__boolean.valueOf(arg0))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def removeListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.removeListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).removeListener(arg0))

    @override
    @overload
    def isTouchFocusListener(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchFocusListener()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchFocusListener())

    @overload
    def localToStageCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToStageCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToStageCoordinates(arg0))

    @override
    @overload
    def setSize(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setSize(float,float)"""
        super(__scene2d.Actor, self).setSize(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def getZIndex(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.Actor.getZIndex()"""
        return int.__wrap(super(scene2d.Actor, self).getZIndex())

    @override
    @overload
    def clipBegin(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.clipBegin()"""
        return bool.__wrap(super(scene2d.Actor, self).clipBegin())

    @override
    @overload
    def invalidateHierarchy(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.invalidateHierarchy()"""
        super(Widget, self).invalidateHierarchy()

    @override
    @overload
    def moveBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.moveBy(float,float)"""
        super(__scene2d.Actor, self).moveBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def getY(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getY(int)"""
        return float.__wrap(super(__scene2d.Actor, self).getY(__int.valueOf(arg0)))

    @override
    @overload
    def setOrigin(self, arg0: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOrigin(int)"""
        super(__scene2d.Actor, self).setOrigin(__int.valueOf(arg0))

    @overload
    def isDescendantOf(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isDescendantOf(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Actor, self).isDescendantOf(arg0))

    @override
    @overload
    def getParent(self) -> 'scene2d.Group':
        """public com.badlogic.gdx.scenes.scene2d.Group com.badlogic.gdx.scenes.scene2d.Actor.getParent()"""
        return 'scene2d.Group'.__wrap(super(scene2d.Actor, self).getParent())

    @override
    @overload
    def clearListeners(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clearListeners()"""
        super(scene2d.Actor, self).clearListeners()

    @overload
    def localToActorCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToActorCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToActorCoordinates(arg0, arg1))

    @override
    @overload
    def setName(self, arg0: str):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setName(java.lang.String)"""
        super(__scene2d.Actor, self).setName(arg0)

    @override
    @overload
    def getMinHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Image.getMinHeight()"""
        return float.__wrap(super(Image, self).getMinHeight())

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @override
    @overload
    def setLayoutEnabled(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.setLayoutEnabled(boolean)"""
        super(__Widget, self).setLayoutEnabled(__boolean.valueOf(arg0))

    @override
    @overload
    def setOriginX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOriginX(float)"""
        super(__scene2d.Actor, self).setOriginX(__float.valueOf(arg0))

    @override
    @overload
    def getHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getHeight()"""
        return float.__wrap(super(scene2d.Actor, self).getHeight())

    @override
    @overload
    def validate(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.validate()"""
        super(Widget, self).validate()

    @override
    @overload
    def hasKeyboardFocus(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasKeyboardFocus()"""
        return bool.__wrap(super(scene2d.Actor, self).hasKeyboardFocus())

    @override
    @overload
    def getOriginY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getOriginY()"""
        return float.__wrap(super(scene2d.Actor, self).getOriginY())

    @override
    @overload
    def clipEnd(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clipEnd()"""
        super(scene2d.Actor, self).clipEnd()

    @overload
    def __init__(self):
        """public com.badlogic.gdx.scenes.scene2d.ui.Image()"""
        val = __Image()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def getUserObject(self) -> object:
        """public java.lang.Object com.badlogic.gdx.scenes.scene2d.Actor.getUserObject()"""
        return object.__wrap(super(scene2d.Actor, self).getUserObject())

    @override
    @overload
    def pack(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.pack()"""
        super(Widget, self).pack()

    @overload
    def getImageX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Image.getImageX()"""
        return float.__wrap(super(Image, self).getImageX())

    @override
    @overload
    def getDebug(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.getDebug()"""
        return bool.__wrap(super(scene2d.Actor, self).getDebug())

    @override
    @overload
    def setHeight(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setHeight(float)"""
        super(__scene2d.Actor, self).setHeight(__float.valueOf(arg0))

    @override
    @overload
    def setScale(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScale(float)"""
        super(__scene2d.Actor, self).setScale(__float.valueOf(arg0))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def rotateBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.rotateBy(float)"""
        super(__scene2d.Actor, self).rotateBy(__float.valueOf(arg0))

    @override
    @overload
    def setScale(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScale(float,float)"""
        super(__scene2d.Actor, self).setScale(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def addListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.addListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).addListener(arg0))

    @overload
    def parentToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.parentToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).parentToLocalCoordinates(arg0))

    @overload
    def __init__(self, arg0: 'Drawable'):
        """public com.badlogic.gdx.scenes.scene2d.ui.Image(com.badlogic.gdx.scenes.scene2d.utils.Drawable)"""
        val = __Image(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def setScaling(self, arg0: 'Scaling'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Image.setScaling(com.badlogic.gdx.utils.Scaling)"""
        super(__Image, self).setScaling(arg0)

    @override
    @overload
    def getRotation(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getRotation()"""
        return float.__wrap(super(scene2d.Actor, self).getRotation())

    @override
    @overload
    def setVisible(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setVisible(boolean)"""
        super(__scene2d.Actor, self).setVisible(__boolean.valueOf(arg0))

    @override
    @overload
    def setY(self, arg0: float, arg1: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setY(float,int)"""
        super(__scene2d.Actor, self).setY(__float.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def __init__(self, ):
        """public com.badlogic.gdx.scenes.scene2d.ui.Image()"""
        val = __Image()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def setX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setX(float)"""
        super(__scene2d.Actor, self).setX(__float.valueOf(arg0))

    @override
    @overload
    def invalidate(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.invalidate()"""
        super(Widget, self).invalidate()

    @override
    @overload
    def setOrigin(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOrigin(float,float)"""
        super(__scene2d.Actor, self).setOrigin(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def getDrawable(self) -> 'utils.Drawable':
        """public com.badlogic.gdx.scenes.scene2d.utils.Drawable com.badlogic.gdx.scenes.scene2d.ui.Image.getDrawable()"""
        return 'utils.Drawable'.__wrap(super(Image, self).getDrawable())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def getAlign(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.ui.Image.getAlign()"""
        return int.__wrap(super(Image, self).getAlign())

    @override
    @overload
    def getRight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getRight()"""
        return float.__wrap(super(scene2d.Actor, self).getRight())

    @overload
    def isAscendantOf(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isAscendantOf(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Actor, self).isAscendantOf(arg0))

    @override
    @overload
    def setWidth(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setWidth(float)"""
        super(__scene2d.Actor, self).setWidth(__float.valueOf(arg0))

    @override
    @overload
    def isTouchFocusTarget(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchFocusTarget()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchFocusTarget())

    @override
    @overload
    def hasParent(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasParent()"""
        return bool.__wrap(super(scene2d.Actor, self).hasParent())

    @override
    @overload
    def setPosition(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setPosition(float,float)"""
        super(__scene2d.Actor, self).setPosition(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.ui.Image.toString()"""
        return str.__wrap(super(Image, self).toString())

    @override
    @overload
    def getScaleY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getScaleY()"""
        return float.__wrap(super(scene2d.Actor, self).getScaleY())

    @override
    @overload
    def getWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getWidth()"""
        return float.__wrap(super(scene2d.Actor, self).getWidth())

    @override
    @overload
    def setOriginY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOriginY(float)"""
        super(__scene2d.Actor, self).setOriginY(__float.valueOf(arg0))

    @overload
    def __init__(self, arg0: 'NinePatch'):
        """public com.badlogic.gdx.scenes.scene2d.ui.Image(com.badlogic.gdx.graphics.g2d.NinePatch)"""
        val = __Image(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def setPosition(self, arg0: float, arg1: float, arg2: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setPosition(float,float,int)"""
        super(__scene2d.Actor, self).setPosition(__float.valueOf(arg0), __float.valueOf(arg1), __int.valueOf(arg2))

    @overload
    def getImageWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Image.getImageWidth()"""
        return float.__wrap(super(Image, self).getImageWidth())

    @overload
    def removeCaptureListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.removeCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).removeCaptureListener(arg0))

    @override
    @overload
    def setColor(self, arg0: 'Color'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setColor(com.badlogic.gdx.graphics.Color)"""
        super(__scene2d.Actor, self).setColor(arg0)

    @overload
    def localToScreenCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToScreenCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToScreenCoordinates(arg0))

    @override
    @overload
    def layout(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Image.layout()"""
        super(Image, self).layout()

    @override
    @overload
    def drawDebug(self, arg0: 'ShapeRenderer'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.drawDebug(com.badlogic.gdx.graphics.glutils.ShapeRenderer)"""
        super(__scene2d.Actor, self).drawDebug(arg0)

    @override
    @overload
    def setTouchable(self, arg0: 'Touchable'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setTouchable(com.badlogic.gdx.scenes.scene2d.Touchable)"""
        super(__scene2d.Actor, self).setTouchable(arg0)

    @overload
    def addCaptureListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.addCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).addCaptureListener(arg0))

    @overload
    def fire(self, arg0: 'Event') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.fire(com.badlogic.gdx.scenes.scene2d.Event)"""
        return bool.__wrap(super(__scene2d.Actor, self).fire(arg0))

    @override
    @overload
    def getMaxHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Widget.getMaxHeight()"""
        return float.__wrap(super(Widget, self).getMaxHeight())

    @override
    @overload
    def remove(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.remove()"""
        return bool.__wrap(super(scene2d.Actor, self).remove())

    @override
    @overload
    def getPrefWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Image.getPrefWidth()"""
        return float.__wrap(super(Image, self).getPrefWidth())

    @overload
    def __init__(self, arg0: 'Drawable', arg1: 'Scaling'):
        """public com.badlogic.gdx.scenes.scene2d.ui.Image(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.utils.Scaling)"""
        val = __Image(arg0, arg1)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def hit(self, arg0: float, arg1: float, arg2: bool) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.Actor.hit(float,float,boolean)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Actor, self).hit(__float.valueOf(arg0), __float.valueOf(arg1), __boolean.valueOf(arg2)))

    @overload
    def localToParentCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToParentCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToParentCoordinates(arg0))

    @override
    @overload
    def clear(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clear()"""
        super(scene2d.Actor, self).clear()

    @override
    @overload
    def getName(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.Actor.getName()"""
        return str.__wrap(super(scene2d.Actor, self).getName())

    @override
    @overload
    def isVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).isVisible())

    @overload
    def setAlign(self, arg0: int):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Image.setAlign(int)"""
        super(__Image, self).setAlign(__int.valueOf(arg0))

    @override
    @overload
    def getCaptureListeners(self) -> 'utils.DelayedRemovalArray':
        """public com.badlogic.gdx.utils.DelayedRemovalArray<com.badlogic.gdx.scenes.scene2d.EventListener> com.badlogic.gdx.scenes.scene2d.Actor.getCaptureListeners()"""
        return 'utils.DelayedRemovalArray'.__wrap(super(scene2d.Actor, self).getCaptureListeners())

    @override
    @overload
    def getMinWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Image.getMinWidth()"""
        return float.__wrap(super(Image, self).getMinWidth())

    @override
    @overload
    def debug(self) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.Actor.debug()"""
        return 'scene2d.Actor'.__wrap(super(scene2d.Actor, self).debug())

    @override
    @overload
    def getTop(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getTop()"""
        return float.__wrap(super(scene2d.Actor, self).getTop())

    @override
    @overload
    def setY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setY(float)"""
        super(__scene2d.Actor, self).setY(__float.valueOf(arg0))

    @override
    @overload
    def clearActions(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clearActions()"""
        super(scene2d.Actor, self).clearActions()

    @override
    @overload
    def getPrefHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Image.getPrefHeight()"""
        return float.__wrap(super(Image, self).getPrefHeight())

    @override
    @overload
    def scaleBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.scaleBy(float,float)"""
        super(__scene2d.Actor, self).scaleBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def setRotation(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setRotation(float)"""
        super(__scene2d.Actor, self).setRotation(__float.valueOf(arg0))

    @override
    @overload
    def getScaleX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getScaleX()"""
        return float.__wrap(super(scene2d.Actor, self).getScaleX())

    @overload
    def firstAscendant(self, arg0: 'Class') -> 'scene2d.Actor':
        """public <T extends com.badlogic.gdx.scenes.scene2d.Actor> T com.badlogic.gdx.scenes.scene2d.Actor.firstAscendant(java.lang.Class<T>)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Actor, self).firstAscendant(arg0))

    @overload
    def notify(self, arg0: 'Event', arg1: bool) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.notify(com.badlogic.gdx.scenes.scene2d.Event,boolean)"""
        return bool.__wrap(super(__scene2d.Actor, self).notify(arg0, __boolean.valueOf(arg1)))

    @override
    @overload
    def act(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.act(float)"""
        super(__scene2d.Actor, self).act(__float.valueOf(arg0))

    @override
    @overload
    def setUserObject(self, arg0: object):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setUserObject(java.lang.Object)"""
        super(__scene2d.Actor, self).setUserObject(arg0)

    @override
    @overload
    def setScaleY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScaleY(float)"""
        super(__scene2d.Actor, self).setScaleY(__float.valueOf(arg0))

    @override
    @overload
    def hasScrollFocus(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasScrollFocus()"""
        return bool.__wrap(super(scene2d.Actor, self).hasScrollFocus())

    @override
    @overload
    def toFront(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.toFront()"""
        super(scene2d.Actor, self).toFront()

    @overload
    def getImageY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Image.getImageY()"""
        return float.__wrap(super(Image, self).getImageY())

    @override
    @overload
    def scaleBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.scaleBy(float)"""
        super(__scene2d.Actor, self).scaleBy(__float.valueOf(arg0))

    @overload
    def stageToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.stageToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).stageToLocalCoordinates(arg0))

    @override
    @overload
    def getOriginX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getOriginX()"""
        return float.__wrap(super(scene2d.Actor, self).getOriginX())

    @override
    @overload
    def ascendantsVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.ascendantsVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).ascendantsVisible())

    @overload
    def __init__(self, arg0: 'Skin', arg1: str):
        """public com.badlogic.gdx.scenes.scene2d.ui.Image(com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String)"""
        val = __Image(arg0, arg1)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def getColor(self) -> 'graphics.Color':
        """public com.badlogic.gdx.graphics.Color com.badlogic.gdx.scenes.scene2d.Actor.getColor()"""
        return 'graphics.Color'.__wrap(super(scene2d.Actor, self).getColor())

    @overload
    def setDrawable(self, arg0: 'Drawable'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Image.setDrawable(com.badlogic.gdx.scenes.scene2d.utils.Drawable)"""
        super(__Image, self).setDrawable(arg0)

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @override
    @overload
    def getStage(self) -> 'scene2d.Stage':
        """public com.badlogic.gdx.scenes.scene2d.Stage com.badlogic.gdx.scenes.scene2d.Actor.getStage()"""
        return 'scene2d.Stage'.__wrap(super(scene2d.Actor, self).getStage())

    @override
    @overload
    def addAction(self, arg0: 'Action'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.addAction(com.badlogic.gdx.scenes.scene2d.Action)"""
        super(__scene2d.Actor, self).addAction(arg0)

    @override
    @overload
    def setColor(self, arg0: float, arg1: float, arg2: float, arg3: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setColor(float,float,float,float)"""
        super(__scene2d.Actor, self).setColor(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3))

    @override
    @overload
    def isTouchable(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchable()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchable())

    @overload
    def localToAscendantCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToAscendantCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToAscendantCoordinates(arg0, arg1))

    @overload
    def clipBegin(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.clipBegin(float,float,float,float)"""
        return bool.__wrap(super(__scene2d.Actor, self).clipBegin(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3)))

    @override
    @overload
    def getActions(self) -> 'utils.Array':
        """public com.badlogic.gdx.utils.Array<com.badlogic.gdx.scenes.scene2d.Action> com.badlogic.gdx.scenes.scene2d.Actor.getActions()"""
        return 'utils.Array'.__wrap(super(scene2d.Actor, self).getActions()) 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.Tooltip
from pyquantum_helper import import_once as __import_once__
try:
    from pygdx.scenes import scene2d
except ImportError:
    scene2d = __import_once__("pygdx.scenes.scene2d")

from builtins import str
import java.lang.Character as __char
from pyquantum_helper import override
import java.lang.Boolean as __boolean
import java.lang.Object as __object
from builtins import type
import com.badlogic.gdx.scenes.scene2d.InputListener as __InputListener
__InputListener = __InputListener
import java.lang.Long as __long
import java.lang.Float as __float
import java.lang.Class as __Class
__Class = __Class
import com.badlogic.gdx.scenes.scene2d.ui.TooltipManager as __TooltipManager
__TooltipManager = __TooltipManager
import com.badlogic.gdx.scenes.scene2d.ui.Container as __Container
__Container = __Container
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import com.badlogic.gdx.scenes.scene2d.ui.Tooltip as __Tooltip
__Tooltip = __Tooltip
import com.badlogic.gdx.scenes.scene2d.Actor as __Actor
__Actor = __Actor
import java.lang.Integer as __int
from builtins import bool
from builtins import int
 
class Tooltip(scenes.__InputListener, scene2d.InputListener):
    """com.badlogic.gdx.scenes.scene2d.ui.Tooltip"""
 
    @staticmethod
    def __wrap(java_value: __Tooltip) -> 'Tooltip':
        return Tooltip(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Tooltip):
        """
        Dynamic initializer for Tooltip.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def setActor(self, arg0: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Tooltip.setActor(T)"""
        super(__Tooltip, self).setActor(arg0)

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def __init__(self, arg0: 'Actor'):
        """public com.badlogic.gdx.scenes.scene2d.ui.Tooltip(T)"""
        val = __Tooltip(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def touchDragged(self, arg0: 'InputEvent', arg1: float, arg2: float, arg3: int):
        """public void com.badlogic.gdx.scenes.scene2d.InputListener.touchDragged(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int)"""
        super(__scene2d.InputListener, self).touchDragged(arg0, __float.valueOf(arg1), __float.valueOf(arg2), __int.valueOf(arg3))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def getActor(self) -> 'scene2d.Actor':
        """public T com.badlogic.gdx.scenes.scene2d.ui.Tooltip.getActor()"""
        return 'scene2d.Actor'.__wrap(super(Tooltip, self).getActor())

    @overload
    def hide(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Tooltip.hide()"""
        super(Tooltip, self).hide()

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0))

    @overload
    def setInstant(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Tooltip.setInstant(boolean)"""
        super(__Tooltip, self).setInstant(__boolean.valueOf(arg0))

    @override
    @overload
    def touchUp(self, arg0: 'InputEvent', arg1: float, arg2: float, arg3: int, arg4: int):
        """public void com.badlogic.gdx.scenes.scene2d.InputListener.touchUp(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int)"""
        super(__scene2d.InputListener, self).touchUp(arg0, __float.valueOf(arg1), __float.valueOf(arg2), __int.valueOf(arg3), __int.valueOf(arg4))

    @overload
    def getContainer(self) -> 'Container':
        """public com.badlogic.gdx.scenes.scene2d.ui.Container<T> com.badlogic.gdx.scenes.scene2d.ui.Tooltip.getContainer()"""
        return 'Container'.__wrap(super(Tooltip, self).getContainer())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.lang.Object.toString()"""
        return str.__wrap(super(object, self).toString())

    @overload
    def __init__(self, arg0: 'Actor', arg1: 'TooltipManager'):
        """public com.badlogic.gdx.scenes.scene2d.ui.Tooltip(T,com.badlogic.gdx.scenes.scene2d.ui.TooltipManager)"""
        val = __Tooltip(arg0, arg1)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def getManager(self) -> 'TooltipManager':
        """public com.badlogic.gdx.scenes.scene2d.ui.TooltipManager com.badlogic.gdx.scenes.scene2d.ui.Tooltip.getManager()"""
        return 'TooltipManager'.__wrap(super(Tooltip, self).getManager())

    @override
    @overload
    def enter(self, arg0: 'InputEvent', arg1: float, arg2: float, arg3: int, arg4: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Tooltip.enter(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__Tooltip, self).enter(arg0, __float.valueOf(arg1), __float.valueOf(arg2), __int.valueOf(arg3), arg4)

    @overload
    def keyTyped(self, arg0: 'InputEvent', arg1: str) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.InputListener.keyTyped(com.badlogic.gdx.scenes.scene2d.InputEvent,char)"""
        return bool.__wrap(super(__scene2d.InputListener, self).keyTyped(arg0, __char.valueOf(arg1)))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def keyDown(self, arg0: 'InputEvent', arg1: int) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.InputListener.keyDown(com.badlogic.gdx.scenes.scene2d.InputEvent,int)"""
        return bool.__wrap(super(__scene2d.InputListener, self).keyDown(arg0, __int.valueOf(arg1)))

    @overload
    def setAlways(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Tooltip.setAlways(boolean)"""
        super(__Tooltip, self).setAlways(__boolean.valueOf(arg0))

    @overload
    def scrolled(self, arg0: 'InputEvent', arg1: float, arg2: float, arg3: float, arg4: float) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.InputListener.scrolled(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,float,float)"""
        return bool.__wrap(super(__scene2d.InputListener, self).scrolled(arg0, __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3), __float.valueOf(arg4)))

    @overload
    def keyUp(self, arg0: 'InputEvent', arg1: int) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.InputListener.keyUp(com.badlogic.gdx.scenes.scene2d.InputEvent,int)"""
        return bool.__wrap(super(__scene2d.InputListener, self).keyUp(arg0, __int.valueOf(arg1)))

    @overload
    def handle(self, arg0: 'Event') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.InputListener.handle(com.badlogic.gdx.scenes.scene2d.Event)"""
        return bool.__wrap(super(__scene2d.InputListener, self).handle(arg0))

    @overload
    def setTouchIndependent(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Tooltip.setTouchIndependent(boolean)"""
        super(__Tooltip, self).setTouchIndependent(__boolean.valueOf(arg0))

    @override
    @overload
    def exit(self, arg0: 'InputEvent', arg1: float, arg2: float, arg3: int, arg4: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Tooltip.exit(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__Tooltip, self).exit(arg0, __float.valueOf(arg1), __float.valueOf(arg2), __int.valueOf(arg3), arg4)

    @overload
    def mouseMoved(self, arg0: 'InputEvent', arg1: float, arg2: float) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Tooltip.mouseMoved(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float)"""
        return bool.__wrap(super(__Tooltip, self).mouseMoved(arg0, __float.valueOf(arg1), __float.valueOf(arg2)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def touchDown(self, arg0: 'InputEvent', arg1: float, arg2: float, arg3: int, arg4: int) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Tooltip.touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int)"""
        return bool.__wrap(super(__Tooltip, self).touchDown(arg0, __float.valueOf(arg1), __float.valueOf(arg2), __int.valueOf(arg3), __int.valueOf(arg4))) 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.TextTooltip$TextTooltipStyle
from pyquantum_helper import import_once as __import_once__
from builtins import str
try:
    from pygdx.scenes.scene2d import utils
except ImportError:
    utils = __import_once__("pygdx.scenes.scene2d.utils")

import com.badlogic.gdx.scenes.scene2d.ui.TextTooltip as __TextTooltip_TextTooltipStyle
__TextTooltipStyle = __TextTooltip_TextTooltipStyle.TextTooltipStyle
from pyquantum_helper import override
import java.lang.Object as __object
from builtins import type
import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import java.lang.Integer as __int
from builtins import bool
from builtins import int
 
class TextTooltipStyle():
    """com.badlogic.gdx.scenes.scene2d.ui.TextTooltip.TextTooltipStyle"""
 
    @staticmethod
    def __wrap(java_value: __TextTooltipStyle) -> 'TextTooltipStyle':
        return TextTooltipStyle(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __TextTooltipStyle):
        """
        Dynamic initializer for TextTooltipStyle.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.lang.Object.toString()"""
        return str.__wrap(super(object, self).toString())

    @overload
    def __init__(self):
        """public com.badlogic.gdx.scenes.scene2d.ui.TextTooltip$TextTooltipStyle()"""
        val = __TextTooltipStyle()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def __init__(self, ):
        """public com.badlogic.gdx.scenes.scene2d.ui.TextTooltip$TextTooltipStyle()"""
        val = __TextTooltipStyle()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def __init__(self, arg0: 'LabelStyle', arg1: 'Drawable'):
        """public com.badlogic.gdx.scenes.scene2d.ui.TextTooltip$TextTooltipStyle(com.badlogic.gdx.scenes.scene2d.ui.Label$LabelStyle,com.badlogic.gdx.scenes.scene2d.utils.Drawable)"""
        val = __TextTooltipStyle(arg0, arg1)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0))

    @overload
    def __init__(self, arg0: 'TextTooltipStyle'):
        """public com.badlogic.gdx.scenes.scene2d.ui.TextTooltip$TextTooltipStyle(com.badlogic.gdx.scenes.scene2d.ui.TextTooltip$TextTooltipStyle)"""
        val = __TextTooltipStyle(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.Tree$TreeStyle
from pyquantum_helper import import_once as __import_once__
from builtins import str
try:
    from pygdx.scenes.scene2d import utils
except ImportError:
    utils = __import_once__("pygdx.scenes.scene2d.utils")

from pyquantum_helper import override
import java.lang.Object as __object
from builtins import type
import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import com.badlogic.gdx.scenes.scene2d.ui.Tree as __Tree_TreeStyle
__TreeStyle = __Tree_TreeStyle.TreeStyle
import java.lang.Integer as __int
from builtins import bool
from builtins import int
 
class TreeStyle():
    """com.badlogic.gdx.scenes.scene2d.ui.Tree.TreeStyle"""
 
    @staticmethod
    def __wrap(java_value: __TreeStyle) -> 'TreeStyle':
        return TreeStyle(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __TreeStyle):
        """
        Dynamic initializer for TreeStyle.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.lang.Object.toString()"""
        return str.__wrap(super(object, self).toString())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def __init__(self, ):
        """public com.badlogic.gdx.scenes.scene2d.ui.Tree$TreeStyle()"""
        val = __TreeStyle()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def __init__(self, arg0: 'TreeStyle'):
        """public com.badlogic.gdx.scenes.scene2d.ui.Tree$TreeStyle(com.badlogic.gdx.scenes.scene2d.ui.Tree$TreeStyle)"""
        val = __TreeStyle(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def __init__(self):
        """public com.badlogic.gdx.scenes.scene2d.ui.Tree$TreeStyle()"""
        val = __TreeStyle()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0))

    @overload
    def __init__(self, arg0: 'Drawable', arg1: 'Drawable', arg2: 'Drawable'):
        """public com.badlogic.gdx.scenes.scene2d.ui.Tree$TreeStyle(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable)"""
        val = __TreeStyle(arg0, arg1, arg2)
        self.__dict__ = val.__dict__
        self.__wrapper = val 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton$ImageTextButtonStyle
from pyquantum_helper import import_once as __import_once__
from builtins import str
try:
    from pygdx.scenes.scene2d import utils
except ImportError:
    utils = __import_once__("pygdx.scenes.scene2d.utils")

from pyquantum_helper import override
import java.lang.Object as __object
try:
    from pygdx.graphics import g2d
except ImportError:
    g2d = __import_once__("pygdx.graphics.g2d")

from builtins import type
import com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton as __ImageTextButton_ImageTextButtonStyle
__ImageTextButtonStyle = __ImageTextButton_ImageTextButtonStyle.ImageTextButtonStyle
import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import java.lang.Integer as __int
from builtins import bool
from builtins import int
 
class ImageTextButtonStyle(__TextButtonStyle, TextButtonStyle):
    """com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton.ImageTextButtonStyle"""
 
    @staticmethod
    def __wrap(java_value: __ImageTextButtonStyle) -> 'ImageTextButtonStyle':
        return ImageTextButtonStyle(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __ImageTextButtonStyle):
        """
        Dynamic initializer for ImageTextButtonStyle.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.lang.Object.toString()"""
        return str.__wrap(super(object, self).toString())

    @overload
    def __init__(self, arg0: 'Drawable', arg1: 'Drawable', arg2: 'Drawable', arg3: 'BitmapFont'):
        """public com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton$ImageTextButtonStyle(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.graphics.g2d.BitmapFont)"""
        val = __ImageTextButtonStyle(arg0, arg1, arg2, arg3)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def __init__(self):
        """public com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton$ImageTextButtonStyle()"""
        val = __ImageTextButtonStyle()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def __init__(self, arg0: 'ImageTextButtonStyle'):
        """public com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton$ImageTextButtonStyle(com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton$ImageTextButtonStyle)"""
        val = __ImageTextButtonStyle(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def __init__(self, ):
        """public com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton$ImageTextButtonStyle()"""
        val = __ImageTextButtonStyle()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def __init__(self, arg0: 'TextButtonStyle'):
        """public com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton$ImageTextButtonStyle(com.badlogic.gdx.scenes.scene2d.ui.TextButton$TextButtonStyle)"""
        val = __ImageTextButtonStyle(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0)) 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldListener
import com.badlogic.gdx.scenes.scene2d.ui.TextField as __TextField_TextFieldListener
__TextFieldListener = __TextField_TextFieldListener.TextFieldListener
from abc import abstractmethod, ABC
 
class TextFieldListener(ABC):
    """com.badlogic.gdx.scenes.scene2d.ui.TextField.TextFieldListener"""
 
    @staticmethod
    def __wrap(java_value: __TextFieldListener) -> 'TextFieldListener':
        return TextFieldListener(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __TextFieldListener):
        """
        Dynamic initializer for TextFieldListener.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @abstractmethod
    def keyTyped(self, arg0: 'TextField', arg1: str):
        """public abstract void com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldListener.keyTyped(com.badlogic.gdx.scenes.scene2d.ui.TextField,char)"""
        pass 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.List
from pyquantum_helper import import_once as __import_once__
import com.badlogic.gdx.scenes.scene2d.Touchable as __Touchable
__Touchable = __Touchable
try:
    from pygdx.scenes import scene2d
except ImportError:
    scene2d = __import_once__("pygdx.scenes.scene2d")

import com.badlogic.gdx.graphics.Color as __Color
__Color = __Color
import java.lang.Boolean as __boolean
try:
    from pygdx.graphics import g2d
except ImportError:
    g2d = __import_once__("pygdx.graphics.g2d")

from builtins import type
import com.badlogic.gdx.scenes.scene2d.Group as __Group
__Group = __Group
import com.badlogic.gdx.math.Vector2 as __Vector2
__Vector2 = __Vector2
import com.badlogic.gdx.math.Rectangle as __Rectangle
__Rectangle = __Rectangle
import java.lang.Class as __Class
__Class = __Class
import com.badlogic.gdx.utils.Array as __Array
__Array = __Array
import java.lang.String as __string
try:
    from pygdx import math
except ImportError:
    math = __import_once__("pygdx.math")

from builtins import bool
import com.badlogic.gdx.scenes.scene2d.ui.Widget as __Widget
__Widget = __Widget
from builtins import str
try:
    from pygdx.scenes.scene2d import utils
except ImportError:
    utils = __import_once__("pygdx.scenes.scene2d.utils")

import com.badlogic.gdx.scenes.scene2d.utils.ArraySelection as __ArraySelection
__ArraySelection = __ArraySelection
try:
    from pygdx import utils
except ImportError:
    utils = __import_once__("pygdx.utils")

from pyquantum_helper import override
import java.lang.Object as __object
from builtins import float
import com.badlogic.gdx.scenes.scene2d.ui.List as __List_ListStyle
__ListStyle = __List_ListStyle.ListStyle
import com.badlogic.gdx.scenes.scene2d.ui.List as __List
__List = __List
import com.badlogic.gdx.scenes.scene2d.InputListener as __InputListener
__InputListener = __InputListener
from builtins import object
import com.badlogic.gdx.utils.DelayedRemovalArray as __DelayedRemovalArray
__DelayedRemovalArray = __DelayedRemovalArray
import java.lang.Long as __long
import java.lang.Float as __float
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
try:
    from pygdx.graphics import glutils
except ImportError:
    glutils = __import_once__("pygdx.graphics.glutils")

import com.badlogic.gdx.scenes.scene2d.Actor as __Actor
__Actor = __Actor
import java.lang.Integer as __int
import com.badlogic.gdx.scenes.scene2d.Stage as __Stage
__Stage = __Stage
try:
    from pygdx import graphics
except ImportError:
    graphics = __import_once__("pygdx.graphics")

from builtins import int
 
class List(__Widget, Widget, scene2d.__Cullable, utils.Cullable):
    """com.badlogic.gdx.scenes.scene2d.ui.List"""
 
    @staticmethod
    def __wrap(java_value: __List) -> 'List':
        return List(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __List):
        """
        Dynamic initializer for List.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def getOverItem(self) -> object:
        """public T com.badlogic.gdx.scenes.scene2d.ui.List.getOverItem()"""
        return object.__wrap(super(List, self).getOverItem())

    @override
    @overload
    def getY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getY()"""
        return float.__wrap(super(scene2d.Actor, self).getY())

    @overload
    def toString(self, arg0: object) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.ui.List.toString(T)"""
        return str.__wrap(super(__List, self).toString(arg0))

    @overload
    def getSelection(self) -> 'utils.ArraySelection':
        """public com.badlogic.gdx.scenes.scene2d.utils.ArraySelection<T> com.badlogic.gdx.scenes.scene2d.ui.List.getSelection()"""
        return 'utils.ArraySelection'.__wrap(super(List, self).getSelection())

    @overload
    def getItems(self) -> 'utils.Array':
        """public com.badlogic.gdx.utils.Array<T> com.badlogic.gdx.scenes.scene2d.ui.List.getItems()"""
        return 'utils.Array'.__wrap(super(List, self).getItems())

    @overload
    def setZIndex(self, arg0: int) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.setZIndex(int)"""
        return bool.__wrap(super(__scene2d.Actor, self).setZIndex(__int.valueOf(arg0)))

    @override
    @overload
    def setBounds(self, arg0: float, arg1: float, arg2: float, arg3: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setBounds(float,float,float,float)"""
        super(__scene2d.Actor, self).setBounds(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def needsLayout(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Widget.needsLayout()"""
        return bool.__wrap(super(Widget, self).needsLayout())

    @overload
    def getX(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getX(int)"""
        return float.__wrap(super(__scene2d.Actor, self).getX(__int.valueOf(arg0)))

    @override
    @overload
    def sizeBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.sizeBy(float)"""
        super(__scene2d.Actor, self).sizeBy(__float.valueOf(arg0))

    @override
    @overload
    def sizeBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.sizeBy(float,float)"""
        super(__scene2d.Actor, self).sizeBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def hasActions(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasActions()"""
        return bool.__wrap(super(scene2d.Actor, self).hasActions())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0))

    @override
    @overload
    def setScaleX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScaleX(float)"""
        super(__scene2d.Actor, self).setScaleX(__float.valueOf(arg0))

    @overload
    def setAlignment(self, arg0: int):
        """public void com.badlogic.gdx.scenes.scene2d.ui.List.setAlignment(int)"""
        super(__List, self).setAlignment(__int.valueOf(arg0))

    @overload
    def setSelectedIndex(self, arg0: int):
        """public void com.badlogic.gdx.scenes.scene2d.ui.List.setSelectedIndex(int)"""
        super(__List, self).setSelectedIndex(__int.valueOf(arg0))

    @override
    @overload
    def getTouchable(self) -> 'scene2d.Touchable':
        """public com.badlogic.gdx.scenes.scene2d.Touchable com.badlogic.gdx.scenes.scene2d.Actor.getTouchable()"""
        return 'scene2d.Touchable'.__wrap(super(scene2d.Actor, self).getTouchable())

    @override
    @overload
    def removeAction(self, arg0: 'Action'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.removeAction(com.badlogic.gdx.scenes.scene2d.Action)"""
        super(__scene2d.Actor, self).removeAction(arg0)

    @overload
    def getPressedItem(self) -> object:
        """public T com.badlogic.gdx.scenes.scene2d.ui.List.getPressedItem()"""
        return object.__wrap(super(List, self).getPressedItem())

    @override
    @overload
    def getX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getX()"""
        return float.__wrap(super(scene2d.Actor, self).getX())

    @override
    @overload
    def draw(self, arg0: 'Batch', arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.List.draw(com.badlogic.gdx.graphics.g2d.Batch,float)"""
        super(__List, self).draw(arg0, __float.valueOf(arg1))

    @overload
    def setStyle(self, arg0: 'ListStyle'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.List.setStyle(com.badlogic.gdx.scenes.scene2d.ui.List$ListStyle)"""
        super(__List, self).setStyle(arg0)

    @override
    @overload
    def getMaxWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Widget.getMaxWidth()"""
        return float.__wrap(super(Widget, self).getMaxWidth())

    @override
    @overload
    def layout(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.List.layout()"""
        super(List, self).layout()

    @override
    @overload
    def toBack(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.toBack()"""
        super(scene2d.Actor, self).toBack()

    @override
    @overload
    def setDebug(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setDebug(boolean)"""
        super(__scene2d.Actor, self).setDebug(__boolean.valueOf(arg0))

    @overload
    def setSelection(self, arg0: 'ArraySelection'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.List.setSelection(com.badlogic.gdx.scenes.scene2d.utils.ArraySelection<T>)"""
        super(__List, self).setSelection(arg0)

    @override
    @overload
    def setX(self, arg0: float, arg1: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setX(float,int)"""
        super(__scene2d.Actor, self).setX(__float.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def screenToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.screenToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).screenToLocalCoordinates(arg0))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def ancestorsVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.ancestorsVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).ancestorsVisible())

    @override
    @overload
    def getListeners(self) -> 'utils.DelayedRemovalArray':
        """public com.badlogic.gdx.utils.DelayedRemovalArray<com.badlogic.gdx.scenes.scene2d.EventListener> com.badlogic.gdx.scenes.scene2d.Actor.getListeners()"""
        return 'utils.DelayedRemovalArray'.__wrap(super(scene2d.Actor, self).getListeners())

    @overload
    def __init__(self, arg0: 'ListStyle'):
        """public com.badlogic.gdx.scenes.scene2d.ui.List(com.badlogic.gdx.scenes.scene2d.ui.List$ListStyle)"""
        val = __List(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def setFillParent(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.setFillParent(boolean)"""
        super(__Widget, self).setFillParent(__boolean.valueOf(arg0))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def __init__(self, arg0: 'Skin', arg1: str):
        """public com.badlogic.gdx.scenes.scene2d.ui.List(com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String)"""
        val = __List(arg0, arg1)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def removeListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.removeListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).removeListener(arg0))

    @override
    @overload
    def isTouchFocusListener(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchFocusListener()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchFocusListener())

    @overload
    def localToStageCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToStageCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToStageCoordinates(arg0))

    @override
    @overload
    def setSize(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setSize(float,float)"""
        super(__scene2d.Actor, self).setSize(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def getZIndex(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.Actor.getZIndex()"""
        return int.__wrap(super(scene2d.Actor, self).getZIndex())

    @override
    @overload
    def clipBegin(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.clipBegin()"""
        return bool.__wrap(super(scene2d.Actor, self).clipBegin())

    @override
    @overload
    def invalidateHierarchy(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.invalidateHierarchy()"""
        super(Widget, self).invalidateHierarchy()

    @override
    @overload
    def moveBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.moveBy(float,float)"""
        super(__scene2d.Actor, self).moveBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def getY(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getY(int)"""
        return float.__wrap(super(__scene2d.Actor, self).getY(__int.valueOf(arg0)))

    @override
    @overload
    def setOrigin(self, arg0: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOrigin(int)"""
        super(__scene2d.Actor, self).setOrigin(__int.valueOf(arg0))

    @overload
    def isDescendantOf(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isDescendantOf(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Actor, self).isDescendantOf(arg0))

    @override
    @overload
    def getParent(self) -> 'scene2d.Group':
        """public com.badlogic.gdx.scenes.scene2d.Group com.badlogic.gdx.scenes.scene2d.Actor.getParent()"""
        return 'scene2d.Group'.__wrap(super(scene2d.Actor, self).getParent())

    @override
    @overload
    def clearListeners(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clearListeners()"""
        super(scene2d.Actor, self).clearListeners()

    @overload
    def localToActorCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToActorCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToActorCoordinates(arg0, arg1))

    @override
    @overload
    def setName(self, arg0: str):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setName(java.lang.String)"""
        super(__scene2d.Actor, self).setName(arg0)

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @override
    @overload
    def setLayoutEnabled(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.setLayoutEnabled(boolean)"""
        super(__Widget, self).setLayoutEnabled(__boolean.valueOf(arg0))

    @override
    @overload
    def setOriginX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOriginX(float)"""
        super(__scene2d.Actor, self).setOriginX(__float.valueOf(arg0))

    @overload
    def getCullingArea(self) -> 'math.Rectangle':
        """public com.badlogic.gdx.math.Rectangle com.badlogic.gdx.scenes.scene2d.ui.List.getCullingArea()"""
        return 'math.Rectangle'.__wrap(super(List, self).getCullingArea())

    @override
    @overload
    def getHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getHeight()"""
        return float.__wrap(super(scene2d.Actor, self).getHeight())

    @overload
    def getItemIndexAt(self, arg0: float) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.ui.List.getItemIndexAt(float)"""
        return int.__wrap(super(__List, self).getItemIndexAt(__float.valueOf(arg0)))

    @override
    @overload
    def validate(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.validate()"""
        super(Widget, self).validate()

    @override
    @overload
    def hasKeyboardFocus(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasKeyboardFocus()"""
        return bool.__wrap(super(scene2d.Actor, self).hasKeyboardFocus())

    @override
    @overload
    def getOriginY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getOriginY()"""
        return float.__wrap(super(scene2d.Actor, self).getOriginY())

    @override
    @overload
    def clipEnd(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clipEnd()"""
        super(scene2d.Actor, self).clipEnd()

    @override
    @overload
    def getUserObject(self) -> object:
        """public java.lang.Object com.badlogic.gdx.scenes.scene2d.Actor.getUserObject()"""
        return object.__wrap(super(scene2d.Actor, self).getUserObject())

    @override
    @overload
    def pack(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.pack()"""
        super(Widget, self).pack()

    @override
    @overload
    def getDebug(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.getDebug()"""
        return bool.__wrap(super(scene2d.Actor, self).getDebug())

    @override
    @overload
    def setHeight(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setHeight(float)"""
        super(__scene2d.Actor, self).setHeight(__float.valueOf(arg0))

    @override
    @overload
    def setScale(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScale(float)"""
        super(__scene2d.Actor, self).setScale(__float.valueOf(arg0))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getPrefWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.List.getPrefWidth()"""
        return float.__wrap(super(List, self).getPrefWidth())

    @override
    @overload
    def rotateBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.rotateBy(float)"""
        super(__scene2d.Actor, self).rotateBy(__float.valueOf(arg0))

    @override
    @overload
    def getMinHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Widget.getMinHeight()"""
        return float.__wrap(super(Widget, self).getMinHeight())

    @override
    @overload
    def setScale(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScale(float,float)"""
        super(__scene2d.Actor, self).setScale(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def getKeyListener(self) -> 'scene2d.InputListener':
        """public com.badlogic.gdx.scenes.scene2d.InputListener com.badlogic.gdx.scenes.scene2d.ui.List.getKeyListener()"""
        return 'scene2d.InputListener'.__wrap(super(List, self).getKeyListener())

    @overload
    def addListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.addListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).addListener(arg0))

    @overload
    def __init__(self, arg0: 'Skin'):
        """public com.badlogic.gdx.scenes.scene2d.ui.List(com.badlogic.gdx.scenes.scene2d.ui.Skin)"""
        val = __List(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def parentToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.parentToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).parentToLocalCoordinates(arg0))

    @overload
    def getItemHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.List.getItemHeight()"""
        return float.__wrap(super(List, self).getItemHeight())

    @override
    @overload
    def getRotation(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getRotation()"""
        return float.__wrap(super(scene2d.Actor, self).getRotation())

    @override
    @overload
    def setVisible(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setVisible(boolean)"""
        super(__scene2d.Actor, self).setVisible(__boolean.valueOf(arg0))

    @override
    @overload
    def setY(self, arg0: float, arg1: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setY(float,int)"""
        super(__scene2d.Actor, self).setY(__float.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def clearItems(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.List.clearItems()"""
        super(List, self).clearItems()

    @override
    @overload
    def setX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setX(float)"""
        super(__scene2d.Actor, self).setX(__float.valueOf(arg0))

    @overload
    def setItems(self, arg0: 'Array'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.List.setItems(com.badlogic.gdx.utils.Array)"""
        super(__List, self).setItems(arg0)

    @override
    @overload
    def invalidate(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.invalidate()"""
        super(Widget, self).invalidate()

    @override
    @overload
    def setOrigin(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOrigin(float,float)"""
        super(__scene2d.Actor, self).setOrigin(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def getRight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getRight()"""
        return float.__wrap(super(scene2d.Actor, self).getRight())

    @overload
    def isAscendantOf(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isAscendantOf(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Actor, self).isAscendantOf(arg0))

    @override
    @overload
    def setWidth(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setWidth(float)"""
        super(__scene2d.Actor, self).setWidth(__float.valueOf(arg0))

    @override
    @overload
    def isTouchFocusTarget(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchFocusTarget()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchFocusTarget())

    @overload
    def getStyle(self) -> 'ListStyle':
        """public com.badlogic.gdx.scenes.scene2d.ui.List$ListStyle com.badlogic.gdx.scenes.scene2d.ui.List.getStyle()"""
        return 'ListStyle'.__wrap(super(List, self).getStyle())

    @override
    @overload
    def hasParent(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasParent()"""
        return bool.__wrap(super(scene2d.Actor, self).hasParent())

    @override
    @overload
    def setPosition(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setPosition(float,float)"""
        super(__scene2d.Actor, self).setPosition(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def getItemAt(self, arg0: float) -> object:
        """public T com.badlogic.gdx.scenes.scene2d.ui.List.getItemAt(float)"""
        return object.__wrap(super(__List, self).getItemAt(__float.valueOf(arg0)))

    @overload
    def getAlignment(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.ui.List.getAlignment()"""
        return int.__wrap(super(List, self).getAlignment())

    @override
    @overload
    def getScaleY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getScaleY()"""
        return float.__wrap(super(scene2d.Actor, self).getScaleY())

    @override
    @overload
    def getWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getWidth()"""
        return float.__wrap(super(scene2d.Actor, self).getWidth())

    @override
    @overload
    def setCullingArea(self, arg0: 'Rectangle'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.List.setCullingArea(com.badlogic.gdx.math.Rectangle)"""
        super(__List, self).setCullingArea(arg0)

    @override
    @overload
    def setOriginY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOriginY(float)"""
        super(__scene2d.Actor, self).setOriginY(__float.valueOf(arg0))

    @override
    @overload
    def setPosition(self, arg0: float, arg1: float, arg2: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setPosition(float,float,int)"""
        super(__scene2d.Actor, self).setPosition(__float.valueOf(arg0), __float.valueOf(arg1), __int.valueOf(arg2))

    @overload
    def removeCaptureListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.removeCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).removeCaptureListener(arg0))

    @override
    @overload
    def setColor(self, arg0: 'Color'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setColor(com.badlogic.gdx.graphics.Color)"""
        super(__scene2d.Actor, self).setColor(arg0)

    @overload
    def localToScreenCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToScreenCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToScreenCoordinates(arg0))

    @override
    @overload
    def drawDebug(self, arg0: 'ShapeRenderer'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.drawDebug(com.badlogic.gdx.graphics.glutils.ShapeRenderer)"""
        super(__scene2d.Actor, self).drawDebug(arg0)

    @override
    @overload
    def setTouchable(self, arg0: 'Touchable'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setTouchable(com.badlogic.gdx.scenes.scene2d.Touchable)"""
        super(__scene2d.Actor, self).setTouchable(arg0)

    @overload
    def addCaptureListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.addCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).addCaptureListener(arg0))

    @overload
    def fire(self, arg0: 'Event') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.fire(com.badlogic.gdx.scenes.scene2d.Event)"""
        return bool.__wrap(super(__scene2d.Actor, self).fire(arg0))

    @override
    @overload
    def getMaxHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Widget.getMaxHeight()"""
        return float.__wrap(super(Widget, self).getMaxHeight())

    @override
    @overload
    def remove(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.remove()"""
        return bool.__wrap(super(scene2d.Actor, self).remove())

    @overload
    def hit(self, arg0: float, arg1: float, arg2: bool) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.Actor.hit(float,float,boolean)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Actor, self).hit(__float.valueOf(arg0), __float.valueOf(arg1), __boolean.valueOf(arg2)))

    @overload
    def localToParentCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToParentCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToParentCoordinates(arg0))

    @override
    @overload
    def clear(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clear()"""
        super(scene2d.Actor, self).clear()

    @override
    @overload
    def getPrefHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.List.getPrefHeight()"""
        return float.__wrap(super(List, self).getPrefHeight())

    @override
    @overload
    def getName(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.Actor.getName()"""
        return str.__wrap(super(scene2d.Actor, self).getName())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.Actor.toString()"""
        return str.__wrap(super(scene2d.Actor, self).toString())

    @override
    @overload
    def isVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).isVisible())

    @overload
    def setSelected(self, arg0: object):
        """public void com.badlogic.gdx.scenes.scene2d.ui.List.setSelected(T)"""
        super(__List, self).setSelected(arg0)

    @override
    @overload
    def getCaptureListeners(self) -> 'utils.DelayedRemovalArray':
        """public com.badlogic.gdx.utils.DelayedRemovalArray<com.badlogic.gdx.scenes.scene2d.EventListener> com.badlogic.gdx.scenes.scene2d.Actor.getCaptureListeners()"""
        return 'utils.DelayedRemovalArray'.__wrap(super(scene2d.Actor, self).getCaptureListeners())

    @override
    @overload
    def debug(self) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.Actor.debug()"""
        return 'scene2d.Actor'.__wrap(super(scene2d.Actor, self).debug())

    @override
    @overload
    def getTop(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getTop()"""
        return float.__wrap(super(scene2d.Actor, self).getTop())

    @override
    @overload
    def setY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setY(float)"""
        super(__scene2d.Actor, self).setY(__float.valueOf(arg0))

    @override
    @overload
    def getMinWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Widget.getMinWidth()"""
        return float.__wrap(super(Widget, self).getMinWidth())

    @override
    @overload
    def clearActions(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clearActions()"""
        super(scene2d.Actor, self).clearActions()

    @overload
    def setItems(self, *arg0: object):
        """public void com.badlogic.gdx.scenes.scene2d.ui.List.setItems(T...)"""
        super(__List, self).setItems(arg0)

    @override
    @overload
    def scaleBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.scaleBy(float,float)"""
        super(__scene2d.Actor, self).scaleBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def setRotation(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setRotation(float)"""
        super(__scene2d.Actor, self).setRotation(__float.valueOf(arg0))

    @override
    @overload
    def getScaleX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getScaleX()"""
        return float.__wrap(super(scene2d.Actor, self).getScaleX())

    @overload
    def getSelected(self) -> object:
        """public T com.badlogic.gdx.scenes.scene2d.ui.List.getSelected()"""
        return object.__wrap(super(List, self).getSelected())

    @overload
    def firstAscendant(self, arg0: 'Class') -> 'scene2d.Actor':
        """public <T extends com.badlogic.gdx.scenes.scene2d.Actor> T com.badlogic.gdx.scenes.scene2d.Actor.firstAscendant(java.lang.Class<T>)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Actor, self).firstAscendant(arg0))

    @overload
    def notify(self, arg0: 'Event', arg1: bool) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.notify(com.badlogic.gdx.scenes.scene2d.Event,boolean)"""
        return bool.__wrap(super(__scene2d.Actor, self).notify(arg0, __boolean.valueOf(arg1)))

    @override
    @overload
    def act(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.act(float)"""
        super(__scene2d.Actor, self).act(__float.valueOf(arg0))

    @override
    @overload
    def setUserObject(self, arg0: object):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setUserObject(java.lang.Object)"""
        super(__scene2d.Actor, self).setUserObject(arg0)

    @override
    @overload
    def setScaleY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScaleY(float)"""
        super(__scene2d.Actor, self).setScaleY(__float.valueOf(arg0))

    @override
    @overload
    def hasScrollFocus(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasScrollFocus()"""
        return bool.__wrap(super(scene2d.Actor, self).hasScrollFocus())

    @override
    @overload
    def toFront(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.toFront()"""
        super(scene2d.Actor, self).toFront()

    @override
    @overload
    def scaleBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.scaleBy(float)"""
        super(__scene2d.Actor, self).scaleBy(__float.valueOf(arg0))

    @overload
    def stageToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.stageToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).stageToLocalCoordinates(arg0))

    @override
    @overload
    def getOriginX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getOriginX()"""
        return float.__wrap(super(scene2d.Actor, self).getOriginX())

    @override
    @overload
    def ascendantsVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.ascendantsVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).ascendantsVisible())

    @overload
    def setTypeToSelect(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.List.setTypeToSelect(boolean)"""
        super(__List, self).setTypeToSelect(__boolean.valueOf(arg0))

    @overload
    def getSelectedIndex(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.ui.List.getSelectedIndex()"""
        return int.__wrap(super(List, self).getSelectedIndex())

    @override
    @overload
    def getColor(self) -> 'graphics.Color':
        """public com.badlogic.gdx.graphics.Color com.badlogic.gdx.scenes.scene2d.Actor.getColor()"""
        return 'graphics.Color'.__wrap(super(scene2d.Actor, self).getColor())

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @override
    @overload
    def getStage(self) -> 'scene2d.Stage':
        """public com.badlogic.gdx.scenes.scene2d.Stage com.badlogic.gdx.scenes.scene2d.Actor.getStage()"""
        return 'scene2d.Stage'.__wrap(super(scene2d.Actor, self).getStage())

    @override
    @overload
    def addAction(self, arg0: 'Action'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.addAction(com.badlogic.gdx.scenes.scene2d.Action)"""
        super(__scene2d.Actor, self).addAction(arg0)

    @override
    @overload
    def setColor(self, arg0: float, arg1: float, arg2: float, arg3: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setColor(float,float,float,float)"""
        super(__scene2d.Actor, self).setColor(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3))

    @override
    @overload
    def isTouchable(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchable()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchable())

    @overload
    def localToAscendantCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToAscendantCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToAscendantCoordinates(arg0, arg1))

    @overload
    def clipBegin(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.clipBegin(float,float,float,float)"""
        return bool.__wrap(super(__scene2d.Actor, self).clipBegin(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3)))

    @override
    @overload
    def getActions(self) -> 'utils.Array':
        """public com.badlogic.gdx.utils.Array<com.badlogic.gdx.scenes.scene2d.Action> com.badlogic.gdx.scenes.scene2d.Actor.getActions()"""
        return 'utils.Array'.__wrap(super(scene2d.Actor, self).getActions()) 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.TextButton$TextButtonStyle
from pyquantum_helper import import_once as __import_once__
from builtins import str
try:
    from pygdx.scenes.scene2d import utils
except ImportError:
    utils = __import_once__("pygdx.scenes.scene2d.utils")

from pyquantum_helper import override
import java.lang.Object as __object
try:
    from pygdx.graphics import g2d
except ImportError:
    g2d = __import_once__("pygdx.graphics.g2d")

from builtins import type
import com.badlogic.gdx.scenes.scene2d.ui.TextButton as __TextButton_TextButtonStyle
__TextButtonStyle = __TextButton_TextButtonStyle.TextButtonStyle
import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import java.lang.Integer as __int
from builtins import bool
from builtins import int
 
class TextButtonStyle(__ButtonStyle, ButtonStyle):
    """com.badlogic.gdx.scenes.scene2d.ui.TextButton.TextButtonStyle"""
 
    @staticmethod
    def __wrap(java_value: __TextButtonStyle) -> 'TextButtonStyle':
        return TextButtonStyle(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __TextButtonStyle):
        """
        Dynamic initializer for TextButtonStyle.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.lang.Object.toString()"""
        return str.__wrap(super(object, self).toString())

    @overload
    def __init__(self):
        """public com.badlogic.gdx.scenes.scene2d.ui.TextButton$TextButtonStyle()"""
        val = __TextButtonStyle()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def __init__(self, arg0: 'TextButtonStyle'):
        """public com.badlogic.gdx.scenes.scene2d.ui.TextButton$TextButtonStyle(com.badlogic.gdx.scenes.scene2d.ui.TextButton$TextButtonStyle)"""
        val = __TextButtonStyle(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def __init__(self, ):
        """public com.badlogic.gdx.scenes.scene2d.ui.TextButton$TextButtonStyle()"""
        val = __TextButtonStyle()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def __init__(self, arg0: 'Drawable', arg1: 'Drawable', arg2: 'Drawable', arg3: 'BitmapFont'):
        """public com.badlogic.gdx.scenes.scene2d.ui.TextButton$TextButtonStyle(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.graphics.g2d.BitmapFont)"""
        val = __TextButtonStyle(arg0, arg1, arg2, arg3)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0)) 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.TextField$OnscreenKeyboard
import com.badlogic.gdx.scenes.scene2d.ui.TextField as __TextField_OnscreenKeyboard
__OnscreenKeyboard = __TextField_OnscreenKeyboard.OnscreenKeyboard
from abc import abstractmethod, ABC
 
class OnscreenKeyboard(ABC):
    """com.badlogic.gdx.scenes.scene2d.ui.TextField.OnscreenKeyboard"""
 
    @staticmethod
    def __wrap(java_value: __OnscreenKeyboard) -> 'OnscreenKeyboard':
        return OnscreenKeyboard(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __OnscreenKeyboard):
        """
        Dynamic initializer for OnscreenKeyboard.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @abstractmethod
    def show(self, arg0: bool):
        """public abstract void com.badlogic.gdx.scenes.scene2d.ui.TextField$OnscreenKeyboard.show(boolean)"""
        pass 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.Skin$TintedDrawable
from builtins import str
import java.lang.Long as __long
import com.badlogic.gdx.scenes.scene2d.ui.Skin as __Skin_TintedDrawable
__TintedDrawable = __Skin_TintedDrawable.TintedDrawable
from pyquantum_helper import override
import java.lang.Class as __Class
__Class = __Class
import java.lang.Object as __object
import java.lang.String as __String
__String = __String
from builtins import type
import java.lang.Object as __Object
__Object = __Object
import java.lang.Integer as __int
from builtins import bool
from builtins import int
 
class TintedDrawable():
    """com.badlogic.gdx.scenes.scene2d.ui.Skin.TintedDrawable"""
 
    @staticmethod
    def __wrap(java_value: __TintedDrawable) -> 'TintedDrawable':
        return TintedDrawable(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __TintedDrawable):
        """
        Dynamic initializer for TintedDrawable.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def __init__(self):
        """public com.badlogic.gdx.scenes.scene2d.ui.Skin$TintedDrawable()"""
        val = __TintedDrawable()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def __init__(self, ):
        """public com.badlogic.gdx.scenes.scene2d.ui.Skin$TintedDrawable()"""
        val = __TintedDrawable()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.lang.Object.toString()"""
        return str.__wrap(super(object, self).toString())

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0)) 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.ProgressBar$ProgressBarStyle
from pyquantum_helper import import_once as __import_once__
from builtins import str
try:
    from pygdx.scenes.scene2d import utils
except ImportError:
    utils = __import_once__("pygdx.scenes.scene2d.utils")

from pyquantum_helper import override
import java.lang.Object as __object
from builtins import type
import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import java.lang.Integer as __int
from builtins import bool
import com.badlogic.gdx.scenes.scene2d.ui.ProgressBar as __ProgressBar_ProgressBarStyle
__ProgressBarStyle = __ProgressBar_ProgressBarStyle.ProgressBarStyle
from builtins import int
 
class ProgressBarStyle():
    """com.badlogic.gdx.scenes.scene2d.ui.ProgressBar.ProgressBarStyle"""
 
    @staticmethod
    def __wrap(java_value: __ProgressBarStyle) -> 'ProgressBarStyle':
        return ProgressBarStyle(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __ProgressBarStyle):
        """
        Dynamic initializer for ProgressBarStyle.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def __init__(self, ):
        """public com.badlogic.gdx.scenes.scene2d.ui.ProgressBar$ProgressBarStyle()"""
        val = __ProgressBarStyle()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def __init__(self, arg0: 'ProgressBarStyle'):
        """public com.badlogic.gdx.scenes.scene2d.ui.ProgressBar$ProgressBarStyle(com.badlogic.gdx.scenes.scene2d.ui.ProgressBar$ProgressBarStyle)"""
        val = __ProgressBarStyle(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.lang.Object.toString()"""
        return str.__wrap(super(object, self).toString())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def __init__(self):
        """public com.badlogic.gdx.scenes.scene2d.ui.ProgressBar$ProgressBarStyle()"""
        val = __ProgressBarStyle()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def __init__(self, arg0: 'Drawable', arg1: 'Drawable'):
        """public com.badlogic.gdx.scenes.scene2d.ui.ProgressBar$ProgressBarStyle(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable)"""
        val = __ProgressBarStyle(arg0, arg1)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0)) 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.SelectBox
from pyquantum_helper import import_once as __import_once__
import com.badlogic.gdx.scenes.scene2d.Touchable as __Touchable
__Touchable = __Touchable
try:
    from pygdx.scenes import scene2d
except ImportError:
    scene2d = __import_once__("pygdx.scenes.scene2d")

import com.badlogic.gdx.graphics.Color as __Color
__Color = __Color
import com.badlogic.gdx.scenes.scene2d.ui.SelectBox as __SelectBox
__SelectBox = __SelectBox
import java.lang.Boolean as __boolean
try:
    from pygdx.graphics import g2d
except ImportError:
    g2d = __import_once__("pygdx.graphics.g2d")

from builtins import type
import com.badlogic.gdx.scenes.scene2d.Group as __Group
__Group = __Group
import com.badlogic.gdx.scenes.scene2d.ui.SelectBox as __SelectBox_SelectBoxScrollPane
__SelectBoxScrollPane = __SelectBox_SelectBoxScrollPane.SelectBoxScrollPane
import com.badlogic.gdx.math.Vector2 as __Vector2
__Vector2 = __Vector2
import java.lang.Class as __Class
__Class = __Class
import com.badlogic.gdx.utils.Array as __Array
__Array = __Array
import java.lang.String as __string
try:
    from pygdx import math
except ImportError:
    math = __import_once__("pygdx.math")

from builtins import bool
import com.badlogic.gdx.scenes.scene2d.ui.Widget as __Widget
__Widget = __Widget
import com.badlogic.gdx.scenes.scene2d.ui.SelectBox as __SelectBox_SelectBoxStyle
__SelectBoxStyle = __SelectBox_SelectBoxStyle.SelectBoxStyle
from builtins import str
try:
    from pygdx.scenes.scene2d import utils
except ImportError:
    utils = __import_once__("pygdx.scenes.scene2d.utils")

import com.badlogic.gdx.scenes.scene2d.utils.ArraySelection as __ArraySelection
__ArraySelection = __ArraySelection
try:
    from pygdx import utils
except ImportError:
    utils = __import_once__("pygdx.utils")

from pyquantum_helper import override
import java.lang.Object as __object
from builtins import float
import com.badlogic.gdx.scenes.scene2d.ui.List as __List
__List = __List
from builtins import object
import com.badlogic.gdx.scenes.scene2d.utils.ClickListener as __ClickListener
__ClickListener = __ClickListener
import com.badlogic.gdx.utils.DelayedRemovalArray as __DelayedRemovalArray
__DelayedRemovalArray = __DelayedRemovalArray
import java.lang.Long as __long
import java.lang.Float as __float
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
try:
    from pygdx.graphics import glutils
except ImportError:
    glutils = __import_once__("pygdx.graphics.glutils")

import com.badlogic.gdx.scenes.scene2d.Actor as __Actor
__Actor = __Actor
import java.lang.Integer as __int
import com.badlogic.gdx.scenes.scene2d.Stage as __Stage
__Stage = __Stage
try:
    from pygdx import graphics
except ImportError:
    graphics = __import_once__("pygdx.graphics")

from builtins import int
 
class SelectBox(__Widget, Widget, scene2d.__Disableable, utils.Disableable):
    """com.badlogic.gdx.scenes.scene2d.ui.SelectBox"""
 
    @staticmethod
    def __wrap(java_value: __SelectBox) -> 'SelectBox':
        return SelectBox(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __SelectBox):
        """
        Dynamic initializer for SelectBox.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def hideList(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.SelectBox.hideList()"""
        super(SelectBox, self).hideList()

    @override
    @overload
    def getY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getY()"""
        return float.__wrap(super(scene2d.Actor, self).getY())

    @overload
    def showScrollPane(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.SelectBox.showScrollPane()"""
        super(SelectBox, self).showScrollPane()

    @overload
    def getMaxListCount(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.ui.SelectBox.getMaxListCount()"""
        return int.__wrap(super(SelectBox, self).getMaxListCount())

    @overload
    def setZIndex(self, arg0: int) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.setZIndex(int)"""
        return bool.__wrap(super(__scene2d.Actor, self).setZIndex(__int.valueOf(arg0)))

    @override
    @overload
    def setBounds(self, arg0: float, arg1: float, arg2: float, arg3: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setBounds(float,float,float,float)"""
        super(__scene2d.Actor, self).setBounds(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def needsLayout(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Widget.needsLayout()"""
        return bool.__wrap(super(Widget, self).needsLayout())

    @overload
    def hideScrollPane(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.SelectBox.hideScrollPane()"""
        super(SelectBox, self).hideScrollPane()

    @overload
    def getX(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getX(int)"""
        return float.__wrap(super(__scene2d.Actor, self).getX(__int.valueOf(arg0)))

    @override
    @overload
    def sizeBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.sizeBy(float)"""
        super(__scene2d.Actor, self).sizeBy(__float.valueOf(arg0))

    @override
    @overload
    def draw(self, arg0: 'Batch', arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.SelectBox.draw(com.badlogic.gdx.graphics.g2d.Batch,float)"""
        super(__SelectBox, self).draw(arg0, __float.valueOf(arg1))

    @override
    @overload
    def sizeBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.sizeBy(float,float)"""
        super(__scene2d.Actor, self).sizeBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def layout(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.SelectBox.layout()"""
        super(SelectBox, self).layout()

    @override
    @overload
    def hasActions(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasActions()"""
        return bool.__wrap(super(scene2d.Actor, self).hasActions())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0))

    @override
    @overload
    def setScaleX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScaleX(float)"""
        super(__scene2d.Actor, self).setScaleX(__float.valueOf(arg0))

    @override
    @overload
    def getTouchable(self) -> 'scene2d.Touchable':
        """public com.badlogic.gdx.scenes.scene2d.Touchable com.badlogic.gdx.scenes.scene2d.Actor.getTouchable()"""
        return 'scene2d.Touchable'.__wrap(super(scene2d.Actor, self).getTouchable())

    @override
    @overload
    def removeAction(self, arg0: 'Action'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.removeAction(com.badlogic.gdx.scenes.scene2d.Action)"""
        super(__scene2d.Actor, self).removeAction(arg0)

    @override
    @overload
    def getX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getX()"""
        return float.__wrap(super(scene2d.Actor, self).getX())

    @override
    @overload
    def getMaxWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Widget.getMaxWidth()"""
        return float.__wrap(super(Widget, self).getMaxWidth())

    @override
    @overload
    def toBack(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.toBack()"""
        super(scene2d.Actor, self).toBack()

    @overload
    def setSelected(self, arg0: object):
        """public void com.badlogic.gdx.scenes.scene2d.ui.SelectBox.setSelected(T)"""
        super(__SelectBox, self).setSelected(arg0)

    @override
    @overload
    def setDebug(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setDebug(boolean)"""
        super(__scene2d.Actor, self).setDebug(__boolean.valueOf(arg0))

    @override
    @overload
    def isDisabled(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.SelectBox.isDisabled()"""
        return bool.__wrap(super(SelectBox, self).isDisabled())

    @overload
    def setStyle(self, arg0: 'SelectBoxStyle'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.SelectBox.setStyle(com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxStyle)"""
        super(__SelectBox, self).setStyle(arg0)

    @override
    @overload
    def setX(self, arg0: float, arg1: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setX(float,int)"""
        super(__scene2d.Actor, self).setX(__float.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def screenToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.screenToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).screenToLocalCoordinates(arg0))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def ancestorsVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.ancestorsVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).ancestorsVisible())

    @override
    @overload
    def getListeners(self) -> 'utils.DelayedRemovalArray':
        """public com.badlogic.gdx.utils.DelayedRemovalArray<com.badlogic.gdx.scenes.scene2d.EventListener> com.badlogic.gdx.scenes.scene2d.Actor.getListeners()"""
        return 'utils.DelayedRemovalArray'.__wrap(super(scene2d.Actor, self).getListeners())

    @override
    @overload
    def setFillParent(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.setFillParent(boolean)"""
        super(__Widget, self).setFillParent(__boolean.valueOf(arg0))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def removeListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.removeListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).removeListener(arg0))

    @override
    @overload
    def setDisabled(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.SelectBox.setDisabled(boolean)"""
        super(__SelectBox, self).setDisabled(__boolean.valueOf(arg0))

    @override
    @overload
    def isTouchFocusListener(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchFocusListener()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchFocusListener())

    @overload
    def localToStageCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToStageCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToStageCoordinates(arg0))

    @override
    @overload
    def setSize(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setSize(float,float)"""
        super(__scene2d.Actor, self).setSize(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def getZIndex(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.Actor.getZIndex()"""
        return int.__wrap(super(scene2d.Actor, self).getZIndex())

    @override
    @overload
    def clipBegin(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.clipBegin()"""
        return bool.__wrap(super(scene2d.Actor, self).clipBegin())

    @overload
    def setMaxListCount(self, arg0: int):
        """public void com.badlogic.gdx.scenes.scene2d.ui.SelectBox.setMaxListCount(int)"""
        super(__SelectBox, self).setMaxListCount(__int.valueOf(arg0))

    @override
    @overload
    def invalidateHierarchy(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.invalidateHierarchy()"""
        super(Widget, self).invalidateHierarchy()

    @override
    @overload
    def moveBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.moveBy(float,float)"""
        super(__scene2d.Actor, self).moveBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def getY(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getY(int)"""
        return float.__wrap(super(__scene2d.Actor, self).getY(__int.valueOf(arg0)))

    @override
    @overload
    def setOrigin(self, arg0: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOrigin(int)"""
        super(__scene2d.Actor, self).setOrigin(__int.valueOf(arg0))

    @overload
    def isDescendantOf(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isDescendantOf(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Actor, self).isDescendantOf(arg0))

    @override
    @overload
    def getParent(self) -> 'scene2d.Group':
        """public com.badlogic.gdx.scenes.scene2d.Group com.badlogic.gdx.scenes.scene2d.Actor.getParent()"""
        return 'scene2d.Group'.__wrap(super(scene2d.Actor, self).getParent())

    @override
    @overload
    def clearListeners(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clearListeners()"""
        super(scene2d.Actor, self).clearListeners()

    @overload
    def localToActorCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToActorCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToActorCoordinates(arg0, arg1))

    @override
    @overload
    def setName(self, arg0: str):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setName(java.lang.String)"""
        super(__scene2d.Actor, self).setName(arg0)

    @overload
    def setScrollingDisabled(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.SelectBox.setScrollingDisabled(boolean)"""
        super(__SelectBox, self).setScrollingDisabled(__boolean.valueOf(arg0))

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @overload
    def getSelection(self) -> 'utils.ArraySelection':
        """public com.badlogic.gdx.scenes.scene2d.utils.ArraySelection<T> com.badlogic.gdx.scenes.scene2d.ui.SelectBox.getSelection()"""
        return 'utils.ArraySelection'.__wrap(super(SelectBox, self).getSelection())

    @override
    @overload
    def setLayoutEnabled(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.setLayoutEnabled(boolean)"""
        super(__Widget, self).setLayoutEnabled(__boolean.valueOf(arg0))

    @override
    @overload
    def setOriginX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOriginX(float)"""
        super(__scene2d.Actor, self).setOriginX(__float.valueOf(arg0))

    @override
    @overload
    def getHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getHeight()"""
        return float.__wrap(super(scene2d.Actor, self).getHeight())

    @overload
    def clearItems(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.SelectBox.clearItems()"""
        super(SelectBox, self).clearItems()

    @override
    @overload
    def validate(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.validate()"""
        super(Widget, self).validate()

    @override
    @overload
    def hasKeyboardFocus(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasKeyboardFocus()"""
        return bool.__wrap(super(scene2d.Actor, self).hasKeyboardFocus())

    @overload
    def getStyle(self) -> 'SelectBoxStyle':
        """public com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxStyle com.badlogic.gdx.scenes.scene2d.ui.SelectBox.getStyle()"""
        return 'SelectBoxStyle'.__wrap(super(SelectBox, self).getStyle())

    @override
    @overload
    def getOriginY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getOriginY()"""
        return float.__wrap(super(scene2d.Actor, self).getOriginY())

    @override
    @overload
    def clipEnd(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clipEnd()"""
        super(scene2d.Actor, self).clipEnd()

    @overload
    def isOver(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.SelectBox.isOver()"""
        return bool.__wrap(super(SelectBox, self).isOver())

    @override
    @overload
    def getUserObject(self) -> object:
        """public java.lang.Object com.badlogic.gdx.scenes.scene2d.Actor.getUserObject()"""
        return object.__wrap(super(scene2d.Actor, self).getUserObject())

    @overload
    def setSelectedPrefWidth(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.SelectBox.setSelectedPrefWidth(boolean)"""
        super(__SelectBox, self).setSelectedPrefWidth(__boolean.valueOf(arg0))

    @overload
    def setItems(self, arg0: 'Array'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.SelectBox.setItems(com.badlogic.gdx.utils.Array<T>)"""
        super(__SelectBox, self).setItems(arg0)

    @overload
    def showList(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.SelectBox.showList()"""
        super(SelectBox, self).showList()

    @override
    @overload
    def pack(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.pack()"""
        super(Widget, self).pack()

    @override
    @overload
    def getDebug(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.getDebug()"""
        return bool.__wrap(super(scene2d.Actor, self).getDebug())

    @override
    @overload
    def setHeight(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setHeight(float)"""
        super(__scene2d.Actor, self).setHeight(__float.valueOf(arg0))

    @override
    @overload
    def setScale(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScale(float)"""
        super(__scene2d.Actor, self).setScale(__float.valueOf(arg0))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def rotateBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.rotateBy(float)"""
        super(__scene2d.Actor, self).rotateBy(__float.valueOf(arg0))

    @overload
    def getMaxSelectedPrefWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.SelectBox.getMaxSelectedPrefWidth()"""
        return float.__wrap(super(SelectBox, self).getMaxSelectedPrefWidth())

    @override
    @overload
    def getMinHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Widget.getMinHeight()"""
        return float.__wrap(super(Widget, self).getMinHeight())

    @override
    @overload
    def setScale(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScale(float,float)"""
        super(__scene2d.Actor, self).setScale(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def addListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.addListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).addListener(arg0))

    @overload
    def setAlignment(self, arg0: int):
        """public void com.badlogic.gdx.scenes.scene2d.ui.SelectBox.setAlignment(int)"""
        super(__SelectBox, self).setAlignment(__int.valueOf(arg0))

    @overload
    def parentToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.parentToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).parentToLocalCoordinates(arg0))

    @overload
    def getSelectedPrefWidth(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.SelectBox.getSelectedPrefWidth()"""
        return bool.__wrap(super(SelectBox, self).getSelectedPrefWidth())

    @override
    @overload
    def getRotation(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getRotation()"""
        return float.__wrap(super(scene2d.Actor, self).getRotation())

    @override
    @overload
    def setVisible(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setVisible(boolean)"""
        super(__scene2d.Actor, self).setVisible(__boolean.valueOf(arg0))

    @override
    @overload
    def setY(self, arg0: float, arg1: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setY(float,int)"""
        super(__scene2d.Actor, self).setY(__float.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def setX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setX(float)"""
        super(__scene2d.Actor, self).setX(__float.valueOf(arg0))

    @override
    @overload
    def invalidate(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.invalidate()"""
        super(Widget, self).invalidate()

    @override
    @overload
    def setOrigin(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOrigin(float,float)"""
        super(__scene2d.Actor, self).setOrigin(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def getPrefHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.SelectBox.getPrefHeight()"""
        return float.__wrap(super(SelectBox, self).getPrefHeight())

    @override
    @overload
    def getRight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getRight()"""
        return float.__wrap(super(scene2d.Actor, self).getRight())

    @overload
    def __init__(self, arg0: 'SelectBoxStyle'):
        """public com.badlogic.gdx.scenes.scene2d.ui.SelectBox(com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxStyle)"""
        val = __SelectBox(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def isAscendantOf(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isAscendantOf(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Actor, self).isAscendantOf(arg0))

    @override
    @overload
    def setWidth(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setWidth(float)"""
        super(__scene2d.Actor, self).setWidth(__float.valueOf(arg0))

    @override
    @overload
    def isTouchFocusTarget(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchFocusTarget()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchFocusTarget())

    @override
    @overload
    def hasParent(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasParent()"""
        return bool.__wrap(super(scene2d.Actor, self).hasParent())

    @overload
    def __init__(self, arg0: 'Skin', arg1: str):
        """public com.badlogic.gdx.scenes.scene2d.ui.SelectBox(com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String)"""
        val = __SelectBox(arg0, arg1)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def setPosition(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setPosition(float,float)"""
        super(__scene2d.Actor, self).setPosition(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def getSelected(self) -> object:
        """public T com.badlogic.gdx.scenes.scene2d.ui.SelectBox.getSelected()"""
        return object.__wrap(super(SelectBox, self).getSelected())

    @override
    @overload
    def getScaleY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getScaleY()"""
        return float.__wrap(super(scene2d.Actor, self).getScaleY())

    @overload
    def getScrollPane(self) -> 'SelectBoxScrollPane':
        """public com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxScrollPane com.badlogic.gdx.scenes.scene2d.ui.SelectBox.getScrollPane()"""
        return 'SelectBoxScrollPane'.__wrap(super(SelectBox, self).getScrollPane())

    @override
    @overload
    def getWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getWidth()"""
        return float.__wrap(super(scene2d.Actor, self).getWidth())

    @override
    @overload
    def setOriginY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOriginY(float)"""
        super(__scene2d.Actor, self).setOriginY(__float.valueOf(arg0))

    @override
    @overload
    def setPosition(self, arg0: float, arg1: float, arg2: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setPosition(float,float,int)"""
        super(__scene2d.Actor, self).setPosition(__float.valueOf(arg0), __float.valueOf(arg1), __int.valueOf(arg2))

    @overload
    def removeCaptureListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.removeCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).removeCaptureListener(arg0))

    @override
    @overload
    def setColor(self, arg0: 'Color'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setColor(com.badlogic.gdx.graphics.Color)"""
        super(__scene2d.Actor, self).setColor(arg0)

    @overload
    def localToScreenCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToScreenCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToScreenCoordinates(arg0))

    @override
    @overload
    def drawDebug(self, arg0: 'ShapeRenderer'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.drawDebug(com.badlogic.gdx.graphics.glutils.ShapeRenderer)"""
        super(__scene2d.Actor, self).drawDebug(arg0)

    @override
    @overload
    def setTouchable(self, arg0: 'Touchable'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setTouchable(com.badlogic.gdx.scenes.scene2d.Touchable)"""
        super(__scene2d.Actor, self).setTouchable(arg0)

    @overload
    def addCaptureListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.addCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).addCaptureListener(arg0))

    @overload
    def fire(self, arg0: 'Event') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.fire(com.badlogic.gdx.scenes.scene2d.Event)"""
        return bool.__wrap(super(__scene2d.Actor, self).fire(arg0))

    @overload
    def getClickListener(self) -> 'utils.ClickListener':
        """public com.badlogic.gdx.scenes.scene2d.utils.ClickListener com.badlogic.gdx.scenes.scene2d.ui.SelectBox.getClickListener()"""
        return 'utils.ClickListener'.__wrap(super(SelectBox, self).getClickListener())

    @override
    @overload
    def getMaxHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Widget.getMaxHeight()"""
        return float.__wrap(super(Widget, self).getMaxHeight())

    @overload
    def getList(self) -> 'List':
        """public com.badlogic.gdx.scenes.scene2d.ui.List<T> com.badlogic.gdx.scenes.scene2d.ui.SelectBox.getList()"""
        return 'List'.__wrap(super(SelectBox, self).getList())

    @override
    @overload
    def remove(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.remove()"""
        return bool.__wrap(super(scene2d.Actor, self).remove())

    @overload
    def hit(self, arg0: float, arg1: float, arg2: bool) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.Actor.hit(float,float,boolean)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Actor, self).hit(__float.valueOf(arg0), __float.valueOf(arg1), __boolean.valueOf(arg2)))

    @overload
    def localToParentCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToParentCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToParentCoordinates(arg0))

    @override
    @overload
    def clear(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clear()"""
        super(scene2d.Actor, self).clear()

    @override
    @overload
    def getName(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.Actor.getName()"""
        return str.__wrap(super(scene2d.Actor, self).getName())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.Actor.toString()"""
        return str.__wrap(super(scene2d.Actor, self).toString())

    @override
    @overload
    def isVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).isVisible())

    @override
    @overload
    def getCaptureListeners(self) -> 'utils.DelayedRemovalArray':
        """public com.badlogic.gdx.utils.DelayedRemovalArray<com.badlogic.gdx.scenes.scene2d.EventListener> com.badlogic.gdx.scenes.scene2d.Actor.getCaptureListeners()"""
        return 'utils.DelayedRemovalArray'.__wrap(super(scene2d.Actor, self).getCaptureListeners())

    @override
    @overload
    def debug(self) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.Actor.debug()"""
        return 'scene2d.Actor'.__wrap(super(scene2d.Actor, self).debug())

    @override
    @overload
    def getTop(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getTop()"""
        return float.__wrap(super(scene2d.Actor, self).getTop())

    @override
    @overload
    def setY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setY(float)"""
        super(__scene2d.Actor, self).setY(__float.valueOf(arg0))

    @override
    @overload
    def getPrefWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.SelectBox.getPrefWidth()"""
        return float.__wrap(super(SelectBox, self).getPrefWidth())

    @override
    @overload
    def getMinWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Widget.getMinWidth()"""
        return float.__wrap(super(Widget, self).getMinWidth())

    @override
    @overload
    def clearActions(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clearActions()"""
        super(scene2d.Actor, self).clearActions()

    @overload
    def setSelectedIndex(self, arg0: int):
        """public void com.badlogic.gdx.scenes.scene2d.ui.SelectBox.setSelectedIndex(int)"""
        super(__SelectBox, self).setSelectedIndex(__int.valueOf(arg0))

    @override
    @overload
    def scaleBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.scaleBy(float,float)"""
        super(__scene2d.Actor, self).scaleBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def setItems(self, *arg0: object):
        """public void com.badlogic.gdx.scenes.scene2d.ui.SelectBox.setItems(T...)"""
        super(__SelectBox, self).setItems(arg0)

    @override
    @overload
    def setRotation(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setRotation(float)"""
        super(__scene2d.Actor, self).setRotation(__float.valueOf(arg0))

    @override
    @overload
    def getScaleX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getScaleX()"""
        return float.__wrap(super(scene2d.Actor, self).getScaleX())

    @overload
    def firstAscendant(self, arg0: 'Class') -> 'scene2d.Actor':
        """public <T extends com.badlogic.gdx.scenes.scene2d.Actor> T com.badlogic.gdx.scenes.scene2d.Actor.firstAscendant(java.lang.Class<T>)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Actor, self).firstAscendant(arg0))

    @overload
    def notify(self, arg0: 'Event', arg1: bool) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.notify(com.badlogic.gdx.scenes.scene2d.Event,boolean)"""
        return bool.__wrap(super(__scene2d.Actor, self).notify(arg0, __boolean.valueOf(arg1)))

    @override
    @overload
    def act(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.act(float)"""
        super(__scene2d.Actor, self).act(__float.valueOf(arg0))

    @override
    @overload
    def setUserObject(self, arg0: object):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setUserObject(java.lang.Object)"""
        super(__scene2d.Actor, self).setUserObject(arg0)

    @overload
    def getSelectedIndex(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.ui.SelectBox.getSelectedIndex()"""
        return int.__wrap(super(SelectBox, self).getSelectedIndex())

    @override
    @overload
    def setScaleY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScaleY(float)"""
        super(__scene2d.Actor, self).setScaleY(__float.valueOf(arg0))

    @override
    @overload
    def hasScrollFocus(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasScrollFocus()"""
        return bool.__wrap(super(scene2d.Actor, self).hasScrollFocus())

    @override
    @overload
    def toFront(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.toFront()"""
        super(scene2d.Actor, self).toFront()

    @override
    @overload
    def scaleBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.scaleBy(float)"""
        super(__scene2d.Actor, self).scaleBy(__float.valueOf(arg0))

    @overload
    def stageToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.stageToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).stageToLocalCoordinates(arg0))

    @overload
    def getItems(self) -> 'utils.Array':
        """public com.badlogic.gdx.utils.Array<T> com.badlogic.gdx.scenes.scene2d.ui.SelectBox.getItems()"""
        return 'utils.Array'.__wrap(super(SelectBox, self).getItems())

    @override
    @overload
    def getOriginX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getOriginX()"""
        return float.__wrap(super(scene2d.Actor, self).getOriginX())

    @override
    @overload
    def ascendantsVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.ascendantsVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).ascendantsVisible())

    @override
    @overload
    def getColor(self) -> 'graphics.Color':
        """public com.badlogic.gdx.graphics.Color com.badlogic.gdx.scenes.scene2d.Actor.getColor()"""
        return 'graphics.Color'.__wrap(super(scene2d.Actor, self).getColor())

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @override
    @overload
    def getStage(self) -> 'scene2d.Stage':
        """public com.badlogic.gdx.scenes.scene2d.Stage com.badlogic.gdx.scenes.scene2d.Actor.getStage()"""
        return 'scene2d.Stage'.__wrap(super(scene2d.Actor, self).getStage())

    @override
    @overload
    def addAction(self, arg0: 'Action'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.addAction(com.badlogic.gdx.scenes.scene2d.Action)"""
        super(__scene2d.Actor, self).addAction(arg0)

    @override
    @overload
    def setColor(self, arg0: float, arg1: float, arg2: float, arg3: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setColor(float,float,float,float)"""
        super(__scene2d.Actor, self).setColor(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3))

    @override
    @overload
    def isTouchable(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchable()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchable())

    @overload
    def localToAscendantCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToAscendantCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToAscendantCoordinates(arg0, arg1))

    @overload
    def clipBegin(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.clipBegin(float,float,float,float)"""
        return bool.__wrap(super(__scene2d.Actor, self).clipBegin(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3)))

    @override
    @overload
    def getActions(self) -> 'utils.Array':
        """public com.badlogic.gdx.utils.Array<com.badlogic.gdx.scenes.scene2d.Action> com.badlogic.gdx.scenes.scene2d.Actor.getActions()"""
        return 'utils.Array'.__wrap(super(scene2d.Actor, self).getActions())

    @overload
    def __init__(self, arg0: 'Skin'):
        """public com.badlogic.gdx.scenes.scene2d.ui.SelectBox(com.badlogic.gdx.scenes.scene2d.ui.Skin)"""
        val = __SelectBox(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.Tree$Node
from pyquantum_helper import import_once as __import_once__
try:
    from pygdx.scenes import scene2d
except ImportError:
    scene2d = __import_once__("pygdx.scenes.scene2d")

from builtins import str
try:
    from pygdx import utils
except ImportError:
    utils = __import_once__("pygdx.utils")

try:
    from pygdx.scenes.scene2d import utils
except ImportError:
    utils = __import_once__("pygdx.scenes.scene2d.utils")

import java.lang.Boolean as __boolean
from pyquantum_helper import override
import java.lang.Object as __object
from builtins import type
from builtins import float
from builtins import object
import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import com.badlogic.gdx.utils.Array as __Array
__Array = __Array
import java.lang.String as __String
__String = __String
import com.badlogic.gdx.scenes.scene2d.ui.Tree as __Tree_Node
__Node = __Tree_Node.Node
import java.lang.Object as __Object
__Object = __Object
import com.badlogic.gdx.scenes.scene2d.Actor as __Actor
__Actor = __Actor
import java.lang.Integer as __int
import com.badlogic.gdx.scenes.scene2d.ui.Tree as __Tree
__Tree = __Tree
import com.badlogic.gdx.scenes.scene2d.utils.Drawable as __Drawable
__Drawable = __Drawable
from builtins import bool
from builtins import int
 
class Node(ABC):
    """com.badlogic.gdx.scenes.scene2d.ui.Tree.Node"""
 
    @staticmethod
    def __wrap(java_value: __Node) -> 'Node':
        return Node(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Node):
        """
        Dynamic initializer for Node.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def getChildren(self) -> 'utils.Array':
        """public com.badlogic.gdx.utils.Array<N> com.badlogic.gdx.scenes.scene2d.ui.Tree$Node.getChildren()"""
        return 'utils.Array'.__wrap(super(Node, self).getChildren())

    @overload
    def setIcon(self, arg0: 'Drawable'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Tree$Node.setIcon(com.badlogic.gdx.scenes.scene2d.utils.Drawable)"""
        super(__Node, self).setIcon(arg0)

    @overload
    def hasChildren(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Tree$Node.hasChildren()"""
        return bool.__wrap(super(Node, self).hasChildren())

    @overload
    def collapseAll(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Tree$Node.collapseAll()"""
        super(Node, self).collapseAll()

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def getValue(self) -> object:
        """public V com.badlogic.gdx.scenes.scene2d.ui.Tree$Node.getValue()"""
        return object.__wrap(super(Node, self).getValue())

    @overload
    def add(self, arg0: 'Node'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Tree$Node.add(N)"""
        super(__Node, self).add(arg0)

    @overload
    def getHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Tree$Node.getHeight()"""
        return float.__wrap(super(Node, self).getHeight())

    @overload
    def __init__(self, ):
        """public com.badlogic.gdx.scenes.scene2d.ui.Tree$Node()"""
        val = __Node()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def getActor(self) -> 'scene2d.Actor':
        """public A com.badlogic.gdx.scenes.scene2d.ui.Tree$Node.getActor()"""
        return 'scene2d.Actor'.__wrap(super(Node, self).getActor())

    @overload
    def __init__(self):
        """public com.badlogic.gdx.scenes.scene2d.ui.Tree$Node()"""
        val = __Node()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def setActor(self, arg0: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Tree$Node.setActor(A)"""
        super(__Node, self).setActor(arg0)

    @overload
    def restoreExpandedValues(self, arg0: 'Array'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Tree$Node.restoreExpandedValues(com.badlogic.gdx.utils.Array<V>)"""
        super(__Node, self).restoreExpandedValues(arg0)

    @overload
    def expandAll(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Tree$Node.expandAll()"""
        super(Node, self).expandAll()

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def clearChildren(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Tree$Node.clearChildren()"""
        super(Node, self).clearChildren()

    @overload
    def getIcon(self) -> 'utils.Drawable':
        """public com.badlogic.gdx.scenes.scene2d.utils.Drawable com.badlogic.gdx.scenes.scene2d.ui.Tree$Node.getIcon()"""
        return 'utils.Drawable'.__wrap(super(Node, self).getIcon())

    @overload
    def addAll(self, arg0: 'Array'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Tree$Node.addAll(com.badlogic.gdx.utils.Array<N>)"""
        super(__Node, self).addAll(arg0)

    @overload
    def getTree(self) -> 'Tree':
        """public com.badlogic.gdx.scenes.scene2d.ui.Tree<N, V> com.badlogic.gdx.scenes.scene2d.ui.Tree$Node.getTree()"""
        return 'Tree'.__wrap(super(Node, self).getTree())

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @overload
    def isAscendantOf(self, arg0: 'Node') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Tree$Node.isAscendantOf(N)"""
        return bool.__wrap(super(__Node, self).isAscendantOf(arg0))

    @overload
    def getParent(self) -> 'Node':
        """public N com.badlogic.gdx.scenes.scene2d.ui.Tree$Node.getParent()"""
        return 'Node'.__wrap(super(Node, self).getParent())

    @overload
    def findNode(self, arg0: object) -> 'Node':
        """public N com.badlogic.gdx.scenes.scene2d.ui.Tree$Node.findNode(V)"""
        return 'Node'.__wrap(super(__Node, self).findNode(arg0))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0))

    @overload
    def setValue(self, arg0: object):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Tree$Node.setValue(V)"""
        super(__Node, self).setValue(arg0)

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.lang.Object.toString()"""
        return str.__wrap(super(object, self).toString())

    @overload
    def insert(self, arg0: int, arg1: 'Node'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Tree$Node.insert(int,N)"""
        super(__Node, self).insert(__int.valueOf(arg0), arg1)

    @overload
    def setExpanded(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Tree$Node.setExpanded(boolean)"""
        super(__Node, self).setExpanded(__boolean.valueOf(arg0))

    @overload
    def isSelectable(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Tree$Node.isSelectable()"""
        return bool.__wrap(super(Node, self).isSelectable())

    @overload
    def setSelectable(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Tree$Node.setSelectable(boolean)"""
        super(__Node, self).setSelectable(__boolean.valueOf(arg0))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def getLevel(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.ui.Tree$Node.getLevel()"""
        return int.__wrap(super(Node, self).getLevel())

    @overload
    def remove(self, arg0: 'Node'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Tree$Node.remove(N)"""
        super(__Node, self).remove(arg0)

    @overload
    def expandTo(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Tree$Node.expandTo()"""
        super(Node, self).expandTo()

    @overload
    def isExpanded(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Tree$Node.isExpanded()"""
        return bool.__wrap(super(Node, self).isExpanded())

    @overload
    def isDescendantOf(self, arg0: 'Node') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Tree$Node.isDescendantOf(N)"""
        return bool.__wrap(super(__Node, self).isDescendantOf(arg0))

    @overload
    def findExpandedValues(self, arg0: 'Array'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Tree$Node.findExpandedValues(com.badlogic.gdx.utils.Array<V>)"""
        super(__Node, self).findExpandedValues(arg0)

    @overload
    def remove(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Tree$Node.remove()"""
        super(Node, self).remove()

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def __init__(self, arg0: 'Actor'):
        """public com.badlogic.gdx.scenes.scene2d.ui.Tree$Node(A)"""
        val = __Node(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def updateChildren(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Tree$Node.updateChildren()"""
        super(Node, self).updateChildren() 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.Label$LabelStyle
from pyquantum_helper import import_once as __import_once__
from builtins import str
from pyquantum_helper import override
import java.lang.Object as __object
try:
    from pygdx.graphics import g2d
except ImportError:
    g2d = __import_once__("pygdx.graphics.g2d")

from builtins import type
import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import java.lang.Integer as __int
from builtins import bool
try:
    from pygdx import graphics
except ImportError:
    graphics = __import_once__("pygdx.graphics")

import com.badlogic.gdx.scenes.scene2d.ui.Label as __Label_LabelStyle
__LabelStyle = __Label_LabelStyle.LabelStyle
from builtins import int
 
class LabelStyle():
    """com.badlogic.gdx.scenes.scene2d.ui.Label.LabelStyle"""
 
    @staticmethod
    def __wrap(java_value: __LabelStyle) -> 'LabelStyle':
        return LabelStyle(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __LabelStyle):
        """
        Dynamic initializer for LabelStyle.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.lang.Object.toString()"""
        return str.__wrap(super(object, self).toString())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def __init__(self):
        """public com.badlogic.gdx.scenes.scene2d.ui.Label$LabelStyle()"""
        val = __LabelStyle()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def __init__(self, arg0: 'BitmapFont', arg1: 'Color'):
        """public com.badlogic.gdx.scenes.scene2d.ui.Label$LabelStyle(com.badlogic.gdx.graphics.g2d.BitmapFont,com.badlogic.gdx.graphics.Color)"""
        val = __LabelStyle(arg0, arg1)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @overload
    def __init__(self, ):
        """public com.badlogic.gdx.scenes.scene2d.ui.Label$LabelStyle()"""
        val = __LabelStyle()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def __init__(self, arg0: 'LabelStyle'):
        """public com.badlogic.gdx.scenes.scene2d.ui.Label$LabelStyle(com.badlogic.gdx.scenes.scene2d.ui.Label$LabelStyle)"""
        val = __LabelStyle(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0)) 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.TextButton
from pyquantum_helper import import_once as __import_once__
import com.badlogic.gdx.scenes.scene2d.Touchable as __Touchable
__Touchable = __Touchable
try:
    from pygdx.scenes import scene2d
except ImportError:
    scene2d = __import_once__("pygdx.scenes.scene2d")

import com.badlogic.gdx.graphics.Color as __Color
__Color = __Color
import java.lang.Boolean as __boolean
try:
    from pygdx.graphics import g2d
except ImportError:
    g2d = __import_once__("pygdx.graphics.g2d")

from builtins import type
import com.badlogic.gdx.scenes.scene2d.ui.Button as __Button
__Button = __Button
import com.badlogic.gdx.scenes.scene2d.Group as __Group
__Group = __Group
import com.badlogic.gdx.scenes.scene2d.ui.Cell as __Cell
__Cell = __Cell
import com.badlogic.gdx.scenes.scene2d.ui.Table as __Table
__Table = __Table
import com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup as __WidgetGroup
__WidgetGroup = __WidgetGroup
import com.badlogic.gdx.math.Vector2 as __Vector2
__Vector2 = __Vector2
import com.badlogic.gdx.scenes.scene2d.ui.Table as __Table_Debug
__Debug = __Table_Debug.Debug
import com.badlogic.gdx.math.Rectangle as __Rectangle
__Rectangle = __Rectangle
import java.lang.Class as __Class
__Class = __Class
import com.badlogic.gdx.utils.Array as __Array
__Array = __Array
import java.lang.String as __string
import java.lang.CharSequence as __CharSequence
__CharSequence = __CharSequence
try:
    from pygdx import math
except ImportError:
    math = __import_once__("pygdx.math")

from builtins import bool
import com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup as __ButtonGroup
__ButtonGroup = __ButtonGroup
import com.badlogic.gdx.scenes.scene2d.ui.TextButton as __TextButton
__TextButton = __TextButton
from builtins import str
import java.lang.CharSequence as CharSequence
try:
    from pygdx.scenes.scene2d import utils
except ImportError:
    utils = __import_once__("pygdx.scenes.scene2d.utils")

try:
    from pygdx import utils
except ImportError:
    utils = __import_once__("pygdx.utils")

from pyquantum_helper import override
import java.lang.Object as __object
from builtins import float
import com.badlogic.gdx.scenes.scene2d.ui.TextButton as __TextButton_TextButtonStyle
__TextButtonStyle = __TextButton_TextButtonStyle.TextButtonStyle
from builtins import object
import com.badlogic.gdx.scenes.scene2d.utils.ClickListener as __ClickListener
__ClickListener = __ClickListener
import com.badlogic.gdx.utils.DelayedRemovalArray as __DelayedRemovalArray
__DelayedRemovalArray = __DelayedRemovalArray
import java.lang.Long as __long
import java.lang.Float as __float
import java.lang.String as __String
__String = __String
try:
    from pygdx.graphics import glutils
except ImportError:
    glutils = __import_once__("pygdx.graphics.glutils")

import com.badlogic.gdx.scenes.scene2d.ui.Skin as __Skin
__Skin = __Skin
import java.lang.Object as __Object
__Object = __Object
import com.badlogic.gdx.utils.SnapshotArray as __SnapshotArray
__SnapshotArray = __SnapshotArray
import com.badlogic.gdx.scenes.scene2d.Actor as __Actor
__Actor = __Actor
import java.lang.Integer as __int
import com.badlogic.gdx.scenes.scene2d.ui.Value as __Value
__Value = __Value
import com.badlogic.gdx.scenes.scene2d.Stage as __Stage
__Stage = __Stage
import com.badlogic.gdx.scenes.scene2d.ui.Label as __Label
__Label = __Label
try:
    from pygdx import graphics
except ImportError:
    graphics = __import_once__("pygdx.graphics")

import com.badlogic.gdx.scenes.scene2d.utils.Drawable as __Drawable
__Drawable = __Drawable
from builtins import int
 
class TextButton(__Button, Button):
    """com.badlogic.gdx.scenes.scene2d.ui.TextButton"""
 
    @staticmethod
    def __wrap(java_value: __TextButton) -> 'TextButton':
        return TextButton(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __TextButton):
        """
        Dynamic initializer for TextButton.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def getColumnPrefWidth(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getColumnPrefWidth(int)"""
        return float.__wrap(super(__Table, self).getColumnPrefWidth(__int.valueOf(arg0)))

    @override
    @overload
    def getY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getY()"""
        return float.__wrap(super(scene2d.Actor, self).getY())

    @override
    @overload
    def setBounds(self, arg0: float, arg1: float, arg2: float, arg3: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setBounds(float,float,float,float)"""
        super(__scene2d.Actor, self).setBounds(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def add(self, arg0: 'CharSequence', arg1: str, arg2: str) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<com.badlogic.gdx.scenes.scene2d.ui.Label> com.badlogic.gdx.scenes.scene2d.ui.Table.add(java.lang.CharSequence,java.lang.String,java.lang.String)"""
        return 'Cell'.__wrap(super(__Table, self).add(arg0, arg1, arg2))

    @overload
    def findActor(self, arg0: str) -> 'scene2d.Actor':
        """public <T extends com.badlogic.gdx.scenes.scene2d.Actor> T com.badlogic.gdx.scenes.scene2d.Group.findActor(java.lang.String)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Group, self).findActor(arg0))

    @override
    @overload
    def isOver(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Button.isOver()"""
        return bool.__wrap(super(Button, self).isOver())

    @override
    @overload
    def getPrefWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Button.getPrefWidth()"""
        return float.__wrap(super(Button, self).getPrefWidth())

    @overload
    def removeActor(self, arg0: 'Actor', arg1: bool) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Table.removeActor(com.badlogic.gdx.scenes.scene2d.Actor,boolean)"""
        return bool.__wrap(super(__Table, self).removeActor(arg0, __boolean.valueOf(arg1)))

    @override
    @overload
    def getTouchable(self) -> 'scene2d.Touchable':
        """public com.badlogic.gdx.scenes.scene2d.Touchable com.badlogic.gdx.scenes.scene2d.Actor.getTouchable()"""
        return 'scene2d.Touchable'.__wrap(super(scene2d.Actor, self).getTouchable())

    @override
    @overload
    def removeAction(self, arg0: 'Action'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.removeAction(com.badlogic.gdx.scenes.scene2d.Action)"""
        super(__scene2d.Actor, self).removeAction(arg0)

    @override
    @overload
    def getClickListener(self) -> 'utils.ClickListener':
        """public com.badlogic.gdx.scenes.scene2d.utils.ClickListener com.badlogic.gdx.scenes.scene2d.ui.Button.getClickListener()"""
        return 'utils.ClickListener'.__wrap(super(Button, self).getClickListener())

    @override
    @overload
    def getPadTop(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getPadTop()"""
        return float.__wrap(super(Table, self).getPadTop())

    @override
    @overload
    def drawDebug(self, arg0: 'ShapeRenderer'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.drawDebug(com.badlogic.gdx.graphics.glutils.ShapeRenderer)"""
        super(__Table, self).drawDebug(arg0)

    @override
    @overload
    def setDisabled(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Button.setDisabled(boolean)"""
        super(__Button, self).setDisabled(__boolean.valueOf(arg0))

    @overload
    def padRight(self, arg0: 'Value') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padRight(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Table'.__wrap(super(__Table, self).padRight(arg0))

    @override
    @overload
    def getMaxWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.getMaxWidth()"""
        return float.__wrap(super(WidgetGroup, self).getMaxWidth())

    @override
    @overload
    def setX(self, arg0: float, arg1: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setX(float,int)"""
        super(__scene2d.Actor, self).setX(__float.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def reset(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.reset()"""
        super(Table, self).reset()

    @override
    @overload
    def getListeners(self) -> 'utils.DelayedRemovalArray':
        """public com.badlogic.gdx.utils.DelayedRemovalArray<com.badlogic.gdx.scenes.scene2d.EventListener> com.badlogic.gdx.scenes.scene2d.Actor.getListeners()"""
        return 'utils.DelayedRemovalArray'.__wrap(super(scene2d.Actor, self).getListeners())

    @overload
    def removeListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.removeListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).removeListener(arg0))

    @override
    @overload
    def isTouchFocusListener(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchFocusListener()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchFocusListener())

    @overload
    def localToStageCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToStageCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToStageCoordinates(arg0))

    @override
    @overload
    def clipBegin(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.clipBegin()"""
        return bool.__wrap(super(scene2d.Actor, self).clipBegin())

    @override
    @overload
    def moveBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.moveBy(float,float)"""
        super(__scene2d.Actor, self).moveBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def pad(self, arg0: float) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.pad(float)"""
        return 'Table'.__wrap(super(__Table, self).pad(__float.valueOf(arg0)))

    @override
    @overload
    def getStyle(self) -> 'TextButtonStyle':
        """public com.badlogic.gdx.scenes.scene2d.ui.TextButton$TextButtonStyle com.badlogic.gdx.scenes.scene2d.ui.TextButton.getStyle()"""
        return 'TextButtonStyle'.__wrap(super(TextButton, self).getStyle())

    @override
    @overload
    def setName(self, arg0: str):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setName(java.lang.String)"""
        super(__scene2d.Actor, self).setName(arg0)

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @overload
    def getRowMinHeight(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getRowMinHeight(int)"""
        return float.__wrap(super(__Table, self).getRowMinHeight(__int.valueOf(arg0)))

    @overload
    def swapActor(self, arg0: 'Actor', arg1: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.swapActor(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Group, self).swapActor(arg0, arg1))

    @overload
    def __init__(self, arg0: str, arg1: 'Skin', arg2: str):
        """public com.badlogic.gdx.scenes.scene2d.ui.TextButton(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String)"""
        val = __TextButton(arg0, arg1, arg2)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def getPadX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getPadX()"""
        return float.__wrap(super(Table, self).getPadX())

    @override
    @overload
    def clearChildren(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.clearChildren(boolean)"""
        super(__Table, self).clearChildren(__boolean.valueOf(arg0))

    @override
    @overload
    def getDebug(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.getDebug()"""
        return bool.__wrap(super(scene2d.Actor, self).getDebug())

    @override
    @overload
    def setHeight(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setHeight(float)"""
        super(__scene2d.Actor, self).setHeight(__float.valueOf(arg0))

    @override
    @overload
    def setScale(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScale(float)"""
        super(__scene2d.Actor, self).setScale(__float.valueOf(arg0))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getButtonGroup(self) -> 'ButtonGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup com.badlogic.gdx.scenes.scene2d.ui.Button.getButtonGroup()"""
        return 'ButtonGroup'.__wrap(super(Button, self).getButtonGroup())

    @overload
    def add(self, arg0: 'CharSequence') -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<com.badlogic.gdx.scenes.scene2d.ui.Label> com.badlogic.gdx.scenes.scene2d.ui.Table.add(java.lang.CharSequence)"""
        return 'Cell'.__wrap(super(__Table, self).add(arg0))

    @overload
    def padBottom(self, arg0: float) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padBottom(float)"""
        return 'Table'.__wrap(super(__Table, self).padBottom(__float.valueOf(arg0)))

    @override
    @overload
    def setDebug(self, arg0: bool, arg1: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Group.setDebug(boolean,boolean)"""
        super(__scene2d.Group, self).setDebug(__boolean.valueOf(arg0), __boolean.valueOf(arg1))

    @override
    @overload
    def row(self) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell com.badlogic.gdx.scenes.scene2d.ui.Table.row()"""
        return 'Cell'.__wrap(super(Table, self).row())

    @overload
    def getLabel(self) -> 'Label':
        """public com.badlogic.gdx.scenes.scene2d.ui.Label com.badlogic.gdx.scenes.scene2d.ui.TextButton.getLabel()"""
        return 'Label'.__wrap(super(TextButton, self).getLabel())

    @overload
    def background(self, arg0: 'Drawable') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.background(com.badlogic.gdx.scenes.scene2d.utils.Drawable)"""
        return 'Table'.__wrap(super(__Table, self).background(arg0))

    @override
    @overload
    def setTransform(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Group.setTransform(boolean)"""
        super(__scene2d.Group, self).setTransform(__boolean.valueOf(arg0))

    @overload
    def parentToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.parentToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).parentToLocalCoordinates(arg0))

    @override
    @overload
    def getRotation(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getRotation()"""
        return float.__wrap(super(scene2d.Actor, self).getRotation())

    @override
    @overload
    def getMaxHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.getMaxHeight()"""
        return float.__wrap(super(WidgetGroup, self).getMaxHeight())

    @overload
    def padTop(self, arg0: float) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padTop(float)"""
        return 'Table'.__wrap(super(__Table, self).padTop(__float.valueOf(arg0)))

    @override
    @overload
    def isDisabled(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Button.isDisabled()"""
        return bool.__wrap(super(Button, self).isDisabled())

    @overload
    def padLeft(self, arg0: 'Value') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padLeft(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Table'.__wrap(super(__Table, self).padLeft(arg0))

    @override
    @overload
    def addActor(self, arg0: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.addActor(com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__scene2d.Group, self).addActor(arg0)

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def getBackground(self) -> 'utils.Drawable':
        """public com.badlogic.gdx.scenes.scene2d.utils.Drawable com.badlogic.gdx.scenes.scene2d.ui.Table.getBackground()"""
        return 'utils.Drawable'.__wrap(super(Table, self).getBackground())

    @override
    @overload
    def getPrefHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Button.getPrefHeight()"""
        return float.__wrap(super(Button, self).getPrefHeight())

    @overload
    def pad(self, arg0: float, arg1: float, arg2: float, arg3: float) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.pad(float,float,float,float)"""
        return 'Table'.__wrap(super(__Table, self).pad(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3)))

    @overload
    def add(self, arg0: 'CharSequence', arg1: str) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<com.badlogic.gdx.scenes.scene2d.ui.Label> com.badlogic.gdx.scenes.scene2d.ui.Table.add(java.lang.CharSequence,java.lang.String)"""
        return 'Cell'.__wrap(super(__Table, self).add(arg0, arg1))

    @override
    @overload
    def getRows(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.ui.Table.getRows()"""
        return int.__wrap(super(Table, self).getRows())

    @override
    @overload
    def setWidth(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setWidth(float)"""
        super(__scene2d.Actor, self).setWidth(__float.valueOf(arg0))

    @override
    @overload
    def isTouchFocusTarget(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchFocusTarget()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchFocusTarget())

    @override
    @overload
    def isChecked(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Button.isChecked()"""
        return bool.__wrap(super(Button, self).isChecked())

    @override
    @overload
    def setPosition(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setPosition(float,float)"""
        super(__scene2d.Actor, self).setPosition(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def setClip(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.setClip(boolean)"""
        super(__Table, self).setClip(__boolean.valueOf(arg0))

    @override
    @overload
    def addActorAt(self, arg0: int, arg1: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.addActorAt(int,com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__scene2d.Group, self).addActorAt(__int.valueOf(arg0), arg1)

    @overload
    def hit(self, arg0: float, arg1: float, arg2: bool) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.ui.Table.hit(float,float,boolean)"""
        return 'scene2d.Actor'.__wrap(super(__Table, self).hit(__float.valueOf(arg0), __float.valueOf(arg1), __boolean.valueOf(arg2)))

    @override
    @overload
    def setStyle(self, arg0: 'ButtonStyle'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextButton.setStyle(com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle)"""
        super(__TextButton, self).setStyle(arg0)

    @override
    @overload
    def setProgrammaticChangeEvents(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Button.setProgrammaticChangeEvents(boolean)"""
        super(__Button, self).setProgrammaticChangeEvents(__boolean.valueOf(arg0))

    @override
    @overload
    def setOriginY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOriginY(float)"""
        super(__scene2d.Actor, self).setOriginY(__float.valueOf(arg0))

    @override
    @overload
    def getPadY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getPadY()"""
        return float.__wrap(super(Table, self).getPadY())

    @overload
    def setLabel(self, arg0: 'Label'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextButton.setLabel(com.badlogic.gdx.scenes.scene2d.ui.Label)"""
        super(__TextButton, self).setLabel(arg0)

    @overload
    def setText(self, arg0: str):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextButton.setText(java.lang.String)"""
        super(__TextButton, self).setText(arg0)

    @override
    @overload
    def getPadRight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getPadRight()"""
        return float.__wrap(super(Table, self).getPadRight())

    @overload
    def localToScreenCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToScreenCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToScreenCoordinates(arg0))

    @override
    @overload
    def clear(self):
        """public void com.badlogic.gdx.scenes.scene2d.Group.clear()"""
        super(scene2d.Group, self).clear()

    @overload
    def stack(self, *arg0: 'scene2d.Actor') -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<com.badlogic.gdx.scenes.scene2d.ui.Stack> com.badlogic.gdx.scenes.scene2d.ui.Table.stack(com.badlogic.gdx.scenes.scene2d.Actor...)"""
        return 'Cell'.__wrap(super(__Table, self).stack(arg0))

    @override
    @overload
    def setTouchable(self, arg0: 'Touchable'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setTouchable(com.badlogic.gdx.scenes.scene2d.Touchable)"""
        super(__scene2d.Actor, self).setTouchable(arg0)

    @override
    @overload
    def add(self) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell com.badlogic.gdx.scenes.scene2d.ui.Table.add()"""
        return 'Cell'.__wrap(super(Table, self).add())

    @overload
    def getColumnWidth(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getColumnWidth(int)"""
        return float.__wrap(super(__Table, self).getColumnWidth(__int.valueOf(arg0)))

    @override
    @overload
    def clearChildren(self):
        """public void com.badlogic.gdx.scenes.scene2d.Group.clearChildren()"""
        super(scene2d.Group, self).clearChildren()

    @override
    @overload
    def debugAll(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.debugAll()"""
        return 'Table'.__wrap(super(Table, self).debugAll())

    @overload
    def localToParentCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToParentCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToParentCoordinates(arg0))

    @override
    @overload
    def setCullingArea(self, arg0: 'Rectangle'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.setCullingArea(com.badlogic.gdx.math.Rectangle)"""
        super(__scene2d.Group, self).setCullingArea(arg0)

    @override
    @overload
    def getName(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.Actor.getName()"""
        return str.__wrap(super(scene2d.Actor, self).getName())

    @override
    @overload
    def getCaptureListeners(self) -> 'utils.DelayedRemovalArray':
        """public com.badlogic.gdx.utils.DelayedRemovalArray<com.badlogic.gdx.scenes.scene2d.EventListener> com.badlogic.gdx.scenes.scene2d.Actor.getCaptureListeners()"""
        return 'utils.DelayedRemovalArray'.__wrap(super(scene2d.Actor, self).getCaptureListeners())

    @overload
    def padBottom(self, arg0: 'Value') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padBottom(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Table'.__wrap(super(__Table, self).padBottom(arg0))

    @override
    @overload
    def clear(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Group.clear(boolean)"""
        super(__scene2d.Group, self).clear(__boolean.valueOf(arg0))

    @override
    @overload
    def setY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setY(float)"""
        super(__scene2d.Actor, self).setY(__float.valueOf(arg0))

    @override
    @overload
    def addActorAfter(self, arg0: 'Actor', arg1: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.addActorAfter(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__scene2d.Group, self).addActorAfter(arg0, arg1)

    @override
    @overload
    def top(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.top()"""
        return 'Table'.__wrap(super(Table, self).top())

    @override
    @overload
    def scaleBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.scaleBy(float,float)"""
        super(__scene2d.Actor, self).scaleBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def align(self, arg0: int) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.align(int)"""
        return 'Table'.__wrap(super(__Table, self).align(__int.valueOf(arg0)))

    @overload
    def notify(self, arg0: 'Event', arg1: bool) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.notify(com.badlogic.gdx.scenes.scene2d.Event,boolean)"""
        return bool.__wrap(super(__scene2d.Actor, self).notify(arg0, __boolean.valueOf(arg1)))

    @override
    @overload
    def act(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Group.act(float)"""
        super(__scene2d.Group, self).act(__float.valueOf(arg0))

    @override
    @overload
    def setUserObject(self, arg0: object):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setUserObject(java.lang.Object)"""
        super(__scene2d.Actor, self).setUserObject(arg0)

    @override
    @overload
    def hasScrollFocus(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasScrollFocus()"""
        return bool.__wrap(super(scene2d.Actor, self).hasScrollFocus())

    @override
    @overload
    def toFront(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.toFront()"""
        super(scene2d.Actor, self).toFront()

    @override
    @overload
    def scaleBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.scaleBy(float)"""
        super(__scene2d.Actor, self).scaleBy(__float.valueOf(arg0))

    @override
    @overload
    def getOriginX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getOriginX()"""
        return float.__wrap(super(scene2d.Actor, self).getOriginX())

    @overload
    def getRow(self, arg0: float) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.ui.Table.getRow(float)"""
        return int.__wrap(super(__Table, self).getRow(__float.valueOf(arg0)))

    @overload
    def getChild(self, arg0: int) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.Group.getChild(int)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Group, self).getChild(__int.valueOf(arg0)))

    @override
    @overload
    def getSkin(self) -> 'Skin':
        """public com.badlogic.gdx.scenes.scene2d.ui.Skin com.badlogic.gdx.scenes.scene2d.ui.Table.getSkin()"""
        return 'Skin'.__wrap(super(Table, self).getSkin())

    @override
    @overload
    def setDebug(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.setDebug(boolean)"""
        super(__Table, self).setDebug(__boolean.valueOf(arg0))

    @overload
    def pad(self, arg0: 'Value', arg1: 'Value', arg2: 'Value', arg3: 'Value') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.pad(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Table'.__wrap(super(__Table, self).pad(arg0, arg1, arg2, arg3))

    @overload
    def add(self, arg0: 'CharSequence', arg1: str, arg2: 'Color') -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<com.badlogic.gdx.scenes.scene2d.ui.Label> com.badlogic.gdx.scenes.scene2d.ui.Table.add(java.lang.CharSequence,java.lang.String,com.badlogic.gdx.graphics.Color)"""
        return 'Cell'.__wrap(super(__Table, self).add(arg0, arg1, arg2))

    @override
    @overload
    def getPadBottom(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getPadBottom()"""
        return float.__wrap(super(Table, self).getPadBottom())

    @override
    @overload
    def getStage(self) -> 'scene2d.Stage':
        """public com.badlogic.gdx.scenes.scene2d.Stage com.badlogic.gdx.scenes.scene2d.Actor.getStage()"""
        return 'scene2d.Stage'.__wrap(super(scene2d.Actor, self).getStage())

    @override
    @overload
    def setChecked(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Button.setChecked(boolean)"""
        super(__Button, self).setChecked(__boolean.valueOf(arg0))

    @override
    @overload
    def addAction(self, arg0: 'Action'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.addAction(com.badlogic.gdx.scenes.scene2d.Action)"""
        super(__scene2d.Actor, self).addAction(arg0)

    @overload
    def __init__(self, arg0: str, arg1: 'TextButtonStyle'):
        """public com.badlogic.gdx.scenes.scene2d.ui.TextButton(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.TextButton$TextButtonStyle)"""
        val = __TextButton(arg0, arg1)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def getPadRightValue(self) -> 'Value':
        """public com.badlogic.gdx.scenes.scene2d.ui.Value com.badlogic.gdx.scenes.scene2d.ui.Table.getPadRightValue()"""
        return 'Value'.__wrap(super(Table, self).getPadRightValue())

    @override
    @overload
    def setColor(self, arg0: float, arg1: float, arg2: float, arg3: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setColor(float,float,float,float)"""
        super(__scene2d.Actor, self).setColor(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3))

    @overload
    def getColumnMinWidth(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getColumnMinWidth(int)"""
        return float.__wrap(super(__Table, self).getColumnMinWidth(__int.valueOf(arg0)))

    @overload
    def localToAscendantCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToAscendantCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToAscendantCoordinates(arg0, arg1))

    @override
    @overload
    def getActions(self) -> 'utils.Array':
        """public com.badlogic.gdx.utils.Array<com.badlogic.gdx.scenes.scene2d.Action> com.badlogic.gdx.scenes.scene2d.Actor.getActions()"""
        return 'utils.Array'.__wrap(super(scene2d.Actor, self).getActions())

    @override
    @overload
    def debugTable(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.debugTable()"""
        return 'Table'.__wrap(super(Table, self).debugTable())

    @overload
    def getLabelCell(self) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<com.badlogic.gdx.scenes.scene2d.ui.Label> com.badlogic.gdx.scenes.scene2d.ui.TextButton.getLabelCell()"""
        return 'Cell'.__wrap(super(TextButton, self).getLabelCell())

    @overload
    def add(self, *arg0: 'scene2d.Actor') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.add(com.badlogic.gdx.scenes.scene2d.Actor...)"""
        return 'Table'.__wrap(super(__Table, self).add(arg0))

    @override
    @overload
    def right(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.right()"""
        return 'Table'.__wrap(super(Table, self).right())

    @overload
    def localToDescendantCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Group.localToDescendantCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Group, self).localToDescendantCoordinates(arg0, arg1))

    @overload
    def padRight(self, arg0: float) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padRight(float)"""
        return 'Table'.__wrap(super(__Table, self).padRight(__float.valueOf(arg0)))

    @overload
    def setZIndex(self, arg0: int) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.setZIndex(int)"""
        return bool.__wrap(super(__scene2d.Actor, self).setZIndex(__int.valueOf(arg0)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.ui.TextButton.toString()"""
        return str.__wrap(super(TextButton, self).toString())

    @overload
    def padLeft(self, arg0: float) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padLeft(float)"""
        return 'Table'.__wrap(super(__Table, self).padLeft(__float.valueOf(arg0)))

    @overload
    def getX(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getX(int)"""
        return float.__wrap(super(__scene2d.Actor, self).getX(__int.valueOf(arg0)))

    @override
    @overload
    def sizeBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.sizeBy(float)"""
        super(__scene2d.Actor, self).sizeBy(__float.valueOf(arg0))

    @override
    @overload
    def getMinWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Button.getMinWidth()"""
        return float.__wrap(super(Button, self).getMinWidth())

    @override
    @overload
    def isPressed(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Button.isPressed()"""
        return bool.__wrap(super(Button, self).isPressed())

    @override
    @overload
    def clip(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.clip()"""
        return 'Table'.__wrap(super(Table, self).clip())

    @overload
    def getRowPrefHeight(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getRowPrefHeight(int)"""
        return float.__wrap(super(__Table, self).getRowPrefHeight(__int.valueOf(arg0)))

    @override
    @overload
    def sizeBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.sizeBy(float,float)"""
        super(__scene2d.Actor, self).sizeBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def hasActions(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasActions()"""
        return bool.__wrap(super(scene2d.Actor, self).hasActions())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0))

    @override
    @overload
    def setScaleX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScaleX(float)"""
        super(__scene2d.Actor, self).setScaleX(__float.valueOf(arg0))

    @overload
    def removeActor(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Table.removeActor(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__Table, self).removeActor(arg0))

    @override
    @overload
    def getX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getX()"""
        return float.__wrap(super(scene2d.Actor, self).getX())

    @override
    @overload
    def left(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.left()"""
        return 'Table'.__wrap(super(Table, self).left())

    @override
    @overload
    def center(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.center()"""
        return 'Table'.__wrap(super(Table, self).center())

    @override
    @overload
    def setBackground(self, arg0: 'Drawable'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.setBackground(com.badlogic.gdx.scenes.scene2d.utils.Drawable)"""
        super(__Table, self).setBackground(arg0)

    @overload
    def add(self, arg0: 'Actor') -> 'Cell':
        """public <T extends com.badlogic.gdx.scenes.scene2d.Actor> com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Table.add(T)"""
        return 'Cell'.__wrap(super(__Table, self).add(arg0))

    @override
    @overload
    def toBack(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.toBack()"""
        super(scene2d.Actor, self).toBack()

    @override
    @overload
    def debug(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.debug()"""
        return 'Table'.__wrap(super(Table, self).debug())

    @override
    @overload
    def getClip(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Table.getClip()"""
        return bool.__wrap(super(Table, self).getClip())

    @overload
    def screenToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.screenToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).screenToLocalCoordinates(arg0))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def ancestorsVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.ancestorsVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).ancestorsVisible())

    @override
    @overload
    def getMinHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Button.getMinHeight()"""
        return float.__wrap(super(Button, self).getMinHeight())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def setSize(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setSize(float,float)"""
        super(__scene2d.Actor, self).setSize(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def layout(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.layout()"""
        super(Table, self).layout()

    @override
    @overload
    def getZIndex(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.Actor.getZIndex()"""
        return int.__wrap(super(scene2d.Actor, self).getZIndex())

    @overload
    def getY(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getY(int)"""
        return float.__wrap(super(__scene2d.Actor, self).getY(__int.valueOf(arg0)))

    @override
    @overload
    def setOrigin(self, arg0: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOrigin(int)"""
        super(__scene2d.Actor, self).setOrigin(__int.valueOf(arg0))

    @override
    @overload
    def validate(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.validate()"""
        super(WidgetGroup, self).validate()

    @overload
    def isDescendantOf(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isDescendantOf(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Actor, self).isDescendantOf(arg0))

    @override
    @overload
    def addActorBefore(self, arg0: 'Actor', arg1: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.addActorBefore(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__scene2d.Group, self).addActorBefore(arg0, arg1)

    @override
    @overload
    def getParent(self) -> 'scene2d.Group':
        """public com.badlogic.gdx.scenes.scene2d.Group com.badlogic.gdx.scenes.scene2d.Actor.getParent()"""
        return 'scene2d.Group'.__wrap(super(scene2d.Actor, self).getParent())

    @override
    @overload
    def clearListeners(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clearListeners()"""
        super(scene2d.Actor, self).clearListeners()

    @overload
    def localToActorCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToActorCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToActorCoordinates(arg0, arg1))

    @override
    @overload
    def getTableDebug(self) -> 'Debug':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table$Debug com.badlogic.gdx.scenes.scene2d.ui.Table.getTableDebug()"""
        return 'Debug'.__wrap(super(Table, self).getTableDebug())

    @override
    @overload
    def setOriginX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOriginX(float)"""
        super(__scene2d.Actor, self).setOriginX(__float.valueOf(arg0))

    @overload
    def removeActorAt(self, arg0: int, arg1: bool) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.ui.Table.removeActorAt(int,boolean)"""
        return 'scene2d.Actor'.__wrap(super(__Table, self).removeActorAt(__int.valueOf(arg0), __boolean.valueOf(arg1)))

    @override
    @overload
    def getHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getHeight()"""
        return float.__wrap(super(scene2d.Actor, self).getHeight())

    @override
    @overload
    def hasKeyboardFocus(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasKeyboardFocus()"""
        return bool.__wrap(super(scene2d.Actor, self).hasKeyboardFocus())

    @override
    @overload
    def getOriginY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getOriginY()"""
        return float.__wrap(super(scene2d.Actor, self).getOriginY())

    @override
    @overload
    def pack(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.pack()"""
        super(WidgetGroup, self).pack()

    @override
    @overload
    def clipEnd(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clipEnd()"""
        super(scene2d.Actor, self).clipEnd()

    @override
    @overload
    def getUserObject(self) -> object:
        """public java.lang.Object com.badlogic.gdx.scenes.scene2d.Actor.getUserObject()"""
        return object.__wrap(super(scene2d.Actor, self).getUserObject())

    @override
    @overload
    def toggle(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Button.toggle()"""
        super(Button, self).toggle()

    @override
    @overload
    def rotateBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.rotateBy(float)"""
        super(__scene2d.Actor, self).rotateBy(__float.valueOf(arg0))

    @overload
    def background(self, arg0: str) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.background(java.lang.String)"""
        return 'Table'.__wrap(super(__Table, self).background(arg0))

    @overload
    def getRowHeight(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getRowHeight(int)"""
        return float.__wrap(super(__Table, self).getRowHeight(__int.valueOf(arg0)))

    @overload
    def __init__(self, arg0: str, arg1: 'Skin'):
        """public com.badlogic.gdx.scenes.scene2d.ui.TextButton(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin)"""
        val = __TextButton(arg0, arg1)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def getPadLeftValue(self) -> 'Value':
        """public com.badlogic.gdx.scenes.scene2d.ui.Value com.badlogic.gdx.scenes.scene2d.ui.Table.getPadLeftValue()"""
        return 'Value'.__wrap(super(Table, self).getPadLeftValue())

    @override
    @overload
    def setScale(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScale(float,float)"""
        super(__scene2d.Actor, self).setScale(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def addListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.addListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).addListener(arg0))

    @override
    @overload
    def draw(self, arg0: 'Batch', arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextButton.draw(com.badlogic.gdx.graphics.g2d.Batch,float)"""
        super(__TextButton, self).draw(arg0, __float.valueOf(arg1))

    @override
    @overload
    def setRound(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.setRound(boolean)"""
        super(__Table, self).setRound(__boolean.valueOf(arg0))

    @overload
    def debug(self, arg0: 'Debug') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.debug(com.badlogic.gdx.scenes.scene2d.ui.Table$Debug)"""
        return 'Table'.__wrap(super(__Table, self).debug(arg0))

    @overload
    def clip(self, arg0: bool) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.clip(boolean)"""
        return 'Table'.__wrap(super(__Table, self).clip(__boolean.valueOf(arg0)))

    @override
    @overload
    def invalidate(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.invalidate()"""
        super(Table, self).invalidate()

    @override
    @overload
    def getPadLeft(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getPadLeft()"""
        return float.__wrap(super(Table, self).getPadLeft())

    @override
    @overload
    def setVisible(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setVisible(boolean)"""
        super(__scene2d.Actor, self).setVisible(__boolean.valueOf(arg0))

    @override
    @overload
    def setY(self, arg0: float, arg1: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setY(float,int)"""
        super(__scene2d.Actor, self).setY(__float.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def setFillParent(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.setFillParent(boolean)"""
        super(__WidgetGroup, self).setFillParent(__boolean.valueOf(arg0))

    @overload
    def getText(self) -> 'CharSequence':
        """public java.lang.CharSequence com.badlogic.gdx.scenes.scene2d.ui.TextButton.getText()"""
        return 'CharSequence'.__wrap(super(TextButton, self).getText())

    @overload
    def getCell(self, arg0: 'Actor') -> 'Cell':
        """public <T extends com.badlogic.gdx.scenes.scene2d.Actor> com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Table.getCell(T)"""
        return 'Cell'.__wrap(super(__Table, self).getCell(arg0))

    @override
    @overload
    def needsLayout(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.needsLayout()"""
        return bool.__wrap(super(WidgetGroup, self).needsLayout())

    @override
    @overload
    def setX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setX(float)"""
        super(__scene2d.Actor, self).setX(__float.valueOf(arg0))

    @override
    @overload
    def setOrigin(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOrigin(float,float)"""
        super(__scene2d.Actor, self).setOrigin(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def getCullingArea(self) -> 'math.Rectangle':
        """public com.badlogic.gdx.math.Rectangle com.badlogic.gdx.scenes.scene2d.Group.getCullingArea()"""
        return 'math.Rectangle'.__wrap(super(scene2d.Group, self).getCullingArea())

    @override
    @overload
    def getRight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getRight()"""
        return float.__wrap(super(scene2d.Actor, self).getRight())

    @overload
    def isAscendantOf(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isAscendantOf(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Actor, self).isAscendantOf(arg0))

    @override
    @overload
    def hasParent(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasParent()"""
        return bool.__wrap(super(scene2d.Actor, self).hasParent())

    @override
    @overload
    def getChildren(self) -> 'utils.SnapshotArray':
        """public com.badlogic.gdx.utils.SnapshotArray<com.badlogic.gdx.scenes.scene2d.Actor> com.badlogic.gdx.scenes.scene2d.Group.getChildren()"""
        return 'utils.SnapshotArray'.__wrap(super(scene2d.Group, self).getChildren())

    @override
    @overload
    def getScaleY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getScaleY()"""
        return float.__wrap(super(scene2d.Actor, self).getScaleY())

    @override
    @overload
    def setSkin(self, arg0: 'Skin'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.setSkin(com.badlogic.gdx.scenes.scene2d.ui.Skin)"""
        super(__Table, self).setSkin(arg0)

    @override
    @overload
    def getWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getWidth()"""
        return float.__wrap(super(scene2d.Actor, self).getWidth())

    @override
    @overload
    def setPosition(self, arg0: float, arg1: float, arg2: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setPosition(float,float,int)"""
        super(__scene2d.Actor, self).setPosition(__float.valueOf(arg0), __float.valueOf(arg1), __int.valueOf(arg2))

    @override
    @overload
    def setLayoutEnabled(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.setLayoutEnabled(boolean)"""
        super(__WidgetGroup, self).setLayoutEnabled(__boolean.valueOf(arg0))

    @overload
    def removeCaptureListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.removeCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).removeCaptureListener(arg0))

    @override
    @overload
    def invalidateHierarchy(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.invalidateHierarchy()"""
        super(WidgetGroup, self).invalidateHierarchy()

    @override
    @overload
    def setColor(self, arg0: 'Color'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setColor(com.badlogic.gdx.graphics.Color)"""
        super(__scene2d.Actor, self).setColor(arg0)

    @overload
    def addCaptureListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.addCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).addCaptureListener(arg0))

    @overload
    def fire(self, arg0: 'Event') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.fire(com.badlogic.gdx.scenes.scene2d.Event)"""
        return bool.__wrap(super(__scene2d.Actor, self).fire(arg0))

    @overload
    def columnDefaults(self, arg0: int) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell com.badlogic.gdx.scenes.scene2d.ui.Table.columnDefaults(int)"""
        return 'Cell'.__wrap(super(__Table, self).columnDefaults(__int.valueOf(arg0)))

    @override
    @overload
    def remove(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.remove()"""
        return bool.__wrap(super(scene2d.Actor, self).remove())

    @override
    @overload
    def isVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).isVisible())

    @override
    @overload
    def defaults(self) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell com.badlogic.gdx.scenes.scene2d.ui.Table.defaults()"""
        return 'Cell'.__wrap(super(Table, self).defaults())

    @overload
    def pad(self, arg0: 'Value') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.pad(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Table'.__wrap(super(__Table, self).pad(arg0))

    @override
    @overload
    def getPadBottomValue(self) -> 'Value':
        """public com.badlogic.gdx.scenes.scene2d.ui.Value com.badlogic.gdx.scenes.scene2d.ui.Table.getPadBottomValue()"""
        return 'Value'.__wrap(super(Table, self).getPadBottomValue())

    @override
    @overload
    def getTop(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getTop()"""
        return float.__wrap(super(scene2d.Actor, self).getTop())

    @override
    @overload
    def clearActions(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clearActions()"""
        super(scene2d.Actor, self).clearActions()

    @override
    @overload
    def setRotation(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setRotation(float)"""
        super(__scene2d.Actor, self).setRotation(__float.valueOf(arg0))

    @override
    @overload
    def getScaleX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getScaleX()"""
        return float.__wrap(super(scene2d.Actor, self).getScaleX())

    @override
    @overload
    def setBackground(self, arg0: str):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.setBackground(java.lang.String)"""
        super(__Table, self).setBackground(arg0)

    @overload
    def firstAscendant(self, arg0: 'Class') -> 'scene2d.Actor':
        """public <T extends com.badlogic.gdx.scenes.scene2d.Actor> T com.badlogic.gdx.scenes.scene2d.Actor.firstAscendant(java.lang.Class<T>)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Actor, self).firstAscendant(arg0))

    @override
    @overload
    def setScaleY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScaleY(float)"""
        super(__scene2d.Actor, self).setScaleY(__float.valueOf(arg0))

    @overload
    def stageToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.stageToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).stageToLocalCoordinates(arg0))

    @override
    @overload
    def bottom(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.bottom()"""
        return 'Table'.__wrap(super(Table, self).bottom())

    @overload
    def swapActor(self, arg0: int, arg1: int) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.swapActor(int,int)"""
        return bool.__wrap(super(__scene2d.Group, self).swapActor(__int.valueOf(arg0), __int.valueOf(arg1)))

    @override
    @overload
    def hasChildren(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.hasChildren()"""
        return bool.__wrap(super(scene2d.Group, self).hasChildren())

    @override
    @overload
    def ascendantsVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.ascendantsVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).ascendantsVisible())

    @override
    @overload
    def getAlign(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.ui.Table.getAlign()"""
        return int.__wrap(super(Table, self).getAlign())

    @override
    @overload
    def debugCell(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.debugCell()"""
        return 'Table'.__wrap(super(Table, self).debugCell())

    @override
    @overload
    def getColumns(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.ui.Table.getColumns()"""
        return int.__wrap(super(Table, self).getColumns())

    @override
    @overload
    def debugActor(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.debugActor()"""
        return 'Table'.__wrap(super(Table, self).debugActor())

    @overload
    def padTop(self, arg0: 'Value') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padTop(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Table'.__wrap(super(__Table, self).padTop(arg0))

    @override
    @overload
    def getColor(self) -> 'graphics.Color':
        """public com.badlogic.gdx.graphics.Color com.badlogic.gdx.scenes.scene2d.Actor.getColor()"""
        return 'graphics.Color'.__wrap(super(scene2d.Actor, self).getColor())

    @override
    @overload
    def isTransform(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.isTransform()"""
        return bool.__wrap(super(scene2d.Group, self).isTransform())

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @override
    @overload
    def isTouchable(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchable()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchable())

    @overload
    def clipBegin(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.clipBegin(float,float,float,float)"""
        return bool.__wrap(super(__scene2d.Actor, self).clipBegin(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3)))

    @override
    @overload
    def getCells(self) -> 'utils.Array':
        """public com.badlogic.gdx.utils.Array<com.badlogic.gdx.scenes.scene2d.ui.Cell> com.badlogic.gdx.scenes.scene2d.ui.Table.getCells()"""
        return 'utils.Array'.__wrap(super(Table, self).getCells())

    @override
    @overload
    def getPadTopValue(self) -> 'Value':
        """public com.badlogic.gdx.scenes.scene2d.ui.Value com.badlogic.gdx.scenes.scene2d.ui.Table.getPadTopValue()"""
        return 'Value'.__wrap(super(Table, self).getPadTopValue()) 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.Stack
from pyquantum_helper import import_once as __import_once__
import com.badlogic.gdx.scenes.scene2d.Touchable as __Touchable
__Touchable = __Touchable
try:
    from pygdx.scenes import scene2d
except ImportError:
    scene2d = __import_once__("pygdx.scenes.scene2d")

import com.badlogic.gdx.graphics.Color as __Color
__Color = __Color
import java.lang.Boolean as __boolean
try:
    from pygdx.graphics import g2d
except ImportError:
    g2d = __import_once__("pygdx.graphics.g2d")

from builtins import type
import com.badlogic.gdx.scenes.scene2d.Group as __Group
__Group = __Group
import com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup as __WidgetGroup
__WidgetGroup = __WidgetGroup
import com.badlogic.gdx.scenes.scene2d.ui.Stack as __Stack
__Stack = __Stack
import com.badlogic.gdx.math.Vector2 as __Vector2
__Vector2 = __Vector2
import com.badlogic.gdx.math.Rectangle as __Rectangle
__Rectangle = __Rectangle
import java.lang.Class as __Class
__Class = __Class
import com.badlogic.gdx.utils.Array as __Array
__Array = __Array
import java.lang.String as __string
try:
    from pygdx import math
except ImportError:
    math = __import_once__("pygdx.math")

from builtins import bool
from builtins import str
try:
    from pygdx import utils
except ImportError:
    utils = __import_once__("pygdx.utils")

from pyquantum_helper import override
import java.lang.Object as __object
from builtins import float
from builtins import object
import com.badlogic.gdx.utils.DelayedRemovalArray as __DelayedRemovalArray
__DelayedRemovalArray = __DelayedRemovalArray
import java.lang.Long as __long
import java.lang.Float as __float
import java.lang.String as __String
__String = __String
try:
    from pygdx.graphics import glutils
except ImportError:
    glutils = __import_once__("pygdx.graphics.glutils")

import java.lang.Object as __Object
__Object = __Object
import com.badlogic.gdx.utils.SnapshotArray as __SnapshotArray
__SnapshotArray = __SnapshotArray
import com.badlogic.gdx.scenes.scene2d.Actor as __Actor
__Actor = __Actor
import java.lang.Integer as __int
import com.badlogic.gdx.scenes.scene2d.Stage as __Stage
__Stage = __Stage
try:
    from pygdx import graphics
except ImportError:
    graphics = __import_once__("pygdx.graphics")

from builtins import int
 
class Stack(__WidgetGroup, WidgetGroup):
    """com.badlogic.gdx.scenes.scene2d.ui.Stack"""
 
    @staticmethod
    def __wrap(java_value: __Stack) -> 'Stack':
        return Stack(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Stack):
        """
        Dynamic initializer for Stack.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def getY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getY()"""
        return float.__wrap(super(scene2d.Actor, self).getY())

    @overload
    def localToDescendantCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Group.localToDescendantCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Group, self).localToDescendantCoordinates(arg0, arg1))

    @overload
    def setZIndex(self, arg0: int) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.setZIndex(int)"""
        return bool.__wrap(super(__scene2d.Actor, self).setZIndex(__int.valueOf(arg0)))

    @override
    @overload
    def setBounds(self, arg0: float, arg1: float, arg2: float, arg3: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setBounds(float,float,float,float)"""
        super(__scene2d.Actor, self).setBounds(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def __init__(self, ):
        """public com.badlogic.gdx.scenes.scene2d.ui.Stack()"""
        val = __Stack()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def getX(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getX(int)"""
        return float.__wrap(super(__scene2d.Actor, self).getX(__int.valueOf(arg0)))

    @override
    @overload
    def sizeBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.sizeBy(float)"""
        super(__scene2d.Actor, self).sizeBy(__float.valueOf(arg0))

    @overload
    def findActor(self, arg0: str) -> 'scene2d.Actor':
        """public <T extends com.badlogic.gdx.scenes.scene2d.Actor> T com.badlogic.gdx.scenes.scene2d.Group.findActor(java.lang.String)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Group, self).findActor(arg0))

    @override
    @overload
    def sizeBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.sizeBy(float,float)"""
        super(__scene2d.Actor, self).sizeBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def hasActions(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasActions()"""
        return bool.__wrap(super(scene2d.Actor, self).hasActions())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0))

    @override
    @overload
    def setScaleX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScaleX(float)"""
        super(__scene2d.Actor, self).setScaleX(__float.valueOf(arg0))

    @override
    @overload
    def getTouchable(self) -> 'scene2d.Touchable':
        """public com.badlogic.gdx.scenes.scene2d.Touchable com.badlogic.gdx.scenes.scene2d.Actor.getTouchable()"""
        return 'scene2d.Touchable'.__wrap(super(scene2d.Actor, self).getTouchable())

    @override
    @overload
    def removeAction(self, arg0: 'Action'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.removeAction(com.badlogic.gdx.scenes.scene2d.Action)"""
        super(__scene2d.Actor, self).removeAction(arg0)

    @overload
    def add(self, arg0: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Stack.add(com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__Stack, self).add(arg0)

    @override
    @overload
    def getX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getX()"""
        return float.__wrap(super(scene2d.Actor, self).getX())

    @override
    @overload
    def getMaxHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Stack.getMaxHeight()"""
        return float.__wrap(super(Stack, self).getMaxHeight())

    @override
    @overload
    def toBack(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.toBack()"""
        super(scene2d.Actor, self).toBack()

    @override
    @overload
    def setDebug(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setDebug(boolean)"""
        super(__scene2d.Actor, self).setDebug(__boolean.valueOf(arg0))

    @override
    @overload
    def setX(self, arg0: float, arg1: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setX(float,int)"""
        super(__scene2d.Actor, self).setX(__float.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def screenToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.screenToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).screenToLocalCoordinates(arg0))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def ancestorsVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.ancestorsVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).ancestorsVisible())

    @override
    @overload
    def getListeners(self) -> 'utils.DelayedRemovalArray':
        """public com.badlogic.gdx.utils.DelayedRemovalArray<com.badlogic.gdx.scenes.scene2d.EventListener> com.badlogic.gdx.scenes.scene2d.Actor.getListeners()"""
        return 'utils.DelayedRemovalArray'.__wrap(super(scene2d.Actor, self).getListeners())

    @override
    @overload
    def debugAll(self) -> 'scene2d.Group':
        """public com.badlogic.gdx.scenes.scene2d.Group com.badlogic.gdx.scenes.scene2d.Group.debugAll()"""
        return 'scene2d.Group'.__wrap(super(scene2d.Group, self).debugAll())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def removeListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.removeListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).removeListener(arg0))

    @override
    @overload
    def isTouchFocusListener(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchFocusListener()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchFocusListener())

    @overload
    def localToStageCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToStageCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToStageCoordinates(arg0))

    @override
    @overload
    def setSize(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setSize(float,float)"""
        super(__scene2d.Actor, self).setSize(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def getZIndex(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.Actor.getZIndex()"""
        return int.__wrap(super(scene2d.Actor, self).getZIndex())

    @override
    @overload
    def clipBegin(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.clipBegin()"""
        return bool.__wrap(super(scene2d.Actor, self).clipBegin())

    @override
    @overload
    def moveBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.moveBy(float,float)"""
        super(__scene2d.Actor, self).moveBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def getY(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getY(int)"""
        return float.__wrap(super(__scene2d.Actor, self).getY(__int.valueOf(arg0)))

    @override
    @overload
    def getMinWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Stack.getMinWidth()"""
        return float.__wrap(super(Stack, self).getMinWidth())

    @override
    @overload
    def setOrigin(self, arg0: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOrigin(int)"""
        super(__scene2d.Actor, self).setOrigin(__int.valueOf(arg0))

    @override
    @overload
    def validate(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.validate()"""
        super(WidgetGroup, self).validate()

    @overload
    def isDescendantOf(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isDescendantOf(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Actor, self).isDescendantOf(arg0))

    @override
    @overload
    def addActorBefore(self, arg0: 'Actor', arg1: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.addActorBefore(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__scene2d.Group, self).addActorBefore(arg0, arg1)

    @override
    @overload
    def getParent(self) -> 'scene2d.Group':
        """public com.badlogic.gdx.scenes.scene2d.Group com.badlogic.gdx.scenes.scene2d.Actor.getParent()"""
        return 'scene2d.Group'.__wrap(super(scene2d.Actor, self).getParent())

    @override
    @overload
    def clearListeners(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clearListeners()"""
        super(scene2d.Actor, self).clearListeners()

    @overload
    def localToActorCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToActorCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToActorCoordinates(arg0, arg1))

    @override
    @overload
    def setName(self, arg0: str):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setName(java.lang.String)"""
        super(__scene2d.Actor, self).setName(arg0)

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @override
    @overload
    def setOriginX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOriginX(float)"""
        super(__scene2d.Actor, self).setOriginX(__float.valueOf(arg0))

    @override
    @overload
    def getHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getHeight()"""
        return float.__wrap(super(scene2d.Actor, self).getHeight())

    @overload
    def swapActor(self, arg0: 'Actor', arg1: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.swapActor(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Group, self).swapActor(arg0, arg1))

    @override
    @overload
    def hasKeyboardFocus(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasKeyboardFocus()"""
        return bool.__wrap(super(scene2d.Actor, self).hasKeyboardFocus())

    @override
    @overload
    def getOriginY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getOriginY()"""
        return float.__wrap(super(scene2d.Actor, self).getOriginY())

    @override
    @overload
    def pack(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.pack()"""
        super(WidgetGroup, self).pack()

    @override
    @overload
    def clipEnd(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clipEnd()"""
        super(scene2d.Actor, self).clipEnd()

    @override
    @overload
    def getUserObject(self) -> object:
        """public java.lang.Object com.badlogic.gdx.scenes.scene2d.Actor.getUserObject()"""
        return object.__wrap(super(scene2d.Actor, self).getUserObject())

    @override
    @overload
    def layout(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Stack.layout()"""
        super(Stack, self).layout()

    @override
    @overload
    def invalidate(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Stack.invalidate()"""
        super(Stack, self).invalidate()

    @override
    @overload
    def getDebug(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.getDebug()"""
        return bool.__wrap(super(scene2d.Actor, self).getDebug())

    @override
    @overload
    def setHeight(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setHeight(float)"""
        super(__scene2d.Actor, self).setHeight(__float.valueOf(arg0))

    @override
    @overload
    def setScale(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScale(float)"""
        super(__scene2d.Actor, self).setScale(__float.valueOf(arg0))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def rotateBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.rotateBy(float)"""
        super(__scene2d.Actor, self).rotateBy(__float.valueOf(arg0))

    @override
    @overload
    def setDebug(self, arg0: bool, arg1: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Group.setDebug(boolean,boolean)"""
        super(__scene2d.Group, self).setDebug(__boolean.valueOf(arg0), __boolean.valueOf(arg1))

    @override
    @overload
    def drawDebug(self, arg0: 'ShapeRenderer'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.drawDebug(com.badlogic.gdx.graphics.glutils.ShapeRenderer)"""
        super(__scene2d.Group, self).drawDebug(arg0)

    @override
    @overload
    def setScale(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScale(float,float)"""
        super(__scene2d.Actor, self).setScale(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def setTransform(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Group.setTransform(boolean)"""
        super(__scene2d.Group, self).setTransform(__boolean.valueOf(arg0))

    @overload
    def addListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.addListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).addListener(arg0))

    @override
    @overload
    def getMinHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Stack.getMinHeight()"""
        return float.__wrap(super(Stack, self).getMinHeight())

    @overload
    def parentToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.parentToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).parentToLocalCoordinates(arg0))

    @override
    @overload
    def getRotation(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getRotation()"""
        return float.__wrap(super(scene2d.Actor, self).getRotation())

    @override
    @overload
    def setVisible(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setVisible(boolean)"""
        super(__scene2d.Actor, self).setVisible(__boolean.valueOf(arg0))

    @override
    @overload
    def setY(self, arg0: float, arg1: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setY(float,int)"""
        super(__scene2d.Actor, self).setY(__float.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def setFillParent(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.setFillParent(boolean)"""
        super(__WidgetGroup, self).setFillParent(__boolean.valueOf(arg0))

    @override
    @overload
    def needsLayout(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.needsLayout()"""
        return bool.__wrap(super(WidgetGroup, self).needsLayout())

    @override
    @overload
    def setX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setX(float)"""
        super(__scene2d.Actor, self).setX(__float.valueOf(arg0))

    @override
    @overload
    def setOrigin(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOrigin(float,float)"""
        super(__scene2d.Actor, self).setOrigin(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def addActor(self, arg0: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.addActor(com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__scene2d.Group, self).addActor(arg0)

    @override
    @overload
    def getCullingArea(self) -> 'math.Rectangle':
        """public com.badlogic.gdx.math.Rectangle com.badlogic.gdx.scenes.scene2d.Group.getCullingArea()"""
        return 'math.Rectangle'.__wrap(super(scene2d.Group, self).getCullingArea())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def getRight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getRight()"""
        return float.__wrap(super(scene2d.Actor, self).getRight())

    @overload
    def isAscendantOf(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isAscendantOf(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Actor, self).isAscendantOf(arg0))

    @override
    @overload
    def setWidth(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setWidth(float)"""
        super(__scene2d.Actor, self).setWidth(__float.valueOf(arg0))

    @override
    @overload
    def isTouchFocusTarget(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchFocusTarget()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchFocusTarget())

    @override
    @overload
    def hasParent(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasParent()"""
        return bool.__wrap(super(scene2d.Actor, self).hasParent())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.Group.toString()"""
        return str.__wrap(super(scene2d.Group, self).toString())

    @override
    @overload
    def setPosition(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setPosition(float,float)"""
        super(__scene2d.Actor, self).setPosition(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def getChildren(self) -> 'utils.SnapshotArray':
        """public com.badlogic.gdx.utils.SnapshotArray<com.badlogic.gdx.scenes.scene2d.Actor> com.badlogic.gdx.scenes.scene2d.Group.getChildren()"""
        return 'utils.SnapshotArray'.__wrap(super(scene2d.Group, self).getChildren())

    @overload
    def __init__(self):
        """public com.badlogic.gdx.scenes.scene2d.ui.Stack()"""
        val = __Stack()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def addActorAt(self, arg0: int, arg1: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.addActorAt(int,com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__scene2d.Group, self).addActorAt(__int.valueOf(arg0), arg1)

    @override
    @overload
    def getScaleY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getScaleY()"""
        return float.__wrap(super(scene2d.Actor, self).getScaleY())

    @override
    @overload
    def getWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getWidth()"""
        return float.__wrap(super(scene2d.Actor, self).getWidth())

    @overload
    def removeActorAt(self, arg0: int, arg1: bool) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.Group.removeActorAt(int,boolean)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Group, self).removeActorAt(__int.valueOf(arg0), __boolean.valueOf(arg1)))

    @override
    @overload
    def setOriginY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOriginY(float)"""
        super(__scene2d.Actor, self).setOriginY(__float.valueOf(arg0))

    @override
    @overload
    def setPosition(self, arg0: float, arg1: float, arg2: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setPosition(float,float,int)"""
        super(__scene2d.Actor, self).setPosition(__float.valueOf(arg0), __float.valueOf(arg1), __int.valueOf(arg2))

    @override
    @overload
    def setLayoutEnabled(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.setLayoutEnabled(boolean)"""
        super(__WidgetGroup, self).setLayoutEnabled(__boolean.valueOf(arg0))

    @overload
    def removeCaptureListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.removeCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).removeCaptureListener(arg0))

    @override
    @overload
    def invalidateHierarchy(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.invalidateHierarchy()"""
        super(WidgetGroup, self).invalidateHierarchy()

    @override
    @overload
    def setColor(self, arg0: 'Color'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setColor(com.badlogic.gdx.graphics.Color)"""
        super(__scene2d.Actor, self).setColor(arg0)

    @overload
    def localToScreenCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToScreenCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToScreenCoordinates(arg0))

    @override
    @overload
    def clear(self):
        """public void com.badlogic.gdx.scenes.scene2d.Group.clear()"""
        super(scene2d.Group, self).clear()

    @overload
    def removeActor(self, arg0: 'Actor', arg1: bool) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.removeActor(com.badlogic.gdx.scenes.scene2d.Actor,boolean)"""
        return bool.__wrap(super(__scene2d.Group, self).removeActor(arg0, __boolean.valueOf(arg1)))

    @override
    @overload
    def setTouchable(self, arg0: 'Touchable'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setTouchable(com.badlogic.gdx.scenes.scene2d.Touchable)"""
        super(__scene2d.Actor, self).setTouchable(arg0)

    @overload
    def addCaptureListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.addCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).addCaptureListener(arg0))

    @overload
    def fire(self, arg0: 'Event') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.fire(com.badlogic.gdx.scenes.scene2d.Event)"""
        return bool.__wrap(super(__scene2d.Actor, self).fire(arg0))

    @override
    @overload
    def remove(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.remove()"""
        return bool.__wrap(super(scene2d.Actor, self).remove())

    @overload
    def hit(self, arg0: float, arg1: float, arg2: bool) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.hit(float,float,boolean)"""
        return 'scene2d.Actor'.__wrap(super(__WidgetGroup, self).hit(__float.valueOf(arg0), __float.valueOf(arg1), __boolean.valueOf(arg2)))

    @override
    @overload
    def getPrefWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Stack.getPrefWidth()"""
        return float.__wrap(super(Stack, self).getPrefWidth())

    @override
    @overload
    def clearChildren(self):
        """public void com.badlogic.gdx.scenes.scene2d.Group.clearChildren()"""
        super(scene2d.Group, self).clearChildren()

    @overload
    def __init__(self, *arg0: 'scene2d.Actor'):
        """public com.badlogic.gdx.scenes.scene2d.ui.Stack(com.badlogic.gdx.scenes.scene2d.Actor...)"""
        val = __Stack(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def localToParentCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToParentCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToParentCoordinates(arg0))

    @override
    @overload
    def setCullingArea(self, arg0: 'Rectangle'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.setCullingArea(com.badlogic.gdx.math.Rectangle)"""
        super(__scene2d.Group, self).setCullingArea(arg0)

    @override
    @overload
    def getName(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.Actor.getName()"""
        return str.__wrap(super(scene2d.Actor, self).getName())

    @override
    @overload
    def isVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).isVisible())

    @override
    @overload
    def getMaxWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Stack.getMaxWidth()"""
        return float.__wrap(super(Stack, self).getMaxWidth())

    @override
    @overload
    def getPrefHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Stack.getPrefHeight()"""
        return float.__wrap(super(Stack, self).getPrefHeight())

    @override
    @overload
    def getCaptureListeners(self) -> 'utils.DelayedRemovalArray':
        """public com.badlogic.gdx.utils.DelayedRemovalArray<com.badlogic.gdx.scenes.scene2d.EventListener> com.badlogic.gdx.scenes.scene2d.Actor.getCaptureListeners()"""
        return 'utils.DelayedRemovalArray'.__wrap(super(scene2d.Actor, self).getCaptureListeners())

    @override
    @overload
    def debug(self) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.Actor.debug()"""
        return 'scene2d.Actor'.__wrap(super(scene2d.Actor, self).debug())

    @override
    @overload
    def clear(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Group.clear(boolean)"""
        super(__scene2d.Group, self).clear(__boolean.valueOf(arg0))

    @override
    @overload
    def getTop(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getTop()"""
        return float.__wrap(super(scene2d.Actor, self).getTop())

    @override
    @overload
    def setY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setY(float)"""
        super(__scene2d.Actor, self).setY(__float.valueOf(arg0))

    @override
    @overload
    def clearActions(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clearActions()"""
        super(scene2d.Actor, self).clearActions()

    @override
    @overload
    def addActorAfter(self, arg0: 'Actor', arg1: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.addActorAfter(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__scene2d.Group, self).addActorAfter(arg0, arg1)

    @override
    @overload
    def scaleBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.scaleBy(float,float)"""
        super(__scene2d.Actor, self).scaleBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def setRotation(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setRotation(float)"""
        super(__scene2d.Actor, self).setRotation(__float.valueOf(arg0))

    @override
    @overload
    def getScaleX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getScaleX()"""
        return float.__wrap(super(scene2d.Actor, self).getScaleX())

    @overload
    def firstAscendant(self, arg0: 'Class') -> 'scene2d.Actor':
        """public <T extends com.badlogic.gdx.scenes.scene2d.Actor> T com.badlogic.gdx.scenes.scene2d.Actor.firstAscendant(java.lang.Class<T>)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Actor, self).firstAscendant(arg0))

    @overload
    def notify(self, arg0: 'Event', arg1: bool) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.notify(com.badlogic.gdx.scenes.scene2d.Event,boolean)"""
        return bool.__wrap(super(__scene2d.Actor, self).notify(arg0, __boolean.valueOf(arg1)))

    @override
    @overload
    def act(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Group.act(float)"""
        super(__scene2d.Group, self).act(__float.valueOf(arg0))

    @override
    @overload
    def setUserObject(self, arg0: object):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setUserObject(java.lang.Object)"""
        super(__scene2d.Actor, self).setUserObject(arg0)

    @override
    @overload
    def setScaleY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScaleY(float)"""
        super(__scene2d.Actor, self).setScaleY(__float.valueOf(arg0))

    @override
    @overload
    def hasScrollFocus(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasScrollFocus()"""
        return bool.__wrap(super(scene2d.Actor, self).hasScrollFocus())

    @override
    @overload
    def toFront(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.toFront()"""
        super(scene2d.Actor, self).toFront()

    @override
    @overload
    def scaleBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.scaleBy(float)"""
        super(__scene2d.Actor, self).scaleBy(__float.valueOf(arg0))

    @overload
    def stageToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.stageToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).stageToLocalCoordinates(arg0))

    @overload
    def swapActor(self, arg0: int, arg1: int) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.swapActor(int,int)"""
        return bool.__wrap(super(__scene2d.Group, self).swapActor(__int.valueOf(arg0), __int.valueOf(arg1)))

    @override
    @overload
    def getOriginX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getOriginX()"""
        return float.__wrap(super(scene2d.Actor, self).getOriginX())

    @override
    @overload
    def draw(self, arg0: 'Batch', arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.draw(com.badlogic.gdx.graphics.g2d.Batch,float)"""
        super(__WidgetGroup, self).draw(arg0, __float.valueOf(arg1))

    @overload
    def getChild(self, arg0: int) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.Group.getChild(int)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Group, self).getChild(__int.valueOf(arg0)))

    @override
    @overload
    def hasChildren(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.hasChildren()"""
        return bool.__wrap(super(scene2d.Group, self).hasChildren())

    @override
    @overload
    def ascendantsVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.ascendantsVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).ascendantsVisible())

    @overload
    def removeActor(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.removeActor(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Group, self).removeActor(arg0))

    @override
    @overload
    def clearChildren(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Group.clearChildren(boolean)"""
        super(__scene2d.Group, self).clearChildren(__boolean.valueOf(arg0))

    @override
    @overload
    def getColor(self) -> 'graphics.Color':
        """public com.badlogic.gdx.graphics.Color com.badlogic.gdx.scenes.scene2d.Actor.getColor()"""
        return 'graphics.Color'.__wrap(super(scene2d.Actor, self).getColor())

    @override
    @overload
    def isTransform(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.isTransform()"""
        return bool.__wrap(super(scene2d.Group, self).isTransform())

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @override
    @overload
    def getStage(self) -> 'scene2d.Stage':
        """public com.badlogic.gdx.scenes.scene2d.Stage com.badlogic.gdx.scenes.scene2d.Actor.getStage()"""
        return 'scene2d.Stage'.__wrap(super(scene2d.Actor, self).getStage())

    @override
    @overload
    def addAction(self, arg0: 'Action'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.addAction(com.badlogic.gdx.scenes.scene2d.Action)"""
        super(__scene2d.Actor, self).addAction(arg0)

    @override
    @overload
    def setColor(self, arg0: float, arg1: float, arg2: float, arg3: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setColor(float,float,float,float)"""
        super(__scene2d.Actor, self).setColor(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3))

    @override
    @overload
    def isTouchable(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchable()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchable())

    @overload
    def localToAscendantCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToAscendantCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToAscendantCoordinates(arg0, arg1))

    @overload
    def clipBegin(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.clipBegin(float,float,float,float)"""
        return bool.__wrap(super(__scene2d.Actor, self).clipBegin(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3)))

    @override
    @overload
    def getActions(self) -> 'utils.Array':
        """public com.badlogic.gdx.utils.Array<com.badlogic.gdx.scenes.scene2d.Action> com.badlogic.gdx.scenes.scene2d.Actor.getActions()"""
        return 'utils.Array'.__wrap(super(scene2d.Actor, self).getActions()) 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.Value$Fixed
from pyquantum_helper import import_once as __import_once__
try:
    from pygdx.scenes import scene2d
except ImportError:
    scene2d = __import_once__("pygdx.scenes.scene2d")

from builtins import str
from pyquantum_helper import override
import com.badlogic.gdx.scenes.scene2d.ui.Value as __Value_Fixed
__Fixed = __Value_Fixed.Fixed
import java.lang.Object as __object
from builtins import type
from builtins import float
import java.lang.Long as __long
import java.lang.Float as __float
import java.lang.Class as __Class
__Class = __Class
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import com.badlogic.gdx.scenes.scene2d.ui.Value as __Value
__Value = __Value
import java.lang.Integer as __int
from builtins import bool
from builtins import int
 
class Fixed(__Value, Value):
    """com.badlogic.gdx.scenes.scene2d.ui.Value.Fixed"""
 
    @staticmethod
    def __wrap(java_value: __Fixed) -> 'Fixed':
        return Fixed(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Fixed):
        """
        Dynamic initializer for Fixed.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def get(self, arg0: 'Actor') -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Value$Fixed.get(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return float.__wrap(super(__Fixed, self).get(arg0))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.ui.Value$Fixed.toString()"""
        return str.__wrap(super(Fixed, self).toString())

    @staticmethod
    @overload
    def percentHeight(arg0: float, arg1: 'Actor') -> 'Value':
        """public static com.badlogic.gdx.scenes.scene2d.ui.Value com.badlogic.gdx.scenes.scene2d.ui.Value.percentHeight(float,com.badlogic.gdx.scenes.scene2d.Actor)"""
        return Value.__wrap(__Value.percentHeight(__float.valueOf(arg0), arg1))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def percentHeight(arg0: float) -> 'Value':
        """public static com.badlogic.gdx.scenes.scene2d.ui.Value com.badlogic.gdx.scenes.scene2d.ui.Value.percentHeight(float)"""
        return Value.__wrap(__Value.percentHeight(__float.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @override
    @overload
    def get(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Value.get()"""
        return float.__wrap(super(Value, self).get())

    @staticmethod
    @overload
    def percentWidth(arg0: float) -> 'Value':
        """public static com.badlogic.gdx.scenes.scene2d.ui.Value com.badlogic.gdx.scenes.scene2d.ui.Value.percentWidth(float)"""
        return Value.__wrap(__Value.percentWidth(__float.valueOf(arg0)))

    @staticmethod
    @overload
    def valueOf(arg0: float) -> 'Fixed':
        """public static com.badlogic.gdx.scenes.scene2d.ui.Value$Fixed com.badlogic.gdx.scenes.scene2d.ui.Value$Fixed.valueOf(float)"""
        return Fixed.__wrap(__Fixed.valueOf(__float.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def __init__(self, arg0: float):
        """public com.badlogic.gdx.scenes.scene2d.ui.Value$Fixed(float)"""
        val = __Fixed(__float.valueOf(arg0))
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @staticmethod
    @overload
    def percentWidth(arg0: float, arg1: 'Actor') -> 'Value':
        """public static com.badlogic.gdx.scenes.scene2d.ui.Value com.badlogic.gdx.scenes.scene2d.ui.Value.percentWidth(float,com.badlogic.gdx.scenes.scene2d.Actor)"""
        return Value.__wrap(__Value.percentWidth(__float.valueOf(arg0), arg1))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0)) 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.CheckBox
from pyquantum_helper import import_once as __import_once__
import com.badlogic.gdx.scenes.scene2d.Touchable as __Touchable
__Touchable = __Touchable
import com.badlogic.gdx.scenes.scene2d.ui.Button as __Button
__Button = __Button
import com.badlogic.gdx.scenes.scene2d.Group as __Group
__Group = __Group
import com.badlogic.gdx.math.Vector2 as __Vector2
__Vector2 = __Vector2
import com.badlogic.gdx.math.Rectangle as __Rectangle
__Rectangle = __Rectangle
import java.lang.Class as __Class
__Class = __Class
import com.badlogic.gdx.utils.Array as __Array
__Array = __Array
from builtins import bool
import com.badlogic.gdx.scenes.scene2d.ui.TextButton as __TextButton
__TextButton = __TextButton
import com.badlogic.gdx.scenes.scene2d.ui.CheckBox as __CheckBox
__CheckBox = __CheckBox
import java.lang.CharSequence as CharSequence
try:
    from pygdx.scenes.scene2d import utils
except ImportError:
    utils = __import_once__("pygdx.scenes.scene2d.utils")

try:
    from pygdx import utils
except ImportError:
    utils = __import_once__("pygdx.utils")

from builtins import float
import com.badlogic.gdx.scenes.scene2d.ui.Image as __Image
__Image = __Image
import com.badlogic.gdx.scenes.scene2d.utils.ClickListener as __ClickListener
__ClickListener = __ClickListener
import java.lang.Float as __float
import java.lang.String as __String
__String = __String
import com.badlogic.gdx.scenes.scene2d.ui.Skin as __Skin
__Skin = __Skin
import java.lang.Object as __Object
__Object = __Object
import com.badlogic.gdx.scenes.scene2d.ui.CheckBox as __CheckBox_CheckBoxStyle
__CheckBoxStyle = __CheckBox_CheckBoxStyle.CheckBoxStyle
import com.badlogic.gdx.scenes.scene2d.Actor as __Actor
__Actor = __Actor
try:
    from pygdx import graphics
except ImportError:
    graphics = __import_once__("pygdx.graphics")

from builtins import int
try:
    from pygdx.scenes import scene2d
except ImportError:
    scene2d = __import_once__("pygdx.scenes.scene2d")

import com.badlogic.gdx.graphics.Color as __Color
__Color = __Color
import java.lang.Boolean as __boolean
try:
    from pygdx.graphics import g2d
except ImportError:
    g2d = __import_once__("pygdx.graphics.g2d")

from builtins import type
import com.badlogic.gdx.scenes.scene2d.ui.Cell as __Cell
__Cell = __Cell
import com.badlogic.gdx.scenes.scene2d.ui.Table as __Table
__Table = __Table
import com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup as __WidgetGroup
__WidgetGroup = __WidgetGroup
import com.badlogic.gdx.scenes.scene2d.ui.Table as __Table_Debug
__Debug = __Table_Debug.Debug
import java.lang.String as __string
import java.lang.CharSequence as __CharSequence
__CharSequence = __CharSequence
try:
    from pygdx import math
except ImportError:
    math = __import_once__("pygdx.math")

import com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup as __ButtonGroup
__ButtonGroup = __ButtonGroup
from builtins import str
from pyquantum_helper import override
import java.lang.Object as __object
from builtins import object
import com.badlogic.gdx.utils.DelayedRemovalArray as __DelayedRemovalArray
__DelayedRemovalArray = __DelayedRemovalArray
import java.lang.Long as __long
try:
    from pygdx.graphics import glutils
except ImportError:
    glutils = __import_once__("pygdx.graphics.glutils")

import com.badlogic.gdx.utils.SnapshotArray as __SnapshotArray
__SnapshotArray = __SnapshotArray
import java.lang.Integer as __int
import com.badlogic.gdx.scenes.scene2d.ui.Value as __Value
__Value = __Value
import com.badlogic.gdx.scenes.scene2d.Stage as __Stage
__Stage = __Stage
import com.badlogic.gdx.scenes.scene2d.ui.Label as __Label
__Label = __Label
import com.badlogic.gdx.scenes.scene2d.utils.Drawable as __Drawable
__Drawable = __Drawable
 
class CheckBox(__TextButton, TextButton):
    """com.badlogic.gdx.scenes.scene2d.ui.CheckBox"""
 
    @staticmethod
    def __wrap(java_value: __CheckBox) -> 'CheckBox':
        return CheckBox(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __CheckBox):
        """
        Dynamic initializer for CheckBox.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def getColumnPrefWidth(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getColumnPrefWidth(int)"""
        return float.__wrap(super(__Table, self).getColumnPrefWidth(__int.valueOf(arg0)))

    @override
    @overload
    def getY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getY()"""
        return float.__wrap(super(scene2d.Actor, self).getY())

    @override
    @overload
    def setBounds(self, arg0: float, arg1: float, arg2: float, arg3: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setBounds(float,float,float,float)"""
        super(__scene2d.Actor, self).setBounds(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def add(self, arg0: 'CharSequence', arg1: str, arg2: str) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<com.badlogic.gdx.scenes.scene2d.ui.Label> com.badlogic.gdx.scenes.scene2d.ui.Table.add(java.lang.CharSequence,java.lang.String,java.lang.String)"""
        return 'Cell'.__wrap(super(__Table, self).add(arg0, arg1, arg2))

    @overload
    def findActor(self, arg0: str) -> 'scene2d.Actor':
        """public <T extends com.badlogic.gdx.scenes.scene2d.Actor> T com.badlogic.gdx.scenes.scene2d.Group.findActor(java.lang.String)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Group, self).findActor(arg0))

    @override
    @overload
    def isOver(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Button.isOver()"""
        return bool.__wrap(super(Button, self).isOver())

    @override
    @overload
    def getPrefWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Button.getPrefWidth()"""
        return float.__wrap(super(Button, self).getPrefWidth())

    @override
    @overload
    def setStyle(self, arg0: 'ButtonStyle'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.CheckBox.setStyle(com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle)"""
        super(__CheckBox, self).setStyle(arg0)

    @overload
    def removeActor(self, arg0: 'Actor', arg1: bool) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Table.removeActor(com.badlogic.gdx.scenes.scene2d.Actor,boolean)"""
        return bool.__wrap(super(__Table, self).removeActor(arg0, __boolean.valueOf(arg1)))

    @override
    @overload
    def getTouchable(self) -> 'scene2d.Touchable':
        """public com.badlogic.gdx.scenes.scene2d.Touchable com.badlogic.gdx.scenes.scene2d.Actor.getTouchable()"""
        return 'scene2d.Touchable'.__wrap(super(scene2d.Actor, self).getTouchable())

    @override
    @overload
    def removeAction(self, arg0: 'Action'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.removeAction(com.badlogic.gdx.scenes.scene2d.Action)"""
        super(__scene2d.Actor, self).removeAction(arg0)

    @override
    @overload
    def getClickListener(self) -> 'utils.ClickListener':
        """public com.badlogic.gdx.scenes.scene2d.utils.ClickListener com.badlogic.gdx.scenes.scene2d.ui.Button.getClickListener()"""
        return 'utils.ClickListener'.__wrap(super(Button, self).getClickListener())

    @override
    @overload
    def getPadTop(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getPadTop()"""
        return float.__wrap(super(Table, self).getPadTop())

    @override
    @overload
    def drawDebug(self, arg0: 'ShapeRenderer'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.drawDebug(com.badlogic.gdx.graphics.glutils.ShapeRenderer)"""
        super(__Table, self).drawDebug(arg0)

    @override
    @overload
    def setDisabled(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Button.setDisabled(boolean)"""
        super(__Button, self).setDisabled(__boolean.valueOf(arg0))

    @overload
    def padRight(self, arg0: 'Value') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padRight(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Table'.__wrap(super(__Table, self).padRight(arg0))

    @override
    @overload
    def getMaxWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.getMaxWidth()"""
        return float.__wrap(super(WidgetGroup, self).getMaxWidth())

    @overload
    def __init__(self, arg0: str, arg1: 'Skin'):
        """public com.badlogic.gdx.scenes.scene2d.ui.CheckBox(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin)"""
        val = __CheckBox(arg0, arg1)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def setX(self, arg0: float, arg1: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setX(float,int)"""
        super(__scene2d.Actor, self).setX(__float.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def reset(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.reset()"""
        super(Table, self).reset()

    @override
    @overload
    def getListeners(self) -> 'utils.DelayedRemovalArray':
        """public com.badlogic.gdx.utils.DelayedRemovalArray<com.badlogic.gdx.scenes.scene2d.EventListener> com.badlogic.gdx.scenes.scene2d.Actor.getListeners()"""
        return 'utils.DelayedRemovalArray'.__wrap(super(scene2d.Actor, self).getListeners())

    @overload
    def removeListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.removeListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).removeListener(arg0))

    @override
    @overload
    def isTouchFocusListener(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchFocusListener()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchFocusListener())

    @overload
    def localToStageCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToStageCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToStageCoordinates(arg0))

    @override
    @overload
    def clipBegin(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.clipBegin()"""
        return bool.__wrap(super(scene2d.Actor, self).clipBegin())

    @override
    @overload
    def moveBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.moveBy(float,float)"""
        super(__scene2d.Actor, self).moveBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def pad(self, arg0: float) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.pad(float)"""
        return 'Table'.__wrap(super(__Table, self).pad(__float.valueOf(arg0)))

    @override
    @overload
    def setName(self, arg0: str):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setName(java.lang.String)"""
        super(__scene2d.Actor, self).setName(arg0)

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @overload
    def getRowMinHeight(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getRowMinHeight(int)"""
        return float.__wrap(super(__Table, self).getRowMinHeight(__int.valueOf(arg0)))

    @overload
    def swapActor(self, arg0: 'Actor', arg1: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.swapActor(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Group, self).swapActor(arg0, arg1))

    @override
    @overload
    def draw(self, arg0: 'Batch', arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.CheckBox.draw(com.badlogic.gdx.graphics.g2d.Batch,float)"""
        super(__CheckBox, self).draw(arg0, __float.valueOf(arg1))

    @override
    @overload
    def getPadX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getPadX()"""
        return float.__wrap(super(Table, self).getPadX())

    @override
    @overload
    def clearChildren(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.clearChildren(boolean)"""
        super(__Table, self).clearChildren(__boolean.valueOf(arg0))

    @overload
    def __init__(self, arg0: str, arg1: 'Skin', arg2: str):
        """public com.badlogic.gdx.scenes.scene2d.ui.CheckBox(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String)"""
        val = __CheckBox(arg0, arg1, arg2)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def getDebug(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.getDebug()"""
        return bool.__wrap(super(scene2d.Actor, self).getDebug())

    @override
    @overload
    def setHeight(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setHeight(float)"""
        super(__scene2d.Actor, self).setHeight(__float.valueOf(arg0))

    @override
    @overload
    def setScale(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScale(float)"""
        super(__scene2d.Actor, self).setScale(__float.valueOf(arg0))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getButtonGroup(self) -> 'ButtonGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup com.badlogic.gdx.scenes.scene2d.ui.Button.getButtonGroup()"""
        return 'ButtonGroup'.__wrap(super(Button, self).getButtonGroup())

    @overload
    def add(self, arg0: 'CharSequence') -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<com.badlogic.gdx.scenes.scene2d.ui.Label> com.badlogic.gdx.scenes.scene2d.ui.Table.add(java.lang.CharSequence)"""
        return 'Cell'.__wrap(super(__Table, self).add(arg0))

    @override
    @overload
    def getLabel(self) -> 'Label':
        """public com.badlogic.gdx.scenes.scene2d.ui.Label com.badlogic.gdx.scenes.scene2d.ui.TextButton.getLabel()"""
        return 'Label'.__wrap(super(TextButton, self).getLabel())

    @overload
    def padBottom(self, arg0: float) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padBottom(float)"""
        return 'Table'.__wrap(super(__Table, self).padBottom(__float.valueOf(arg0)))

    @override
    @overload
    def setDebug(self, arg0: bool, arg1: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Group.setDebug(boolean,boolean)"""
        super(__scene2d.Group, self).setDebug(__boolean.valueOf(arg0), __boolean.valueOf(arg1))

    @override
    @overload
    def row(self) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell com.badlogic.gdx.scenes.scene2d.ui.Table.row()"""
        return 'Cell'.__wrap(super(Table, self).row())

    @override
    @overload
    def setText(self, arg0: str):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextButton.setText(java.lang.String)"""
        super(__TextButton, self).setText(arg0)

    @overload
    def background(self, arg0: 'Drawable') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.background(com.badlogic.gdx.scenes.scene2d.utils.Drawable)"""
        return 'Table'.__wrap(super(__Table, self).background(arg0))

    @override
    @overload
    def setTransform(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Group.setTransform(boolean)"""
        super(__scene2d.Group, self).setTransform(__boolean.valueOf(arg0))

    @overload
    def parentToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.parentToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).parentToLocalCoordinates(arg0))

    @override
    @overload
    def getStyle(self) -> 'CheckBoxStyle':
        """public com.badlogic.gdx.scenes.scene2d.ui.CheckBox$CheckBoxStyle com.badlogic.gdx.scenes.scene2d.ui.CheckBox.getStyle()"""
        return 'CheckBoxStyle'.__wrap(super(CheckBox, self).getStyle())

    @override
    @overload
    def getRotation(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getRotation()"""
        return float.__wrap(super(scene2d.Actor, self).getRotation())

    @override
    @overload
    def getMaxHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.getMaxHeight()"""
        return float.__wrap(super(WidgetGroup, self).getMaxHeight())

    @overload
    def padTop(self, arg0: float) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padTop(float)"""
        return 'Table'.__wrap(super(__Table, self).padTop(__float.valueOf(arg0)))

    @override
    @overload
    def isDisabled(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Button.isDisabled()"""
        return bool.__wrap(super(Button, self).isDisabled())

    @overload
    def padLeft(self, arg0: 'Value') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padLeft(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Table'.__wrap(super(__Table, self).padLeft(arg0))

    @override
    @overload
    def addActor(self, arg0: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.addActor(com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__scene2d.Group, self).addActor(arg0)

    @override
    @overload
    def getText(self) -> 'CharSequence':
        """public java.lang.CharSequence com.badlogic.gdx.scenes.scene2d.ui.TextButton.getText()"""
        return 'CharSequence'.__wrap(super(TextButton, self).getText())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def getBackground(self) -> 'utils.Drawable':
        """public com.badlogic.gdx.scenes.scene2d.utils.Drawable com.badlogic.gdx.scenes.scene2d.ui.Table.getBackground()"""
        return 'utils.Drawable'.__wrap(super(Table, self).getBackground())

    @override
    @overload
    def getPrefHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Button.getPrefHeight()"""
        return float.__wrap(super(Button, self).getPrefHeight())

    @overload
    def pad(self, arg0: float, arg1: float, arg2: float, arg3: float) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.pad(float,float,float,float)"""
        return 'Table'.__wrap(super(__Table, self).pad(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3)))

    @overload
    def add(self, arg0: 'CharSequence', arg1: str) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<com.badlogic.gdx.scenes.scene2d.ui.Label> com.badlogic.gdx.scenes.scene2d.ui.Table.add(java.lang.CharSequence,java.lang.String)"""
        return 'Cell'.__wrap(super(__Table, self).add(arg0, arg1))

    @override
    @overload
    def getRows(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.ui.Table.getRows()"""
        return int.__wrap(super(Table, self).getRows())

    @override
    @overload
    def setWidth(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setWidth(float)"""
        super(__scene2d.Actor, self).setWidth(__float.valueOf(arg0))

    @override
    @overload
    def isTouchFocusTarget(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchFocusTarget()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchFocusTarget())

    @override
    @overload
    def isChecked(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Button.isChecked()"""
        return bool.__wrap(super(Button, self).isChecked())

    @override
    @overload
    def setPosition(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setPosition(float,float)"""
        super(__scene2d.Actor, self).setPosition(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def setClip(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.setClip(boolean)"""
        super(__Table, self).setClip(__boolean.valueOf(arg0))

    @override
    @overload
    def addActorAt(self, arg0: int, arg1: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.addActorAt(int,com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__scene2d.Group, self).addActorAt(__int.valueOf(arg0), arg1)

    @overload
    def hit(self, arg0: float, arg1: float, arg2: bool) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.ui.Table.hit(float,float,boolean)"""
        return 'scene2d.Actor'.__wrap(super(__Table, self).hit(__float.valueOf(arg0), __float.valueOf(arg1), __boolean.valueOf(arg2)))

    @override
    @overload
    def setProgrammaticChangeEvents(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Button.setProgrammaticChangeEvents(boolean)"""
        super(__Button, self).setProgrammaticChangeEvents(__boolean.valueOf(arg0))

    @override
    @overload
    def setOriginY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOriginY(float)"""
        super(__scene2d.Actor, self).setOriginY(__float.valueOf(arg0))

    @override
    @overload
    def getPadY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getPadY()"""
        return float.__wrap(super(Table, self).getPadY())

    @override
    @overload
    def getPadRight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getPadRight()"""
        return float.__wrap(super(Table, self).getPadRight())

    @overload
    def localToScreenCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToScreenCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToScreenCoordinates(arg0))

    @override
    @overload
    def clear(self):
        """public void com.badlogic.gdx.scenes.scene2d.Group.clear()"""
        super(scene2d.Group, self).clear()

    @overload
    def stack(self, *arg0: 'scene2d.Actor') -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<com.badlogic.gdx.scenes.scene2d.ui.Stack> com.badlogic.gdx.scenes.scene2d.ui.Table.stack(com.badlogic.gdx.scenes.scene2d.Actor...)"""
        return 'Cell'.__wrap(super(__Table, self).stack(arg0))

    @override
    @overload
    def setTouchable(self, arg0: 'Touchable'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setTouchable(com.badlogic.gdx.scenes.scene2d.Touchable)"""
        super(__scene2d.Actor, self).setTouchable(arg0)

    @override
    @overload
    def add(self) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell com.badlogic.gdx.scenes.scene2d.ui.Table.add()"""
        return 'Cell'.__wrap(super(Table, self).add())

    @overload
    def getColumnWidth(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getColumnWidth(int)"""
        return float.__wrap(super(__Table, self).getColumnWidth(__int.valueOf(arg0)))

    @override
    @overload
    def clearChildren(self):
        """public void com.badlogic.gdx.scenes.scene2d.Group.clearChildren()"""
        super(scene2d.Group, self).clearChildren()

    @override
    @overload
    def debugAll(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.debugAll()"""
        return 'Table'.__wrap(super(Table, self).debugAll())

    @overload
    def localToParentCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToParentCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToParentCoordinates(arg0))

    @override
    @overload
    def setCullingArea(self, arg0: 'Rectangle'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.setCullingArea(com.badlogic.gdx.math.Rectangle)"""
        super(__scene2d.Group, self).setCullingArea(arg0)

    @override
    @overload
    def getName(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.Actor.getName()"""
        return str.__wrap(super(scene2d.Actor, self).getName())

    @override
    @overload
    def getCaptureListeners(self) -> 'utils.DelayedRemovalArray':
        """public com.badlogic.gdx.utils.DelayedRemovalArray<com.badlogic.gdx.scenes.scene2d.EventListener> com.badlogic.gdx.scenes.scene2d.Actor.getCaptureListeners()"""
        return 'utils.DelayedRemovalArray'.__wrap(super(scene2d.Actor, self).getCaptureListeners())

    @overload
    def padBottom(self, arg0: 'Value') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padBottom(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Table'.__wrap(super(__Table, self).padBottom(arg0))

    @override
    @overload
    def clear(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Group.clear(boolean)"""
        super(__scene2d.Group, self).clear(__boolean.valueOf(arg0))

    @override
    @overload
    def setY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setY(float)"""
        super(__scene2d.Actor, self).setY(__float.valueOf(arg0))

    @override
    @overload
    def addActorAfter(self, arg0: 'Actor', arg1: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.addActorAfter(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__scene2d.Group, self).addActorAfter(arg0, arg1)

    @override
    @overload
    def top(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.top()"""
        return 'Table'.__wrap(super(Table, self).top())

    @override
    @overload
    def scaleBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.scaleBy(float,float)"""
        super(__scene2d.Actor, self).scaleBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def align(self, arg0: int) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.align(int)"""
        return 'Table'.__wrap(super(__Table, self).align(__int.valueOf(arg0)))

    @overload
    def notify(self, arg0: 'Event', arg1: bool) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.notify(com.badlogic.gdx.scenes.scene2d.Event,boolean)"""
        return bool.__wrap(super(__scene2d.Actor, self).notify(arg0, __boolean.valueOf(arg1)))

    @override
    @overload
    def act(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Group.act(float)"""
        super(__scene2d.Group, self).act(__float.valueOf(arg0))

    @override
    @overload
    def setUserObject(self, arg0: object):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setUserObject(java.lang.Object)"""
        super(__scene2d.Actor, self).setUserObject(arg0)

    @override
    @overload
    def hasScrollFocus(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasScrollFocus()"""
        return bool.__wrap(super(scene2d.Actor, self).hasScrollFocus())

    @override
    @overload
    def toFront(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.toFront()"""
        super(scene2d.Actor, self).toFront()

    @override
    @overload
    def scaleBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.scaleBy(float)"""
        super(__scene2d.Actor, self).scaleBy(__float.valueOf(arg0))

    @override
    @overload
    def getOriginX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getOriginX()"""
        return float.__wrap(super(scene2d.Actor, self).getOriginX())

    @overload
    def getRow(self, arg0: float) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.ui.Table.getRow(float)"""
        return int.__wrap(super(__Table, self).getRow(__float.valueOf(arg0)))

    @overload
    def getChild(self, arg0: int) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.Group.getChild(int)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Group, self).getChild(__int.valueOf(arg0)))

    @override
    @overload
    def getSkin(self) -> 'Skin':
        """public com.badlogic.gdx.scenes.scene2d.ui.Skin com.badlogic.gdx.scenes.scene2d.ui.Table.getSkin()"""
        return 'Skin'.__wrap(super(Table, self).getSkin())

    @override
    @overload
    def setDebug(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.setDebug(boolean)"""
        super(__Table, self).setDebug(__boolean.valueOf(arg0))

    @overload
    def pad(self, arg0: 'Value', arg1: 'Value', arg2: 'Value', arg3: 'Value') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.pad(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Table'.__wrap(super(__Table, self).pad(arg0, arg1, arg2, arg3))

    @overload
    def add(self, arg0: 'CharSequence', arg1: str, arg2: 'Color') -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<com.badlogic.gdx.scenes.scene2d.ui.Label> com.badlogic.gdx.scenes.scene2d.ui.Table.add(java.lang.CharSequence,java.lang.String,com.badlogic.gdx.graphics.Color)"""
        return 'Cell'.__wrap(super(__Table, self).add(arg0, arg1, arg2))

    @override
    @overload
    def getPadBottom(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getPadBottom()"""
        return float.__wrap(super(Table, self).getPadBottom())

    @override
    @overload
    def getStage(self) -> 'scene2d.Stage':
        """public com.badlogic.gdx.scenes.scene2d.Stage com.badlogic.gdx.scenes.scene2d.Actor.getStage()"""
        return 'scene2d.Stage'.__wrap(super(scene2d.Actor, self).getStage())

    @override
    @overload
    def setChecked(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Button.setChecked(boolean)"""
        super(__Button, self).setChecked(__boolean.valueOf(arg0))

    @override
    @overload
    def addAction(self, arg0: 'Action'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.addAction(com.badlogic.gdx.scenes.scene2d.Action)"""
        super(__scene2d.Actor, self).addAction(arg0)

    @override
    @overload
    def getPadRightValue(self) -> 'Value':
        """public com.badlogic.gdx.scenes.scene2d.ui.Value com.badlogic.gdx.scenes.scene2d.ui.Table.getPadRightValue()"""
        return 'Value'.__wrap(super(Table, self).getPadRightValue())

    @override
    @overload
    def setColor(self, arg0: float, arg1: float, arg2: float, arg3: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setColor(float,float,float,float)"""
        super(__scene2d.Actor, self).setColor(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3))

    @overload
    def getColumnMinWidth(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getColumnMinWidth(int)"""
        return float.__wrap(super(__Table, self).getColumnMinWidth(__int.valueOf(arg0)))

    @overload
    def localToAscendantCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToAscendantCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToAscendantCoordinates(arg0, arg1))

    @override
    @overload
    def getActions(self) -> 'utils.Array':
        """public com.badlogic.gdx.utils.Array<com.badlogic.gdx.scenes.scene2d.Action> com.badlogic.gdx.scenes.scene2d.Actor.getActions()"""
        return 'utils.Array'.__wrap(super(scene2d.Actor, self).getActions())

    @override
    @overload
    def debugTable(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.debugTable()"""
        return 'Table'.__wrap(super(Table, self).debugTable())

    @overload
    def add(self, *arg0: 'scene2d.Actor') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.add(com.badlogic.gdx.scenes.scene2d.Actor...)"""
        return 'Table'.__wrap(super(__Table, self).add(arg0))

    @override
    @overload
    def right(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.right()"""
        return 'Table'.__wrap(super(Table, self).right())

    @overload
    def localToDescendantCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Group.localToDescendantCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Group, self).localToDescendantCoordinates(arg0, arg1))

    @overload
    def padRight(self, arg0: float) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padRight(float)"""
        return 'Table'.__wrap(super(__Table, self).padRight(__float.valueOf(arg0)))

    @overload
    def setZIndex(self, arg0: int) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.setZIndex(int)"""
        return bool.__wrap(super(__scene2d.Actor, self).setZIndex(__int.valueOf(arg0)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.ui.TextButton.toString()"""
        return str.__wrap(super(TextButton, self).toString())

    @overload
    def padLeft(self, arg0: float) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padLeft(float)"""
        return 'Table'.__wrap(super(__Table, self).padLeft(__float.valueOf(arg0)))

    @overload
    def getX(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getX(int)"""
        return float.__wrap(super(__scene2d.Actor, self).getX(__int.valueOf(arg0)))

    @override
    @overload
    def sizeBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.sizeBy(float)"""
        super(__scene2d.Actor, self).sizeBy(__float.valueOf(arg0))

    @override
    @overload
    def getMinWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Button.getMinWidth()"""
        return float.__wrap(super(Button, self).getMinWidth())

    @override
    @overload
    def isPressed(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Button.isPressed()"""
        return bool.__wrap(super(Button, self).isPressed())

    @override
    @overload
    def clip(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.clip()"""
        return 'Table'.__wrap(super(Table, self).clip())

    @overload
    def getImage(self) -> 'Image':
        """public com.badlogic.gdx.scenes.scene2d.ui.Image com.badlogic.gdx.scenes.scene2d.ui.CheckBox.getImage()"""
        return 'Image'.__wrap(super(CheckBox, self).getImage())

    @overload
    def getRowPrefHeight(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getRowPrefHeight(int)"""
        return float.__wrap(super(__Table, self).getRowPrefHeight(__int.valueOf(arg0)))

    @override
    @overload
    def sizeBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.sizeBy(float,float)"""
        super(__scene2d.Actor, self).sizeBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def hasActions(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasActions()"""
        return bool.__wrap(super(scene2d.Actor, self).hasActions())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0))

    @override
    @overload
    def setScaleX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScaleX(float)"""
        super(__scene2d.Actor, self).setScaleX(__float.valueOf(arg0))

    @overload
    def removeActor(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Table.removeActor(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__Table, self).removeActor(arg0))

    @override
    @overload
    def getX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getX()"""
        return float.__wrap(super(scene2d.Actor, self).getX())

    @override
    @overload
    def left(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.left()"""
        return 'Table'.__wrap(super(Table, self).left())

    @override
    @overload
    def center(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.center()"""
        return 'Table'.__wrap(super(Table, self).center())

    @override
    @overload
    def setBackground(self, arg0: 'Drawable'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.setBackground(com.badlogic.gdx.scenes.scene2d.utils.Drawable)"""
        super(__Table, self).setBackground(arg0)

    @overload
    def add(self, arg0: 'Actor') -> 'Cell':
        """public <T extends com.badlogic.gdx.scenes.scene2d.Actor> com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Table.add(T)"""
        return 'Cell'.__wrap(super(__Table, self).add(arg0))

    @override
    @overload
    def toBack(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.toBack()"""
        super(scene2d.Actor, self).toBack()

    @override
    @overload
    def debug(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.debug()"""
        return 'Table'.__wrap(super(Table, self).debug())

    @override
    @overload
    def getClip(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Table.getClip()"""
        return bool.__wrap(super(Table, self).getClip())

    @overload
    def screenToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.screenToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).screenToLocalCoordinates(arg0))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def getImageCell(self) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell com.badlogic.gdx.scenes.scene2d.ui.CheckBox.getImageCell()"""
        return 'Cell'.__wrap(super(CheckBox, self).getImageCell())

    @override
    @overload
    def ancestorsVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.ancestorsVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).ancestorsVisible())

    @override
    @overload
    def getMinHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Button.getMinHeight()"""
        return float.__wrap(super(Button, self).getMinHeight())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def setSize(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setSize(float,float)"""
        super(__scene2d.Actor, self).setSize(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def layout(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.layout()"""
        super(Table, self).layout()

    @override
    @overload
    def getZIndex(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.Actor.getZIndex()"""
        return int.__wrap(super(scene2d.Actor, self).getZIndex())

    @overload
    def __init__(self, arg0: str, arg1: 'CheckBoxStyle'):
        """public com.badlogic.gdx.scenes.scene2d.ui.CheckBox(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.CheckBox$CheckBoxStyle)"""
        val = __CheckBox(arg0, arg1)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def getY(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getY(int)"""
        return float.__wrap(super(__scene2d.Actor, self).getY(__int.valueOf(arg0)))

    @override
    @overload
    def setOrigin(self, arg0: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOrigin(int)"""
        super(__scene2d.Actor, self).setOrigin(__int.valueOf(arg0))

    @override
    @overload
    def validate(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.validate()"""
        super(WidgetGroup, self).validate()

    @overload
    def isDescendantOf(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isDescendantOf(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Actor, self).isDescendantOf(arg0))

    @override
    @overload
    def addActorBefore(self, arg0: 'Actor', arg1: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.addActorBefore(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__scene2d.Group, self).addActorBefore(arg0, arg1)

    @override
    @overload
    def getParent(self) -> 'scene2d.Group':
        """public com.badlogic.gdx.scenes.scene2d.Group com.badlogic.gdx.scenes.scene2d.Actor.getParent()"""
        return 'scene2d.Group'.__wrap(super(scene2d.Actor, self).getParent())

    @override
    @overload
    def clearListeners(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clearListeners()"""
        super(scene2d.Actor, self).clearListeners()

    @overload
    def localToActorCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToActorCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToActorCoordinates(arg0, arg1))

    @override
    @overload
    def getTableDebug(self) -> 'Debug':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table$Debug com.badlogic.gdx.scenes.scene2d.ui.Table.getTableDebug()"""
        return 'Debug'.__wrap(super(Table, self).getTableDebug())

    @override
    @overload
    def setOriginX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOriginX(float)"""
        super(__scene2d.Actor, self).setOriginX(__float.valueOf(arg0))

    @overload
    def removeActorAt(self, arg0: int, arg1: bool) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.ui.Table.removeActorAt(int,boolean)"""
        return 'scene2d.Actor'.__wrap(super(__Table, self).removeActorAt(__int.valueOf(arg0), __boolean.valueOf(arg1)))

    @override
    @overload
    def getHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getHeight()"""
        return float.__wrap(super(scene2d.Actor, self).getHeight())

    @override
    @overload
    def hasKeyboardFocus(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasKeyboardFocus()"""
        return bool.__wrap(super(scene2d.Actor, self).hasKeyboardFocus())

    @override
    @overload
    def getOriginY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getOriginY()"""
        return float.__wrap(super(scene2d.Actor, self).getOriginY())

    @override
    @overload
    def pack(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.pack()"""
        super(WidgetGroup, self).pack()

    @override
    @overload
    def clipEnd(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clipEnd()"""
        super(scene2d.Actor, self).clipEnd()

    @override
    @overload
    def getUserObject(self) -> object:
        """public java.lang.Object com.badlogic.gdx.scenes.scene2d.Actor.getUserObject()"""
        return object.__wrap(super(scene2d.Actor, self).getUserObject())

    @override
    @overload
    def toggle(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Button.toggle()"""
        super(Button, self).toggle()

    @override
    @overload
    def rotateBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.rotateBy(float)"""
        super(__scene2d.Actor, self).rotateBy(__float.valueOf(arg0))

    @overload
    def background(self, arg0: str) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.background(java.lang.String)"""
        return 'Table'.__wrap(super(__Table, self).background(arg0))

    @overload
    def getRowHeight(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getRowHeight(int)"""
        return float.__wrap(super(__Table, self).getRowHeight(__int.valueOf(arg0)))

    @override
    @overload
    def getPadLeftValue(self) -> 'Value':
        """public com.badlogic.gdx.scenes.scene2d.ui.Value com.badlogic.gdx.scenes.scene2d.ui.Table.getPadLeftValue()"""
        return 'Value'.__wrap(super(Table, self).getPadLeftValue())

    @override
    @overload
    def setScale(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScale(float,float)"""
        super(__scene2d.Actor, self).setScale(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def addListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.addListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).addListener(arg0))

    @override
    @overload
    def setLabel(self, arg0: 'Label'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextButton.setLabel(com.badlogic.gdx.scenes.scene2d.ui.Label)"""
        super(__TextButton, self).setLabel(arg0)

    @override
    @overload
    def setRound(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.setRound(boolean)"""
        super(__Table, self).setRound(__boolean.valueOf(arg0))

    @overload
    def debug(self, arg0: 'Debug') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.debug(com.badlogic.gdx.scenes.scene2d.ui.Table$Debug)"""
        return 'Table'.__wrap(super(__Table, self).debug(arg0))

    @overload
    def clip(self, arg0: bool) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.clip(boolean)"""
        return 'Table'.__wrap(super(__Table, self).clip(__boolean.valueOf(arg0)))

    @override
    @overload
    def invalidate(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.invalidate()"""
        super(Table, self).invalidate()

    @override
    @overload
    def getPadLeft(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getPadLeft()"""
        return float.__wrap(super(Table, self).getPadLeft())

    @override
    @overload
    def setVisible(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setVisible(boolean)"""
        super(__scene2d.Actor, self).setVisible(__boolean.valueOf(arg0))

    @override
    @overload
    def setY(self, arg0: float, arg1: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setY(float,int)"""
        super(__scene2d.Actor, self).setY(__float.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def setFillParent(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.setFillParent(boolean)"""
        super(__WidgetGroup, self).setFillParent(__boolean.valueOf(arg0))

    @overload
    def getCell(self, arg0: 'Actor') -> 'Cell':
        """public <T extends com.badlogic.gdx.scenes.scene2d.Actor> com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Table.getCell(T)"""
        return 'Cell'.__wrap(super(__Table, self).getCell(arg0))

    @override
    @overload
    def needsLayout(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.needsLayout()"""
        return bool.__wrap(super(WidgetGroup, self).needsLayout())

    @override
    @overload
    def setX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setX(float)"""
        super(__scene2d.Actor, self).setX(__float.valueOf(arg0))

    @override
    @overload
    def setOrigin(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOrigin(float,float)"""
        super(__scene2d.Actor, self).setOrigin(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def getCullingArea(self) -> 'math.Rectangle':
        """public com.badlogic.gdx.math.Rectangle com.badlogic.gdx.scenes.scene2d.Group.getCullingArea()"""
        return 'math.Rectangle'.__wrap(super(scene2d.Group, self).getCullingArea())

    @override
    @overload
    def getRight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getRight()"""
        return float.__wrap(super(scene2d.Actor, self).getRight())

    @overload
    def isAscendantOf(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isAscendantOf(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Actor, self).isAscendantOf(arg0))

    @override
    @overload
    def hasParent(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasParent()"""
        return bool.__wrap(super(scene2d.Actor, self).hasParent())

    @override
    @overload
    def getChildren(self) -> 'utils.SnapshotArray':
        """public com.badlogic.gdx.utils.SnapshotArray<com.badlogic.gdx.scenes.scene2d.Actor> com.badlogic.gdx.scenes.scene2d.Group.getChildren()"""
        return 'utils.SnapshotArray'.__wrap(super(scene2d.Group, self).getChildren())

    @override
    @overload
    def getScaleY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getScaleY()"""
        return float.__wrap(super(scene2d.Actor, self).getScaleY())

    @override
    @overload
    def setSkin(self, arg0: 'Skin'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.setSkin(com.badlogic.gdx.scenes.scene2d.ui.Skin)"""
        super(__Table, self).setSkin(arg0)

    @override
    @overload
    def getWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getWidth()"""
        return float.__wrap(super(scene2d.Actor, self).getWidth())

    @override
    @overload
    def setPosition(self, arg0: float, arg1: float, arg2: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setPosition(float,float,int)"""
        super(__scene2d.Actor, self).setPosition(__float.valueOf(arg0), __float.valueOf(arg1), __int.valueOf(arg2))

    @override
    @overload
    def setLayoutEnabled(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.setLayoutEnabled(boolean)"""
        super(__WidgetGroup, self).setLayoutEnabled(__boolean.valueOf(arg0))

    @overload
    def removeCaptureListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.removeCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).removeCaptureListener(arg0))

    @override
    @overload
    def invalidateHierarchy(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.invalidateHierarchy()"""
        super(WidgetGroup, self).invalidateHierarchy()

    @override
    @overload
    def setColor(self, arg0: 'Color'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setColor(com.badlogic.gdx.graphics.Color)"""
        super(__scene2d.Actor, self).setColor(arg0)

    @overload
    def addCaptureListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.addCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).addCaptureListener(arg0))

    @overload
    def fire(self, arg0: 'Event') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.fire(com.badlogic.gdx.scenes.scene2d.Event)"""
        return bool.__wrap(super(__scene2d.Actor, self).fire(arg0))

    @overload
    def columnDefaults(self, arg0: int) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell com.badlogic.gdx.scenes.scene2d.ui.Table.columnDefaults(int)"""
        return 'Cell'.__wrap(super(__Table, self).columnDefaults(__int.valueOf(arg0)))

    @override
    @overload
    def remove(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.remove()"""
        return bool.__wrap(super(scene2d.Actor, self).remove())

    @override
    @overload
    def isVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).isVisible())

    @override
    @overload
    def defaults(self) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell com.badlogic.gdx.scenes.scene2d.ui.Table.defaults()"""
        return 'Cell'.__wrap(super(Table, self).defaults())

    @override
    @overload
    def getLabelCell(self) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<com.badlogic.gdx.scenes.scene2d.ui.Label> com.badlogic.gdx.scenes.scene2d.ui.TextButton.getLabelCell()"""
        return 'Cell'.__wrap(super(TextButton, self).getLabelCell())

    @overload
    def pad(self, arg0: 'Value') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.pad(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Table'.__wrap(super(__Table, self).pad(arg0))

    @override
    @overload
    def getPadBottomValue(self) -> 'Value':
        """public com.badlogic.gdx.scenes.scene2d.ui.Value com.badlogic.gdx.scenes.scene2d.ui.Table.getPadBottomValue()"""
        return 'Value'.__wrap(super(Table, self).getPadBottomValue())

    @override
    @overload
    def getTop(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getTop()"""
        return float.__wrap(super(scene2d.Actor, self).getTop())

    @override
    @overload
    def clearActions(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clearActions()"""
        super(scene2d.Actor, self).clearActions()

    @override
    @overload
    def setRotation(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setRotation(float)"""
        super(__scene2d.Actor, self).setRotation(__float.valueOf(arg0))

    @override
    @overload
    def getScaleX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getScaleX()"""
        return float.__wrap(super(scene2d.Actor, self).getScaleX())

    @override
    @overload
    def setBackground(self, arg0: str):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.setBackground(java.lang.String)"""
        super(__Table, self).setBackground(arg0)

    @overload
    def firstAscendant(self, arg0: 'Class') -> 'scene2d.Actor':
        """public <T extends com.badlogic.gdx.scenes.scene2d.Actor> T com.badlogic.gdx.scenes.scene2d.Actor.firstAscendant(java.lang.Class<T>)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Actor, self).firstAscendant(arg0))

    @override
    @overload
    def setScaleY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScaleY(float)"""
        super(__scene2d.Actor, self).setScaleY(__float.valueOf(arg0))

    @overload
    def stageToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.stageToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).stageToLocalCoordinates(arg0))

    @override
    @overload
    def bottom(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.bottom()"""
        return 'Table'.__wrap(super(Table, self).bottom())

    @overload
    def swapActor(self, arg0: int, arg1: int) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.swapActor(int,int)"""
        return bool.__wrap(super(__scene2d.Group, self).swapActor(__int.valueOf(arg0), __int.valueOf(arg1)))

    @override
    @overload
    def hasChildren(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.hasChildren()"""
        return bool.__wrap(super(scene2d.Group, self).hasChildren())

    @override
    @overload
    def ascendantsVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.ascendantsVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).ascendantsVisible())

    @override
    @overload
    def getAlign(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.ui.Table.getAlign()"""
        return int.__wrap(super(Table, self).getAlign())

    @override
    @overload
    def debugCell(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.debugCell()"""
        return 'Table'.__wrap(super(Table, self).debugCell())

    @override
    @overload
    def getColumns(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.ui.Table.getColumns()"""
        return int.__wrap(super(Table, self).getColumns())

    @override
    @overload
    def debugActor(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.debugActor()"""
        return 'Table'.__wrap(super(Table, self).debugActor())

    @overload
    def padTop(self, arg0: 'Value') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padTop(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Table'.__wrap(super(__Table, self).padTop(arg0))

    @override
    @overload
    def getColor(self) -> 'graphics.Color':
        """public com.badlogic.gdx.graphics.Color com.badlogic.gdx.scenes.scene2d.Actor.getColor()"""
        return 'graphics.Color'.__wrap(super(scene2d.Actor, self).getColor())

    @override
    @overload
    def isTransform(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.isTransform()"""
        return bool.__wrap(super(scene2d.Group, self).isTransform())

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @override
    @overload
    def isTouchable(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchable()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchable())

    @overload
    def clipBegin(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.clipBegin(float,float,float,float)"""
        return bool.__wrap(super(__scene2d.Actor, self).clipBegin(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3)))

    @override
    @overload
    def getCells(self) -> 'utils.Array':
        """public com.badlogic.gdx.utils.Array<com.badlogic.gdx.scenes.scene2d.ui.Cell> com.badlogic.gdx.scenes.scene2d.ui.Table.getCells()"""
        return 'utils.Array'.__wrap(super(Table, self).getCells())

    @override
    @overload
    def getPadTopValue(self) -> 'Value':
        """public com.badlogic.gdx.scenes.scene2d.ui.Value com.badlogic.gdx.scenes.scene2d.ui.Table.getPadTopValue()"""
        return 'Value'.__wrap(super(Table, self).getPadTopValue()) 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.TextField
from pyquantum_helper import import_once as __import_once__
import com.badlogic.gdx.scenes.scene2d.Touchable as __Touchable
__Touchable = __Touchable
try:
    from pygdx.scenes import scene2d
except ImportError:
    scene2d = __import_once__("pygdx.scenes.scene2d")

import com.badlogic.gdx.graphics.Color as __Color
__Color = __Color
import java.lang.Character as __char
import java.lang.Boolean as __boolean
try:
    from pygdx.graphics import g2d
except ImportError:
    g2d = __import_once__("pygdx.graphics.g2d")

import com.badlogic.gdx.scenes.scene2d.ui.TextField as __TextField_TextFieldFilter
__TextFieldFilter = __TextField_TextFieldFilter.TextFieldFilter
from builtins import type
import com.badlogic.gdx.scenes.scene2d.Group as __Group
__Group = __Group
import com.badlogic.gdx.math.Vector2 as __Vector2
__Vector2 = __Vector2
import java.lang.Class as __Class
__Class = __Class
import com.badlogic.gdx.utils.Array as __Array
__Array = __Array
import java.lang.String as __string
import com.badlogic.gdx.scenes.scene2d.ui.TextField as __TextField_TextFieldStyle
__TextFieldStyle = __TextField_TextFieldStyle.TextFieldStyle
try:
    from pygdx import math
except ImportError:
    math = __import_once__("pygdx.math")

from builtins import bool
import com.badlogic.gdx.scenes.scene2d.ui.TextField as __TextField
__TextField = __TextField
import com.badlogic.gdx.scenes.scene2d.ui.Widget as __Widget
__Widget = __Widget
from builtins import str
try:
    from pygdx import utils
except ImportError:
    utils = __import_once__("pygdx.utils")

from pyquantum_helper import override
import java.lang.Object as __object
from builtins import float
import com.badlogic.gdx.scenes.scene2d.InputListener as __InputListener
__InputListener = __InputListener
from builtins import object
import com.badlogic.gdx.utils.DelayedRemovalArray as __DelayedRemovalArray
__DelayedRemovalArray = __DelayedRemovalArray
import java.lang.Long as __long
import java.lang.Float as __float
import java.lang.String as __String
__String = __String
try:
    from pygdx.graphics import glutils
except ImportError:
    glutils = __import_once__("pygdx.graphics.glutils")

import java.lang.Object as __Object
__Object = __Object
import com.badlogic.gdx.scenes.scene2d.ui.TextField as __TextField_OnscreenKeyboard
__OnscreenKeyboard = __TextField_OnscreenKeyboard.OnscreenKeyboard
import com.badlogic.gdx.scenes.scene2d.Actor as __Actor
__Actor = __Actor
import java.lang.Integer as __int
import com.badlogic.gdx.scenes.scene2d.Stage as __Stage
__Stage = __Stage
try:
    from pygdx import graphics
except ImportError:
    graphics = __import_once__("pygdx.graphics")

from builtins import int
 
class TextField(__Widget, Widget, scene2d.__Disableable, utils.Disableable):
    """com.badlogic.gdx.scenes.scene2d.ui.TextField"""
 
    @staticmethod
    def __wrap(java_value: __TextField) -> 'TextField':
        return TextField(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __TextField):
        """
        Dynamic initializer for TextField.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def getY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getY()"""
        return float.__wrap(super(scene2d.Actor, self).getY())

    @overload
    def cut(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextField.cut()"""
        super(TextField, self).cut()

    @overload
    def setBlinkTime(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextField.setBlinkTime(float)"""
        super(__TextField, self).setBlinkTime(__float.valueOf(arg0))

    @overload
    def setFocusTraversal(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextField.setFocusTraversal(boolean)"""
        super(__TextField, self).setFocusTraversal(__boolean.valueOf(arg0))

    @overload
    def setZIndex(self, arg0: int) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.setZIndex(int)"""
        return bool.__wrap(super(__scene2d.Actor, self).setZIndex(__int.valueOf(arg0)))

    @override
    @overload
    def setBounds(self, arg0: float, arg1: float, arg2: float, arg3: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setBounds(float,float,float,float)"""
        super(__scene2d.Actor, self).setBounds(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def needsLayout(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Widget.needsLayout()"""
        return bool.__wrap(super(Widget, self).needsLayout())

    @override
    @overload
    def getPrefWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.TextField.getPrefWidth()"""
        return float.__wrap(super(TextField, self).getPrefWidth())

    @overload
    def getX(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getX(int)"""
        return float.__wrap(super(__scene2d.Actor, self).getX(__int.valueOf(arg0)))

    @override
    @overload
    def sizeBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.sizeBy(float)"""
        super(__scene2d.Actor, self).sizeBy(__float.valueOf(arg0))

    @overload
    def getMessageText(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.ui.TextField.getMessageText()"""
        return str.__wrap(super(TextField, self).getMessageText())

    @overload
    def __init__(self, arg0: str, arg1: 'TextFieldStyle'):
        """public com.badlogic.gdx.scenes.scene2d.ui.TextField(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldStyle)"""
        val = __TextField(arg0, arg1)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def sizeBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.sizeBy(float,float)"""
        super(__scene2d.Actor, self).sizeBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def hasActions(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasActions()"""
        return bool.__wrap(super(scene2d.Actor, self).hasActions())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0))

    @override
    @overload
    def setScaleX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScaleX(float)"""
        super(__scene2d.Actor, self).setScaleX(__float.valueOf(arg0))

    @override
    @overload
    def isDisabled(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.TextField.isDisabled()"""
        return bool.__wrap(super(TextField, self).isDisabled())

    @overload
    def getDefaultInputListener(self) -> 'scene2d.InputListener':
        """public com.badlogic.gdx.scenes.scene2d.InputListener com.badlogic.gdx.scenes.scene2d.ui.TextField.getDefaultInputListener()"""
        return 'scene2d.InputListener'.__wrap(super(TextField, self).getDefaultInputListener())

    @override
    @overload
    def getTouchable(self) -> 'scene2d.Touchable':
        """public com.badlogic.gdx.scenes.scene2d.Touchable com.badlogic.gdx.scenes.scene2d.Actor.getTouchable()"""
        return 'scene2d.Touchable'.__wrap(super(scene2d.Actor, self).getTouchable())

    @override
    @overload
    def removeAction(self, arg0: 'Action'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.removeAction(com.badlogic.gdx.scenes.scene2d.Action)"""
        super(__scene2d.Actor, self).removeAction(arg0)

    @override
    @overload
    def getX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getX()"""
        return float.__wrap(super(scene2d.Actor, self).getX())

    @overload
    def setStyle(self, arg0: 'TextFieldStyle'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextField.setStyle(com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldStyle)"""
        super(__TextField, self).setStyle(arg0)

    @override
    @overload
    def getMaxWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Widget.getMaxWidth()"""
        return float.__wrap(super(Widget, self).getMaxWidth())

    @override
    @overload
    def toBack(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.toBack()"""
        super(scene2d.Actor, self).toBack()

    @override
    @overload
    def setDebug(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setDebug(boolean)"""
        super(__scene2d.Actor, self).setDebug(__boolean.valueOf(arg0))

    @overload
    def getTextFieldFilter(self) -> 'TextFieldFilter':
        """public com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldFilter com.badlogic.gdx.scenes.scene2d.ui.TextField.getTextFieldFilter()"""
        return 'TextFieldFilter'.__wrap(super(TextField, self).getTextFieldFilter())

    @override
    @overload
    def setX(self, arg0: float, arg1: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setX(float,int)"""
        super(__scene2d.Actor, self).setX(__float.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def screenToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.screenToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).screenToLocalCoordinates(arg0))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def setOnlyFontChars(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextField.setOnlyFontChars(boolean)"""
        super(__TextField, self).setOnlyFontChars(__boolean.valueOf(arg0))

    @override
    @overload
    def ancestorsVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.ancestorsVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).ancestorsVisible())

    @override
    @overload
    def getListeners(self) -> 'utils.DelayedRemovalArray':
        """public com.badlogic.gdx.utils.DelayedRemovalArray<com.badlogic.gdx.scenes.scene2d.EventListener> com.badlogic.gdx.scenes.scene2d.Actor.getListeners()"""
        return 'utils.DelayedRemovalArray'.__wrap(super(scene2d.Actor, self).getListeners())

    @override
    @overload
    def setFillParent(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.setFillParent(boolean)"""
        super(__Widget, self).setFillParent(__boolean.valueOf(arg0))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def removeListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.removeListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).removeListener(arg0))

    @override
    @overload
    def isTouchFocusListener(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchFocusListener()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchFocusListener())

    @overload
    def localToStageCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToStageCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToStageCoordinates(arg0))

    @override
    @overload
    def setSize(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setSize(float,float)"""
        super(__scene2d.Actor, self).setSize(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def getZIndex(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.Actor.getZIndex()"""
        return int.__wrap(super(scene2d.Actor, self).getZIndex())

    @override
    @overload
    def clipBegin(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.clipBegin()"""
        return bool.__wrap(super(scene2d.Actor, self).clipBegin())

    @override
    @overload
    def invalidateHierarchy(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.invalidateHierarchy()"""
        super(Widget, self).invalidateHierarchy()

    @override
    @overload
    def moveBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.moveBy(float,float)"""
        super(__scene2d.Actor, self).moveBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def getY(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getY(int)"""
        return float.__wrap(super(__scene2d.Actor, self).getY(__int.valueOf(arg0)))

    @override
    @overload
    def setOrigin(self, arg0: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOrigin(int)"""
        super(__scene2d.Actor, self).setOrigin(__int.valueOf(arg0))

    @overload
    def getFocusTraversal(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.TextField.getFocusTraversal()"""
        return bool.__wrap(super(TextField, self).getFocusTraversal())

    @overload
    def getSelection(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.ui.TextField.getSelection()"""
        return str.__wrap(super(TextField, self).getSelection())

    @overload
    def appendText(self, arg0: str):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextField.appendText(java.lang.String)"""
        super(__TextField, self).appendText(arg0)

    @overload
    def isDescendantOf(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isDescendantOf(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Actor, self).isDescendantOf(arg0))

    @overload
    def isPasswordMode(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.TextField.isPasswordMode()"""
        return bool.__wrap(super(TextField, self).isPasswordMode())

    @override
    @overload
    def getParent(self) -> 'scene2d.Group':
        """public com.badlogic.gdx.scenes.scene2d.Group com.badlogic.gdx.scenes.scene2d.Actor.getParent()"""
        return 'scene2d.Group'.__wrap(super(scene2d.Actor, self).getParent())

    @overload
    def setPasswordCharacter(self, arg0: str):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextField.setPasswordCharacter(char)"""
        super(__TextField, self).setPasswordCharacter(__char.valueOf(arg0))

    @override
    @overload
    def clearListeners(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clearListeners()"""
        super(scene2d.Actor, self).clearListeners()

    @overload
    def localToActorCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToActorCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToActorCoordinates(arg0, arg1))

    @override
    @overload
    def setName(self, arg0: str):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setName(java.lang.String)"""
        super(__scene2d.Actor, self).setName(arg0)

    @overload
    def getCursorPosition(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.ui.TextField.getCursorPosition()"""
        return int.__wrap(super(TextField, self).getCursorPosition())

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @override
    @overload
    def setLayoutEnabled(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.setLayoutEnabled(boolean)"""
        super(__Widget, self).setLayoutEnabled(__boolean.valueOf(arg0))

    @override
    @overload
    def setOriginX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOriginX(float)"""
        super(__scene2d.Actor, self).setOriginX(__float.valueOf(arg0))

    @override
    @overload
    def getHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getHeight()"""
        return float.__wrap(super(scene2d.Actor, self).getHeight())

    @overload
    def setTextFieldListener(self, arg0: 'TextFieldListener'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextField.setTextFieldListener(com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldListener)"""
        super(__TextField, self).setTextFieldListener(arg0)

    @override
    @overload
    def validate(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.validate()"""
        super(Widget, self).validate()

    @override
    @overload
    def hasKeyboardFocus(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasKeyboardFocus()"""
        return bool.__wrap(super(scene2d.Actor, self).hasKeyboardFocus())

    @override
    @overload
    def setDisabled(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextField.setDisabled(boolean)"""
        super(__TextField, self).setDisabled(__boolean.valueOf(arg0))

    @override
    @overload
    def getOriginY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getOriginY()"""
        return float.__wrap(super(scene2d.Actor, self).getOriginY())

    @override
    @overload
    def layout(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.layout()"""
        super(Widget, self).layout()

    @override
    @overload
    def clipEnd(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clipEnd()"""
        super(scene2d.Actor, self).clipEnd()

    @override
    @overload
    def getUserObject(self) -> object:
        """public java.lang.Object com.badlogic.gdx.scenes.scene2d.Actor.getUserObject()"""
        return object.__wrap(super(scene2d.Actor, self).getUserObject())

    @overload
    def setSelection(self, arg0: int, arg1: int):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextField.setSelection(int,int)"""
        super(__TextField, self).setSelection(__int.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def pack(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.pack()"""
        super(Widget, self).pack()

    @override
    @overload
    def draw(self, arg0: 'Batch', arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextField.draw(com.badlogic.gdx.graphics.g2d.Batch,float)"""
        super(__TextField, self).draw(arg0, __float.valueOf(arg1))

    @override
    @overload
    def getDebug(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.getDebug()"""
        return bool.__wrap(super(scene2d.Actor, self).getDebug())

    @overload
    def copy(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextField.copy()"""
        super(TextField, self).copy()

    @override
    @overload
    def setHeight(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setHeight(float)"""
        super(__scene2d.Actor, self).setHeight(__float.valueOf(arg0))

    @override
    @overload
    def setScale(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScale(float)"""
        super(__scene2d.Actor, self).setScale(__float.valueOf(arg0))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def rotateBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.rotateBy(float)"""
        super(__scene2d.Actor, self).rotateBy(__float.valueOf(arg0))

    @overload
    def selectAll(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextField.selectAll()"""
        super(TextField, self).selectAll()

    @override
    @overload
    def getMinHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Widget.getMinHeight()"""
        return float.__wrap(super(Widget, self).getMinHeight())

    @override
    @overload
    def setScale(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScale(float,float)"""
        super(__scene2d.Actor, self).setScale(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def getOnscreenKeyboard(self) -> 'OnscreenKeyboard':
        """public com.badlogic.gdx.scenes.scene2d.ui.TextField$OnscreenKeyboard com.badlogic.gdx.scenes.scene2d.ui.TextField.getOnscreenKeyboard()"""
        return 'OnscreenKeyboard'.__wrap(super(TextField, self).getOnscreenKeyboard())

    @overload
    def __init__(self, arg0: str, arg1: 'Skin'):
        """public com.badlogic.gdx.scenes.scene2d.ui.TextField(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin)"""
        val = __TextField(arg0, arg1)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def addListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.addListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).addListener(arg0))

    @overload
    def __init__(self, arg0: str, arg1: 'Skin', arg2: str):
        """public com.badlogic.gdx.scenes.scene2d.ui.TextField(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String)"""
        val = __TextField(arg0, arg1, arg2)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def parentToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.parentToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).parentToLocalCoordinates(arg0))

    @override
    @overload
    def getRotation(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getRotation()"""
        return float.__wrap(super(scene2d.Actor, self).getRotation())

    @override
    @overload
    def setVisible(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setVisible(boolean)"""
        super(__scene2d.Actor, self).setVisible(__boolean.valueOf(arg0))

    @overload
    def setAlignment(self, arg0: int):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextField.setAlignment(int)"""
        super(__TextField, self).setAlignment(__int.valueOf(arg0))

    @override
    @overload
    def setY(self, arg0: float, arg1: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setY(float,int)"""
        super(__scene2d.Actor, self).setY(__float.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def getText(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.ui.TextField.getText()"""
        return str.__wrap(super(TextField, self).getText())

    @overload
    def setPasswordMode(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextField.setPasswordMode(boolean)"""
        super(__TextField, self).setPasswordMode(__boolean.valueOf(arg0))

    @override
    @overload
    def setX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setX(float)"""
        super(__scene2d.Actor, self).setX(__float.valueOf(arg0))

    @override
    @overload
    def invalidate(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.invalidate()"""
        super(Widget, self).invalidate()

    @override
    @overload
    def setOrigin(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOrigin(float,float)"""
        super(__scene2d.Actor, self).setOrigin(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def getPrefHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.TextField.getPrefHeight()"""
        return float.__wrap(super(TextField, self).getPrefHeight())

    @overload
    def getMaxLength(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.ui.TextField.getMaxLength()"""
        return int.__wrap(super(TextField, self).getMaxLength())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def clearSelection(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextField.clearSelection()"""
        super(TextField, self).clearSelection()

    @override
    @overload
    def getRight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getRight()"""
        return float.__wrap(super(scene2d.Actor, self).getRight())

    @overload
    def isAscendantOf(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isAscendantOf(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Actor, self).isAscendantOf(arg0))

    @override
    @overload
    def setWidth(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setWidth(float)"""
        super(__scene2d.Actor, self).setWidth(__float.valueOf(arg0))

    @override
    @overload
    def isTouchFocusTarget(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchFocusTarget()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchFocusTarget())

    @override
    @overload
    def hasParent(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasParent()"""
        return bool.__wrap(super(scene2d.Actor, self).hasParent())

    @overload
    def next(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextField.next(boolean)"""
        super(__TextField, self).next(__boolean.valueOf(arg0))

    @override
    @overload
    def setPosition(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setPosition(float,float)"""
        super(__scene2d.Actor, self).setPosition(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def getAlignment(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.ui.TextField.getAlignment()"""
        return int.__wrap(super(TextField, self).getAlignment())

    @overload
    def setText(self, arg0: str):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextField.setText(java.lang.String)"""
        super(__TextField, self).setText(arg0)

    @override
    @overload
    def getScaleY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getScaleY()"""
        return float.__wrap(super(scene2d.Actor, self).getScaleY())

    @override
    @overload
    def getWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getWidth()"""
        return float.__wrap(super(scene2d.Actor, self).getWidth())

    @override
    @overload
    def setOriginY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOriginY(float)"""
        super(__scene2d.Actor, self).setOriginY(__float.valueOf(arg0))

    @override
    @overload
    def setPosition(self, arg0: float, arg1: float, arg2: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setPosition(float,float,int)"""
        super(__scene2d.Actor, self).setPosition(__float.valueOf(arg0), __float.valueOf(arg1), __int.valueOf(arg2))

    @overload
    def removeCaptureListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.removeCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).removeCaptureListener(arg0))

    @overload
    def getSelectionStart(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.ui.TextField.getSelectionStart()"""
        return int.__wrap(super(TextField, self).getSelectionStart())

    @override
    @overload
    def setColor(self, arg0: 'Color'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setColor(com.badlogic.gdx.graphics.Color)"""
        super(__scene2d.Actor, self).setColor(arg0)

    @overload
    def localToScreenCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToScreenCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToScreenCoordinates(arg0))

    @override
    @overload
    def drawDebug(self, arg0: 'ShapeRenderer'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.drawDebug(com.badlogic.gdx.graphics.glutils.ShapeRenderer)"""
        super(__scene2d.Actor, self).drawDebug(arg0)

    @override
    @overload
    def setTouchable(self, arg0: 'Touchable'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setTouchable(com.badlogic.gdx.scenes.scene2d.Touchable)"""
        super(__scene2d.Actor, self).setTouchable(arg0)

    @overload
    def addCaptureListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.addCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).addCaptureListener(arg0))

    @overload
    def fire(self, arg0: 'Event') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.fire(com.badlogic.gdx.scenes.scene2d.Event)"""
        return bool.__wrap(super(__scene2d.Actor, self).fire(arg0))

    @override
    @overload
    def getMaxHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Widget.getMaxHeight()"""
        return float.__wrap(super(Widget, self).getMaxHeight())

    @override
    @overload
    def remove(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.remove()"""
        return bool.__wrap(super(scene2d.Actor, self).remove())

    @overload
    def hit(self, arg0: float, arg1: float, arg2: bool) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.Actor.hit(float,float,boolean)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Actor, self).hit(__float.valueOf(arg0), __float.valueOf(arg1), __boolean.valueOf(arg2)))

    @overload
    def localToParentCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToParentCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToParentCoordinates(arg0))

    @override
    @overload
    def clear(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clear()"""
        super(scene2d.Actor, self).clear()

    @override
    @overload
    def getName(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.Actor.getName()"""
        return str.__wrap(super(scene2d.Actor, self).getName())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.Actor.toString()"""
        return str.__wrap(super(scene2d.Actor, self).toString())

    @override
    @overload
    def isVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).isVisible())

    @overload
    def setMaxLength(self, arg0: int):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextField.setMaxLength(int)"""
        super(__TextField, self).setMaxLength(__int.valueOf(arg0))

    @overload
    def setTextFieldFilter(self, arg0: 'TextFieldFilter'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextField.setTextFieldFilter(com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldFilter)"""
        super(__TextField, self).setTextFieldFilter(arg0)

    @overload
    def setProgrammaticChangeEvents(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextField.setProgrammaticChangeEvents(boolean)"""
        super(__TextField, self).setProgrammaticChangeEvents(__boolean.valueOf(arg0))

    @overload
    def setOnscreenKeyboard(self, arg0: 'OnscreenKeyboard'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextField.setOnscreenKeyboard(com.badlogic.gdx.scenes.scene2d.ui.TextField$OnscreenKeyboard)"""
        super(__TextField, self).setOnscreenKeyboard(arg0)

    @override
    @overload
    def getCaptureListeners(self) -> 'utils.DelayedRemovalArray':
        """public com.badlogic.gdx.utils.DelayedRemovalArray<com.badlogic.gdx.scenes.scene2d.EventListener> com.badlogic.gdx.scenes.scene2d.Actor.getCaptureListeners()"""
        return 'utils.DelayedRemovalArray'.__wrap(super(scene2d.Actor, self).getCaptureListeners())

    @overload
    def setMessageText(self, arg0: str):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextField.setMessageText(java.lang.String)"""
        super(__TextField, self).setMessageText(arg0)

    @override
    @overload
    def debug(self) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.Actor.debug()"""
        return 'scene2d.Actor'.__wrap(super(scene2d.Actor, self).debug())

    @override
    @overload
    def getTop(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getTop()"""
        return float.__wrap(super(scene2d.Actor, self).getTop())

    @override
    @overload
    def setY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setY(float)"""
        super(__scene2d.Actor, self).setY(__float.valueOf(arg0))

    @override
    @overload
    def getMinWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Widget.getMinWidth()"""
        return float.__wrap(super(Widget, self).getMinWidth())

    @override
    @overload
    def clearActions(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clearActions()"""
        super(scene2d.Actor, self).clearActions()

    @overload
    def getStyle(self) -> 'TextFieldStyle':
        """public com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldStyle com.badlogic.gdx.scenes.scene2d.ui.TextField.getStyle()"""
        return 'TextFieldStyle'.__wrap(super(TextField, self).getStyle())

    @override
    @overload
    def scaleBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.scaleBy(float,float)"""
        super(__scene2d.Actor, self).scaleBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def setRotation(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setRotation(float)"""
        super(__scene2d.Actor, self).setRotation(__float.valueOf(arg0))

    @overload
    def setCursorPosition(self, arg0: int):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextField.setCursorPosition(int)"""
        super(__TextField, self).setCursorPosition(__int.valueOf(arg0))

    @override
    @overload
    def getScaleX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getScaleX()"""
        return float.__wrap(super(scene2d.Actor, self).getScaleX())

    @overload
    def firstAscendant(self, arg0: 'Class') -> 'scene2d.Actor':
        """public <T extends com.badlogic.gdx.scenes.scene2d.Actor> T com.badlogic.gdx.scenes.scene2d.Actor.firstAscendant(java.lang.Class<T>)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Actor, self).firstAscendant(arg0))

    @overload
    def notify(self, arg0: 'Event', arg1: bool) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.notify(com.badlogic.gdx.scenes.scene2d.Event,boolean)"""
        return bool.__wrap(super(__scene2d.Actor, self).notify(arg0, __boolean.valueOf(arg1)))

    @override
    @overload
    def act(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.act(float)"""
        super(__scene2d.Actor, self).act(__float.valueOf(arg0))

    @override
    @overload
    def setUserObject(self, arg0: object):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setUserObject(java.lang.Object)"""
        super(__scene2d.Actor, self).setUserObject(arg0)

    @override
    @overload
    def setScaleY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScaleY(float)"""
        super(__scene2d.Actor, self).setScaleY(__float.valueOf(arg0))

    @override
    @overload
    def hasScrollFocus(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasScrollFocus()"""
        return bool.__wrap(super(scene2d.Actor, self).hasScrollFocus())

    @override
    @overload
    def toFront(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.toFront()"""
        super(scene2d.Actor, self).toFront()

    @override
    @overload
    def scaleBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.scaleBy(float)"""
        super(__scene2d.Actor, self).scaleBy(__float.valueOf(arg0))

    @overload
    def stageToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.stageToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).stageToLocalCoordinates(arg0))

    @override
    @overload
    def getOriginX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getOriginX()"""
        return float.__wrap(super(scene2d.Actor, self).getOriginX())

    @override
    @overload
    def ascendantsVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.ascendantsVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).ascendantsVisible())

    @override
    @overload
    def getColor(self) -> 'graphics.Color':
        """public com.badlogic.gdx.graphics.Color com.badlogic.gdx.scenes.scene2d.Actor.getColor()"""
        return 'graphics.Color'.__wrap(super(scene2d.Actor, self).getColor())

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @override
    @overload
    def getStage(self) -> 'scene2d.Stage':
        """public com.badlogic.gdx.scenes.scene2d.Stage com.badlogic.gdx.scenes.scene2d.Actor.getStage()"""
        return 'scene2d.Stage'.__wrap(super(scene2d.Actor, self).getStage())

    @override
    @overload
    def addAction(self, arg0: 'Action'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.addAction(com.badlogic.gdx.scenes.scene2d.Action)"""
        super(__scene2d.Actor, self).addAction(arg0)

    @overload
    def setClipboard(self, arg0: 'Clipboard'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextField.setClipboard(com.badlogic.gdx.utils.Clipboard)"""
        super(__TextField, self).setClipboard(arg0)

    @override
    @overload
    def setColor(self, arg0: float, arg1: float, arg2: float, arg3: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setColor(float,float,float,float)"""
        super(__scene2d.Actor, self).setColor(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3))

    @override
    @overload
    def isTouchable(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchable()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchable())

    @overload
    def localToAscendantCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToAscendantCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToAscendantCoordinates(arg0, arg1))

    @overload
    def clipBegin(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.clipBegin(float,float,float,float)"""
        return bool.__wrap(super(__scene2d.Actor, self).clipBegin(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3)))

    @override
    @overload
    def getActions(self) -> 'utils.Array':
        """public com.badlogic.gdx.utils.Array<com.badlogic.gdx.scenes.scene2d.Action> com.badlogic.gdx.scenes.scene2d.Actor.getActions()"""
        return 'utils.Array'.__wrap(super(scene2d.Actor, self).getActions())

    @overload
    def getProgrammaticChangeEvents(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.TextField.getProgrammaticChangeEvents()"""
        return bool.__wrap(super(TextField, self).getProgrammaticChangeEvents()) 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton
from pyquantum_helper import import_once as __import_once__
import com.badlogic.gdx.scenes.scene2d.Touchable as __Touchable
__Touchable = __Touchable
import com.badlogic.gdx.scenes.scene2d.ui.Button as __Button
__Button = __Button
import com.badlogic.gdx.scenes.scene2d.Group as __Group
__Group = __Group
import com.badlogic.gdx.math.Vector2 as __Vector2
__Vector2 = __Vector2
import com.badlogic.gdx.math.Rectangle as __Rectangle
__Rectangle = __Rectangle
import java.lang.Class as __Class
__Class = __Class
import com.badlogic.gdx.utils.Array as __Array
__Array = __Array
from builtins import bool
import java.lang.CharSequence as CharSequence
try:
    from pygdx.scenes.scene2d import utils
except ImportError:
    utils = __import_once__("pygdx.scenes.scene2d.utils")

try:
    from pygdx import utils
except ImportError:
    utils = __import_once__("pygdx.utils")

import com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton as __ImageTextButton_ImageTextButtonStyle
__ImageTextButtonStyle = __ImageTextButton_ImageTextButtonStyle.ImageTextButtonStyle
from builtins import float
import com.badlogic.gdx.scenes.scene2d.ui.Image as __Image
__Image = __Image
import com.badlogic.gdx.scenes.scene2d.utils.ClickListener as __ClickListener
__ClickListener = __ClickListener
import java.lang.Float as __float
import java.lang.String as __String
__String = __String
import com.badlogic.gdx.scenes.scene2d.ui.Skin as __Skin
__Skin = __Skin
import java.lang.Object as __Object
__Object = __Object
import com.badlogic.gdx.scenes.scene2d.Actor as __Actor
__Actor = __Actor
try:
    from pygdx import graphics
except ImportError:
    graphics = __import_once__("pygdx.graphics")

from builtins import int
try:
    from pygdx.scenes import scene2d
except ImportError:
    scene2d = __import_once__("pygdx.scenes.scene2d")

import com.badlogic.gdx.graphics.Color as __Color
__Color = __Color
import java.lang.Boolean as __boolean
try:
    from pygdx.graphics import g2d
except ImportError:
    g2d = __import_once__("pygdx.graphics.g2d")

from builtins import type
import com.badlogic.gdx.scenes.scene2d.ui.Cell as __Cell
__Cell = __Cell
import com.badlogic.gdx.scenes.scene2d.ui.Table as __Table
__Table = __Table
import com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup as __WidgetGroup
__WidgetGroup = __WidgetGroup
import com.badlogic.gdx.scenes.scene2d.ui.Table as __Table_Debug
__Debug = __Table_Debug.Debug
import java.lang.String as __string
import java.lang.CharSequence as __CharSequence
__CharSequence = __CharSequence
import com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton as __ImageTextButton
__ImageTextButton = __ImageTextButton
try:
    from pygdx import math
except ImportError:
    math = __import_once__("pygdx.math")

import com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup as __ButtonGroup
__ButtonGroup = __ButtonGroup
from builtins import str
from pyquantum_helper import override
import java.lang.Object as __object
from builtins import object
import com.badlogic.gdx.utils.DelayedRemovalArray as __DelayedRemovalArray
__DelayedRemovalArray = __DelayedRemovalArray
import java.lang.Long as __long
try:
    from pygdx.graphics import glutils
except ImportError:
    glutils = __import_once__("pygdx.graphics.glutils")

import com.badlogic.gdx.utils.SnapshotArray as __SnapshotArray
__SnapshotArray = __SnapshotArray
import java.lang.Integer as __int
import com.badlogic.gdx.scenes.scene2d.ui.Value as __Value
__Value = __Value
import com.badlogic.gdx.scenes.scene2d.Stage as __Stage
__Stage = __Stage
import com.badlogic.gdx.scenes.scene2d.ui.Label as __Label
__Label = __Label
import com.badlogic.gdx.scenes.scene2d.utils.Drawable as __Drawable
__Drawable = __Drawable
 
class ImageTextButton(__Button, Button):
    """com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton"""
 
    @staticmethod
    def __wrap(java_value: __ImageTextButton) -> 'ImageTextButton':
        return ImageTextButton(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __ImageTextButton):
        """
        Dynamic initializer for ImageTextButton.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def getColumnPrefWidth(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getColumnPrefWidth(int)"""
        return float.__wrap(super(__Table, self).getColumnPrefWidth(__int.valueOf(arg0)))

    @override
    @overload
    def getY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getY()"""
        return float.__wrap(super(scene2d.Actor, self).getY())

    @override
    @overload
    def setBounds(self, arg0: float, arg1: float, arg2: float, arg3: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setBounds(float,float,float,float)"""
        super(__scene2d.Actor, self).setBounds(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def add(self, arg0: 'CharSequence', arg1: str, arg2: str) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<com.badlogic.gdx.scenes.scene2d.ui.Label> com.badlogic.gdx.scenes.scene2d.ui.Table.add(java.lang.CharSequence,java.lang.String,java.lang.String)"""
        return 'Cell'.__wrap(super(__Table, self).add(arg0, arg1, arg2))

    @overload
    def findActor(self, arg0: str) -> 'scene2d.Actor':
        """public <T extends com.badlogic.gdx.scenes.scene2d.Actor> T com.badlogic.gdx.scenes.scene2d.Group.findActor(java.lang.String)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Group, self).findActor(arg0))

    @override
    @overload
    def isOver(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Button.isOver()"""
        return bool.__wrap(super(Button, self).isOver())

    @override
    @overload
    def getPrefWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Button.getPrefWidth()"""
        return float.__wrap(super(Button, self).getPrefWidth())

    @overload
    def removeActor(self, arg0: 'Actor', arg1: bool) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Table.removeActor(com.badlogic.gdx.scenes.scene2d.Actor,boolean)"""
        return bool.__wrap(super(__Table, self).removeActor(arg0, __boolean.valueOf(arg1)))

    @override
    @overload
    def getTouchable(self) -> 'scene2d.Touchable':
        """public com.badlogic.gdx.scenes.scene2d.Touchable com.badlogic.gdx.scenes.scene2d.Actor.getTouchable()"""
        return 'scene2d.Touchable'.__wrap(super(scene2d.Actor, self).getTouchable())

    @override
    @overload
    def removeAction(self, arg0: 'Action'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.removeAction(com.badlogic.gdx.scenes.scene2d.Action)"""
        super(__scene2d.Actor, self).removeAction(arg0)

    @override
    @overload
    def getClickListener(self) -> 'utils.ClickListener':
        """public com.badlogic.gdx.scenes.scene2d.utils.ClickListener com.badlogic.gdx.scenes.scene2d.ui.Button.getClickListener()"""
        return 'utils.ClickListener'.__wrap(super(Button, self).getClickListener())

    @override
    @overload
    def getPadTop(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getPadTop()"""
        return float.__wrap(super(Table, self).getPadTop())

    @override
    @overload
    def drawDebug(self, arg0: 'ShapeRenderer'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.drawDebug(com.badlogic.gdx.graphics.glutils.ShapeRenderer)"""
        super(__Table, self).drawDebug(arg0)

    @override
    @overload
    def setDisabled(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Button.setDisabled(boolean)"""
        super(__Button, self).setDisabled(__boolean.valueOf(arg0))

    @overload
    def setText(self, arg0: 'CharSequence'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton.setText(java.lang.CharSequence)"""
        super(__ImageTextButton, self).setText(arg0)

    @overload
    def padRight(self, arg0: 'Value') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padRight(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Table'.__wrap(super(__Table, self).padRight(arg0))

    @override
    @overload
    def getMaxWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.getMaxWidth()"""
        return float.__wrap(super(WidgetGroup, self).getMaxWidth())

    @override
    @overload
    def setX(self, arg0: float, arg1: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setX(float,int)"""
        super(__scene2d.Actor, self).setX(__float.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def reset(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.reset()"""
        super(Table, self).reset()

    @override
    @overload
    def getListeners(self) -> 'utils.DelayedRemovalArray':
        """public com.badlogic.gdx.utils.DelayedRemovalArray<com.badlogic.gdx.scenes.scene2d.EventListener> com.badlogic.gdx.scenes.scene2d.Actor.getListeners()"""
        return 'utils.DelayedRemovalArray'.__wrap(super(scene2d.Actor, self).getListeners())

    @overload
    def removeListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.removeListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).removeListener(arg0))

    @override
    @overload
    def isTouchFocusListener(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchFocusListener()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchFocusListener())

    @overload
    def localToStageCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToStageCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToStageCoordinates(arg0))

    @override
    @overload
    def clipBegin(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.clipBegin()"""
        return bool.__wrap(super(scene2d.Actor, self).clipBegin())

    @override
    @overload
    def moveBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.moveBy(float,float)"""
        super(__scene2d.Actor, self).moveBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def pad(self, arg0: float) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.pad(float)"""
        return 'Table'.__wrap(super(__Table, self).pad(__float.valueOf(arg0)))

    @override
    @overload
    def setName(self, arg0: str):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setName(java.lang.String)"""
        super(__scene2d.Actor, self).setName(arg0)

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @overload
    def getText(self) -> 'CharSequence':
        """public java.lang.CharSequence com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton.getText()"""
        return 'CharSequence'.__wrap(super(ImageTextButton, self).getText())

    @overload
    def getRowMinHeight(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getRowMinHeight(int)"""
        return float.__wrap(super(__Table, self).getRowMinHeight(__int.valueOf(arg0)))

    @overload
    def swapActor(self, arg0: 'Actor', arg1: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.swapActor(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Group, self).swapActor(arg0, arg1))

    @override
    @overload
    def getPadX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getPadX()"""
        return float.__wrap(super(Table, self).getPadX())

    @override
    @overload
    def clearChildren(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.clearChildren(boolean)"""
        super(__Table, self).clearChildren(__boolean.valueOf(arg0))

    @override
    @overload
    def getDebug(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.getDebug()"""
        return bool.__wrap(super(scene2d.Actor, self).getDebug())

    @override
    @overload
    def setHeight(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setHeight(float)"""
        super(__scene2d.Actor, self).setHeight(__float.valueOf(arg0))

    @override
    @overload
    def setScale(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScale(float)"""
        super(__scene2d.Actor, self).setScale(__float.valueOf(arg0))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getButtonGroup(self) -> 'ButtonGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup com.badlogic.gdx.scenes.scene2d.ui.Button.getButtonGroup()"""
        return 'ButtonGroup'.__wrap(super(Button, self).getButtonGroup())

    @overload
    def add(self, arg0: 'CharSequence') -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<com.badlogic.gdx.scenes.scene2d.ui.Label> com.badlogic.gdx.scenes.scene2d.ui.Table.add(java.lang.CharSequence)"""
        return 'Cell'.__wrap(super(__Table, self).add(arg0))

    @override
    @overload
    def setStyle(self, arg0: 'ButtonStyle'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton.setStyle(com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle)"""
        super(__ImageTextButton, self).setStyle(arg0)

    @overload
    def padBottom(self, arg0: float) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padBottom(float)"""
        return 'Table'.__wrap(super(__Table, self).padBottom(__float.valueOf(arg0)))

    @overload
    def getLabelCell(self) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton.getLabelCell()"""
        return 'Cell'.__wrap(super(ImageTextButton, self).getLabelCell())

    @override
    @overload
    def setDebug(self, arg0: bool, arg1: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Group.setDebug(boolean,boolean)"""
        super(__scene2d.Group, self).setDebug(__boolean.valueOf(arg0), __boolean.valueOf(arg1))

    @override
    @overload
    def row(self) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell com.badlogic.gdx.scenes.scene2d.ui.Table.row()"""
        return 'Cell'.__wrap(super(Table, self).row())

    @overload
    def background(self, arg0: 'Drawable') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.background(com.badlogic.gdx.scenes.scene2d.utils.Drawable)"""
        return 'Table'.__wrap(super(__Table, self).background(arg0))

    @override
    @overload
    def setTransform(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Group.setTransform(boolean)"""
        super(__scene2d.Group, self).setTransform(__boolean.valueOf(arg0))

    @overload
    def parentToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.parentToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).parentToLocalCoordinates(arg0))

    @override
    @overload
    def getRotation(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getRotation()"""
        return float.__wrap(super(scene2d.Actor, self).getRotation())

    @override
    @overload
    def getMaxHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.getMaxHeight()"""
        return float.__wrap(super(WidgetGroup, self).getMaxHeight())

    @overload
    def padTop(self, arg0: float) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padTop(float)"""
        return 'Table'.__wrap(super(__Table, self).padTop(__float.valueOf(arg0)))

    @override
    @overload
    def isDisabled(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Button.isDisabled()"""
        return bool.__wrap(super(Button, self).isDisabled())

    @overload
    def padLeft(self, arg0: 'Value') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padLeft(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Table'.__wrap(super(__Table, self).padLeft(arg0))

    @override
    @overload
    def addActor(self, arg0: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.addActor(com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__scene2d.Group, self).addActor(arg0)

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def getBackground(self) -> 'utils.Drawable':
        """public com.badlogic.gdx.scenes.scene2d.utils.Drawable com.badlogic.gdx.scenes.scene2d.ui.Table.getBackground()"""
        return 'utils.Drawable'.__wrap(super(Table, self).getBackground())

    @override
    @overload
    def getPrefHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Button.getPrefHeight()"""
        return float.__wrap(super(Button, self).getPrefHeight())

    @overload
    def pad(self, arg0: float, arg1: float, arg2: float, arg3: float) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.pad(float,float,float,float)"""
        return 'Table'.__wrap(super(__Table, self).pad(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3)))

    @overload
    def add(self, arg0: 'CharSequence', arg1: str) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<com.badlogic.gdx.scenes.scene2d.ui.Label> com.badlogic.gdx.scenes.scene2d.ui.Table.add(java.lang.CharSequence,java.lang.String)"""
        return 'Cell'.__wrap(super(__Table, self).add(arg0, arg1))

    @override
    @overload
    def getRows(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.ui.Table.getRows()"""
        return int.__wrap(super(Table, self).getRows())

    @override
    @overload
    def setWidth(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setWidth(float)"""
        super(__scene2d.Actor, self).setWidth(__float.valueOf(arg0))

    @override
    @overload
    def isTouchFocusTarget(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchFocusTarget()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchFocusTarget())

    @overload
    def setLabel(self, arg0: 'Label'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton.setLabel(com.badlogic.gdx.scenes.scene2d.ui.Label)"""
        super(__ImageTextButton, self).setLabel(arg0)

    @override
    @overload
    def isChecked(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Button.isChecked()"""
        return bool.__wrap(super(Button, self).isChecked())

    @override
    @overload
    def setPosition(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setPosition(float,float)"""
        super(__scene2d.Actor, self).setPosition(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def setClip(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.setClip(boolean)"""
        super(__Table, self).setClip(__boolean.valueOf(arg0))

    @override
    @overload
    def addActorAt(self, arg0: int, arg1: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.addActorAt(int,com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__scene2d.Group, self).addActorAt(__int.valueOf(arg0), arg1)

    @overload
    def hit(self, arg0: float, arg1: float, arg2: bool) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.ui.Table.hit(float,float,boolean)"""
        return 'scene2d.Actor'.__wrap(super(__Table, self).hit(__float.valueOf(arg0), __float.valueOf(arg1), __boolean.valueOf(arg2)))

    @override
    @overload
    def setProgrammaticChangeEvents(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Button.setProgrammaticChangeEvents(boolean)"""
        super(__Button, self).setProgrammaticChangeEvents(__boolean.valueOf(arg0))

    @overload
    def __init__(self, arg0: str, arg1: 'Skin', arg2: str):
        """public com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String)"""
        val = __ImageTextButton(arg0, arg1, arg2)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def setOriginY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOriginY(float)"""
        super(__scene2d.Actor, self).setOriginY(__float.valueOf(arg0))

    @override
    @overload
    def getPadY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getPadY()"""
        return float.__wrap(super(Table, self).getPadY())

    @overload
    def getLabel(self) -> 'Label':
        """public com.badlogic.gdx.scenes.scene2d.ui.Label com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton.getLabel()"""
        return 'Label'.__wrap(super(ImageTextButton, self).getLabel())

    @override
    @overload
    def getPadRight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getPadRight()"""
        return float.__wrap(super(Table, self).getPadRight())

    @overload
    def localToScreenCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToScreenCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToScreenCoordinates(arg0))

    @override
    @overload
    def clear(self):
        """public void com.badlogic.gdx.scenes.scene2d.Group.clear()"""
        super(scene2d.Group, self).clear()

    @overload
    def stack(self, *arg0: 'scene2d.Actor') -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<com.badlogic.gdx.scenes.scene2d.ui.Stack> com.badlogic.gdx.scenes.scene2d.ui.Table.stack(com.badlogic.gdx.scenes.scene2d.Actor...)"""
        return 'Cell'.__wrap(super(__Table, self).stack(arg0))

    @override
    @overload
    def setTouchable(self, arg0: 'Touchable'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setTouchable(com.badlogic.gdx.scenes.scene2d.Touchable)"""
        super(__scene2d.Actor, self).setTouchable(arg0)

    @override
    @overload
    def add(self) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell com.badlogic.gdx.scenes.scene2d.ui.Table.add()"""
        return 'Cell'.__wrap(super(Table, self).add())

    @overload
    def getColumnWidth(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getColumnWidth(int)"""
        return float.__wrap(super(__Table, self).getColumnWidth(__int.valueOf(arg0)))

    @override
    @overload
    def clearChildren(self):
        """public void com.badlogic.gdx.scenes.scene2d.Group.clearChildren()"""
        super(scene2d.Group, self).clearChildren()

    @override
    @overload
    def debugAll(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.debugAll()"""
        return 'Table'.__wrap(super(Table, self).debugAll())

    @overload
    def localToParentCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToParentCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToParentCoordinates(arg0))

    @override
    @overload
    def setCullingArea(self, arg0: 'Rectangle'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.setCullingArea(com.badlogic.gdx.math.Rectangle)"""
        super(__scene2d.Group, self).setCullingArea(arg0)

    @override
    @overload
    def getName(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.Actor.getName()"""
        return str.__wrap(super(scene2d.Actor, self).getName())

    @override
    @overload
    def draw(self, arg0: 'Batch', arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton.draw(com.badlogic.gdx.graphics.g2d.Batch,float)"""
        super(__ImageTextButton, self).draw(arg0, __float.valueOf(arg1))

    @override
    @overload
    def getCaptureListeners(self) -> 'utils.DelayedRemovalArray':
        """public com.badlogic.gdx.utils.DelayedRemovalArray<com.badlogic.gdx.scenes.scene2d.EventListener> com.badlogic.gdx.scenes.scene2d.Actor.getCaptureListeners()"""
        return 'utils.DelayedRemovalArray'.__wrap(super(scene2d.Actor, self).getCaptureListeners())

    @overload
    def padBottom(self, arg0: 'Value') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padBottom(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Table'.__wrap(super(__Table, self).padBottom(arg0))

    @override
    @overload
    def clear(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Group.clear(boolean)"""
        super(__scene2d.Group, self).clear(__boolean.valueOf(arg0))

    @override
    @overload
    def setY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setY(float)"""
        super(__scene2d.Actor, self).setY(__float.valueOf(arg0))

    @override
    @overload
    def addActorAfter(self, arg0: 'Actor', arg1: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.addActorAfter(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__scene2d.Group, self).addActorAfter(arg0, arg1)

    @override
    @overload
    def top(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.top()"""
        return 'Table'.__wrap(super(Table, self).top())

    @override
    @overload
    def scaleBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.scaleBy(float,float)"""
        super(__scene2d.Actor, self).scaleBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def align(self, arg0: int) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.align(int)"""
        return 'Table'.__wrap(super(__Table, self).align(__int.valueOf(arg0)))

    @overload
    def notify(self, arg0: 'Event', arg1: bool) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.notify(com.badlogic.gdx.scenes.scene2d.Event,boolean)"""
        return bool.__wrap(super(__scene2d.Actor, self).notify(arg0, __boolean.valueOf(arg1)))

    @override
    @overload
    def act(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Group.act(float)"""
        super(__scene2d.Group, self).act(__float.valueOf(arg0))

    @override
    @overload
    def setUserObject(self, arg0: object):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setUserObject(java.lang.Object)"""
        super(__scene2d.Actor, self).setUserObject(arg0)

    @override
    @overload
    def hasScrollFocus(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasScrollFocus()"""
        return bool.__wrap(super(scene2d.Actor, self).hasScrollFocus())

    @override
    @overload
    def toFront(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.toFront()"""
        super(scene2d.Actor, self).toFront()

    @override
    @overload
    def scaleBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.scaleBy(float)"""
        super(__scene2d.Actor, self).scaleBy(__float.valueOf(arg0))

    @override
    @overload
    def getOriginX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getOriginX()"""
        return float.__wrap(super(scene2d.Actor, self).getOriginX())

    @overload
    def getRow(self, arg0: float) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.ui.Table.getRow(float)"""
        return int.__wrap(super(__Table, self).getRow(__float.valueOf(arg0)))

    @overload
    def getChild(self, arg0: int) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.Group.getChild(int)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Group, self).getChild(__int.valueOf(arg0)))

    @override
    @overload
    def getSkin(self) -> 'Skin':
        """public com.badlogic.gdx.scenes.scene2d.ui.Skin com.badlogic.gdx.scenes.scene2d.ui.Table.getSkin()"""
        return 'Skin'.__wrap(super(Table, self).getSkin())

    @override
    @overload
    def setDebug(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.setDebug(boolean)"""
        super(__Table, self).setDebug(__boolean.valueOf(arg0))

    @overload
    def pad(self, arg0: 'Value', arg1: 'Value', arg2: 'Value', arg3: 'Value') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.pad(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Table'.__wrap(super(__Table, self).pad(arg0, arg1, arg2, arg3))

    @overload
    def add(self, arg0: 'CharSequence', arg1: str, arg2: 'Color') -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<com.badlogic.gdx.scenes.scene2d.ui.Label> com.badlogic.gdx.scenes.scene2d.ui.Table.add(java.lang.CharSequence,java.lang.String,com.badlogic.gdx.graphics.Color)"""
        return 'Cell'.__wrap(super(__Table, self).add(arg0, arg1, arg2))

    @override
    @overload
    def getPadBottom(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getPadBottom()"""
        return float.__wrap(super(Table, self).getPadBottom())

    @override
    @overload
    def getStage(self) -> 'scene2d.Stage':
        """public com.badlogic.gdx.scenes.scene2d.Stage com.badlogic.gdx.scenes.scene2d.Actor.getStage()"""
        return 'scene2d.Stage'.__wrap(super(scene2d.Actor, self).getStage())

    @override
    @overload
    def setChecked(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Button.setChecked(boolean)"""
        super(__Button, self).setChecked(__boolean.valueOf(arg0))

    @override
    @overload
    def addAction(self, arg0: 'Action'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.addAction(com.badlogic.gdx.scenes.scene2d.Action)"""
        super(__scene2d.Actor, self).addAction(arg0)

    @override
    @overload
    def getPadRightValue(self) -> 'Value':
        """public com.badlogic.gdx.scenes.scene2d.ui.Value com.badlogic.gdx.scenes.scene2d.ui.Table.getPadRightValue()"""
        return 'Value'.__wrap(super(Table, self).getPadRightValue())

    @override
    @overload
    def setColor(self, arg0: float, arg1: float, arg2: float, arg3: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setColor(float,float,float,float)"""
        super(__scene2d.Actor, self).setColor(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3))

    @overload
    def getColumnMinWidth(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getColumnMinWidth(int)"""
        return float.__wrap(super(__Table, self).getColumnMinWidth(__int.valueOf(arg0)))

    @overload
    def localToAscendantCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToAscendantCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToAscendantCoordinates(arg0, arg1))

    @override
    @overload
    def getActions(self) -> 'utils.Array':
        """public com.badlogic.gdx.utils.Array<com.badlogic.gdx.scenes.scene2d.Action> com.badlogic.gdx.scenes.scene2d.Actor.getActions()"""
        return 'utils.Array'.__wrap(super(scene2d.Actor, self).getActions())

    @overload
    def __init__(self, arg0: str, arg1: 'Skin'):
        """public com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin)"""
        val = __ImageTextButton(arg0, arg1)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def debugTable(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.debugTable()"""
        return 'Table'.__wrap(super(Table, self).debugTable())

    @overload
    def add(self, *arg0: 'scene2d.Actor') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.add(com.badlogic.gdx.scenes.scene2d.Actor...)"""
        return 'Table'.__wrap(super(__Table, self).add(arg0))

    @override
    @overload
    def right(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.right()"""
        return 'Table'.__wrap(super(Table, self).right())

    @overload
    def getImageCell(self) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton.getImageCell()"""
        return 'Cell'.__wrap(super(ImageTextButton, self).getImageCell())

    @overload
    def localToDescendantCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Group.localToDescendantCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Group, self).localToDescendantCoordinates(arg0, arg1))

    @overload
    def padRight(self, arg0: float) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padRight(float)"""
        return 'Table'.__wrap(super(__Table, self).padRight(__float.valueOf(arg0)))

    @overload
    def setZIndex(self, arg0: int) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.setZIndex(int)"""
        return bool.__wrap(super(__scene2d.Actor, self).setZIndex(__int.valueOf(arg0)))

    @overload
    def padLeft(self, arg0: float) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padLeft(float)"""
        return 'Table'.__wrap(super(__Table, self).padLeft(__float.valueOf(arg0)))

    @overload
    def getX(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getX(int)"""
        return float.__wrap(super(__scene2d.Actor, self).getX(__int.valueOf(arg0)))

    @override
    @overload
    def sizeBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.sizeBy(float)"""
        super(__scene2d.Actor, self).sizeBy(__float.valueOf(arg0))

    @override
    @overload
    def getMinWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Button.getMinWidth()"""
        return float.__wrap(super(Button, self).getMinWidth())

    @override
    @overload
    def isPressed(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Button.isPressed()"""
        return bool.__wrap(super(Button, self).isPressed())

    @override
    @overload
    def clip(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.clip()"""
        return 'Table'.__wrap(super(Table, self).clip())

    @overload
    def getRowPrefHeight(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getRowPrefHeight(int)"""
        return float.__wrap(super(__Table, self).getRowPrefHeight(__int.valueOf(arg0)))

    @overload
    def __init__(self, arg0: str, arg1: 'ImageTextButtonStyle'):
        """public com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton$ImageTextButtonStyle)"""
        val = __ImageTextButton(arg0, arg1)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def sizeBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.sizeBy(float,float)"""
        super(__scene2d.Actor, self).sizeBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def hasActions(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasActions()"""
        return bool.__wrap(super(scene2d.Actor, self).hasActions())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0))

    @override
    @overload
    def setScaleX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScaleX(float)"""
        super(__scene2d.Actor, self).setScaleX(__float.valueOf(arg0))

    @override
    @overload
    def getStyle(self) -> 'ImageTextButtonStyle':
        """public com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton$ImageTextButtonStyle com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton.getStyle()"""
        return 'ImageTextButtonStyle'.__wrap(super(ImageTextButton, self).getStyle())

    @overload
    def removeActor(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Table.removeActor(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__Table, self).removeActor(arg0))

    @override
    @overload
    def getX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getX()"""
        return float.__wrap(super(scene2d.Actor, self).getX())

    @override
    @overload
    def left(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.left()"""
        return 'Table'.__wrap(super(Table, self).left())

    @override
    @overload
    def center(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.center()"""
        return 'Table'.__wrap(super(Table, self).center())

    @override
    @overload
    def setBackground(self, arg0: 'Drawable'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.setBackground(com.badlogic.gdx.scenes.scene2d.utils.Drawable)"""
        super(__Table, self).setBackground(arg0)

    @overload
    def add(self, arg0: 'Actor') -> 'Cell':
        """public <T extends com.badlogic.gdx.scenes.scene2d.Actor> com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Table.add(T)"""
        return 'Cell'.__wrap(super(__Table, self).add(arg0))

    @override
    @overload
    def toBack(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.toBack()"""
        super(scene2d.Actor, self).toBack()

    @override
    @overload
    def debug(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.debug()"""
        return 'Table'.__wrap(super(Table, self).debug())

    @override
    @overload
    def getClip(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Table.getClip()"""
        return bool.__wrap(super(Table, self).getClip())

    @overload
    def screenToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.screenToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).screenToLocalCoordinates(arg0))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def ancestorsVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.ancestorsVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).ancestorsVisible())

    @override
    @overload
    def getMinHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Button.getMinHeight()"""
        return float.__wrap(super(Button, self).getMinHeight())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def setSize(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setSize(float,float)"""
        super(__scene2d.Actor, self).setSize(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def layout(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.layout()"""
        super(Table, self).layout()

    @override
    @overload
    def getZIndex(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.Actor.getZIndex()"""
        return int.__wrap(super(scene2d.Actor, self).getZIndex())

    @overload
    def getY(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getY(int)"""
        return float.__wrap(super(__scene2d.Actor, self).getY(__int.valueOf(arg0)))

    @override
    @overload
    def setOrigin(self, arg0: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOrigin(int)"""
        super(__scene2d.Actor, self).setOrigin(__int.valueOf(arg0))

    @override
    @overload
    def validate(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.validate()"""
        super(WidgetGroup, self).validate()

    @overload
    def isDescendantOf(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isDescendantOf(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Actor, self).isDescendantOf(arg0))

    @overload
    def getImage(self) -> 'Image':
        """public com.badlogic.gdx.scenes.scene2d.ui.Image com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton.getImage()"""
        return 'Image'.__wrap(super(ImageTextButton, self).getImage())

    @override
    @overload
    def addActorBefore(self, arg0: 'Actor', arg1: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.addActorBefore(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__scene2d.Group, self).addActorBefore(arg0, arg1)

    @override
    @overload
    def getParent(self) -> 'scene2d.Group':
        """public com.badlogic.gdx.scenes.scene2d.Group com.badlogic.gdx.scenes.scene2d.Actor.getParent()"""
        return 'scene2d.Group'.__wrap(super(scene2d.Actor, self).getParent())

    @override
    @overload
    def clearListeners(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clearListeners()"""
        super(scene2d.Actor, self).clearListeners()

    @overload
    def localToActorCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToActorCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToActorCoordinates(arg0, arg1))

    @override
    @overload
    def getTableDebug(self) -> 'Debug':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table$Debug com.badlogic.gdx.scenes.scene2d.ui.Table.getTableDebug()"""
        return 'Debug'.__wrap(super(Table, self).getTableDebug())

    @override
    @overload
    def setOriginX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOriginX(float)"""
        super(__scene2d.Actor, self).setOriginX(__float.valueOf(arg0))

    @overload
    def removeActorAt(self, arg0: int, arg1: bool) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.ui.Table.removeActorAt(int,boolean)"""
        return 'scene2d.Actor'.__wrap(super(__Table, self).removeActorAt(__int.valueOf(arg0), __boolean.valueOf(arg1)))

    @override
    @overload
    def getHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getHeight()"""
        return float.__wrap(super(scene2d.Actor, self).getHeight())

    @override
    @overload
    def hasKeyboardFocus(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasKeyboardFocus()"""
        return bool.__wrap(super(scene2d.Actor, self).hasKeyboardFocus())

    @override
    @overload
    def getOriginY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getOriginY()"""
        return float.__wrap(super(scene2d.Actor, self).getOriginY())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton.toString()"""
        return str.__wrap(super(ImageTextButton, self).toString())

    @override
    @overload
    def pack(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.pack()"""
        super(WidgetGroup, self).pack()

    @override
    @overload
    def clipEnd(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clipEnd()"""
        super(scene2d.Actor, self).clipEnd()

    @override
    @overload
    def getUserObject(self) -> object:
        """public java.lang.Object com.badlogic.gdx.scenes.scene2d.Actor.getUserObject()"""
        return object.__wrap(super(scene2d.Actor, self).getUserObject())

    @override
    @overload
    def toggle(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Button.toggle()"""
        super(Button, self).toggle()

    @override
    @overload
    def rotateBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.rotateBy(float)"""
        super(__scene2d.Actor, self).rotateBy(__float.valueOf(arg0))

    @overload
    def background(self, arg0: str) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.background(java.lang.String)"""
        return 'Table'.__wrap(super(__Table, self).background(arg0))

    @overload
    def getRowHeight(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getRowHeight(int)"""
        return float.__wrap(super(__Table, self).getRowHeight(__int.valueOf(arg0)))

    @override
    @overload
    def getPadLeftValue(self) -> 'Value':
        """public com.badlogic.gdx.scenes.scene2d.ui.Value com.badlogic.gdx.scenes.scene2d.ui.Table.getPadLeftValue()"""
        return 'Value'.__wrap(super(Table, self).getPadLeftValue())

    @override
    @overload
    def setScale(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScale(float,float)"""
        super(__scene2d.Actor, self).setScale(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def addListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.addListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).addListener(arg0))

    @override
    @overload
    def setRound(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.setRound(boolean)"""
        super(__Table, self).setRound(__boolean.valueOf(arg0))

    @overload
    def debug(self, arg0: 'Debug') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.debug(com.badlogic.gdx.scenes.scene2d.ui.Table$Debug)"""
        return 'Table'.__wrap(super(__Table, self).debug(arg0))

    @overload
    def clip(self, arg0: bool) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.clip(boolean)"""
        return 'Table'.__wrap(super(__Table, self).clip(__boolean.valueOf(arg0)))

    @override
    @overload
    def invalidate(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.invalidate()"""
        super(Table, self).invalidate()

    @override
    @overload
    def getPadLeft(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getPadLeft()"""
        return float.__wrap(super(Table, self).getPadLeft())

    @override
    @overload
    def setVisible(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setVisible(boolean)"""
        super(__scene2d.Actor, self).setVisible(__boolean.valueOf(arg0))

    @override
    @overload
    def setY(self, arg0: float, arg1: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setY(float,int)"""
        super(__scene2d.Actor, self).setY(__float.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def setFillParent(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.setFillParent(boolean)"""
        super(__WidgetGroup, self).setFillParent(__boolean.valueOf(arg0))

    @overload
    def getCell(self, arg0: 'Actor') -> 'Cell':
        """public <T extends com.badlogic.gdx.scenes.scene2d.Actor> com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Table.getCell(T)"""
        return 'Cell'.__wrap(super(__Table, self).getCell(arg0))

    @override
    @overload
    def needsLayout(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.needsLayout()"""
        return bool.__wrap(super(WidgetGroup, self).needsLayout())

    @override
    @overload
    def setX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setX(float)"""
        super(__scene2d.Actor, self).setX(__float.valueOf(arg0))

    @override
    @overload
    def setOrigin(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOrigin(float,float)"""
        super(__scene2d.Actor, self).setOrigin(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def getCullingArea(self) -> 'math.Rectangle':
        """public com.badlogic.gdx.math.Rectangle com.badlogic.gdx.scenes.scene2d.Group.getCullingArea()"""
        return 'math.Rectangle'.__wrap(super(scene2d.Group, self).getCullingArea())

    @override
    @overload
    def getRight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getRight()"""
        return float.__wrap(super(scene2d.Actor, self).getRight())

    @overload
    def isAscendantOf(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isAscendantOf(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Actor, self).isAscendantOf(arg0))

    @override
    @overload
    def hasParent(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasParent()"""
        return bool.__wrap(super(scene2d.Actor, self).hasParent())

    @override
    @overload
    def getChildren(self) -> 'utils.SnapshotArray':
        """public com.badlogic.gdx.utils.SnapshotArray<com.badlogic.gdx.scenes.scene2d.Actor> com.badlogic.gdx.scenes.scene2d.Group.getChildren()"""
        return 'utils.SnapshotArray'.__wrap(super(scene2d.Group, self).getChildren())

    @override
    @overload
    def getScaleY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getScaleY()"""
        return float.__wrap(super(scene2d.Actor, self).getScaleY())

    @override
    @overload
    def setSkin(self, arg0: 'Skin'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.setSkin(com.badlogic.gdx.scenes.scene2d.ui.Skin)"""
        super(__Table, self).setSkin(arg0)

    @override
    @overload
    def getWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getWidth()"""
        return float.__wrap(super(scene2d.Actor, self).getWidth())

    @override
    @overload
    def setPosition(self, arg0: float, arg1: float, arg2: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setPosition(float,float,int)"""
        super(__scene2d.Actor, self).setPosition(__float.valueOf(arg0), __float.valueOf(arg1), __int.valueOf(arg2))

    @override
    @overload
    def setLayoutEnabled(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.setLayoutEnabled(boolean)"""
        super(__WidgetGroup, self).setLayoutEnabled(__boolean.valueOf(arg0))

    @overload
    def removeCaptureListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.removeCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).removeCaptureListener(arg0))

    @override
    @overload
    def invalidateHierarchy(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.invalidateHierarchy()"""
        super(WidgetGroup, self).invalidateHierarchy()

    @override
    @overload
    def setColor(self, arg0: 'Color'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setColor(com.badlogic.gdx.graphics.Color)"""
        super(__scene2d.Actor, self).setColor(arg0)

    @overload
    def addCaptureListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.addCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).addCaptureListener(arg0))

    @overload
    def fire(self, arg0: 'Event') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.fire(com.badlogic.gdx.scenes.scene2d.Event)"""
        return bool.__wrap(super(__scene2d.Actor, self).fire(arg0))

    @overload
    def columnDefaults(self, arg0: int) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell com.badlogic.gdx.scenes.scene2d.ui.Table.columnDefaults(int)"""
        return 'Cell'.__wrap(super(__Table, self).columnDefaults(__int.valueOf(arg0)))

    @override
    @overload
    def remove(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.remove()"""
        return bool.__wrap(super(scene2d.Actor, self).remove())

    @override
    @overload
    def isVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).isVisible())

    @override
    @overload
    def defaults(self) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell com.badlogic.gdx.scenes.scene2d.ui.Table.defaults()"""
        return 'Cell'.__wrap(super(Table, self).defaults())

    @overload
    def pad(self, arg0: 'Value') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.pad(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Table'.__wrap(super(__Table, self).pad(arg0))

    @override
    @overload
    def getPadBottomValue(self) -> 'Value':
        """public com.badlogic.gdx.scenes.scene2d.ui.Value com.badlogic.gdx.scenes.scene2d.ui.Table.getPadBottomValue()"""
        return 'Value'.__wrap(super(Table, self).getPadBottomValue())

    @override
    @overload
    def getTop(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getTop()"""
        return float.__wrap(super(scene2d.Actor, self).getTop())

    @override
    @overload
    def clearActions(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clearActions()"""
        super(scene2d.Actor, self).clearActions()

    @override
    @overload
    def setRotation(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setRotation(float)"""
        super(__scene2d.Actor, self).setRotation(__float.valueOf(arg0))

    @override
    @overload
    def getScaleX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getScaleX()"""
        return float.__wrap(super(scene2d.Actor, self).getScaleX())

    @override
    @overload
    def setBackground(self, arg0: str):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.setBackground(java.lang.String)"""
        super(__Table, self).setBackground(arg0)

    @overload
    def firstAscendant(self, arg0: 'Class') -> 'scene2d.Actor':
        """public <T extends com.badlogic.gdx.scenes.scene2d.Actor> T com.badlogic.gdx.scenes.scene2d.Actor.firstAscendant(java.lang.Class<T>)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Actor, self).firstAscendant(arg0))

    @override
    @overload
    def setScaleY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScaleY(float)"""
        super(__scene2d.Actor, self).setScaleY(__float.valueOf(arg0))

    @overload
    def stageToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.stageToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).stageToLocalCoordinates(arg0))

    @override
    @overload
    def bottom(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.bottom()"""
        return 'Table'.__wrap(super(Table, self).bottom())

    @overload
    def swapActor(self, arg0: int, arg1: int) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.swapActor(int,int)"""
        return bool.__wrap(super(__scene2d.Group, self).swapActor(__int.valueOf(arg0), __int.valueOf(arg1)))

    @override
    @overload
    def hasChildren(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.hasChildren()"""
        return bool.__wrap(super(scene2d.Group, self).hasChildren())

    @override
    @overload
    def ascendantsVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.ascendantsVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).ascendantsVisible())

    @override
    @overload
    def getAlign(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.ui.Table.getAlign()"""
        return int.__wrap(super(Table, self).getAlign())

    @override
    @overload
    def debugCell(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.debugCell()"""
        return 'Table'.__wrap(super(Table, self).debugCell())

    @override
    @overload
    def getColumns(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.ui.Table.getColumns()"""
        return int.__wrap(super(Table, self).getColumns())

    @override
    @overload
    def debugActor(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.debugActor()"""
        return 'Table'.__wrap(super(Table, self).debugActor())

    @overload
    def padTop(self, arg0: 'Value') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padTop(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Table'.__wrap(super(__Table, self).padTop(arg0))

    @override
    @overload
    def getColor(self) -> 'graphics.Color':
        """public com.badlogic.gdx.graphics.Color com.badlogic.gdx.scenes.scene2d.Actor.getColor()"""
        return 'graphics.Color'.__wrap(super(scene2d.Actor, self).getColor())

    @override
    @overload
    def isTransform(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.isTransform()"""
        return bool.__wrap(super(scene2d.Group, self).isTransform())

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @override
    @overload
    def isTouchable(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchable()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchable())

    @overload
    def clipBegin(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.clipBegin(float,float,float,float)"""
        return bool.__wrap(super(__scene2d.Actor, self).clipBegin(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3)))

    @override
    @overload
    def getCells(self) -> 'utils.Array':
        """public com.badlogic.gdx.utils.Array<com.badlogic.gdx.scenes.scene2d.ui.Cell> com.badlogic.gdx.scenes.scene2d.ui.Table.getCells()"""
        return 'utils.Array'.__wrap(super(Table, self).getCells())

    @override
    @overload
    def getPadTopValue(self) -> 'Value':
        """public com.badlogic.gdx.scenes.scene2d.ui.Value com.badlogic.gdx.scenes.scene2d.ui.Table.getPadTopValue()"""
        return 'Value'.__wrap(super(Table, self).getPadTopValue()) 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.Touchpad$TouchpadStyle
from pyquantum_helper import import_once as __import_once__
from builtins import str
try:
    from pygdx.scenes.scene2d import utils
except ImportError:
    utils = __import_once__("pygdx.scenes.scene2d.utils")

from pyquantum_helper import override
import java.lang.Object as __object
from builtins import type
import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import com.badlogic.gdx.scenes.scene2d.ui.Touchpad as __Touchpad_TouchpadStyle
__TouchpadStyle = __Touchpad_TouchpadStyle.TouchpadStyle
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import java.lang.Integer as __int
from builtins import bool
from builtins import int
 
class TouchpadStyle():
    """com.badlogic.gdx.scenes.scene2d.ui.Touchpad.TouchpadStyle"""
 
    @staticmethod
    def __wrap(java_value: __TouchpadStyle) -> 'TouchpadStyle':
        return TouchpadStyle(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __TouchpadStyle):
        """
        Dynamic initializer for TouchpadStyle.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def __init__(self, arg0: 'TouchpadStyle'):
        """public com.badlogic.gdx.scenes.scene2d.ui.Touchpad$TouchpadStyle(com.badlogic.gdx.scenes.scene2d.ui.Touchpad$TouchpadStyle)"""
        val = __TouchpadStyle(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def __init__(self, arg0: 'Drawable', arg1: 'Drawable'):
        """public com.badlogic.gdx.scenes.scene2d.ui.Touchpad$TouchpadStyle(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable)"""
        val = __TouchpadStyle(arg0, arg1)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.lang.Object.toString()"""
        return str.__wrap(super(object, self).toString())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def __init__(self):
        """public com.badlogic.gdx.scenes.scene2d.ui.Touchpad$TouchpadStyle()"""
        val = __TouchpadStyle()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def __init__(self, ):
        """public com.badlogic.gdx.scenes.scene2d.ui.Touchpad$TouchpadStyle()"""
        val = __TouchpadStyle()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0)) 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldFilter$DigitsOnlyFilter
from builtins import str
import java.lang.Character as __char
from pyquantum_helper import override
import java.lang.Object as __object
from builtins import type
import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import com.badlogic.gdx.scenes.scene2d.ui.TextField as __TextField_TextFieldFilter_DigitsOnlyFilter
__DigitsOnlyFilter = __TextField_TextFieldFilter_DigitsOnlyFilter.TextFieldFilter.DigitsOnlyFilter
import java.lang.Integer as __int
from builtins import bool
from builtins import int
 
class DigitsOnlyFilter(__TextFieldFilter, TextFieldFilter):
    """com.badlogic.gdx.scenes.scene2d.ui.TextField.TextFieldFilter.DigitsOnlyFilter"""
 
    @staticmethod
    def __wrap(java_value: __DigitsOnlyFilter) -> 'DigitsOnlyFilter':
        return DigitsOnlyFilter(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __DigitsOnlyFilter):
        """
        Dynamic initializer for DigitsOnlyFilter.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.lang.Object.toString()"""
        return str.__wrap(super(object, self).toString())

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @overload
    def acceptChar(self, arg0: 'TextField', arg1: str) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldFilter$DigitsOnlyFilter.acceptChar(com.badlogic.gdx.scenes.scene2d.ui.TextField,char)"""
        return bool.__wrap(super(__DigitsOnlyFilter, self).acceptChar(arg0, __char.valueOf(arg1)))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def __init__(self, ):
        """public com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldFilter$DigitsOnlyFilter()"""
        val = __DigitsOnlyFilter()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def __init__(self):
        """public com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldFilter$DigitsOnlyFilter()"""
        val = __DigitsOnlyFilter()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0)) 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.TextArea
from pyquantum_helper import import_once as __import_once__
import com.badlogic.gdx.scenes.scene2d.Touchable as __Touchable
__Touchable = __Touchable
try:
    from pygdx.scenes import scene2d
except ImportError:
    scene2d = __import_once__("pygdx.scenes.scene2d")

import com.badlogic.gdx.graphics.Color as __Color
__Color = __Color
import java.lang.Character as __char
import java.lang.Boolean as __boolean
try:
    from pygdx.graphics import g2d
except ImportError:
    g2d = __import_once__("pygdx.graphics.g2d")

import com.badlogic.gdx.scenes.scene2d.ui.TextArea as __TextArea
__TextArea = __TextArea
import com.badlogic.gdx.scenes.scene2d.ui.TextField as __TextField_TextFieldFilter
__TextFieldFilter = __TextField_TextFieldFilter.TextFieldFilter
from builtins import type
import com.badlogic.gdx.scenes.scene2d.Group as __Group
__Group = __Group
import com.badlogic.gdx.math.Vector2 as __Vector2
__Vector2 = __Vector2
import java.lang.Class as __Class
__Class = __Class
import com.badlogic.gdx.utils.Array as __Array
__Array = __Array
import java.lang.String as __string
import com.badlogic.gdx.scenes.scene2d.ui.TextField as __TextField_TextFieldStyle
__TextFieldStyle = __TextField_TextFieldStyle.TextFieldStyle
try:
    from pygdx import math
except ImportError:
    math = __import_once__("pygdx.math")

from builtins import bool
import com.badlogic.gdx.scenes.scene2d.ui.TextField as __TextField
__TextField = __TextField
import com.badlogic.gdx.scenes.scene2d.ui.Widget as __Widget
__Widget = __Widget
from builtins import str
try:
    from pygdx import utils
except ImportError:
    utils = __import_once__("pygdx.utils")

from pyquantum_helper import override
import java.lang.Object as __object
from builtins import float
import com.badlogic.gdx.scenes.scene2d.InputListener as __InputListener
__InputListener = __InputListener
from builtins import object
import com.badlogic.gdx.utils.DelayedRemovalArray as __DelayedRemovalArray
__DelayedRemovalArray = __DelayedRemovalArray
import java.lang.Long as __long
import java.lang.Float as __float
import java.lang.String as __String
__String = __String
try:
    from pygdx.graphics import glutils
except ImportError:
    glutils = __import_once__("pygdx.graphics.glutils")

import java.lang.Object as __Object
__Object = __Object
import com.badlogic.gdx.scenes.scene2d.ui.TextField as __TextField_OnscreenKeyboard
__OnscreenKeyboard = __TextField_OnscreenKeyboard.OnscreenKeyboard
import com.badlogic.gdx.scenes.scene2d.Actor as __Actor
__Actor = __Actor
import java.lang.Integer as __int
import com.badlogic.gdx.scenes.scene2d.Stage as __Stage
__Stage = __Stage
try:
    from pygdx import graphics
except ImportError:
    graphics = __import_once__("pygdx.graphics")

from builtins import int
 
class TextArea(__TextField, TextField):
    """com.badlogic.gdx.scenes.scene2d.ui.TextArea"""
 
    @staticmethod
    def __wrap(java_value: __TextArea) -> 'TextArea':
        return TextArea(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __TextArea):
        """
        Dynamic initializer for TextArea.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def __init__(self, arg0: str, arg1: 'Skin', arg2: str):
        """public com.badlogic.gdx.scenes.scene2d.ui.TextArea(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String)"""
        val = __TextArea(arg0, arg1, arg2)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def getStyle(self) -> 'TextFieldStyle':
        """public com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldStyle com.badlogic.gdx.scenes.scene2d.ui.TextField.getStyle()"""
        return 'TextFieldStyle'.__wrap(super(TextField, self).getStyle())

    @override
    @overload
    def getY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getY()"""
        return float.__wrap(super(scene2d.Actor, self).getY())

    @overload
    def getLines(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.ui.TextArea.getLines()"""
        return int.__wrap(super(TextArea, self).getLines())

    @overload
    def setZIndex(self, arg0: int) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.setZIndex(int)"""
        return bool.__wrap(super(__scene2d.Actor, self).setZIndex(__int.valueOf(arg0)))

    @override
    @overload
    def setBounds(self, arg0: float, arg1: float, arg2: float, arg3: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setBounds(float,float,float,float)"""
        super(__scene2d.Actor, self).setBounds(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def needsLayout(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Widget.needsLayout()"""
        return bool.__wrap(super(Widget, self).needsLayout())

    @override
    @overload
    def getPrefWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.TextField.getPrefWidth()"""
        return float.__wrap(super(TextField, self).getPrefWidth())

    @overload
    def getX(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getX(int)"""
        return float.__wrap(super(__scene2d.Actor, self).getX(__int.valueOf(arg0)))

    @override
    @overload
    def sizeBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.sizeBy(float)"""
        super(__scene2d.Actor, self).sizeBy(__float.valueOf(arg0))

    @override
    @overload
    def getCursorPosition(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.ui.TextField.getCursorPosition()"""
        return int.__wrap(super(TextField, self).getCursorPosition())

    @override
    @overload
    def selectAll(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextField.selectAll()"""
        super(TextField, self).selectAll()

    @override
    @overload
    def setClipboard(self, arg0: 'Clipboard'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextField.setClipboard(com.badlogic.gdx.utils.Clipboard)"""
        super(__TextField, self).setClipboard(arg0)

    @override
    @overload
    def getText(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.ui.TextField.getText()"""
        return str.__wrap(super(TextField, self).getText())

    @override
    @overload
    def sizeBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.sizeBy(float,float)"""
        super(__scene2d.Actor, self).sizeBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def hasActions(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasActions()"""
        return bool.__wrap(super(scene2d.Actor, self).hasActions())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0))

    @override
    @overload
    def setScaleX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScaleX(float)"""
        super(__scene2d.Actor, self).setScaleX(__float.valueOf(arg0))

    @override
    @overload
    def getOnscreenKeyboard(self) -> 'OnscreenKeyboard':
        """public com.badlogic.gdx.scenes.scene2d.ui.TextField$OnscreenKeyboard com.badlogic.gdx.scenes.scene2d.ui.TextField.getOnscreenKeyboard()"""
        return 'OnscreenKeyboard'.__wrap(super(TextField, self).getOnscreenKeyboard())

    @override
    @overload
    def isDisabled(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.TextField.isDisabled()"""
        return bool.__wrap(super(TextField, self).isDisabled())

    @override
    @overload
    def getTouchable(self) -> 'scene2d.Touchable':
        """public com.badlogic.gdx.scenes.scene2d.Touchable com.badlogic.gdx.scenes.scene2d.Actor.getTouchable()"""
        return 'scene2d.Touchable'.__wrap(super(scene2d.Actor, self).getTouchable())

    @override
    @overload
    def removeAction(self, arg0: 'Action'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.removeAction(com.badlogic.gdx.scenes.scene2d.Action)"""
        super(__scene2d.Actor, self).removeAction(arg0)

    @override
    @overload
    def getX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getX()"""
        return float.__wrap(super(scene2d.Actor, self).getX())

    @override
    @overload
    def setProgrammaticChangeEvents(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextField.setProgrammaticChangeEvents(boolean)"""
        super(__TextField, self).setProgrammaticChangeEvents(__boolean.valueOf(arg0))

    @override
    @overload
    def setCursorPosition(self, arg0: int):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextField.setCursorPosition(int)"""
        super(__TextField, self).setCursorPosition(__int.valueOf(arg0))

    @override
    @overload
    def getMaxWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Widget.getMaxWidth()"""
        return float.__wrap(super(Widget, self).getMaxWidth())

    @override
    @overload
    def toBack(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.toBack()"""
        super(scene2d.Actor, self).toBack()

    @override
    @overload
    def setDebug(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setDebug(boolean)"""
        super(__scene2d.Actor, self).setDebug(__boolean.valueOf(arg0))

    @override
    @overload
    def setMaxLength(self, arg0: int):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextField.setMaxLength(int)"""
        super(__TextField, self).setMaxLength(__int.valueOf(arg0))

    @override
    @overload
    def setOnscreenKeyboard(self, arg0: 'OnscreenKeyboard'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextField.setOnscreenKeyboard(com.badlogic.gdx.scenes.scene2d.ui.TextField$OnscreenKeyboard)"""
        super(__TextField, self).setOnscreenKeyboard(arg0)

    @override
    @overload
    def setX(self, arg0: float, arg1: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setX(float,int)"""
        super(__scene2d.Actor, self).setX(__float.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def screenToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.screenToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).screenToLocalCoordinates(arg0))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def appendText(self, arg0: str):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextField.appendText(java.lang.String)"""
        super(__TextField, self).appendText(arg0)

    @override
    @overload
    def ancestorsVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.ancestorsVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).ancestorsVisible())

    @override
    @overload
    def getListeners(self) -> 'utils.DelayedRemovalArray':
        """public com.badlogic.gdx.utils.DelayedRemovalArray<com.badlogic.gdx.scenes.scene2d.EventListener> com.badlogic.gdx.scenes.scene2d.Actor.getListeners()"""
        return 'utils.DelayedRemovalArray'.__wrap(super(scene2d.Actor, self).getListeners())

    @override
    @overload
    def setFillParent(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.setFillParent(boolean)"""
        super(__Widget, self).setFillParent(__boolean.valueOf(arg0))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def removeListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.removeListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).removeListener(arg0))

    @override
    @overload
    def clearSelection(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextField.clearSelection()"""
        super(TextField, self).clearSelection()

    @override
    @overload
    def isTouchFocusListener(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchFocusListener()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchFocusListener())

    @overload
    def localToStageCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToStageCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToStageCoordinates(arg0))

    @override
    @overload
    def setSize(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setSize(float,float)"""
        super(__scene2d.Actor, self).setSize(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def getZIndex(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.Actor.getZIndex()"""
        return int.__wrap(super(scene2d.Actor, self).getZIndex())

    @override
    @overload
    def clipBegin(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.clipBegin()"""
        return bool.__wrap(super(scene2d.Actor, self).clipBegin())

    @override
    @overload
    def invalidateHierarchy(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.invalidateHierarchy()"""
        super(Widget, self).invalidateHierarchy()

    @override
    @overload
    def moveBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.moveBy(float,float)"""
        super(__scene2d.Actor, self).moveBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def getY(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getY(int)"""
        return float.__wrap(super(__scene2d.Actor, self).getY(__int.valueOf(arg0)))

    @override
    @overload
    def getTextFieldFilter(self) -> 'TextFieldFilter':
        """public com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldFilter com.badlogic.gdx.scenes.scene2d.ui.TextField.getTextFieldFilter()"""
        return 'TextFieldFilter'.__wrap(super(TextField, self).getTextFieldFilter())

    @override
    @overload
    def setOrigin(self, arg0: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOrigin(int)"""
        super(__scene2d.Actor, self).setOrigin(__int.valueOf(arg0))

    @overload
    def isDescendantOf(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isDescendantOf(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Actor, self).isDescendantOf(arg0))

    @overload
    def getLinesShowing(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.ui.TextArea.getLinesShowing()"""
        return int.__wrap(super(TextArea, self).getLinesShowing())

    @override
    @overload
    def getParent(self) -> 'scene2d.Group':
        """public com.badlogic.gdx.scenes.scene2d.Group com.badlogic.gdx.scenes.scene2d.Actor.getParent()"""
        return 'scene2d.Group'.__wrap(super(scene2d.Actor, self).getParent())

    @override
    @overload
    def clearListeners(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clearListeners()"""
        super(scene2d.Actor, self).clearListeners()

    @overload
    def localToActorCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToActorCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToActorCoordinates(arg0, arg1))

    @override
    @overload
    def setName(self, arg0: str):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setName(java.lang.String)"""
        super(__scene2d.Actor, self).setName(arg0)

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @override
    @overload
    def setLayoutEnabled(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.setLayoutEnabled(boolean)"""
        super(__Widget, self).setLayoutEnabled(__boolean.valueOf(arg0))

    @override
    @overload
    def setStyle(self, arg0: 'TextFieldStyle'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextArea.setStyle(com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldStyle)"""
        super(__TextArea, self).setStyle(arg0)

    @override
    @overload
    def setOriginX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOriginX(float)"""
        super(__scene2d.Actor, self).setOriginX(__float.valueOf(arg0))

    @override
    @overload
    def getHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getHeight()"""
        return float.__wrap(super(scene2d.Actor, self).getHeight())

    @override
    @overload
    def validate(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.validate()"""
        super(Widget, self).validate()

    @override
    @overload
    def hasKeyboardFocus(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasKeyboardFocus()"""
        return bool.__wrap(super(scene2d.Actor, self).hasKeyboardFocus())

    @override
    @overload
    def setDisabled(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextField.setDisabled(boolean)"""
        super(__TextField, self).setDisabled(__boolean.valueOf(arg0))

    @override
    @overload
    def getOriginY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getOriginY()"""
        return float.__wrap(super(scene2d.Actor, self).getOriginY())

    @override
    @overload
    def layout(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.layout()"""
        super(Widget, self).layout()

    @override
    @overload
    def clipEnd(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clipEnd()"""
        super(scene2d.Actor, self).clipEnd()

    @override
    @overload
    def getUserObject(self) -> object:
        """public java.lang.Object com.badlogic.gdx.scenes.scene2d.Actor.getUserObject()"""
        return object.__wrap(super(scene2d.Actor, self).getUserObject())

    @override
    @overload
    def pack(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.pack()"""
        super(Widget, self).pack()

    @override
    @overload
    def draw(self, arg0: 'Batch', arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextField.draw(com.badlogic.gdx.graphics.g2d.Batch,float)"""
        super(__TextField, self).draw(arg0, __float.valueOf(arg1))

    @override
    @overload
    def getDebug(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.getDebug()"""
        return bool.__wrap(super(scene2d.Actor, self).getDebug())

    @override
    @overload
    def setHeight(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setHeight(float)"""
        super(__scene2d.Actor, self).setHeight(__float.valueOf(arg0))

    @overload
    def getFirstLineShowing(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.ui.TextArea.getFirstLineShowing()"""
        return int.__wrap(super(TextArea, self).getFirstLineShowing())

    @override
    @overload
    def setBlinkTime(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextField.setBlinkTime(float)"""
        super(__TextField, self).setBlinkTime(__float.valueOf(arg0))

    @override
    @overload
    def setScale(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScale(float)"""
        super(__scene2d.Actor, self).setScale(__float.valueOf(arg0))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def rotateBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.rotateBy(float)"""
        super(__scene2d.Actor, self).rotateBy(__float.valueOf(arg0))

    @override
    @overload
    def getMessageText(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.ui.TextField.getMessageText()"""
        return str.__wrap(super(TextField, self).getMessageText())

    @override
    @overload
    def getMinHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Widget.getMinHeight()"""
        return float.__wrap(super(Widget, self).getMinHeight())

    @override
    @overload
    def setTextFieldFilter(self, arg0: 'TextFieldFilter'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextField.setTextFieldFilter(com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldFilter)"""
        super(__TextField, self).setTextFieldFilter(arg0)

    @override
    @overload
    def setScale(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScale(float,float)"""
        super(__scene2d.Actor, self).setScale(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def addListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.addListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).addListener(arg0))

    @override
    @overload
    def getProgrammaticChangeEvents(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.TextField.getProgrammaticChangeEvents()"""
        return bool.__wrap(super(TextField, self).getProgrammaticChangeEvents())

    @overload
    def parentToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.parentToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).parentToLocalCoordinates(arg0))

    @overload
    def getCursorLine(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.ui.TextArea.getCursorLine()"""
        return int.__wrap(super(TextArea, self).getCursorLine())

    @override
    @overload
    def getRotation(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getRotation()"""
        return float.__wrap(super(scene2d.Actor, self).getRotation())

    @override
    @overload
    def setVisible(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setVisible(boolean)"""
        super(__scene2d.Actor, self).setVisible(__boolean.valueOf(arg0))

    @override
    @overload
    def setPasswordMode(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextField.setPasswordMode(boolean)"""
        super(__TextField, self).setPasswordMode(__boolean.valueOf(arg0))

    @override
    @overload
    def setY(self, arg0: float, arg1: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setY(float,int)"""
        super(__scene2d.Actor, self).setY(__float.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def setX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setX(float)"""
        super(__scene2d.Actor, self).setX(__float.valueOf(arg0))

    @overload
    def __init__(self, arg0: str, arg1: 'TextFieldStyle'):
        """public com.badlogic.gdx.scenes.scene2d.ui.TextArea(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldStyle)"""
        val = __TextArea(arg0, arg1)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def invalidate(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.invalidate()"""
        super(Widget, self).invalidate()

    @override
    @overload
    def setOrigin(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOrigin(float,float)"""
        super(__scene2d.Actor, self).setOrigin(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def getRight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getRight()"""
        return float.__wrap(super(scene2d.Actor, self).getRight())

    @overload
    def isAscendantOf(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isAscendantOf(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Actor, self).isAscendantOf(arg0))

    @override
    @overload
    def setWidth(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setWidth(float)"""
        super(__scene2d.Actor, self).setWidth(__float.valueOf(arg0))

    @override
    @overload
    def isTouchFocusTarget(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchFocusTarget()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchFocusTarget())

    @override
    @overload
    def hasParent(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasParent()"""
        return bool.__wrap(super(scene2d.Actor, self).hasParent())

    @override
    @overload
    def setText(self, arg0: str):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextField.setText(java.lang.String)"""
        super(__TextField, self).setText(arg0)

    @override
    @overload
    def setPosition(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setPosition(float,float)"""
        super(__scene2d.Actor, self).setPosition(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def getMaxLength(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.ui.TextField.getMaxLength()"""
        return int.__wrap(super(TextField, self).getMaxLength())

    @override
    @overload
    def getScaleY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getScaleY()"""
        return float.__wrap(super(scene2d.Actor, self).getScaleY())

    @overload
    def moveCursorLine(self, arg0: int):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextArea.moveCursorLine(int)"""
        super(__TextArea, self).moveCursorLine(__int.valueOf(arg0))

    @override
    @overload
    def getWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getWidth()"""
        return float.__wrap(super(scene2d.Actor, self).getWidth())

    @override
    @overload
    def setOriginY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOriginY(float)"""
        super(__scene2d.Actor, self).setOriginY(__float.valueOf(arg0))

    @override
    @overload
    def setPosition(self, arg0: float, arg1: float, arg2: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setPosition(float,float,int)"""
        super(__scene2d.Actor, self).setPosition(__float.valueOf(arg0), __float.valueOf(arg1), __int.valueOf(arg2))

    @overload
    def removeCaptureListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.removeCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).removeCaptureListener(arg0))

    @override
    @overload
    def setOnlyFontChars(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextField.setOnlyFontChars(boolean)"""
        super(__TextField, self).setOnlyFontChars(__boolean.valueOf(arg0))

    @override
    @overload
    def setColor(self, arg0: 'Color'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setColor(com.badlogic.gdx.graphics.Color)"""
        super(__scene2d.Actor, self).setColor(arg0)

    @overload
    def localToScreenCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToScreenCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToScreenCoordinates(arg0))

    @overload
    def setPrefRows(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextArea.setPrefRows(float)"""
        super(__TextArea, self).setPrefRows(__float.valueOf(arg0))

    @override
    @overload
    def drawDebug(self, arg0: 'ShapeRenderer'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.drawDebug(com.badlogic.gdx.graphics.glutils.ShapeRenderer)"""
        super(__scene2d.Actor, self).drawDebug(arg0)

    @override
    @overload
    def setTouchable(self, arg0: 'Touchable'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setTouchable(com.badlogic.gdx.scenes.scene2d.Touchable)"""
        super(__scene2d.Actor, self).setTouchable(arg0)

    @overload
    def addCaptureListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.addCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).addCaptureListener(arg0))

    @override
    @overload
    def copy(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextField.copy()"""
        super(TextField, self).copy()

    @overload
    def fire(self, arg0: 'Event') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.fire(com.badlogic.gdx.scenes.scene2d.Event)"""
        return bool.__wrap(super(__scene2d.Actor, self).fire(arg0))

    @override
    @overload
    def getMaxHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Widget.getMaxHeight()"""
        return float.__wrap(super(Widget, self).getMaxHeight())

    @override
    @overload
    def remove(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.remove()"""
        return bool.__wrap(super(scene2d.Actor, self).remove())

    @override
    @overload
    def setAlignment(self, arg0: int):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextField.setAlignment(int)"""
        super(__TextField, self).setAlignment(__int.valueOf(arg0))

    @overload
    def hit(self, arg0: float, arg1: float, arg2: bool) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.Actor.hit(float,float,boolean)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Actor, self).hit(__float.valueOf(arg0), __float.valueOf(arg1), __boolean.valueOf(arg2)))

    @overload
    def localToParentCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToParentCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToParentCoordinates(arg0))

    @override
    @overload
    def clear(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clear()"""
        super(scene2d.Actor, self).clear()

    @override
    @overload
    def getName(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.Actor.getName()"""
        return str.__wrap(super(scene2d.Actor, self).getName())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.Actor.toString()"""
        return str.__wrap(super(scene2d.Actor, self).toString())

    @override
    @overload
    def isVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).isVisible())

    @override
    @overload
    def next(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextField.next(boolean)"""
        super(__TextField, self).next(__boolean.valueOf(arg0))

    @override
    @overload
    def getPrefHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.TextArea.getPrefHeight()"""
        return float.__wrap(super(TextArea, self).getPrefHeight())

    @override
    @overload
    def isPasswordMode(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.TextField.isPasswordMode()"""
        return bool.__wrap(super(TextField, self).isPasswordMode())

    @overload
    def getCursorY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.TextArea.getCursorY()"""
        return float.__wrap(super(TextArea, self).getCursorY())

    @override
    @overload
    def getCaptureListeners(self) -> 'utils.DelayedRemovalArray':
        """public com.badlogic.gdx.utils.DelayedRemovalArray<com.badlogic.gdx.scenes.scene2d.EventListener> com.badlogic.gdx.scenes.scene2d.Actor.getCaptureListeners()"""
        return 'utils.DelayedRemovalArray'.__wrap(super(scene2d.Actor, self).getCaptureListeners())

    @overload
    def getCursorX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.TextArea.getCursorX()"""
        return float.__wrap(super(TextArea, self).getCursorX())

    @override
    @overload
    def setPasswordCharacter(self, arg0: str):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextField.setPasswordCharacter(char)"""
        super(__TextField, self).setPasswordCharacter(__char.valueOf(arg0))

    @override
    @overload
    def debug(self) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.Actor.debug()"""
        return 'scene2d.Actor'.__wrap(super(scene2d.Actor, self).debug())

    @override
    @overload
    def getTop(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getTop()"""
        return float.__wrap(super(scene2d.Actor, self).getTop())

    @override
    @overload
    def setY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setY(float)"""
        super(__scene2d.Actor, self).setY(__float.valueOf(arg0))

    @override
    @overload
    def setMessageText(self, arg0: str):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextField.setMessageText(java.lang.String)"""
        super(__TextField, self).setMessageText(arg0)

    @override
    @overload
    def getMinWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Widget.getMinWidth()"""
        return float.__wrap(super(Widget, self).getMinWidth())

    @override
    @overload
    def setSelection(self, arg0: int, arg1: int):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextArea.setSelection(int,int)"""
        super(__TextArea, self).setSelection(__int.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def clearActions(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clearActions()"""
        super(scene2d.Actor, self).clearActions()

    @override
    @overload
    def scaleBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.scaleBy(float,float)"""
        super(__scene2d.Actor, self).scaleBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def setRotation(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setRotation(float)"""
        super(__scene2d.Actor, self).setRotation(__float.valueOf(arg0))

    @override
    @overload
    def getScaleX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getScaleX()"""
        return float.__wrap(super(scene2d.Actor, self).getScaleX())

    @overload
    def newLineAtEnd(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.TextArea.newLineAtEnd()"""
        return bool.__wrap(super(TextArea, self).newLineAtEnd())

    @override
    @overload
    def setTextFieldListener(self, arg0: 'TextFieldListener'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextField.setTextFieldListener(com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldListener)"""
        super(__TextField, self).setTextFieldListener(arg0)

    @overload
    def firstAscendant(self, arg0: 'Class') -> 'scene2d.Actor':
        """public <T extends com.badlogic.gdx.scenes.scene2d.Actor> T com.badlogic.gdx.scenes.scene2d.Actor.firstAscendant(java.lang.Class<T>)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Actor, self).firstAscendant(arg0))

    @overload
    def notify(self, arg0: 'Event', arg1: bool) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.notify(com.badlogic.gdx.scenes.scene2d.Event,boolean)"""
        return bool.__wrap(super(__scene2d.Actor, self).notify(arg0, __boolean.valueOf(arg1)))

    @override
    @overload
    def act(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.act(float)"""
        super(__scene2d.Actor, self).act(__float.valueOf(arg0))

    @override
    @overload
    def setUserObject(self, arg0: object):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setUserObject(java.lang.Object)"""
        super(__scene2d.Actor, self).setUserObject(arg0)

    @override
    @overload
    def setScaleY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScaleY(float)"""
        super(__scene2d.Actor, self).setScaleY(__float.valueOf(arg0))

    @override
    @overload
    def hasScrollFocus(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasScrollFocus()"""
        return bool.__wrap(super(scene2d.Actor, self).hasScrollFocus())

    @override
    @overload
    def toFront(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.toFront()"""
        super(scene2d.Actor, self).toFront()

    @override
    @overload
    def scaleBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.scaleBy(float)"""
        super(__scene2d.Actor, self).scaleBy(__float.valueOf(arg0))

    @overload
    def stageToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.stageToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).stageToLocalCoordinates(arg0))

    @override
    @overload
    def getOriginX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getOriginX()"""
        return float.__wrap(super(scene2d.Actor, self).getOriginX())

    @override
    @overload
    def getFocusTraversal(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.TextField.getFocusTraversal()"""
        return bool.__wrap(super(TextField, self).getFocusTraversal())

    @override
    @overload
    def ascendantsVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.ascendantsVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).ascendantsVisible())

    @override
    @overload
    def setFocusTraversal(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextField.setFocusTraversal(boolean)"""
        super(__TextField, self).setFocusTraversal(__boolean.valueOf(arg0))

    @override
    @overload
    def getDefaultInputListener(self) -> 'scene2d.InputListener':
        """public com.badlogic.gdx.scenes.scene2d.InputListener com.badlogic.gdx.scenes.scene2d.ui.TextField.getDefaultInputListener()"""
        return 'scene2d.InputListener'.__wrap(super(TextField, self).getDefaultInputListener())

    @override
    @overload
    def getSelectionStart(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.ui.TextField.getSelectionStart()"""
        return int.__wrap(super(TextField, self).getSelectionStart())

    @override
    @overload
    def getSelection(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.ui.TextField.getSelection()"""
        return str.__wrap(super(TextField, self).getSelection())

    @override
    @overload
    def getColor(self) -> 'graphics.Color':
        """public com.badlogic.gdx.graphics.Color com.badlogic.gdx.scenes.scene2d.Actor.getColor()"""
        return 'graphics.Color'.__wrap(super(scene2d.Actor, self).getColor())

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def __init__(self, arg0: str, arg1: 'Skin'):
        """public com.badlogic.gdx.scenes.scene2d.ui.TextArea(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin)"""
        val = __TextArea(arg0, arg1)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def cut(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.TextField.cut()"""
        super(TextField, self).cut()

    @override
    @overload
    def getAlignment(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.ui.TextField.getAlignment()"""
        return int.__wrap(super(TextField, self).getAlignment())

    @override
    @overload
    def getStage(self) -> 'scene2d.Stage':
        """public com.badlogic.gdx.scenes.scene2d.Stage com.badlogic.gdx.scenes.scene2d.Actor.getStage()"""
        return 'scene2d.Stage'.__wrap(super(scene2d.Actor, self).getStage())

    @override
    @overload
    def addAction(self, arg0: 'Action'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.addAction(com.badlogic.gdx.scenes.scene2d.Action)"""
        super(__scene2d.Actor, self).addAction(arg0)

    @override
    @overload
    def setColor(self, arg0: float, arg1: float, arg2: float, arg3: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setColor(float,float,float,float)"""
        super(__scene2d.Actor, self).setColor(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3))

    @override
    @overload
    def isTouchable(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchable()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchable())

    @overload
    def localToAscendantCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToAscendantCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToAscendantCoordinates(arg0, arg1))

    @overload
    def clipBegin(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.clipBegin(float,float,float,float)"""
        return bool.__wrap(super(__scene2d.Actor, self).clipBegin(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3)))

    @override
    @overload
    def getActions(self) -> 'utils.Array':
        """public com.badlogic.gdx.utils.Array<com.badlogic.gdx.scenes.scene2d.Action> com.badlogic.gdx.scenes.scene2d.Actor.getActions()"""
        return 'utils.Array'.__wrap(super(scene2d.Actor, self).getActions()) 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.Window
from pyquantum_helper import import_once as __import_once__
import com.badlogic.gdx.scenes.scene2d.Touchable as __Touchable
__Touchable = __Touchable
try:
    from pygdx.scenes import scene2d
except ImportError:
    scene2d = __import_once__("pygdx.scenes.scene2d")

import com.badlogic.gdx.graphics.Color as __Color
__Color = __Color
import java.lang.Boolean as __boolean
import com.badlogic.gdx.scenes.scene2d.ui.Window as __Window
__Window = __Window
try:
    from pygdx.graphics import g2d
except ImportError:
    g2d = __import_once__("pygdx.graphics.g2d")

from builtins import type
import com.badlogic.gdx.scenes.scene2d.Group as __Group
__Group = __Group
import com.badlogic.gdx.scenes.scene2d.ui.Table as __Table
__Table = __Table
import com.badlogic.gdx.scenes.scene2d.ui.Cell as __Cell
__Cell = __Cell
import com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup as __WidgetGroup
__WidgetGroup = __WidgetGroup
import com.badlogic.gdx.math.Vector2 as __Vector2
__Vector2 = __Vector2
import com.badlogic.gdx.scenes.scene2d.ui.Table as __Table_Debug
__Debug = __Table_Debug.Debug
import com.badlogic.gdx.math.Rectangle as __Rectangle
__Rectangle = __Rectangle
import java.lang.Class as __Class
__Class = __Class
import com.badlogic.gdx.utils.Array as __Array
__Array = __Array
import java.lang.String as __string
try:
    from pygdx import math
except ImportError:
    math = __import_once__("pygdx.math")

from builtins import bool
import com.badlogic.gdx.scenes.scene2d.ui.Window as __Window_WindowStyle
__WindowStyle = __Window_WindowStyle.WindowStyle
from builtins import str
import java.lang.CharSequence as CharSequence
try:
    from pygdx.scenes.scene2d import utils
except ImportError:
    utils = __import_once__("pygdx.scenes.scene2d.utils")

try:
    from pygdx import utils
except ImportError:
    utils = __import_once__("pygdx.utils")

from pyquantum_helper import override
import java.lang.Object as __object
from builtins import float
from builtins import object
import com.badlogic.gdx.utils.DelayedRemovalArray as __DelayedRemovalArray
__DelayedRemovalArray = __DelayedRemovalArray
import java.lang.Long as __long
import java.lang.Float as __float
import java.lang.String as __String
__String = __String
try:
    from pygdx.graphics import glutils
except ImportError:
    glutils = __import_once__("pygdx.graphics.glutils")

import com.badlogic.gdx.scenes.scene2d.ui.Skin as __Skin
__Skin = __Skin
import java.lang.Object as __Object
__Object = __Object
import com.badlogic.gdx.utils.SnapshotArray as __SnapshotArray
__SnapshotArray = __SnapshotArray
import com.badlogic.gdx.scenes.scene2d.Actor as __Actor
__Actor = __Actor
import java.lang.Integer as __int
import com.badlogic.gdx.scenes.scene2d.ui.Value as __Value
__Value = __Value
import com.badlogic.gdx.scenes.scene2d.Stage as __Stage
__Stage = __Stage
import com.badlogic.gdx.scenes.scene2d.ui.Label as __Label
__Label = __Label
try:
    from pygdx import graphics
except ImportError:
    graphics = __import_once__("pygdx.graphics")

import com.badlogic.gdx.scenes.scene2d.utils.Drawable as __Drawable
__Drawable = __Drawable
from builtins import int
 
class Window(__Table, Table):
    """com.badlogic.gdx.scenes.scene2d.ui.Window"""
 
    @staticmethod
    def __wrap(java_value: __Window) -> 'Window':
        return Window(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Window):
        """
        Dynamic initializer for Window.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def getColumnPrefWidth(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getColumnPrefWidth(int)"""
        return float.__wrap(super(__Table, self).getColumnPrefWidth(__int.valueOf(arg0)))

    @override
    @overload
    def getY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getY()"""
        return float.__wrap(super(scene2d.Actor, self).getY())

    @override
    @overload
    def setBounds(self, arg0: float, arg1: float, arg2: float, arg3: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setBounds(float,float,float,float)"""
        super(__scene2d.Actor, self).setBounds(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def add(self, arg0: 'CharSequence', arg1: str, arg2: str) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<com.badlogic.gdx.scenes.scene2d.ui.Label> com.badlogic.gdx.scenes.scene2d.ui.Table.add(java.lang.CharSequence,java.lang.String,java.lang.String)"""
        return 'Cell'.__wrap(super(__Table, self).add(arg0, arg1, arg2))

    @overload
    def findActor(self, arg0: str) -> 'scene2d.Actor':
        """public <T extends com.badlogic.gdx.scenes.scene2d.Actor> T com.badlogic.gdx.scenes.scene2d.Group.findActor(java.lang.String)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Group, self).findActor(arg0))

    @overload
    def removeActor(self, arg0: 'Actor', arg1: bool) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Table.removeActor(com.badlogic.gdx.scenes.scene2d.Actor,boolean)"""
        return bool.__wrap(super(__Table, self).removeActor(arg0, __boolean.valueOf(arg1)))

    @override
    @overload
    def getTouchable(self) -> 'scene2d.Touchable':
        """public com.badlogic.gdx.scenes.scene2d.Touchable com.badlogic.gdx.scenes.scene2d.Actor.getTouchable()"""
        return 'scene2d.Touchable'.__wrap(super(scene2d.Actor, self).getTouchable())

    @override
    @overload
    def removeAction(self, arg0: 'Action'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.removeAction(com.badlogic.gdx.scenes.scene2d.Action)"""
        super(__scene2d.Actor, self).removeAction(arg0)

    @override
    @overload
    def getPadTop(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getPadTop()"""
        return float.__wrap(super(Table, self).getPadTop())

    @override
    @overload
    def drawDebug(self, arg0: 'ShapeRenderer'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.drawDebug(com.badlogic.gdx.graphics.glutils.ShapeRenderer)"""
        super(__Table, self).drawDebug(arg0)

    @overload
    def padRight(self, arg0: 'Value') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padRight(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Table'.__wrap(super(__Table, self).padRight(arg0))

    @override
    @overload
    def getMaxWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.getMaxWidth()"""
        return float.__wrap(super(WidgetGroup, self).getMaxWidth())

    @override
    @overload
    def setX(self, arg0: float, arg1: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setX(float,int)"""
        super(__scene2d.Actor, self).setX(__float.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def reset(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.reset()"""
        super(Table, self).reset()

    @override
    @overload
    def getListeners(self) -> 'utils.DelayedRemovalArray':
        """public com.badlogic.gdx.utils.DelayedRemovalArray<com.badlogic.gdx.scenes.scene2d.EventListener> com.badlogic.gdx.scenes.scene2d.Actor.getListeners()"""
        return 'utils.DelayedRemovalArray'.__wrap(super(scene2d.Actor, self).getListeners())

    @overload
    def removeListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.removeListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).removeListener(arg0))

    @override
    @overload
    def isTouchFocusListener(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchFocusListener()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchFocusListener())

    @overload
    def localToStageCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToStageCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToStageCoordinates(arg0))

    @override
    @overload
    def clipBegin(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.clipBegin()"""
        return bool.__wrap(super(scene2d.Actor, self).clipBegin())

    @overload
    def __init__(self, arg0: str, arg1: 'Skin'):
        """public com.badlogic.gdx.scenes.scene2d.ui.Window(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin)"""
        val = __Window(arg0, arg1)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def keepWithinStage(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Window.keepWithinStage()"""
        super(Window, self).keepWithinStage()

    @override
    @overload
    def moveBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.moveBy(float,float)"""
        super(__scene2d.Actor, self).moveBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def pad(self, arg0: float) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.pad(float)"""
        return 'Table'.__wrap(super(__Table, self).pad(__float.valueOf(arg0)))

    @override
    @overload
    def setName(self, arg0: str):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setName(java.lang.String)"""
        super(__scene2d.Actor, self).setName(arg0)

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @overload
    def getRowMinHeight(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getRowMinHeight(int)"""
        return float.__wrap(super(__Table, self).getRowMinHeight(__int.valueOf(arg0)))

    @overload
    def swapActor(self, arg0: 'Actor', arg1: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.swapActor(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Group, self).swapActor(arg0, arg1))

    @override
    @overload
    def getPadX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getPadX()"""
        return float.__wrap(super(Table, self).getPadX())

    @override
    @overload
    def clearChildren(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.clearChildren(boolean)"""
        super(__Table, self).clearChildren(__boolean.valueOf(arg0))

    @override
    @overload
    def getDebug(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.getDebug()"""
        return bool.__wrap(super(scene2d.Actor, self).getDebug())

    @override
    @overload
    def setHeight(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setHeight(float)"""
        super(__scene2d.Actor, self).setHeight(__float.valueOf(arg0))

    @override
    @overload
    def setScale(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScale(float)"""
        super(__scene2d.Actor, self).setScale(__float.valueOf(arg0))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @overload
    def add(self, arg0: 'CharSequence') -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<com.badlogic.gdx.scenes.scene2d.ui.Label> com.badlogic.gdx.scenes.scene2d.ui.Table.add(java.lang.CharSequence)"""
        return 'Cell'.__wrap(super(__Table, self).add(arg0))

    @overload
    def padBottom(self, arg0: float) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padBottom(float)"""
        return 'Table'.__wrap(super(__Table, self).padBottom(__float.valueOf(arg0)))

    @override
    @overload
    def setDebug(self, arg0: bool, arg1: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Group.setDebug(boolean,boolean)"""
        super(__scene2d.Group, self).setDebug(__boolean.valueOf(arg0), __boolean.valueOf(arg1))

    @override
    @overload
    def getPrefWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Window.getPrefWidth()"""
        return float.__wrap(super(Window, self).getPrefWidth())

    @override
    @overload
    def row(self) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell com.badlogic.gdx.scenes.scene2d.ui.Table.row()"""
        return 'Cell'.__wrap(super(Table, self).row())

    @overload
    def background(self, arg0: 'Drawable') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.background(com.badlogic.gdx.scenes.scene2d.utils.Drawable)"""
        return 'Table'.__wrap(super(__Table, self).background(arg0))

    @override
    @overload
    def setTransform(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Group.setTransform(boolean)"""
        super(__scene2d.Group, self).setTransform(__boolean.valueOf(arg0))

    @overload
    def setStyle(self, arg0: 'WindowStyle'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Window.setStyle(com.badlogic.gdx.scenes.scene2d.ui.Window$WindowStyle)"""
        super(__Window, self).setStyle(arg0)

    @overload
    def parentToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.parentToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).parentToLocalCoordinates(arg0))

    @override
    @overload
    def getRotation(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getRotation()"""
        return float.__wrap(super(scene2d.Actor, self).getRotation())

    @override
    @overload
    def getMaxHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.getMaxHeight()"""
        return float.__wrap(super(WidgetGroup, self).getMaxHeight())

    @overload
    def padTop(self, arg0: float) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padTop(float)"""
        return 'Table'.__wrap(super(__Table, self).padTop(__float.valueOf(arg0)))

    @overload
    def padLeft(self, arg0: 'Value') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padLeft(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Table'.__wrap(super(__Table, self).padLeft(arg0))

    @override
    @overload
    def addActor(self, arg0: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.addActor(com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__scene2d.Group, self).addActor(arg0)

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def getBackground(self) -> 'utils.Drawable':
        """public com.badlogic.gdx.scenes.scene2d.utils.Drawable com.badlogic.gdx.scenes.scene2d.ui.Table.getBackground()"""
        return 'utils.Drawable'.__wrap(super(Table, self).getBackground())

    @overload
    def pad(self, arg0: float, arg1: float, arg2: float, arg3: float) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.pad(float,float,float,float)"""
        return 'Table'.__wrap(super(__Table, self).pad(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3)))

    @overload
    def add(self, arg0: 'CharSequence', arg1: str) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<com.badlogic.gdx.scenes.scene2d.ui.Label> com.badlogic.gdx.scenes.scene2d.ui.Table.add(java.lang.CharSequence,java.lang.String)"""
        return 'Cell'.__wrap(super(__Table, self).add(arg0, arg1))

    @override
    @overload
    def getRows(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.ui.Table.getRows()"""
        return int.__wrap(super(Table, self).getRows())

    @override
    @overload
    def setWidth(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setWidth(float)"""
        super(__scene2d.Actor, self).setWidth(__float.valueOf(arg0))

    @override
    @overload
    def isTouchFocusTarget(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchFocusTarget()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchFocusTarget())

    @override
    @overload
    def setPosition(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setPosition(float,float)"""
        super(__scene2d.Actor, self).setPosition(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def setClip(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.setClip(boolean)"""
        super(__Table, self).setClip(__boolean.valueOf(arg0))

    @override
    @overload
    def addActorAt(self, arg0: int, arg1: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.addActorAt(int,com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__scene2d.Group, self).addActorAt(__int.valueOf(arg0), arg1)

    @overload
    def isResizable(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Window.isResizable()"""
        return bool.__wrap(super(Window, self).isResizable())

    @override
    @overload
    def setOriginY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOriginY(float)"""
        super(__scene2d.Actor, self).setOriginY(__float.valueOf(arg0))

    @override
    @overload
    def getPadY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getPadY()"""
        return float.__wrap(super(Table, self).getPadY())

    @override
    @overload
    def getPadRight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getPadRight()"""
        return float.__wrap(super(Table, self).getPadRight())

    @overload
    def localToScreenCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToScreenCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToScreenCoordinates(arg0))

    @override
    @overload
    def clear(self):
        """public void com.badlogic.gdx.scenes.scene2d.Group.clear()"""
        super(scene2d.Group, self).clear()

    @overload
    def isMovable(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Window.isMovable()"""
        return bool.__wrap(super(Window, self).isMovable())

    @overload
    def stack(self, *arg0: 'scene2d.Actor') -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<com.badlogic.gdx.scenes.scene2d.ui.Stack> com.badlogic.gdx.scenes.scene2d.ui.Table.stack(com.badlogic.gdx.scenes.scene2d.Actor...)"""
        return 'Cell'.__wrap(super(__Table, self).stack(arg0))

    @override
    @overload
    def setTouchable(self, arg0: 'Touchable'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setTouchable(com.badlogic.gdx.scenes.scene2d.Touchable)"""
        super(__scene2d.Actor, self).setTouchable(arg0)

    @overload
    def setResizable(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Window.setResizable(boolean)"""
        super(__Window, self).setResizable(__boolean.valueOf(arg0))

    @override
    @overload
    def add(self) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell com.badlogic.gdx.scenes.scene2d.ui.Table.add()"""
        return 'Cell'.__wrap(super(Table, self).add())

    @overload
    def getColumnWidth(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getColumnWidth(int)"""
        return float.__wrap(super(__Table, self).getColumnWidth(__int.valueOf(arg0)))

    @override
    @overload
    def clearChildren(self):
        """public void com.badlogic.gdx.scenes.scene2d.Group.clearChildren()"""
        super(scene2d.Group, self).clearChildren()

    @override
    @overload
    def debugAll(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.debugAll()"""
        return 'Table'.__wrap(super(Table, self).debugAll())

    @overload
    def localToParentCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToParentCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToParentCoordinates(arg0))

    @override
    @overload
    def setCullingArea(self, arg0: 'Rectangle'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.setCullingArea(com.badlogic.gdx.math.Rectangle)"""
        super(__scene2d.Group, self).setCullingArea(arg0)

    @override
    @overload
    def getName(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.Actor.getName()"""
        return str.__wrap(super(scene2d.Actor, self).getName())

    @override
    @overload
    def getCaptureListeners(self) -> 'utils.DelayedRemovalArray':
        """public com.badlogic.gdx.utils.DelayedRemovalArray<com.badlogic.gdx.scenes.scene2d.EventListener> com.badlogic.gdx.scenes.scene2d.Actor.getCaptureListeners()"""
        return 'utils.DelayedRemovalArray'.__wrap(super(scene2d.Actor, self).getCaptureListeners())

    @overload
    def padBottom(self, arg0: 'Value') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padBottom(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Table'.__wrap(super(__Table, self).padBottom(arg0))

    @override
    @overload
    def clear(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Group.clear(boolean)"""
        super(__scene2d.Group, self).clear(__boolean.valueOf(arg0))

    @override
    @overload
    def setY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setY(float)"""
        super(__scene2d.Actor, self).setY(__float.valueOf(arg0))

    @override
    @overload
    def addActorAfter(self, arg0: 'Actor', arg1: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.addActorAfter(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__scene2d.Group, self).addActorAfter(arg0, arg1)

    @override
    @overload
    def top(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.top()"""
        return 'Table'.__wrap(super(Table, self).top())

    @override
    @overload
    def scaleBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.scaleBy(float,float)"""
        super(__scene2d.Actor, self).scaleBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def align(self, arg0: int) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.align(int)"""
        return 'Table'.__wrap(super(__Table, self).align(__int.valueOf(arg0)))

    @overload
    def getStyle(self) -> 'WindowStyle':
        """public com.badlogic.gdx.scenes.scene2d.ui.Window$WindowStyle com.badlogic.gdx.scenes.scene2d.ui.Window.getStyle()"""
        return 'WindowStyle'.__wrap(super(Window, self).getStyle())

    @overload
    def notify(self, arg0: 'Event', arg1: bool) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.notify(com.badlogic.gdx.scenes.scene2d.Event,boolean)"""
        return bool.__wrap(super(__scene2d.Actor, self).notify(arg0, __boolean.valueOf(arg1)))

    @override
    @overload
    def act(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Group.act(float)"""
        super(__scene2d.Group, self).act(__float.valueOf(arg0))

    @override
    @overload
    def setUserObject(self, arg0: object):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setUserObject(java.lang.Object)"""
        super(__scene2d.Actor, self).setUserObject(arg0)

    @override
    @overload
    def hasScrollFocus(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasScrollFocus()"""
        return bool.__wrap(super(scene2d.Actor, self).hasScrollFocus())

    @override
    @overload
    def toFront(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.toFront()"""
        super(scene2d.Actor, self).toFront()

    @override
    @overload
    def scaleBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.scaleBy(float)"""
        super(__scene2d.Actor, self).scaleBy(__float.valueOf(arg0))

    @override
    @overload
    def getOriginX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getOriginX()"""
        return float.__wrap(super(scene2d.Actor, self).getOriginX())

    @overload
    def getRow(self, arg0: float) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.ui.Table.getRow(float)"""
        return int.__wrap(super(__Table, self).getRow(__float.valueOf(arg0)))

    @override
    @overload
    def getMinWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getMinWidth()"""
        return float.__wrap(super(Table, self).getMinWidth())

    @overload
    def getChild(self, arg0: int) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.Group.getChild(int)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Group, self).getChild(__int.valueOf(arg0)))

    @override
    @overload
    def getSkin(self) -> 'Skin':
        """public com.badlogic.gdx.scenes.scene2d.ui.Skin com.badlogic.gdx.scenes.scene2d.ui.Table.getSkin()"""
        return 'Skin'.__wrap(super(Table, self).getSkin())

    @override
    @overload
    def setDebug(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.setDebug(boolean)"""
        super(__Table, self).setDebug(__boolean.valueOf(arg0))

    @overload
    def pad(self, arg0: 'Value', arg1: 'Value', arg2: 'Value', arg3: 'Value') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.pad(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Table'.__wrap(super(__Table, self).pad(arg0, arg1, arg2, arg3))

    @overload
    def add(self, arg0: 'CharSequence', arg1: str, arg2: 'Color') -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<com.badlogic.gdx.scenes.scene2d.ui.Label> com.badlogic.gdx.scenes.scene2d.ui.Table.add(java.lang.CharSequence,java.lang.String,com.badlogic.gdx.graphics.Color)"""
        return 'Cell'.__wrap(super(__Table, self).add(arg0, arg1, arg2))

    @override
    @overload
    def getPadBottom(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getPadBottom()"""
        return float.__wrap(super(Table, self).getPadBottom())

    @overload
    def setResizeBorder(self, arg0: int):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Window.setResizeBorder(int)"""
        super(__Window, self).setResizeBorder(__int.valueOf(arg0))

    @override
    @overload
    def getStage(self) -> 'scene2d.Stage':
        """public com.badlogic.gdx.scenes.scene2d.Stage com.badlogic.gdx.scenes.scene2d.Actor.getStage()"""
        return 'scene2d.Stage'.__wrap(super(scene2d.Actor, self).getStage())

    @override
    @overload
    def addAction(self, arg0: 'Action'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.addAction(com.badlogic.gdx.scenes.scene2d.Action)"""
        super(__scene2d.Actor, self).addAction(arg0)

    @override
    @overload
    def getPadRightValue(self) -> 'Value':
        """public com.badlogic.gdx.scenes.scene2d.ui.Value com.badlogic.gdx.scenes.scene2d.ui.Table.getPadRightValue()"""
        return 'Value'.__wrap(super(Table, self).getPadRightValue())

    @override
    @overload
    def setColor(self, arg0: float, arg1: float, arg2: float, arg3: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setColor(float,float,float,float)"""
        super(__scene2d.Actor, self).setColor(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3))

    @overload
    def getColumnMinWidth(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getColumnMinWidth(int)"""
        return float.__wrap(super(__Table, self).getColumnMinWidth(__int.valueOf(arg0)))

    @overload
    def localToAscendantCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToAscendantCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToAscendantCoordinates(arg0, arg1))

    @override
    @overload
    def getActions(self) -> 'utils.Array':
        """public com.badlogic.gdx.utils.Array<com.badlogic.gdx.scenes.scene2d.Action> com.badlogic.gdx.scenes.scene2d.Actor.getActions()"""
        return 'utils.Array'.__wrap(super(scene2d.Actor, self).getActions())

    @override
    @overload
    def debugTable(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.debugTable()"""
        return 'Table'.__wrap(super(Table, self).debugTable())

    @overload
    def add(self, *arg0: 'scene2d.Actor') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.add(com.badlogic.gdx.scenes.scene2d.Actor...)"""
        return 'Table'.__wrap(super(__Table, self).add(arg0))

    @override
    @overload
    def right(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.right()"""
        return 'Table'.__wrap(super(Table, self).right())

    @overload
    def localToDescendantCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Group.localToDescendantCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Group, self).localToDescendantCoordinates(arg0, arg1))

    @overload
    def padRight(self, arg0: float) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padRight(float)"""
        return 'Table'.__wrap(super(__Table, self).padRight(__float.valueOf(arg0)))

    @overload
    def setZIndex(self, arg0: int) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.setZIndex(int)"""
        return bool.__wrap(super(__scene2d.Actor, self).setZIndex(__int.valueOf(arg0)))

    @overload
    def padLeft(self, arg0: float) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padLeft(float)"""
        return 'Table'.__wrap(super(__Table, self).padLeft(__float.valueOf(arg0)))

    @overload
    def getX(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getX(int)"""
        return float.__wrap(super(__scene2d.Actor, self).getX(__int.valueOf(arg0)))

    @override
    @overload
    def sizeBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.sizeBy(float)"""
        super(__scene2d.Actor, self).sizeBy(__float.valueOf(arg0))

    @overload
    def hit(self, arg0: float, arg1: float, arg2: bool) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.ui.Window.hit(float,float,boolean)"""
        return 'scene2d.Actor'.__wrap(super(__Window, self).hit(__float.valueOf(arg0), __float.valueOf(arg1), __boolean.valueOf(arg2)))

    @override
    @overload
    def clip(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.clip()"""
        return 'Table'.__wrap(super(Table, self).clip())

    @overload
    def getRowPrefHeight(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getRowPrefHeight(int)"""
        return float.__wrap(super(__Table, self).getRowPrefHeight(__int.valueOf(arg0)))

    @overload
    def setMovable(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Window.setMovable(boolean)"""
        super(__Window, self).setMovable(__boolean.valueOf(arg0))

    @override
    @overload
    def sizeBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.sizeBy(float,float)"""
        super(__scene2d.Actor, self).sizeBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def hasActions(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasActions()"""
        return bool.__wrap(super(scene2d.Actor, self).hasActions())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0))

    @override
    @overload
    def setScaleX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScaleX(float)"""
        super(__scene2d.Actor, self).setScaleX(__float.valueOf(arg0))

    @overload
    def removeActor(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Table.removeActor(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__Table, self).removeActor(arg0))

    @override
    @overload
    def getX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getX()"""
        return float.__wrap(super(scene2d.Actor, self).getX())

    @override
    @overload
    def left(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.left()"""
        return 'Table'.__wrap(super(Table, self).left())

    @override
    @overload
    def center(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.center()"""
        return 'Table'.__wrap(super(Table, self).center())

    @override
    @overload
    def setBackground(self, arg0: 'Drawable'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.setBackground(com.badlogic.gdx.scenes.scene2d.utils.Drawable)"""
        super(__Table, self).setBackground(arg0)

    @overload
    def add(self, arg0: 'Actor') -> 'Cell':
        """public <T extends com.badlogic.gdx.scenes.scene2d.Actor> com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Table.add(T)"""
        return 'Cell'.__wrap(super(__Table, self).add(arg0))

    @override
    @overload
    def toBack(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.toBack()"""
        super(scene2d.Actor, self).toBack()

    @override
    @overload
    def debug(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.debug()"""
        return 'Table'.__wrap(super(Table, self).debug())

    @override
    @overload
    def getClip(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Table.getClip()"""
        return bool.__wrap(super(Table, self).getClip())

    @overload
    def screenToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.screenToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).screenToLocalCoordinates(arg0))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def ancestorsVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.ancestorsVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).ancestorsVisible())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def setSize(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setSize(float,float)"""
        super(__scene2d.Actor, self).setSize(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def layout(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.layout()"""
        super(Table, self).layout()

    @override
    @overload
    def getZIndex(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.Actor.getZIndex()"""
        return int.__wrap(super(scene2d.Actor, self).getZIndex())

    @overload
    def getY(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getY(int)"""
        return float.__wrap(super(__scene2d.Actor, self).getY(__int.valueOf(arg0)))

    @override
    @overload
    def setOrigin(self, arg0: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOrigin(int)"""
        super(__scene2d.Actor, self).setOrigin(__int.valueOf(arg0))

    @overload
    def isModal(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Window.isModal()"""
        return bool.__wrap(super(Window, self).isModal())

    @override
    @overload
    def validate(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.validate()"""
        super(WidgetGroup, self).validate()

    @overload
    def isDescendantOf(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isDescendantOf(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Actor, self).isDescendantOf(arg0))

    @override
    @overload
    def addActorBefore(self, arg0: 'Actor', arg1: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.addActorBefore(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__scene2d.Group, self).addActorBefore(arg0, arg1)

    @override
    @overload
    def getParent(self) -> 'scene2d.Group':
        """public com.badlogic.gdx.scenes.scene2d.Group com.badlogic.gdx.scenes.scene2d.Actor.getParent()"""
        return 'scene2d.Group'.__wrap(super(scene2d.Actor, self).getParent())

    @overload
    def isDragging(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Window.isDragging()"""
        return bool.__wrap(super(Window, self).isDragging())

    @override
    @overload
    def clearListeners(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clearListeners()"""
        super(scene2d.Actor, self).clearListeners()

    @overload
    def localToActorCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToActorCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToActorCoordinates(arg0, arg1))

    @override
    @overload
    def getTableDebug(self) -> 'Debug':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table$Debug com.badlogic.gdx.scenes.scene2d.ui.Table.getTableDebug()"""
        return 'Debug'.__wrap(super(Table, self).getTableDebug())

    @override
    @overload
    def setOriginX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOriginX(float)"""
        super(__scene2d.Actor, self).setOriginX(__float.valueOf(arg0))

    @overload
    def removeActorAt(self, arg0: int, arg1: bool) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.ui.Table.removeActorAt(int,boolean)"""
        return 'scene2d.Actor'.__wrap(super(__Table, self).removeActorAt(__int.valueOf(arg0), __boolean.valueOf(arg1)))

    @override
    @overload
    def getHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getHeight()"""
        return float.__wrap(super(scene2d.Actor, self).getHeight())

    @override
    @overload
    def hasKeyboardFocus(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasKeyboardFocus()"""
        return bool.__wrap(super(scene2d.Actor, self).hasKeyboardFocus())

    @override
    @overload
    def getOriginY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getOriginY()"""
        return float.__wrap(super(scene2d.Actor, self).getOriginY())

    @overload
    def setKeepWithinStage(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Window.setKeepWithinStage(boolean)"""
        super(__Window, self).setKeepWithinStage(__boolean.valueOf(arg0))

    @override
    @overload
    def pack(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.pack()"""
        super(WidgetGroup, self).pack()

    @override
    @overload
    def clipEnd(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clipEnd()"""
        super(scene2d.Actor, self).clipEnd()

    @override
    @overload
    def getUserObject(self) -> object:
        """public java.lang.Object com.badlogic.gdx.scenes.scene2d.Actor.getUserObject()"""
        return object.__wrap(super(scene2d.Actor, self).getUserObject())

    @overload
    def setModal(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Window.setModal(boolean)"""
        super(__Window, self).setModal(__boolean.valueOf(arg0))

    @override
    @overload
    def rotateBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.rotateBy(float)"""
        super(__scene2d.Actor, self).rotateBy(__float.valueOf(arg0))

    @overload
    def background(self, arg0: str) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.background(java.lang.String)"""
        return 'Table'.__wrap(super(__Table, self).background(arg0))

    @overload
    def getRowHeight(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getRowHeight(int)"""
        return float.__wrap(super(__Table, self).getRowHeight(__int.valueOf(arg0)))

    @overload
    def getTitleLabel(self) -> 'Label':
        """public com.badlogic.gdx.scenes.scene2d.ui.Label com.badlogic.gdx.scenes.scene2d.ui.Window.getTitleLabel()"""
        return 'Label'.__wrap(super(Window, self).getTitleLabel())

    @override
    @overload
    def getPadLeftValue(self) -> 'Value':
        """public com.badlogic.gdx.scenes.scene2d.ui.Value com.badlogic.gdx.scenes.scene2d.ui.Table.getPadLeftValue()"""
        return 'Value'.__wrap(super(Table, self).getPadLeftValue())

    @override
    @overload
    def setScale(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScale(float,float)"""
        super(__scene2d.Actor, self).setScale(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def addListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.addListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).addListener(arg0))

    @override
    @overload
    def setRound(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.setRound(boolean)"""
        super(__Table, self).setRound(__boolean.valueOf(arg0))

    @overload
    def debug(self, arg0: 'Debug') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.debug(com.badlogic.gdx.scenes.scene2d.ui.Table$Debug)"""
        return 'Table'.__wrap(super(__Table, self).debug(arg0))

    @overload
    def clip(self, arg0: bool) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.clip(boolean)"""
        return 'Table'.__wrap(super(__Table, self).clip(__boolean.valueOf(arg0)))

    @override
    @overload
    def invalidate(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.invalidate()"""
        super(Table, self).invalidate()

    @override
    @overload
    def getPadLeft(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getPadLeft()"""
        return float.__wrap(super(Table, self).getPadLeft())

    @override
    @overload
    def setVisible(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setVisible(boolean)"""
        super(__scene2d.Actor, self).setVisible(__boolean.valueOf(arg0))

    @override
    @overload
    def setY(self, arg0: float, arg1: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setY(float,int)"""
        super(__scene2d.Actor, self).setY(__float.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def setFillParent(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.setFillParent(boolean)"""
        super(__WidgetGroup, self).setFillParent(__boolean.valueOf(arg0))

    @overload
    def getCell(self, arg0: 'Actor') -> 'Cell':
        """public <T extends com.badlogic.gdx.scenes.scene2d.Actor> com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Table.getCell(T)"""
        return 'Cell'.__wrap(super(__Table, self).getCell(arg0))

    @override
    @overload
    def getMinHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getMinHeight()"""
        return float.__wrap(super(Table, self).getMinHeight())

    @override
    @overload
    def needsLayout(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.needsLayout()"""
        return bool.__wrap(super(WidgetGroup, self).needsLayout())

    @override
    @overload
    def setX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setX(float)"""
        super(__scene2d.Actor, self).setX(__float.valueOf(arg0))

    @override
    @overload
    def setOrigin(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOrigin(float,float)"""
        super(__scene2d.Actor, self).setOrigin(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def getCullingArea(self) -> 'math.Rectangle':
        """public com.badlogic.gdx.math.Rectangle com.badlogic.gdx.scenes.scene2d.Group.getCullingArea()"""
        return 'math.Rectangle'.__wrap(super(scene2d.Group, self).getCullingArea())

    @override
    @overload
    def getRight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getRight()"""
        return float.__wrap(super(scene2d.Actor, self).getRight())

    @overload
    def isAscendantOf(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isAscendantOf(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Actor, self).isAscendantOf(arg0))

    @override
    @overload
    def hasParent(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasParent()"""
        return bool.__wrap(super(scene2d.Actor, self).hasParent())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.Group.toString()"""
        return str.__wrap(super(scene2d.Group, self).toString())

    @override
    @overload
    def getChildren(self) -> 'utils.SnapshotArray':
        """public com.badlogic.gdx.utils.SnapshotArray<com.badlogic.gdx.scenes.scene2d.Actor> com.badlogic.gdx.scenes.scene2d.Group.getChildren()"""
        return 'utils.SnapshotArray'.__wrap(super(scene2d.Group, self).getChildren())

    @override
    @overload
    def getScaleY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getScaleY()"""
        return float.__wrap(super(scene2d.Actor, self).getScaleY())

    @override
    @overload
    def setSkin(self, arg0: 'Skin'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.setSkin(com.badlogic.gdx.scenes.scene2d.ui.Skin)"""
        super(__Table, self).setSkin(arg0)

    @override
    @overload
    def getWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getWidth()"""
        return float.__wrap(super(scene2d.Actor, self).getWidth())

    @overload
    def __init__(self, arg0: str, arg1: 'WindowStyle'):
        """public com.badlogic.gdx.scenes.scene2d.ui.Window(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Window$WindowStyle)"""
        val = __Window(arg0, arg1)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def setPosition(self, arg0: float, arg1: float, arg2: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setPosition(float,float,int)"""
        super(__scene2d.Actor, self).setPosition(__float.valueOf(arg0), __float.valueOf(arg1), __int.valueOf(arg2))

    @override
    @overload
    def setLayoutEnabled(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.setLayoutEnabled(boolean)"""
        super(__WidgetGroup, self).setLayoutEnabled(__boolean.valueOf(arg0))

    @overload
    def removeCaptureListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.removeCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).removeCaptureListener(arg0))

    @override
    @overload
    def invalidateHierarchy(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.invalidateHierarchy()"""
        super(WidgetGroup, self).invalidateHierarchy()

    @override
    @overload
    def setColor(self, arg0: 'Color'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setColor(com.badlogic.gdx.graphics.Color)"""
        super(__scene2d.Actor, self).setColor(arg0)

    @overload
    def addCaptureListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.addCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).addCaptureListener(arg0))

    @overload
    def fire(self, arg0: 'Event') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.fire(com.badlogic.gdx.scenes.scene2d.Event)"""
        return bool.__wrap(super(__scene2d.Actor, self).fire(arg0))

    @override
    @overload
    def getPrefHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getPrefHeight()"""
        return float.__wrap(super(Table, self).getPrefHeight())

    @overload
    def columnDefaults(self, arg0: int) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell com.badlogic.gdx.scenes.scene2d.ui.Table.columnDefaults(int)"""
        return 'Cell'.__wrap(super(__Table, self).columnDefaults(__int.valueOf(arg0)))

    @override
    @overload
    def remove(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.remove()"""
        return bool.__wrap(super(scene2d.Actor, self).remove())

    @override
    @overload
    def isVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).isVisible())

    @override
    @overload
    def defaults(self) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell com.badlogic.gdx.scenes.scene2d.ui.Table.defaults()"""
        return 'Cell'.__wrap(super(Table, self).defaults())

    @overload
    def pad(self, arg0: 'Value') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.pad(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Table'.__wrap(super(__Table, self).pad(arg0))

    @override
    @overload
    def getPadBottomValue(self) -> 'Value':
        """public com.badlogic.gdx.scenes.scene2d.ui.Value com.badlogic.gdx.scenes.scene2d.ui.Table.getPadBottomValue()"""
        return 'Value'.__wrap(super(Table, self).getPadBottomValue())

    @overload
    def __init__(self, arg0: str, arg1: 'Skin', arg2: str):
        """public com.badlogic.gdx.scenes.scene2d.ui.Window(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String)"""
        val = __Window(arg0, arg1, arg2)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def draw(self, arg0: 'Batch', arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Window.draw(com.badlogic.gdx.graphics.g2d.Batch,float)"""
        super(__Window, self).draw(arg0, __float.valueOf(arg1))

    @override
    @overload
    def getTop(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getTop()"""
        return float.__wrap(super(scene2d.Actor, self).getTop())

    @override
    @overload
    def clearActions(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clearActions()"""
        super(scene2d.Actor, self).clearActions()

    @override
    @overload
    def setRotation(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setRotation(float)"""
        super(__scene2d.Actor, self).setRotation(__float.valueOf(arg0))

    @override
    @overload
    def getScaleX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getScaleX()"""
        return float.__wrap(super(scene2d.Actor, self).getScaleX())

    @override
    @overload
    def setBackground(self, arg0: str):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.setBackground(java.lang.String)"""
        super(__Table, self).setBackground(arg0)

    @overload
    def firstAscendant(self, arg0: 'Class') -> 'scene2d.Actor':
        """public <T extends com.badlogic.gdx.scenes.scene2d.Actor> T com.badlogic.gdx.scenes.scene2d.Actor.firstAscendant(java.lang.Class<T>)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Actor, self).firstAscendant(arg0))

    @override
    @overload
    def setScaleY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScaleY(float)"""
        super(__scene2d.Actor, self).setScaleY(__float.valueOf(arg0))

    @overload
    def stageToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.stageToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).stageToLocalCoordinates(arg0))

    @override
    @overload
    def bottom(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.bottom()"""
        return 'Table'.__wrap(super(Table, self).bottom())

    @overload
    def swapActor(self, arg0: int, arg1: int) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.swapActor(int,int)"""
        return bool.__wrap(super(__scene2d.Group, self).swapActor(__int.valueOf(arg0), __int.valueOf(arg1)))

    @override
    @overload
    def hasChildren(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.hasChildren()"""
        return bool.__wrap(super(scene2d.Group, self).hasChildren())

    @override
    @overload
    def ascendantsVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.ascendantsVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).ascendantsVisible())

    @override
    @overload
    def getAlign(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.ui.Table.getAlign()"""
        return int.__wrap(super(Table, self).getAlign())

    @override
    @overload
    def debugCell(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.debugCell()"""
        return 'Table'.__wrap(super(Table, self).debugCell())

    @override
    @overload
    def getColumns(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.ui.Table.getColumns()"""
        return int.__wrap(super(Table, self).getColumns())

    @override
    @overload
    def debugActor(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.debugActor()"""
        return 'Table'.__wrap(super(Table, self).debugActor())

    @overload
    def padTop(self, arg0: 'Value') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padTop(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Table'.__wrap(super(__Table, self).padTop(arg0))

    @override
    @overload
    def getColor(self) -> 'graphics.Color':
        """public com.badlogic.gdx.graphics.Color com.badlogic.gdx.scenes.scene2d.Actor.getColor()"""
        return 'graphics.Color'.__wrap(super(scene2d.Actor, self).getColor())

    @override
    @overload
    def isTransform(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.isTransform()"""
        return bool.__wrap(super(scene2d.Group, self).isTransform())

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @override
    @overload
    def isTouchable(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchable()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchable())

    @overload
    def getTitleTable(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Window.getTitleTable()"""
        return 'Table'.__wrap(super(Window, self).getTitleTable())

    @overload
    def clipBegin(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.clipBegin(float,float,float,float)"""
        return bool.__wrap(super(__scene2d.Actor, self).clipBegin(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3)))

    @override
    @overload
    def getCells(self) -> 'utils.Array':
        """public com.badlogic.gdx.utils.Array<com.badlogic.gdx.scenes.scene2d.ui.Cell> com.badlogic.gdx.scenes.scene2d.ui.Table.getCells()"""
        return 'utils.Array'.__wrap(super(Table, self).getCells())

    @override
    @overload
    def getPadTopValue(self) -> 'Value':
        """public com.badlogic.gdx.scenes.scene2d.ui.Value com.badlogic.gdx.scenes.scene2d.ui.Table.getPadTopValue()"""
        return 'Value'.__wrap(super(Table, self).getPadTopValue()) 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldStyle
from pyquantum_helper import import_once as __import_once__
from builtins import str
try:
    from pygdx.scenes.scene2d import utils
except ImportError:
    utils = __import_once__("pygdx.scenes.scene2d.utils")

from pyquantum_helper import override
import java.lang.Object as __object
try:
    from pygdx.graphics import g2d
except ImportError:
    g2d = __import_once__("pygdx.graphics.g2d")

from builtins import type
import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import com.badlogic.gdx.scenes.scene2d.ui.TextField as __TextField_TextFieldStyle
__TextFieldStyle = __TextField_TextFieldStyle.TextFieldStyle
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import java.lang.Integer as __int
from builtins import bool
try:
    from pygdx import graphics
except ImportError:
    graphics = __import_once__("pygdx.graphics")

from builtins import int
 
class TextFieldStyle():
    """com.badlogic.gdx.scenes.scene2d.ui.TextField.TextFieldStyle"""
 
    @staticmethod
    def __wrap(java_value: __TextFieldStyle) -> 'TextFieldStyle':
        return TextFieldStyle(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __TextFieldStyle):
        """
        Dynamic initializer for TextFieldStyle.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.lang.Object.toString()"""
        return str.__wrap(super(object, self).toString())

    @overload
    def __init__(self, arg0: 'BitmapFont', arg1: 'Color', arg2: 'Drawable', arg3: 'Drawable', arg4: 'Drawable'):
        """public com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldStyle(com.badlogic.gdx.graphics.g2d.BitmapFont,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable)"""
        val = __TextFieldStyle(arg0, arg1, arg2, arg3, arg4)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def __init__(self, arg0: 'TextFieldStyle'):
        """public com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldStyle(com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldStyle)"""
        val = __TextFieldStyle(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def __init__(self):
        """public com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldStyle()"""
        val = __TextFieldStyle()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def __init__(self, ):
        """public com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldStyle()"""
        val = __TextFieldStyle()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0)) 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.List$ListStyle
from pyquantum_helper import import_once as __import_once__
from builtins import str
try:
    from pygdx.scenes.scene2d import utils
except ImportError:
    utils = __import_once__("pygdx.scenes.scene2d.utils")

from pyquantum_helper import override
import java.lang.Object as __object
try:
    from pygdx.graphics import g2d
except ImportError:
    g2d = __import_once__("pygdx.graphics.g2d")

from builtins import type
import com.badlogic.gdx.scenes.scene2d.ui.List as __List_ListStyle
__ListStyle = __List_ListStyle.ListStyle
import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import java.lang.Integer as __int
from builtins import bool
try:
    from pygdx import graphics
except ImportError:
    graphics = __import_once__("pygdx.graphics")

from builtins import int
 
class ListStyle():
    """com.badlogic.gdx.scenes.scene2d.ui.List.ListStyle"""
 
    @staticmethod
    def __wrap(java_value: __ListStyle) -> 'ListStyle':
        return ListStyle(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __ListStyle):
        """
        Dynamic initializer for ListStyle.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.lang.Object.toString()"""
        return str.__wrap(super(object, self).toString())

    @overload
    def __init__(self, ):
        """public com.badlogic.gdx.scenes.scene2d.ui.List$ListStyle()"""
        val = __ListStyle()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def __init__(self, arg0: 'ListStyle'):
        """public com.badlogic.gdx.scenes.scene2d.ui.List$ListStyle(com.badlogic.gdx.scenes.scene2d.ui.List$ListStyle)"""
        val = __ListStyle(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def __init__(self):
        """public com.badlogic.gdx.scenes.scene2d.ui.List$ListStyle()"""
        val = __ListStyle()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @overload
    def __init__(self, arg0: 'BitmapFont', arg1: 'Color', arg2: 'Color', arg3: 'Drawable'):
        """public com.badlogic.gdx.scenes.scene2d.ui.List$ListStyle(com.badlogic.gdx.graphics.g2d.BitmapFont,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.scenes.scene2d.utils.Drawable)"""
        val = __ListStyle(arg0, arg1, arg2, arg3)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0)) 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup
from pyquantum_helper import import_once as __import_once__
import com.badlogic.gdx.scenes.scene2d.Touchable as __Touchable
__Touchable = __Touchable
try:
    from pygdx.scenes import scene2d
except ImportError:
    scene2d = __import_once__("pygdx.scenes.scene2d")

import com.badlogic.gdx.graphics.Color as __Color
__Color = __Color
import java.lang.Boolean as __boolean
try:
    from pygdx.graphics import g2d
except ImportError:
    g2d = __import_once__("pygdx.graphics.g2d")

from builtins import type
import com.badlogic.gdx.scenes.scene2d.Group as __Group
__Group = __Group
import com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup as __WidgetGroup
__WidgetGroup = __WidgetGroup
import com.badlogic.gdx.math.Vector2 as __Vector2
__Vector2 = __Vector2
import com.badlogic.gdx.math.Rectangle as __Rectangle
__Rectangle = __Rectangle
import java.lang.Class as __Class
__Class = __Class
import com.badlogic.gdx.utils.Array as __Array
__Array = __Array
import java.lang.String as __string
try:
    from pygdx import math
except ImportError:
    math = __import_once__("pygdx.math")

from builtins import bool
from builtins import str
try:
    from pygdx import utils
except ImportError:
    utils = __import_once__("pygdx.utils")

from pyquantum_helper import override
import java.lang.Object as __object
from builtins import float
from builtins import object
import com.badlogic.gdx.utils.DelayedRemovalArray as __DelayedRemovalArray
__DelayedRemovalArray = __DelayedRemovalArray
import java.lang.Long as __long
import java.lang.Float as __float
import java.lang.String as __String
__String = __String
try:
    from pygdx.graphics import glutils
except ImportError:
    glutils = __import_once__("pygdx.graphics.glutils")

import java.lang.Object as __Object
__Object = __Object
import com.badlogic.gdx.utils.SnapshotArray as __SnapshotArray
__SnapshotArray = __SnapshotArray
import com.badlogic.gdx.scenes.scene2d.Actor as __Actor
__Actor = __Actor
import java.lang.Integer as __int
import com.badlogic.gdx.scenes.scene2d.Stage as __Stage
__Stage = __Stage
try:
    from pygdx import graphics
except ImportError:
    graphics = __import_once__("pygdx.graphics")

from builtins import int
 
class WidgetGroup(scenes.__Group, scene2d.Group, scene2d.__Layout, utils.Layout):
    """com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup"""
 
    @staticmethod
    def __wrap(java_value: __WidgetGroup) -> 'WidgetGroup':
        return WidgetGroup(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __WidgetGroup):
        """
        Dynamic initializer for WidgetGroup.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def getY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getY()"""
        return float.__wrap(super(scene2d.Actor, self).getY())

    @overload
    def localToDescendantCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Group.localToDescendantCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Group, self).localToDescendantCoordinates(arg0, arg1))

    @overload
    def setZIndex(self, arg0: int) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.setZIndex(int)"""
        return bool.__wrap(super(__scene2d.Actor, self).setZIndex(__int.valueOf(arg0)))

    @override
    @overload
    def setBounds(self, arg0: float, arg1: float, arg2: float, arg3: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setBounds(float,float,float,float)"""
        super(__scene2d.Actor, self).setBounds(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def getX(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getX(int)"""
        return float.__wrap(super(__scene2d.Actor, self).getX(__int.valueOf(arg0)))

    @override
    @overload
    def sizeBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.sizeBy(float)"""
        super(__scene2d.Actor, self).sizeBy(__float.valueOf(arg0))

    @overload
    def findActor(self, arg0: str) -> 'scene2d.Actor':
        """public <T extends com.badlogic.gdx.scenes.scene2d.Actor> T com.badlogic.gdx.scenes.scene2d.Group.findActor(java.lang.String)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Group, self).findActor(arg0))

    @override
    @overload
    def invalidate(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.invalidate()"""
        super(WidgetGroup, self).invalidate()

    @override
    @overload
    def sizeBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.sizeBy(float,float)"""
        super(__scene2d.Actor, self).sizeBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def hasActions(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasActions()"""
        return bool.__wrap(super(scene2d.Actor, self).hasActions())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0))

    @override
    @overload
    def setScaleX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScaleX(float)"""
        super(__scene2d.Actor, self).setScaleX(__float.valueOf(arg0))

    @override
    @overload
    def getTouchable(self) -> 'scene2d.Touchable':
        """public com.badlogic.gdx.scenes.scene2d.Touchable com.badlogic.gdx.scenes.scene2d.Actor.getTouchable()"""
        return 'scene2d.Touchable'.__wrap(super(scene2d.Actor, self).getTouchable())

    @override
    @overload
    def removeAction(self, arg0: 'Action'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.removeAction(com.badlogic.gdx.scenes.scene2d.Action)"""
        super(__scene2d.Actor, self).removeAction(arg0)

    @override
    @overload
    def getX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getX()"""
        return float.__wrap(super(scene2d.Actor, self).getX())

    @override
    @overload
    def layout(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.layout()"""
        super(WidgetGroup, self).layout()

    @override
    @overload
    def toBack(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.toBack()"""
        super(scene2d.Actor, self).toBack()

    @override
    @overload
    def getMaxWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.getMaxWidth()"""
        return float.__wrap(super(WidgetGroup, self).getMaxWidth())

    @override
    @overload
    def setDebug(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setDebug(boolean)"""
        super(__scene2d.Actor, self).setDebug(__boolean.valueOf(arg0))

    @override
    @overload
    def setX(self, arg0: float, arg1: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setX(float,int)"""
        super(__scene2d.Actor, self).setX(__float.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def screenToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.screenToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).screenToLocalCoordinates(arg0))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def ancestorsVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.ancestorsVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).ancestorsVisible())

    @override
    @overload
    def getListeners(self) -> 'utils.DelayedRemovalArray':
        """public com.badlogic.gdx.utils.DelayedRemovalArray<com.badlogic.gdx.scenes.scene2d.EventListener> com.badlogic.gdx.scenes.scene2d.Actor.getListeners()"""
        return 'utils.DelayedRemovalArray'.__wrap(super(scene2d.Actor, self).getListeners())

    @overload
    def __init__(self, ):
        """public com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup()"""
        val = __WidgetGroup()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def __init__(self, *arg0: 'scene2d.Actor'):
        """public com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup(com.badlogic.gdx.scenes.scene2d.Actor...)"""
        val = __WidgetGroup(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def debugAll(self) -> 'scene2d.Group':
        """public com.badlogic.gdx.scenes.scene2d.Group com.badlogic.gdx.scenes.scene2d.Group.debugAll()"""
        return 'scene2d.Group'.__wrap(super(scene2d.Group, self).debugAll())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def removeListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.removeListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).removeListener(arg0))

    @overload
    def needsLayout(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.needsLayout()"""
        return bool.__wrap(super(WidgetGroup, self).needsLayout())

    @override
    @overload
    def isTouchFocusListener(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchFocusListener()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchFocusListener())

    @overload
    def localToStageCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToStageCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToStageCoordinates(arg0))

    @override
    @overload
    def setSize(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setSize(float,float)"""
        super(__scene2d.Actor, self).setSize(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def getZIndex(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.Actor.getZIndex()"""
        return int.__wrap(super(scene2d.Actor, self).getZIndex())

    @override
    @overload
    def clipBegin(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.clipBegin()"""
        return bool.__wrap(super(scene2d.Actor, self).clipBegin())

    @override
    @overload
    def moveBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.moveBy(float,float)"""
        super(__scene2d.Actor, self).moveBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def getY(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getY(int)"""
        return float.__wrap(super(__scene2d.Actor, self).getY(__int.valueOf(arg0)))

    @override
    @overload
    def setOrigin(self, arg0: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOrigin(int)"""
        super(__scene2d.Actor, self).setOrigin(__int.valueOf(arg0))

    @override
    @overload
    def validate(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.validate()"""
        super(WidgetGroup, self).validate()

    @overload
    def isDescendantOf(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isDescendantOf(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Actor, self).isDescendantOf(arg0))

    @override
    @overload
    def addActorBefore(self, arg0: 'Actor', arg1: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.addActorBefore(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__scene2d.Group, self).addActorBefore(arg0, arg1)

    @override
    @overload
    def getParent(self) -> 'scene2d.Group':
        """public com.badlogic.gdx.scenes.scene2d.Group com.badlogic.gdx.scenes.scene2d.Actor.getParent()"""
        return 'scene2d.Group'.__wrap(super(scene2d.Actor, self).getParent())

    @override
    @overload
    def clearListeners(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clearListeners()"""
        super(scene2d.Actor, self).clearListeners()

    @overload
    def localToActorCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToActorCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToActorCoordinates(arg0, arg1))

    @override
    @overload
    def setName(self, arg0: str):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setName(java.lang.String)"""
        super(__scene2d.Actor, self).setName(arg0)

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @override
    @overload
    def setOriginX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOriginX(float)"""
        super(__scene2d.Actor, self).setOriginX(__float.valueOf(arg0))

    @override
    @overload
    def getHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getHeight()"""
        return float.__wrap(super(scene2d.Actor, self).getHeight())

    @overload
    def swapActor(self, arg0: 'Actor', arg1: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.swapActor(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Group, self).swapActor(arg0, arg1))

    @override
    @overload
    def hasKeyboardFocus(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasKeyboardFocus()"""
        return bool.__wrap(super(scene2d.Actor, self).hasKeyboardFocus())

    @override
    @overload
    def getOriginY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getOriginY()"""
        return float.__wrap(super(scene2d.Actor, self).getOriginY())

    @override
    @overload
    def pack(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.pack()"""
        super(WidgetGroup, self).pack()

    @override
    @overload
    def clipEnd(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clipEnd()"""
        super(scene2d.Actor, self).clipEnd()

    @override
    @overload
    def getMinWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.getMinWidth()"""
        return float.__wrap(super(WidgetGroup, self).getMinWidth())

    @override
    @overload
    def getUserObject(self) -> object:
        """public java.lang.Object com.badlogic.gdx.scenes.scene2d.Actor.getUserObject()"""
        return object.__wrap(super(scene2d.Actor, self).getUserObject())

    @override
    @overload
    def getDebug(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.getDebug()"""
        return bool.__wrap(super(scene2d.Actor, self).getDebug())

    @override
    @overload
    def setHeight(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setHeight(float)"""
        super(__scene2d.Actor, self).setHeight(__float.valueOf(arg0))

    @override
    @overload
    def setScale(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScale(float)"""
        super(__scene2d.Actor, self).setScale(__float.valueOf(arg0))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def rotateBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.rotateBy(float)"""
        super(__scene2d.Actor, self).rotateBy(__float.valueOf(arg0))

    @override
    @overload
    def setDebug(self, arg0: bool, arg1: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Group.setDebug(boolean,boolean)"""
        super(__scene2d.Group, self).setDebug(__boolean.valueOf(arg0), __boolean.valueOf(arg1))

    @override
    @overload
    def drawDebug(self, arg0: 'ShapeRenderer'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.drawDebug(com.badlogic.gdx.graphics.glutils.ShapeRenderer)"""
        super(__scene2d.Group, self).drawDebug(arg0)

    @override
    @overload
    def setScale(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScale(float,float)"""
        super(__scene2d.Actor, self).setScale(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def setTransform(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Group.setTransform(boolean)"""
        super(__scene2d.Group, self).setTransform(__boolean.valueOf(arg0))

    @overload
    def addListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.addListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).addListener(arg0))

    @overload
    def parentToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.parentToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).parentToLocalCoordinates(arg0))

    @override
    @overload
    def getMinHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.getMinHeight()"""
        return float.__wrap(super(WidgetGroup, self).getMinHeight())

    @override
    @overload
    def getRotation(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getRotation()"""
        return float.__wrap(super(scene2d.Actor, self).getRotation())

    @override
    @overload
    def setVisible(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setVisible(boolean)"""
        super(__scene2d.Actor, self).setVisible(__boolean.valueOf(arg0))

    @override
    @overload
    def setY(self, arg0: float, arg1: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setY(float,int)"""
        super(__scene2d.Actor, self).setY(__float.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def setFillParent(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.setFillParent(boolean)"""
        super(__WidgetGroup, self).setFillParent(__boolean.valueOf(arg0))

    @override
    @overload
    def getMaxHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.getMaxHeight()"""
        return float.__wrap(super(WidgetGroup, self).getMaxHeight())

    @override
    @overload
    def setX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setX(float)"""
        super(__scene2d.Actor, self).setX(__float.valueOf(arg0))

    @override
    @overload
    def setOrigin(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOrigin(float,float)"""
        super(__scene2d.Actor, self).setOrigin(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def addActor(self, arg0: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.addActor(com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__scene2d.Group, self).addActor(arg0)

    @override
    @overload
    def getCullingArea(self) -> 'math.Rectangle':
        """public com.badlogic.gdx.math.Rectangle com.badlogic.gdx.scenes.scene2d.Group.getCullingArea()"""
        return 'math.Rectangle'.__wrap(super(scene2d.Group, self).getCullingArea())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def getRight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getRight()"""
        return float.__wrap(super(scene2d.Actor, self).getRight())

    @overload
    def isAscendantOf(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isAscendantOf(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Actor, self).isAscendantOf(arg0))

    @override
    @overload
    def setWidth(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setWidth(float)"""
        super(__scene2d.Actor, self).setWidth(__float.valueOf(arg0))

    @override
    @overload
    def isTouchFocusTarget(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchFocusTarget()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchFocusTarget())

    @override
    @overload
    def hasParent(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasParent()"""
        return bool.__wrap(super(scene2d.Actor, self).hasParent())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.Group.toString()"""
        return str.__wrap(super(scene2d.Group, self).toString())

    @override
    @overload
    def getPrefHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.getPrefHeight()"""
        return float.__wrap(super(WidgetGroup, self).getPrefHeight())

    @override
    @overload
    def setPosition(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setPosition(float,float)"""
        super(__scene2d.Actor, self).setPosition(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def getChildren(self) -> 'utils.SnapshotArray':
        """public com.badlogic.gdx.utils.SnapshotArray<com.badlogic.gdx.scenes.scene2d.Actor> com.badlogic.gdx.scenes.scene2d.Group.getChildren()"""
        return 'utils.SnapshotArray'.__wrap(super(scene2d.Group, self).getChildren())

    @override
    @overload
    def addActorAt(self, arg0: int, arg1: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.addActorAt(int,com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__scene2d.Group, self).addActorAt(__int.valueOf(arg0), arg1)

    @override
    @overload
    def getScaleY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getScaleY()"""
        return float.__wrap(super(scene2d.Actor, self).getScaleY())

    @override
    @overload
    def getWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getWidth()"""
        return float.__wrap(super(scene2d.Actor, self).getWidth())

    @overload
    def removeActorAt(self, arg0: int, arg1: bool) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.Group.removeActorAt(int,boolean)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Group, self).removeActorAt(__int.valueOf(arg0), __boolean.valueOf(arg1)))

    @override
    @overload
    def setOriginY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOriginY(float)"""
        super(__scene2d.Actor, self).setOriginY(__float.valueOf(arg0))

    @override
    @overload
    def setPosition(self, arg0: float, arg1: float, arg2: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setPosition(float,float,int)"""
        super(__scene2d.Actor, self).setPosition(__float.valueOf(arg0), __float.valueOf(arg1), __int.valueOf(arg2))

    @override
    @overload
    def setLayoutEnabled(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.setLayoutEnabled(boolean)"""
        super(__WidgetGroup, self).setLayoutEnabled(__boolean.valueOf(arg0))

    @overload
    def removeCaptureListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.removeCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).removeCaptureListener(arg0))

    @override
    @overload
    def invalidateHierarchy(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.invalidateHierarchy()"""
        super(WidgetGroup, self).invalidateHierarchy()

    @override
    @overload
    def setColor(self, arg0: 'Color'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setColor(com.badlogic.gdx.graphics.Color)"""
        super(__scene2d.Actor, self).setColor(arg0)

    @overload
    def localToScreenCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToScreenCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToScreenCoordinates(arg0))

    @override
    @overload
    def clear(self):
        """public void com.badlogic.gdx.scenes.scene2d.Group.clear()"""
        super(scene2d.Group, self).clear()

    @overload
    def removeActor(self, arg0: 'Actor', arg1: bool) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.removeActor(com.badlogic.gdx.scenes.scene2d.Actor,boolean)"""
        return bool.__wrap(super(__scene2d.Group, self).removeActor(arg0, __boolean.valueOf(arg1)))

    @override
    @overload
    def setTouchable(self, arg0: 'Touchable'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setTouchable(com.badlogic.gdx.scenes.scene2d.Touchable)"""
        super(__scene2d.Actor, self).setTouchable(arg0)

    @overload
    def addCaptureListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.addCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).addCaptureListener(arg0))

    @overload
    def fire(self, arg0: 'Event') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.fire(com.badlogic.gdx.scenes.scene2d.Event)"""
        return bool.__wrap(super(__scene2d.Actor, self).fire(arg0))

    @override
    @overload
    def remove(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.remove()"""
        return bool.__wrap(super(scene2d.Actor, self).remove())

    @overload
    def hit(self, arg0: float, arg1: float, arg2: bool) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.hit(float,float,boolean)"""
        return 'scene2d.Actor'.__wrap(super(__WidgetGroup, self).hit(__float.valueOf(arg0), __float.valueOf(arg1), __boolean.valueOf(arg2)))

    @override
    @overload
    def clearChildren(self):
        """public void com.badlogic.gdx.scenes.scene2d.Group.clearChildren()"""
        super(scene2d.Group, self).clearChildren()

    @overload
    def localToParentCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToParentCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToParentCoordinates(arg0))

    @override
    @overload
    def setCullingArea(self, arg0: 'Rectangle'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.setCullingArea(com.badlogic.gdx.math.Rectangle)"""
        super(__scene2d.Group, self).setCullingArea(arg0)

    @override
    @overload
    def getName(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.Actor.getName()"""
        return str.__wrap(super(scene2d.Actor, self).getName())

    @override
    @overload
    def isVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).isVisible())

    @override
    @overload
    def getCaptureListeners(self) -> 'utils.DelayedRemovalArray':
        """public com.badlogic.gdx.utils.DelayedRemovalArray<com.badlogic.gdx.scenes.scene2d.EventListener> com.badlogic.gdx.scenes.scene2d.Actor.getCaptureListeners()"""
        return 'utils.DelayedRemovalArray'.__wrap(super(scene2d.Actor, self).getCaptureListeners())

    @override
    @overload
    def debug(self) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.Actor.debug()"""
        return 'scene2d.Actor'.__wrap(super(scene2d.Actor, self).debug())

    @override
    @overload
    def clear(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Group.clear(boolean)"""
        super(__scene2d.Group, self).clear(__boolean.valueOf(arg0))

    @override
    @overload
    def getTop(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getTop()"""
        return float.__wrap(super(scene2d.Actor, self).getTop())

    @override
    @overload
    def setY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setY(float)"""
        super(__scene2d.Actor, self).setY(__float.valueOf(arg0))

    @override
    @overload
    def clearActions(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clearActions()"""
        super(scene2d.Actor, self).clearActions()

    @override
    @overload
    def addActorAfter(self, arg0: 'Actor', arg1: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.addActorAfter(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__scene2d.Group, self).addActorAfter(arg0, arg1)

    @override
    @overload
    def scaleBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.scaleBy(float,float)"""
        super(__scene2d.Actor, self).scaleBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def setRotation(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setRotation(float)"""
        super(__scene2d.Actor, self).setRotation(__float.valueOf(arg0))

    @override
    @overload
    def getScaleX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getScaleX()"""
        return float.__wrap(super(scene2d.Actor, self).getScaleX())

    @overload
    def firstAscendant(self, arg0: 'Class') -> 'scene2d.Actor':
        """public <T extends com.badlogic.gdx.scenes.scene2d.Actor> T com.badlogic.gdx.scenes.scene2d.Actor.firstAscendant(java.lang.Class<T>)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Actor, self).firstAscendant(arg0))

    @overload
    def notify(self, arg0: 'Event', arg1: bool) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.notify(com.badlogic.gdx.scenes.scene2d.Event,boolean)"""
        return bool.__wrap(super(__scene2d.Actor, self).notify(arg0, __boolean.valueOf(arg1)))

    @override
    @overload
    def act(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Group.act(float)"""
        super(__scene2d.Group, self).act(__float.valueOf(arg0))

    @override
    @overload
    def setUserObject(self, arg0: object):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setUserObject(java.lang.Object)"""
        super(__scene2d.Actor, self).setUserObject(arg0)

    @override
    @overload
    def setScaleY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScaleY(float)"""
        super(__scene2d.Actor, self).setScaleY(__float.valueOf(arg0))

    @override
    @overload
    def hasScrollFocus(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasScrollFocus()"""
        return bool.__wrap(super(scene2d.Actor, self).hasScrollFocus())

    @override
    @overload
    def toFront(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.toFront()"""
        super(scene2d.Actor, self).toFront()

    @override
    @overload
    def scaleBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.scaleBy(float)"""
        super(__scene2d.Actor, self).scaleBy(__float.valueOf(arg0))

    @overload
    def stageToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.stageToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).stageToLocalCoordinates(arg0))

    @overload
    def swapActor(self, arg0: int, arg1: int) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.swapActor(int,int)"""
        return bool.__wrap(super(__scene2d.Group, self).swapActor(__int.valueOf(arg0), __int.valueOf(arg1)))

    @override
    @overload
    def getOriginX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getOriginX()"""
        return float.__wrap(super(scene2d.Actor, self).getOriginX())

    @override
    @overload
    def draw(self, arg0: 'Batch', arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.draw(com.badlogic.gdx.graphics.g2d.Batch,float)"""
        super(__WidgetGroup, self).draw(arg0, __float.valueOf(arg1))

    @overload
    def getChild(self, arg0: int) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.Group.getChild(int)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Group, self).getChild(__int.valueOf(arg0)))

    @override
    @overload
    def hasChildren(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.hasChildren()"""
        return bool.__wrap(super(scene2d.Group, self).hasChildren())

    @override
    @overload
    def ascendantsVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.ascendantsVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).ascendantsVisible())

    @overload
    def removeActor(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.removeActor(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Group, self).removeActor(arg0))

    @override
    @overload
    def clearChildren(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Group.clearChildren(boolean)"""
        super(__scene2d.Group, self).clearChildren(__boolean.valueOf(arg0))

    @override
    @overload
    def getColor(self) -> 'graphics.Color':
        """public com.badlogic.gdx.graphics.Color com.badlogic.gdx.scenes.scene2d.Actor.getColor()"""
        return 'graphics.Color'.__wrap(super(scene2d.Actor, self).getColor())

    @override
    @overload
    def isTransform(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.isTransform()"""
        return bool.__wrap(super(scene2d.Group, self).isTransform())

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @override
    @overload
    def getStage(self) -> 'scene2d.Stage':
        """public com.badlogic.gdx.scenes.scene2d.Stage com.badlogic.gdx.scenes.scene2d.Actor.getStage()"""
        return 'scene2d.Stage'.__wrap(super(scene2d.Actor, self).getStage())

    @overload
    def __init__(self):
        """public com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup()"""
        val = __WidgetGroup()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def addAction(self, arg0: 'Action'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.addAction(com.badlogic.gdx.scenes.scene2d.Action)"""
        super(__scene2d.Actor, self).addAction(arg0)

    @override
    @overload
    def setColor(self, arg0: float, arg1: float, arg2: float, arg3: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setColor(float,float,float,float)"""
        super(__scene2d.Actor, self).setColor(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3))

    @override
    @overload
    def isTouchable(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchable()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchable())

    @overload
    def localToAscendantCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToAscendantCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToAscendantCoordinates(arg0, arg1))

    @overload
    def clipBegin(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.clipBegin(float,float,float,float)"""
        return bool.__wrap(super(__scene2d.Actor, self).clipBegin(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3)))

    @override
    @overload
    def getActions(self) -> 'utils.Array':
        """public com.badlogic.gdx.utils.Array<com.badlogic.gdx.scenes.scene2d.Action> com.badlogic.gdx.scenes.scene2d.Actor.getActions()"""
        return 'utils.Array'.__wrap(super(scene2d.Actor, self).getActions())

    @override
    @overload
    def getPrefWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.getPrefWidth()"""
        return float.__wrap(super(WidgetGroup, self).getPrefWidth()) 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.Tree
from pyquantum_helper import import_once as __import_once__
import com.badlogic.gdx.scenes.scene2d.Touchable as __Touchable
__Touchable = __Touchable
try:
    from pygdx.scenes import scene2d
except ImportError:
    scene2d = __import_once__("pygdx.scenes.scene2d")

import com.badlogic.gdx.graphics.Color as __Color
__Color = __Color
import java.lang.Boolean as __boolean
try:
    from pygdx.graphics import g2d
except ImportError:
    g2d = __import_once__("pygdx.graphics.g2d")

from builtins import type
import com.badlogic.gdx.scenes.scene2d.Group as __Group
__Group = __Group
import com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup as __WidgetGroup
__WidgetGroup = __WidgetGroup
import com.badlogic.gdx.math.Vector2 as __Vector2
__Vector2 = __Vector2
import com.badlogic.gdx.math.Rectangle as __Rectangle
__Rectangle = __Rectangle
import java.lang.Class as __Class
__Class = __Class
import com.badlogic.gdx.utils.Array as __Array
__Array = __Array
import java.lang.String as __string
import com.badlogic.gdx.scenes.scene2d.ui.Tree as __Tree_TreeStyle
__TreeStyle = __Tree_TreeStyle.TreeStyle
try:
    from pygdx import math
except ImportError:
    math = __import_once__("pygdx.math")

import com.badlogic.gdx.scenes.scene2d.ui.Tree as __Tree
__Tree = __Tree
from builtins import bool
from builtins import str
try:
    from pygdx import utils
except ImportError:
    utils = __import_once__("pygdx.utils")

try:
    from pygdx.scenes.scene2d import utils
except ImportError:
    utils = __import_once__("pygdx.scenes.scene2d.utils")

from pyquantum_helper import override
import java.lang.Object as __object
from builtins import float
import com.badlogic.gdx.scenes.scene2d.utils.Selection as __Selection
__Selection = __Selection
from builtins import object
import com.badlogic.gdx.scenes.scene2d.utils.ClickListener as __ClickListener
__ClickListener = __ClickListener
import com.badlogic.gdx.utils.DelayedRemovalArray as __DelayedRemovalArray
__DelayedRemovalArray = __DelayedRemovalArray
import java.lang.Long as __long
import java.lang.Float as __float
import java.lang.String as __String
__String = __String
import com.badlogic.gdx.scenes.scene2d.ui.Tree as __Tree_Node
__Node = __Tree_Node.Node
import java.lang.Object as __Object
__Object = __Object
try:
    from pygdx.graphics import glutils
except ImportError:
    glutils = __import_once__("pygdx.graphics.glutils")

import com.badlogic.gdx.utils.SnapshotArray as __SnapshotArray
__SnapshotArray = __SnapshotArray
import com.badlogic.gdx.scenes.scene2d.Actor as __Actor
__Actor = __Actor
import java.lang.Integer as __int
import com.badlogic.gdx.scenes.scene2d.Stage as __Stage
__Stage = __Stage
try:
    from pygdx import graphics
except ImportError:
    graphics = __import_once__("pygdx.graphics")

from builtins import int
 
class Tree(__WidgetGroup, WidgetGroup):
    """com.badlogic.gdx.scenes.scene2d.ui.Tree"""
 
    @staticmethod
    def __wrap(java_value: __Tree) -> 'Tree':
        return Tree(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Tree):
        """
        Dynamic initializer for Tree.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def getY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getY()"""
        return float.__wrap(super(scene2d.Actor, self).getY())

    @overload
    def localToDescendantCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Group.localToDescendantCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Group, self).localToDescendantCoordinates(arg0, arg1))

    @overload
    def setOverNode(self, arg0: 'Node'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Tree.setOverNode(N)"""
        super(__Tree, self).setOverNode(arg0)

    @overload
    def setZIndex(self, arg0: int) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.setZIndex(int)"""
        return bool.__wrap(super(__scene2d.Actor, self).setZIndex(__int.valueOf(arg0)))

    @overload
    def getOverNode(self) -> 'Node':
        """public N com.badlogic.gdx.scenes.scene2d.ui.Tree.getOverNode()"""
        return 'Node'.__wrap(super(Tree, self).getOverNode())

    @override
    @overload
    def setBounds(self, arg0: float, arg1: float, arg2: float, arg3: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setBounds(float,float,float,float)"""
        super(__scene2d.Actor, self).setBounds(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def getX(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getX(int)"""
        return float.__wrap(super(__scene2d.Actor, self).getX(__int.valueOf(arg0)))

    @override
    @overload
    def sizeBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.sizeBy(float)"""
        super(__scene2d.Actor, self).sizeBy(__float.valueOf(arg0))

    @overload
    def setStyle(self, arg0: 'TreeStyle'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Tree.setStyle(com.badlogic.gdx.scenes.scene2d.ui.Tree$TreeStyle)"""
        super(__Tree, self).setStyle(arg0)

    @overload
    def findActor(self, arg0: str) -> 'scene2d.Actor':
        """public <T extends com.badlogic.gdx.scenes.scene2d.Actor> T com.badlogic.gdx.scenes.scene2d.Group.findActor(java.lang.String)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Group, self).findActor(arg0))

    @override
    @overload
    def sizeBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.sizeBy(float,float)"""
        super(__scene2d.Actor, self).sizeBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def hasActions(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasActions()"""
        return bool.__wrap(super(scene2d.Actor, self).hasActions())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0))

    @override
    @overload
    def setScaleX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScaleX(float)"""
        super(__scene2d.Actor, self).setScaleX(__float.valueOf(arg0))

    @override
    @overload
    def getTouchable(self) -> 'scene2d.Touchable':
        """public com.badlogic.gdx.scenes.scene2d.Touchable com.badlogic.gdx.scenes.scene2d.Actor.getTouchable()"""
        return 'scene2d.Touchable'.__wrap(super(scene2d.Actor, self).getTouchable())

    @override
    @overload
    def removeAction(self, arg0: 'Action'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.removeAction(com.badlogic.gdx.scenes.scene2d.Action)"""
        super(__scene2d.Actor, self).removeAction(arg0)

    @override
    @overload
    def getX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getX()"""
        return float.__wrap(super(scene2d.Actor, self).getX())

    @overload
    def getRootNodes(self) -> 'utils.Array':
        """public com.badlogic.gdx.utils.Array<N> com.badlogic.gdx.scenes.scene2d.ui.Tree.getRootNodes()"""
        return 'utils.Array'.__wrap(super(Tree, self).getRootNodes())

    @overload
    def findExpandedValues(self, arg0: 'Array'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Tree.findExpandedValues(com.badlogic.gdx.utils.Array<V>)"""
        super(__Tree, self).findExpandedValues(arg0)

    @override
    @overload
    def toBack(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.toBack()"""
        super(scene2d.Actor, self).toBack()

    @overload
    def setIndentSpacing(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Tree.setIndentSpacing(float)"""
        super(__Tree, self).setIndentSpacing(__float.valueOf(arg0))

    @overload
    def getStyle(self) -> 'TreeStyle':
        """public com.badlogic.gdx.scenes.scene2d.ui.Tree$TreeStyle com.badlogic.gdx.scenes.scene2d.ui.Tree.getStyle()"""
        return 'TreeStyle'.__wrap(super(Tree, self).getStyle())

    @override
    @overload
    def getMaxWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.getMaxWidth()"""
        return float.__wrap(super(WidgetGroup, self).getMaxWidth())

    @override
    @overload
    def setDebug(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setDebug(boolean)"""
        super(__scene2d.Actor, self).setDebug(__boolean.valueOf(arg0))

    @override
    @overload
    def setX(self, arg0: float, arg1: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setX(float,int)"""
        super(__scene2d.Actor, self).setX(__float.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def screenToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.screenToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).screenToLocalCoordinates(arg0))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def ancestorsVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.ancestorsVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).ancestorsVisible())

    @override
    @overload
    def getListeners(self) -> 'utils.DelayedRemovalArray':
        """public com.badlogic.gdx.utils.DelayedRemovalArray<com.badlogic.gdx.scenes.scene2d.EventListener> com.badlogic.gdx.scenes.scene2d.Actor.getListeners()"""
        return 'utils.DelayedRemovalArray'.__wrap(super(scene2d.Actor, self).getListeners())

    @override
    @overload
    def debugAll(self) -> 'scene2d.Group':
        """public com.badlogic.gdx.scenes.scene2d.Group com.badlogic.gdx.scenes.scene2d.Group.debugAll()"""
        return 'scene2d.Group'.__wrap(super(scene2d.Group, self).debugAll())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def removeListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.removeListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).removeListener(arg0))

    @override
    @overload
    def isTouchFocusListener(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchFocusListener()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchFocusListener())

    @overload
    def localToStageCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToStageCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToStageCoordinates(arg0))

    @override
    @overload
    def invalidate(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Tree.invalidate()"""
        super(Tree, self).invalidate()

    @override
    @overload
    def setSize(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setSize(float,float)"""
        super(__scene2d.Actor, self).setSize(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def getZIndex(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.Actor.getZIndex()"""
        return int.__wrap(super(scene2d.Actor, self).getZIndex())

    @override
    @overload
    def clipBegin(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.clipBegin()"""
        return bool.__wrap(super(scene2d.Actor, self).clipBegin())

    @overload
    def getOverValue(self) -> object:
        """public V com.badlogic.gdx.scenes.scene2d.ui.Tree.getOverValue()"""
        return object.__wrap(super(Tree, self).getOverValue())

    @override
    @overload
    def moveBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.moveBy(float,float)"""
        super(__scene2d.Actor, self).moveBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def getY(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getY(int)"""
        return float.__wrap(super(__scene2d.Actor, self).getY(__int.valueOf(arg0)))

    @override
    @overload
    def setOrigin(self, arg0: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOrigin(int)"""
        super(__scene2d.Actor, self).setOrigin(__int.valueOf(arg0))

    @override
    @overload
    def validate(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.validate()"""
        super(WidgetGroup, self).validate()

    @overload
    def isDescendantOf(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isDescendantOf(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Actor, self).isDescendantOf(arg0))

    @override
    @overload
    def addActorBefore(self, arg0: 'Actor', arg1: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.addActorBefore(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__scene2d.Group, self).addActorBefore(arg0, arg1)

    @override
    @overload
    def getParent(self) -> 'scene2d.Group':
        """public com.badlogic.gdx.scenes.scene2d.Group com.badlogic.gdx.scenes.scene2d.Actor.getParent()"""
        return 'scene2d.Group'.__wrap(super(scene2d.Actor, self).getParent())

    @override
    @overload
    def clearListeners(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clearListeners()"""
        super(scene2d.Actor, self).clearListeners()

    @overload
    def localToActorCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToActorCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToActorCoordinates(arg0, arg1))

    @override
    @overload
    def setName(self, arg0: str):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setName(java.lang.String)"""
        super(__scene2d.Actor, self).setName(arg0)

    @overload
    def setYSpacing(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Tree.setYSpacing(float)"""
        super(__Tree, self).setYSpacing(__float.valueOf(arg0))

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @overload
    def updateRootNodes(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Tree.updateRootNodes()"""
        super(Tree, self).updateRootNodes()

    @override
    @overload
    def setOriginX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOriginX(float)"""
        super(__scene2d.Actor, self).setOriginX(__float.valueOf(arg0))

    @override
    @overload
    def getHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getHeight()"""
        return float.__wrap(super(scene2d.Actor, self).getHeight())

    @overload
    def swapActor(self, arg0: 'Actor', arg1: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.swapActor(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Group, self).swapActor(arg0, arg1))

    @override
    @overload
    def hasKeyboardFocus(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasKeyboardFocus()"""
        return bool.__wrap(super(scene2d.Actor, self).hasKeyboardFocus())

    @override
    @overload
    def clearChildren(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Tree.clearChildren(boolean)"""
        super(__Tree, self).clearChildren(__boolean.valueOf(arg0))

    @override
    @overload
    def getOriginY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getOriginY()"""
        return float.__wrap(super(scene2d.Actor, self).getOriginY())

    @overload
    def remove(self, arg0: 'Node'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Tree.remove(N)"""
        super(__Tree, self).remove(arg0)

    @override
    @overload
    def pack(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.pack()"""
        super(WidgetGroup, self).pack()

    @override
    @overload
    def clipEnd(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clipEnd()"""
        super(scene2d.Actor, self).clipEnd()

    @override
    @overload
    def getMinWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.getMinWidth()"""
        return float.__wrap(super(WidgetGroup, self).getMinWidth())

    @override
    @overload
    def getUserObject(self) -> object:
        """public java.lang.Object com.badlogic.gdx.scenes.scene2d.Actor.getUserObject()"""
        return object.__wrap(super(scene2d.Actor, self).getUserObject())

    @overload
    def getNodes(self) -> 'utils.Array':
        """public com.badlogic.gdx.utils.Array<N> com.badlogic.gdx.scenes.scene2d.ui.Tree.getNodes()"""
        return 'utils.Array'.__wrap(super(Tree, self).getNodes())

    @override
    @overload
    def getDebug(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.getDebug()"""
        return bool.__wrap(super(scene2d.Actor, self).getDebug())

    @override
    @overload
    def setHeight(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setHeight(float)"""
        super(__scene2d.Actor, self).setHeight(__float.valueOf(arg0))

    @override
    @overload
    def setScale(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScale(float)"""
        super(__scene2d.Actor, self).setScale(__float.valueOf(arg0))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def rotateBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.rotateBy(float)"""
        super(__scene2d.Actor, self).rotateBy(__float.valueOf(arg0))

    @override
    @overload
    def setDebug(self, arg0: bool, arg1: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Group.setDebug(boolean,boolean)"""
        super(__scene2d.Group, self).setDebug(__boolean.valueOf(arg0), __boolean.valueOf(arg1))

    @overload
    def __init__(self, arg0: 'Skin'):
        """public com.badlogic.gdx.scenes.scene2d.ui.Tree(com.badlogic.gdx.scenes.scene2d.ui.Skin)"""
        val = __Tree(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def drawDebug(self, arg0: 'ShapeRenderer'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.drawDebug(com.badlogic.gdx.graphics.glutils.ShapeRenderer)"""
        super(__scene2d.Group, self).drawDebug(arg0)

    @override
    @overload
    def setScale(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScale(float,float)"""
        super(__scene2d.Actor, self).setScale(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def setTransform(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Group.setTransform(boolean)"""
        super(__scene2d.Group, self).setTransform(__boolean.valueOf(arg0))

    @overload
    def addListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.addListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).addListener(arg0))

    @overload
    def parentToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.parentToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).parentToLocalCoordinates(arg0))

    @override
    @overload
    def getMinHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.getMinHeight()"""
        return float.__wrap(super(WidgetGroup, self).getMinHeight())

    @overload
    def insert(self, arg0: int, arg1: 'Node'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Tree.insert(int,N)"""
        super(__Tree, self).insert(__int.valueOf(arg0), arg1)

    @override
    @overload
    def getRotation(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getRotation()"""
        return float.__wrap(super(scene2d.Actor, self).getRotation())

    @override
    @overload
    def setVisible(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setVisible(boolean)"""
        super(__scene2d.Actor, self).setVisible(__boolean.valueOf(arg0))

    @override
    @overload
    def setY(self, arg0: float, arg1: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setY(float,int)"""
        super(__scene2d.Actor, self).setY(__float.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def setFillParent(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.setFillParent(boolean)"""
        super(__WidgetGroup, self).setFillParent(__boolean.valueOf(arg0))

    @overload
    def restoreExpandedValues(self, arg0: 'Array'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Tree.restoreExpandedValues(com.badlogic.gdx.utils.Array<V>)"""
        super(__Tree, self).restoreExpandedValues(arg0)

    @override
    @overload
    def getMaxHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.getMaxHeight()"""
        return float.__wrap(super(WidgetGroup, self).getMaxHeight())

    @override
    @overload
    def needsLayout(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.needsLayout()"""
        return bool.__wrap(super(WidgetGroup, self).needsLayout())

    @override
    @overload
    def setX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setX(float)"""
        super(__scene2d.Actor, self).setX(__float.valueOf(arg0))

    @overload
    def getClickListener(self) -> 'utils.ClickListener':
        """public com.badlogic.gdx.scenes.scene2d.utils.ClickListener com.badlogic.gdx.scenes.scene2d.ui.Tree.getClickListener()"""
        return 'utils.ClickListener'.__wrap(super(Tree, self).getClickListener())

    @override
    @overload
    def setOrigin(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOrigin(float,float)"""
        super(__scene2d.Actor, self).setOrigin(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def add(self, arg0: 'Node'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Tree.add(N)"""
        super(__Tree, self).add(arg0)

    @override
    @overload
    def addActor(self, arg0: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.addActor(com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__scene2d.Group, self).addActor(arg0)

    @override
    @overload
    def getCullingArea(self) -> 'math.Rectangle':
        """public com.badlogic.gdx.math.Rectangle com.badlogic.gdx.scenes.scene2d.Group.getCullingArea()"""
        return 'math.Rectangle'.__wrap(super(scene2d.Group, self).getCullingArea())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def expandAll(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Tree.expandAll()"""
        super(Tree, self).expandAll()

    @override
    @overload
    def getRight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getRight()"""
        return float.__wrap(super(scene2d.Actor, self).getRight())

    @overload
    def isAscendantOf(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isAscendantOf(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Actor, self).isAscendantOf(arg0))

    @override
    @overload
    def setWidth(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setWidth(float)"""
        super(__scene2d.Actor, self).setWidth(__float.valueOf(arg0))

    @override
    @overload
    def isTouchFocusTarget(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchFocusTarget()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchFocusTarget())

    @override
    @overload
    def hasParent(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasParent()"""
        return bool.__wrap(super(scene2d.Actor, self).hasParent())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.Group.toString()"""
        return str.__wrap(super(scene2d.Group, self).toString())

    @override
    @overload
    def setPosition(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setPosition(float,float)"""
        super(__scene2d.Actor, self).setPosition(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def getSelectedValue(self) -> object:
        """public V com.badlogic.gdx.scenes.scene2d.ui.Tree.getSelectedValue()"""
        return object.__wrap(super(Tree, self).getSelectedValue())

    @override
    @overload
    def getChildren(self) -> 'utils.SnapshotArray':
        """public com.badlogic.gdx.utils.SnapshotArray<com.badlogic.gdx.scenes.scene2d.Actor> com.badlogic.gdx.scenes.scene2d.Group.getChildren()"""
        return 'utils.SnapshotArray'.__wrap(super(scene2d.Group, self).getChildren())

    @override
    @overload
    def getPrefHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Tree.getPrefHeight()"""
        return float.__wrap(super(Tree, self).getPrefHeight())

    @override
    @overload
    def addActorAt(self, arg0: int, arg1: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.addActorAt(int,com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__scene2d.Group, self).addActorAt(__int.valueOf(arg0), arg1)

    @override
    @overload
    def getScaleY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getScaleY()"""
        return float.__wrap(super(scene2d.Actor, self).getScaleY())

    @override
    @overload
    def getWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getWidth()"""
        return float.__wrap(super(scene2d.Actor, self).getWidth())

    @overload
    def removeActorAt(self, arg0: int, arg1: bool) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.Group.removeActorAt(int,boolean)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Group, self).removeActorAt(__int.valueOf(arg0), __boolean.valueOf(arg1)))

    @override
    @overload
    def setOriginY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOriginY(float)"""
        super(__scene2d.Actor, self).setOriginY(__float.valueOf(arg0))

    @overload
    def getYSpacing(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Tree.getYSpacing()"""
        return float.__wrap(super(Tree, self).getYSpacing())

    @override
    @overload
    def setPosition(self, arg0: float, arg1: float, arg2: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setPosition(float,float,int)"""
        super(__scene2d.Actor, self).setPosition(__float.valueOf(arg0), __float.valueOf(arg1), __int.valueOf(arg2))

    @override
    @overload
    def setLayoutEnabled(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.setLayoutEnabled(boolean)"""
        super(__WidgetGroup, self).setLayoutEnabled(__boolean.valueOf(arg0))

    @overload
    def removeCaptureListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.removeCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).removeCaptureListener(arg0))

    @override
    @overload
    def invalidateHierarchy(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.invalidateHierarchy()"""
        super(WidgetGroup, self).invalidateHierarchy()

    @override
    @overload
    def setColor(self, arg0: 'Color'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setColor(com.badlogic.gdx.graphics.Color)"""
        super(__scene2d.Actor, self).setColor(arg0)

    @overload
    def localToScreenCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToScreenCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToScreenCoordinates(arg0))

    @overload
    def collapseAll(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Tree.collapseAll()"""
        super(Tree, self).collapseAll()

    @override
    @overload
    def clear(self):
        """public void com.badlogic.gdx.scenes.scene2d.Group.clear()"""
        super(scene2d.Group, self).clear()

    @overload
    def removeActor(self, arg0: 'Actor', arg1: bool) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.removeActor(com.badlogic.gdx.scenes.scene2d.Actor,boolean)"""
        return bool.__wrap(super(__scene2d.Group, self).removeActor(arg0, __boolean.valueOf(arg1)))

    @override
    @overload
    def setTouchable(self, arg0: 'Touchable'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setTouchable(com.badlogic.gdx.scenes.scene2d.Touchable)"""
        super(__scene2d.Actor, self).setTouchable(arg0)

    @overload
    def addCaptureListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.addCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).addCaptureListener(arg0))

    @overload
    def fire(self, arg0: 'Event') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.fire(com.badlogic.gdx.scenes.scene2d.Event)"""
        return bool.__wrap(super(__scene2d.Actor, self).fire(arg0))

    @overload
    def getIndentSpacing(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Tree.getIndentSpacing()"""
        return float.__wrap(super(Tree, self).getIndentSpacing())

    @override
    @overload
    def remove(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.remove()"""
        return bool.__wrap(super(scene2d.Actor, self).remove())

    @overload
    def hit(self, arg0: float, arg1: float, arg2: bool) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.hit(float,float,boolean)"""
        return 'scene2d.Actor'.__wrap(super(__WidgetGroup, self).hit(__float.valueOf(arg0), __float.valueOf(arg1), __boolean.valueOf(arg2)))

    @overload
    def __init__(self, arg0: 'TreeStyle'):
        """public com.badlogic.gdx.scenes.scene2d.ui.Tree(com.badlogic.gdx.scenes.scene2d.ui.Tree$TreeStyle)"""
        val = __Tree(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def clearChildren(self):
        """public void com.badlogic.gdx.scenes.scene2d.Group.clearChildren()"""
        super(scene2d.Group, self).clearChildren()

    @override
    @overload
    def getPrefWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Tree.getPrefWidth()"""
        return float.__wrap(super(Tree, self).getPrefWidth())

    @overload
    def localToParentCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToParentCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToParentCoordinates(arg0))

    @override
    @overload
    def setCullingArea(self, arg0: 'Rectangle'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.setCullingArea(com.badlogic.gdx.math.Rectangle)"""
        super(__scene2d.Group, self).setCullingArea(arg0)

    @override
    @overload
    def getName(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.Actor.getName()"""
        return str.__wrap(super(scene2d.Actor, self).getName())

    @override
    @overload
    def isVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).isVisible())

    @overload
    def getNodeAt(self, arg0: float) -> 'Node':
        """public N com.badlogic.gdx.scenes.scene2d.ui.Tree.getNodeAt(float)"""
        return 'Node'.__wrap(super(__Tree, self).getNodeAt(__float.valueOf(arg0)))

    @override
    @overload
    def getCaptureListeners(self) -> 'utils.DelayedRemovalArray':
        """public com.badlogic.gdx.utils.DelayedRemovalArray<com.badlogic.gdx.scenes.scene2d.EventListener> com.badlogic.gdx.scenes.scene2d.Actor.getCaptureListeners()"""
        return 'utils.DelayedRemovalArray'.__wrap(super(scene2d.Actor, self).getCaptureListeners())

    @override
    @overload
    def debug(self) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.Actor.debug()"""
        return 'scene2d.Actor'.__wrap(super(scene2d.Actor, self).debug())

    @override
    @overload
    def clear(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Group.clear(boolean)"""
        super(__scene2d.Group, self).clear(__boolean.valueOf(arg0))

    @override
    @overload
    def getTop(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getTop()"""
        return float.__wrap(super(scene2d.Actor, self).getTop())

    @override
    @overload
    def setY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setY(float)"""
        super(__scene2d.Actor, self).setY(__float.valueOf(arg0))

    @overload
    def getSelectedNode(self) -> 'Node':
        """public N com.badlogic.gdx.scenes.scene2d.ui.Tree.getSelectedNode()"""
        return 'Node'.__wrap(super(Tree, self).getSelectedNode())

    @override
    @overload
    def clearActions(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clearActions()"""
        super(scene2d.Actor, self).clearActions()

    @override
    @overload
    def addActorAfter(self, arg0: 'Actor', arg1: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.addActorAfter(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__scene2d.Group, self).addActorAfter(arg0, arg1)

    @override
    @overload
    def draw(self, arg0: 'Batch', arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Tree.draw(com.badlogic.gdx.graphics.g2d.Batch,float)"""
        super(__Tree, self).draw(arg0, __float.valueOf(arg1))

    @override
    @overload
    def scaleBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.scaleBy(float,float)"""
        super(__scene2d.Actor, self).scaleBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def setRotation(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setRotation(float)"""
        super(__scene2d.Actor, self).setRotation(__float.valueOf(arg0))

    @override
    @overload
    def getScaleX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getScaleX()"""
        return float.__wrap(super(scene2d.Actor, self).getScaleX())

    @overload
    def firstAscendant(self, arg0: 'Class') -> 'scene2d.Actor':
        """public <T extends com.badlogic.gdx.scenes.scene2d.Actor> T com.badlogic.gdx.scenes.scene2d.Actor.firstAscendant(java.lang.Class<T>)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Actor, self).firstAscendant(arg0))

    @overload
    def notify(self, arg0: 'Event', arg1: bool) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.notify(com.badlogic.gdx.scenes.scene2d.Event,boolean)"""
        return bool.__wrap(super(__scene2d.Actor, self).notify(arg0, __boolean.valueOf(arg1)))

    @override
    @overload
    def act(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Group.act(float)"""
        super(__scene2d.Group, self).act(__float.valueOf(arg0))

    @override
    @overload
    def setUserObject(self, arg0: object):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setUserObject(java.lang.Object)"""
        super(__scene2d.Actor, self).setUserObject(arg0)

    @override
    @overload
    def setScaleY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScaleY(float)"""
        super(__scene2d.Actor, self).setScaleY(__float.valueOf(arg0))

    @override
    @overload
    def hasScrollFocus(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasScrollFocus()"""
        return bool.__wrap(super(scene2d.Actor, self).hasScrollFocus())

    @override
    @overload
    def toFront(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.toFront()"""
        super(scene2d.Actor, self).toFront()

    @overload
    def __init__(self, arg0: 'Skin', arg1: str):
        """public com.badlogic.gdx.scenes.scene2d.ui.Tree(com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String)"""
        val = __Tree(arg0, arg1)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def layout(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Tree.layout()"""
        super(Tree, self).layout()

    @override
    @overload
    def scaleBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.scaleBy(float)"""
        super(__scene2d.Actor, self).scaleBy(__float.valueOf(arg0))

    @overload
    def stageToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.stageToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).stageToLocalCoordinates(arg0))

    @overload
    def setPadding(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Tree.setPadding(float)"""
        super(__Tree, self).setPadding(__float.valueOf(arg0))

    @overload
    def getSelection(self) -> 'utils.Selection':
        """public com.badlogic.gdx.scenes.scene2d.utils.Selection<N> com.badlogic.gdx.scenes.scene2d.ui.Tree.getSelection()"""
        return 'utils.Selection'.__wrap(super(Tree, self).getSelection())

    @overload
    def swapActor(self, arg0: int, arg1: int) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.swapActor(int,int)"""
        return bool.__wrap(super(__scene2d.Group, self).swapActor(__int.valueOf(arg0), __int.valueOf(arg1)))

    @override
    @overload
    def getOriginX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getOriginX()"""
        return float.__wrap(super(scene2d.Actor, self).getOriginX())

    @overload
    def getChild(self, arg0: int) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.Group.getChild(int)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Group, self).getChild(__int.valueOf(arg0)))

    @override
    @overload
    def hasChildren(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.hasChildren()"""
        return bool.__wrap(super(scene2d.Group, self).hasChildren())

    @override
    @overload
    def ascendantsVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.ascendantsVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).ascendantsVisible())

    @overload
    def removeActor(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.removeActor(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Group, self).removeActor(arg0))

    @overload
    def setPadding(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Tree.setPadding(float,float)"""
        super(__Tree, self).setPadding(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def getColor(self) -> 'graphics.Color':
        """public com.badlogic.gdx.graphics.Color com.badlogic.gdx.scenes.scene2d.Actor.getColor()"""
        return 'graphics.Color'.__wrap(super(scene2d.Actor, self).getColor())

    @overload
    def findNode(self, arg0: object) -> 'Node':
        """public N com.badlogic.gdx.scenes.scene2d.ui.Tree.findNode(V)"""
        return 'Node'.__wrap(super(__Tree, self).findNode(arg0))

    @override
    @overload
    def isTransform(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.isTransform()"""
        return bool.__wrap(super(scene2d.Group, self).isTransform())

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @override
    @overload
    def getStage(self) -> 'scene2d.Stage':
        """public com.badlogic.gdx.scenes.scene2d.Stage com.badlogic.gdx.scenes.scene2d.Actor.getStage()"""
        return 'scene2d.Stage'.__wrap(super(scene2d.Actor, self).getStage())

    @override
    @overload
    def addAction(self, arg0: 'Action'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.addAction(com.badlogic.gdx.scenes.scene2d.Action)"""
        super(__scene2d.Actor, self).addAction(arg0)

    @override
    @overload
    def setColor(self, arg0: float, arg1: float, arg2: float, arg3: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setColor(float,float,float,float)"""
        super(__scene2d.Actor, self).setColor(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3))

    @override
    @overload
    def isTouchable(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchable()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchable())

    @overload
    def setIconSpacing(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Tree.setIconSpacing(float,float)"""
        super(__Tree, self).setIconSpacing(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def localToAscendantCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToAscendantCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToAscendantCoordinates(arg0, arg1))

    @overload
    def clipBegin(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.clipBegin(float,float,float,float)"""
        return bool.__wrap(super(__scene2d.Actor, self).clipBegin(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3)))

    @override
    @overload
    def getActions(self) -> 'utils.Array':
        """public com.badlogic.gdx.utils.Array<com.badlogic.gdx.scenes.scene2d.Action> com.badlogic.gdx.scenes.scene2d.Actor.getActions()"""
        return 'utils.Array'.__wrap(super(scene2d.Actor, self).getActions()) 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.Value
from pyquantum_helper import import_once as __import_once__
try:
    from pygdx.scenes import scene2d
except ImportError:
    scene2d = __import_once__("pygdx.scenes.scene2d")

from builtins import str
from pyquantum_helper import override
import java.lang.Object as __object
from builtins import type
from builtins import float
from abc import abstractmethod, ABC
import java.lang.Long as __long
import java.lang.Float as __float
import java.lang.Class as __Class
__Class = __Class
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import com.badlogic.gdx.scenes.scene2d.ui.Value as __Value
__Value = __Value
import java.lang.Integer as __int
from builtins import bool
from builtins import int
 
class Value(ABC):
    """com.badlogic.gdx.scenes.scene2d.ui.Value"""
 
    @staticmethod
    def __wrap(java_value: __Value) -> 'Value':
        return Value(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Value):
        """
        Dynamic initializer for Value.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.lang.Object.toString()"""
        return str.__wrap(super(object, self).toString())

    @staticmethod
    @overload
    def percentHeight(arg0: float, arg1: 'Actor') -> 'Value':
        """public static com.badlogic.gdx.scenes.scene2d.ui.Value com.badlogic.gdx.scenes.scene2d.ui.Value.percentHeight(float,com.badlogic.gdx.scenes.scene2d.Actor)"""
        return Value.__wrap(__Value.percentHeight(__float.valueOf(arg0), arg1))

    @overload
    def __init__(self, ):
        """public com.badlogic.gdx.scenes.scene2d.ui.Value()"""
        val = __Value()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def percentHeight(arg0: float) -> 'Value':
        """public static com.badlogic.gdx.scenes.scene2d.ui.Value com.badlogic.gdx.scenes.scene2d.ui.Value.percentHeight(float)"""
        return Value.__wrap(__Value.percentHeight(__float.valueOf(arg0)))

    @abstractmethod
    def get(self, arg0: 'Actor'):
        """public abstract float com.badlogic.gdx.scenes.scene2d.ui.Value.get(com.badlogic.gdx.scenes.scene2d.Actor)"""
        pass

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def get(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Value.get()"""
        return float.__wrap(super(Value, self).get())

    @staticmethod
    @overload
    def percentWidth(arg0: float) -> 'Value':
        """public static com.badlogic.gdx.scenes.scene2d.ui.Value com.badlogic.gdx.scenes.scene2d.ui.Value.percentWidth(float)"""
        return Value.__wrap(__Value.percentWidth(__float.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @overload
    def __init__(self):
        """public com.badlogic.gdx.scenes.scene2d.ui.Value()"""
        val = __Value()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def percentWidth(arg0: float, arg1: 'Actor') -> 'Value':
        """public static com.badlogic.gdx.scenes.scene2d.ui.Value com.badlogic.gdx.scenes.scene2d.ui.Value.percentWidth(float,com.badlogic.gdx.scenes.scene2d.Actor)"""
        return Value.__wrap(__Value.percentWidth(__float.valueOf(arg0), arg1))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0)) 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxStyle
from pyquantum_helper import import_once as __import_once__
import com.badlogic.gdx.scenes.scene2d.ui.SelectBox as __SelectBox_SelectBoxStyle
__SelectBoxStyle = __SelectBox_SelectBoxStyle.SelectBoxStyle
from builtins import str
try:
    from pygdx.scenes.scene2d import utils
except ImportError:
    utils = __import_once__("pygdx.scenes.scene2d.utils")

from pyquantum_helper import override
import java.lang.Object as __object
try:
    from pygdx.graphics import g2d
except ImportError:
    g2d = __import_once__("pygdx.graphics.g2d")

from builtins import type
import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import java.lang.Integer as __int
from builtins import bool
try:
    from pygdx import graphics
except ImportError:
    graphics = __import_once__("pygdx.graphics")

from builtins import int
 
class SelectBoxStyle():
    """com.badlogic.gdx.scenes.scene2d.ui.SelectBox.SelectBoxStyle"""
 
    @staticmethod
    def __wrap(java_value: __SelectBoxStyle) -> 'SelectBoxStyle':
        return SelectBoxStyle(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __SelectBoxStyle):
        """
        Dynamic initializer for SelectBoxStyle.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def __init__(self, arg0: 'SelectBoxStyle'):
        """public com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxStyle(com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxStyle)"""
        val = __SelectBoxStyle(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.lang.Object.toString()"""
        return str.__wrap(super(object, self).toString())

    @overload
    def __init__(self, arg0: 'BitmapFont', arg1: 'Color', arg2: 'Drawable', arg3: 'ScrollPaneStyle', arg4: 'ListStyle'):
        """public com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxStyle(com.badlogic.gdx.graphics.g2d.BitmapFont,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$ScrollPaneStyle,com.badlogic.gdx.scenes.scene2d.ui.List$ListStyle)"""
        val = __SelectBoxStyle(arg0, arg1, arg2, arg3, arg4)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def __init__(self, ):
        """public com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxStyle()"""
        val = __SelectBoxStyle()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0))

    @overload
    def __init__(self):
        """public com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxStyle()"""
        val = __SelectBoxStyle()
        self.__dict__ = val.__dict__
        self.__wrapper = val 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.CheckBox$CheckBoxStyle
from pyquantum_helper import import_once as __import_once__
from builtins import str
try:
    from pygdx.scenes.scene2d import utils
except ImportError:
    utils = __import_once__("pygdx.scenes.scene2d.utils")

from pyquantum_helper import override
import java.lang.Object as __object
try:
    from pygdx.graphics import g2d
except ImportError:
    g2d = __import_once__("pygdx.graphics.g2d")

from builtins import type
import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import com.badlogic.gdx.scenes.scene2d.ui.CheckBox as __CheckBox_CheckBoxStyle
__CheckBoxStyle = __CheckBox_CheckBoxStyle.CheckBoxStyle
import java.lang.Integer as __int
from builtins import bool
try:
    from pygdx import graphics
except ImportError:
    graphics = __import_once__("pygdx.graphics")

from builtins import int
 
class CheckBoxStyle(__TextButtonStyle, TextButtonStyle):
    """com.badlogic.gdx.scenes.scene2d.ui.CheckBox.CheckBoxStyle"""
 
    @staticmethod
    def __wrap(java_value: __CheckBoxStyle) -> 'CheckBoxStyle':
        return CheckBoxStyle(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __CheckBoxStyle):
        """
        Dynamic initializer for CheckBoxStyle.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.lang.Object.toString()"""
        return str.__wrap(super(object, self).toString())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def __init__(self, arg0: 'Drawable', arg1: 'Drawable', arg2: 'BitmapFont', arg3: 'Color'):
        """public com.badlogic.gdx.scenes.scene2d.ui.CheckBox$CheckBoxStyle(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.graphics.g2d.BitmapFont,com.badlogic.gdx.graphics.Color)"""
        val = __CheckBoxStyle(arg0, arg1, arg2, arg3)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def __init__(self, arg0: 'CheckBoxStyle'):
        """public com.badlogic.gdx.scenes.scene2d.ui.CheckBox$CheckBoxStyle(com.badlogic.gdx.scenes.scene2d.ui.CheckBox$CheckBoxStyle)"""
        val = __CheckBoxStyle(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @overload
    def __init__(self, ):
        """public com.badlogic.gdx.scenes.scene2d.ui.CheckBox$CheckBoxStyle()"""
        val = __CheckBoxStyle()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def __init__(self):
        """public com.badlogic.gdx.scenes.scene2d.ui.CheckBox$CheckBoxStyle()"""
        val = __CheckBoxStyle()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0)) 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.Dialog
from pyquantum_helper import import_once as __import_once__
import com.badlogic.gdx.scenes.scene2d.Touchable as __Touchable
__Touchable = __Touchable
try:
    from pygdx.scenes import scene2d
except ImportError:
    scene2d = __import_once__("pygdx.scenes.scene2d")

import com.badlogic.gdx.graphics.Color as __Color
__Color = __Color
import java.lang.Boolean as __boolean
import com.badlogic.gdx.scenes.scene2d.ui.Window as __Window
__Window = __Window
try:
    from pygdx.graphics import g2d
except ImportError:
    g2d = __import_once__("pygdx.graphics.g2d")

from builtins import type
import com.badlogic.gdx.scenes.scene2d.Group as __Group
__Group = __Group
import com.badlogic.gdx.scenes.scene2d.ui.Table as __Table
__Table = __Table
import com.badlogic.gdx.scenes.scene2d.ui.Cell as __Cell
__Cell = __Cell
import com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup as __WidgetGroup
__WidgetGroup = __WidgetGroup
import com.badlogic.gdx.math.Vector2 as __Vector2
__Vector2 = __Vector2
import com.badlogic.gdx.scenes.scene2d.ui.Dialog as __Dialog
__Dialog = __Dialog
import com.badlogic.gdx.scenes.scene2d.ui.Table as __Table_Debug
__Debug = __Table_Debug.Debug
import com.badlogic.gdx.math.Rectangle as __Rectangle
__Rectangle = __Rectangle
import java.lang.Class as __Class
__Class = __Class
import com.badlogic.gdx.utils.Array as __Array
__Array = __Array
import java.lang.String as __string
try:
    from pygdx import math
except ImportError:
    math = __import_once__("pygdx.math")

from builtins import bool
import com.badlogic.gdx.scenes.scene2d.ui.Window as __Window_WindowStyle
__WindowStyle = __Window_WindowStyle.WindowStyle
from builtins import str
import java.lang.CharSequence as CharSequence
try:
    from pygdx.scenes.scene2d import utils
except ImportError:
    utils = __import_once__("pygdx.scenes.scene2d.utils")

try:
    from pygdx import utils
except ImportError:
    utils = __import_once__("pygdx.utils")

from pyquantum_helper import override
import java.lang.Object as __object
from builtins import float
from builtins import object
import com.badlogic.gdx.utils.DelayedRemovalArray as __DelayedRemovalArray
__DelayedRemovalArray = __DelayedRemovalArray
import java.lang.Long as __long
import java.lang.Float as __float
import java.lang.String as __String
__String = __String
try:
    from pygdx.graphics import glutils
except ImportError:
    glutils = __import_once__("pygdx.graphics.glutils")

import com.badlogic.gdx.scenes.scene2d.ui.Skin as __Skin
__Skin = __Skin
import java.lang.Object as __Object
__Object = __Object
import com.badlogic.gdx.utils.SnapshotArray as __SnapshotArray
__SnapshotArray = __SnapshotArray
import com.badlogic.gdx.scenes.scene2d.Actor as __Actor
__Actor = __Actor
import java.lang.Integer as __int
import com.badlogic.gdx.scenes.scene2d.ui.Value as __Value
__Value = __Value
import com.badlogic.gdx.scenes.scene2d.Stage as __Stage
__Stage = __Stage
import com.badlogic.gdx.scenes.scene2d.ui.Label as __Label
__Label = __Label
try:
    from pygdx import graphics
except ImportError:
    graphics = __import_once__("pygdx.graphics")

import com.badlogic.gdx.scenes.scene2d.utils.Drawable as __Drawable
__Drawable = __Drawable
from builtins import int
 
class Dialog(__Window, Window):
    """com.badlogic.gdx.scenes.scene2d.ui.Dialog"""
 
    @staticmethod
    def __wrap(java_value: __Dialog) -> 'Dialog':
        return Dialog(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Dialog):
        """
        Dynamic initializer for Dialog.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def getColumnPrefWidth(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getColumnPrefWidth(int)"""
        return float.__wrap(super(__Table, self).getColumnPrefWidth(__int.valueOf(arg0)))

    @override
    @overload
    def getY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getY()"""
        return float.__wrap(super(scene2d.Actor, self).getY())

    @override
    @overload
    def setResizable(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Window.setResizable(boolean)"""
        super(__Window, self).setResizable(__boolean.valueOf(arg0))

    @override
    @overload
    def setBounds(self, arg0: float, arg1: float, arg2: float, arg3: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setBounds(float,float,float,float)"""
        super(__scene2d.Actor, self).setBounds(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def add(self, arg0: 'CharSequence', arg1: str, arg2: str) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<com.badlogic.gdx.scenes.scene2d.ui.Label> com.badlogic.gdx.scenes.scene2d.ui.Table.add(java.lang.CharSequence,java.lang.String,java.lang.String)"""
        return 'Cell'.__wrap(super(__Table, self).add(arg0, arg1, arg2))

    @override
    @overload
    def isModal(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Window.isModal()"""
        return bool.__wrap(super(Window, self).isModal())

    @overload
    def findActor(self, arg0: str) -> 'scene2d.Actor':
        """public <T extends com.badlogic.gdx.scenes.scene2d.Actor> T com.badlogic.gdx.scenes.scene2d.Group.findActor(java.lang.String)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Group, self).findActor(arg0))

    @overload
    def removeActor(self, arg0: 'Actor', arg1: bool) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Table.removeActor(com.badlogic.gdx.scenes.scene2d.Actor,boolean)"""
        return bool.__wrap(super(__Table, self).removeActor(arg0, __boolean.valueOf(arg1)))

    @override
    @overload
    def getTouchable(self) -> 'scene2d.Touchable':
        """public com.badlogic.gdx.scenes.scene2d.Touchable com.badlogic.gdx.scenes.scene2d.Actor.getTouchable()"""
        return 'scene2d.Touchable'.__wrap(super(scene2d.Actor, self).getTouchable())

    @override
    @overload
    def removeAction(self, arg0: 'Action'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.removeAction(com.badlogic.gdx.scenes.scene2d.Action)"""
        super(__scene2d.Actor, self).removeAction(arg0)

    @override
    @overload
    def getPadTop(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getPadTop()"""
        return float.__wrap(super(Table, self).getPadTop())

    @override
    @overload
    def drawDebug(self, arg0: 'ShapeRenderer'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.drawDebug(com.badlogic.gdx.graphics.glutils.ShapeRenderer)"""
        super(__Table, self).drawDebug(arg0)

    @overload
    def hide(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Dialog.hide()"""
        super(Dialog, self).hide()

    @overload
    def padRight(self, arg0: 'Value') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padRight(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Table'.__wrap(super(__Table, self).padRight(arg0))

    @override
    @overload
    def getMaxWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.getMaxWidth()"""
        return float.__wrap(super(WidgetGroup, self).getMaxWidth())

    @overload
    def button(self, arg0: 'Button') -> 'Dialog':
        """public com.badlogic.gdx.scenes.scene2d.ui.Dialog com.badlogic.gdx.scenes.scene2d.ui.Dialog.button(com.badlogic.gdx.scenes.scene2d.ui.Button)"""
        return 'Dialog'.__wrap(super(__Dialog, self).button(arg0))

    @override
    @overload
    def setX(self, arg0: float, arg1: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setX(float,int)"""
        super(__scene2d.Actor, self).setX(__float.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def reset(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.reset()"""
        super(Table, self).reset()

    @override
    @overload
    def getListeners(self) -> 'utils.DelayedRemovalArray':
        """public com.badlogic.gdx.utils.DelayedRemovalArray<com.badlogic.gdx.scenes.scene2d.EventListener> com.badlogic.gdx.scenes.scene2d.Actor.getListeners()"""
        return 'utils.DelayedRemovalArray'.__wrap(super(scene2d.Actor, self).getListeners())

    @overload
    def removeListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.removeListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).removeListener(arg0))

    @override
    @overload
    def isTouchFocusListener(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchFocusListener()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchFocusListener())

    @overload
    def localToStageCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToStageCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToStageCoordinates(arg0))

    @override
    @overload
    def clipBegin(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.clipBegin()"""
        return bool.__wrap(super(scene2d.Actor, self).clipBegin())

    @override
    @overload
    def moveBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.moveBy(float,float)"""
        super(__scene2d.Actor, self).moveBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def isResizable(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Window.isResizable()"""
        return bool.__wrap(super(Window, self).isResizable())

    @overload
    def pad(self, arg0: float) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.pad(float)"""
        return 'Table'.__wrap(super(__Table, self).pad(__float.valueOf(arg0)))

    @override
    @overload
    def setName(self, arg0: str):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setName(java.lang.String)"""
        super(__scene2d.Actor, self).setName(arg0)

    @override
    @overload
    def getStyle(self) -> 'WindowStyle':
        """public com.badlogic.gdx.scenes.scene2d.ui.Window$WindowStyle com.badlogic.gdx.scenes.scene2d.ui.Window.getStyle()"""
        return 'WindowStyle'.__wrap(super(Window, self).getStyle())

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @override
    @overload
    def setMovable(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Window.setMovable(boolean)"""
        super(__Window, self).setMovable(__boolean.valueOf(arg0))

    @overload
    def getRowMinHeight(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getRowMinHeight(int)"""
        return float.__wrap(super(__Table, self).getRowMinHeight(__int.valueOf(arg0)))

    @overload
    def swapActor(self, arg0: 'Actor', arg1: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.swapActor(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Group, self).swapActor(arg0, arg1))

    @overload
    def __init__(self, arg0: str, arg1: 'Skin', arg2: str):
        """public com.badlogic.gdx.scenes.scene2d.ui.Dialog(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String)"""
        val = __Dialog(arg0, arg1, arg2)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def getPadX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getPadX()"""
        return float.__wrap(super(Table, self).getPadX())

    @override
    @overload
    def setStyle(self, arg0: 'WindowStyle'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Window.setStyle(com.badlogic.gdx.scenes.scene2d.ui.Window$WindowStyle)"""
        super(__Window, self).setStyle(arg0)

    @override
    @overload
    def clearChildren(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.clearChildren(boolean)"""
        super(__Table, self).clearChildren(__boolean.valueOf(arg0))

    @override
    @overload
    def getDebug(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.getDebug()"""
        return bool.__wrap(super(scene2d.Actor, self).getDebug())

    @override
    @overload
    def setHeight(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setHeight(float)"""
        super(__scene2d.Actor, self).setHeight(__float.valueOf(arg0))

    @override
    @overload
    def setScale(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScale(float)"""
        super(__scene2d.Actor, self).setScale(__float.valueOf(arg0))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @overload
    def button(self, arg0: str, arg1: object, arg2: 'TextButtonStyle') -> 'Dialog':
        """public com.badlogic.gdx.scenes.scene2d.ui.Dialog com.badlogic.gdx.scenes.scene2d.ui.Dialog.button(java.lang.String,java.lang.Object,com.badlogic.gdx.scenes.scene2d.ui.TextButton$TextButtonStyle)"""
        return 'Dialog'.__wrap(super(__Dialog, self).button(arg0, arg1, arg2))

    @overload
    def add(self, arg0: 'CharSequence') -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<com.badlogic.gdx.scenes.scene2d.ui.Label> com.badlogic.gdx.scenes.scene2d.ui.Table.add(java.lang.CharSequence)"""
        return 'Cell'.__wrap(super(__Table, self).add(arg0))

    @overload
    def padBottom(self, arg0: float) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padBottom(float)"""
        return 'Table'.__wrap(super(__Table, self).padBottom(__float.valueOf(arg0)))

    @override
    @overload
    def setDebug(self, arg0: bool, arg1: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Group.setDebug(boolean,boolean)"""
        super(__scene2d.Group, self).setDebug(__boolean.valueOf(arg0), __boolean.valueOf(arg1))

    @override
    @overload
    def getPrefWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Window.getPrefWidth()"""
        return float.__wrap(super(Window, self).getPrefWidth())

    @override
    @overload
    def row(self) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell com.badlogic.gdx.scenes.scene2d.ui.Table.row()"""
        return 'Cell'.__wrap(super(Table, self).row())

    @overload
    def background(self, arg0: 'Drawable') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.background(com.badlogic.gdx.scenes.scene2d.utils.Drawable)"""
        return 'Table'.__wrap(super(__Table, self).background(arg0))

    @override
    @overload
    def setTransform(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Group.setTransform(boolean)"""
        super(__scene2d.Group, self).setTransform(__boolean.valueOf(arg0))

    @overload
    def parentToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.parentToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).parentToLocalCoordinates(arg0))

    @override
    @overload
    def getRotation(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getRotation()"""
        return float.__wrap(super(scene2d.Actor, self).getRotation())

    @override
    @overload
    def getMaxHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.getMaxHeight()"""
        return float.__wrap(super(WidgetGroup, self).getMaxHeight())

    @overload
    def padTop(self, arg0: float) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padTop(float)"""
        return 'Table'.__wrap(super(__Table, self).padTop(__float.valueOf(arg0)))

    @overload
    def __init__(self, arg0: str, arg1: 'WindowStyle'):
        """public com.badlogic.gdx.scenes.scene2d.ui.Dialog(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Window$WindowStyle)"""
        val = __Dialog(arg0, arg1)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def getTitleTable(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Window.getTitleTable()"""
        return 'Table'.__wrap(super(Window, self).getTitleTable())

    @overload
    def padLeft(self, arg0: 'Value') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padLeft(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Table'.__wrap(super(__Table, self).padLeft(arg0))

    @override
    @overload
    def addActor(self, arg0: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.addActor(com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__scene2d.Group, self).addActor(arg0)

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def getBackground(self) -> 'utils.Drawable':
        """public com.badlogic.gdx.scenes.scene2d.utils.Drawable com.badlogic.gdx.scenes.scene2d.ui.Table.getBackground()"""
        return 'utils.Drawable'.__wrap(super(Table, self).getBackground())

    @overload
    def pad(self, arg0: float, arg1: float, arg2: float, arg3: float) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.pad(float,float,float,float)"""
        return 'Table'.__wrap(super(__Table, self).pad(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3)))

    @overload
    def add(self, arg0: 'CharSequence', arg1: str) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<com.badlogic.gdx.scenes.scene2d.ui.Label> com.badlogic.gdx.scenes.scene2d.ui.Table.add(java.lang.CharSequence,java.lang.String)"""
        return 'Cell'.__wrap(super(__Table, self).add(arg0, arg1))

    @override
    @overload
    def getRows(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.ui.Table.getRows()"""
        return int.__wrap(super(Table, self).getRows())

    @override
    @overload
    def setWidth(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setWidth(float)"""
        super(__scene2d.Actor, self).setWidth(__float.valueOf(arg0))

    @override
    @overload
    def isTouchFocusTarget(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchFocusTarget()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchFocusTarget())

    @override
    @overload
    def setModal(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Window.setModal(boolean)"""
        super(__Window, self).setModal(__boolean.valueOf(arg0))

    @override
    @overload
    def setPosition(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setPosition(float,float)"""
        super(__scene2d.Actor, self).setPosition(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def setClip(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.setClip(boolean)"""
        super(__Table, self).setClip(__boolean.valueOf(arg0))

    @override
    @overload
    def addActorAt(self, arg0: int, arg1: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.addActorAt(int,com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__scene2d.Group, self).addActorAt(__int.valueOf(arg0), arg1)

    @override
    @overload
    def setOriginY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOriginY(float)"""
        super(__scene2d.Actor, self).setOriginY(__float.valueOf(arg0))

    @override
    @overload
    def getPadY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getPadY()"""
        return float.__wrap(super(Table, self).getPadY())

    @override
    @overload
    def getPadRight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getPadRight()"""
        return float.__wrap(super(Table, self).getPadRight())

    @overload
    def localToScreenCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToScreenCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToScreenCoordinates(arg0))

    @override
    @overload
    def clear(self):
        """public void com.badlogic.gdx.scenes.scene2d.Group.clear()"""
        super(scene2d.Group, self).clear()

    @overload
    def stack(self, *arg0: 'scene2d.Actor') -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<com.badlogic.gdx.scenes.scene2d.ui.Stack> com.badlogic.gdx.scenes.scene2d.ui.Table.stack(com.badlogic.gdx.scenes.scene2d.Actor...)"""
        return 'Cell'.__wrap(super(__Table, self).stack(arg0))

    @override
    @overload
    def setTouchable(self, arg0: 'Touchable'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setTouchable(com.badlogic.gdx.scenes.scene2d.Touchable)"""
        super(__scene2d.Actor, self).setTouchable(arg0)

    @override
    @overload
    def add(self) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell com.badlogic.gdx.scenes.scene2d.ui.Table.add()"""
        return 'Cell'.__wrap(super(Table, self).add())

    @overload
    def getColumnWidth(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getColumnWidth(int)"""
        return float.__wrap(super(__Table, self).getColumnWidth(__int.valueOf(arg0)))

    @override
    @overload
    def clearChildren(self):
        """public void com.badlogic.gdx.scenes.scene2d.Group.clearChildren()"""
        super(scene2d.Group, self).clearChildren()

    @override
    @overload
    def debugAll(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.debugAll()"""
        return 'Table'.__wrap(super(Table, self).debugAll())

    @overload
    def localToParentCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToParentCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToParentCoordinates(arg0))

    @override
    @overload
    def setCullingArea(self, arg0: 'Rectangle'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.setCullingArea(com.badlogic.gdx.math.Rectangle)"""
        super(__scene2d.Group, self).setCullingArea(arg0)

    @override
    @overload
    def getName(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.Actor.getName()"""
        return str.__wrap(super(scene2d.Actor, self).getName())

    @overload
    def button(self, arg0: str, arg1: object) -> 'Dialog':
        """public com.badlogic.gdx.scenes.scene2d.ui.Dialog com.badlogic.gdx.scenes.scene2d.ui.Dialog.button(java.lang.String,java.lang.Object)"""
        return 'Dialog'.__wrap(super(__Dialog, self).button(arg0, arg1))

    @overload
    def show(self, arg0: 'Stage', arg1: 'Action') -> 'Dialog':
        """public com.badlogic.gdx.scenes.scene2d.ui.Dialog com.badlogic.gdx.scenes.scene2d.ui.Dialog.show(com.badlogic.gdx.scenes.scene2d.Stage,com.badlogic.gdx.scenes.scene2d.Action)"""
        return 'Dialog'.__wrap(super(__Dialog, self).show(arg0, arg1))

    @override
    @overload
    def getCaptureListeners(self) -> 'utils.DelayedRemovalArray':
        """public com.badlogic.gdx.utils.DelayedRemovalArray<com.badlogic.gdx.scenes.scene2d.EventListener> com.badlogic.gdx.scenes.scene2d.Actor.getCaptureListeners()"""
        return 'utils.DelayedRemovalArray'.__wrap(super(scene2d.Actor, self).getCaptureListeners())

    @overload
    def padBottom(self, arg0: 'Value') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padBottom(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Table'.__wrap(super(__Table, self).padBottom(arg0))

    @override
    @overload
    def clear(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Group.clear(boolean)"""
        super(__scene2d.Group, self).clear(__boolean.valueOf(arg0))

    @override
    @overload
    def setY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setY(float)"""
        super(__scene2d.Actor, self).setY(__float.valueOf(arg0))

    @override
    @overload
    def isDragging(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Window.isDragging()"""
        return bool.__wrap(super(Window, self).isDragging())

    @override
    @overload
    def addActorAfter(self, arg0: 'Actor', arg1: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.addActorAfter(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__scene2d.Group, self).addActorAfter(arg0, arg1)

    @override
    @overload
    def top(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.top()"""
        return 'Table'.__wrap(super(Table, self).top())

    @override
    @overload
    def scaleBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.scaleBy(float,float)"""
        super(__scene2d.Actor, self).scaleBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def key(self, arg0: int, arg1: object) -> 'Dialog':
        """public com.badlogic.gdx.scenes.scene2d.ui.Dialog com.badlogic.gdx.scenes.scene2d.ui.Dialog.key(int,java.lang.Object)"""
        return 'Dialog'.__wrap(super(__Dialog, self).key(__int.valueOf(arg0), arg1))

    @overload
    def text(self, arg0: str, arg1: 'LabelStyle') -> 'Dialog':
        """public com.badlogic.gdx.scenes.scene2d.ui.Dialog com.badlogic.gdx.scenes.scene2d.ui.Dialog.text(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Label$LabelStyle)"""
        return 'Dialog'.__wrap(super(__Dialog, self).text(arg0, arg1))

    @overload
    def align(self, arg0: int) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.align(int)"""
        return 'Table'.__wrap(super(__Table, self).align(__int.valueOf(arg0)))

    @overload
    def notify(self, arg0: 'Event', arg1: bool) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.notify(com.badlogic.gdx.scenes.scene2d.Event,boolean)"""
        return bool.__wrap(super(__scene2d.Actor, self).notify(arg0, __boolean.valueOf(arg1)))

    @override
    @overload
    def act(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Group.act(float)"""
        super(__scene2d.Group, self).act(__float.valueOf(arg0))

    @override
    @overload
    def setUserObject(self, arg0: object):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setUserObject(java.lang.Object)"""
        super(__scene2d.Actor, self).setUserObject(arg0)

    @override
    @overload
    def hasScrollFocus(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasScrollFocus()"""
        return bool.__wrap(super(scene2d.Actor, self).hasScrollFocus())

    @override
    @overload
    def toFront(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.toFront()"""
        super(scene2d.Actor, self).toFront()

    @override
    @overload
    def scaleBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.scaleBy(float)"""
        super(__scene2d.Actor, self).scaleBy(__float.valueOf(arg0))

    @override
    @overload
    def getOriginX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getOriginX()"""
        return float.__wrap(super(scene2d.Actor, self).getOriginX())

    @overload
    def getRow(self, arg0: float) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.ui.Table.getRow(float)"""
        return int.__wrap(super(__Table, self).getRow(__float.valueOf(arg0)))

    @override
    @overload
    def getMinWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getMinWidth()"""
        return float.__wrap(super(Table, self).getMinWidth())

    @overload
    def getChild(self, arg0: int) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.Group.getChild(int)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Group, self).getChild(__int.valueOf(arg0)))

    @override
    @overload
    def getSkin(self) -> 'Skin':
        """public com.badlogic.gdx.scenes.scene2d.ui.Skin com.badlogic.gdx.scenes.scene2d.ui.Table.getSkin()"""
        return 'Skin'.__wrap(super(Table, self).getSkin())

    @override
    @overload
    def setDebug(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.setDebug(boolean)"""
        super(__Table, self).setDebug(__boolean.valueOf(arg0))

    @overload
    def pad(self, arg0: 'Value', arg1: 'Value', arg2: 'Value', arg3: 'Value') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.pad(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Table'.__wrap(super(__Table, self).pad(arg0, arg1, arg2, arg3))

    @overload
    def add(self, arg0: 'CharSequence', arg1: str, arg2: 'Color') -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<com.badlogic.gdx.scenes.scene2d.ui.Label> com.badlogic.gdx.scenes.scene2d.ui.Table.add(java.lang.CharSequence,java.lang.String,com.badlogic.gdx.graphics.Color)"""
        return 'Cell'.__wrap(super(__Table, self).add(arg0, arg1, arg2))

    @override
    @overload
    def getPadBottom(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getPadBottom()"""
        return float.__wrap(super(Table, self).getPadBottom())

    @override
    @overload
    def getStage(self) -> 'scene2d.Stage':
        """public com.badlogic.gdx.scenes.scene2d.Stage com.badlogic.gdx.scenes.scene2d.Actor.getStage()"""
        return 'scene2d.Stage'.__wrap(super(scene2d.Actor, self).getStage())

    @override
    @overload
    def addAction(self, arg0: 'Action'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.addAction(com.badlogic.gdx.scenes.scene2d.Action)"""
        super(__scene2d.Actor, self).addAction(arg0)

    @override
    @overload
    def getPadRightValue(self) -> 'Value':
        """public com.badlogic.gdx.scenes.scene2d.ui.Value com.badlogic.gdx.scenes.scene2d.ui.Table.getPadRightValue()"""
        return 'Value'.__wrap(super(Table, self).getPadRightValue())

    @override
    @overload
    def setColor(self, arg0: float, arg1: float, arg2: float, arg3: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setColor(float,float,float,float)"""
        super(__scene2d.Actor, self).setColor(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3))

    @overload
    def getColumnMinWidth(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getColumnMinWidth(int)"""
        return float.__wrap(super(__Table, self).getColumnMinWidth(__int.valueOf(arg0)))

    @overload
    def localToAscendantCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToAscendantCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToAscendantCoordinates(arg0, arg1))

    @override
    @overload
    def getActions(self) -> 'utils.Array':
        """public com.badlogic.gdx.utils.Array<com.badlogic.gdx.scenes.scene2d.Action> com.badlogic.gdx.scenes.scene2d.Actor.getActions()"""
        return 'utils.Array'.__wrap(super(scene2d.Actor, self).getActions())

    @overload
    def cancel(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Dialog.cancel()"""
        super(Dialog, self).cancel()

    @override
    @overload
    def debugTable(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.debugTable()"""
        return 'Table'.__wrap(super(Table, self).debugTable())

    @overload
    def add(self, *arg0: 'scene2d.Actor') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.add(com.badlogic.gdx.scenes.scene2d.Actor...)"""
        return 'Table'.__wrap(super(__Table, self).add(arg0))

    @override
    @overload
    def right(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.right()"""
        return 'Table'.__wrap(super(Table, self).right())

    @overload
    def localToDescendantCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Group.localToDescendantCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Group, self).localToDescendantCoordinates(arg0, arg1))

    @overload
    def padRight(self, arg0: float) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padRight(float)"""
        return 'Table'.__wrap(super(__Table, self).padRight(__float.valueOf(arg0)))

    @overload
    def setZIndex(self, arg0: int) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.setZIndex(int)"""
        return bool.__wrap(super(__scene2d.Actor, self).setZIndex(__int.valueOf(arg0)))

    @overload
    def padLeft(self, arg0: float) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padLeft(float)"""
        return 'Table'.__wrap(super(__Table, self).padLeft(__float.valueOf(arg0)))

    @override
    @overload
    def keepWithinStage(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Window.keepWithinStage()"""
        super(Window, self).keepWithinStage()

    @overload
    def getX(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getX(int)"""
        return float.__wrap(super(__scene2d.Actor, self).getX(__int.valueOf(arg0)))

    @override
    @overload
    def sizeBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.sizeBy(float)"""
        super(__scene2d.Actor, self).sizeBy(__float.valueOf(arg0))

    @override
    @overload
    def isMovable(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Window.isMovable()"""
        return bool.__wrap(super(Window, self).isMovable())

    @overload
    def hit(self, arg0: float, arg1: float, arg2: bool) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.ui.Window.hit(float,float,boolean)"""
        return 'scene2d.Actor'.__wrap(super(__Window, self).hit(__float.valueOf(arg0), __float.valueOf(arg1), __boolean.valueOf(arg2)))

    @override
    @overload
    def clip(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.clip()"""
        return 'Table'.__wrap(super(Table, self).clip())

    @overload
    def getRowPrefHeight(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getRowPrefHeight(int)"""
        return float.__wrap(super(__Table, self).getRowPrefHeight(__int.valueOf(arg0)))

    @override
    @overload
    def sizeBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.sizeBy(float,float)"""
        super(__scene2d.Actor, self).sizeBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def hasActions(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasActions()"""
        return bool.__wrap(super(scene2d.Actor, self).hasActions())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0))

    @override
    @overload
    def setScaleX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScaleX(float)"""
        super(__scene2d.Actor, self).setScaleX(__float.valueOf(arg0))

    @overload
    def removeActor(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Table.removeActor(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__Table, self).removeActor(arg0))

    @override
    @overload
    def getX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getX()"""
        return float.__wrap(super(scene2d.Actor, self).getX())

    @overload
    def text(self, arg0: str) -> 'Dialog':
        """public com.badlogic.gdx.scenes.scene2d.ui.Dialog com.badlogic.gdx.scenes.scene2d.ui.Dialog.text(java.lang.String)"""
        return 'Dialog'.__wrap(super(__Dialog, self).text(arg0))

    @override
    @overload
    def left(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.left()"""
        return 'Table'.__wrap(super(Table, self).left())

    @override
    @overload
    def center(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.center()"""
        return 'Table'.__wrap(super(Table, self).center())

    @overload
    def getButtonTable(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Dialog.getButtonTable()"""
        return 'Table'.__wrap(super(Dialog, self).getButtonTable())

    @override
    @overload
    def setBackground(self, arg0: 'Drawable'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.setBackground(com.badlogic.gdx.scenes.scene2d.utils.Drawable)"""
        super(__Table, self).setBackground(arg0)

    @overload
    def add(self, arg0: 'Actor') -> 'Cell':
        """public <T extends com.badlogic.gdx.scenes.scene2d.Actor> com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Table.add(T)"""
        return 'Cell'.__wrap(super(__Table, self).add(arg0))

    @override
    @overload
    def toBack(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.toBack()"""
        super(scene2d.Actor, self).toBack()

    @override
    @overload
    def debug(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.debug()"""
        return 'Table'.__wrap(super(Table, self).debug())

    @overload
    def hide(self, arg0: 'Action'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Dialog.hide(com.badlogic.gdx.scenes.scene2d.Action)"""
        super(__Dialog, self).hide(arg0)

    @override
    @overload
    def getClip(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Table.getClip()"""
        return bool.__wrap(super(Table, self).getClip())

    @overload
    def screenToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.screenToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).screenToLocalCoordinates(arg0))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def ancestorsVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.ancestorsVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).ancestorsVisible())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def setSize(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setSize(float,float)"""
        super(__scene2d.Actor, self).setSize(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def layout(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.layout()"""
        super(Table, self).layout()

    @override
    @overload
    def getZIndex(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.Actor.getZIndex()"""
        return int.__wrap(super(scene2d.Actor, self).getZIndex())

    @overload
    def getY(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getY(int)"""
        return float.__wrap(super(__scene2d.Actor, self).getY(__int.valueOf(arg0)))

    @override
    @overload
    def setOrigin(self, arg0: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOrigin(int)"""
        super(__scene2d.Actor, self).setOrigin(__int.valueOf(arg0))

    @override
    @overload
    def validate(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.validate()"""
        super(WidgetGroup, self).validate()

    @overload
    def isDescendantOf(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isDescendantOf(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Actor, self).isDescendantOf(arg0))

    @override
    @overload
    def addActorBefore(self, arg0: 'Actor', arg1: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.addActorBefore(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__scene2d.Group, self).addActorBefore(arg0, arg1)

    @override
    @overload
    def getParent(self) -> 'scene2d.Group':
        """public com.badlogic.gdx.scenes.scene2d.Group com.badlogic.gdx.scenes.scene2d.Actor.getParent()"""
        return 'scene2d.Group'.__wrap(super(scene2d.Actor, self).getParent())

    @override
    @overload
    def clearListeners(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clearListeners()"""
        super(scene2d.Actor, self).clearListeners()

    @overload
    def localToActorCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToActorCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToActorCoordinates(arg0, arg1))

    @overload
    def show(self, arg0: 'Stage') -> 'Dialog':
        """public com.badlogic.gdx.scenes.scene2d.ui.Dialog com.badlogic.gdx.scenes.scene2d.ui.Dialog.show(com.badlogic.gdx.scenes.scene2d.Stage)"""
        return 'Dialog'.__wrap(super(__Dialog, self).show(arg0))

    @override
    @overload
    def getTableDebug(self) -> 'Debug':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table$Debug com.badlogic.gdx.scenes.scene2d.ui.Table.getTableDebug()"""
        return 'Debug'.__wrap(super(Table, self).getTableDebug())

    @override
    @overload
    def setResizeBorder(self, arg0: int):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Window.setResizeBorder(int)"""
        super(__Window, self).setResizeBorder(__int.valueOf(arg0))

    @override
    @overload
    def setOriginX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOriginX(float)"""
        super(__scene2d.Actor, self).setOriginX(__float.valueOf(arg0))

    @overload
    def removeActorAt(self, arg0: int, arg1: bool) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.ui.Table.removeActorAt(int,boolean)"""
        return 'scene2d.Actor'.__wrap(super(__Table, self).removeActorAt(__int.valueOf(arg0), __boolean.valueOf(arg1)))

    @override
    @overload
    def getHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getHeight()"""
        return float.__wrap(super(scene2d.Actor, self).getHeight())

    @override
    @overload
    def hasKeyboardFocus(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasKeyboardFocus()"""
        return bool.__wrap(super(scene2d.Actor, self).hasKeyboardFocus())

    @override
    @overload
    def getOriginY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getOriginY()"""
        return float.__wrap(super(scene2d.Actor, self).getOriginY())

    @override
    @overload
    def pack(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.pack()"""
        super(WidgetGroup, self).pack()

    @override
    @overload
    def clipEnd(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clipEnd()"""
        super(scene2d.Actor, self).clipEnd()

    @overload
    def __init__(self, arg0: str, arg1: 'Skin'):
        """public com.badlogic.gdx.scenes.scene2d.ui.Dialog(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin)"""
        val = __Dialog(arg0, arg1)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def getUserObject(self) -> object:
        """public java.lang.Object com.badlogic.gdx.scenes.scene2d.Actor.getUserObject()"""
        return object.__wrap(super(scene2d.Actor, self).getUserObject())

    @override
    @overload
    def getTitleLabel(self) -> 'Label':
        """public com.badlogic.gdx.scenes.scene2d.ui.Label com.badlogic.gdx.scenes.scene2d.ui.Window.getTitleLabel()"""
        return 'Label'.__wrap(super(Window, self).getTitleLabel())

    @overload
    def getContentTable(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Dialog.getContentTable()"""
        return 'Table'.__wrap(super(Dialog, self).getContentTable())

    @override
    @overload
    def rotateBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.rotateBy(float)"""
        super(__scene2d.Actor, self).rotateBy(__float.valueOf(arg0))

    @overload
    def background(self, arg0: str) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.background(java.lang.String)"""
        return 'Table'.__wrap(super(__Table, self).background(arg0))

    @overload
    def setObject(self, arg0: 'Actor', arg1: object):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Dialog.setObject(com.badlogic.gdx.scenes.scene2d.Actor,java.lang.Object)"""
        super(__Dialog, self).setObject(arg0, arg1)

    @overload
    def getRowHeight(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getRowHeight(int)"""
        return float.__wrap(super(__Table, self).getRowHeight(__int.valueOf(arg0)))

    @override
    @overload
    def getPadLeftValue(self) -> 'Value':
        """public com.badlogic.gdx.scenes.scene2d.ui.Value com.badlogic.gdx.scenes.scene2d.ui.Table.getPadLeftValue()"""
        return 'Value'.__wrap(super(Table, self).getPadLeftValue())

    @override
    @overload
    def setScale(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScale(float,float)"""
        super(__scene2d.Actor, self).setScale(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def addListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.addListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).addListener(arg0))

    @override
    @overload
    def setRound(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.setRound(boolean)"""
        super(__Table, self).setRound(__boolean.valueOf(arg0))

    @overload
    def debug(self, arg0: 'Debug') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.debug(com.badlogic.gdx.scenes.scene2d.ui.Table$Debug)"""
        return 'Table'.__wrap(super(__Table, self).debug(arg0))

    @overload
    def clip(self, arg0: bool) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.clip(boolean)"""
        return 'Table'.__wrap(super(__Table, self).clip(__boolean.valueOf(arg0)))

    @override
    @overload
    def invalidate(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.invalidate()"""
        super(Table, self).invalidate()

    @override
    @overload
    def getPadLeft(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getPadLeft()"""
        return float.__wrap(super(Table, self).getPadLeft())

    @override
    @overload
    def setVisible(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setVisible(boolean)"""
        super(__scene2d.Actor, self).setVisible(__boolean.valueOf(arg0))

    @override
    @overload
    def setY(self, arg0: float, arg1: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setY(float,int)"""
        super(__scene2d.Actor, self).setY(__float.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def setFillParent(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.setFillParent(boolean)"""
        super(__WidgetGroup, self).setFillParent(__boolean.valueOf(arg0))

    @override
    @overload
    def setKeepWithinStage(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Window.setKeepWithinStage(boolean)"""
        super(__Window, self).setKeepWithinStage(__boolean.valueOf(arg0))

    @overload
    def getCell(self, arg0: 'Actor') -> 'Cell':
        """public <T extends com.badlogic.gdx.scenes.scene2d.Actor> com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Table.getCell(T)"""
        return 'Cell'.__wrap(super(__Table, self).getCell(arg0))

    @override
    @overload
    def getMinHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getMinHeight()"""
        return float.__wrap(super(Table, self).getMinHeight())

    @override
    @overload
    def needsLayout(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.needsLayout()"""
        return bool.__wrap(super(WidgetGroup, self).needsLayout())

    @override
    @overload
    def setX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setX(float)"""
        super(__scene2d.Actor, self).setX(__float.valueOf(arg0))

    @override
    @overload
    def setOrigin(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOrigin(float,float)"""
        super(__scene2d.Actor, self).setOrigin(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def getCullingArea(self) -> 'math.Rectangle':
        """public com.badlogic.gdx.math.Rectangle com.badlogic.gdx.scenes.scene2d.Group.getCullingArea()"""
        return 'math.Rectangle'.__wrap(super(scene2d.Group, self).getCullingArea())

    @override
    @overload
    def getRight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getRight()"""
        return float.__wrap(super(scene2d.Actor, self).getRight())

    @overload
    def isAscendantOf(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isAscendantOf(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Actor, self).isAscendantOf(arg0))

    @override
    @overload
    def hasParent(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasParent()"""
        return bool.__wrap(super(scene2d.Actor, self).hasParent())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.Group.toString()"""
        return str.__wrap(super(scene2d.Group, self).toString())

    @override
    @overload
    def getChildren(self) -> 'utils.SnapshotArray':
        """public com.badlogic.gdx.utils.SnapshotArray<com.badlogic.gdx.scenes.scene2d.Actor> com.badlogic.gdx.scenes.scene2d.Group.getChildren()"""
        return 'utils.SnapshotArray'.__wrap(super(scene2d.Group, self).getChildren())

    @override
    @overload
    def getScaleY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getScaleY()"""
        return float.__wrap(super(scene2d.Actor, self).getScaleY())

    @overload
    def button(self, arg0: 'Button', arg1: object) -> 'Dialog':
        """public com.badlogic.gdx.scenes.scene2d.ui.Dialog com.badlogic.gdx.scenes.scene2d.ui.Dialog.button(com.badlogic.gdx.scenes.scene2d.ui.Button,java.lang.Object)"""
        return 'Dialog'.__wrap(super(__Dialog, self).button(arg0, arg1))

    @override
    @overload
    def setSkin(self, arg0: 'Skin'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.setSkin(com.badlogic.gdx.scenes.scene2d.ui.Skin)"""
        super(__Table, self).setSkin(arg0)

    @override
    @overload
    def getWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getWidth()"""
        return float.__wrap(super(scene2d.Actor, self).getWidth())

    @override
    @overload
    def setPosition(self, arg0: float, arg1: float, arg2: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setPosition(float,float,int)"""
        super(__scene2d.Actor, self).setPosition(__float.valueOf(arg0), __float.valueOf(arg1), __int.valueOf(arg2))

    @override
    @overload
    def setLayoutEnabled(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.setLayoutEnabled(boolean)"""
        super(__WidgetGroup, self).setLayoutEnabled(__boolean.valueOf(arg0))

    @overload
    def removeCaptureListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.removeCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).removeCaptureListener(arg0))

    @override
    @overload
    def invalidateHierarchy(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.invalidateHierarchy()"""
        super(WidgetGroup, self).invalidateHierarchy()

    @override
    @overload
    def setColor(self, arg0: 'Color'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setColor(com.badlogic.gdx.graphics.Color)"""
        super(__scene2d.Actor, self).setColor(arg0)

    @overload
    def addCaptureListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.addCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).addCaptureListener(arg0))

    @overload
    def fire(self, arg0: 'Event') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.fire(com.badlogic.gdx.scenes.scene2d.Event)"""
        return bool.__wrap(super(__scene2d.Actor, self).fire(arg0))

    @override
    @overload
    def getPrefHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getPrefHeight()"""
        return float.__wrap(super(Table, self).getPrefHeight())

    @overload
    def columnDefaults(self, arg0: int) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell com.badlogic.gdx.scenes.scene2d.ui.Table.columnDefaults(int)"""
        return 'Cell'.__wrap(super(__Table, self).columnDefaults(__int.valueOf(arg0)))

    @override
    @overload
    def remove(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.remove()"""
        return bool.__wrap(super(scene2d.Actor, self).remove())

    @override
    @overload
    def isVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).isVisible())

    @override
    @overload
    def defaults(self) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell com.badlogic.gdx.scenes.scene2d.ui.Table.defaults()"""
        return 'Cell'.__wrap(super(Table, self).defaults())

    @overload
    def pad(self, arg0: 'Value') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.pad(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Table'.__wrap(super(__Table, self).pad(arg0))

    @override
    @overload
    def getPadBottomValue(self) -> 'Value':
        """public com.badlogic.gdx.scenes.scene2d.ui.Value com.badlogic.gdx.scenes.scene2d.ui.Table.getPadBottomValue()"""
        return 'Value'.__wrap(super(Table, self).getPadBottomValue())

    @override
    @overload
    def draw(self, arg0: 'Batch', arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Window.draw(com.badlogic.gdx.graphics.g2d.Batch,float)"""
        super(__Window, self).draw(arg0, __float.valueOf(arg1))

    @override
    @overload
    def getTop(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getTop()"""
        return float.__wrap(super(scene2d.Actor, self).getTop())

    @override
    @overload
    def clearActions(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clearActions()"""
        super(scene2d.Actor, self).clearActions()

    @override
    @overload
    def setRotation(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setRotation(float)"""
        super(__scene2d.Actor, self).setRotation(__float.valueOf(arg0))

    @override
    @overload
    def getScaleX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getScaleX()"""
        return float.__wrap(super(scene2d.Actor, self).getScaleX())

    @override
    @overload
    def setBackground(self, arg0: str):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.setBackground(java.lang.String)"""
        super(__Table, self).setBackground(arg0)

    @overload
    def firstAscendant(self, arg0: 'Class') -> 'scene2d.Actor':
        """public <T extends com.badlogic.gdx.scenes.scene2d.Actor> T com.badlogic.gdx.scenes.scene2d.Actor.firstAscendant(java.lang.Class<T>)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Actor, self).firstAscendant(arg0))

    @override
    @overload
    def setScaleY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScaleY(float)"""
        super(__scene2d.Actor, self).setScaleY(__float.valueOf(arg0))

    @overload
    def stageToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.stageToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).stageToLocalCoordinates(arg0))

    @override
    @overload
    def bottom(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.bottom()"""
        return 'Table'.__wrap(super(Table, self).bottom())

    @overload
    def swapActor(self, arg0: int, arg1: int) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.swapActor(int,int)"""
        return bool.__wrap(super(__scene2d.Group, self).swapActor(__int.valueOf(arg0), __int.valueOf(arg1)))

    @override
    @overload
    def hasChildren(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.hasChildren()"""
        return bool.__wrap(super(scene2d.Group, self).hasChildren())

    @override
    @overload
    def ascendantsVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.ascendantsVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).ascendantsVisible())

    @override
    @overload
    def getAlign(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.ui.Table.getAlign()"""
        return int.__wrap(super(Table, self).getAlign())

    @override
    @overload
    def debugCell(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.debugCell()"""
        return 'Table'.__wrap(super(Table, self).debugCell())

    @override
    @overload
    def getColumns(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.ui.Table.getColumns()"""
        return int.__wrap(super(Table, self).getColumns())

    @override
    @overload
    def debugActor(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.debugActor()"""
        return 'Table'.__wrap(super(Table, self).debugActor())

    @overload
    def padTop(self, arg0: 'Value') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padTop(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Table'.__wrap(super(__Table, self).padTop(arg0))

    @override
    @overload
    def getColor(self) -> 'graphics.Color':
        """public com.badlogic.gdx.graphics.Color com.badlogic.gdx.scenes.scene2d.Actor.getColor()"""
        return 'graphics.Color'.__wrap(super(scene2d.Actor, self).getColor())

    @override
    @overload
    def isTransform(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.isTransform()"""
        return bool.__wrap(super(scene2d.Group, self).isTransform())

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def text(self, arg0: 'Label') -> 'Dialog':
        """public com.badlogic.gdx.scenes.scene2d.ui.Dialog com.badlogic.gdx.scenes.scene2d.ui.Dialog.text(com.badlogic.gdx.scenes.scene2d.ui.Label)"""
        return 'Dialog'.__wrap(super(__Dialog, self).text(arg0))

    @override
    @overload
    def isTouchable(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchable()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchable())

    @overload
    def clipBegin(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.clipBegin(float,float,float,float)"""
        return bool.__wrap(super(__scene2d.Actor, self).clipBegin(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3)))

    @override
    @overload
    def getCells(self) -> 'utils.Array':
        """public com.badlogic.gdx.utils.Array<com.badlogic.gdx.scenes.scene2d.ui.Cell> com.badlogic.gdx.scenes.scene2d.ui.Table.getCells()"""
        return 'utils.Array'.__wrap(super(Table, self).getCells())

    @override
    @overload
    def getPadTopValue(self) -> 'Value':
        """public com.badlogic.gdx.scenes.scene2d.ui.Value com.badlogic.gdx.scenes.scene2d.ui.Table.getPadTopValue()"""
        return 'Value'.__wrap(super(Table, self).getPadTopValue())

    @overload
    def button(self, arg0: str) -> 'Dialog':
        """public com.badlogic.gdx.scenes.scene2d.ui.Dialog com.badlogic.gdx.scenes.scene2d.ui.Dialog.button(java.lang.String)"""
        return 'Dialog'.__wrap(super(__Dialog, self).button(arg0)) 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.Window$WindowStyle
from pyquantum_helper import import_once as __import_once__
from builtins import str
try:
    from pygdx.scenes.scene2d import utils
except ImportError:
    utils = __import_once__("pygdx.scenes.scene2d.utils")

from pyquantum_helper import override
import java.lang.Object as __object
try:
    from pygdx.graphics import g2d
except ImportError:
    g2d = __import_once__("pygdx.graphics.g2d")

from builtins import type
import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import java.lang.Integer as __int
from builtins import bool
try:
    from pygdx import graphics
except ImportError:
    graphics = __import_once__("pygdx.graphics")

import com.badlogic.gdx.scenes.scene2d.ui.Window as __Window_WindowStyle
__WindowStyle = __Window_WindowStyle.WindowStyle
from builtins import int
 
class WindowStyle():
    """com.badlogic.gdx.scenes.scene2d.ui.Window.WindowStyle"""
 
    @staticmethod
    def __wrap(java_value: __WindowStyle) -> 'WindowStyle':
        return WindowStyle(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __WindowStyle):
        """
        Dynamic initializer for WindowStyle.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.lang.Object.toString()"""
        return str.__wrap(super(object, self).toString())

    @overload
    def __init__(self, ):
        """public com.badlogic.gdx.scenes.scene2d.ui.Window$WindowStyle()"""
        val = __WindowStyle()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @overload
    def __init__(self):
        """public com.badlogic.gdx.scenes.scene2d.ui.Window$WindowStyle()"""
        val = __WindowStyle()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def __init__(self, arg0: 'WindowStyle'):
        """public com.badlogic.gdx.scenes.scene2d.ui.Window$WindowStyle(com.badlogic.gdx.scenes.scene2d.ui.Window$WindowStyle)"""
        val = __WindowStyle(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def __init__(self, arg0: 'BitmapFont', arg1: 'Color', arg2: 'Drawable'):
        """public com.badlogic.gdx.scenes.scene2d.ui.Window$WindowStyle(com.badlogic.gdx.graphics.g2d.BitmapFont,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.scenes.scene2d.utils.Drawable)"""
        val = __WindowStyle(arg0, arg1, arg2)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0)) 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.Widget
from pyquantum_helper import import_once as __import_once__
import com.badlogic.gdx.scenes.scene2d.Touchable as __Touchable
__Touchable = __Touchable
try:
    from pygdx.scenes import scene2d
except ImportError:
    scene2d = __import_once__("pygdx.scenes.scene2d")

import com.badlogic.gdx.graphics.Color as __Color
__Color = __Color
import java.lang.Boolean as __boolean
try:
    from pygdx.graphics import g2d
except ImportError:
    g2d = __import_once__("pygdx.graphics.g2d")

from builtins import type
import com.badlogic.gdx.scenes.scene2d.Group as __Group
__Group = __Group
import com.badlogic.gdx.math.Vector2 as __Vector2
__Vector2 = __Vector2
import java.lang.Class as __Class
__Class = __Class
import com.badlogic.gdx.utils.Array as __Array
__Array = __Array
import java.lang.String as __string
try:
    from pygdx import math
except ImportError:
    math = __import_once__("pygdx.math")

from builtins import bool
import com.badlogic.gdx.scenes.scene2d.ui.Widget as __Widget
__Widget = __Widget
from builtins import str
try:
    from pygdx import utils
except ImportError:
    utils = __import_once__("pygdx.utils")

from pyquantum_helper import override
import java.lang.Object as __object
from builtins import float
from builtins import object
import com.badlogic.gdx.utils.DelayedRemovalArray as __DelayedRemovalArray
__DelayedRemovalArray = __DelayedRemovalArray
import java.lang.Long as __long
import java.lang.Float as __float
import java.lang.String as __String
__String = __String
try:
    from pygdx.graphics import glutils
except ImportError:
    glutils = __import_once__("pygdx.graphics.glutils")

import java.lang.Object as __Object
__Object = __Object
import com.badlogic.gdx.scenes.scene2d.Actor as __Actor
__Actor = __Actor
import java.lang.Integer as __int
import com.badlogic.gdx.scenes.scene2d.Stage as __Stage
__Stage = __Stage
try:
    from pygdx import graphics
except ImportError:
    graphics = __import_once__("pygdx.graphics")

from builtins import int
 
class Widget(scenes.__Actor, scene2d.Actor, scene2d.__Layout, utils.Layout):
    """com.badlogic.gdx.scenes.scene2d.ui.Widget"""
 
    @staticmethod
    def __wrap(java_value: __Widget) -> 'Widget':
        return Widget(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Widget):
        """
        Dynamic initializer for Widget.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def getY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getY()"""
        return float.__wrap(super(scene2d.Actor, self).getY())

    @overload
    def setZIndex(self, arg0: int) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.setZIndex(int)"""
        return bool.__wrap(super(__scene2d.Actor, self).setZIndex(__int.valueOf(arg0)))

    @override
    @overload
    def setBounds(self, arg0: float, arg1: float, arg2: float, arg3: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setBounds(float,float,float,float)"""
        super(__scene2d.Actor, self).setBounds(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def getX(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getX(int)"""
        return float.__wrap(super(__scene2d.Actor, self).getX(__int.valueOf(arg0)))

    @override
    @overload
    def sizeBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.sizeBy(float)"""
        super(__scene2d.Actor, self).sizeBy(__float.valueOf(arg0))

    @override
    @overload
    def sizeBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.sizeBy(float,float)"""
        super(__scene2d.Actor, self).sizeBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def hasActions(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasActions()"""
        return bool.__wrap(super(scene2d.Actor, self).hasActions())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0))

    @override
    @overload
    def setScaleX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScaleX(float)"""
        super(__scene2d.Actor, self).setScaleX(__float.valueOf(arg0))

    @override
    @overload
    def getTouchable(self) -> 'scene2d.Touchable':
        """public com.badlogic.gdx.scenes.scene2d.Touchable com.badlogic.gdx.scenes.scene2d.Actor.getTouchable()"""
        return 'scene2d.Touchable'.__wrap(super(scene2d.Actor, self).getTouchable())

    @override
    @overload
    def removeAction(self, arg0: 'Action'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.removeAction(com.badlogic.gdx.scenes.scene2d.Action)"""
        super(__scene2d.Actor, self).removeAction(arg0)

    @override
    @overload
    def getX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getX()"""
        return float.__wrap(super(scene2d.Actor, self).getX())

    @override
    @overload
    def getMaxWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Widget.getMaxWidth()"""
        return float.__wrap(super(Widget, self).getMaxWidth())

    @override
    @overload
    def toBack(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.toBack()"""
        super(scene2d.Actor, self).toBack()

    @override
    @overload
    def setDebug(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setDebug(boolean)"""
        super(__scene2d.Actor, self).setDebug(__boolean.valueOf(arg0))

    @override
    @overload
    def setX(self, arg0: float, arg1: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setX(float,int)"""
        super(__scene2d.Actor, self).setX(__float.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def screenToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.screenToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).screenToLocalCoordinates(arg0))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def ancestorsVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.ancestorsVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).ancestorsVisible())

    @override
    @overload
    def getListeners(self) -> 'utils.DelayedRemovalArray':
        """public com.badlogic.gdx.utils.DelayedRemovalArray<com.badlogic.gdx.scenes.scene2d.EventListener> com.badlogic.gdx.scenes.scene2d.Actor.getListeners()"""
        return 'utils.DelayedRemovalArray'.__wrap(super(scene2d.Actor, self).getListeners())

    @override
    @overload
    def draw(self, arg0: 'Batch', arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.draw(com.badlogic.gdx.graphics.g2d.Batch,float)"""
        super(__Widget, self).draw(arg0, __float.valueOf(arg1))

    @override
    @overload
    def setFillParent(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.setFillParent(boolean)"""
        super(__Widget, self).setFillParent(__boolean.valueOf(arg0))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def removeListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.removeListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).removeListener(arg0))

    @override
    @overload
    def isTouchFocusListener(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchFocusListener()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchFocusListener())

    @overload
    def localToStageCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToStageCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToStageCoordinates(arg0))

    @override
    @overload
    def setSize(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setSize(float,float)"""
        super(__scene2d.Actor, self).setSize(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def getZIndex(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.Actor.getZIndex()"""
        return int.__wrap(super(scene2d.Actor, self).getZIndex())

    @override
    @overload
    def clipBegin(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.clipBegin()"""
        return bool.__wrap(super(scene2d.Actor, self).clipBegin())

    @override
    @overload
    def invalidateHierarchy(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.invalidateHierarchy()"""
        super(Widget, self).invalidateHierarchy()

    @override
    @overload
    def moveBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.moveBy(float,float)"""
        super(__scene2d.Actor, self).moveBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def getY(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getY(int)"""
        return float.__wrap(super(__scene2d.Actor, self).getY(__int.valueOf(arg0)))

    @override
    @overload
    def setOrigin(self, arg0: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOrigin(int)"""
        super(__scene2d.Actor, self).setOrigin(__int.valueOf(arg0))

    @overload
    def isDescendantOf(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isDescendantOf(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Actor, self).isDescendantOf(arg0))

    @override
    @overload
    def getParent(self) -> 'scene2d.Group':
        """public com.badlogic.gdx.scenes.scene2d.Group com.badlogic.gdx.scenes.scene2d.Actor.getParent()"""
        return 'scene2d.Group'.__wrap(super(scene2d.Actor, self).getParent())

    @override
    @overload
    def clearListeners(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clearListeners()"""
        super(scene2d.Actor, self).clearListeners()

    @overload
    def localToActorCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToActorCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToActorCoordinates(arg0, arg1))

    @override
    @overload
    def setName(self, arg0: str):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setName(java.lang.String)"""
        super(__scene2d.Actor, self).setName(arg0)

    @override
    @overload
    def getPrefWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Widget.getPrefWidth()"""
        return float.__wrap(super(Widget, self).getPrefWidth())

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @override
    @overload
    def setLayoutEnabled(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.setLayoutEnabled(boolean)"""
        super(__Widget, self).setLayoutEnabled(__boolean.valueOf(arg0))

    @override
    @overload
    def setOriginX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOriginX(float)"""
        super(__scene2d.Actor, self).setOriginX(__float.valueOf(arg0))

    @override
    @overload
    def getHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getHeight()"""
        return float.__wrap(super(scene2d.Actor, self).getHeight())

    @override
    @overload
    def validate(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.validate()"""
        super(Widget, self).validate()

    @override
    @overload
    def hasKeyboardFocus(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasKeyboardFocus()"""
        return bool.__wrap(super(scene2d.Actor, self).hasKeyboardFocus())

    @override
    @overload
    def getOriginY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getOriginY()"""
        return float.__wrap(super(scene2d.Actor, self).getOriginY())

    @override
    @overload
    def layout(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.layout()"""
        super(Widget, self).layout()

    @override
    @overload
    def clipEnd(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clipEnd()"""
        super(scene2d.Actor, self).clipEnd()

    @overload
    def __init__(self):
        """public com.badlogic.gdx.scenes.scene2d.ui.Widget()"""
        val = __Widget()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def getUserObject(self) -> object:
        """public java.lang.Object com.badlogic.gdx.scenes.scene2d.Actor.getUserObject()"""
        return object.__wrap(super(scene2d.Actor, self).getUserObject())

    @override
    @overload
    def pack(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.pack()"""
        super(Widget, self).pack()

    @override
    @overload
    def getDebug(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.getDebug()"""
        return bool.__wrap(super(scene2d.Actor, self).getDebug())

    @override
    @overload
    def setHeight(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setHeight(float)"""
        super(__scene2d.Actor, self).setHeight(__float.valueOf(arg0))

    @override
    @overload
    def setScale(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScale(float)"""
        super(__scene2d.Actor, self).setScale(__float.valueOf(arg0))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def rotateBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.rotateBy(float)"""
        super(__scene2d.Actor, self).rotateBy(__float.valueOf(arg0))

    @override
    @overload
    def getMinHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Widget.getMinHeight()"""
        return float.__wrap(super(Widget, self).getMinHeight())

    @override
    @overload
    def setScale(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScale(float,float)"""
        super(__scene2d.Actor, self).setScale(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def addListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.addListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).addListener(arg0))

    @overload
    def parentToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.parentToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).parentToLocalCoordinates(arg0))

    @override
    @overload
    def getRotation(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getRotation()"""
        return float.__wrap(super(scene2d.Actor, self).getRotation())

    @override
    @overload
    def setVisible(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setVisible(boolean)"""
        super(__scene2d.Actor, self).setVisible(__boolean.valueOf(arg0))

    @override
    @overload
    def setY(self, arg0: float, arg1: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setY(float,int)"""
        super(__scene2d.Actor, self).setY(__float.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def setX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setX(float)"""
        super(__scene2d.Actor, self).setX(__float.valueOf(arg0))

    @override
    @overload
    def invalidate(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.invalidate()"""
        super(Widget, self).invalidate()

    @override
    @overload
    def setOrigin(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOrigin(float,float)"""
        super(__scene2d.Actor, self).setOrigin(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def getRight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getRight()"""
        return float.__wrap(super(scene2d.Actor, self).getRight())

    @overload
    def isAscendantOf(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isAscendantOf(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Actor, self).isAscendantOf(arg0))

    @override
    @overload
    def setWidth(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setWidth(float)"""
        super(__scene2d.Actor, self).setWidth(__float.valueOf(arg0))

    @override
    @overload
    def isTouchFocusTarget(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchFocusTarget()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchFocusTarget())

    @override
    @overload
    def hasParent(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasParent()"""
        return bool.__wrap(super(scene2d.Actor, self).hasParent())

    @override
    @overload
    def setPosition(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setPosition(float,float)"""
        super(__scene2d.Actor, self).setPosition(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def getScaleY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getScaleY()"""
        return float.__wrap(super(scene2d.Actor, self).getScaleY())

    @override
    @overload
    def getWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getWidth()"""
        return float.__wrap(super(scene2d.Actor, self).getWidth())

    @override
    @overload
    def setOriginY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOriginY(float)"""
        super(__scene2d.Actor, self).setOriginY(__float.valueOf(arg0))

    @override
    @overload
    def setPosition(self, arg0: float, arg1: float, arg2: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setPosition(float,float,int)"""
        super(__scene2d.Actor, self).setPosition(__float.valueOf(arg0), __float.valueOf(arg1), __int.valueOf(arg2))

    @overload
    def removeCaptureListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.removeCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).removeCaptureListener(arg0))

    @override
    @overload
    def setColor(self, arg0: 'Color'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setColor(com.badlogic.gdx.graphics.Color)"""
        super(__scene2d.Actor, self).setColor(arg0)

    @overload
    def localToScreenCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToScreenCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToScreenCoordinates(arg0))

    @override
    @overload
    def drawDebug(self, arg0: 'ShapeRenderer'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.drawDebug(com.badlogic.gdx.graphics.glutils.ShapeRenderer)"""
        super(__scene2d.Actor, self).drawDebug(arg0)

    @override
    @overload
    def setTouchable(self, arg0: 'Touchable'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setTouchable(com.badlogic.gdx.scenes.scene2d.Touchable)"""
        super(__scene2d.Actor, self).setTouchable(arg0)

    @overload
    def addCaptureListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.addCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).addCaptureListener(arg0))

    @overload
    def fire(self, arg0: 'Event') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.fire(com.badlogic.gdx.scenes.scene2d.Event)"""
        return bool.__wrap(super(__scene2d.Actor, self).fire(arg0))

    @override
    @overload
    def getMaxHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Widget.getMaxHeight()"""
        return float.__wrap(super(Widget, self).getMaxHeight())

    @override
    @overload
    def remove(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.remove()"""
        return bool.__wrap(super(scene2d.Actor, self).remove())

    @overload
    def hit(self, arg0: float, arg1: float, arg2: bool) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.Actor.hit(float,float,boolean)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Actor, self).hit(__float.valueOf(arg0), __float.valueOf(arg1), __boolean.valueOf(arg2)))

    @overload
    def localToParentCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToParentCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToParentCoordinates(arg0))

    @override
    @overload
    def clear(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clear()"""
        super(scene2d.Actor, self).clear()

    @override
    @overload
    def getName(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.Actor.getName()"""
        return str.__wrap(super(scene2d.Actor, self).getName())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.Actor.toString()"""
        return str.__wrap(super(scene2d.Actor, self).toString())

    @override
    @overload
    def isVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).isVisible())

    @overload
    def needsLayout(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Widget.needsLayout()"""
        return bool.__wrap(super(Widget, self).needsLayout())

    @override
    @overload
    def getCaptureListeners(self) -> 'utils.DelayedRemovalArray':
        """public com.badlogic.gdx.utils.DelayedRemovalArray<com.badlogic.gdx.scenes.scene2d.EventListener> com.badlogic.gdx.scenes.scene2d.Actor.getCaptureListeners()"""
        return 'utils.DelayedRemovalArray'.__wrap(super(scene2d.Actor, self).getCaptureListeners())

    @override
    @overload
    def debug(self) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.Actor.debug()"""
        return 'scene2d.Actor'.__wrap(super(scene2d.Actor, self).debug())

    @overload
    def __init__(self, ):
        """public com.badlogic.gdx.scenes.scene2d.ui.Widget()"""
        val = __Widget()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def getTop(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getTop()"""
        return float.__wrap(super(scene2d.Actor, self).getTop())

    @override
    @overload
    def setY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setY(float)"""
        super(__scene2d.Actor, self).setY(__float.valueOf(arg0))

    @override
    @overload
    def getMinWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Widget.getMinWidth()"""
        return float.__wrap(super(Widget, self).getMinWidth())

    @override
    @overload
    def clearActions(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clearActions()"""
        super(scene2d.Actor, self).clearActions()

    @override
    @overload
    def scaleBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.scaleBy(float,float)"""
        super(__scene2d.Actor, self).scaleBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def setRotation(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setRotation(float)"""
        super(__scene2d.Actor, self).setRotation(__float.valueOf(arg0))

    @override
    @overload
    def getScaleX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getScaleX()"""
        return float.__wrap(super(scene2d.Actor, self).getScaleX())

    @overload
    def firstAscendant(self, arg0: 'Class') -> 'scene2d.Actor':
        """public <T extends com.badlogic.gdx.scenes.scene2d.Actor> T com.badlogic.gdx.scenes.scene2d.Actor.firstAscendant(java.lang.Class<T>)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Actor, self).firstAscendant(arg0))

    @overload
    def notify(self, arg0: 'Event', arg1: bool) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.notify(com.badlogic.gdx.scenes.scene2d.Event,boolean)"""
        return bool.__wrap(super(__scene2d.Actor, self).notify(arg0, __boolean.valueOf(arg1)))

    @override
    @overload
    def act(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.act(float)"""
        super(__scene2d.Actor, self).act(__float.valueOf(arg0))

    @override
    @overload
    def setUserObject(self, arg0: object):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setUserObject(java.lang.Object)"""
        super(__scene2d.Actor, self).setUserObject(arg0)

    @override
    @overload
    def setScaleY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScaleY(float)"""
        super(__scene2d.Actor, self).setScaleY(__float.valueOf(arg0))

    @override
    @overload
    def hasScrollFocus(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasScrollFocus()"""
        return bool.__wrap(super(scene2d.Actor, self).hasScrollFocus())

    @override
    @overload
    def toFront(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.toFront()"""
        super(scene2d.Actor, self).toFront()

    @override
    @overload
    def scaleBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.scaleBy(float)"""
        super(__scene2d.Actor, self).scaleBy(__float.valueOf(arg0))

    @overload
    def stageToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.stageToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).stageToLocalCoordinates(arg0))

    @override
    @overload
    def getPrefHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Widget.getPrefHeight()"""
        return float.__wrap(super(Widget, self).getPrefHeight())

    @override
    @overload
    def getOriginX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getOriginX()"""
        return float.__wrap(super(scene2d.Actor, self).getOriginX())

    @override
    @overload
    def ascendantsVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.ascendantsVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).ascendantsVisible())

    @override
    @overload
    def getColor(self) -> 'graphics.Color':
        """public com.badlogic.gdx.graphics.Color com.badlogic.gdx.scenes.scene2d.Actor.getColor()"""
        return 'graphics.Color'.__wrap(super(scene2d.Actor, self).getColor())

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @override
    @overload
    def getStage(self) -> 'scene2d.Stage':
        """public com.badlogic.gdx.scenes.scene2d.Stage com.badlogic.gdx.scenes.scene2d.Actor.getStage()"""
        return 'scene2d.Stage'.__wrap(super(scene2d.Actor, self).getStage())

    @override
    @overload
    def addAction(self, arg0: 'Action'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.addAction(com.badlogic.gdx.scenes.scene2d.Action)"""
        super(__scene2d.Actor, self).addAction(arg0)

    @override
    @overload
    def setColor(self, arg0: float, arg1: float, arg2: float, arg3: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setColor(float,float,float,float)"""
        super(__scene2d.Actor, self).setColor(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3))

    @override
    @overload
    def isTouchable(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchable()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchable())

    @overload
    def localToAscendantCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToAscendantCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToAscendantCoordinates(arg0, arg1))

    @overload
    def clipBegin(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.clipBegin(float,float,float,float)"""
        return bool.__wrap(super(__scene2d.Actor, self).clipBegin(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3)))

    @override
    @overload
    def getActions(self) -> 'utils.Array':
        """public com.badlogic.gdx.utils.Array<com.badlogic.gdx.scenes.scene2d.Action> com.badlogic.gdx.scenes.scene2d.Actor.getActions()"""
        return 'utils.Array'.__wrap(super(scene2d.Actor, self).getActions()) 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.ImageButton
from pyquantum_helper import import_once as __import_once__
import com.badlogic.gdx.scenes.scene2d.Touchable as __Touchable
__Touchable = __Touchable
try:
    from pygdx.scenes import scene2d
except ImportError:
    scene2d = __import_once__("pygdx.scenes.scene2d")

import com.badlogic.gdx.graphics.Color as __Color
__Color = __Color
import java.lang.Boolean as __boolean
try:
    from pygdx.graphics import g2d
except ImportError:
    g2d = __import_once__("pygdx.graphics.g2d")

from builtins import type
import com.badlogic.gdx.scenes.scene2d.ui.Button as __Button
__Button = __Button
import com.badlogic.gdx.scenes.scene2d.ui.ImageButton as __ImageButton
__ImageButton = __ImageButton
import com.badlogic.gdx.scenes.scene2d.Group as __Group
__Group = __Group
import com.badlogic.gdx.scenes.scene2d.ui.Cell as __Cell
__Cell = __Cell
import com.badlogic.gdx.scenes.scene2d.ui.Table as __Table
__Table = __Table
import com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup as __WidgetGroup
__WidgetGroup = __WidgetGroup
import com.badlogic.gdx.math.Vector2 as __Vector2
__Vector2 = __Vector2
import com.badlogic.gdx.scenes.scene2d.ui.Table as __Table_Debug
__Debug = __Table_Debug.Debug
import com.badlogic.gdx.math.Rectangle as __Rectangle
__Rectangle = __Rectangle
import java.lang.Class as __Class
__Class = __Class
import com.badlogic.gdx.utils.Array as __Array
__Array = __Array
import java.lang.String as __string
try:
    from pygdx import math
except ImportError:
    math = __import_once__("pygdx.math")

from builtins import bool
import com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup as __ButtonGroup
__ButtonGroup = __ButtonGroup
from builtins import str
try:
    from pygdx.scenes.scene2d import utils
except ImportError:
    utils = __import_once__("pygdx.scenes.scene2d.utils")

import java.lang.CharSequence as CharSequence
try:
    from pygdx import utils
except ImportError:
    utils = __import_once__("pygdx.utils")

from pyquantum_helper import override
import java.lang.Object as __object
from builtins import float
from builtins import object
import com.badlogic.gdx.scenes.scene2d.ui.Image as __Image
__Image = __Image
import com.badlogic.gdx.scenes.scene2d.utils.ClickListener as __ClickListener
__ClickListener = __ClickListener
import com.badlogic.gdx.utils.DelayedRemovalArray as __DelayedRemovalArray
__DelayedRemovalArray = __DelayedRemovalArray
import java.lang.Long as __long
import java.lang.Float as __float
import java.lang.String as __String
__String = __String
import com.badlogic.gdx.scenes.scene2d.ui.ImageButton as __ImageButton_ImageButtonStyle
__ImageButtonStyle = __ImageButton_ImageButtonStyle.ImageButtonStyle
try:
    from pygdx.graphics import glutils
except ImportError:
    glutils = __import_once__("pygdx.graphics.glutils")

import com.badlogic.gdx.scenes.scene2d.ui.Skin as __Skin
__Skin = __Skin
import java.lang.Object as __Object
__Object = __Object
import com.badlogic.gdx.utils.SnapshotArray as __SnapshotArray
__SnapshotArray = __SnapshotArray
import com.badlogic.gdx.scenes.scene2d.Actor as __Actor
__Actor = __Actor
import java.lang.Integer as __int
import com.badlogic.gdx.scenes.scene2d.ui.Value as __Value
__Value = __Value
import com.badlogic.gdx.scenes.scene2d.Stage as __Stage
__Stage = __Stage
try:
    from pygdx import graphics
except ImportError:
    graphics = __import_once__("pygdx.graphics")

import com.badlogic.gdx.scenes.scene2d.utils.Drawable as __Drawable
__Drawable = __Drawable
from builtins import int
 
class ImageButton(__Button, Button):
    """com.badlogic.gdx.scenes.scene2d.ui.ImageButton"""
 
    @staticmethod
    def __wrap(java_value: __ImageButton) -> 'ImageButton':
        return ImageButton(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __ImageButton):
        """
        Dynamic initializer for ImageButton.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def getColumnPrefWidth(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getColumnPrefWidth(int)"""
        return float.__wrap(super(__Table, self).getColumnPrefWidth(__int.valueOf(arg0)))

    @override
    @overload
    def getY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getY()"""
        return float.__wrap(super(scene2d.Actor, self).getY())

    @overload
    def getImageCell(self) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell com.badlogic.gdx.scenes.scene2d.ui.ImageButton.getImageCell()"""
        return 'Cell'.__wrap(super(ImageButton, self).getImageCell())

    @override
    @overload
    def setBounds(self, arg0: float, arg1: float, arg2: float, arg3: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setBounds(float,float,float,float)"""
        super(__scene2d.Actor, self).setBounds(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def add(self, arg0: 'CharSequence', arg1: str, arg2: str) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<com.badlogic.gdx.scenes.scene2d.ui.Label> com.badlogic.gdx.scenes.scene2d.ui.Table.add(java.lang.CharSequence,java.lang.String,java.lang.String)"""
        return 'Cell'.__wrap(super(__Table, self).add(arg0, arg1, arg2))

    @overload
    def findActor(self, arg0: str) -> 'scene2d.Actor':
        """public <T extends com.badlogic.gdx.scenes.scene2d.Actor> T com.badlogic.gdx.scenes.scene2d.Group.findActor(java.lang.String)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Group, self).findActor(arg0))

    @overload
    def __init__(self, arg0: 'Drawable'):
        """public com.badlogic.gdx.scenes.scene2d.ui.ImageButton(com.badlogic.gdx.scenes.scene2d.utils.Drawable)"""
        val = __ImageButton(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def isOver(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Button.isOver()"""
        return bool.__wrap(super(Button, self).isOver())

    @override
    @overload
    def getPrefWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Button.getPrefWidth()"""
        return float.__wrap(super(Button, self).getPrefWidth())

    @overload
    def removeActor(self, arg0: 'Actor', arg1: bool) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Table.removeActor(com.badlogic.gdx.scenes.scene2d.Actor,boolean)"""
        return bool.__wrap(super(__Table, self).removeActor(arg0, __boolean.valueOf(arg1)))

    @override
    @overload
    def getTouchable(self) -> 'scene2d.Touchable':
        """public com.badlogic.gdx.scenes.scene2d.Touchable com.badlogic.gdx.scenes.scene2d.Actor.getTouchable()"""
        return 'scene2d.Touchable'.__wrap(super(scene2d.Actor, self).getTouchable())

    @override
    @overload
    def removeAction(self, arg0: 'Action'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.removeAction(com.badlogic.gdx.scenes.scene2d.Action)"""
        super(__scene2d.Actor, self).removeAction(arg0)

    @override
    @overload
    def getClickListener(self) -> 'utils.ClickListener':
        """public com.badlogic.gdx.scenes.scene2d.utils.ClickListener com.badlogic.gdx.scenes.scene2d.ui.Button.getClickListener()"""
        return 'utils.ClickListener'.__wrap(super(Button, self).getClickListener())

    @override
    @overload
    def getPadTop(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getPadTop()"""
        return float.__wrap(super(Table, self).getPadTop())

    @override
    @overload
    def drawDebug(self, arg0: 'ShapeRenderer'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.drawDebug(com.badlogic.gdx.graphics.glutils.ShapeRenderer)"""
        super(__Table, self).drawDebug(arg0)

    @override
    @overload
    def setDisabled(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Button.setDisabled(boolean)"""
        super(__Button, self).setDisabled(__boolean.valueOf(arg0))

    @overload
    def padRight(self, arg0: 'Value') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padRight(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Table'.__wrap(super(__Table, self).padRight(arg0))

    @override
    @overload
    def getMaxWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.getMaxWidth()"""
        return float.__wrap(super(WidgetGroup, self).getMaxWidth())

    @override
    @overload
    def setX(self, arg0: float, arg1: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setX(float,int)"""
        super(__scene2d.Actor, self).setX(__float.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def reset(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.reset()"""
        super(Table, self).reset()

    @override
    @overload
    def getListeners(self) -> 'utils.DelayedRemovalArray':
        """public com.badlogic.gdx.utils.DelayedRemovalArray<com.badlogic.gdx.scenes.scene2d.EventListener> com.badlogic.gdx.scenes.scene2d.Actor.getListeners()"""
        return 'utils.DelayedRemovalArray'.__wrap(super(scene2d.Actor, self).getListeners())

    @overload
    def removeListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.removeListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).removeListener(arg0))

    @override
    @overload
    def isTouchFocusListener(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchFocusListener()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchFocusListener())

    @overload
    def localToStageCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToStageCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToStageCoordinates(arg0))

    @override
    @overload
    def clipBegin(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.clipBegin()"""
        return bool.__wrap(super(scene2d.Actor, self).clipBegin())

    @override
    @overload
    def moveBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.moveBy(float,float)"""
        super(__scene2d.Actor, self).moveBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def pad(self, arg0: float) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.pad(float)"""
        return 'Table'.__wrap(super(__Table, self).pad(__float.valueOf(arg0)))

    @override
    @overload
    def setName(self, arg0: str):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setName(java.lang.String)"""
        super(__scene2d.Actor, self).setName(arg0)

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @overload
    def getRowMinHeight(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getRowMinHeight(int)"""
        return float.__wrap(super(__Table, self).getRowMinHeight(__int.valueOf(arg0)))

    @overload
    def swapActor(self, arg0: 'Actor', arg1: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.swapActor(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Group, self).swapActor(arg0, arg1))

    @override
    @overload
    def draw(self, arg0: 'Batch', arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ImageButton.draw(com.badlogic.gdx.graphics.g2d.Batch,float)"""
        super(__ImageButton, self).draw(arg0, __float.valueOf(arg1))

    @override
    @overload
    def getPadX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getPadX()"""
        return float.__wrap(super(Table, self).getPadX())

    @override
    @overload
    def clearChildren(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.clearChildren(boolean)"""
        super(__Table, self).clearChildren(__boolean.valueOf(arg0))

    @override
    @overload
    def getDebug(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.getDebug()"""
        return bool.__wrap(super(scene2d.Actor, self).getDebug())

    @override
    @overload
    def setHeight(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setHeight(float)"""
        super(__scene2d.Actor, self).setHeight(__float.valueOf(arg0))

    @override
    @overload
    def setScale(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScale(float)"""
        super(__scene2d.Actor, self).setScale(__float.valueOf(arg0))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getButtonGroup(self) -> 'ButtonGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup com.badlogic.gdx.scenes.scene2d.ui.Button.getButtonGroup()"""
        return 'ButtonGroup'.__wrap(super(Button, self).getButtonGroup())

    @overload
    def add(self, arg0: 'CharSequence') -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<com.badlogic.gdx.scenes.scene2d.ui.Label> com.badlogic.gdx.scenes.scene2d.ui.Table.add(java.lang.CharSequence)"""
        return 'Cell'.__wrap(super(__Table, self).add(arg0))

    @overload
    def padBottom(self, arg0: float) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padBottom(float)"""
        return 'Table'.__wrap(super(__Table, self).padBottom(__float.valueOf(arg0)))

    @override
    @overload
    def setDebug(self, arg0: bool, arg1: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Group.setDebug(boolean,boolean)"""
        super(__scene2d.Group, self).setDebug(__boolean.valueOf(arg0), __boolean.valueOf(arg1))

    @override
    @overload
    def row(self) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell com.badlogic.gdx.scenes.scene2d.ui.Table.row()"""
        return 'Cell'.__wrap(super(Table, self).row())

    @overload
    def background(self, arg0: 'Drawable') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.background(com.badlogic.gdx.scenes.scene2d.utils.Drawable)"""
        return 'Table'.__wrap(super(__Table, self).background(arg0))

    @override
    @overload
    def setTransform(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Group.setTransform(boolean)"""
        super(__scene2d.Group, self).setTransform(__boolean.valueOf(arg0))

    @overload
    def parentToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.parentToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).parentToLocalCoordinates(arg0))

    @override
    @overload
    def getRotation(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getRotation()"""
        return float.__wrap(super(scene2d.Actor, self).getRotation())

    @override
    @overload
    def getMaxHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.getMaxHeight()"""
        return float.__wrap(super(WidgetGroup, self).getMaxHeight())

    @overload
    def padTop(self, arg0: float) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padTop(float)"""
        return 'Table'.__wrap(super(__Table, self).padTop(__float.valueOf(arg0)))

    @override
    @overload
    def isDisabled(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Button.isDisabled()"""
        return bool.__wrap(super(Button, self).isDisabled())

    @overload
    def padLeft(self, arg0: 'Value') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padLeft(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Table'.__wrap(super(__Table, self).padLeft(arg0))

    @override
    @overload
    def addActor(self, arg0: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.addActor(com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__scene2d.Group, self).addActor(arg0)

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def getBackground(self) -> 'utils.Drawable':
        """public com.badlogic.gdx.scenes.scene2d.utils.Drawable com.badlogic.gdx.scenes.scene2d.ui.Table.getBackground()"""
        return 'utils.Drawable'.__wrap(super(Table, self).getBackground())

    @override
    @overload
    def getPrefHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Button.getPrefHeight()"""
        return float.__wrap(super(Button, self).getPrefHeight())

    @overload
    def pad(self, arg0: float, arg1: float, arg2: float, arg3: float) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.pad(float,float,float,float)"""
        return 'Table'.__wrap(super(__Table, self).pad(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3)))

    @overload
    def add(self, arg0: 'CharSequence', arg1: str) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<com.badlogic.gdx.scenes.scene2d.ui.Label> com.badlogic.gdx.scenes.scene2d.ui.Table.add(java.lang.CharSequence,java.lang.String)"""
        return 'Cell'.__wrap(super(__Table, self).add(arg0, arg1))

    @override
    @overload
    def getRows(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.ui.Table.getRows()"""
        return int.__wrap(super(Table, self).getRows())

    @override
    @overload
    def setWidth(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setWidth(float)"""
        super(__scene2d.Actor, self).setWidth(__float.valueOf(arg0))

    @override
    @overload
    def isTouchFocusTarget(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchFocusTarget()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchFocusTarget())

    @override
    @overload
    def isChecked(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Button.isChecked()"""
        return bool.__wrap(super(Button, self).isChecked())

    @override
    @overload
    def setPosition(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setPosition(float,float)"""
        super(__scene2d.Actor, self).setPosition(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def setClip(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.setClip(boolean)"""
        super(__Table, self).setClip(__boolean.valueOf(arg0))

    @override
    @overload
    def addActorAt(self, arg0: int, arg1: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.addActorAt(int,com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__scene2d.Group, self).addActorAt(__int.valueOf(arg0), arg1)

    @overload
    def hit(self, arg0: float, arg1: float, arg2: bool) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.ui.Table.hit(float,float,boolean)"""
        return 'scene2d.Actor'.__wrap(super(__Table, self).hit(__float.valueOf(arg0), __float.valueOf(arg1), __boolean.valueOf(arg2)))

    @override
    @overload
    def setProgrammaticChangeEvents(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Button.setProgrammaticChangeEvents(boolean)"""
        super(__Button, self).setProgrammaticChangeEvents(__boolean.valueOf(arg0))

    @override
    @overload
    def setOriginY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOriginY(float)"""
        super(__scene2d.Actor, self).setOriginY(__float.valueOf(arg0))

    @override
    @overload
    def getPadY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getPadY()"""
        return float.__wrap(super(Table, self).getPadY())

    @override
    @overload
    def getPadRight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getPadRight()"""
        return float.__wrap(super(Table, self).getPadRight())

    @overload
    def localToScreenCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToScreenCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToScreenCoordinates(arg0))

    @override
    @overload
    def clear(self):
        """public void com.badlogic.gdx.scenes.scene2d.Group.clear()"""
        super(scene2d.Group, self).clear()

    @overload
    def stack(self, *arg0: 'scene2d.Actor') -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<com.badlogic.gdx.scenes.scene2d.ui.Stack> com.badlogic.gdx.scenes.scene2d.ui.Table.stack(com.badlogic.gdx.scenes.scene2d.Actor...)"""
        return 'Cell'.__wrap(super(__Table, self).stack(arg0))

    @override
    @overload
    def setTouchable(self, arg0: 'Touchable'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setTouchable(com.badlogic.gdx.scenes.scene2d.Touchable)"""
        super(__scene2d.Actor, self).setTouchable(arg0)

    @override
    @overload
    def add(self) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell com.badlogic.gdx.scenes.scene2d.ui.Table.add()"""
        return 'Cell'.__wrap(super(Table, self).add())

    @overload
    def getColumnWidth(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getColumnWidth(int)"""
        return float.__wrap(super(__Table, self).getColumnWidth(__int.valueOf(arg0)))

    @override
    @overload
    def clearChildren(self):
        """public void com.badlogic.gdx.scenes.scene2d.Group.clearChildren()"""
        super(scene2d.Group, self).clearChildren()

    @override
    @overload
    def debugAll(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.debugAll()"""
        return 'Table'.__wrap(super(Table, self).debugAll())

    @overload
    def localToParentCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToParentCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToParentCoordinates(arg0))

    @override
    @overload
    def setCullingArea(self, arg0: 'Rectangle'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.setCullingArea(com.badlogic.gdx.math.Rectangle)"""
        super(__scene2d.Group, self).setCullingArea(arg0)

    @override
    @overload
    def getName(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.Actor.getName()"""
        return str.__wrap(super(scene2d.Actor, self).getName())

    @override
    @overload
    def getCaptureListeners(self) -> 'utils.DelayedRemovalArray':
        """public com.badlogic.gdx.utils.DelayedRemovalArray<com.badlogic.gdx.scenes.scene2d.EventListener> com.badlogic.gdx.scenes.scene2d.Actor.getCaptureListeners()"""
        return 'utils.DelayedRemovalArray'.__wrap(super(scene2d.Actor, self).getCaptureListeners())

    @overload
    def padBottom(self, arg0: 'Value') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padBottom(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Table'.__wrap(super(__Table, self).padBottom(arg0))

    @override
    @overload
    def clear(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Group.clear(boolean)"""
        super(__scene2d.Group, self).clear(__boolean.valueOf(arg0))

    @override
    @overload
    def setY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setY(float)"""
        super(__scene2d.Actor, self).setY(__float.valueOf(arg0))

    @override
    @overload
    def addActorAfter(self, arg0: 'Actor', arg1: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.addActorAfter(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__scene2d.Group, self).addActorAfter(arg0, arg1)

    @override
    @overload
    def top(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.top()"""
        return 'Table'.__wrap(super(Table, self).top())

    @override
    @overload
    def scaleBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.scaleBy(float,float)"""
        super(__scene2d.Actor, self).scaleBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def align(self, arg0: int) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.align(int)"""
        return 'Table'.__wrap(super(__Table, self).align(__int.valueOf(arg0)))

    @overload
    def notify(self, arg0: 'Event', arg1: bool) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.notify(com.badlogic.gdx.scenes.scene2d.Event,boolean)"""
        return bool.__wrap(super(__scene2d.Actor, self).notify(arg0, __boolean.valueOf(arg1)))

    @override
    @overload
    def act(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Group.act(float)"""
        super(__scene2d.Group, self).act(__float.valueOf(arg0))

    @override
    @overload
    def setUserObject(self, arg0: object):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setUserObject(java.lang.Object)"""
        super(__scene2d.Actor, self).setUserObject(arg0)

    @override
    @overload
    def hasScrollFocus(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasScrollFocus()"""
        return bool.__wrap(super(scene2d.Actor, self).hasScrollFocus())

    @override
    @overload
    def toFront(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.toFront()"""
        super(scene2d.Actor, self).toFront()

    @override
    @overload
    def scaleBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.scaleBy(float)"""
        super(__scene2d.Actor, self).scaleBy(__float.valueOf(arg0))

    @override
    @overload
    def getOriginX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getOriginX()"""
        return float.__wrap(super(scene2d.Actor, self).getOriginX())

    @overload
    def getRow(self, arg0: float) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.ui.Table.getRow(float)"""
        return int.__wrap(super(__Table, self).getRow(__float.valueOf(arg0)))

    @overload
    def getChild(self, arg0: int) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.Group.getChild(int)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Group, self).getChild(__int.valueOf(arg0)))

    @override
    @overload
    def getSkin(self) -> 'Skin':
        """public com.badlogic.gdx.scenes.scene2d.ui.Skin com.badlogic.gdx.scenes.scene2d.ui.Table.getSkin()"""
        return 'Skin'.__wrap(super(Table, self).getSkin())

    @override
    @overload
    def setDebug(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.setDebug(boolean)"""
        super(__Table, self).setDebug(__boolean.valueOf(arg0))

    @overload
    def pad(self, arg0: 'Value', arg1: 'Value', arg2: 'Value', arg3: 'Value') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.pad(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Table'.__wrap(super(__Table, self).pad(arg0, arg1, arg2, arg3))

    @overload
    def add(self, arg0: 'CharSequence', arg1: str, arg2: 'Color') -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<com.badlogic.gdx.scenes.scene2d.ui.Label> com.badlogic.gdx.scenes.scene2d.ui.Table.add(java.lang.CharSequence,java.lang.String,com.badlogic.gdx.graphics.Color)"""
        return 'Cell'.__wrap(super(__Table, self).add(arg0, arg1, arg2))

    @override
    @overload
    def getPadBottom(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getPadBottom()"""
        return float.__wrap(super(Table, self).getPadBottom())

    @override
    @overload
    def getStage(self) -> 'scene2d.Stage':
        """public com.badlogic.gdx.scenes.scene2d.Stage com.badlogic.gdx.scenes.scene2d.Actor.getStage()"""
        return 'scene2d.Stage'.__wrap(super(scene2d.Actor, self).getStage())

    @override
    @overload
    def setChecked(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Button.setChecked(boolean)"""
        super(__Button, self).setChecked(__boolean.valueOf(arg0))

    @override
    @overload
    def addAction(self, arg0: 'Action'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.addAction(com.badlogic.gdx.scenes.scene2d.Action)"""
        super(__scene2d.Actor, self).addAction(arg0)

    @override
    @overload
    def getPadRightValue(self) -> 'Value':
        """public com.badlogic.gdx.scenes.scene2d.ui.Value com.badlogic.gdx.scenes.scene2d.ui.Table.getPadRightValue()"""
        return 'Value'.__wrap(super(Table, self).getPadRightValue())

    @override
    @overload
    def setColor(self, arg0: float, arg1: float, arg2: float, arg3: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setColor(float,float,float,float)"""
        super(__scene2d.Actor, self).setColor(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3))

    @overload
    def getColumnMinWidth(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getColumnMinWidth(int)"""
        return float.__wrap(super(__Table, self).getColumnMinWidth(__int.valueOf(arg0)))

    @overload
    def __init__(self, arg0: 'Skin'):
        """public com.badlogic.gdx.scenes.scene2d.ui.ImageButton(com.badlogic.gdx.scenes.scene2d.ui.Skin)"""
        val = __ImageButton(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def localToAscendantCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToAscendantCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToAscendantCoordinates(arg0, arg1))

    @override
    @overload
    def getActions(self) -> 'utils.Array':
        """public com.badlogic.gdx.utils.Array<com.badlogic.gdx.scenes.scene2d.Action> com.badlogic.gdx.scenes.scene2d.Actor.getActions()"""
        return 'utils.Array'.__wrap(super(scene2d.Actor, self).getActions())

    @override
    @overload
    def debugTable(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.debugTable()"""
        return 'Table'.__wrap(super(Table, self).debugTable())

    @overload
    def add(self, *arg0: 'scene2d.Actor') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.add(com.badlogic.gdx.scenes.scene2d.Actor...)"""
        return 'Table'.__wrap(super(__Table, self).add(arg0))

    @override
    @overload
    def right(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.right()"""
        return 'Table'.__wrap(super(Table, self).right())

    @overload
    def localToDescendantCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Group.localToDescendantCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Group, self).localToDescendantCoordinates(arg0, arg1))

    @overload
    def padRight(self, arg0: float) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padRight(float)"""
        return 'Table'.__wrap(super(__Table, self).padRight(__float.valueOf(arg0)))

    @overload
    def setZIndex(self, arg0: int) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.setZIndex(int)"""
        return bool.__wrap(super(__scene2d.Actor, self).setZIndex(__int.valueOf(arg0)))

    @overload
    def padLeft(self, arg0: float) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padLeft(float)"""
        return 'Table'.__wrap(super(__Table, self).padLeft(__float.valueOf(arg0)))

    @overload
    def getX(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getX(int)"""
        return float.__wrap(super(__scene2d.Actor, self).getX(__int.valueOf(arg0)))

    @override
    @overload
    def sizeBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.sizeBy(float)"""
        super(__scene2d.Actor, self).sizeBy(__float.valueOf(arg0))

    @override
    @overload
    def getMinWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Button.getMinWidth()"""
        return float.__wrap(super(Button, self).getMinWidth())

    @override
    @overload
    def isPressed(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Button.isPressed()"""
        return bool.__wrap(super(Button, self).isPressed())

    @override
    @overload
    def clip(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.clip()"""
        return 'Table'.__wrap(super(Table, self).clip())

    @overload
    def getRowPrefHeight(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getRowPrefHeight(int)"""
        return float.__wrap(super(__Table, self).getRowPrefHeight(__int.valueOf(arg0)))

    @override
    @overload
    def sizeBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.sizeBy(float,float)"""
        super(__scene2d.Actor, self).sizeBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def hasActions(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasActions()"""
        return bool.__wrap(super(scene2d.Actor, self).hasActions())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0))

    @override
    @overload
    def setScaleX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScaleX(float)"""
        super(__scene2d.Actor, self).setScaleX(__float.valueOf(arg0))

    @overload
    def __init__(self, arg0: 'ImageButtonStyle'):
        """public com.badlogic.gdx.scenes.scene2d.ui.ImageButton(com.badlogic.gdx.scenes.scene2d.ui.ImageButton$ImageButtonStyle)"""
        val = __ImageButton(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def removeActor(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Table.removeActor(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__Table, self).removeActor(arg0))

    @override
    @overload
    def getX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getX()"""
        return float.__wrap(super(scene2d.Actor, self).getX())

    @override
    @overload
    def left(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.left()"""
        return 'Table'.__wrap(super(Table, self).left())

    @override
    @overload
    def center(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.center()"""
        return 'Table'.__wrap(super(Table, self).center())

    @override
    @overload
    def setBackground(self, arg0: 'Drawable'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.setBackground(com.badlogic.gdx.scenes.scene2d.utils.Drawable)"""
        super(__Table, self).setBackground(arg0)

    @overload
    def add(self, arg0: 'Actor') -> 'Cell':
        """public <T extends com.badlogic.gdx.scenes.scene2d.Actor> com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Table.add(T)"""
        return 'Cell'.__wrap(super(__Table, self).add(arg0))

    @override
    @overload
    def toBack(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.toBack()"""
        super(scene2d.Actor, self).toBack()

    @override
    @overload
    def debug(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.debug()"""
        return 'Table'.__wrap(super(Table, self).debug())

    @override
    @overload
    def getClip(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Table.getClip()"""
        return bool.__wrap(super(Table, self).getClip())

    @overload
    def screenToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.screenToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).screenToLocalCoordinates(arg0))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def ancestorsVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.ancestorsVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).ancestorsVisible())

    @override
    @overload
    def getMinHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Button.getMinHeight()"""
        return float.__wrap(super(Button, self).getMinHeight())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def setSize(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setSize(float,float)"""
        super(__scene2d.Actor, self).setSize(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def layout(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.layout()"""
        super(Table, self).layout()

    @override
    @overload
    def getZIndex(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.Actor.getZIndex()"""
        return int.__wrap(super(scene2d.Actor, self).getZIndex())

    @overload
    def getY(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getY(int)"""
        return float.__wrap(super(__scene2d.Actor, self).getY(__int.valueOf(arg0)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.ui.ImageButton.toString()"""
        return str.__wrap(super(ImageButton, self).toString())

    @override
    @overload
    def setOrigin(self, arg0: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOrigin(int)"""
        super(__scene2d.Actor, self).setOrigin(__int.valueOf(arg0))

    @override
    @overload
    def validate(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.validate()"""
        super(WidgetGroup, self).validate()

    @overload
    def isDescendantOf(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isDescendantOf(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Actor, self).isDescendantOf(arg0))

    @override
    @overload
    def addActorBefore(self, arg0: 'Actor', arg1: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.addActorBefore(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__scene2d.Group, self).addActorBefore(arg0, arg1)

    @override
    @overload
    def getParent(self) -> 'scene2d.Group':
        """public com.badlogic.gdx.scenes.scene2d.Group com.badlogic.gdx.scenes.scene2d.Actor.getParent()"""
        return 'scene2d.Group'.__wrap(super(scene2d.Actor, self).getParent())

    @override
    @overload
    def clearListeners(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clearListeners()"""
        super(scene2d.Actor, self).clearListeners()

    @overload
    def localToActorCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToActorCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToActorCoordinates(arg0, arg1))

    @override
    @overload
    def getTableDebug(self) -> 'Debug':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table$Debug com.badlogic.gdx.scenes.scene2d.ui.Table.getTableDebug()"""
        return 'Debug'.__wrap(super(Table, self).getTableDebug())

    @override
    @overload
    def setOriginX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOriginX(float)"""
        super(__scene2d.Actor, self).setOriginX(__float.valueOf(arg0))

    @overload
    def removeActorAt(self, arg0: int, arg1: bool) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.ui.Table.removeActorAt(int,boolean)"""
        return 'scene2d.Actor'.__wrap(super(__Table, self).removeActorAt(__int.valueOf(arg0), __boolean.valueOf(arg1)))

    @override
    @overload
    def getHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getHeight()"""
        return float.__wrap(super(scene2d.Actor, self).getHeight())

    @override
    @overload
    def hasKeyboardFocus(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasKeyboardFocus()"""
        return bool.__wrap(super(scene2d.Actor, self).hasKeyboardFocus())

    @override
    @overload
    def getOriginY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getOriginY()"""
        return float.__wrap(super(scene2d.Actor, self).getOriginY())

    @override
    @overload
    def pack(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.pack()"""
        super(WidgetGroup, self).pack()

    @override
    @overload
    def clipEnd(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clipEnd()"""
        super(scene2d.Actor, self).clipEnd()

    @override
    @overload
    def getUserObject(self) -> object:
        """public java.lang.Object com.badlogic.gdx.scenes.scene2d.Actor.getUserObject()"""
        return object.__wrap(super(scene2d.Actor, self).getUserObject())

    @override
    @overload
    def toggle(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Button.toggle()"""
        super(Button, self).toggle()

    @override
    @overload
    def rotateBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.rotateBy(float)"""
        super(__scene2d.Actor, self).rotateBy(__float.valueOf(arg0))

    @overload
    def background(self, arg0: str) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.background(java.lang.String)"""
        return 'Table'.__wrap(super(__Table, self).background(arg0))

    @overload
    def getRowHeight(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getRowHeight(int)"""
        return float.__wrap(super(__Table, self).getRowHeight(__int.valueOf(arg0)))

    @override
    @overload
    def setStyle(self, arg0: 'ButtonStyle'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ImageButton.setStyle(com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle)"""
        super(__ImageButton, self).setStyle(arg0)

    @override
    @overload
    def getPadLeftValue(self) -> 'Value':
        """public com.badlogic.gdx.scenes.scene2d.ui.Value com.badlogic.gdx.scenes.scene2d.ui.Table.getPadLeftValue()"""
        return 'Value'.__wrap(super(Table, self).getPadLeftValue())

    @override
    @overload
    def setScale(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScale(float,float)"""
        super(__scene2d.Actor, self).setScale(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def addListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.addListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).addListener(arg0))

    @override
    @overload
    def setRound(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.setRound(boolean)"""
        super(__Table, self).setRound(__boolean.valueOf(arg0))

    @overload
    def debug(self, arg0: 'Debug') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.debug(com.badlogic.gdx.scenes.scene2d.ui.Table$Debug)"""
        return 'Table'.__wrap(super(__Table, self).debug(arg0))

    @overload
    def clip(self, arg0: bool) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.clip(boolean)"""
        return 'Table'.__wrap(super(__Table, self).clip(__boolean.valueOf(arg0)))

    @override
    @overload
    def invalidate(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.invalidate()"""
        super(Table, self).invalidate()

    @override
    @overload
    def getPadLeft(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getPadLeft()"""
        return float.__wrap(super(Table, self).getPadLeft())

    @override
    @overload
    def setVisible(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setVisible(boolean)"""
        super(__scene2d.Actor, self).setVisible(__boolean.valueOf(arg0))

    @override
    @overload
    def setY(self, arg0: float, arg1: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setY(float,int)"""
        super(__scene2d.Actor, self).setY(__float.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def setFillParent(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.setFillParent(boolean)"""
        super(__WidgetGroup, self).setFillParent(__boolean.valueOf(arg0))

    @overload
    def getCell(self, arg0: 'Actor') -> 'Cell':
        """public <T extends com.badlogic.gdx.scenes.scene2d.Actor> com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Table.getCell(T)"""
        return 'Cell'.__wrap(super(__Table, self).getCell(arg0))

    @override
    @overload
    def needsLayout(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.needsLayout()"""
        return bool.__wrap(super(WidgetGroup, self).needsLayout())

    @override
    @overload
    def setX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setX(float)"""
        super(__scene2d.Actor, self).setX(__float.valueOf(arg0))

    @override
    @overload
    def setOrigin(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOrigin(float,float)"""
        super(__scene2d.Actor, self).setOrigin(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def __init__(self, arg0: 'Drawable', arg1: 'Drawable', arg2: 'Drawable'):
        """public com.badlogic.gdx.scenes.scene2d.ui.ImageButton(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable)"""
        val = __ImageButton(arg0, arg1, arg2)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def getCullingArea(self) -> 'math.Rectangle':
        """public com.badlogic.gdx.math.Rectangle com.badlogic.gdx.scenes.scene2d.Group.getCullingArea()"""
        return 'math.Rectangle'.__wrap(super(scene2d.Group, self).getCullingArea())

    @overload
    def getImage(self) -> 'Image':
        """public com.badlogic.gdx.scenes.scene2d.ui.Image com.badlogic.gdx.scenes.scene2d.ui.ImageButton.getImage()"""
        return 'Image'.__wrap(super(ImageButton, self).getImage())

    @override
    @overload
    def getRight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getRight()"""
        return float.__wrap(super(scene2d.Actor, self).getRight())

    @overload
    def isAscendantOf(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isAscendantOf(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Actor, self).isAscendantOf(arg0))

    @override
    @overload
    def hasParent(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasParent()"""
        return bool.__wrap(super(scene2d.Actor, self).hasParent())

    @override
    @overload
    def getChildren(self) -> 'utils.SnapshotArray':
        """public com.badlogic.gdx.utils.SnapshotArray<com.badlogic.gdx.scenes.scene2d.Actor> com.badlogic.gdx.scenes.scene2d.Group.getChildren()"""
        return 'utils.SnapshotArray'.__wrap(super(scene2d.Group, self).getChildren())

    @override
    @overload
    def getScaleY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getScaleY()"""
        return float.__wrap(super(scene2d.Actor, self).getScaleY())

    @override
    @overload
    def setSkin(self, arg0: 'Skin'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.setSkin(com.badlogic.gdx.scenes.scene2d.ui.Skin)"""
        super(__Table, self).setSkin(arg0)

    @override
    @overload
    def getWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getWidth()"""
        return float.__wrap(super(scene2d.Actor, self).getWidth())

    @override
    @overload
    def setPosition(self, arg0: float, arg1: float, arg2: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setPosition(float,float,int)"""
        super(__scene2d.Actor, self).setPosition(__float.valueOf(arg0), __float.valueOf(arg1), __int.valueOf(arg2))

    @override
    @overload
    def setLayoutEnabled(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.setLayoutEnabled(boolean)"""
        super(__WidgetGroup, self).setLayoutEnabled(__boolean.valueOf(arg0))

    @overload
    def removeCaptureListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.removeCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).removeCaptureListener(arg0))

    @override
    @overload
    def invalidateHierarchy(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.invalidateHierarchy()"""
        super(WidgetGroup, self).invalidateHierarchy()

    @override
    @overload
    def setColor(self, arg0: 'Color'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setColor(com.badlogic.gdx.graphics.Color)"""
        super(__scene2d.Actor, self).setColor(arg0)

    @overload
    def addCaptureListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.addCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).addCaptureListener(arg0))

    @overload
    def fire(self, arg0: 'Event') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.fire(com.badlogic.gdx.scenes.scene2d.Event)"""
        return bool.__wrap(super(__scene2d.Actor, self).fire(arg0))

    @overload
    def columnDefaults(self, arg0: int) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell com.badlogic.gdx.scenes.scene2d.ui.Table.columnDefaults(int)"""
        return 'Cell'.__wrap(super(__Table, self).columnDefaults(__int.valueOf(arg0)))

    @override
    @overload
    def remove(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.remove()"""
        return bool.__wrap(super(scene2d.Actor, self).remove())

    @override
    @overload
    def isVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).isVisible())

    @override
    @overload
    def defaults(self) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell com.badlogic.gdx.scenes.scene2d.ui.Table.defaults()"""
        return 'Cell'.__wrap(super(Table, self).defaults())

    @overload
    def pad(self, arg0: 'Value') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.pad(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Table'.__wrap(super(__Table, self).pad(arg0))

    @override
    @overload
    def getPadBottomValue(self) -> 'Value':
        """public com.badlogic.gdx.scenes.scene2d.ui.Value com.badlogic.gdx.scenes.scene2d.ui.Table.getPadBottomValue()"""
        return 'Value'.__wrap(super(Table, self).getPadBottomValue())

    @overload
    def __init__(self, arg0: 'Skin', arg1: str):
        """public com.badlogic.gdx.scenes.scene2d.ui.ImageButton(com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String)"""
        val = __ImageButton(arg0, arg1)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def getTop(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getTop()"""
        return float.__wrap(super(scene2d.Actor, self).getTop())

    @override
    @overload
    def getStyle(self) -> 'ImageButtonStyle':
        """public com.badlogic.gdx.scenes.scene2d.ui.ImageButton$ImageButtonStyle com.badlogic.gdx.scenes.scene2d.ui.ImageButton.getStyle()"""
        return 'ImageButtonStyle'.__wrap(super(ImageButton, self).getStyle())

    @override
    @overload
    def clearActions(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clearActions()"""
        super(scene2d.Actor, self).clearActions()

    @override
    @overload
    def setRotation(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setRotation(float)"""
        super(__scene2d.Actor, self).setRotation(__float.valueOf(arg0))

    @override
    @overload
    def getScaleX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getScaleX()"""
        return float.__wrap(super(scene2d.Actor, self).getScaleX())

    @override
    @overload
    def setBackground(self, arg0: str):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.setBackground(java.lang.String)"""
        super(__Table, self).setBackground(arg0)

    @overload
    def firstAscendant(self, arg0: 'Class') -> 'scene2d.Actor':
        """public <T extends com.badlogic.gdx.scenes.scene2d.Actor> T com.badlogic.gdx.scenes.scene2d.Actor.firstAscendant(java.lang.Class<T>)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Actor, self).firstAscendant(arg0))

    @override
    @overload
    def setScaleY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScaleY(float)"""
        super(__scene2d.Actor, self).setScaleY(__float.valueOf(arg0))

    @overload
    def stageToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.stageToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).stageToLocalCoordinates(arg0))

    @override
    @overload
    def bottom(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.bottom()"""
        return 'Table'.__wrap(super(Table, self).bottom())

    @overload
    def swapActor(self, arg0: int, arg1: int) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.swapActor(int,int)"""
        return bool.__wrap(super(__scene2d.Group, self).swapActor(__int.valueOf(arg0), __int.valueOf(arg1)))

    @overload
    def __init__(self, arg0: 'Drawable', arg1: 'Drawable'):
        """public com.badlogic.gdx.scenes.scene2d.ui.ImageButton(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable)"""
        val = __ImageButton(arg0, arg1)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def hasChildren(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.hasChildren()"""
        return bool.__wrap(super(scene2d.Group, self).hasChildren())

    @override
    @overload
    def ascendantsVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.ascendantsVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).ascendantsVisible())

    @override
    @overload
    def getAlign(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.ui.Table.getAlign()"""
        return int.__wrap(super(Table, self).getAlign())

    @override
    @overload
    def debugCell(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.debugCell()"""
        return 'Table'.__wrap(super(Table, self).debugCell())

    @override
    @overload
    def getColumns(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.ui.Table.getColumns()"""
        return int.__wrap(super(Table, self).getColumns())

    @override
    @overload
    def debugActor(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.debugActor()"""
        return 'Table'.__wrap(super(Table, self).debugActor())

    @overload
    def padTop(self, arg0: 'Value') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padTop(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Table'.__wrap(super(__Table, self).padTop(arg0))

    @override
    @overload
    def getColor(self) -> 'graphics.Color':
        """public com.badlogic.gdx.graphics.Color com.badlogic.gdx.scenes.scene2d.Actor.getColor()"""
        return 'graphics.Color'.__wrap(super(scene2d.Actor, self).getColor())

    @override
    @overload
    def isTransform(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.isTransform()"""
        return bool.__wrap(super(scene2d.Group, self).isTransform())

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @override
    @overload
    def isTouchable(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchable()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchable())

    @overload
    def clipBegin(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.clipBegin(float,float,float,float)"""
        return bool.__wrap(super(__scene2d.Actor, self).clipBegin(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3)))

    @override
    @overload
    def getCells(self) -> 'utils.Array':
        """public com.badlogic.gdx.utils.Array<com.badlogic.gdx.scenes.scene2d.ui.Cell> com.badlogic.gdx.scenes.scene2d.ui.Table.getCells()"""
        return 'utils.Array'.__wrap(super(Table, self).getCells())

    @override
    @overload
    def getPadTopValue(self) -> 'Value':
        """public com.badlogic.gdx.scenes.scene2d.ui.Value com.badlogic.gdx.scenes.scene2d.ui.Table.getPadTopValue()"""
        return 'Value'.__wrap(super(Table, self).getPadTopValue()) 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.ParticleEffectActor
from pyquantum_helper import import_once as __import_once__
import com.badlogic.gdx.scenes.scene2d.Touchable as __Touchable
__Touchable = __Touchable
try:
    from pygdx.scenes import scene2d
except ImportError:
    scene2d = __import_once__("pygdx.scenes.scene2d")

import com.badlogic.gdx.graphics.Color as __Color
__Color = __Color
import java.lang.Boolean as __boolean
try:
    from pygdx.graphics import g2d
except ImportError:
    g2d = __import_once__("pygdx.graphics.g2d")

from builtins import type
import com.badlogic.gdx.scenes.scene2d.Group as __Group
__Group = __Group
import com.badlogic.gdx.math.Vector2 as __Vector2
__Vector2 = __Vector2
import java.lang.Class as __Class
__Class = __Class
import com.badlogic.gdx.utils.Array as __Array
__Array = __Array
import java.lang.String as __string
import com.badlogic.gdx.graphics.g2d.ParticleEffect as __ParticleEffect
__ParticleEffect = __ParticleEffect
try:
    from pygdx import math
except ImportError:
    math = __import_once__("pygdx.math")

try:
    from pygdx import files
except ImportError:
    files = __import_once__("pygdx.files")

from builtins import bool
import com.badlogic.gdx.scenes.scene2d.ui.ParticleEffectActor as __ParticleEffectActor
__ParticleEffectActor = __ParticleEffectActor
from builtins import str
try:
    from pygdx import utils
except ImportError:
    utils = __import_once__("pygdx.utils")

from pyquantum_helper import override
import java.lang.Object as __object
from builtins import float
from builtins import object
import com.badlogic.gdx.utils.DelayedRemovalArray as __DelayedRemovalArray
__DelayedRemovalArray = __DelayedRemovalArray
import java.lang.Long as __long
import java.lang.Float as __float
import java.lang.String as __String
__String = __String
try:
    from pygdx.graphics import glutils
except ImportError:
    glutils = __import_once__("pygdx.graphics.glutils")

import java.lang.Object as __Object
__Object = __Object
import com.badlogic.gdx.scenes.scene2d.Actor as __Actor
__Actor = __Actor
import java.lang.Integer as __int
import com.badlogic.gdx.scenes.scene2d.Stage as __Stage
__Stage = __Stage
try:
    from pygdx import graphics
except ImportError:
    graphics = __import_once__("pygdx.graphics")

from builtins import int
 
class ParticleEffectActor(scenes.__Actor, scene2d.Actor, pygdx.__Disposable, utils.Disposable):
    """com.badlogic.gdx.scenes.scene2d.ui.ParticleEffectActor"""
 
    @staticmethod
    def __wrap(java_value: __ParticleEffectActor) -> 'ParticleEffectActor':
        return ParticleEffectActor(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __ParticleEffectActor):
        """
        Dynamic initializer for ParticleEffectActor.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def getY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getY()"""
        return float.__wrap(super(scene2d.Actor, self).getY())

    @overload
    def setZIndex(self, arg0: int) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.setZIndex(int)"""
        return bool.__wrap(super(__scene2d.Actor, self).setZIndex(__int.valueOf(arg0)))

    @override
    @overload
    def setBounds(self, arg0: float, arg1: float, arg2: float, arg3: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setBounds(float,float,float,float)"""
        super(__scene2d.Actor, self).setBounds(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def getX(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getX(int)"""
        return float.__wrap(super(__scene2d.Actor, self).getX(__int.valueOf(arg0)))

    @override
    @overload
    def sizeBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.sizeBy(float)"""
        super(__scene2d.Actor, self).sizeBy(__float.valueOf(arg0))

    @overload
    def isRunning(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.ParticleEffectActor.isRunning()"""
        return bool.__wrap(super(ParticleEffectActor, self).isRunning())

    @override
    @overload
    def sizeBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.sizeBy(float,float)"""
        super(__scene2d.Actor, self).sizeBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def hasActions(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasActions()"""
        return bool.__wrap(super(scene2d.Actor, self).hasActions())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0))

    @override
    @overload
    def setScaleX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScaleX(float)"""
        super(__scene2d.Actor, self).setScaleX(__float.valueOf(arg0))

    @override
    @overload
    def getTouchable(self) -> 'scene2d.Touchable':
        """public com.badlogic.gdx.scenes.scene2d.Touchable com.badlogic.gdx.scenes.scene2d.Actor.getTouchable()"""
        return 'scene2d.Touchable'.__wrap(super(scene2d.Actor, self).getTouchable())

    @override
    @overload
    def removeAction(self, arg0: 'Action'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.removeAction(com.badlogic.gdx.scenes.scene2d.Action)"""
        super(__scene2d.Actor, self).removeAction(arg0)

    @override
    @overload
    def getX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getX()"""
        return float.__wrap(super(scene2d.Actor, self).getX())

    @overload
    def isAutoRemove(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.ParticleEffectActor.isAutoRemove()"""
        return bool.__wrap(super(ParticleEffectActor, self).isAutoRemove())

    @overload
    def __init__(self, arg0: 'FileHandle', arg1: 'FileHandle'):
        """public com.badlogic.gdx.scenes.scene2d.ui.ParticleEffectActor(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle)"""
        val = __ParticleEffectActor(arg0, arg1)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def toBack(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.toBack()"""
        super(scene2d.Actor, self).toBack()

    @override
    @overload
    def setDebug(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setDebug(boolean)"""
        super(__scene2d.Actor, self).setDebug(__boolean.valueOf(arg0))

    @overload
    def isResetOnStart(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.ParticleEffectActor.isResetOnStart()"""
        return bool.__wrap(super(ParticleEffectActor, self).isResetOnStart())

    @override
    @overload
    def setX(self, arg0: float, arg1: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setX(float,int)"""
        super(__scene2d.Actor, self).setX(__float.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def screenToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.screenToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).screenToLocalCoordinates(arg0))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def ancestorsVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.ancestorsVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).ancestorsVisible())

    @override
    @overload
    def getListeners(self) -> 'utils.DelayedRemovalArray':
        """public com.badlogic.gdx.utils.DelayedRemovalArray<com.badlogic.gdx.scenes.scene2d.EventListener> com.badlogic.gdx.scenes.scene2d.Actor.getListeners()"""
        return 'utils.DelayedRemovalArray'.__wrap(super(scene2d.Actor, self).getListeners())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def removeListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.removeListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).removeListener(arg0))

    @override
    @overload
    def isTouchFocusListener(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchFocusListener()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchFocusListener())

    @overload
    def localToStageCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToStageCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToStageCoordinates(arg0))

    @override
    @overload
    def setSize(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setSize(float,float)"""
        super(__scene2d.Actor, self).setSize(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def getZIndex(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.Actor.getZIndex()"""
        return int.__wrap(super(scene2d.Actor, self).getZIndex())

    @override
    @overload
    def clipBegin(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.clipBegin()"""
        return bool.__wrap(super(scene2d.Actor, self).clipBegin())

    @override
    @overload
    def moveBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.moveBy(float,float)"""
        super(__scene2d.Actor, self).moveBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def getY(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getY(int)"""
        return float.__wrap(super(__scene2d.Actor, self).getY(__int.valueOf(arg0)))

    @override
    @overload
    def setOrigin(self, arg0: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOrigin(int)"""
        super(__scene2d.Actor, self).setOrigin(__int.valueOf(arg0))

    @overload
    def isDescendantOf(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isDescendantOf(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Actor, self).isDescendantOf(arg0))

    @override
    @overload
    def getParent(self) -> 'scene2d.Group':
        """public com.badlogic.gdx.scenes.scene2d.Group com.badlogic.gdx.scenes.scene2d.Actor.getParent()"""
        return 'scene2d.Group'.__wrap(super(scene2d.Actor, self).getParent())

    @override
    @overload
    def clearListeners(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clearListeners()"""
        super(scene2d.Actor, self).clearListeners()

    @overload
    def localToActorCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToActorCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToActorCoordinates(arg0, arg1))

    @override
    @overload
    def setName(self, arg0: str):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setName(java.lang.String)"""
        super(__scene2d.Actor, self).setName(arg0)

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @override
    @overload
    def setOriginX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOriginX(float)"""
        super(__scene2d.Actor, self).setOriginX(__float.valueOf(arg0))

    @override
    @overload
    def getHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getHeight()"""
        return float.__wrap(super(scene2d.Actor, self).getHeight())

    @override
    @overload
    def hasKeyboardFocus(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasKeyboardFocus()"""
        return bool.__wrap(super(scene2d.Actor, self).hasKeyboardFocus())

    @overload
    def __init__(self, arg0: 'FileHandle', arg1: 'TextureAtlas'):
        """public com.badlogic.gdx.scenes.scene2d.ui.ParticleEffectActor(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.g2d.TextureAtlas)"""
        val = __ParticleEffectActor(arg0, arg1)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def getOriginY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getOriginY()"""
        return float.__wrap(super(scene2d.Actor, self).getOriginY())

    @override
    @overload
    def clipEnd(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clipEnd()"""
        super(scene2d.Actor, self).clipEnd()

    @override
    @overload
    def getUserObject(self) -> object:
        """public java.lang.Object com.badlogic.gdx.scenes.scene2d.Actor.getUserObject()"""
        return object.__wrap(super(scene2d.Actor, self).getUserObject())

    @override
    @overload
    def getDebug(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.getDebug()"""
        return bool.__wrap(super(scene2d.Actor, self).getDebug())

    @override
    @overload
    def setHeight(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setHeight(float)"""
        super(__scene2d.Actor, self).setHeight(__float.valueOf(arg0))

    @override
    @overload
    def setScale(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScale(float)"""
        super(__scene2d.Actor, self).setScale(__float.valueOf(arg0))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def rotateBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.rotateBy(float)"""
        super(__scene2d.Actor, self).rotateBy(__float.valueOf(arg0))

    @override
    @overload
    def setScale(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScale(float,float)"""
        super(__scene2d.Actor, self).setScale(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def addListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.addListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).addListener(arg0))

    @overload
    def parentToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.parentToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).parentToLocalCoordinates(arg0))

    @overload
    def start(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ParticleEffectActor.start()"""
        super(ParticleEffectActor, self).start()

    @override
    @overload
    def getRotation(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getRotation()"""
        return float.__wrap(super(scene2d.Actor, self).getRotation())

    @override
    @overload
    def setVisible(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setVisible(boolean)"""
        super(__scene2d.Actor, self).setVisible(__boolean.valueOf(arg0))

    @override
    @overload
    def setY(self, arg0: float, arg1: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setY(float,int)"""
        super(__scene2d.Actor, self).setY(__float.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def setResetOnStart(self, arg0: bool) -> 'ParticleEffectActor':
        """public com.badlogic.gdx.scenes.scene2d.ui.ParticleEffectActor com.badlogic.gdx.scenes.scene2d.ui.ParticleEffectActor.setResetOnStart(boolean)"""
        return 'ParticleEffectActor'.__wrap(super(__ParticleEffectActor, self).setResetOnStart(__boolean.valueOf(arg0)))

    @override
    @overload
    def setX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setX(float)"""
        super(__scene2d.Actor, self).setX(__float.valueOf(arg0))

    @override
    @overload
    def setOrigin(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOrigin(float,float)"""
        super(__scene2d.Actor, self).setOrigin(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def cancel(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ParticleEffectActor.cancel()"""
        super(ParticleEffectActor, self).cancel()

    @override
    @overload
    def getRight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getRight()"""
        return float.__wrap(super(scene2d.Actor, self).getRight())

    @overload
    def isAscendantOf(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isAscendantOf(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Actor, self).isAscendantOf(arg0))

    @override
    @overload
    def setWidth(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setWidth(float)"""
        super(__scene2d.Actor, self).setWidth(__float.valueOf(arg0))

    @override
    @overload
    def isTouchFocusTarget(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchFocusTarget()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchFocusTarget())

    @override
    @overload
    def draw(self, arg0: 'Batch', arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ParticleEffectActor.draw(com.badlogic.gdx.graphics.g2d.Batch,float)"""
        super(__ParticleEffectActor, self).draw(arg0, __float.valueOf(arg1))

    @override
    @overload
    def hasParent(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasParent()"""
        return bool.__wrap(super(scene2d.Actor, self).hasParent())

    @override
    @overload
    def setPosition(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setPosition(float,float)"""
        super(__scene2d.Actor, self).setPosition(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def getScaleY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getScaleY()"""
        return float.__wrap(super(scene2d.Actor, self).getScaleY())

    @override
    @overload
    def getWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getWidth()"""
        return float.__wrap(super(scene2d.Actor, self).getWidth())

    @override
    @overload
    def setOriginY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOriginY(float)"""
        super(__scene2d.Actor, self).setOriginY(__float.valueOf(arg0))

    @override
    @overload
    def setPosition(self, arg0: float, arg1: float, arg2: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setPosition(float,float,int)"""
        super(__scene2d.Actor, self).setPosition(__float.valueOf(arg0), __float.valueOf(arg1), __int.valueOf(arg2))

    @overload
    def removeCaptureListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.removeCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).removeCaptureListener(arg0))

    @override
    @overload
    def setColor(self, arg0: 'Color'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setColor(com.badlogic.gdx.graphics.Color)"""
        super(__scene2d.Actor, self).setColor(arg0)

    @overload
    def localToScreenCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToScreenCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToScreenCoordinates(arg0))

    @override
    @overload
    def drawDebug(self, arg0: 'ShapeRenderer'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.drawDebug(com.badlogic.gdx.graphics.glutils.ShapeRenderer)"""
        super(__scene2d.Actor, self).drawDebug(arg0)

    @override
    @overload
    def setTouchable(self, arg0: 'Touchable'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setTouchable(com.badlogic.gdx.scenes.scene2d.Touchable)"""
        super(__scene2d.Actor, self).setTouchable(arg0)

    @overload
    def addCaptureListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.addCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).addCaptureListener(arg0))

    @overload
    def fire(self, arg0: 'Event') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.fire(com.badlogic.gdx.scenes.scene2d.Event)"""
        return bool.__wrap(super(__scene2d.Actor, self).fire(arg0))

    @override
    @overload
    def dispose(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ParticleEffectActor.dispose()"""
        super(ParticleEffectActor, self).dispose()

    @override
    @overload
    def remove(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.remove()"""
        return bool.__wrap(super(scene2d.Actor, self).remove())

    @overload
    def hit(self, arg0: float, arg1: float, arg2: bool) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.Actor.hit(float,float,boolean)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Actor, self).hit(__float.valueOf(arg0), __float.valueOf(arg1), __boolean.valueOf(arg2)))

    @overload
    def localToParentCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToParentCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToParentCoordinates(arg0))

    @override
    @overload
    def clear(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clear()"""
        super(scene2d.Actor, self).clear()

    @override
    @overload
    def getName(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.Actor.getName()"""
        return str.__wrap(super(scene2d.Actor, self).getName())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.Actor.toString()"""
        return str.__wrap(super(scene2d.Actor, self).toString())

    @override
    @overload
    def isVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).isVisible())

    @override
    @overload
    def getCaptureListeners(self) -> 'utils.DelayedRemovalArray':
        """public com.badlogic.gdx.utils.DelayedRemovalArray<com.badlogic.gdx.scenes.scene2d.EventListener> com.badlogic.gdx.scenes.scene2d.Actor.getCaptureListeners()"""
        return 'utils.DelayedRemovalArray'.__wrap(super(scene2d.Actor, self).getCaptureListeners())

    @override
    @overload
    def debug(self) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.Actor.debug()"""
        return 'scene2d.Actor'.__wrap(super(scene2d.Actor, self).debug())

    @override
    @overload
    def getTop(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getTop()"""
        return float.__wrap(super(scene2d.Actor, self).getTop())

    @override
    @overload
    def setY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setY(float)"""
        super(__scene2d.Actor, self).setY(__float.valueOf(arg0))

    @override
    @overload
    def clearActions(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clearActions()"""
        super(scene2d.Actor, self).clearActions()

    @overload
    def getEffect(self) -> 'g2d.ParticleEffect':
        """public com.badlogic.gdx.graphics.g2d.ParticleEffect com.badlogic.gdx.scenes.scene2d.ui.ParticleEffectActor.getEffect()"""
        return 'g2d.ParticleEffect'.__wrap(super(ParticleEffectActor, self).getEffect())

    @override
    @overload
    def scaleBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.scaleBy(float,float)"""
        super(__scene2d.Actor, self).scaleBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def setRotation(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setRotation(float)"""
        super(__scene2d.Actor, self).setRotation(__float.valueOf(arg0))

    @overload
    def __init__(self, arg0: 'ParticleEffect', arg1: bool):
        """public com.badlogic.gdx.scenes.scene2d.ui.ParticleEffectActor(com.badlogic.gdx.graphics.g2d.ParticleEffect,boolean)"""
        val = __ParticleEffectActor(arg0, __boolean.valueOf(arg1))
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def setAutoRemove(self, arg0: bool) -> 'ParticleEffectActor':
        """public com.badlogic.gdx.scenes.scene2d.ui.ParticleEffectActor com.badlogic.gdx.scenes.scene2d.ui.ParticleEffectActor.setAutoRemove(boolean)"""
        return 'ParticleEffectActor'.__wrap(super(__ParticleEffectActor, self).setAutoRemove(__boolean.valueOf(arg0)))

    @override
    @overload
    def getScaleX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getScaleX()"""
        return float.__wrap(super(scene2d.Actor, self).getScaleX())

    @overload
    def firstAscendant(self, arg0: 'Class') -> 'scene2d.Actor':
        """public <T extends com.badlogic.gdx.scenes.scene2d.Actor> T com.badlogic.gdx.scenes.scene2d.Actor.firstAscendant(java.lang.Class<T>)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Actor, self).firstAscendant(arg0))

    @overload
    def notify(self, arg0: 'Event', arg1: bool) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.notify(com.badlogic.gdx.scenes.scene2d.Event,boolean)"""
        return bool.__wrap(super(__scene2d.Actor, self).notify(arg0, __boolean.valueOf(arg1)))

    @override
    @overload
    def setUserObject(self, arg0: object):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setUserObject(java.lang.Object)"""
        super(__scene2d.Actor, self).setUserObject(arg0)

    @override
    @overload
    def setScaleY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScaleY(float)"""
        super(__scene2d.Actor, self).setScaleY(__float.valueOf(arg0))

    @override
    @overload
    def hasScrollFocus(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasScrollFocus()"""
        return bool.__wrap(super(scene2d.Actor, self).hasScrollFocus())

    @override
    @overload
    def toFront(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.toFront()"""
        super(scene2d.Actor, self).toFront()

    @override
    @overload
    def scaleBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.scaleBy(float)"""
        super(__scene2d.Actor, self).scaleBy(__float.valueOf(arg0))

    @overload
    def stageToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.stageToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).stageToLocalCoordinates(arg0))

    @override
    @overload
    def getOriginX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getOriginX()"""
        return float.__wrap(super(scene2d.Actor, self).getOriginX())

    @override
    @overload
    def ascendantsVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.ascendantsVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).ascendantsVisible())

    @override
    @overload
    def getColor(self) -> 'graphics.Color':
        """public com.badlogic.gdx.graphics.Color com.badlogic.gdx.scenes.scene2d.Actor.getColor()"""
        return 'graphics.Color'.__wrap(super(scene2d.Actor, self).getColor())

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @override
    @overload
    def getStage(self) -> 'scene2d.Stage':
        """public com.badlogic.gdx.scenes.scene2d.Stage com.badlogic.gdx.scenes.scene2d.Actor.getStage()"""
        return 'scene2d.Stage'.__wrap(super(scene2d.Actor, self).getStage())

    @override
    @overload
    def addAction(self, arg0: 'Action'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.addAction(com.badlogic.gdx.scenes.scene2d.Action)"""
        super(__scene2d.Actor, self).addAction(arg0)

    @override
    @overload
    def setColor(self, arg0: float, arg1: float, arg2: float, arg3: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setColor(float,float,float,float)"""
        super(__scene2d.Actor, self).setColor(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3))

    @override
    @overload
    def isTouchable(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchable()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchable())

    @overload
    def allowCompletion(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ParticleEffectActor.allowCompletion()"""
        super(ParticleEffectActor, self).allowCompletion()

    @overload
    def localToAscendantCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToAscendantCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToAscendantCoordinates(arg0, arg1))

    @overload
    def clipBegin(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.clipBegin(float,float,float,float)"""
        return bool.__wrap(super(__scene2d.Actor, self).clipBegin(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3)))

    @override
    @overload
    def getActions(self) -> 'utils.Array':
        """public com.badlogic.gdx.utils.Array<com.badlogic.gdx.scenes.scene2d.Action> com.badlogic.gdx.scenes.scene2d.Actor.getActions()"""
        return 'utils.Array'.__wrap(super(scene2d.Actor, self).getActions())

    @override
    @overload
    def act(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.ParticleEffectActor.act(float)"""
        super(__ParticleEffectActor, self).act(__float.valueOf(arg0)) 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.Touchpad
from pyquantum_helper import import_once as __import_once__
import com.badlogic.gdx.scenes.scene2d.Touchable as __Touchable
__Touchable = __Touchable
try:
    from pygdx.scenes import scene2d
except ImportError:
    scene2d = __import_once__("pygdx.scenes.scene2d")

import com.badlogic.gdx.graphics.Color as __Color
__Color = __Color
import java.lang.Boolean as __boolean
try:
    from pygdx.graphics import g2d
except ImportError:
    g2d = __import_once__("pygdx.graphics.g2d")

from builtins import type
import com.badlogic.gdx.scenes.scene2d.Group as __Group
__Group = __Group
import com.badlogic.gdx.math.Vector2 as __Vector2
__Vector2 = __Vector2
import java.lang.Class as __Class
__Class = __Class
import com.badlogic.gdx.scenes.scene2d.ui.Touchpad as __Touchpad_TouchpadStyle
__TouchpadStyle = __Touchpad_TouchpadStyle.TouchpadStyle
import com.badlogic.gdx.utils.Array as __Array
__Array = __Array
import java.lang.String as __string
try:
    from pygdx import math
except ImportError:
    math = __import_once__("pygdx.math")

from builtins import bool
import com.badlogic.gdx.scenes.scene2d.ui.Widget as __Widget
__Widget = __Widget
from builtins import str
try:
    from pygdx import utils
except ImportError:
    utils = __import_once__("pygdx.utils")

from pyquantum_helper import override
import java.lang.Object as __object
from builtins import float
from builtins import object
import com.badlogic.gdx.utils.DelayedRemovalArray as __DelayedRemovalArray
__DelayedRemovalArray = __DelayedRemovalArray
import java.lang.Long as __long
import java.lang.Float as __float
import java.lang.String as __String
__String = __String
try:
    from pygdx.graphics import glutils
except ImportError:
    glutils = __import_once__("pygdx.graphics.glutils")

import java.lang.Object as __Object
__Object = __Object
import com.badlogic.gdx.scenes.scene2d.Actor as __Actor
__Actor = __Actor
import com.badlogic.gdx.scenes.scene2d.ui.Touchpad as __Touchpad
__Touchpad = __Touchpad
import java.lang.Integer as __int
import com.badlogic.gdx.scenes.scene2d.Stage as __Stage
__Stage = __Stage
try:
    from pygdx import graphics
except ImportError:
    graphics = __import_once__("pygdx.graphics")

from builtins import int
 
class Touchpad(__Widget, Widget):
    """com.badlogic.gdx.scenes.scene2d.ui.Touchpad"""
 
    @staticmethod
    def __wrap(java_value: __Touchpad) -> 'Touchpad':
        return Touchpad(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Touchpad):
        """
        Dynamic initializer for Touchpad.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def __init__(self, arg0: float, arg1: 'Skin', arg2: str):
        """public com.badlogic.gdx.scenes.scene2d.ui.Touchpad(float,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String)"""
        val = __Touchpad(__float.valueOf(arg0), arg1, arg2)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def getStyle(self) -> 'TouchpadStyle':
        """public com.badlogic.gdx.scenes.scene2d.ui.Touchpad$TouchpadStyle com.badlogic.gdx.scenes.scene2d.ui.Touchpad.getStyle()"""
        return 'TouchpadStyle'.__wrap(super(Touchpad, self).getStyle())

    @override
    @overload
    def getY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getY()"""
        return float.__wrap(super(scene2d.Actor, self).getY())

    @overload
    def setZIndex(self, arg0: int) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.setZIndex(int)"""
        return bool.__wrap(super(__scene2d.Actor, self).setZIndex(__int.valueOf(arg0)))

    @override
    @overload
    def setBounds(self, arg0: float, arg1: float, arg2: float, arg3: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setBounds(float,float,float,float)"""
        super(__scene2d.Actor, self).setBounds(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def needsLayout(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Widget.needsLayout()"""
        return bool.__wrap(super(Widget, self).needsLayout())

    @overload
    def hit(self, arg0: float, arg1: float, arg2: bool) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.ui.Touchpad.hit(float,float,boolean)"""
        return 'scene2d.Actor'.__wrap(super(__Touchpad, self).hit(__float.valueOf(arg0), __float.valueOf(arg1), __boolean.valueOf(arg2)))

    @overload
    def getX(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getX(int)"""
        return float.__wrap(super(__scene2d.Actor, self).getX(__int.valueOf(arg0)))

    @override
    @overload
    def sizeBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.sizeBy(float)"""
        super(__scene2d.Actor, self).sizeBy(__float.valueOf(arg0))

    @override
    @overload
    def layout(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Touchpad.layout()"""
        super(Touchpad, self).layout()

    @override
    @overload
    def sizeBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.sizeBy(float,float)"""
        super(__scene2d.Actor, self).sizeBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def hasActions(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasActions()"""
        return bool.__wrap(super(scene2d.Actor, self).hasActions())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0))

    @override
    @overload
    def setScaleX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScaleX(float)"""
        super(__scene2d.Actor, self).setScaleX(__float.valueOf(arg0))

    @override
    @overload
    def getTouchable(self) -> 'scene2d.Touchable':
        """public com.badlogic.gdx.scenes.scene2d.Touchable com.badlogic.gdx.scenes.scene2d.Actor.getTouchable()"""
        return 'scene2d.Touchable'.__wrap(super(scene2d.Actor, self).getTouchable())

    @override
    @overload
    def removeAction(self, arg0: 'Action'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.removeAction(com.badlogic.gdx.scenes.scene2d.Action)"""
        super(__scene2d.Actor, self).removeAction(arg0)

    @override
    @overload
    def getX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getX()"""
        return float.__wrap(super(scene2d.Actor, self).getX())

    @override
    @overload
    def getMaxWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Widget.getMaxWidth()"""
        return float.__wrap(super(Widget, self).getMaxWidth())

    @override
    @overload
    def toBack(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.toBack()"""
        super(scene2d.Actor, self).toBack()

    @override
    @overload
    def draw(self, arg0: 'Batch', arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Touchpad.draw(com.badlogic.gdx.graphics.g2d.Batch,float)"""
        super(__Touchpad, self).draw(arg0, __float.valueOf(arg1))

    @override
    @overload
    def setDebug(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setDebug(boolean)"""
        super(__scene2d.Actor, self).setDebug(__boolean.valueOf(arg0))

    @override
    @overload
    def setX(self, arg0: float, arg1: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setX(float,int)"""
        super(__scene2d.Actor, self).setX(__float.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def screenToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.screenToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).screenToLocalCoordinates(arg0))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def ancestorsVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.ancestorsVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).ancestorsVisible())

    @override
    @overload
    def getListeners(self) -> 'utils.DelayedRemovalArray':
        """public com.badlogic.gdx.utils.DelayedRemovalArray<com.badlogic.gdx.scenes.scene2d.EventListener> com.badlogic.gdx.scenes.scene2d.Actor.getListeners()"""
        return 'utils.DelayedRemovalArray'.__wrap(super(scene2d.Actor, self).getListeners())

    @override
    @overload
    def setFillParent(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.setFillParent(boolean)"""
        super(__Widget, self).setFillParent(__boolean.valueOf(arg0))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def removeListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.removeListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).removeListener(arg0))

    @override
    @overload
    def isTouchFocusListener(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchFocusListener()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchFocusListener())

    @overload
    def localToStageCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToStageCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToStageCoordinates(arg0))

    @override
    @overload
    def setSize(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setSize(float,float)"""
        super(__scene2d.Actor, self).setSize(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def getZIndex(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.Actor.getZIndex()"""
        return int.__wrap(super(scene2d.Actor, self).getZIndex())

    @override
    @overload
    def clipBegin(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.clipBegin()"""
        return bool.__wrap(super(scene2d.Actor, self).clipBegin())

    @override
    @overload
    def invalidateHierarchy(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.invalidateHierarchy()"""
        super(Widget, self).invalidateHierarchy()

    @override
    @overload
    def moveBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.moveBy(float,float)"""
        super(__scene2d.Actor, self).moveBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def getY(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getY(int)"""
        return float.__wrap(super(__scene2d.Actor, self).getY(__int.valueOf(arg0)))

    @override
    @overload
    def setOrigin(self, arg0: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOrigin(int)"""
        super(__scene2d.Actor, self).setOrigin(__int.valueOf(arg0))

    @overload
    def isDescendantOf(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isDescendantOf(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Actor, self).isDescendantOf(arg0))

    @override
    @overload
    def getParent(self) -> 'scene2d.Group':
        """public com.badlogic.gdx.scenes.scene2d.Group com.badlogic.gdx.scenes.scene2d.Actor.getParent()"""
        return 'scene2d.Group'.__wrap(super(scene2d.Actor, self).getParent())

    @override
    @overload
    def clearListeners(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clearListeners()"""
        super(scene2d.Actor, self).clearListeners()

    @overload
    def localToActorCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToActorCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToActorCoordinates(arg0, arg1))

    @override
    @overload
    def setName(self, arg0: str):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setName(java.lang.String)"""
        super(__scene2d.Actor, self).setName(arg0)

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @overload
    def getKnobX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Touchpad.getKnobX()"""
        return float.__wrap(super(Touchpad, self).getKnobX())

    @override
    @overload
    def setLayoutEnabled(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.setLayoutEnabled(boolean)"""
        super(__Widget, self).setLayoutEnabled(__boolean.valueOf(arg0))

    @override
    @overload
    def setOriginX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOriginX(float)"""
        super(__scene2d.Actor, self).setOriginX(__float.valueOf(arg0))

    @override
    @overload
    def getHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getHeight()"""
        return float.__wrap(super(scene2d.Actor, self).getHeight())

    @override
    @overload
    def validate(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.validate()"""
        super(Widget, self).validate()

    @override
    @overload
    def hasKeyboardFocus(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasKeyboardFocus()"""
        return bool.__wrap(super(scene2d.Actor, self).hasKeyboardFocus())

    @overload
    def setStyle(self, arg0: 'TouchpadStyle'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Touchpad.setStyle(com.badlogic.gdx.scenes.scene2d.ui.Touchpad$TouchpadStyle)"""
        super(__Touchpad, self).setStyle(arg0)

    @override
    @overload
    def getOriginY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getOriginY()"""
        return float.__wrap(super(scene2d.Actor, self).getOriginY())

    @override
    @overload
    def clipEnd(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clipEnd()"""
        super(scene2d.Actor, self).clipEnd()

    @override
    @overload
    def getUserObject(self) -> object:
        """public java.lang.Object com.badlogic.gdx.scenes.scene2d.Actor.getUserObject()"""
        return object.__wrap(super(scene2d.Actor, self).getUserObject())

    @override
    @overload
    def pack(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.pack()"""
        super(Widget, self).pack()

    @overload
    def getKnobPercentY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Touchpad.getKnobPercentY()"""
        return float.__wrap(super(Touchpad, self).getKnobPercentY())

    @override
    @overload
    def getDebug(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.getDebug()"""
        return bool.__wrap(super(scene2d.Actor, self).getDebug())

    @override
    @overload
    def getPrefWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Touchpad.getPrefWidth()"""
        return float.__wrap(super(Touchpad, self).getPrefWidth())

    @override
    @overload
    def setHeight(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setHeight(float)"""
        super(__scene2d.Actor, self).setHeight(__float.valueOf(arg0))

    @overload
    def setResetOnTouchUp(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Touchpad.setResetOnTouchUp(boolean)"""
        super(__Touchpad, self).setResetOnTouchUp(__boolean.valueOf(arg0))

    @override
    @overload
    def setScale(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScale(float)"""
        super(__scene2d.Actor, self).setScale(__float.valueOf(arg0))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def rotateBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.rotateBy(float)"""
        super(__scene2d.Actor, self).rotateBy(__float.valueOf(arg0))

    @override
    @overload
    def getMinHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Widget.getMinHeight()"""
        return float.__wrap(super(Widget, self).getMinHeight())

    @override
    @overload
    def setScale(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScale(float,float)"""
        super(__scene2d.Actor, self).setScale(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def addListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.addListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).addListener(arg0))

    @overload
    def parentToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.parentToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).parentToLocalCoordinates(arg0))

    @overload
    def isTouched(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Touchpad.isTouched()"""
        return bool.__wrap(super(Touchpad, self).isTouched())

    @override
    @overload
    def getRotation(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getRotation()"""
        return float.__wrap(super(scene2d.Actor, self).getRotation())

    @override
    @overload
    def setVisible(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setVisible(boolean)"""
        super(__scene2d.Actor, self).setVisible(__boolean.valueOf(arg0))

    @override
    @overload
    def setY(self, arg0: float, arg1: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setY(float,int)"""
        super(__scene2d.Actor, self).setY(__float.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def getKnobPercentX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Touchpad.getKnobPercentX()"""
        return float.__wrap(super(Touchpad, self).getKnobPercentX())

    @override
    @overload
    def setX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setX(float)"""
        super(__scene2d.Actor, self).setX(__float.valueOf(arg0))

    @override
    @overload
    def invalidate(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Widget.invalidate()"""
        super(Widget, self).invalidate()

    @override
    @overload
    def setOrigin(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOrigin(float,float)"""
        super(__scene2d.Actor, self).setOrigin(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def getRight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getRight()"""
        return float.__wrap(super(scene2d.Actor, self).getRight())

    @overload
    def isAscendantOf(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isAscendantOf(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Actor, self).isAscendantOf(arg0))

    @override
    @overload
    def setWidth(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setWidth(float)"""
        super(__scene2d.Actor, self).setWidth(__float.valueOf(arg0))

    @override
    @overload
    def isTouchFocusTarget(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchFocusTarget()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchFocusTarget())

    @override
    @overload
    def hasParent(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasParent()"""
        return bool.__wrap(super(scene2d.Actor, self).hasParent())

    @override
    @overload
    def setPosition(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setPosition(float,float)"""
        super(__scene2d.Actor, self).setPosition(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def getScaleY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getScaleY()"""
        return float.__wrap(super(scene2d.Actor, self).getScaleY())

    @overload
    def getResetOnTouchUp(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Touchpad.getResetOnTouchUp()"""
        return bool.__wrap(super(Touchpad, self).getResetOnTouchUp())

    @override
    @overload
    def getWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getWidth()"""
        return float.__wrap(super(scene2d.Actor, self).getWidth())

    @override
    @overload
    def setOriginY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOriginY(float)"""
        super(__scene2d.Actor, self).setOriginY(__float.valueOf(arg0))

    @override
    @overload
    def setPosition(self, arg0: float, arg1: float, arg2: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setPosition(float,float,int)"""
        super(__scene2d.Actor, self).setPosition(__float.valueOf(arg0), __float.valueOf(arg1), __int.valueOf(arg2))

    @overload
    def removeCaptureListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.removeCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).removeCaptureListener(arg0))

    @override
    @overload
    def setColor(self, arg0: 'Color'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setColor(com.badlogic.gdx.graphics.Color)"""
        super(__scene2d.Actor, self).setColor(arg0)

    @overload
    def localToScreenCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToScreenCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToScreenCoordinates(arg0))

    @override
    @overload
    def drawDebug(self, arg0: 'ShapeRenderer'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.drawDebug(com.badlogic.gdx.graphics.glutils.ShapeRenderer)"""
        super(__scene2d.Actor, self).drawDebug(arg0)

    @override
    @overload
    def setTouchable(self, arg0: 'Touchable'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setTouchable(com.badlogic.gdx.scenes.scene2d.Touchable)"""
        super(__scene2d.Actor, self).setTouchable(arg0)

    @overload
    def addCaptureListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.addCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).addCaptureListener(arg0))

    @overload
    def fire(self, arg0: 'Event') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.fire(com.badlogic.gdx.scenes.scene2d.Event)"""
        return bool.__wrap(super(__scene2d.Actor, self).fire(arg0))

    @override
    @overload
    def getMaxHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Widget.getMaxHeight()"""
        return float.__wrap(super(Widget, self).getMaxHeight())

    @override
    @overload
    def remove(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.remove()"""
        return bool.__wrap(super(scene2d.Actor, self).remove())

    @overload
    def localToParentCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToParentCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToParentCoordinates(arg0))

    @override
    @overload
    def clear(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clear()"""
        super(scene2d.Actor, self).clear()

    @override
    @overload
    def getName(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.Actor.getName()"""
        return str.__wrap(super(scene2d.Actor, self).getName())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.Actor.toString()"""
        return str.__wrap(super(scene2d.Actor, self).toString())

    @override
    @overload
    def isVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).isVisible())

    @overload
    def getKnobY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Touchpad.getKnobY()"""
        return float.__wrap(super(Touchpad, self).getKnobY())

    @override
    @overload
    def getCaptureListeners(self) -> 'utils.DelayedRemovalArray':
        """public com.badlogic.gdx.utils.DelayedRemovalArray<com.badlogic.gdx.scenes.scene2d.EventListener> com.badlogic.gdx.scenes.scene2d.Actor.getCaptureListeners()"""
        return 'utils.DelayedRemovalArray'.__wrap(super(scene2d.Actor, self).getCaptureListeners())

    @override
    @overload
    def debug(self) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.Actor.debug()"""
        return 'scene2d.Actor'.__wrap(super(scene2d.Actor, self).debug())

    @override
    @overload
    def getTop(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getTop()"""
        return float.__wrap(super(scene2d.Actor, self).getTop())

    @override
    @overload
    def setY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setY(float)"""
        super(__scene2d.Actor, self).setY(__float.valueOf(arg0))

    @override
    @overload
    def getMinWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Widget.getMinWidth()"""
        return float.__wrap(super(Widget, self).getMinWidth())

    @override
    @overload
    def clearActions(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clearActions()"""
        super(scene2d.Actor, self).clearActions()

    @override
    @overload
    def scaleBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.scaleBy(float,float)"""
        super(__scene2d.Actor, self).scaleBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def setRotation(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setRotation(float)"""
        super(__scene2d.Actor, self).setRotation(__float.valueOf(arg0))

    @override
    @overload
    def getScaleX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getScaleX()"""
        return float.__wrap(super(scene2d.Actor, self).getScaleX())

    @overload
    def firstAscendant(self, arg0: 'Class') -> 'scene2d.Actor':
        """public <T extends com.badlogic.gdx.scenes.scene2d.Actor> T com.badlogic.gdx.scenes.scene2d.Actor.firstAscendant(java.lang.Class<T>)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Actor, self).firstAscendant(arg0))

    @overload
    def notify(self, arg0: 'Event', arg1: bool) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.notify(com.badlogic.gdx.scenes.scene2d.Event,boolean)"""
        return bool.__wrap(super(__scene2d.Actor, self).notify(arg0, __boolean.valueOf(arg1)))

    @override
    @overload
    def act(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.act(float)"""
        super(__scene2d.Actor, self).act(__float.valueOf(arg0))

    @override
    @overload
    def setUserObject(self, arg0: object):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setUserObject(java.lang.Object)"""
        super(__scene2d.Actor, self).setUserObject(arg0)

    @override
    @overload
    def setScaleY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScaleY(float)"""
        super(__scene2d.Actor, self).setScaleY(__float.valueOf(arg0))

    @override
    @overload
    def hasScrollFocus(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasScrollFocus()"""
        return bool.__wrap(super(scene2d.Actor, self).hasScrollFocus())

    @override
    @overload
    def toFront(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.toFront()"""
        super(scene2d.Actor, self).toFront()

    @override
    @overload
    def scaleBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.scaleBy(float)"""
        super(__scene2d.Actor, self).scaleBy(__float.valueOf(arg0))

    @overload
    def stageToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.stageToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).stageToLocalCoordinates(arg0))

    @overload
    def __init__(self, arg0: float, arg1: 'TouchpadStyle'):
        """public com.badlogic.gdx.scenes.scene2d.ui.Touchpad(float,com.badlogic.gdx.scenes.scene2d.ui.Touchpad$TouchpadStyle)"""
        val = __Touchpad(__float.valueOf(arg0), arg1)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def getOriginX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getOriginX()"""
        return float.__wrap(super(scene2d.Actor, self).getOriginX())

    @overload
    def setDeadzone(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Touchpad.setDeadzone(float)"""
        super(__Touchpad, self).setDeadzone(__float.valueOf(arg0))

    @override
    @overload
    def ascendantsVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.ascendantsVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).ascendantsVisible())

    @override
    @overload
    def getPrefHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Touchpad.getPrefHeight()"""
        return float.__wrap(super(Touchpad, self).getPrefHeight())

    @override
    @overload
    def getColor(self) -> 'graphics.Color':
        """public com.badlogic.gdx.graphics.Color com.badlogic.gdx.scenes.scene2d.Actor.getColor()"""
        return 'graphics.Color'.__wrap(super(scene2d.Actor, self).getColor())

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @override
    @overload
    def getStage(self) -> 'scene2d.Stage':
        """public com.badlogic.gdx.scenes.scene2d.Stage com.badlogic.gdx.scenes.scene2d.Actor.getStage()"""
        return 'scene2d.Stage'.__wrap(super(scene2d.Actor, self).getStage())

    @override
    @overload
    def addAction(self, arg0: 'Action'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.addAction(com.badlogic.gdx.scenes.scene2d.Action)"""
        super(__scene2d.Actor, self).addAction(arg0)

    @override
    @overload
    def setColor(self, arg0: float, arg1: float, arg2: float, arg3: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setColor(float,float,float,float)"""
        super(__scene2d.Actor, self).setColor(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3))

    @override
    @overload
    def isTouchable(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchable()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchable())

    @overload
    def localToAscendantCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToAscendantCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToAscendantCoordinates(arg0, arg1))

    @overload
    def clipBegin(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.clipBegin(float,float,float,float)"""
        return bool.__wrap(super(__scene2d.Actor, self).clipBegin(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3)))

    @override
    @overload
    def getActions(self) -> 'utils.Array':
        """public com.badlogic.gdx.utils.Array<com.badlogic.gdx.scenes.scene2d.Action> com.badlogic.gdx.scenes.scene2d.Actor.getActions()"""
        return 'utils.Array'.__wrap(super(scene2d.Actor, self).getActions())

    @overload
    def __init__(self, arg0: float, arg1: 'Skin'):
        """public com.badlogic.gdx.scenes.scene2d.ui.Touchpad(float,com.badlogic.gdx.scenes.scene2d.ui.Skin)"""
        val = __Touchpad(__float.valueOf(arg0), arg1)
        self.__dict__ = val.__dict__
        self.__wrapper = val 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$ScrollPaneStyle
from pyquantum_helper import import_once as __import_once__
from builtins import str
try:
    from pygdx.scenes.scene2d import utils
except ImportError:
    utils = __import_once__("pygdx.scenes.scene2d.utils")

from pyquantum_helper import override
import java.lang.Object as __object
from builtins import type
import com.badlogic.gdx.scenes.scene2d.ui.ScrollPane as __ScrollPane_ScrollPaneStyle
__ScrollPaneStyle = __ScrollPane_ScrollPaneStyle.ScrollPaneStyle
import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import java.lang.Integer as __int
from builtins import bool
from builtins import int
 
class ScrollPaneStyle():
    """com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.ScrollPaneStyle"""
 
    @staticmethod
    def __wrap(java_value: __ScrollPaneStyle) -> 'ScrollPaneStyle':
        return ScrollPaneStyle(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __ScrollPaneStyle):
        """
        Dynamic initializer for ScrollPaneStyle.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def __init__(self, ):
        """public com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$ScrollPaneStyle()"""
        val = __ScrollPaneStyle()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.lang.Object.toString()"""
        return str.__wrap(super(object, self).toString())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def __init__(self):
        """public com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$ScrollPaneStyle()"""
        val = __ScrollPaneStyle()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def __init__(self, arg0: 'ScrollPaneStyle'):
        """public com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$ScrollPaneStyle(com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$ScrollPaneStyle)"""
        val = __ScrollPaneStyle(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0))

    @overload
    def __init__(self, arg0: 'Drawable', arg1: 'Drawable', arg2: 'Drawable', arg3: 'Drawable', arg4: 'Drawable'):
        """public com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$ScrollPaneStyle(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable)"""
        val = __ScrollPaneStyle(arg0, arg1, arg2, arg3, arg4)
        self.__dict__ = val.__dict__
        self.__wrapper = val 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldFilter
import com.badlogic.gdx.scenes.scene2d.ui.TextField as __TextField_TextFieldFilter
__TextFieldFilter = __TextField_TextFieldFilter.TextFieldFilter
from abc import abstractmethod, ABC
 
class TextFieldFilter(ABC):
    """com.badlogic.gdx.scenes.scene2d.ui.TextField.TextFieldFilter"""
 
    @staticmethod
    def __wrap(java_value: __TextFieldFilter) -> 'TextFieldFilter':
        return TextFieldFilter(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __TextFieldFilter):
        """
        Dynamic initializer for TextFieldFilter.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @abstractmethod
    def acceptChar(self, arg0: 'TextField', arg1: str):
        """public abstract boolean com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldFilter.acceptChar(com.badlogic.gdx.scenes.scene2d.ui.TextField,char)"""
        pass 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.Table
from pyquantum_helper import import_once as __import_once__
import com.badlogic.gdx.scenes.scene2d.Touchable as __Touchable
__Touchable = __Touchable
try:
    from pygdx.scenes import scene2d
except ImportError:
    scene2d = __import_once__("pygdx.scenes.scene2d")

import com.badlogic.gdx.graphics.Color as __Color
__Color = __Color
import java.lang.Boolean as __boolean
try:
    from pygdx.graphics import g2d
except ImportError:
    g2d = __import_once__("pygdx.graphics.g2d")

from builtins import type
import com.badlogic.gdx.scenes.scene2d.Group as __Group
__Group = __Group
import com.badlogic.gdx.scenes.scene2d.ui.Table as __Table
__Table = __Table
import com.badlogic.gdx.scenes.scene2d.ui.Cell as __Cell
__Cell = __Cell
import com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup as __WidgetGroup
__WidgetGroup = __WidgetGroup
import com.badlogic.gdx.math.Vector2 as __Vector2
__Vector2 = __Vector2
import com.badlogic.gdx.scenes.scene2d.ui.Table as __Table_Debug
__Debug = __Table_Debug.Debug
import com.badlogic.gdx.math.Rectangle as __Rectangle
__Rectangle = __Rectangle
import java.lang.Class as __Class
__Class = __Class
import com.badlogic.gdx.utils.Array as __Array
__Array = __Array
import java.lang.String as __string
try:
    from pygdx import math
except ImportError:
    math = __import_once__("pygdx.math")

from builtins import bool
from builtins import str
import java.lang.CharSequence as CharSequence
try:
    from pygdx.scenes.scene2d import utils
except ImportError:
    utils = __import_once__("pygdx.scenes.scene2d.utils")

try:
    from pygdx import utils
except ImportError:
    utils = __import_once__("pygdx.utils")

from pyquantum_helper import override
import java.lang.Object as __object
from builtins import float
from builtins import object
import com.badlogic.gdx.utils.DelayedRemovalArray as __DelayedRemovalArray
__DelayedRemovalArray = __DelayedRemovalArray
import java.lang.Long as __long
import java.lang.Float as __float
import java.lang.String as __String
__String = __String
try:
    from pygdx.graphics import glutils
except ImportError:
    glutils = __import_once__("pygdx.graphics.glutils")

import com.badlogic.gdx.scenes.scene2d.ui.Skin as __Skin
__Skin = __Skin
import java.lang.Object as __Object
__Object = __Object
import com.badlogic.gdx.utils.SnapshotArray as __SnapshotArray
__SnapshotArray = __SnapshotArray
import com.badlogic.gdx.scenes.scene2d.Actor as __Actor
__Actor = __Actor
import java.lang.Integer as __int
import com.badlogic.gdx.scenes.scene2d.ui.Value as __Value
__Value = __Value
import com.badlogic.gdx.scenes.scene2d.Stage as __Stage
__Stage = __Stage
try:
    from pygdx import graphics
except ImportError:
    graphics = __import_once__("pygdx.graphics")

import com.badlogic.gdx.scenes.scene2d.utils.Drawable as __Drawable
__Drawable = __Drawable
from builtins import int
 
class Table(__WidgetGroup, WidgetGroup):
    """com.badlogic.gdx.scenes.scene2d.ui.Table"""
 
    @staticmethod
    def __wrap(java_value: __Table) -> 'Table':
        return Table(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Table):
        """
        Dynamic initializer for Table.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def getColumnPrefWidth(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getColumnPrefWidth(int)"""
        return float.__wrap(super(__Table, self).getColumnPrefWidth(__int.valueOf(arg0)))

    @override
    @overload
    def getY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getY()"""
        return float.__wrap(super(scene2d.Actor, self).getY())

    @override
    @overload
    def setBounds(self, arg0: float, arg1: float, arg2: float, arg3: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setBounds(float,float,float,float)"""
        super(__scene2d.Actor, self).setBounds(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def add(self, arg0: 'CharSequence', arg1: str, arg2: str) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<com.badlogic.gdx.scenes.scene2d.ui.Label> com.badlogic.gdx.scenes.scene2d.ui.Table.add(java.lang.CharSequence,java.lang.String,java.lang.String)"""
        return 'Cell'.__wrap(super(__Table, self).add(arg0, arg1, arg2))

    @overload
    def top(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.top()"""
        return 'Table'.__wrap(super(Table, self).top())

    @overload
    def findActor(self, arg0: str) -> 'scene2d.Actor':
        """public <T extends com.badlogic.gdx.scenes.scene2d.Actor> T com.badlogic.gdx.scenes.scene2d.Group.findActor(java.lang.String)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Group, self).findActor(arg0))

    @overload
    def getPadY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getPadY()"""
        return float.__wrap(super(Table, self).getPadY())

    @overload
    def removeActor(self, arg0: 'Actor', arg1: bool) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Table.removeActor(com.badlogic.gdx.scenes.scene2d.Actor,boolean)"""
        return bool.__wrap(super(__Table, self).removeActor(arg0, __boolean.valueOf(arg1)))

    @override
    @overload
    def getTouchable(self) -> 'scene2d.Touchable':
        """public com.badlogic.gdx.scenes.scene2d.Touchable com.badlogic.gdx.scenes.scene2d.Actor.getTouchable()"""
        return 'scene2d.Touchable'.__wrap(super(scene2d.Actor, self).getTouchable())

    @override
    @overload
    def removeAction(self, arg0: 'Action'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.removeAction(com.badlogic.gdx.scenes.scene2d.Action)"""
        super(__scene2d.Actor, self).removeAction(arg0)

    @overload
    def __init__(self, arg0: 'Skin'):
        """public com.badlogic.gdx.scenes.scene2d.ui.Table(com.badlogic.gdx.scenes.scene2d.ui.Skin)"""
        val = __Table(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def drawDebug(self, arg0: 'ShapeRenderer'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.drawDebug(com.badlogic.gdx.graphics.glutils.ShapeRenderer)"""
        super(__Table, self).drawDebug(arg0)

    @overload
    def padRight(self, arg0: 'Value') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padRight(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Table'.__wrap(super(__Table, self).padRight(arg0))

    @override
    @overload
    def getMaxWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.getMaxWidth()"""
        return float.__wrap(super(WidgetGroup, self).getMaxWidth())

    @override
    @overload
    def setX(self, arg0: float, arg1: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setX(float,int)"""
        super(__scene2d.Actor, self).setX(__float.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def getListeners(self) -> 'utils.DelayedRemovalArray':
        """public com.badlogic.gdx.utils.DelayedRemovalArray<com.badlogic.gdx.scenes.scene2d.EventListener> com.badlogic.gdx.scenes.scene2d.Actor.getListeners()"""
        return 'utils.DelayedRemovalArray'.__wrap(super(scene2d.Actor, self).getListeners())

    @overload
    def debugActor(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.debugActor()"""
        return 'Table'.__wrap(super(Table, self).debugActor())

    @overload
    def removeListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.removeListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).removeListener(arg0))

    @override
    @overload
    def isTouchFocusListener(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchFocusListener()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchFocusListener())

    @overload
    def localToStageCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToStageCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToStageCoordinates(arg0))

    @overload
    def getPadTop(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getPadTop()"""
        return float.__wrap(super(Table, self).getPadTop())

    @override
    @overload
    def clipBegin(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.clipBegin()"""
        return bool.__wrap(super(scene2d.Actor, self).clipBegin())

    @override
    @overload
    def moveBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.moveBy(float,float)"""
        super(__scene2d.Actor, self).moveBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def pad(self, arg0: float) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.pad(float)"""
        return 'Table'.__wrap(super(__Table, self).pad(__float.valueOf(arg0)))

    @overload
    def getPadBottomValue(self) -> 'Value':
        """public com.badlogic.gdx.scenes.scene2d.ui.Value com.badlogic.gdx.scenes.scene2d.ui.Table.getPadBottomValue()"""
        return 'Value'.__wrap(super(Table, self).getPadBottomValue())

    @override
    @overload
    def setName(self, arg0: str):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setName(java.lang.String)"""
        super(__scene2d.Actor, self).setName(arg0)

    @overload
    def getSkin(self) -> 'Skin':
        """public com.badlogic.gdx.scenes.scene2d.ui.Skin com.badlogic.gdx.scenes.scene2d.ui.Table.getSkin()"""
        return 'Skin'.__wrap(super(Table, self).getSkin())

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @overload
    def getRowMinHeight(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getRowMinHeight(int)"""
        return float.__wrap(super(__Table, self).getRowMinHeight(__int.valueOf(arg0)))

    @overload
    def swapActor(self, arg0: 'Actor', arg1: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.swapActor(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Group, self).swapActor(arg0, arg1))

    @override
    @overload
    def clearChildren(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.clearChildren(boolean)"""
        super(__Table, self).clearChildren(__boolean.valueOf(arg0))

    @override
    @overload
    def getDebug(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.getDebug()"""
        return bool.__wrap(super(scene2d.Actor, self).getDebug())

    @override
    @overload
    def setHeight(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setHeight(float)"""
        super(__scene2d.Actor, self).setHeight(__float.valueOf(arg0))

    @override
    @overload
    def setScale(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScale(float)"""
        super(__scene2d.Actor, self).setScale(__float.valueOf(arg0))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @overload
    def add(self, arg0: 'CharSequence') -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<com.badlogic.gdx.scenes.scene2d.ui.Label> com.badlogic.gdx.scenes.scene2d.ui.Table.add(java.lang.CharSequence)"""
        return 'Cell'.__wrap(super(__Table, self).add(arg0))

    @overload
    def bottom(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.bottom()"""
        return 'Table'.__wrap(super(Table, self).bottom())

    @overload
    def padBottom(self, arg0: float) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padBottom(float)"""
        return 'Table'.__wrap(super(__Table, self).padBottom(__float.valueOf(arg0)))

    @override
    @overload
    def setDebug(self, arg0: bool, arg1: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Group.setDebug(boolean,boolean)"""
        super(__scene2d.Group, self).setDebug(__boolean.valueOf(arg0), __boolean.valueOf(arg1))

    @overload
    def add(self) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell com.badlogic.gdx.scenes.scene2d.ui.Table.add()"""
        return 'Cell'.__wrap(super(Table, self).add())

    @overload
    def background(self, arg0: 'Drawable') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.background(com.badlogic.gdx.scenes.scene2d.utils.Drawable)"""
        return 'Table'.__wrap(super(__Table, self).background(arg0))

    @overload
    def getPadRight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getPadRight()"""
        return float.__wrap(super(Table, self).getPadRight())

    @override
    @overload
    def setTransform(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Group.setTransform(boolean)"""
        super(__scene2d.Group, self).setTransform(__boolean.valueOf(arg0))

    @overload
    def parentToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.parentToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).parentToLocalCoordinates(arg0))

    @override
    @overload
    def getRotation(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getRotation()"""
        return float.__wrap(super(scene2d.Actor, self).getRotation())

    @override
    @overload
    def getMaxHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.getMaxHeight()"""
        return float.__wrap(super(WidgetGroup, self).getMaxHeight())

    @overload
    def padTop(self, arg0: float) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padTop(float)"""
        return 'Table'.__wrap(super(__Table, self).padTop(__float.valueOf(arg0)))

    @overload
    def padLeft(self, arg0: 'Value') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padLeft(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Table'.__wrap(super(__Table, self).padLeft(arg0))

    @override
    @overload
    def getPrefWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getPrefWidth()"""
        return float.__wrap(super(Table, self).getPrefWidth())

    @overload
    def getCells(self) -> 'utils.Array':
        """public com.badlogic.gdx.utils.Array<com.badlogic.gdx.scenes.scene2d.ui.Cell> com.badlogic.gdx.scenes.scene2d.ui.Table.getCells()"""
        return 'utils.Array'.__wrap(super(Table, self).getCells())

    @override
    @overload
    def addActor(self, arg0: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.addActor(com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__scene2d.Group, self).addActor(arg0)

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def pad(self, arg0: float, arg1: float, arg2: float, arg3: float) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.pad(float,float,float,float)"""
        return 'Table'.__wrap(super(__Table, self).pad(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3)))

    @overload
    def add(self, arg0: 'CharSequence', arg1: str) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<com.badlogic.gdx.scenes.scene2d.ui.Label> com.badlogic.gdx.scenes.scene2d.ui.Table.add(java.lang.CharSequence,java.lang.String)"""
        return 'Cell'.__wrap(super(__Table, self).add(arg0, arg1))

    @overload
    def debugTable(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.debugTable()"""
        return 'Table'.__wrap(super(Table, self).debugTable())

    @override
    @overload
    def setWidth(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setWidth(float)"""
        super(__scene2d.Actor, self).setWidth(__float.valueOf(arg0))

    @override
    @overload
    def isTouchFocusTarget(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchFocusTarget()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchFocusTarget())

    @override
    @overload
    def setPosition(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setPosition(float,float)"""
        super(__scene2d.Actor, self).setPosition(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def addActorAt(self, arg0: int, arg1: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.addActorAt(int,com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__scene2d.Group, self).addActorAt(__int.valueOf(arg0), arg1)

    @overload
    def hit(self, arg0: float, arg1: float, arg2: bool) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.ui.Table.hit(float,float,boolean)"""
        return 'scene2d.Actor'.__wrap(super(__Table, self).hit(__float.valueOf(arg0), __float.valueOf(arg1), __boolean.valueOf(arg2)))

    @override
    @overload
    def setOriginY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOriginY(float)"""
        super(__scene2d.Actor, self).setOriginY(__float.valueOf(arg0))

    @overload
    def getPadBottom(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getPadBottom()"""
        return float.__wrap(super(Table, self).getPadBottom())

    @overload
    def localToScreenCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToScreenCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToScreenCoordinates(arg0))

    @override
    @overload
    def clear(self):
        """public void com.badlogic.gdx.scenes.scene2d.Group.clear()"""
        super(scene2d.Group, self).clear()

    @overload
    def stack(self, *arg0: 'scene2d.Actor') -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<com.badlogic.gdx.scenes.scene2d.ui.Stack> com.badlogic.gdx.scenes.scene2d.ui.Table.stack(com.badlogic.gdx.scenes.scene2d.Actor...)"""
        return 'Cell'.__wrap(super(__Table, self).stack(arg0))

    @override
    @overload
    def setTouchable(self, arg0: 'Touchable'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setTouchable(com.badlogic.gdx.scenes.scene2d.Touchable)"""
        super(__scene2d.Actor, self).setTouchable(arg0)

    @overload
    def getColumnWidth(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getColumnWidth(int)"""
        return float.__wrap(super(__Table, self).getColumnWidth(__int.valueOf(arg0)))

    @override
    @overload
    def clearChildren(self):
        """public void com.badlogic.gdx.scenes.scene2d.Group.clearChildren()"""
        super(scene2d.Group, self).clearChildren()

    @override
    @overload
    def debugAll(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.debugAll()"""
        return 'Table'.__wrap(super(Table, self).debugAll())

    @overload
    def defaults(self) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell com.badlogic.gdx.scenes.scene2d.ui.Table.defaults()"""
        return 'Cell'.__wrap(super(Table, self).defaults())

    @overload
    def localToParentCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToParentCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToParentCoordinates(arg0))

    @override
    @overload
    def setCullingArea(self, arg0: 'Rectangle'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.setCullingArea(com.badlogic.gdx.math.Rectangle)"""
        super(__scene2d.Group, self).setCullingArea(arg0)

    @override
    @overload
    def getName(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.Actor.getName()"""
        return str.__wrap(super(scene2d.Actor, self).getName())

    @overload
    def reset(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.reset()"""
        super(Table, self).reset()

    @override
    @overload
    def getCaptureListeners(self) -> 'utils.DelayedRemovalArray':
        """public com.badlogic.gdx.utils.DelayedRemovalArray<com.badlogic.gdx.scenes.scene2d.EventListener> com.badlogic.gdx.scenes.scene2d.Actor.getCaptureListeners()"""
        return 'utils.DelayedRemovalArray'.__wrap(super(scene2d.Actor, self).getCaptureListeners())

    @overload
    def padBottom(self, arg0: 'Value') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padBottom(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Table'.__wrap(super(__Table, self).padBottom(arg0))

    @overload
    def setClip(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.setClip(boolean)"""
        super(__Table, self).setClip(__boolean.valueOf(arg0))

    @override
    @overload
    def clear(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Group.clear(boolean)"""
        super(__scene2d.Group, self).clear(__boolean.valueOf(arg0))

    @override
    @overload
    def setY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setY(float)"""
        super(__scene2d.Actor, self).setY(__float.valueOf(arg0))

    @override
    @overload
    def addActorAfter(self, arg0: 'Actor', arg1: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.addActorAfter(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__scene2d.Group, self).addActorAfter(arg0, arg1)

    @override
    @overload
    def scaleBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.scaleBy(float,float)"""
        super(__scene2d.Actor, self).scaleBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def align(self, arg0: int) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.align(int)"""
        return 'Table'.__wrap(super(__Table, self).align(__int.valueOf(arg0)))

    @overload
    def notify(self, arg0: 'Event', arg1: bool) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.notify(com.badlogic.gdx.scenes.scene2d.Event,boolean)"""
        return bool.__wrap(super(__scene2d.Actor, self).notify(arg0, __boolean.valueOf(arg1)))

    @overload
    def setSkin(self, arg0: 'Skin'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.setSkin(com.badlogic.gdx.scenes.scene2d.ui.Skin)"""
        super(__Table, self).setSkin(arg0)

    @override
    @overload
    def act(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Group.act(float)"""
        super(__scene2d.Group, self).act(__float.valueOf(arg0))

    @override
    @overload
    def setUserObject(self, arg0: object):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setUserObject(java.lang.Object)"""
        super(__scene2d.Actor, self).setUserObject(arg0)

    @override
    @overload
    def hasScrollFocus(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasScrollFocus()"""
        return bool.__wrap(super(scene2d.Actor, self).hasScrollFocus())

    @override
    @overload
    def toFront(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.toFront()"""
        super(scene2d.Actor, self).toFront()

    @override
    @overload
    def scaleBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.scaleBy(float)"""
        super(__scene2d.Actor, self).scaleBy(__float.valueOf(arg0))

    @override
    @overload
    def getOriginX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getOriginX()"""
        return float.__wrap(super(scene2d.Actor, self).getOriginX())

    @overload
    def getRow(self, arg0: float) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.ui.Table.getRow(float)"""
        return int.__wrap(super(__Table, self).getRow(__float.valueOf(arg0)))

    @override
    @overload
    def getMinWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getMinWidth()"""
        return float.__wrap(super(Table, self).getMinWidth())

    @overload
    def getChild(self, arg0: int) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.Group.getChild(int)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Group, self).getChild(__int.valueOf(arg0)))

    @override
    @overload
    def setDebug(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.setDebug(boolean)"""
        super(__Table, self).setDebug(__boolean.valueOf(arg0))

    @overload
    def getTableDebug(self) -> 'Debug':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table$Debug com.badlogic.gdx.scenes.scene2d.ui.Table.getTableDebug()"""
        return 'Debug'.__wrap(super(Table, self).getTableDebug())

    @overload
    def pad(self, arg0: 'Value', arg1: 'Value', arg2: 'Value', arg3: 'Value') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.pad(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Table'.__wrap(super(__Table, self).pad(arg0, arg1, arg2, arg3))

    @overload
    def add(self, arg0: 'CharSequence', arg1: str, arg2: 'Color') -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<com.badlogic.gdx.scenes.scene2d.ui.Label> com.badlogic.gdx.scenes.scene2d.ui.Table.add(java.lang.CharSequence,java.lang.String,com.badlogic.gdx.graphics.Color)"""
        return 'Cell'.__wrap(super(__Table, self).add(arg0, arg1, arg2))

    @override
    @overload
    def getStage(self) -> 'scene2d.Stage':
        """public com.badlogic.gdx.scenes.scene2d.Stage com.badlogic.gdx.scenes.scene2d.Actor.getStage()"""
        return 'scene2d.Stage'.__wrap(super(scene2d.Actor, self).getStage())

    @overload
    def setRound(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.setRound(boolean)"""
        super(__Table, self).setRound(__boolean.valueOf(arg0))

    @override
    @overload
    def addAction(self, arg0: 'Action'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.addAction(com.badlogic.gdx.scenes.scene2d.Action)"""
        super(__scene2d.Actor, self).addAction(arg0)

    @override
    @overload
    def setColor(self, arg0: float, arg1: float, arg2: float, arg3: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setColor(float,float,float,float)"""
        super(__scene2d.Actor, self).setColor(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3))

    @overload
    def getColumnMinWidth(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getColumnMinWidth(int)"""
        return float.__wrap(super(__Table, self).getColumnMinWidth(__int.valueOf(arg0)))

    @overload
    def localToAscendantCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToAscendantCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToAscendantCoordinates(arg0, arg1))

    @override
    @overload
    def getActions(self) -> 'utils.Array':
        """public com.badlogic.gdx.utils.Array<com.badlogic.gdx.scenes.scene2d.Action> com.badlogic.gdx.scenes.scene2d.Actor.getActions()"""
        return 'utils.Array'.__wrap(super(scene2d.Actor, self).getActions())

    @overload
    def add(self, *arg0: 'scene2d.Actor') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.add(com.badlogic.gdx.scenes.scene2d.Actor...)"""
        return 'Table'.__wrap(super(__Table, self).add(arg0))

    @overload
    def localToDescendantCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Group.localToDescendantCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Group, self).localToDescendantCoordinates(arg0, arg1))

    @overload
    def padRight(self, arg0: float) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padRight(float)"""
        return 'Table'.__wrap(super(__Table, self).padRight(__float.valueOf(arg0)))

    @overload
    def setZIndex(self, arg0: int) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.setZIndex(int)"""
        return bool.__wrap(super(__scene2d.Actor, self).setZIndex(__int.valueOf(arg0)))

    @overload
    def padLeft(self, arg0: float) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padLeft(float)"""
        return 'Table'.__wrap(super(__Table, self).padLeft(__float.valueOf(arg0)))

    @overload
    def getX(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getX(int)"""
        return float.__wrap(super(__scene2d.Actor, self).getX(__int.valueOf(arg0)))

    @override
    @overload
    def sizeBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.sizeBy(float)"""
        super(__scene2d.Actor, self).sizeBy(__float.valueOf(arg0))

    @overload
    def getPadX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getPadX()"""
        return float.__wrap(super(Table, self).getPadX())

    @overload
    def getRowPrefHeight(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getRowPrefHeight(int)"""
        return float.__wrap(super(__Table, self).getRowPrefHeight(__int.valueOf(arg0)))

    @override
    @overload
    def sizeBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.sizeBy(float,float)"""
        super(__scene2d.Actor, self).sizeBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def hasActions(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasActions()"""
        return bool.__wrap(super(scene2d.Actor, self).hasActions())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0))

    @overload
    def getAlign(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.ui.Table.getAlign()"""
        return int.__wrap(super(Table, self).getAlign())

    @override
    @overload
    def setScaleX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScaleX(float)"""
        super(__scene2d.Actor, self).setScaleX(__float.valueOf(arg0))

    @overload
    def removeActor(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Table.removeActor(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__Table, self).removeActor(arg0))

    @override
    @overload
    def getX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getX()"""
        return float.__wrap(super(scene2d.Actor, self).getX())

    @overload
    def add(self, arg0: 'Actor') -> 'Cell':
        """public <T extends com.badlogic.gdx.scenes.scene2d.Actor> com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Table.add(T)"""
        return 'Cell'.__wrap(super(__Table, self).add(arg0))

    @override
    @overload
    def toBack(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.toBack()"""
        super(scene2d.Actor, self).toBack()

    @override
    @overload
    def debug(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.debug()"""
        return 'Table'.__wrap(super(Table, self).debug())

    @overload
    def getPadLeftValue(self) -> 'Value':
        """public com.badlogic.gdx.scenes.scene2d.ui.Value com.badlogic.gdx.scenes.scene2d.ui.Table.getPadLeftValue()"""
        return 'Value'.__wrap(super(Table, self).getPadLeftValue())

    @overload
    def screenToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.screenToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).screenToLocalCoordinates(arg0))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def ancestorsVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.ancestorsVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).ancestorsVisible())

    @overload
    def row(self) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell com.badlogic.gdx.scenes.scene2d.ui.Table.row()"""
        return 'Cell'.__wrap(super(Table, self).row())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def setSize(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setSize(float,float)"""
        super(__scene2d.Actor, self).setSize(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def layout(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.layout()"""
        super(Table, self).layout()

    @override
    @overload
    def getZIndex(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.Actor.getZIndex()"""
        return int.__wrap(super(scene2d.Actor, self).getZIndex())

    @overload
    def getY(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getY(int)"""
        return float.__wrap(super(__scene2d.Actor, self).getY(__int.valueOf(arg0)))

    @override
    @overload
    def setOrigin(self, arg0: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOrigin(int)"""
        super(__scene2d.Actor, self).setOrigin(__int.valueOf(arg0))

    @override
    @overload
    def validate(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.validate()"""
        super(WidgetGroup, self).validate()

    @overload
    def isDescendantOf(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isDescendantOf(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Actor, self).isDescendantOf(arg0))

    @override
    @overload
    def addActorBefore(self, arg0: 'Actor', arg1: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.addActorBefore(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__scene2d.Group, self).addActorBefore(arg0, arg1)

    @override
    @overload
    def getParent(self) -> 'scene2d.Group':
        """public com.badlogic.gdx.scenes.scene2d.Group com.badlogic.gdx.scenes.scene2d.Actor.getParent()"""
        return 'scene2d.Group'.__wrap(super(scene2d.Actor, self).getParent())

    @override
    @overload
    def clearListeners(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clearListeners()"""
        super(scene2d.Actor, self).clearListeners()

    @overload
    def localToActorCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToActorCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToActorCoordinates(arg0, arg1))

    @override
    @overload
    def setOriginX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOriginX(float)"""
        super(__scene2d.Actor, self).setOriginX(__float.valueOf(arg0))

    @overload
    def removeActorAt(self, arg0: int, arg1: bool) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.ui.Table.removeActorAt(int,boolean)"""
        return 'scene2d.Actor'.__wrap(super(__Table, self).removeActorAt(__int.valueOf(arg0), __boolean.valueOf(arg1)))

    @override
    @overload
    def getHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getHeight()"""
        return float.__wrap(super(scene2d.Actor, self).getHeight())

    @overload
    def getPadTopValue(self) -> 'Value':
        """public com.badlogic.gdx.scenes.scene2d.ui.Value com.badlogic.gdx.scenes.scene2d.ui.Table.getPadTopValue()"""
        return 'Value'.__wrap(super(Table, self).getPadTopValue())

    @override
    @overload
    def hasKeyboardFocus(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasKeyboardFocus()"""
        return bool.__wrap(super(scene2d.Actor, self).hasKeyboardFocus())

    @override
    @overload
    def getOriginY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getOriginY()"""
        return float.__wrap(super(scene2d.Actor, self).getOriginY())

    @overload
    def debugCell(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.debugCell()"""
        return 'Table'.__wrap(super(Table, self).debugCell())

    @override
    @overload
    def pack(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.pack()"""
        super(WidgetGroup, self).pack()

    @override
    @overload
    def clipEnd(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clipEnd()"""
        super(scene2d.Actor, self).clipEnd()

    @override
    @overload
    def getUserObject(self) -> object:
        """public java.lang.Object com.badlogic.gdx.scenes.scene2d.Actor.getUserObject()"""
        return object.__wrap(super(scene2d.Actor, self).getUserObject())

    @override
    @overload
    def rotateBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.rotateBy(float)"""
        super(__scene2d.Actor, self).rotateBy(__float.valueOf(arg0))

    @override
    @overload
    def draw(self, arg0: 'Batch', arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.draw(com.badlogic.gdx.graphics.g2d.Batch,float)"""
        super(__Table, self).draw(arg0, __float.valueOf(arg1))

    @overload
    def background(self, arg0: str) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.background(java.lang.String)"""
        return 'Table'.__wrap(super(__Table, self).background(arg0))

    @overload
    def getRowHeight(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getRowHeight(int)"""
        return float.__wrap(super(__Table, self).getRowHeight(__int.valueOf(arg0)))

    @overload
    def getRows(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.ui.Table.getRows()"""
        return int.__wrap(super(Table, self).getRows())

    @override
    @overload
    def setScale(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScale(float,float)"""
        super(__scene2d.Actor, self).setScale(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def addListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.addListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).addListener(arg0))

    @overload
    def left(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.left()"""
        return 'Table'.__wrap(super(Table, self).left())

    @overload
    def debug(self, arg0: 'Debug') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.debug(com.badlogic.gdx.scenes.scene2d.ui.Table$Debug)"""
        return 'Table'.__wrap(super(__Table, self).debug(arg0))

    @overload
    def clip(self, arg0: bool) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.clip(boolean)"""
        return 'Table'.__wrap(super(__Table, self).clip(__boolean.valueOf(arg0)))

    @override
    @overload
    def invalidate(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.invalidate()"""
        super(Table, self).invalidate()

    @override
    @overload
    def setVisible(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setVisible(boolean)"""
        super(__scene2d.Actor, self).setVisible(__boolean.valueOf(arg0))

    @override
    @overload
    def setY(self, arg0: float, arg1: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setY(float,int)"""
        super(__scene2d.Actor, self).setY(__float.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def setBackground(self, arg0: 'Drawable'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.setBackground(com.badlogic.gdx.scenes.scene2d.utils.Drawable)"""
        super(__Table, self).setBackground(arg0)

    @override
    @overload
    def setFillParent(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.setFillParent(boolean)"""
        super(__WidgetGroup, self).setFillParent(__boolean.valueOf(arg0))

    @overload
    def getCell(self, arg0: 'Actor') -> 'Cell':
        """public <T extends com.badlogic.gdx.scenes.scene2d.Actor> com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Table.getCell(T)"""
        return 'Cell'.__wrap(super(__Table, self).getCell(arg0))

    @override
    @overload
    def getMinHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getMinHeight()"""
        return float.__wrap(super(Table, self).getMinHeight())

    @override
    @overload
    def needsLayout(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.needsLayout()"""
        return bool.__wrap(super(WidgetGroup, self).needsLayout())

    @override
    @overload
    def setX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setX(float)"""
        super(__scene2d.Actor, self).setX(__float.valueOf(arg0))

    @overload
    def __init__(self):
        """public com.badlogic.gdx.scenes.scene2d.ui.Table()"""
        val = __Table()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def setOrigin(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOrigin(float,float)"""
        super(__scene2d.Actor, self).setOrigin(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def getCullingArea(self) -> 'math.Rectangle':
        """public com.badlogic.gdx.math.Rectangle com.badlogic.gdx.scenes.scene2d.Group.getCullingArea()"""
        return 'math.Rectangle'.__wrap(super(scene2d.Group, self).getCullingArea())

    @override
    @overload
    def getRight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getRight()"""
        return float.__wrap(super(scene2d.Actor, self).getRight())

    @overload
    def isAscendantOf(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isAscendantOf(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Actor, self).isAscendantOf(arg0))

    @override
    @overload
    def hasParent(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasParent()"""
        return bool.__wrap(super(scene2d.Actor, self).hasParent())

    @overload
    def right(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.right()"""
        return 'Table'.__wrap(super(Table, self).right())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.Group.toString()"""
        return str.__wrap(super(scene2d.Group, self).toString())

    @override
    @overload
    def getChildren(self) -> 'utils.SnapshotArray':
        """public com.badlogic.gdx.utils.SnapshotArray<com.badlogic.gdx.scenes.scene2d.Actor> com.badlogic.gdx.scenes.scene2d.Group.getChildren()"""
        return 'utils.SnapshotArray'.__wrap(super(scene2d.Group, self).getChildren())

    @overload
    def center(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.center()"""
        return 'Table'.__wrap(super(Table, self).center())

    @override
    @overload
    def getScaleY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getScaleY()"""
        return float.__wrap(super(scene2d.Actor, self).getScaleY())

    @overload
    def clip(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.clip()"""
        return 'Table'.__wrap(super(Table, self).clip())

    @overload
    def setBackground(self, arg0: str):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.setBackground(java.lang.String)"""
        super(__Table, self).setBackground(arg0)

    @override
    @overload
    def getWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getWidth()"""
        return float.__wrap(super(scene2d.Actor, self).getWidth())

    @override
    @overload
    def setPosition(self, arg0: float, arg1: float, arg2: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setPosition(float,float,int)"""
        super(__scene2d.Actor, self).setPosition(__float.valueOf(arg0), __float.valueOf(arg1), __int.valueOf(arg2))

    @override
    @overload
    def setLayoutEnabled(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.setLayoutEnabled(boolean)"""
        super(__WidgetGroup, self).setLayoutEnabled(__boolean.valueOf(arg0))

    @overload
    def removeCaptureListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.removeCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).removeCaptureListener(arg0))

    @override
    @overload
    def invalidateHierarchy(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.invalidateHierarchy()"""
        super(WidgetGroup, self).invalidateHierarchy()

    @override
    @overload
    def setColor(self, arg0: 'Color'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setColor(com.badlogic.gdx.graphics.Color)"""
        super(__scene2d.Actor, self).setColor(arg0)

    @overload
    def getPadLeft(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getPadLeft()"""
        return float.__wrap(super(Table, self).getPadLeft())

    @overload
    def addCaptureListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.addCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).addCaptureListener(arg0))

    @overload
    def fire(self, arg0: 'Event') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.fire(com.badlogic.gdx.scenes.scene2d.Event)"""
        return bool.__wrap(super(__scene2d.Actor, self).fire(arg0))

    @override
    @overload
    def getPrefHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getPrefHeight()"""
        return float.__wrap(super(Table, self).getPrefHeight())

    @overload
    def columnDefaults(self, arg0: int) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell com.badlogic.gdx.scenes.scene2d.ui.Table.columnDefaults(int)"""
        return 'Cell'.__wrap(super(__Table, self).columnDefaults(__int.valueOf(arg0)))

    @override
    @overload
    def remove(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.remove()"""
        return bool.__wrap(super(scene2d.Actor, self).remove())

    @overload
    def getClip(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Table.getClip()"""
        return bool.__wrap(super(Table, self).getClip())

    @override
    @overload
    def isVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).isVisible())

    @overload
    def pad(self, arg0: 'Value') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.pad(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Table'.__wrap(super(__Table, self).pad(arg0))

    @overload
    def getColumns(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.ui.Table.getColumns()"""
        return int.__wrap(super(Table, self).getColumns())

    @overload
    def getBackground(self) -> 'utils.Drawable':
        """public com.badlogic.gdx.scenes.scene2d.utils.Drawable com.badlogic.gdx.scenes.scene2d.ui.Table.getBackground()"""
        return 'utils.Drawable'.__wrap(super(Table, self).getBackground())

    @override
    @overload
    def getTop(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getTop()"""
        return float.__wrap(super(scene2d.Actor, self).getTop())

    @override
    @overload
    def clearActions(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clearActions()"""
        super(scene2d.Actor, self).clearActions()

    @override
    @overload
    def setRotation(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setRotation(float)"""
        super(__scene2d.Actor, self).setRotation(__float.valueOf(arg0))

    @override
    @overload
    def getScaleX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getScaleX()"""
        return float.__wrap(super(scene2d.Actor, self).getScaleX())

    @overload
    def firstAscendant(self, arg0: 'Class') -> 'scene2d.Actor':
        """public <T extends com.badlogic.gdx.scenes.scene2d.Actor> T com.badlogic.gdx.scenes.scene2d.Actor.firstAscendant(java.lang.Class<T>)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Actor, self).firstAscendant(arg0))

    @override
    @overload
    def setScaleY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScaleY(float)"""
        super(__scene2d.Actor, self).setScaleY(__float.valueOf(arg0))

    @overload
    def stageToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.stageToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).stageToLocalCoordinates(arg0))

    @overload
    def swapActor(self, arg0: int, arg1: int) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.swapActor(int,int)"""
        return bool.__wrap(super(__scene2d.Group, self).swapActor(__int.valueOf(arg0), __int.valueOf(arg1)))

    @overload
    def getPadRightValue(self) -> 'Value':
        """public com.badlogic.gdx.scenes.scene2d.ui.Value com.badlogic.gdx.scenes.scene2d.ui.Table.getPadRightValue()"""
        return 'Value'.__wrap(super(Table, self).getPadRightValue())

    @override
    @overload
    def hasChildren(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.hasChildren()"""
        return bool.__wrap(super(scene2d.Group, self).hasChildren())

    @override
    @overload
    def ascendantsVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.ascendantsVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).ascendantsVisible())

    @overload
    def __init__(self, ):
        """public com.badlogic.gdx.scenes.scene2d.ui.Table()"""
        val = __Table()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def padTop(self, arg0: 'Value') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padTop(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Table'.__wrap(super(__Table, self).padTop(arg0))

    @override
    @overload
    def getColor(self) -> 'graphics.Color':
        """public com.badlogic.gdx.graphics.Color com.badlogic.gdx.scenes.scene2d.Actor.getColor()"""
        return 'graphics.Color'.__wrap(super(scene2d.Actor, self).getColor())

    @override
    @overload
    def isTransform(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.isTransform()"""
        return bool.__wrap(super(scene2d.Group, self).isTransform())

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @override
    @overload
    def isTouchable(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchable()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchable())

    @overload
    def clipBegin(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.clipBegin(float,float,float,float)"""
        return bool.__wrap(super(__scene2d.Actor, self).clipBegin(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3))) 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup
from pyquantum_helper import import_once as __import_once__
import com.badlogic.gdx.scenes.scene2d.Touchable as __Touchable
__Touchable = __Touchable
try:
    from pygdx.scenes import scene2d
except ImportError:
    scene2d = __import_once__("pygdx.scenes.scene2d")

import com.badlogic.gdx.graphics.Color as __Color
__Color = __Color
import java.lang.Boolean as __boolean
try:
    from pygdx.graphics import g2d
except ImportError:
    g2d = __import_once__("pygdx.graphics.g2d")

from builtins import type
import com.badlogic.gdx.scenes.scene2d.Group as __Group
__Group = __Group
import com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup as __WidgetGroup
__WidgetGroup = __WidgetGroup
import com.badlogic.gdx.math.Vector2 as __Vector2
__Vector2 = __Vector2
import com.badlogic.gdx.math.Rectangle as __Rectangle
__Rectangle = __Rectangle
import java.lang.Class as __Class
__Class = __Class
import com.badlogic.gdx.utils.Array as __Array
__Array = __Array
import java.lang.String as __string
try:
    from pygdx import math
except ImportError:
    math = __import_once__("pygdx.math")

from builtins import bool
import com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup as __HorizontalGroup
__HorizontalGroup = __HorizontalGroup
from builtins import str
try:
    from pygdx import utils
except ImportError:
    utils = __import_once__("pygdx.utils")

from pyquantum_helper import override
import java.lang.Object as __object
from builtins import float
from builtins import object
import com.badlogic.gdx.utils.DelayedRemovalArray as __DelayedRemovalArray
__DelayedRemovalArray = __DelayedRemovalArray
import java.lang.Long as __long
import java.lang.Float as __float
import java.lang.String as __String
__String = __String
try:
    from pygdx.graphics import glutils
except ImportError:
    glutils = __import_once__("pygdx.graphics.glutils")

import java.lang.Object as __Object
__Object = __Object
import com.badlogic.gdx.utils.SnapshotArray as __SnapshotArray
__SnapshotArray = __SnapshotArray
import com.badlogic.gdx.scenes.scene2d.Actor as __Actor
__Actor = __Actor
import java.lang.Integer as __int
import com.badlogic.gdx.scenes.scene2d.Stage as __Stage
__Stage = __Stage
try:
    from pygdx import graphics
except ImportError:
    graphics = __import_once__("pygdx.graphics")

from builtins import int
 
class HorizontalGroup(__WidgetGroup, WidgetGroup):
    """com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup"""
 
    @staticmethod
    def __wrap(java_value: __HorizontalGroup) -> 'HorizontalGroup':
        return HorizontalGroup(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __HorizontalGroup):
        """
        Dynamic initializer for HorizontalGroup.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def getY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getY()"""
        return float.__wrap(super(scene2d.Actor, self).getY())

    @overload
    def right(self) -> 'HorizontalGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup.right()"""
        return 'HorizontalGroup'.__wrap(super(HorizontalGroup, self).right())

    @overload
    def left(self) -> 'HorizontalGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup.left()"""
        return 'HorizontalGroup'.__wrap(super(HorizontalGroup, self).left())

    @override
    @overload
    def setBounds(self, arg0: float, arg1: float, arg2: float, arg3: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setBounds(float,float,float,float)"""
        super(__scene2d.Actor, self).setBounds(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def findActor(self, arg0: str) -> 'scene2d.Actor':
        """public <T extends com.badlogic.gdx.scenes.scene2d.Actor> T com.badlogic.gdx.scenes.scene2d.Group.findActor(java.lang.String)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Group, self).findActor(arg0))

    @override
    @overload
    def getTouchable(self) -> 'scene2d.Touchable':
        """public com.badlogic.gdx.scenes.scene2d.Touchable com.badlogic.gdx.scenes.scene2d.Actor.getTouchable()"""
        return 'scene2d.Touchable'.__wrap(super(scene2d.Actor, self).getTouchable())

    @override
    @overload
    def removeAction(self, arg0: 'Action'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.removeAction(com.badlogic.gdx.scenes.scene2d.Action)"""
        super(__scene2d.Actor, self).removeAction(arg0)

    @overload
    def grow(self) -> 'HorizontalGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup.grow()"""
        return 'HorizontalGroup'.__wrap(super(HorizontalGroup, self).grow())

    @override
    @overload
    def getMaxWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.getMaxWidth()"""
        return float.__wrap(super(WidgetGroup, self).getMaxWidth())

    @override
    @overload
    def setDebug(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setDebug(boolean)"""
        super(__scene2d.Actor, self).setDebug(__boolean.valueOf(arg0))

    @overload
    def expand(self, arg0: bool) -> 'HorizontalGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup.expand(boolean)"""
        return 'HorizontalGroup'.__wrap(super(__HorizontalGroup, self).expand(__boolean.valueOf(arg0)))

    @override
    @overload
    def setX(self, arg0: float, arg1: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setX(float,int)"""
        super(__scene2d.Actor, self).setX(__float.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def getListeners(self) -> 'utils.DelayedRemovalArray':
        """public com.badlogic.gdx.utils.DelayedRemovalArray<com.badlogic.gdx.scenes.scene2d.EventListener> com.badlogic.gdx.scenes.scene2d.Actor.getListeners()"""
        return 'utils.DelayedRemovalArray'.__wrap(super(scene2d.Actor, self).getListeners())

    @overload
    def removeListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.removeListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).removeListener(arg0))

    @override
    @overload
    def isTouchFocusListener(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchFocusListener()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchFocusListener())

    @overload
    def localToStageCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToStageCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToStageCoordinates(arg0))

    @override
    @overload
    def clipBegin(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.clipBegin()"""
        return bool.__wrap(super(scene2d.Actor, self).clipBegin())

    @overload
    def getRows(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup.getRows()"""
        return int.__wrap(super(HorizontalGroup, self).getRows())

    @override
    @overload
    def moveBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.moveBy(float,float)"""
        super(__scene2d.Actor, self).moveBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def top(self) -> 'HorizontalGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup.top()"""
        return 'HorizontalGroup'.__wrap(super(HorizontalGroup, self).top())

    @override
    @overload
    def setName(self, arg0: str):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setName(java.lang.String)"""
        super(__scene2d.Actor, self).setName(arg0)

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @overload
    def swapActor(self, arg0: 'Actor', arg1: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.swapActor(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Group, self).swapActor(arg0, arg1))

    @overload
    def reverse(self, arg0: bool) -> 'HorizontalGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup.reverse(boolean)"""
        return 'HorizontalGroup'.__wrap(super(__HorizontalGroup, self).reverse(__boolean.valueOf(arg0)))

    @overload
    def getPadBottom(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup.getPadBottom()"""
        return float.__wrap(super(HorizontalGroup, self).getPadBottom())

    @overload
    def rowTop(self) -> 'HorizontalGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup.rowTop()"""
        return 'HorizontalGroup'.__wrap(super(HorizontalGroup, self).rowTop())

    @override
    @overload
    def getMinWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.getMinWidth()"""
        return float.__wrap(super(WidgetGroup, self).getMinWidth())

    @override
    @overload
    def getDebug(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.getDebug()"""
        return bool.__wrap(super(scene2d.Actor, self).getDebug())

    @override
    @overload
    def setHeight(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setHeight(float)"""
        super(__scene2d.Actor, self).setHeight(__float.valueOf(arg0))

    @override
    @overload
    def setScale(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScale(float)"""
        super(__scene2d.Actor, self).setScale(__float.valueOf(arg0))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @overload
    def getWrap(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup.getWrap()"""
        return bool.__wrap(super(HorizontalGroup, self).getWrap())

    @override
    @overload
    def setDebug(self, arg0: bool, arg1: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Group.setDebug(boolean,boolean)"""
        super(__scene2d.Group, self).setDebug(__boolean.valueOf(arg0), __boolean.valueOf(arg1))

    @overload
    def padLeft(self, arg0: float) -> 'HorizontalGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup.padLeft(float)"""
        return 'HorizontalGroup'.__wrap(super(__HorizontalGroup, self).padLeft(__float.valueOf(arg0)))

    @override
    @overload
    def setTransform(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Group.setTransform(boolean)"""
        super(__scene2d.Group, self).setTransform(__boolean.valueOf(arg0))

    @overload
    def parentToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.parentToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).parentToLocalCoordinates(arg0))

    @override
    @overload
    def getRotation(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getRotation()"""
        return float.__wrap(super(scene2d.Actor, self).getRotation())

    @overload
    def bottom(self) -> 'HorizontalGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup.bottom()"""
        return 'HorizontalGroup'.__wrap(super(HorizontalGroup, self).bottom())

    @override
    @overload
    def getMaxHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.getMaxHeight()"""
        return float.__wrap(super(WidgetGroup, self).getMaxHeight())

    @overload
    def expand(self) -> 'HorizontalGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup.expand()"""
        return 'HorizontalGroup'.__wrap(super(HorizontalGroup, self).expand())

    @override
    @overload
    def addActor(self, arg0: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.addActor(com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__scene2d.Group, self).addActor(arg0)

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def space(self, arg0: float) -> 'HorizontalGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup.space(float)"""
        return 'HorizontalGroup'.__wrap(super(__HorizontalGroup, self).space(__float.valueOf(arg0)))

    @overload
    def center(self) -> 'HorizontalGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup.center()"""
        return 'HorizontalGroup'.__wrap(super(HorizontalGroup, self).center())

    @override
    @overload
    def setWidth(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setWidth(float)"""
        super(__scene2d.Actor, self).setWidth(__float.valueOf(arg0))

    @override
    @overload
    def isTouchFocusTarget(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchFocusTarget()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchFocusTarget())

    @override
    @overload
    def setPosition(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setPosition(float,float)"""
        super(__scene2d.Actor, self).setPosition(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def addActorAt(self, arg0: int, arg1: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.addActorAt(int,com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__scene2d.Group, self).addActorAt(__int.valueOf(arg0), arg1)

    @override
    @overload
    def setOriginY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOriginY(float)"""
        super(__scene2d.Actor, self).setOriginY(__float.valueOf(arg0))

    @overload
    def localToScreenCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToScreenCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToScreenCoordinates(arg0))

    @override
    @overload
    def clear(self):
        """public void com.badlogic.gdx.scenes.scene2d.Group.clear()"""
        super(scene2d.Group, self).clear()

    @overload
    def removeActor(self, arg0: 'Actor', arg1: bool) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.removeActor(com.badlogic.gdx.scenes.scene2d.Actor,boolean)"""
        return bool.__wrap(super(__scene2d.Group, self).removeActor(arg0, __boolean.valueOf(arg1)))

    @override
    @overload
    def setTouchable(self, arg0: 'Touchable'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setTouchable(com.badlogic.gdx.scenes.scene2d.Touchable)"""
        super(__scene2d.Actor, self).setTouchable(arg0)

    @overload
    def rowCenter(self) -> 'HorizontalGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup.rowCenter()"""
        return 'HorizontalGroup'.__wrap(super(HorizontalGroup, self).rowCenter())

    @override
    @overload
    def clearChildren(self):
        """public void com.badlogic.gdx.scenes.scene2d.Group.clearChildren()"""
        super(scene2d.Group, self).clearChildren()

    @overload
    def localToParentCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToParentCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToParentCoordinates(arg0))

    @override
    @overload
    def setCullingArea(self, arg0: 'Rectangle'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.setCullingArea(com.badlogic.gdx.math.Rectangle)"""
        super(__scene2d.Group, self).setCullingArea(arg0)

    @override
    @overload
    def getName(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.Actor.getName()"""
        return str.__wrap(super(scene2d.Actor, self).getName())

    @override
    @overload
    def getCaptureListeners(self) -> 'utils.DelayedRemovalArray':
        """public com.badlogic.gdx.utils.DelayedRemovalArray<com.badlogic.gdx.scenes.scene2d.EventListener> com.badlogic.gdx.scenes.scene2d.Actor.getCaptureListeners()"""
        return 'utils.DelayedRemovalArray'.__wrap(super(scene2d.Actor, self).getCaptureListeners())

    @overload
    def fill(self) -> 'HorizontalGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup.fill()"""
        return 'HorizontalGroup'.__wrap(super(HorizontalGroup, self).fill())

    @override
    @overload
    def clear(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Group.clear(boolean)"""
        super(__scene2d.Group, self).clear(__boolean.valueOf(arg0))

    @override
    @overload
    def setY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setY(float)"""
        super(__scene2d.Actor, self).setY(__float.valueOf(arg0))

    @override
    @overload
    def addActorAfter(self, arg0: 'Actor', arg1: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.addActorAfter(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__scene2d.Group, self).addActorAfter(arg0, arg1)

    @override
    @overload
    def scaleBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.scaleBy(float,float)"""
        super(__scene2d.Actor, self).scaleBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def notify(self, arg0: 'Event', arg1: bool) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.notify(com.badlogic.gdx.scenes.scene2d.Event,boolean)"""
        return bool.__wrap(super(__scene2d.Actor, self).notify(arg0, __boolean.valueOf(arg1)))

    @override
    @overload
    def act(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Group.act(float)"""
        super(__scene2d.Group, self).act(__float.valueOf(arg0))

    @overload
    def padBottom(self, arg0: float) -> 'HorizontalGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup.padBottom(float)"""
        return 'HorizontalGroup'.__wrap(super(__HorizontalGroup, self).padBottom(__float.valueOf(arg0)))

    @override
    @overload
    def setUserObject(self, arg0: object):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setUserObject(java.lang.Object)"""
        super(__scene2d.Actor, self).setUserObject(arg0)

    @override
    @overload
    def hasScrollFocus(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasScrollFocus()"""
        return bool.__wrap(super(scene2d.Actor, self).hasScrollFocus())

    @overload
    def rowAlign(self, arg0: int) -> 'HorizontalGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup.rowAlign(int)"""
        return 'HorizontalGroup'.__wrap(super(__HorizontalGroup, self).rowAlign(__int.valueOf(arg0)))

    @override
    @overload
    def toFront(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.toFront()"""
        super(scene2d.Actor, self).toFront()

    @override
    @overload
    def scaleBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.scaleBy(float)"""
        super(__scene2d.Actor, self).scaleBy(__float.valueOf(arg0))

    @override
    @overload
    def getOriginX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getOriginX()"""
        return float.__wrap(super(scene2d.Actor, self).getOriginX())

    @overload
    def rowRight(self) -> 'HorizontalGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup.rowRight()"""
        return 'HorizontalGroup'.__wrap(super(HorizontalGroup, self).rowRight())

    @override
    @overload
    def draw(self, arg0: 'Batch', arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.draw(com.badlogic.gdx.graphics.g2d.Batch,float)"""
        super(__WidgetGroup, self).draw(arg0, __float.valueOf(arg1))

    @overload
    def getChild(self, arg0: int) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.Group.getChild(int)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Group, self).getChild(__int.valueOf(arg0)))

    @overload
    def removeActor(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.removeActor(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Group, self).removeActor(arg0))

    @overload
    def padRight(self, arg0: float) -> 'HorizontalGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup.padRight(float)"""
        return 'HorizontalGroup'.__wrap(super(__HorizontalGroup, self).padRight(__float.valueOf(arg0)))

    @override
    @overload
    def clearChildren(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Group.clearChildren(boolean)"""
        super(__scene2d.Group, self).clearChildren(__boolean.valueOf(arg0))

    @override
    @overload
    def getStage(self) -> 'scene2d.Stage':
        """public com.badlogic.gdx.scenes.scene2d.Stage com.badlogic.gdx.scenes.scene2d.Actor.getStage()"""
        return 'scene2d.Stage'.__wrap(super(scene2d.Actor, self).getStage())

    @overload
    def rowLeft(self) -> 'HorizontalGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup.rowLeft()"""
        return 'HorizontalGroup'.__wrap(super(HorizontalGroup, self).rowLeft())

    @override
    @overload
    def addAction(self, arg0: 'Action'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.addAction(com.badlogic.gdx.scenes.scene2d.Action)"""
        super(__scene2d.Actor, self).addAction(arg0)

    @overload
    def getWrapReverse(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup.getWrapReverse()"""
        return bool.__wrap(super(HorizontalGroup, self).getWrapReverse())

    @override
    @overload
    def setColor(self, arg0: float, arg1: float, arg2: float, arg3: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setColor(float,float,float,float)"""
        super(__scene2d.Actor, self).setColor(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3))

    @overload
    def fill(self, arg0: float) -> 'HorizontalGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup.fill(float)"""
        return 'HorizontalGroup'.__wrap(super(__HorizontalGroup, self).fill(__float.valueOf(arg0)))

    @overload
    def localToAscendantCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToAscendantCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToAscendantCoordinates(arg0, arg1))

    @override
    @overload
    def getActions(self) -> 'utils.Array':
        """public com.badlogic.gdx.utils.Array<com.badlogic.gdx.scenes.scene2d.Action> com.badlogic.gdx.scenes.scene2d.Actor.getActions()"""
        return 'utils.Array'.__wrap(super(scene2d.Actor, self).getActions())

    @overload
    def wrapSpace(self, arg0: float) -> 'HorizontalGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup.wrapSpace(float)"""
        return 'HorizontalGroup'.__wrap(super(__HorizontalGroup, self).wrapSpace(__float.valueOf(arg0)))

    @overload
    def getReverse(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup.getReverse()"""
        return bool.__wrap(super(HorizontalGroup, self).getReverse())

    @overload
    def localToDescendantCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Group.localToDescendantCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Group, self).localToDescendantCoordinates(arg0, arg1))

    @overload
    def setZIndex(self, arg0: int) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.setZIndex(int)"""
        return bool.__wrap(super(__scene2d.Actor, self).setZIndex(__int.valueOf(arg0)))

    @overload
    def wrap(self, arg0: bool) -> 'HorizontalGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup.wrap(boolean)"""
        return 'HorizontalGroup'.__wrap(super(__HorizontalGroup, self).wrap(__boolean.valueOf(arg0)))

    @overload
    def getX(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getX(int)"""
        return float.__wrap(super(__scene2d.Actor, self).getX(__int.valueOf(arg0)))

    @override
    @overload
    def sizeBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.sizeBy(float)"""
        super(__scene2d.Actor, self).sizeBy(__float.valueOf(arg0))

    @override
    @overload
    def layout(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup.layout()"""
        super(HorizontalGroup, self).layout()

    @overload
    def align(self, arg0: int) -> 'HorizontalGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup.align(int)"""
        return 'HorizontalGroup'.__wrap(super(__HorizontalGroup, self).align(__int.valueOf(arg0)))

    @override
    @overload
    def sizeBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.sizeBy(float,float)"""
        super(__scene2d.Actor, self).sizeBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def hasActions(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasActions()"""
        return bool.__wrap(super(scene2d.Actor, self).hasActions())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0))

    @override
    @overload
    def setScaleX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScaleX(float)"""
        super(__scene2d.Actor, self).setScaleX(__float.valueOf(arg0))

    @override
    @overload
    def getPrefWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup.getPrefWidth()"""
        return float.__wrap(super(HorizontalGroup, self).getPrefWidth())

    @override
    @overload
    def getX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getX()"""
        return float.__wrap(super(scene2d.Actor, self).getX())

    @overload
    def getAlign(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup.getAlign()"""
        return int.__wrap(super(HorizontalGroup, self).getAlign())

    @override
    @overload
    def toBack(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.toBack()"""
        super(scene2d.Actor, self).toBack()

    @overload
    def screenToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.screenToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).screenToLocalCoordinates(arg0))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def ancestorsVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.ancestorsVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).ancestorsVisible())

    @override
    @overload
    def debugAll(self) -> 'scene2d.Group':
        """public com.badlogic.gdx.scenes.scene2d.Group com.badlogic.gdx.scenes.scene2d.Group.debugAll()"""
        return 'scene2d.Group'.__wrap(super(scene2d.Group, self).debugAll())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def getSpace(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup.getSpace()"""
        return float.__wrap(super(HorizontalGroup, self).getSpace())

    @override
    @overload
    def setSize(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setSize(float,float)"""
        super(__scene2d.Actor, self).setSize(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def getZIndex(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.Actor.getZIndex()"""
        return int.__wrap(super(scene2d.Actor, self).getZIndex())

    @overload
    def getY(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getY(int)"""
        return float.__wrap(super(__scene2d.Actor, self).getY(__int.valueOf(arg0)))

    @override
    @overload
    def setOrigin(self, arg0: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOrigin(int)"""
        super(__scene2d.Actor, self).setOrigin(__int.valueOf(arg0))

    @override
    @overload
    def validate(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.validate()"""
        super(WidgetGroup, self).validate()

    @overload
    def isDescendantOf(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isDescendantOf(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Actor, self).isDescendantOf(arg0))

    @override
    @overload
    def addActorBefore(self, arg0: 'Actor', arg1: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.addActorBefore(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__scene2d.Group, self).addActorBefore(arg0, arg1)

    @override
    @overload
    def getParent(self) -> 'scene2d.Group':
        """public com.badlogic.gdx.scenes.scene2d.Group com.badlogic.gdx.scenes.scene2d.Actor.getParent()"""
        return 'scene2d.Group'.__wrap(super(scene2d.Actor, self).getParent())

    @overload
    def pad(self, arg0: float, arg1: float, arg2: float, arg3: float) -> 'HorizontalGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup.pad(float,float,float,float)"""
        return 'HorizontalGroup'.__wrap(super(__HorizontalGroup, self).pad(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3)))

    @override
    @overload
    def clearListeners(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clearListeners()"""
        super(scene2d.Actor, self).clearListeners()

    @overload
    def localToActorCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToActorCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToActorCoordinates(arg0, arg1))

    @override
    @overload
    def setOriginX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOriginX(float)"""
        super(__scene2d.Actor, self).setOriginX(__float.valueOf(arg0))

    @override
    @overload
    def getHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getHeight()"""
        return float.__wrap(super(scene2d.Actor, self).getHeight())

    @override
    @overload
    def hasKeyboardFocus(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasKeyboardFocus()"""
        return bool.__wrap(super(scene2d.Actor, self).hasKeyboardFocus())

    @override
    @overload
    def getOriginY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getOriginY()"""
        return float.__wrap(super(scene2d.Actor, self).getOriginY())

    @override
    @overload
    def pack(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.pack()"""
        super(WidgetGroup, self).pack()

    @override
    @overload
    def clipEnd(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clipEnd()"""
        super(scene2d.Actor, self).clipEnd()

    @override
    @overload
    def getUserObject(self) -> object:
        """public java.lang.Object com.badlogic.gdx.scenes.scene2d.Actor.getUserObject()"""
        return object.__wrap(super(scene2d.Actor, self).getUserObject())

    @override
    @overload
    def getPrefHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup.getPrefHeight()"""
        return float.__wrap(super(HorizontalGroup, self).getPrefHeight())

    @overload
    def __init__(self, ):
        """public com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup()"""
        val = __HorizontalGroup()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def rotateBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.rotateBy(float)"""
        super(__scene2d.Actor, self).rotateBy(__float.valueOf(arg0))

    @override
    @overload
    def drawDebug(self, arg0: 'ShapeRenderer'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.drawDebug(com.badlogic.gdx.graphics.glutils.ShapeRenderer)"""
        super(__scene2d.Group, self).drawDebug(arg0)

    @override
    @overload
    def setScale(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScale(float,float)"""
        super(__scene2d.Actor, self).setScale(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def addListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.addListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).addListener(arg0))

    @overload
    def getWrapSpace(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup.getWrapSpace()"""
        return float.__wrap(super(HorizontalGroup, self).getWrapSpace())

    @override
    @overload
    def getMinHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.getMinHeight()"""
        return float.__wrap(super(WidgetGroup, self).getMinHeight())

    @overload
    def getPadLeft(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup.getPadLeft()"""
        return float.__wrap(super(HorizontalGroup, self).getPadLeft())

    @override
    @overload
    def setVisible(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setVisible(boolean)"""
        super(__scene2d.Actor, self).setVisible(__boolean.valueOf(arg0))

    @override
    @overload
    def setY(self, arg0: float, arg1: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setY(float,int)"""
        super(__scene2d.Actor, self).setY(__float.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def setFillParent(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.setFillParent(boolean)"""
        super(__WidgetGroup, self).setFillParent(__boolean.valueOf(arg0))

    @overload
    def wrapReverse(self, arg0: bool) -> 'HorizontalGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup.wrapReverse(boolean)"""
        return 'HorizontalGroup'.__wrap(super(__HorizontalGroup, self).wrapReverse(__boolean.valueOf(arg0)))

    @override
    @overload
    def needsLayout(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.needsLayout()"""
        return bool.__wrap(super(WidgetGroup, self).needsLayout())

    @override
    @overload
    def setX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setX(float)"""
        super(__scene2d.Actor, self).setX(__float.valueOf(arg0))

    @overload
    def getExpand(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup.getExpand()"""
        return bool.__wrap(super(HorizontalGroup, self).getExpand())

    @override
    @overload
    def setOrigin(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOrigin(float,float)"""
        super(__scene2d.Actor, self).setOrigin(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def getCullingArea(self) -> 'math.Rectangle':
        """public com.badlogic.gdx.math.Rectangle com.badlogic.gdx.scenes.scene2d.Group.getCullingArea()"""
        return 'math.Rectangle'.__wrap(super(scene2d.Group, self).getCullingArea())

    @overload
    def wrapReverse(self) -> 'HorizontalGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup.wrapReverse()"""
        return 'HorizontalGroup'.__wrap(super(HorizontalGroup, self).wrapReverse())

    @overload
    def __init__(self):
        """public com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup()"""
        val = __HorizontalGroup()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def getRight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getRight()"""
        return float.__wrap(super(scene2d.Actor, self).getRight())

    @overload
    def isAscendantOf(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isAscendantOf(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Actor, self).isAscendantOf(arg0))

    @overload
    def pad(self, arg0: float) -> 'HorizontalGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup.pad(float)"""
        return 'HorizontalGroup'.__wrap(super(__HorizontalGroup, self).pad(__float.valueOf(arg0)))

    @override
    @overload
    def hasParent(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasParent()"""
        return bool.__wrap(super(scene2d.Actor, self).hasParent())

    @overload
    def getFill(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup.getFill()"""
        return float.__wrap(super(HorizontalGroup, self).getFill())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.Group.toString()"""
        return str.__wrap(super(scene2d.Group, self).toString())

    @override
    @overload
    def getChildren(self) -> 'utils.SnapshotArray':
        """public com.badlogic.gdx.utils.SnapshotArray<com.badlogic.gdx.scenes.scene2d.Actor> com.badlogic.gdx.scenes.scene2d.Group.getChildren()"""
        return 'utils.SnapshotArray'.__wrap(super(scene2d.Group, self).getChildren())

    @override
    @overload
    def getScaleY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getScaleY()"""
        return float.__wrap(super(scene2d.Actor, self).getScaleY())

    @override
    @overload
    def getWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getWidth()"""
        return float.__wrap(super(scene2d.Actor, self).getWidth())

    @overload
    def removeActorAt(self, arg0: int, arg1: bool) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.Group.removeActorAt(int,boolean)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Group, self).removeActorAt(__int.valueOf(arg0), __boolean.valueOf(arg1)))

    @override
    @overload
    def setPosition(self, arg0: float, arg1: float, arg2: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setPosition(float,float,int)"""
        super(__scene2d.Actor, self).setPosition(__float.valueOf(arg0), __float.valueOf(arg1), __int.valueOf(arg2))

    @override
    @overload
    def setLayoutEnabled(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.setLayoutEnabled(boolean)"""
        super(__WidgetGroup, self).setLayoutEnabled(__boolean.valueOf(arg0))

    @overload
    def removeCaptureListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.removeCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).removeCaptureListener(arg0))

    @override
    @overload
    def invalidateHierarchy(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.invalidateHierarchy()"""
        super(WidgetGroup, self).invalidateHierarchy()

    @override
    @overload
    def invalidate(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup.invalidate()"""
        super(HorizontalGroup, self).invalidate()

    @override
    @overload
    def setColor(self, arg0: 'Color'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setColor(com.badlogic.gdx.graphics.Color)"""
        super(__scene2d.Actor, self).setColor(arg0)

    @overload
    def rowBottom(self) -> 'HorizontalGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup.rowBottom()"""
        return 'HorizontalGroup'.__wrap(super(HorizontalGroup, self).rowBottom())

    @overload
    def addCaptureListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.addCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).addCaptureListener(arg0))

    @overload
    def getPadRight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup.getPadRight()"""
        return float.__wrap(super(HorizontalGroup, self).getPadRight())

    @overload
    def fire(self, arg0: 'Event') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.fire(com.badlogic.gdx.scenes.scene2d.Event)"""
        return bool.__wrap(super(__scene2d.Actor, self).fire(arg0))

    @override
    @overload
    def remove(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.remove()"""
        return bool.__wrap(super(scene2d.Actor, self).remove())

    @overload
    def hit(self, arg0: float, arg1: float, arg2: bool) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.hit(float,float,boolean)"""
        return 'scene2d.Actor'.__wrap(super(__WidgetGroup, self).hit(__float.valueOf(arg0), __float.valueOf(arg1), __boolean.valueOf(arg2)))

    @overload
    def reverse(self) -> 'HorizontalGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup.reverse()"""
        return 'HorizontalGroup'.__wrap(super(HorizontalGroup, self).reverse())

    @overload
    def setRound(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup.setRound(boolean)"""
        super(__HorizontalGroup, self).setRound(__boolean.valueOf(arg0))

    @override
    @overload
    def isVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).isVisible())

    @override
    @overload
    def debug(self) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.Actor.debug()"""
        return 'scene2d.Actor'.__wrap(super(scene2d.Actor, self).debug())

    @override
    @overload
    def getTop(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getTop()"""
        return float.__wrap(super(scene2d.Actor, self).getTop())

    @override
    @overload
    def clearActions(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clearActions()"""
        super(scene2d.Actor, self).clearActions()

    @overload
    def wrap(self) -> 'HorizontalGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup.wrap()"""
        return 'HorizontalGroup'.__wrap(super(HorizontalGroup, self).wrap())

    @override
    @overload
    def setRotation(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setRotation(float)"""
        super(__scene2d.Actor, self).setRotation(__float.valueOf(arg0))

    @override
    @overload
    def getScaleX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getScaleX()"""
        return float.__wrap(super(scene2d.Actor, self).getScaleX())

    @overload
    def firstAscendant(self, arg0: 'Class') -> 'scene2d.Actor':
        """public <T extends com.badlogic.gdx.scenes.scene2d.Actor> T com.badlogic.gdx.scenes.scene2d.Actor.firstAscendant(java.lang.Class<T>)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Actor, self).firstAscendant(arg0))

    @override
    @overload
    def setScaleY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScaleY(float)"""
        super(__scene2d.Actor, self).setScaleY(__float.valueOf(arg0))

    @overload
    def stageToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.stageToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).stageToLocalCoordinates(arg0))

    @overload
    def swapActor(self, arg0: int, arg1: int) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.swapActor(int,int)"""
        return bool.__wrap(super(__scene2d.Group, self).swapActor(__int.valueOf(arg0), __int.valueOf(arg1)))

    @override
    @overload
    def hasChildren(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.hasChildren()"""
        return bool.__wrap(super(scene2d.Group, self).hasChildren())

    @override
    @overload
    def ascendantsVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.ascendantsVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).ascendantsVisible())

    @override
    @overload
    def getColor(self) -> 'graphics.Color':
        """public com.badlogic.gdx.graphics.Color com.badlogic.gdx.scenes.scene2d.Actor.getColor()"""
        return 'graphics.Color'.__wrap(super(scene2d.Actor, self).getColor())

    @override
    @overload
    def isTransform(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.isTransform()"""
        return bool.__wrap(super(scene2d.Group, self).isTransform())

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def padTop(self, arg0: float) -> 'HorizontalGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup.padTop(float)"""
        return 'HorizontalGroup'.__wrap(super(__HorizontalGroup, self).padTop(__float.valueOf(arg0)))

    @override
    @overload
    def isTouchable(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchable()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchable())

    @overload
    def getPadTop(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup.getPadTop()"""
        return float.__wrap(super(HorizontalGroup, self).getPadTop())

    @overload
    def clipBegin(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.clipBegin(float,float,float,float)"""
        return bool.__wrap(super(__scene2d.Actor, self).clipBegin(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3))) 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.Button
from pyquantum_helper import import_once as __import_once__
import com.badlogic.gdx.scenes.scene2d.Touchable as __Touchable
__Touchable = __Touchable
try:
    from pygdx.scenes import scene2d
except ImportError:
    scene2d = __import_once__("pygdx.scenes.scene2d")

import com.badlogic.gdx.graphics.Color as __Color
__Color = __Color
import java.lang.Boolean as __boolean
try:
    from pygdx.graphics import g2d
except ImportError:
    g2d = __import_once__("pygdx.graphics.g2d")

from builtins import type
import com.badlogic.gdx.scenes.scene2d.ui.Button as __Button
__Button = __Button
import com.badlogic.gdx.scenes.scene2d.Group as __Group
__Group = __Group
import com.badlogic.gdx.scenes.scene2d.ui.Table as __Table
__Table = __Table
import com.badlogic.gdx.scenes.scene2d.ui.Cell as __Cell
__Cell = __Cell
import com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup as __WidgetGroup
__WidgetGroup = __WidgetGroup
import com.badlogic.gdx.math.Vector2 as __Vector2
__Vector2 = __Vector2
import com.badlogic.gdx.scenes.scene2d.ui.Table as __Table_Debug
__Debug = __Table_Debug.Debug
import com.badlogic.gdx.math.Rectangle as __Rectangle
__Rectangle = __Rectangle
import java.lang.Class as __Class
__Class = __Class
import com.badlogic.gdx.utils.Array as __Array
__Array = __Array
import java.lang.String as __string
try:
    from pygdx import math
except ImportError:
    math = __import_once__("pygdx.math")

from builtins import bool
import com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup as __ButtonGroup
__ButtonGroup = __ButtonGroup
from builtins import str
try:
    from pygdx.scenes.scene2d import utils
except ImportError:
    utils = __import_once__("pygdx.scenes.scene2d.utils")

import java.lang.CharSequence as CharSequence
try:
    from pygdx import utils
except ImportError:
    utils = __import_once__("pygdx.utils")

from pyquantum_helper import override
import java.lang.Object as __object
from builtins import float
from builtins import object
import com.badlogic.gdx.scenes.scene2d.utils.ClickListener as __ClickListener
__ClickListener = __ClickListener
import com.badlogic.gdx.utils.DelayedRemovalArray as __DelayedRemovalArray
__DelayedRemovalArray = __DelayedRemovalArray
import java.lang.Long as __long
import java.lang.Float as __float
import java.lang.String as __String
__String = __String
try:
    from pygdx.graphics import glutils
except ImportError:
    glutils = __import_once__("pygdx.graphics.glutils")

import com.badlogic.gdx.scenes.scene2d.ui.Skin as __Skin
__Skin = __Skin
import java.lang.Object as __Object
__Object = __Object
import com.badlogic.gdx.scenes.scene2d.ui.Button as __Button_ButtonStyle
__ButtonStyle = __Button_ButtonStyle.ButtonStyle
import com.badlogic.gdx.utils.SnapshotArray as __SnapshotArray
__SnapshotArray = __SnapshotArray
import com.badlogic.gdx.scenes.scene2d.Actor as __Actor
__Actor = __Actor
import java.lang.Integer as __int
import com.badlogic.gdx.scenes.scene2d.ui.Value as __Value
__Value = __Value
import com.badlogic.gdx.scenes.scene2d.Stage as __Stage
__Stage = __Stage
try:
    from pygdx import graphics
except ImportError:
    graphics = __import_once__("pygdx.graphics")

import com.badlogic.gdx.scenes.scene2d.utils.Drawable as __Drawable
__Drawable = __Drawable
from builtins import int
 
class Button(__Table, Table, scene2d.__Disableable, utils.Disableable):
    """com.badlogic.gdx.scenes.scene2d.ui.Button"""
 
    @staticmethod
    def __wrap(java_value: __Button) -> 'Button':
        return Button(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Button):
        """
        Dynamic initializer for Button.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def getColumnPrefWidth(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getColumnPrefWidth(int)"""
        return float.__wrap(super(__Table, self).getColumnPrefWidth(__int.valueOf(arg0)))

    @override
    @overload
    def getY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getY()"""
        return float.__wrap(super(scene2d.Actor, self).getY())

    @overload
    def isChecked(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Button.isChecked()"""
        return bool.__wrap(super(Button, self).isChecked())

    @override
    @overload
    def setBounds(self, arg0: float, arg1: float, arg2: float, arg3: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setBounds(float,float,float,float)"""
        super(__scene2d.Actor, self).setBounds(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def add(self, arg0: 'CharSequence', arg1: str, arg2: str) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<com.badlogic.gdx.scenes.scene2d.ui.Label> com.badlogic.gdx.scenes.scene2d.ui.Table.add(java.lang.CharSequence,java.lang.String,java.lang.String)"""
        return 'Cell'.__wrap(super(__Table, self).add(arg0, arg1, arg2))

    @overload
    def findActor(self, arg0: str) -> 'scene2d.Actor':
        """public <T extends com.badlogic.gdx.scenes.scene2d.Actor> T com.badlogic.gdx.scenes.scene2d.Group.findActor(java.lang.String)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Group, self).findActor(arg0))

    @override
    @overload
    def getPrefWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Button.getPrefWidth()"""
        return float.__wrap(super(Button, self).getPrefWidth())

    @overload
    def __init__(self, ):
        """public com.badlogic.gdx.scenes.scene2d.ui.Button()"""
        val = __Button()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def removeActor(self, arg0: 'Actor', arg1: bool) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Table.removeActor(com.badlogic.gdx.scenes.scene2d.Actor,boolean)"""
        return bool.__wrap(super(__Table, self).removeActor(arg0, __boolean.valueOf(arg1)))

    @override
    @overload
    def getTouchable(self) -> 'scene2d.Touchable':
        """public com.badlogic.gdx.scenes.scene2d.Touchable com.badlogic.gdx.scenes.scene2d.Actor.getTouchable()"""
        return 'scene2d.Touchable'.__wrap(super(scene2d.Actor, self).getTouchable())

    @override
    @overload
    def removeAction(self, arg0: 'Action'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.removeAction(com.badlogic.gdx.scenes.scene2d.Action)"""
        super(__scene2d.Actor, self).removeAction(arg0)

    @override
    @overload
    def getPadTop(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getPadTop()"""
        return float.__wrap(super(Table, self).getPadTop())

    @override
    @overload
    def drawDebug(self, arg0: 'ShapeRenderer'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.drawDebug(com.badlogic.gdx.graphics.glutils.ShapeRenderer)"""
        super(__Table, self).drawDebug(arg0)

    @override
    @overload
    def setDisabled(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Button.setDisabled(boolean)"""
        super(__Button, self).setDisabled(__boolean.valueOf(arg0))

    @overload
    def toggle(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Button.toggle()"""
        super(Button, self).toggle()

    @overload
    def __init__(self, arg0: 'Drawable', arg1: 'Drawable'):
        """public com.badlogic.gdx.scenes.scene2d.ui.Button(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable)"""
        val = __Button(arg0, arg1)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def padRight(self, arg0: 'Value') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padRight(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Table'.__wrap(super(__Table, self).padRight(arg0))

    @override
    @overload
    def getMaxWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.getMaxWidth()"""
        return float.__wrap(super(WidgetGroup, self).getMaxWidth())

    @override
    @overload
    def setX(self, arg0: float, arg1: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setX(float,int)"""
        super(__scene2d.Actor, self).setX(__float.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def reset(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.reset()"""
        super(Table, self).reset()

    @override
    @overload
    def getListeners(self) -> 'utils.DelayedRemovalArray':
        """public com.badlogic.gdx.utils.DelayedRemovalArray<com.badlogic.gdx.scenes.scene2d.EventListener> com.badlogic.gdx.scenes.scene2d.Actor.getListeners()"""
        return 'utils.DelayedRemovalArray'.__wrap(super(scene2d.Actor, self).getListeners())

    @overload
    def setChecked(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Button.setChecked(boolean)"""
        super(__Button, self).setChecked(__boolean.valueOf(arg0))

    @overload
    def removeListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.removeListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).removeListener(arg0))

    @override
    @overload
    def isTouchFocusListener(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchFocusListener()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchFocusListener())

    @overload
    def localToStageCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToStageCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToStageCoordinates(arg0))

    @override
    @overload
    def clipBegin(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.clipBegin()"""
        return bool.__wrap(super(scene2d.Actor, self).clipBegin())

    @overload
    def __init__(self, arg0: 'ButtonStyle'):
        """public com.badlogic.gdx.scenes.scene2d.ui.Button(com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle)"""
        val = __Button(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def moveBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.moveBy(float,float)"""
        super(__scene2d.Actor, self).moveBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def pad(self, arg0: float) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.pad(float)"""
        return 'Table'.__wrap(super(__Table, self).pad(__float.valueOf(arg0)))

    @override
    @overload
    def setName(self, arg0: str):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setName(java.lang.String)"""
        super(__scene2d.Actor, self).setName(arg0)

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @overload
    def getRowMinHeight(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getRowMinHeight(int)"""
        return float.__wrap(super(__Table, self).getRowMinHeight(__int.valueOf(arg0)))

    @overload
    def setProgrammaticChangeEvents(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Button.setProgrammaticChangeEvents(boolean)"""
        super(__Button, self).setProgrammaticChangeEvents(__boolean.valueOf(arg0))

    @overload
    def swapActor(self, arg0: 'Actor', arg1: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.swapActor(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Group, self).swapActor(arg0, arg1))

    @overload
    def __init__(self, arg0: 'Drawable', arg1: 'Drawable', arg2: 'Drawable'):
        """public com.badlogic.gdx.scenes.scene2d.ui.Button(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable)"""
        val = __Button(arg0, arg1, arg2)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def getPadX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getPadX()"""
        return float.__wrap(super(Table, self).getPadX())

    @override
    @overload
    def clearChildren(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.clearChildren(boolean)"""
        super(__Table, self).clearChildren(__boolean.valueOf(arg0))

    @override
    @overload
    def getDebug(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.getDebug()"""
        return bool.__wrap(super(scene2d.Actor, self).getDebug())

    @override
    @overload
    def setHeight(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setHeight(float)"""
        super(__scene2d.Actor, self).setHeight(__float.valueOf(arg0))

    @override
    @overload
    def setScale(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScale(float)"""
        super(__scene2d.Actor, self).setScale(__float.valueOf(arg0))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @overload
    def __init__(self, arg0: 'Drawable'):
        """public com.badlogic.gdx.scenes.scene2d.ui.Button(com.badlogic.gdx.scenes.scene2d.utils.Drawable)"""
        val = __Button(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def getButtonGroup(self) -> 'ButtonGroup':
        """public com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup com.badlogic.gdx.scenes.scene2d.ui.Button.getButtonGroup()"""
        return 'ButtonGroup'.__wrap(super(Button, self).getButtonGroup())

    @overload
    def add(self, arg0: 'CharSequence') -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<com.badlogic.gdx.scenes.scene2d.ui.Label> com.badlogic.gdx.scenes.scene2d.ui.Table.add(java.lang.CharSequence)"""
        return 'Cell'.__wrap(super(__Table, self).add(arg0))

    @overload
    def padBottom(self, arg0: float) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padBottom(float)"""
        return 'Table'.__wrap(super(__Table, self).padBottom(__float.valueOf(arg0)))

    @override
    @overload
    def setDebug(self, arg0: bool, arg1: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Group.setDebug(boolean,boolean)"""
        super(__scene2d.Group, self).setDebug(__boolean.valueOf(arg0), __boolean.valueOf(arg1))

    @override
    @overload
    def row(self) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell com.badlogic.gdx.scenes.scene2d.ui.Table.row()"""
        return 'Cell'.__wrap(super(Table, self).row())

    @overload
    def background(self, arg0: 'Drawable') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.background(com.badlogic.gdx.scenes.scene2d.utils.Drawable)"""
        return 'Table'.__wrap(super(__Table, self).background(arg0))

    @override
    @overload
    def setTransform(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Group.setTransform(boolean)"""
        super(__scene2d.Group, self).setTransform(__boolean.valueOf(arg0))

    @overload
    def parentToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.parentToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).parentToLocalCoordinates(arg0))

    @override
    @overload
    def getRotation(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getRotation()"""
        return float.__wrap(super(scene2d.Actor, self).getRotation())

    @override
    @overload
    def getMaxHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.getMaxHeight()"""
        return float.__wrap(super(WidgetGroup, self).getMaxHeight())

    @overload
    def padTop(self, arg0: float) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padTop(float)"""
        return 'Table'.__wrap(super(__Table, self).padTop(__float.valueOf(arg0)))

    @override
    @overload
    def isDisabled(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Button.isDisabled()"""
        return bool.__wrap(super(Button, self).isDisabled())

    @overload
    def padLeft(self, arg0: 'Value') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padLeft(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Table'.__wrap(super(__Table, self).padLeft(arg0))

    @override
    @overload
    def addActor(self, arg0: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.addActor(com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__scene2d.Group, self).addActor(arg0)

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def getBackground(self) -> 'utils.Drawable':
        """public com.badlogic.gdx.scenes.scene2d.utils.Drawable com.badlogic.gdx.scenes.scene2d.ui.Table.getBackground()"""
        return 'utils.Drawable'.__wrap(super(Table, self).getBackground())

    @override
    @overload
    def getPrefHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Button.getPrefHeight()"""
        return float.__wrap(super(Button, self).getPrefHeight())

    @overload
    def pad(self, arg0: float, arg1: float, arg2: float, arg3: float) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.pad(float,float,float,float)"""
        return 'Table'.__wrap(super(__Table, self).pad(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3)))

    @overload
    def add(self, arg0: 'CharSequence', arg1: str) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<com.badlogic.gdx.scenes.scene2d.ui.Label> com.badlogic.gdx.scenes.scene2d.ui.Table.add(java.lang.CharSequence,java.lang.String)"""
        return 'Cell'.__wrap(super(__Table, self).add(arg0, arg1))

    @override
    @overload
    def getRows(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.ui.Table.getRows()"""
        return int.__wrap(super(Table, self).getRows())

    @override
    @overload
    def setWidth(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setWidth(float)"""
        super(__scene2d.Actor, self).setWidth(__float.valueOf(arg0))

    @override
    @overload
    def isTouchFocusTarget(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchFocusTarget()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchFocusTarget())

    @override
    @overload
    def setPosition(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setPosition(float,float)"""
        super(__scene2d.Actor, self).setPosition(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def setClip(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.setClip(boolean)"""
        super(__Table, self).setClip(__boolean.valueOf(arg0))

    @override
    @overload
    def addActorAt(self, arg0: int, arg1: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.addActorAt(int,com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__scene2d.Group, self).addActorAt(__int.valueOf(arg0), arg1)

    @overload
    def hit(self, arg0: float, arg1: float, arg2: bool) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.ui.Table.hit(float,float,boolean)"""
        return 'scene2d.Actor'.__wrap(super(__Table, self).hit(__float.valueOf(arg0), __float.valueOf(arg1), __boolean.valueOf(arg2)))

    @override
    @overload
    def setOriginY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOriginY(float)"""
        super(__scene2d.Actor, self).setOriginY(__float.valueOf(arg0))

    @override
    @overload
    def getPadY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getPadY()"""
        return float.__wrap(super(Table, self).getPadY())

    @override
    @overload
    def getPadRight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getPadRight()"""
        return float.__wrap(super(Table, self).getPadRight())

    @overload
    def localToScreenCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToScreenCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToScreenCoordinates(arg0))

    @override
    @overload
    def clear(self):
        """public void com.badlogic.gdx.scenes.scene2d.Group.clear()"""
        super(scene2d.Group, self).clear()

    @overload
    def stack(self, *arg0: 'scene2d.Actor') -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<com.badlogic.gdx.scenes.scene2d.ui.Stack> com.badlogic.gdx.scenes.scene2d.ui.Table.stack(com.badlogic.gdx.scenes.scene2d.Actor...)"""
        return 'Cell'.__wrap(super(__Table, self).stack(arg0))

    @override
    @overload
    def setTouchable(self, arg0: 'Touchable'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setTouchable(com.badlogic.gdx.scenes.scene2d.Touchable)"""
        super(__scene2d.Actor, self).setTouchable(arg0)

    @override
    @overload
    def add(self) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell com.badlogic.gdx.scenes.scene2d.ui.Table.add()"""
        return 'Cell'.__wrap(super(Table, self).add())

    @overload
    def getColumnWidth(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getColumnWidth(int)"""
        return float.__wrap(super(__Table, self).getColumnWidth(__int.valueOf(arg0)))

    @override
    @overload
    def clearChildren(self):
        """public void com.badlogic.gdx.scenes.scene2d.Group.clearChildren()"""
        super(scene2d.Group, self).clearChildren()

    @overload
    def __init__(self, arg0: 'Actor', arg1: 'Skin'):
        """public com.badlogic.gdx.scenes.scene2d.ui.Button(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.ui.Skin)"""
        val = __Button(arg0, arg1)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def debugAll(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.debugAll()"""
        return 'Table'.__wrap(super(Table, self).debugAll())

    @overload
    def localToParentCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToParentCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToParentCoordinates(arg0))

    @override
    @overload
    def setCullingArea(self, arg0: 'Rectangle'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.setCullingArea(com.badlogic.gdx.math.Rectangle)"""
        super(__scene2d.Group, self).setCullingArea(arg0)

    @override
    @overload
    def getName(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.Actor.getName()"""
        return str.__wrap(super(scene2d.Actor, self).getName())

    @override
    @overload
    def getCaptureListeners(self) -> 'utils.DelayedRemovalArray':
        """public com.badlogic.gdx.utils.DelayedRemovalArray<com.badlogic.gdx.scenes.scene2d.EventListener> com.badlogic.gdx.scenes.scene2d.Actor.getCaptureListeners()"""
        return 'utils.DelayedRemovalArray'.__wrap(super(scene2d.Actor, self).getCaptureListeners())

    @overload
    def padBottom(self, arg0: 'Value') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padBottom(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Table'.__wrap(super(__Table, self).padBottom(arg0))

    @overload
    def __init__(self):
        """public com.badlogic.gdx.scenes.scene2d.ui.Button()"""
        val = __Button()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def clear(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Group.clear(boolean)"""
        super(__scene2d.Group, self).clear(__boolean.valueOf(arg0))

    @override
    @overload
    def setY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setY(float)"""
        super(__scene2d.Actor, self).setY(__float.valueOf(arg0))

    @overload
    def getClickListener(self) -> 'utils.ClickListener':
        """public com.badlogic.gdx.scenes.scene2d.utils.ClickListener com.badlogic.gdx.scenes.scene2d.ui.Button.getClickListener()"""
        return 'utils.ClickListener'.__wrap(super(Button, self).getClickListener())

    @override
    @overload
    def addActorAfter(self, arg0: 'Actor', arg1: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.addActorAfter(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__scene2d.Group, self).addActorAfter(arg0, arg1)

    @override
    @overload
    def top(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.top()"""
        return 'Table'.__wrap(super(Table, self).top())

    @override
    @overload
    def scaleBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.scaleBy(float,float)"""
        super(__scene2d.Actor, self).scaleBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def align(self, arg0: int) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.align(int)"""
        return 'Table'.__wrap(super(__Table, self).align(__int.valueOf(arg0)))

    @overload
    def notify(self, arg0: 'Event', arg1: bool) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.notify(com.badlogic.gdx.scenes.scene2d.Event,boolean)"""
        return bool.__wrap(super(__scene2d.Actor, self).notify(arg0, __boolean.valueOf(arg1)))

    @override
    @overload
    def act(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Group.act(float)"""
        super(__scene2d.Group, self).act(__float.valueOf(arg0))

    @override
    @overload
    def setUserObject(self, arg0: object):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setUserObject(java.lang.Object)"""
        super(__scene2d.Actor, self).setUserObject(arg0)

    @override
    @overload
    def hasScrollFocus(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasScrollFocus()"""
        return bool.__wrap(super(scene2d.Actor, self).hasScrollFocus())

    @override
    @overload
    def toFront(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.toFront()"""
        super(scene2d.Actor, self).toFront()

    @override
    @overload
    def scaleBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.scaleBy(float)"""
        super(__scene2d.Actor, self).scaleBy(__float.valueOf(arg0))

    @override
    @overload
    def getOriginX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getOriginX()"""
        return float.__wrap(super(scene2d.Actor, self).getOriginX())

    @overload
    def getRow(self, arg0: float) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.ui.Table.getRow(float)"""
        return int.__wrap(super(__Table, self).getRow(__float.valueOf(arg0)))

    @overload
    def getChild(self, arg0: int) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.Group.getChild(int)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Group, self).getChild(__int.valueOf(arg0)))

    @override
    @overload
    def getSkin(self) -> 'Skin':
        """public com.badlogic.gdx.scenes.scene2d.ui.Skin com.badlogic.gdx.scenes.scene2d.ui.Table.getSkin()"""
        return 'Skin'.__wrap(super(Table, self).getSkin())

    @override
    @overload
    def setDebug(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.setDebug(boolean)"""
        super(__Table, self).setDebug(__boolean.valueOf(arg0))

    @overload
    def pad(self, arg0: 'Value', arg1: 'Value', arg2: 'Value', arg3: 'Value') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.pad(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Table'.__wrap(super(__Table, self).pad(arg0, arg1, arg2, arg3))

    @overload
    def add(self, arg0: 'CharSequence', arg1: str, arg2: 'Color') -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<com.badlogic.gdx.scenes.scene2d.ui.Label> com.badlogic.gdx.scenes.scene2d.ui.Table.add(java.lang.CharSequence,java.lang.String,com.badlogic.gdx.graphics.Color)"""
        return 'Cell'.__wrap(super(__Table, self).add(arg0, arg1, arg2))

    @override
    @overload
    def getPadBottom(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getPadBottom()"""
        return float.__wrap(super(Table, self).getPadBottom())

    @overload
    def __init__(self, arg0: 'Actor', arg1: 'ButtonStyle'):
        """public com.badlogic.gdx.scenes.scene2d.ui.Button(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle)"""
        val = __Button(arg0, arg1)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def getStage(self) -> 'scene2d.Stage':
        """public com.badlogic.gdx.scenes.scene2d.Stage com.badlogic.gdx.scenes.scene2d.Actor.getStage()"""
        return 'scene2d.Stage'.__wrap(super(scene2d.Actor, self).getStage())

    @override
    @overload
    def addAction(self, arg0: 'Action'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.addAction(com.badlogic.gdx.scenes.scene2d.Action)"""
        super(__scene2d.Actor, self).addAction(arg0)

    @override
    @overload
    def getPadRightValue(self) -> 'Value':
        """public com.badlogic.gdx.scenes.scene2d.ui.Value com.badlogic.gdx.scenes.scene2d.ui.Table.getPadRightValue()"""
        return 'Value'.__wrap(super(Table, self).getPadRightValue())

    @override
    @overload
    def setColor(self, arg0: float, arg1: float, arg2: float, arg3: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setColor(float,float,float,float)"""
        super(__scene2d.Actor, self).setColor(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3))

    @overload
    def getColumnMinWidth(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getColumnMinWidth(int)"""
        return float.__wrap(super(__Table, self).getColumnMinWidth(__int.valueOf(arg0)))

    @overload
    def localToAscendantCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToAscendantCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToAscendantCoordinates(arg0, arg1))

    @override
    @overload
    def getActions(self) -> 'utils.Array':
        """public com.badlogic.gdx.utils.Array<com.badlogic.gdx.scenes.scene2d.Action> com.badlogic.gdx.scenes.scene2d.Actor.getActions()"""
        return 'utils.Array'.__wrap(super(scene2d.Actor, self).getActions())

    @overload
    def __init__(self, arg0: 'Skin', arg1: str):
        """public com.badlogic.gdx.scenes.scene2d.ui.Button(com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String)"""
        val = __Button(arg0, arg1)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def __init__(self, arg0: 'Skin'):
        """public com.badlogic.gdx.scenes.scene2d.ui.Button(com.badlogic.gdx.scenes.scene2d.ui.Skin)"""
        val = __Button(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def debugTable(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.debugTable()"""
        return 'Table'.__wrap(super(Table, self).debugTable())

    @overload
    def add(self, *arg0: 'scene2d.Actor') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.add(com.badlogic.gdx.scenes.scene2d.Actor...)"""
        return 'Table'.__wrap(super(__Table, self).add(arg0))

    @override
    @overload
    def right(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.right()"""
        return 'Table'.__wrap(super(Table, self).right())

    @overload
    def localToDescendantCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Group.localToDescendantCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Group, self).localToDescendantCoordinates(arg0, arg1))

    @overload
    def padRight(self, arg0: float) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padRight(float)"""
        return 'Table'.__wrap(super(__Table, self).padRight(__float.valueOf(arg0)))

    @overload
    def setZIndex(self, arg0: int) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.setZIndex(int)"""
        return bool.__wrap(super(__scene2d.Actor, self).setZIndex(__int.valueOf(arg0)))

    @overload
    def padLeft(self, arg0: float) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padLeft(float)"""
        return 'Table'.__wrap(super(__Table, self).padLeft(__float.valueOf(arg0)))

    @overload
    def getX(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getX(int)"""
        return float.__wrap(super(__scene2d.Actor, self).getX(__int.valueOf(arg0)))

    @override
    @overload
    def sizeBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.sizeBy(float)"""
        super(__scene2d.Actor, self).sizeBy(__float.valueOf(arg0))

    @override
    @overload
    def getMinWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Button.getMinWidth()"""
        return float.__wrap(super(Button, self).getMinWidth())

    @override
    @overload
    def clip(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.clip()"""
        return 'Table'.__wrap(super(Table, self).clip())

    @overload
    def getRowPrefHeight(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getRowPrefHeight(int)"""
        return float.__wrap(super(__Table, self).getRowPrefHeight(__int.valueOf(arg0)))

    @override
    @overload
    def sizeBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.sizeBy(float,float)"""
        super(__scene2d.Actor, self).sizeBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def hasActions(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasActions()"""
        return bool.__wrap(super(scene2d.Actor, self).hasActions())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0))

    @override
    @overload
    def setScaleX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScaleX(float)"""
        super(__scene2d.Actor, self).setScaleX(__float.valueOf(arg0))

    @overload
    def removeActor(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Table.removeActor(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__Table, self).removeActor(arg0))

    @override
    @overload
    def getX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getX()"""
        return float.__wrap(super(scene2d.Actor, self).getX())

    @override
    @overload
    def left(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.left()"""
        return 'Table'.__wrap(super(Table, self).left())

    @override
    @overload
    def center(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.center()"""
        return 'Table'.__wrap(super(Table, self).center())

    @override
    @overload
    def setBackground(self, arg0: 'Drawable'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.setBackground(com.badlogic.gdx.scenes.scene2d.utils.Drawable)"""
        super(__Table, self).setBackground(arg0)

    @overload
    def add(self, arg0: 'Actor') -> 'Cell':
        """public <T extends com.badlogic.gdx.scenes.scene2d.Actor> com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Table.add(T)"""
        return 'Cell'.__wrap(super(__Table, self).add(arg0))

    @override
    @overload
    def toBack(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.toBack()"""
        super(scene2d.Actor, self).toBack()

    @override
    @overload
    def debug(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.debug()"""
        return 'Table'.__wrap(super(Table, self).debug())

    @overload
    def __init__(self, arg0: 'Actor', arg1: 'Skin', arg2: str):
        """public com.badlogic.gdx.scenes.scene2d.ui.Button(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String)"""
        val = __Button(arg0, arg1, arg2)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def getClip(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Table.getClip()"""
        return bool.__wrap(super(Table, self).getClip())

    @overload
    def screenToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.screenToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).screenToLocalCoordinates(arg0))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def ancestorsVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.ancestorsVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).ancestorsVisible())

    @override
    @overload
    def getMinHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Button.getMinHeight()"""
        return float.__wrap(super(Button, self).getMinHeight())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def setSize(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setSize(float,float)"""
        super(__scene2d.Actor, self).setSize(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def layout(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.layout()"""
        super(Table, self).layout()

    @override
    @overload
    def getZIndex(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.Actor.getZIndex()"""
        return int.__wrap(super(scene2d.Actor, self).getZIndex())

    @overload
    def getY(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getY(int)"""
        return float.__wrap(super(__scene2d.Actor, self).getY(__int.valueOf(arg0)))

    @override
    @overload
    def setOrigin(self, arg0: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOrigin(int)"""
        super(__scene2d.Actor, self).setOrigin(__int.valueOf(arg0))

    @override
    @overload
    def validate(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.validate()"""
        super(WidgetGroup, self).validate()

    @overload
    def isDescendantOf(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isDescendantOf(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Actor, self).isDescendantOf(arg0))

    @override
    @overload
    def addActorBefore(self, arg0: 'Actor', arg1: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.Group.addActorBefore(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__scene2d.Group, self).addActorBefore(arg0, arg1)

    @override
    @overload
    def getParent(self) -> 'scene2d.Group':
        """public com.badlogic.gdx.scenes.scene2d.Group com.badlogic.gdx.scenes.scene2d.Actor.getParent()"""
        return 'scene2d.Group'.__wrap(super(scene2d.Actor, self).getParent())

    @override
    @overload
    def clearListeners(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clearListeners()"""
        super(scene2d.Actor, self).clearListeners()

    @overload
    def localToActorCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToActorCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToActorCoordinates(arg0, arg1))

    @override
    @overload
    def getTableDebug(self) -> 'Debug':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table$Debug com.badlogic.gdx.scenes.scene2d.ui.Table.getTableDebug()"""
        return 'Debug'.__wrap(super(Table, self).getTableDebug())

    @override
    @overload
    def setOriginX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOriginX(float)"""
        super(__scene2d.Actor, self).setOriginX(__float.valueOf(arg0))

    @overload
    def removeActorAt(self, arg0: int, arg1: bool) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.ui.Table.removeActorAt(int,boolean)"""
        return 'scene2d.Actor'.__wrap(super(__Table, self).removeActorAt(__int.valueOf(arg0), __boolean.valueOf(arg1)))

    @override
    @overload
    def getHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getHeight()"""
        return float.__wrap(super(scene2d.Actor, self).getHeight())

    @override
    @overload
    def hasKeyboardFocus(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasKeyboardFocus()"""
        return bool.__wrap(super(scene2d.Actor, self).hasKeyboardFocus())

    @overload
    def getStyle(self) -> 'ButtonStyle':
        """public com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle com.badlogic.gdx.scenes.scene2d.ui.Button.getStyle()"""
        return 'ButtonStyle'.__wrap(super(Button, self).getStyle())

    @override
    @overload
    def getOriginY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getOriginY()"""
        return float.__wrap(super(scene2d.Actor, self).getOriginY())

    @override
    @overload
    def pack(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.pack()"""
        super(WidgetGroup, self).pack()

    @override
    @overload
    def clipEnd(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clipEnd()"""
        super(scene2d.Actor, self).clipEnd()

    @override
    @overload
    def getUserObject(self) -> object:
        """public java.lang.Object com.badlogic.gdx.scenes.scene2d.Actor.getUserObject()"""
        return object.__wrap(super(scene2d.Actor, self).getUserObject())

    @override
    @overload
    def rotateBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.rotateBy(float)"""
        super(__scene2d.Actor, self).rotateBy(__float.valueOf(arg0))

    @overload
    def background(self, arg0: str) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.background(java.lang.String)"""
        return 'Table'.__wrap(super(__Table, self).background(arg0))

    @overload
    def getRowHeight(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getRowHeight(int)"""
        return float.__wrap(super(__Table, self).getRowHeight(__int.valueOf(arg0)))

    @overload
    def isOver(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Button.isOver()"""
        return bool.__wrap(super(Button, self).isOver())

    @override
    @overload
    def getPadLeftValue(self) -> 'Value':
        """public com.badlogic.gdx.scenes.scene2d.ui.Value com.badlogic.gdx.scenes.scene2d.ui.Table.getPadLeftValue()"""
        return 'Value'.__wrap(super(Table, self).getPadLeftValue())

    @override
    @overload
    def setScale(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScale(float,float)"""
        super(__scene2d.Actor, self).setScale(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def addListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.addListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).addListener(arg0))

    @override
    @overload
    def setRound(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.setRound(boolean)"""
        super(__Table, self).setRound(__boolean.valueOf(arg0))

    @overload
    def debug(self, arg0: 'Debug') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.debug(com.badlogic.gdx.scenes.scene2d.ui.Table$Debug)"""
        return 'Table'.__wrap(super(__Table, self).debug(arg0))

    @overload
    def clip(self, arg0: bool) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.clip(boolean)"""
        return 'Table'.__wrap(super(__Table, self).clip(__boolean.valueOf(arg0)))

    @override
    @overload
    def invalidate(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.invalidate()"""
        super(Table, self).invalidate()

    @override
    @overload
    def getPadLeft(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Table.getPadLeft()"""
        return float.__wrap(super(Table, self).getPadLeft())

    @override
    @overload
    def setVisible(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setVisible(boolean)"""
        super(__scene2d.Actor, self).setVisible(__boolean.valueOf(arg0))

    @override
    @overload
    def setY(self, arg0: float, arg1: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setY(float,int)"""
        super(__scene2d.Actor, self).setY(__float.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def setFillParent(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.setFillParent(boolean)"""
        super(__WidgetGroup, self).setFillParent(__boolean.valueOf(arg0))

    @overload
    def getCell(self, arg0: 'Actor') -> 'Cell':
        """public <T extends com.badlogic.gdx.scenes.scene2d.Actor> com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Table.getCell(T)"""
        return 'Cell'.__wrap(super(__Table, self).getCell(arg0))

    @override
    @overload
    def needsLayout(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.needsLayout()"""
        return bool.__wrap(super(WidgetGroup, self).needsLayout())

    @override
    @overload
    def setX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setX(float)"""
        super(__scene2d.Actor, self).setX(__float.valueOf(arg0))

    @override
    @overload
    def setOrigin(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOrigin(float,float)"""
        super(__scene2d.Actor, self).setOrigin(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def getCullingArea(self) -> 'math.Rectangle':
        """public com.badlogic.gdx.math.Rectangle com.badlogic.gdx.scenes.scene2d.Group.getCullingArea()"""
        return 'math.Rectangle'.__wrap(super(scene2d.Group, self).getCullingArea())

    @override
    @overload
    def getRight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getRight()"""
        return float.__wrap(super(scene2d.Actor, self).getRight())

    @overload
    def isAscendantOf(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isAscendantOf(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Actor, self).isAscendantOf(arg0))

    @override
    @overload
    def hasParent(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasParent()"""
        return bool.__wrap(super(scene2d.Actor, self).hasParent())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.Group.toString()"""
        return str.__wrap(super(scene2d.Group, self).toString())

    @override
    @overload
    def getChildren(self) -> 'utils.SnapshotArray':
        """public com.badlogic.gdx.utils.SnapshotArray<com.badlogic.gdx.scenes.scene2d.Actor> com.badlogic.gdx.scenes.scene2d.Group.getChildren()"""
        return 'utils.SnapshotArray'.__wrap(super(scene2d.Group, self).getChildren())

    @override
    @overload
    def getScaleY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getScaleY()"""
        return float.__wrap(super(scene2d.Actor, self).getScaleY())

    @override
    @overload
    def setSkin(self, arg0: 'Skin'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.setSkin(com.badlogic.gdx.scenes.scene2d.ui.Skin)"""
        super(__Table, self).setSkin(arg0)

    @override
    @overload
    def getWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getWidth()"""
        return float.__wrap(super(scene2d.Actor, self).getWidth())

    @override
    @overload
    def setPosition(self, arg0: float, arg1: float, arg2: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setPosition(float,float,int)"""
        super(__scene2d.Actor, self).setPosition(__float.valueOf(arg0), __float.valueOf(arg1), __int.valueOf(arg2))

    @overload
    def setStyle(self, arg0: 'ButtonStyle'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Button.setStyle(com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle)"""
        super(__Button, self).setStyle(arg0)

    @override
    @overload
    def setLayoutEnabled(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.setLayoutEnabled(boolean)"""
        super(__WidgetGroup, self).setLayoutEnabled(__boolean.valueOf(arg0))

    @overload
    def removeCaptureListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.removeCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).removeCaptureListener(arg0))

    @override
    @overload
    def invalidateHierarchy(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.invalidateHierarchy()"""
        super(WidgetGroup, self).invalidateHierarchy()

    @override
    @overload
    def setColor(self, arg0: 'Color'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setColor(com.badlogic.gdx.graphics.Color)"""
        super(__scene2d.Actor, self).setColor(arg0)

    @override
    @overload
    def draw(self, arg0: 'Batch', arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Button.draw(com.badlogic.gdx.graphics.g2d.Batch,float)"""
        super(__Button, self).draw(arg0, __float.valueOf(arg1))

    @overload
    def addCaptureListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.addCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).addCaptureListener(arg0))

    @overload
    def fire(self, arg0: 'Event') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.fire(com.badlogic.gdx.scenes.scene2d.Event)"""
        return bool.__wrap(super(__scene2d.Actor, self).fire(arg0))

    @overload
    def columnDefaults(self, arg0: int) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell com.badlogic.gdx.scenes.scene2d.ui.Table.columnDefaults(int)"""
        return 'Cell'.__wrap(super(__Table, self).columnDefaults(__int.valueOf(arg0)))

    @override
    @overload
    def remove(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.remove()"""
        return bool.__wrap(super(scene2d.Actor, self).remove())

    @override
    @overload
    def isVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).isVisible())

    @override
    @overload
    def defaults(self) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell com.badlogic.gdx.scenes.scene2d.ui.Table.defaults()"""
        return 'Cell'.__wrap(super(Table, self).defaults())

    @overload
    def pad(self, arg0: 'Value') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.pad(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Table'.__wrap(super(__Table, self).pad(arg0))

    @override
    @overload
    def getPadBottomValue(self) -> 'Value':
        """public com.badlogic.gdx.scenes.scene2d.ui.Value com.badlogic.gdx.scenes.scene2d.ui.Table.getPadBottomValue()"""
        return 'Value'.__wrap(super(Table, self).getPadBottomValue())

    @override
    @overload
    def getTop(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getTop()"""
        return float.__wrap(super(scene2d.Actor, self).getTop())

    @override
    @overload
    def clearActions(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clearActions()"""
        super(scene2d.Actor, self).clearActions()

    @override
    @overload
    def setRotation(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setRotation(float)"""
        super(__scene2d.Actor, self).setRotation(__float.valueOf(arg0))

    @override
    @overload
    def getScaleX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getScaleX()"""
        return float.__wrap(super(scene2d.Actor, self).getScaleX())

    @override
    @overload
    def setBackground(self, arg0: str):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Table.setBackground(java.lang.String)"""
        super(__Table, self).setBackground(arg0)

    @overload
    def firstAscendant(self, arg0: 'Class') -> 'scene2d.Actor':
        """public <T extends com.badlogic.gdx.scenes.scene2d.Actor> T com.badlogic.gdx.scenes.scene2d.Actor.firstAscendant(java.lang.Class<T>)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Actor, self).firstAscendant(arg0))

    @override
    @overload
    def setScaleY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScaleY(float)"""
        super(__scene2d.Actor, self).setScaleY(__float.valueOf(arg0))

    @overload
    def stageToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.stageToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).stageToLocalCoordinates(arg0))

    @override
    @overload
    def bottom(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.bottom()"""
        return 'Table'.__wrap(super(Table, self).bottom())

    @overload
    def swapActor(self, arg0: int, arg1: int) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.swapActor(int,int)"""
        return bool.__wrap(super(__scene2d.Group, self).swapActor(__int.valueOf(arg0), __int.valueOf(arg1)))

    @override
    @overload
    def hasChildren(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.hasChildren()"""
        return bool.__wrap(super(scene2d.Group, self).hasChildren())

    @override
    @overload
    def ascendantsVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.ascendantsVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).ascendantsVisible())

    @override
    @overload
    def getAlign(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.ui.Table.getAlign()"""
        return int.__wrap(super(Table, self).getAlign())

    @override
    @overload
    def debugCell(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.debugCell()"""
        return 'Table'.__wrap(super(Table, self).debugCell())

    @override
    @overload
    def getColumns(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.ui.Table.getColumns()"""
        return int.__wrap(super(Table, self).getColumns())

    @override
    @overload
    def debugActor(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.debugActor()"""
        return 'Table'.__wrap(super(Table, self).debugActor())

    @overload
    def padTop(self, arg0: 'Value') -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Table.padTop(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Table'.__wrap(super(__Table, self).padTop(arg0))

    @override
    @overload
    def getColor(self) -> 'graphics.Color':
        """public com.badlogic.gdx.graphics.Color com.badlogic.gdx.scenes.scene2d.Actor.getColor()"""
        return 'graphics.Color'.__wrap(super(scene2d.Actor, self).getColor())

    @override
    @overload
    def isTransform(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.isTransform()"""
        return bool.__wrap(super(scene2d.Group, self).isTransform())

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @override
    @overload
    def isTouchable(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchable()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchable())

    @overload
    def clipBegin(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.clipBegin(float,float,float,float)"""
        return bool.__wrap(super(__scene2d.Actor, self).clipBegin(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3)))

    @overload
    def isPressed(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Button.isPressed()"""
        return bool.__wrap(super(Button, self).isPressed())

    @override
    @overload
    def getCells(self) -> 'utils.Array':
        """public com.badlogic.gdx.utils.Array<com.badlogic.gdx.scenes.scene2d.ui.Cell> com.badlogic.gdx.scenes.scene2d.ui.Table.getCells()"""
        return 'utils.Array'.__wrap(super(Table, self).getCells())

    @override
    @overload
    def getPadTopValue(self) -> 'Value':
        """public com.badlogic.gdx.scenes.scene2d.ui.Value com.badlogic.gdx.scenes.scene2d.ui.Table.getPadTopValue()"""
        return 'Value'.__wrap(super(Table, self).getPadTopValue()) 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.Container
from pyquantum_helper import import_once as __import_once__
import com.badlogic.gdx.scenes.scene2d.Touchable as __Touchable
__Touchable = __Touchable
try:
    from pygdx.scenes import scene2d
except ImportError:
    scene2d = __import_once__("pygdx.scenes.scene2d")

import com.badlogic.gdx.graphics.Color as __Color
__Color = __Color
import java.lang.Boolean as __boolean
try:
    from pygdx.graphics import g2d
except ImportError:
    g2d = __import_once__("pygdx.graphics.g2d")

from builtins import type
import com.badlogic.gdx.scenes.scene2d.Group as __Group
__Group = __Group
import com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup as __WidgetGroup
__WidgetGroup = __WidgetGroup
import com.badlogic.gdx.math.Vector2 as __Vector2
__Vector2 = __Vector2
import com.badlogic.gdx.math.Rectangle as __Rectangle
__Rectangle = __Rectangle
import java.lang.Class as __Class
__Class = __Class
import com.badlogic.gdx.utils.Array as __Array
__Array = __Array
import java.lang.String as __string
try:
    from pygdx import math
except ImportError:
    math = __import_once__("pygdx.math")

from builtins import bool
from builtins import str
try:
    from pygdx.scenes.scene2d import utils
except ImportError:
    utils = __import_once__("pygdx.scenes.scene2d.utils")

try:
    from pygdx import utils
except ImportError:
    utils = __import_once__("pygdx.utils")

from pyquantum_helper import override
import java.lang.Object as __object
from builtins import float
from builtins import object
import com.badlogic.gdx.utils.DelayedRemovalArray as __DelayedRemovalArray
__DelayedRemovalArray = __DelayedRemovalArray
import java.lang.Long as __long
import java.lang.Float as __float
import com.badlogic.gdx.scenes.scene2d.ui.Container as __Container
__Container = __Container
import java.lang.String as __String
__String = __String
try:
    from pygdx.graphics import glutils
except ImportError:
    glutils = __import_once__("pygdx.graphics.glutils")

import java.lang.Object as __Object
__Object = __Object
import com.badlogic.gdx.utils.SnapshotArray as __SnapshotArray
__SnapshotArray = __SnapshotArray
import com.badlogic.gdx.scenes.scene2d.Actor as __Actor
__Actor = __Actor
import java.lang.Integer as __int
import com.badlogic.gdx.scenes.scene2d.ui.Value as __Value
__Value = __Value
import com.badlogic.gdx.scenes.scene2d.Stage as __Stage
__Stage = __Stage
import com.badlogic.gdx.scenes.scene2d.utils.Drawable as __Drawable
__Drawable = __Drawable
try:
    from pygdx import graphics
except ImportError:
    graphics = __import_once__("pygdx.graphics")

from builtins import int
 
class Container(__WidgetGroup, WidgetGroup):
    """com.badlogic.gdx.scenes.scene2d.ui.Container"""
 
    @staticmethod
    def __wrap(java_value: __Container) -> 'Container':
        return Container(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Container):
        """
        Dynamic initializer for Container.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def getY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getY()"""
        return float.__wrap(super(scene2d.Actor, self).getY())

    @overload
    def clip(self) -> 'Container':
        """public com.badlogic.gdx.scenes.scene2d.ui.Container<T> com.badlogic.gdx.scenes.scene2d.ui.Container.clip()"""
        return 'Container'.__wrap(super(Container, self).clip())

    @overload
    def maxWidth(self, arg0: 'Value') -> 'Container':
        """public com.badlogic.gdx.scenes.scene2d.ui.Container<T> com.badlogic.gdx.scenes.scene2d.ui.Container.maxWidth(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Container'.__wrap(super(__Container, self).maxWidth(arg0))

    @override
    @overload
    def setBounds(self, arg0: float, arg1: float, arg2: float, arg3: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setBounds(float,float,float,float)"""
        super(__scene2d.Actor, self).setBounds(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3))

    @overload
    def minSize(self, arg0: 'Value') -> 'Container':
        """public com.badlogic.gdx.scenes.scene2d.ui.Container<T> com.badlogic.gdx.scenes.scene2d.ui.Container.minSize(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Container'.__wrap(super(__Container, self).minSize(arg0))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def findActor(self, arg0: str) -> 'scene2d.Actor':
        """public <T extends com.badlogic.gdx.scenes.scene2d.Actor> T com.badlogic.gdx.scenes.scene2d.Group.findActor(java.lang.String)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Group, self).findActor(arg0))

    @overload
    def fill(self, arg0: float, arg1: float) -> 'Container':
        """public com.badlogic.gdx.scenes.scene2d.ui.Container<T> com.badlogic.gdx.scenes.scene2d.ui.Container.fill(float,float)"""
        return 'Container'.__wrap(super(__Container, self).fill(__float.valueOf(arg0), __float.valueOf(arg1)))

    @overload
    def left(self) -> 'Container':
        """public com.badlogic.gdx.scenes.scene2d.ui.Container<T> com.badlogic.gdx.scenes.scene2d.ui.Container.left()"""
        return 'Container'.__wrap(super(Container, self).left())

    @override
    @overload
    def getMinWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Container.getMinWidth()"""
        return float.__wrap(super(Container, self).getMinWidth())

    @override
    @overload
    def getTouchable(self) -> 'scene2d.Touchable':
        """public com.badlogic.gdx.scenes.scene2d.Touchable com.badlogic.gdx.scenes.scene2d.Actor.getTouchable()"""
        return 'scene2d.Touchable'.__wrap(super(scene2d.Actor, self).getTouchable())

    @overload
    def maxSize(self, arg0: 'Value') -> 'Container':
        """public com.badlogic.gdx.scenes.scene2d.ui.Container<T> com.badlogic.gdx.scenes.scene2d.ui.Container.maxSize(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Container'.__wrap(super(__Container, self).maxSize(arg0))

    @override
    @overload
    def removeAction(self, arg0: 'Action'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.removeAction(com.badlogic.gdx.scenes.scene2d.Action)"""
        super(__scene2d.Actor, self).removeAction(arg0)

    @overload
    def maxSize(self, arg0: 'Value', arg1: 'Value') -> 'Container':
        """public com.badlogic.gdx.scenes.scene2d.ui.Container<T> com.badlogic.gdx.scenes.scene2d.ui.Container.maxSize(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Container'.__wrap(super(__Container, self).maxSize(arg0, arg1))

    @override
    @overload
    def drawDebug(self, arg0: 'ShapeRenderer'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Container.drawDebug(com.badlogic.gdx.graphics.glutils.ShapeRenderer)"""
        super(__Container, self).drawDebug(arg0)

    @overload
    def background(self, arg0: 'Drawable') -> 'Container':
        """public com.badlogic.gdx.scenes.scene2d.ui.Container<T> com.badlogic.gdx.scenes.scene2d.ui.Container.background(com.badlogic.gdx.scenes.scene2d.utils.Drawable)"""
        return 'Container'.__wrap(super(__Container, self).background(arg0))

    @override
    @overload
    def setDebug(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setDebug(boolean)"""
        super(__scene2d.Actor, self).setDebug(__boolean.valueOf(arg0))

    @overload
    def padTop(self, arg0: 'Value') -> 'Container':
        """public com.badlogic.gdx.scenes.scene2d.ui.Container<T> com.badlogic.gdx.scenes.scene2d.ui.Container.padTop(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Container'.__wrap(super(__Container, self).padTop(arg0))

    @overload
    def size(self, arg0: 'Value') -> 'Container':
        """public com.badlogic.gdx.scenes.scene2d.ui.Container<T> com.badlogic.gdx.scenes.scene2d.ui.Container.size(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Container'.__wrap(super(__Container, self).size(arg0))

    @override
    @overload
    def setX(self, arg0: float, arg1: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setX(float,int)"""
        super(__scene2d.Actor, self).setX(__float.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def pad(self, arg0: float, arg1: float, arg2: float, arg3: float) -> 'Container':
        """public com.badlogic.gdx.scenes.scene2d.ui.Container<T> com.badlogic.gdx.scenes.scene2d.ui.Container.pad(float,float,float,float)"""
        return 'Container'.__wrap(super(__Container, self).pad(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3)))

    @overload
    def padTop(self, arg0: float) -> 'Container':
        """public com.badlogic.gdx.scenes.scene2d.ui.Container<T> com.badlogic.gdx.scenes.scene2d.ui.Container.padTop(float)"""
        return 'Container'.__wrap(super(__Container, self).padTop(__float.valueOf(arg0)))

    @override
    @overload
    def getListeners(self) -> 'utils.DelayedRemovalArray':
        """public com.badlogic.gdx.utils.DelayedRemovalArray<com.badlogic.gdx.scenes.scene2d.EventListener> com.badlogic.gdx.scenes.scene2d.Actor.getListeners()"""
        return 'utils.DelayedRemovalArray'.__wrap(super(scene2d.Actor, self).getListeners())

    @overload
    def removeListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.removeListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).removeListener(arg0))

    @override
    @overload
    def isTouchFocusListener(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchFocusListener()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchFocusListener())

    @overload
    def localToStageCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToStageCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToStageCoordinates(arg0))

    @overload
    def getPadRight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Container.getPadRight()"""
        return float.__wrap(super(Container, self).getPadRight())

    @override
    @overload
    def clipBegin(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.clipBegin()"""
        return bool.__wrap(super(scene2d.Actor, self).clipBegin())

    @override
    @overload
    def moveBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.moveBy(float,float)"""
        super(__scene2d.Actor, self).moveBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def getMaxWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Container.getMaxWidth()"""
        return float.__wrap(super(Container, self).getMaxWidth())

    @override
    @overload
    def setName(self, arg0: str):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setName(java.lang.String)"""
        super(__scene2d.Actor, self).setName(arg0)

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @overload
    def fill(self) -> 'Container':
        """public com.badlogic.gdx.scenes.scene2d.ui.Container<T> com.badlogic.gdx.scenes.scene2d.ui.Container.fill()"""
        return 'Container'.__wrap(super(Container, self).fill())

    @overload
    def swapActor(self, arg0: 'Actor', arg1: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.swapActor(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Group, self).swapActor(arg0, arg1))

    @overload
    def getAlign(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.ui.Container.getAlign()"""
        return int.__wrap(super(Container, self).getAlign())

    @overload
    def getPrefWidthValue(self) -> 'Value':
        """public com.badlogic.gdx.scenes.scene2d.ui.Value com.badlogic.gdx.scenes.scene2d.ui.Container.getPrefWidthValue()"""
        return 'Value'.__wrap(super(Container, self).getPrefWidthValue())

    @overload
    def minWidth(self, arg0: float) -> 'Container':
        """public com.badlogic.gdx.scenes.scene2d.ui.Container<T> com.badlogic.gdx.scenes.scene2d.ui.Container.minWidth(float)"""
        return 'Container'.__wrap(super(__Container, self).minWidth(__float.valueOf(arg0)))

    @override
    @overload
    def getDebug(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.getDebug()"""
        return bool.__wrap(super(scene2d.Actor, self).getDebug())

    @override
    @overload
    def setHeight(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setHeight(float)"""
        super(__scene2d.Actor, self).setHeight(__float.valueOf(arg0))

    @override
    @overload
    def setScale(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScale(float)"""
        super(__scene2d.Actor, self).setScale(__float.valueOf(arg0))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def setDebug(self, arg0: bool, arg1: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Group.setDebug(boolean,boolean)"""
        super(__scene2d.Group, self).setDebug(__boolean.valueOf(arg0), __boolean.valueOf(arg1))

    @overload
    def __init__(self):
        """public com.badlogic.gdx.scenes.scene2d.ui.Container()"""
        val = __Container()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def maxWidth(self, arg0: float) -> 'Container':
        """public com.badlogic.gdx.scenes.scene2d.ui.Container<T> com.badlogic.gdx.scenes.scene2d.ui.Container.maxWidth(float)"""
        return 'Container'.__wrap(super(__Container, self).maxWidth(__float.valueOf(arg0)))

    @overload
    def getPadLeftValue(self) -> 'Value':
        """public com.badlogic.gdx.scenes.scene2d.ui.Value com.badlogic.gdx.scenes.scene2d.ui.Container.getPadLeftValue()"""
        return 'Value'.__wrap(super(Container, self).getPadLeftValue())

    @override
    @overload
    def setTransform(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Group.setTransform(boolean)"""
        super(__scene2d.Group, self).setTransform(__boolean.valueOf(arg0))

    @overload
    def parentToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.parentToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).parentToLocalCoordinates(arg0))

    @overload
    def padLeft(self, arg0: 'Value') -> 'Container':
        """public com.badlogic.gdx.scenes.scene2d.ui.Container<T> com.badlogic.gdx.scenes.scene2d.ui.Container.padLeft(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Container'.__wrap(super(__Container, self).padLeft(arg0))

    @overload
    def minSize(self, arg0: 'Value', arg1: 'Value') -> 'Container':
        """public com.badlogic.gdx.scenes.scene2d.ui.Container<T> com.badlogic.gdx.scenes.scene2d.ui.Container.minSize(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Container'.__wrap(super(__Container, self).minSize(arg0, arg1))

    @override
    @overload
    def getRotation(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getRotation()"""
        return float.__wrap(super(scene2d.Actor, self).getRotation())

    @overload
    def getBackground(self) -> 'utils.Drawable':
        """public com.badlogic.gdx.scenes.scene2d.utils.Drawable com.badlogic.gdx.scenes.scene2d.ui.Container.getBackground()"""
        return 'utils.Drawable'.__wrap(super(Container, self).getBackground())

    @overload
    def prefSize(self, arg0: float, arg1: float) -> 'Container':
        """public com.badlogic.gdx.scenes.scene2d.ui.Container<T> com.badlogic.gdx.scenes.scene2d.ui.Container.prefSize(float,float)"""
        return 'Container'.__wrap(super(__Container, self).prefSize(__float.valueOf(arg0), __float.valueOf(arg1)))

    @overload
    def getPadLeft(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Container.getPadLeft()"""
        return float.__wrap(super(Container, self).getPadLeft())

    @overload
    def removeActor(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Container.removeActor(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__Container, self).removeActor(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def bottom(self) -> 'Container':
        """public com.badlogic.gdx.scenes.scene2d.ui.Container<T> com.badlogic.gdx.scenes.scene2d.ui.Container.bottom()"""
        return 'Container'.__wrap(super(Container, self).bottom())

    @override
    @overload
    def setWidth(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setWidth(float)"""
        super(__scene2d.Actor, self).setWidth(__float.valueOf(arg0))

    @override
    @overload
    def isTouchFocusTarget(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchFocusTarget()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchFocusTarget())

    @override
    @overload
    def addActorBefore(self, arg0: 'Actor', arg1: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Container.addActorBefore(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__Container, self).addActorBefore(arg0, arg1)

    @override
    @overload
    def setPosition(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setPosition(float,float)"""
        super(__scene2d.Actor, self).setPosition(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def prefHeight(self, arg0: 'Value') -> 'Container':
        """public com.badlogic.gdx.scenes.scene2d.ui.Container<T> com.badlogic.gdx.scenes.scene2d.ui.Container.prefHeight(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Container'.__wrap(super(__Container, self).prefHeight(arg0))

    @overload
    def getPadBottomValue(self) -> 'Value':
        """public com.badlogic.gdx.scenes.scene2d.ui.Value com.badlogic.gdx.scenes.scene2d.ui.Container.getPadBottomValue()"""
        return 'Value'.__wrap(super(Container, self).getPadBottomValue())

    @overload
    def prefSize(self, arg0: float) -> 'Container':
        """public com.badlogic.gdx.scenes.scene2d.ui.Container<T> com.badlogic.gdx.scenes.scene2d.ui.Container.prefSize(float)"""
        return 'Container'.__wrap(super(__Container, self).prefSize(__float.valueOf(arg0)))

    @override
    @overload
    def setOriginY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOriginY(float)"""
        super(__scene2d.Actor, self).setOriginY(__float.valueOf(arg0))

    @overload
    def padRight(self, arg0: 'Value') -> 'Container':
        """public com.badlogic.gdx.scenes.scene2d.ui.Container<T> com.badlogic.gdx.scenes.scene2d.ui.Container.padRight(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Container'.__wrap(super(__Container, self).padRight(arg0))

    @overload
    def getMaxHeightValue(self) -> 'Value':
        """public com.badlogic.gdx.scenes.scene2d.ui.Value com.badlogic.gdx.scenes.scene2d.ui.Container.getMaxHeightValue()"""
        return 'Value'.__wrap(super(Container, self).getMaxHeightValue())

    @overload
    def getMinHeightValue(self) -> 'Value':
        """public com.badlogic.gdx.scenes.scene2d.ui.Value com.badlogic.gdx.scenes.scene2d.ui.Container.getMinHeightValue()"""
        return 'Value'.__wrap(super(Container, self).getMinHeightValue())

    @overload
    def localToScreenCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToScreenCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToScreenCoordinates(arg0))

    @override
    @overload
    def clear(self):
        """public void com.badlogic.gdx.scenes.scene2d.Group.clear()"""
        super(scene2d.Group, self).clear()

    @override
    @overload
    def setTouchable(self, arg0: 'Touchable'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setTouchable(com.badlogic.gdx.scenes.scene2d.Touchable)"""
        super(__scene2d.Actor, self).setTouchable(arg0)

    @overload
    def right(self) -> 'Container':
        """public com.badlogic.gdx.scenes.scene2d.ui.Container<T> com.badlogic.gdx.scenes.scene2d.ui.Container.right()"""
        return 'Container'.__wrap(super(Container, self).right())

    @overload
    def maxSize(self, arg0: float, arg1: float) -> 'Container':
        """public com.badlogic.gdx.scenes.scene2d.ui.Container<T> com.badlogic.gdx.scenes.scene2d.ui.Container.maxSize(float,float)"""
        return 'Container'.__wrap(super(__Container, self).maxSize(__float.valueOf(arg0), __float.valueOf(arg1)))

    @override
    @overload
    def clearChildren(self):
        """public void com.badlogic.gdx.scenes.scene2d.Group.clearChildren()"""
        super(scene2d.Group, self).clearChildren()

    @overload
    def localToParentCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToParentCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToParentCoordinates(arg0))

    @overload
    def __init__(self, ):
        """public com.badlogic.gdx.scenes.scene2d.ui.Container()"""
        val = __Container()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def getName(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.Actor.getName()"""
        return str.__wrap(super(scene2d.Actor, self).getName())

    @override
    @overload
    def getCaptureListeners(self) -> 'utils.DelayedRemovalArray':
        """public com.badlogic.gdx.utils.DelayedRemovalArray<com.badlogic.gdx.scenes.scene2d.EventListener> com.badlogic.gdx.scenes.scene2d.Actor.getCaptureListeners()"""
        return 'utils.DelayedRemovalArray'.__wrap(super(scene2d.Actor, self).getCaptureListeners())

    @overload
    def getPadRightValue(self) -> 'Value':
        """public com.badlogic.gdx.scenes.scene2d.ui.Value com.badlogic.gdx.scenes.scene2d.ui.Container.getPadRightValue()"""
        return 'Value'.__wrap(super(Container, self).getPadRightValue())

    @override
    @overload
    def clear(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Group.clear(boolean)"""
        super(__scene2d.Group, self).clear(__boolean.valueOf(arg0))

    @override
    @overload
    def setY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setY(float)"""
        super(__scene2d.Actor, self).setY(__float.valueOf(arg0))

    @overload
    def prefWidth(self, arg0: float) -> 'Container':
        """public com.badlogic.gdx.scenes.scene2d.ui.Container<T> com.badlogic.gdx.scenes.scene2d.ui.Container.prefWidth(float)"""
        return 'Container'.__wrap(super(__Container, self).prefWidth(__float.valueOf(arg0)))

    @override
    @overload
    def scaleBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.scaleBy(float,float)"""
        super(__scene2d.Actor, self).scaleBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def hit(self, arg0: float, arg1: float, arg2: bool) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.ui.Container.hit(float,float,boolean)"""
        return 'scene2d.Actor'.__wrap(super(__Container, self).hit(__float.valueOf(arg0), __float.valueOf(arg1), __boolean.valueOf(arg2)))

    @override
    @overload
    def getPrefHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Container.getPrefHeight()"""
        return float.__wrap(super(Container, self).getPrefHeight())

    @overload
    def notify(self, arg0: 'Event', arg1: bool) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.notify(com.badlogic.gdx.scenes.scene2d.Event,boolean)"""
        return bool.__wrap(super(__scene2d.Actor, self).notify(arg0, __boolean.valueOf(arg1)))

    @override
    @overload
    def act(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Group.act(float)"""
        super(__scene2d.Group, self).act(__float.valueOf(arg0))

    @override
    @overload
    def setUserObject(self, arg0: object):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setUserObject(java.lang.Object)"""
        super(__scene2d.Actor, self).setUserObject(arg0)

    @override
    @overload
    def hasScrollFocus(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasScrollFocus()"""
        return bool.__wrap(super(scene2d.Actor, self).hasScrollFocus())

    @override
    @overload
    def toFront(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.toFront()"""
        super(scene2d.Actor, self).toFront()

    @override
    @overload
    def scaleBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.scaleBy(float)"""
        super(__scene2d.Actor, self).scaleBy(__float.valueOf(arg0))

    @override
    @overload
    def getOriginX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getOriginX()"""
        return float.__wrap(super(scene2d.Actor, self).getOriginX())

    @overload
    def getChild(self, arg0: int) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.Group.getChild(int)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Group, self).getChild(__int.valueOf(arg0)))

    @overload
    def maxHeight(self, arg0: float) -> 'Container':
        """public com.badlogic.gdx.scenes.scene2d.ui.Container<T> com.badlogic.gdx.scenes.scene2d.ui.Container.maxHeight(float)"""
        return 'Container'.__wrap(super(__Container, self).maxHeight(__float.valueOf(arg0)))

    @override
    @overload
    def getMinHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Container.getMinHeight()"""
        return float.__wrap(super(Container, self).getMinHeight())

    @overload
    def getActor(self) -> 'scene2d.Actor':
        """public T com.badlogic.gdx.scenes.scene2d.ui.Container.getActor()"""
        return 'scene2d.Actor'.__wrap(super(Container, self).getActor())

    @override
    @overload
    def clearChildren(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Group.clearChildren(boolean)"""
        super(__scene2d.Group, self).clearChildren(__boolean.valueOf(arg0))

    @override
    @overload
    def getStage(self) -> 'scene2d.Stage':
        """public com.badlogic.gdx.scenes.scene2d.Stage com.badlogic.gdx.scenes.scene2d.Actor.getStage()"""
        return 'scene2d.Stage'.__wrap(super(scene2d.Actor, self).getStage())

    @override
    @overload
    def addAction(self, arg0: 'Action'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.addAction(com.badlogic.gdx.scenes.scene2d.Action)"""
        super(__scene2d.Actor, self).addAction(arg0)

    @overload
    def getClip(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Container.getClip()"""
        return bool.__wrap(super(Container, self).getClip())

    @override
    @overload
    def setColor(self, arg0: float, arg1: float, arg2: float, arg3: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setColor(float,float,float,float)"""
        super(__scene2d.Actor, self).setColor(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3))

    @overload
    def localToAscendantCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToAscendantCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToAscendantCoordinates(arg0, arg1))

    @override
    @overload
    def getActions(self) -> 'utils.Array':
        """public com.badlogic.gdx.utils.Array<com.badlogic.gdx.scenes.scene2d.Action> com.badlogic.gdx.scenes.scene2d.Actor.getActions()"""
        return 'utils.Array'.__wrap(super(scene2d.Actor, self).getActions())

    @overload
    def top(self) -> 'Container':
        """public com.badlogic.gdx.scenes.scene2d.ui.Container<T> com.badlogic.gdx.scenes.scene2d.ui.Container.top()"""
        return 'Container'.__wrap(super(Container, self).top())

    @overload
    def localToDescendantCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Group.localToDescendantCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Group, self).localToDescendantCoordinates(arg0, arg1))

    @overload
    def setZIndex(self, arg0: int) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.setZIndex(int)"""
        return bool.__wrap(super(__scene2d.Actor, self).setZIndex(__int.valueOf(arg0)))

    @overload
    def getPadTop(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Container.getPadTop()"""
        return float.__wrap(super(Container, self).getPadTop())

    @overload
    def getX(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getX(int)"""
        return float.__wrap(super(__scene2d.Actor, self).getX(__int.valueOf(arg0)))

    @override
    @overload
    def sizeBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.sizeBy(float)"""
        super(__scene2d.Actor, self).sizeBy(__float.valueOf(arg0))

    @overload
    def setClip(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Container.setClip(boolean)"""
        super(__Container, self).setClip(__boolean.valueOf(arg0))

    @override
    @overload
    def invalidate(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.invalidate()"""
        super(WidgetGroup, self).invalidate()

    @overload
    def size(self, arg0: 'Value', arg1: 'Value') -> 'Container':
        """public com.badlogic.gdx.scenes.scene2d.ui.Container<T> com.badlogic.gdx.scenes.scene2d.ui.Container.size(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Container'.__wrap(super(__Container, self).size(arg0, arg1))

    @override
    @overload
    def sizeBy(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.sizeBy(float,float)"""
        super(__scene2d.Actor, self).sizeBy(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def hasActions(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasActions()"""
        return bool.__wrap(super(scene2d.Actor, self).hasActions())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0))

    @overload
    def padRight(self, arg0: float) -> 'Container':
        """public com.badlogic.gdx.scenes.scene2d.ui.Container<T> com.badlogic.gdx.scenes.scene2d.ui.Container.padRight(float)"""
        return 'Container'.__wrap(super(__Container, self).padRight(__float.valueOf(arg0)))

    @override
    @overload
    def setScaleX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScaleX(float)"""
        super(__scene2d.Actor, self).setScaleX(__float.valueOf(arg0))

    @overload
    def removeActor(self, arg0: 'Actor', arg1: bool) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Container.removeActor(com.badlogic.gdx.scenes.scene2d.Actor,boolean)"""
        return bool.__wrap(super(__Container, self).removeActor(arg0, __boolean.valueOf(arg1)))

    @overload
    def getPadBottom(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Container.getPadBottom()"""
        return float.__wrap(super(Container, self).getPadBottom())

    @override
    @overload
    def getX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getX()"""
        return float.__wrap(super(scene2d.Actor, self).getX())

    @overload
    def minHeight(self, arg0: float) -> 'Container':
        """public com.badlogic.gdx.scenes.scene2d.ui.Container<T> com.badlogic.gdx.scenes.scene2d.ui.Container.minHeight(float)"""
        return 'Container'.__wrap(super(__Container, self).minHeight(__float.valueOf(arg0)))

    @override
    @overload
    def toBack(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.toBack()"""
        super(scene2d.Actor, self).toBack()

    @overload
    def width(self, arg0: float) -> 'Container':
        """public com.badlogic.gdx.scenes.scene2d.ui.Container<T> com.badlogic.gdx.scenes.scene2d.ui.Container.width(float)"""
        return 'Container'.__wrap(super(__Container, self).width(__float.valueOf(arg0)))

    @overload
    def align(self, arg0: int) -> 'Container':
        """public com.badlogic.gdx.scenes.scene2d.ui.Container<T> com.badlogic.gdx.scenes.scene2d.ui.Container.align(int)"""
        return 'Container'.__wrap(super(__Container, self).align(__int.valueOf(arg0)))

    @overload
    def fill(self, arg0: bool) -> 'Container':
        """public com.badlogic.gdx.scenes.scene2d.ui.Container<T> com.badlogic.gdx.scenes.scene2d.ui.Container.fill(boolean)"""
        return 'Container'.__wrap(super(__Container, self).fill(__boolean.valueOf(arg0)))

    @overload
    def screenToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.screenToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).screenToLocalCoordinates(arg0))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def ancestorsVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.ancestorsVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).ancestorsVisible())

    @override
    @overload
    def debugAll(self) -> 'scene2d.Group':
        """public com.badlogic.gdx.scenes.scene2d.Group com.badlogic.gdx.scenes.scene2d.Group.debugAll()"""
        return 'scene2d.Group'.__wrap(super(scene2d.Group, self).debugAll())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def setSize(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setSize(float,float)"""
        super(__scene2d.Actor, self).setSize(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def size(self, arg0: float, arg1: float) -> 'Container':
        """public com.badlogic.gdx.scenes.scene2d.ui.Container<T> com.badlogic.gdx.scenes.scene2d.ui.Container.size(float,float)"""
        return 'Container'.__wrap(super(__Container, self).size(__float.valueOf(arg0), __float.valueOf(arg1)))

    @override
    @overload
    def getZIndex(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.Actor.getZIndex()"""
        return int.__wrap(super(scene2d.Actor, self).getZIndex())

    @overload
    def padBottom(self, arg0: 'Value') -> 'Container':
        """public com.badlogic.gdx.scenes.scene2d.ui.Container<T> com.badlogic.gdx.scenes.scene2d.ui.Container.padBottom(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Container'.__wrap(super(__Container, self).padBottom(arg0))

    @overload
    def getY(self, arg0: int) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getY(int)"""
        return float.__wrap(super(__scene2d.Actor, self).getY(__int.valueOf(arg0)))

    @overload
    def getFillY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Container.getFillY()"""
        return float.__wrap(super(Container, self).getFillY())

    @override
    @overload
    def setOrigin(self, arg0: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOrigin(int)"""
        super(__scene2d.Actor, self).setOrigin(__int.valueOf(arg0))

    @override
    @overload
    def validate(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.validate()"""
        super(WidgetGroup, self).validate()

    @overload
    def isDescendantOf(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isDescendantOf(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Actor, self).isDescendantOf(arg0))

    @override
    @overload
    def getParent(self) -> 'scene2d.Group':
        """public com.badlogic.gdx.scenes.scene2d.Group com.badlogic.gdx.scenes.scene2d.Actor.getParent()"""
        return 'scene2d.Group'.__wrap(super(scene2d.Actor, self).getParent())

    @override
    @overload
    def clearListeners(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clearListeners()"""
        super(scene2d.Actor, self).clearListeners()

    @overload
    def localToActorCoordinates(self, arg0: 'Actor', arg1: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.localToActorCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).localToActorCoordinates(arg0, arg1))

    @overload
    def prefWidth(self, arg0: 'Value') -> 'Container':
        """public com.badlogic.gdx.scenes.scene2d.ui.Container<T> com.badlogic.gdx.scenes.scene2d.ui.Container.prefWidth(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Container'.__wrap(super(__Container, self).prefWidth(arg0))

    @overload
    def prefSize(self, arg0: 'Value', arg1: 'Value') -> 'Container':
        """public com.badlogic.gdx.scenes.scene2d.ui.Container<T> com.badlogic.gdx.scenes.scene2d.ui.Container.prefSize(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Container'.__wrap(super(__Container, self).prefSize(arg0, arg1))

    @override
    @overload
    def setOriginX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOriginX(float)"""
        super(__scene2d.Actor, self).setOriginX(__float.valueOf(arg0))

    @override
    @overload
    def getHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getHeight()"""
        return float.__wrap(super(scene2d.Actor, self).getHeight())

    @override
    @overload
    def hasKeyboardFocus(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasKeyboardFocus()"""
        return bool.__wrap(super(scene2d.Actor, self).hasKeyboardFocus())

    @override
    @overload
    def getOriginY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getOriginY()"""
        return float.__wrap(super(scene2d.Actor, self).getOriginY())

    @override
    @overload
    def pack(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.pack()"""
        super(WidgetGroup, self).pack()

    @override
    @overload
    def clipEnd(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clipEnd()"""
        super(scene2d.Actor, self).clipEnd()

    @override
    @overload
    def addActorAfter(self, arg0: 'Actor', arg1: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Container.addActorAfter(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__Container, self).addActorAfter(arg0, arg1)

    @override
    @overload
    def getUserObject(self) -> object:
        """public java.lang.Object com.badlogic.gdx.scenes.scene2d.Actor.getUserObject()"""
        return object.__wrap(super(scene2d.Actor, self).getUserObject())

    @overload
    def minWidth(self, arg0: 'Value') -> 'Container':
        """public com.badlogic.gdx.scenes.scene2d.ui.Container<T> com.badlogic.gdx.scenes.scene2d.ui.Container.minWidth(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Container'.__wrap(super(__Container, self).minWidth(arg0))

    @overload
    def setActor(self, arg0: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Container.setActor(T)"""
        super(__Container, self).setActor(arg0)

    @overload
    def __init__(self, arg0: 'Actor'):
        """public com.badlogic.gdx.scenes.scene2d.ui.Container(T)"""
        val = __Container(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def rotateBy(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.rotateBy(float)"""
        super(__scene2d.Actor, self).rotateBy(__float.valueOf(arg0))

    @overload
    def size(self, arg0: float) -> 'Container':
        """public com.badlogic.gdx.scenes.scene2d.ui.Container<T> com.badlogic.gdx.scenes.scene2d.ui.Container.size(float)"""
        return 'Container'.__wrap(super(__Container, self).size(__float.valueOf(arg0)))

    @override
    @overload
    def layout(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Container.layout()"""
        super(Container, self).layout()

    @override
    @overload
    def setScale(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScale(float,float)"""
        super(__scene2d.Actor, self).setScale(__float.valueOf(arg0), __float.valueOf(arg1))

    @overload
    def addListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.addListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).addListener(arg0))

    @overload
    def minHeight(self, arg0: 'Value') -> 'Container':
        """public com.badlogic.gdx.scenes.scene2d.ui.Container<T> com.badlogic.gdx.scenes.scene2d.ui.Container.minHeight(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Container'.__wrap(super(__Container, self).minHeight(arg0))

    @override
    @overload
    def getMaxHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Container.getMaxHeight()"""
        return float.__wrap(super(Container, self).getMaxHeight())

    @override
    @overload
    def setVisible(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setVisible(boolean)"""
        super(__scene2d.Actor, self).setVisible(__boolean.valueOf(arg0))

    @override
    @overload
    def setY(self, arg0: float, arg1: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setY(float,int)"""
        super(__scene2d.Actor, self).setY(__float.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def setFillParent(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.setFillParent(boolean)"""
        super(__WidgetGroup, self).setFillParent(__boolean.valueOf(arg0))

    @override
    @overload
    def needsLayout(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.needsLayout()"""
        return bool.__wrap(super(WidgetGroup, self).needsLayout())

    @override
    @overload
    def setX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setX(float)"""
        super(__scene2d.Actor, self).setX(__float.valueOf(arg0))

    @override
    @overload
    def setOrigin(self, arg0: float, arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setOrigin(float,float)"""
        super(__scene2d.Actor, self).setOrigin(__float.valueOf(arg0), __float.valueOf(arg1))

    @override
    @overload
    def getCullingArea(self) -> 'math.Rectangle':
        """public com.badlogic.gdx.math.Rectangle com.badlogic.gdx.scenes.scene2d.Group.getCullingArea()"""
        return 'math.Rectangle'.__wrap(super(scene2d.Group, self).getCullingArea())

    @overload
    def pad(self, arg0: 'Value', arg1: 'Value', arg2: 'Value', arg3: 'Value') -> 'Container':
        """public com.badlogic.gdx.scenes.scene2d.ui.Container<T> com.badlogic.gdx.scenes.scene2d.ui.Container.pad(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Container'.__wrap(super(__Container, self).pad(arg0, arg1, arg2, arg3))

    @override
    @overload
    def getRight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getRight()"""
        return float.__wrap(super(scene2d.Actor, self).getRight())

    @overload
    def isAscendantOf(self, arg0: 'Actor') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isAscendantOf(com.badlogic.gdx.scenes.scene2d.Actor)"""
        return bool.__wrap(super(__scene2d.Actor, self).isAscendantOf(arg0))

    @overload
    def setRound(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Container.setRound(boolean)"""
        super(__Container, self).setRound(__boolean.valueOf(arg0))

    @overload
    def prefSize(self, arg0: 'Value') -> 'Container':
        """public com.badlogic.gdx.scenes.scene2d.ui.Container<T> com.badlogic.gdx.scenes.scene2d.ui.Container.prefSize(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Container'.__wrap(super(__Container, self).prefSize(arg0))

    @override
    @overload
    def hasParent(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.hasParent()"""
        return bool.__wrap(super(scene2d.Actor, self).hasParent())

    @overload
    def clip(self, arg0: bool) -> 'Container':
        """public com.badlogic.gdx.scenes.scene2d.ui.Container<T> com.badlogic.gdx.scenes.scene2d.ui.Container.clip(boolean)"""
        return 'Container'.__wrap(super(__Container, self).clip(__boolean.valueOf(arg0)))

    @overload
    def setBackground(self, arg0: 'Drawable', arg1: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Container.setBackground(com.badlogic.gdx.scenes.scene2d.utils.Drawable,boolean)"""
        super(__Container, self).setBackground(arg0, __boolean.valueOf(arg1))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.Group.toString()"""
        return str.__wrap(super(scene2d.Group, self).toString())

    @override
    @overload
    def getChildren(self) -> 'utils.SnapshotArray':
        """public com.badlogic.gdx.utils.SnapshotArray<com.badlogic.gdx.scenes.scene2d.Actor> com.badlogic.gdx.scenes.scene2d.Group.getChildren()"""
        return 'utils.SnapshotArray'.__wrap(super(scene2d.Group, self).getChildren())

    @override
    @overload
    def getPrefWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Container.getPrefWidth()"""
        return float.__wrap(super(Container, self).getPrefWidth())

    @overload
    def maxSize(self, arg0: float) -> 'Container':
        """public com.badlogic.gdx.scenes.scene2d.ui.Container<T> com.badlogic.gdx.scenes.scene2d.ui.Container.maxSize(float)"""
        return 'Container'.__wrap(super(__Container, self).maxSize(__float.valueOf(arg0)))

    @overload
    def getPadTopValue(self) -> 'Value':
        """public com.badlogic.gdx.scenes.scene2d.ui.Value com.badlogic.gdx.scenes.scene2d.ui.Container.getPadTopValue()"""
        return 'Value'.__wrap(super(Container, self).getPadTopValue())

    @override
    @overload
    def getScaleY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getScaleY()"""
        return float.__wrap(super(scene2d.Actor, self).getScaleY())

    @override
    @overload
    def getWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getWidth()"""
        return float.__wrap(super(scene2d.Actor, self).getWidth())

    @override
    @overload
    def setPosition(self, arg0: float, arg1: float, arg2: int):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setPosition(float,float,int)"""
        super(__scene2d.Actor, self).setPosition(__float.valueOf(arg0), __float.valueOf(arg1), __int.valueOf(arg2))

    @overload
    def getPrefHeightValue(self) -> 'Value':
        """public com.badlogic.gdx.scenes.scene2d.ui.Value com.badlogic.gdx.scenes.scene2d.ui.Container.getPrefHeightValue()"""
        return 'Value'.__wrap(super(Container, self).getPrefHeightValue())

    @override
    @overload
    def setLayoutEnabled(self, arg0: bool):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.setLayoutEnabled(boolean)"""
        super(__WidgetGroup, self).setLayoutEnabled(__boolean.valueOf(arg0))

    @overload
    def removeCaptureListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.removeCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).removeCaptureListener(arg0))

    @override
    @overload
    def invalidateHierarchy(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.invalidateHierarchy()"""
        super(WidgetGroup, self).invalidateHierarchy()

    @override
    @overload
    def setColor(self, arg0: 'Color'):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setColor(com.badlogic.gdx.graphics.Color)"""
        super(__scene2d.Actor, self).setColor(arg0)

    @overload
    def pad(self, arg0: 'Value') -> 'Container':
        """public com.badlogic.gdx.scenes.scene2d.ui.Container<T> com.badlogic.gdx.scenes.scene2d.ui.Container.pad(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Container'.__wrap(super(__Container, self).pad(arg0))

    @overload
    def addCaptureListener(self, arg0: 'EventListener') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.addCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)"""
        return bool.__wrap(super(__scene2d.Actor, self).addCaptureListener(arg0))

    @overload
    def fire(self, arg0: 'Event') -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.fire(com.badlogic.gdx.scenes.scene2d.Event)"""
        return bool.__wrap(super(__scene2d.Actor, self).fire(arg0))

    @override
    @overload
    def remove(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.remove()"""
        return bool.__wrap(super(scene2d.Actor, self).remove())

    @override
    @overload
    def addActor(self, arg0: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Container.addActor(com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__Container, self).addActor(arg0)

    @overload
    def removeActorAt(self, arg0: int, arg1: bool) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.ui.Container.removeActorAt(int,boolean)"""
        return 'scene2d.Actor'.__wrap(super(__Container, self).removeActorAt(__int.valueOf(arg0), __boolean.valueOf(arg1)))

    @overload
    def width(self, arg0: 'Value') -> 'Container':
        """public com.badlogic.gdx.scenes.scene2d.ui.Container<T> com.badlogic.gdx.scenes.scene2d.ui.Container.width(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Container'.__wrap(super(__Container, self).width(arg0))

    @override
    @overload
    def setCullingArea(self, arg0: 'Rectangle'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Container.setCullingArea(com.badlogic.gdx.math.Rectangle)"""
        super(__Container, self).setCullingArea(arg0)

    @override
    @overload
    def isVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).isVisible())

    @overload
    def getPadX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Container.getPadX()"""
        return float.__wrap(super(Container, self).getPadX())

    @overload
    def getPadY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Container.getPadY()"""
        return float.__wrap(super(Container, self).getPadY())

    @override
    @overload
    def addActorAt(self, arg0: int, arg1: 'Actor'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Container.addActorAt(int,com.badlogic.gdx.scenes.scene2d.Actor)"""
        super(__Container, self).addActorAt(__int.valueOf(arg0), arg1)

    @overload
    def maxHeight(self, arg0: 'Value') -> 'Container':
        """public com.badlogic.gdx.scenes.scene2d.ui.Container<T> com.badlogic.gdx.scenes.scene2d.ui.Container.maxHeight(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Container'.__wrap(super(__Container, self).maxHeight(arg0))

    @override
    @overload
    def debug(self) -> 'scene2d.Actor':
        """public com.badlogic.gdx.scenes.scene2d.Actor com.badlogic.gdx.scenes.scene2d.Actor.debug()"""
        return 'scene2d.Actor'.__wrap(super(scene2d.Actor, self).debug())

    @overload
    def minSize(self, arg0: float, arg1: float) -> 'Container':
        """public com.badlogic.gdx.scenes.scene2d.ui.Container<T> com.badlogic.gdx.scenes.scene2d.ui.Container.minSize(float,float)"""
        return 'Container'.__wrap(super(__Container, self).minSize(__float.valueOf(arg0), __float.valueOf(arg1)))

    @override
    @overload
    def getTop(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getTop()"""
        return float.__wrap(super(scene2d.Actor, self).getTop())

    @override
    @overload
    def clearActions(self):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.clearActions()"""
        super(scene2d.Actor, self).clearActions()

    @overload
    def getFillX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Container.getFillX()"""
        return float.__wrap(super(Container, self).getFillX())

    @overload
    def fill(self, arg0: bool, arg1: bool) -> 'Container':
        """public com.badlogic.gdx.scenes.scene2d.ui.Container<T> com.badlogic.gdx.scenes.scene2d.ui.Container.fill(boolean,boolean)"""
        return 'Container'.__wrap(super(__Container, self).fill(__boolean.valueOf(arg0), __boolean.valueOf(arg1)))

    @override
    @overload
    def setRotation(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setRotation(float)"""
        super(__scene2d.Actor, self).setRotation(__float.valueOf(arg0))

    @override
    @overload
    def getScaleX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.Actor.getScaleX()"""
        return float.__wrap(super(scene2d.Actor, self).getScaleX())

    @overload
    def firstAscendant(self, arg0: 'Class') -> 'scene2d.Actor':
        """public <T extends com.badlogic.gdx.scenes.scene2d.Actor> T com.badlogic.gdx.scenes.scene2d.Actor.firstAscendant(java.lang.Class<T>)"""
        return 'scene2d.Actor'.__wrap(super(__scene2d.Actor, self).firstAscendant(arg0))

    @overload
    def height(self, arg0: float) -> 'Container':
        """public com.badlogic.gdx.scenes.scene2d.ui.Container<T> com.badlogic.gdx.scenes.scene2d.ui.Container.height(float)"""
        return 'Container'.__wrap(super(__Container, self).height(__float.valueOf(arg0)))

    @override
    @overload
    def draw(self, arg0: 'Batch', arg1: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Container.draw(com.badlogic.gdx.graphics.g2d.Batch,float)"""
        super(__Container, self).draw(arg0, __float.valueOf(arg1))

    @override
    @overload
    def setScaleY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.Actor.setScaleY(float)"""
        super(__scene2d.Actor, self).setScaleY(__float.valueOf(arg0))

    @overload
    def center(self) -> 'Container':
        """public com.badlogic.gdx.scenes.scene2d.ui.Container<T> com.badlogic.gdx.scenes.scene2d.ui.Container.center()"""
        return 'Container'.__wrap(super(Container, self).center())

    @overload
    def stageToLocalCoordinates(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.scenes.scene2d.Actor.stageToLocalCoordinates(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__scene2d.Actor, self).stageToLocalCoordinates(arg0))

    @overload
    def swapActor(self, arg0: int, arg1: int) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.swapActor(int,int)"""
        return bool.__wrap(super(__scene2d.Group, self).swapActor(__int.valueOf(arg0), __int.valueOf(arg1)))

    @overload
    def prefHeight(self, arg0: float) -> 'Container':
        """public com.badlogic.gdx.scenes.scene2d.ui.Container<T> com.badlogic.gdx.scenes.scene2d.ui.Container.prefHeight(float)"""
        return 'Container'.__wrap(super(__Container, self).prefHeight(__float.valueOf(arg0)))

    @overload
    def padLeft(self, arg0: float) -> 'Container':
        """public com.badlogic.gdx.scenes.scene2d.ui.Container<T> com.badlogic.gdx.scenes.scene2d.ui.Container.padLeft(float)"""
        return 'Container'.__wrap(super(__Container, self).padLeft(__float.valueOf(arg0)))

    @override
    @overload
    def hasChildren(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.hasChildren()"""
        return bool.__wrap(super(scene2d.Group, self).hasChildren())

    @override
    @overload
    def ascendantsVisible(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.ascendantsVisible()"""
        return bool.__wrap(super(scene2d.Actor, self).ascendantsVisible())

    @overload
    def fillX(self) -> 'Container':
        """public com.badlogic.gdx.scenes.scene2d.ui.Container<T> com.badlogic.gdx.scenes.scene2d.ui.Container.fillX()"""
        return 'Container'.__wrap(super(Container, self).fillX())

    @override
    @overload
    def getColor(self) -> 'graphics.Color':
        """public com.badlogic.gdx.graphics.Color com.badlogic.gdx.scenes.scene2d.Actor.getColor()"""
        return 'graphics.Color'.__wrap(super(scene2d.Actor, self).getColor())

    @override
    @overload
    def isTransform(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Group.isTransform()"""
        return bool.__wrap(super(scene2d.Group, self).isTransform())

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def minSize(self, arg0: float) -> 'Container':
        """public com.badlogic.gdx.scenes.scene2d.ui.Container<T> com.badlogic.gdx.scenes.scene2d.ui.Container.minSize(float)"""
        return 'Container'.__wrap(super(__Container, self).minSize(__float.valueOf(arg0)))

    @overload
    def getMaxWidthValue(self) -> 'Value':
        """public com.badlogic.gdx.scenes.scene2d.ui.Value com.badlogic.gdx.scenes.scene2d.ui.Container.getMaxWidthValue()"""
        return 'Value'.__wrap(super(Container, self).getMaxWidthValue())

    @overload
    def padBottom(self, arg0: float) -> 'Container':
        """public com.badlogic.gdx.scenes.scene2d.ui.Container<T> com.badlogic.gdx.scenes.scene2d.ui.Container.padBottom(float)"""
        return 'Container'.__wrap(super(__Container, self).padBottom(__float.valueOf(arg0)))

    @overload
    def fillY(self) -> 'Container':
        """public com.badlogic.gdx.scenes.scene2d.ui.Container<T> com.badlogic.gdx.scenes.scene2d.ui.Container.fillY()"""
        return 'Container'.__wrap(super(Container, self).fillY())

    @override
    @overload
    def isTouchable(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.isTouchable()"""
        return bool.__wrap(super(scene2d.Actor, self).isTouchable())

    @overload
    def clipBegin(self, arg0: float, arg1: float, arg2: float, arg3: float) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.Actor.clipBegin(float,float,float,float)"""
        return bool.__wrap(super(__scene2d.Actor, self).clipBegin(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3)))

    @overload
    def setBackground(self, arg0: 'Drawable'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Container.setBackground(com.badlogic.gdx.scenes.scene2d.utils.Drawable)"""
        super(__Container, self).setBackground(arg0)

    @overload
    def height(self, arg0: 'Value') -> 'Container':
        """public com.badlogic.gdx.scenes.scene2d.ui.Container<T> com.badlogic.gdx.scenes.scene2d.ui.Container.height(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Container'.__wrap(super(__Container, self).height(arg0))

    @overload
    def pad(self, arg0: float) -> 'Container':
        """public com.badlogic.gdx.scenes.scene2d.ui.Container<T> com.badlogic.gdx.scenes.scene2d.ui.Container.pad(float)"""
        return 'Container'.__wrap(super(__Container, self).pad(__float.valueOf(arg0))) 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.Cell
from pyquantum_helper import import_once as __import_once__
import java.lang.Boolean as Boolean
from builtins import str
try:
    from pygdx.scenes import scene2d
except ImportError:
    scene2d = __import_once__("pygdx.scenes.scene2d")

from pyquantum_helper import transform as __transform
from pyquantum_helper import override
import java.lang.Boolean as __boolean
import java.lang.Object as __object
from builtins import type
from builtins import float
import java.lang.Float as Float
import java.lang.Boolean as __Boolean
__Boolean = __Boolean
import com.badlogic.gdx.scenes.scene2d.ui.Cell as __Cell
__Cell = __Cell
import com.badlogic.gdx.scenes.scene2d.ui.Table as __Table
__Table = __Table
import java.lang.Long as __long
import java.lang.Float as __float
import java.lang.Class as __Class
__Class = __Class
import java.lang.String as __String
__String = __String
import java.lang.Integer as Integer
import java.lang.Object as __Object
__Object = __Object
import com.badlogic.gdx.scenes.scene2d.Actor as __Actor
__Actor = __Actor
import java.lang.Integer as __int
import com.badlogic.gdx.scenes.scene2d.ui.Value as __Value
__Value = __Value
from builtins import bool
from builtins import int
 
class Cell(pygdx.__Pool_Poolable, utils.Pool$Poolable):
    """com.badlogic.gdx.scenes.scene2d.ui.Cell"""
 
    @staticmethod
    def __wrap(java_value: __Cell) -> 'Cell':
        return Cell(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Cell):
        """
        Dynamic initializer for Cell.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def setActorHeight(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Cell.setActorHeight(float)"""
        super(__Cell, self).setActorHeight(__float.valueOf(arg0))

    @overload
    def hasActor(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Cell.hasActor()"""
        return bool.__wrap(super(Cell, self).hasActor())

    @overload
    def pad(self, arg0: float) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.pad(float)"""
        return 'Cell'.__wrap(super(__Cell, self).pad(__float.valueOf(arg0)))

    @overload
    def __init__(self, ):
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell()"""
        val = __Cell()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def size(self, arg0: 'Value', arg1: 'Value') -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.size(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Cell'.__wrap(super(__Cell, self).size(arg0, arg1))

    @overload
    def minSize(self, arg0: float) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.minSize(float)"""
        return 'Cell'.__wrap(super(__Cell, self).minSize(__float.valueOf(arg0)))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def pad(self, arg0: 'Value') -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.pad(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Cell'.__wrap(super(__Cell, self).pad(arg0))

    @overload
    def fillX(self) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.fillX()"""
        return 'Cell'.__wrap(super(Cell, self).fillX())

    @overload
    def getMaxHeightValue(self) -> 'Value':
        """public com.badlogic.gdx.scenes.scene2d.ui.Value com.badlogic.gdx.scenes.scene2d.ui.Cell.getMaxHeightValue()"""
        return 'Value'.__wrap(super(Cell, self).getMaxHeightValue())

    @overload
    def maxSize(self, arg0: float, arg1: float) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.maxSize(float,float)"""
        return 'Cell'.__wrap(super(__Cell, self).maxSize(__float.valueOf(arg0), __float.valueOf(arg1)))

    @overload
    def expand(self, arg0: int, arg1: int) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.expand(int,int)"""
        return 'Cell'.__wrap(super(__Cell, self).expand(__int.valueOf(arg0), __int.valueOf(arg1)))

    @overload
    def getPrefWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Cell.getPrefWidth()"""
        return float.__wrap(super(Cell, self).getPrefWidth())

    @overload
    def row(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Cell.row()"""
        super(Cell, self).row()

    @overload
    def growY(self) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.growY()"""
        return 'Cell'.__wrap(super(Cell, self).growY())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0))

    @overload
    def pad(self, arg0: 'Value', arg1: 'Value', arg2: 'Value', arg3: 'Value') -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.pad(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Cell'.__wrap(super(__Cell, self).pad(arg0, arg1, arg2, arg3))

    @overload
    def getPadLeftValue(self) -> 'Value':
        """public com.badlogic.gdx.scenes.scene2d.ui.Value com.badlogic.gdx.scenes.scene2d.ui.Cell.getPadLeftValue()"""
        return 'Value'.__wrap(super(Cell, self).getPadLeftValue())

    @overload
    def getPadY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Cell.getPadY()"""
        return float.__wrap(super(Cell, self).getPadY())

    @overload
    def spaceBottom(self, arg0: float) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.spaceBottom(float)"""
        return 'Cell'.__wrap(super(__Cell, self).spaceBottom(__float.valueOf(arg0)))

    @overload
    def prefSize(self, arg0: 'Value') -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.prefSize(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Cell'.__wrap(super(__Cell, self).prefSize(arg0))

    @overload
    def prefHeight(self, arg0: float) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.prefHeight(float)"""
        return 'Cell'.__wrap(super(__Cell, self).prefHeight(__float.valueOf(arg0)))

    @overload
    def minSize(self, arg0: 'Value', arg1: 'Value') -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.minSize(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Cell'.__wrap(super(__Cell, self).minSize(arg0, arg1))

    @overload
    def fill(self) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.fill()"""
        return 'Cell'.__wrap(super(Cell, self).fill())

    @overload
    def getColspan(self) -> 'Integer':
        """public java.lang.Integer com.badlogic.gdx.scenes.scene2d.ui.Cell.getColspan()"""
        return __transform(super(Cell, self).getColspan()).'Integer'Value()

    @overload
    def minHeight(self, arg0: 'Value') -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.minHeight(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Cell'.__wrap(super(__Cell, self).minHeight(arg0))

    @overload
    def expandY(self) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.expandY()"""
        return 'Cell'.__wrap(super(Cell, self).expandY())

    @overload
    def getSpaceRightValue(self) -> 'Value':
        """public com.badlogic.gdx.scenes.scene2d.ui.Value com.badlogic.gdx.scenes.scene2d.ui.Cell.getSpaceRightValue()"""
        return 'Value'.__wrap(super(Cell, self).getSpaceRightValue())

    @overload
    def getPrefHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Cell.getPrefHeight()"""
        return float.__wrap(super(Cell, self).getPrefHeight())

    @overload
    def getPadRightValue(self) -> 'Value':
        """public com.badlogic.gdx.scenes.scene2d.ui.Value com.badlogic.gdx.scenes.scene2d.ui.Cell.getPadRightValue()"""
        return 'Value'.__wrap(super(Cell, self).getPadRightValue())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def __init__(self):
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell()"""
        val = __Cell()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def setActorX(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Cell.setActorX(float)"""
        super(__Cell, self).setActorX(__float.valueOf(arg0))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def minWidth(self, arg0: 'Value') -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.minWidth(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Cell'.__wrap(super(__Cell, self).minWidth(arg0))

    @overload
    def spaceTop(self, arg0: 'Value') -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.spaceTop(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Cell'.__wrap(super(__Cell, self).spaceTop(arg0))

    @overload
    def getMaxHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Cell.getMaxHeight()"""
        return float.__wrap(super(Cell, self).getMaxHeight())

    @overload
    def uniform(self, arg0: bool, arg1: bool) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.uniform(boolean,boolean)"""
        return 'Cell'.__wrap(super(__Cell, self).uniform(__boolean.valueOf(arg0), __boolean.valueOf(arg1)))

    @overload
    def maxHeight(self, arg0: float) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.maxHeight(float)"""
        return 'Cell'.__wrap(super(__Cell, self).maxHeight(__float.valueOf(arg0)))

    @overload
    def spaceTop(self, arg0: float) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.spaceTop(float)"""
        return 'Cell'.__wrap(super(__Cell, self).spaceTop(__float.valueOf(arg0)))

    @overload
    def setActorBounds(self, arg0: float, arg1: float, arg2: float, arg3: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Cell.setActorBounds(float,float,float,float)"""
        super(__Cell, self).setActorBounds(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3))

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @overload
    def getAlign(self) -> 'Integer':
        """public java.lang.Integer com.badlogic.gdx.scenes.scene2d.ui.Cell.getAlign()"""
        return __transform(super(Cell, self).getAlign()).'Integer'Value()

    @overload
    def getActor(self) -> 'scene2d.Actor':
        """public T com.badlogic.gdx.scenes.scene2d.ui.Cell.getActor()"""
        return 'scene2d.Actor'.__wrap(super(Cell, self).getActor())

    @overload
    def left(self) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.left()"""
        return 'Cell'.__wrap(super(Cell, self).left())

    @overload
    def padLeft(self, arg0: float) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.padLeft(float)"""
        return 'Cell'.__wrap(super(__Cell, self).padLeft(__float.valueOf(arg0)))

    @overload
    def padBottom(self, arg0: float) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.padBottom(float)"""
        return 'Cell'.__wrap(super(__Cell, self).padBottom(__float.valueOf(arg0)))

    @overload
    def align(self, arg0: int) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.align(int)"""
        return 'Cell'.__wrap(super(__Cell, self).align(__int.valueOf(arg0)))

    @overload
    def getPadTop(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Cell.getPadTop()"""
        return float.__wrap(super(Cell, self).getPadTop())

    @overload
    def getSpaceLeftValue(self) -> 'Value':
        """public com.badlogic.gdx.scenes.scene2d.ui.Value com.badlogic.gdx.scenes.scene2d.ui.Cell.getSpaceLeftValue()"""
        return 'Value'.__wrap(super(Cell, self).getSpaceLeftValue())

    @overload
    def getPadBottom(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Cell.getPadBottom()"""
        return float.__wrap(super(Cell, self).getPadBottom())

    @overload
    def prefWidth(self, arg0: float) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.prefWidth(float)"""
        return 'Cell'.__wrap(super(__Cell, self).prefWidth(__float.valueOf(arg0)))

    @overload
    def minSize(self, arg0: float, arg1: float) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.minSize(float,float)"""
        return 'Cell'.__wrap(super(__Cell, self).minSize(__float.valueOf(arg0), __float.valueOf(arg1)))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @overload
    def expandX(self) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.expandX()"""
        return 'Cell'.__wrap(super(Cell, self).expandX())

    @overload
    def minWidth(self, arg0: float) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.minWidth(float)"""
        return 'Cell'.__wrap(super(__Cell, self).minWidth(__float.valueOf(arg0)))

    @overload
    def space(self, arg0: 'Value') -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.space(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Cell'.__wrap(super(__Cell, self).space(arg0))

    @overload
    def spaceBottom(self, arg0: 'Value') -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.spaceBottom(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Cell'.__wrap(super(__Cell, self).spaceBottom(arg0))

    @overload
    def setActorY(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Cell.setActorY(float)"""
        super(__Cell, self).setActorY(__float.valueOf(arg0))

    @overload
    def right(self) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.right()"""
        return 'Cell'.__wrap(super(Cell, self).right())

    @overload
    def getTable(self) -> 'Table':
        """public com.badlogic.gdx.scenes.scene2d.ui.Table com.badlogic.gdx.scenes.scene2d.ui.Cell.getTable()"""
        return 'Table'.__wrap(super(Cell, self).getTable())

    @overload
    def getPrefHeightValue(self) -> 'Value':
        """public com.badlogic.gdx.scenes.scene2d.ui.Value com.badlogic.gdx.scenes.scene2d.ui.Cell.getPrefHeightValue()"""
        return 'Value'.__wrap(super(Cell, self).getPrefHeightValue())

    @overload
    def space(self, arg0: 'Value', arg1: 'Value', arg2: 'Value', arg3: 'Value') -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.space(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Cell'.__wrap(super(__Cell, self).space(arg0, arg1, arg2, arg3))

    @overload
    def getSpaceLeft(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Cell.getSpaceLeft()"""
        return float.__wrap(super(Cell, self).getSpaceLeft())

    @overload
    def padRight(self, arg0: float) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.padRight(float)"""
        return 'Cell'.__wrap(super(__Cell, self).padRight(__float.valueOf(arg0)))

    @overload
    def maxSize(self, arg0: 'Value', arg1: 'Value') -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.maxSize(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Cell'.__wrap(super(__Cell, self).maxSize(arg0, arg1))

    @overload
    def getMaxWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Cell.getMaxWidth()"""
        return float.__wrap(super(Cell, self).getMaxWidth())

    @override
    @overload
    def reset(self):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Cell.reset()"""
        super(Cell, self).reset()

    @overload
    def getPadTopValue(self) -> 'Value':
        """public com.badlogic.gdx.scenes.scene2d.ui.Value com.badlogic.gdx.scenes.scene2d.ui.Cell.getPadTopValue()"""
        return 'Value'.__wrap(super(Cell, self).getPadTopValue())

    @overload
    def getActorWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Cell.getActorWidth()"""
        return float.__wrap(super(Cell, self).getActorWidth())

    @overload
    def getExpandY(self) -> 'Integer':
        """public java.lang.Integer com.badlogic.gdx.scenes.scene2d.ui.Cell.getExpandY()"""
        return __transform(super(Cell, self).getExpandY()).'Integer'Value()

    @overload
    def growX(self) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.growX()"""
        return 'Cell'.__wrap(super(Cell, self).growX())

    @overload
    def prefSize(self, arg0: float, arg1: float) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.prefSize(float,float)"""
        return 'Cell'.__wrap(super(__Cell, self).prefSize(__float.valueOf(arg0), __float.valueOf(arg1)))

    @overload
    def uniformY(self) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.uniformY()"""
        return 'Cell'.__wrap(super(Cell, self).uniformY())

    @overload
    def getSpaceTopValue(self) -> 'Value':
        """public com.badlogic.gdx.scenes.scene2d.ui.Value com.badlogic.gdx.scenes.scene2d.ui.Cell.getSpaceTopValue()"""
        return 'Value'.__wrap(super(Cell, self).getSpaceTopValue())

    @overload
    def getExpandX(self) -> 'Integer':
        """public java.lang.Integer com.badlogic.gdx.scenes.scene2d.ui.Cell.getExpandX()"""
        return __transform(super(Cell, self).getExpandX()).'Integer'Value()

    @overload
    def getActorY(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Cell.getActorY()"""
        return float.__wrap(super(Cell, self).getActorY())

    @overload
    def center(self) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.center()"""
        return 'Cell'.__wrap(super(Cell, self).center())

    @overload
    def clearActor(self) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.clearActor()"""
        return 'Cell'.__wrap(super(Cell, self).clearActor())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def getPadLeft(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Cell.getPadLeft()"""
        return float.__wrap(super(Cell, self).getPadLeft())

    @overload
    def maxSize(self, arg0: 'Value') -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.maxSize(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Cell'.__wrap(super(__Cell, self).maxSize(arg0))

    @overload
    def minHeight(self, arg0: float) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.minHeight(float)"""
        return 'Cell'.__wrap(super(__Cell, self).minHeight(__float.valueOf(arg0)))

    @overload
    def height(self, arg0: float) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.height(float)"""
        return 'Cell'.__wrap(super(__Cell, self).height(__float.valueOf(arg0)))

    @overload
    def getPadRight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Cell.getPadRight()"""
        return float.__wrap(super(Cell, self).getPadRight())

    @overload
    def getFillY(self) -> 'Float':
        """public java.lang.Float com.badlogic.gdx.scenes.scene2d.ui.Cell.getFillY()"""
        return __transform(super(Cell, self).getFillY()).'Float'Value()

    @overload
    def getActorHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Cell.getActorHeight()"""
        return float.__wrap(super(Cell, self).getActorHeight())

    @overload
    def getFillX(self) -> 'Float':
        """public java.lang.Float com.badlogic.gdx.scenes.scene2d.ui.Cell.getFillX()"""
        return __transform(super(Cell, self).getFillX()).'Float'Value()

    @overload
    def minSize(self, arg0: 'Value') -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.minSize(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Cell'.__wrap(super(__Cell, self).minSize(arg0))

    @overload
    def colspan(self, arg0: int) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.colspan(int)"""
        return 'Cell'.__wrap(super(__Cell, self).colspan(__int.valueOf(arg0)))

    @overload
    def spaceRight(self, arg0: 'Value') -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.spaceRight(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Cell'.__wrap(super(__Cell, self).spaceRight(arg0))

    @overload
    def getUniformY(self) -> 'Boolean':
        """public java.lang.Boolean com.badlogic.gdx.scenes.scene2d.ui.Cell.getUniformY()"""
        return 'Boolean'.__wrap(super(Cell, self).getUniformY())

    @overload
    def bottom(self) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.bottom()"""
        return 'Cell'.__wrap(super(Cell, self).bottom())

    @overload
    def spaceRight(self, arg0: float) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.spaceRight(float)"""
        return 'Cell'.__wrap(super(__Cell, self).spaceRight(__float.valueOf(arg0)))

    @overload
    def fill(self, arg0: bool) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.fill(boolean)"""
        return 'Cell'.__wrap(super(__Cell, self).fill(__boolean.valueOf(arg0)))

    @overload
    def spaceLeft(self, arg0: float) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.spaceLeft(float)"""
        return 'Cell'.__wrap(super(__Cell, self).spaceLeft(__float.valueOf(arg0)))

    @overload
    def width(self, arg0: float) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.width(float)"""
        return 'Cell'.__wrap(super(__Cell, self).width(__float.valueOf(arg0)))

    @overload
    def expand(self) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.expand()"""
        return 'Cell'.__wrap(super(Cell, self).expand())

    @overload
    def expand(self, arg0: bool, arg1: bool) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.expand(boolean,boolean)"""
        return 'Cell'.__wrap(super(__Cell, self).expand(__boolean.valueOf(arg0), __boolean.valueOf(arg1)))

    @overload
    def padTop(self, arg0: float) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.padTop(float)"""
        return 'Cell'.__wrap(super(__Cell, self).padTop(__float.valueOf(arg0)))

    @overload
    def padRight(self, arg0: 'Value') -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.padRight(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Cell'.__wrap(super(__Cell, self).padRight(arg0))

    @overload
    def getSpaceRight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Cell.getSpaceRight()"""
        return float.__wrap(super(Cell, self).getSpaceRight())

    @overload
    def size(self, arg0: 'Value') -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.size(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Cell'.__wrap(super(__Cell, self).size(arg0))

    @overload
    def getComputedPadRight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Cell.getComputedPadRight()"""
        return float.__wrap(super(Cell, self).getComputedPadRight())

    @overload
    def pad(self, arg0: float, arg1: float, arg2: float, arg3: float) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.pad(float,float,float,float)"""
        return 'Cell'.__wrap(super(__Cell, self).pad(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3)))

    @overload
    def getPadX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Cell.getPadX()"""
        return float.__wrap(super(Cell, self).getPadX())

    @overload
    def getPrefWidthValue(self) -> 'Value':
        """public com.badlogic.gdx.scenes.scene2d.ui.Value com.badlogic.gdx.scenes.scene2d.ui.Cell.getPrefWidthValue()"""
        return 'Value'.__wrap(super(Cell, self).getPrefWidthValue())

    @overload
    def spaceLeft(self, arg0: 'Value') -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.spaceLeft(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Cell'.__wrap(super(__Cell, self).spaceLeft(arg0))

    @overload
    def getSpaceTop(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Cell.getSpaceTop()"""
        return float.__wrap(super(Cell, self).getSpaceTop())

    @overload
    def prefWidth(self, arg0: 'Value') -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.prefWidth(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Cell'.__wrap(super(__Cell, self).prefWidth(arg0))

    @overload
    def fillY(self) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.fillY()"""
        return 'Cell'.__wrap(super(Cell, self).fillY())

    @overload
    def getMaxWidthValue(self) -> 'Value':
        """public com.badlogic.gdx.scenes.scene2d.ui.Value com.badlogic.gdx.scenes.scene2d.ui.Cell.getMaxWidthValue()"""
        return 'Value'.__wrap(super(Cell, self).getMaxWidthValue())

    @overload
    def uniformX(self) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.uniformX()"""
        return 'Cell'.__wrap(super(Cell, self).uniformX())

    @overload
    def setActorWidth(self, arg0: float):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Cell.setActorWidth(float)"""
        super(__Cell, self).setActorWidth(__float.valueOf(arg0))

    @overload
    def maxSize(self, arg0: float) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.maxSize(float)"""
        return 'Cell'.__wrap(super(__Cell, self).maxSize(__float.valueOf(arg0)))

    @overload
    def getMinWidthValue(self) -> 'Value':
        """public com.badlogic.gdx.scenes.scene2d.ui.Value com.badlogic.gdx.scenes.scene2d.ui.Cell.getMinWidthValue()"""
        return 'Value'.__wrap(super(Cell, self).getMinWidthValue())

    @overload
    def maxWidth(self, arg0: float) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.maxWidth(float)"""
        return 'Cell'.__wrap(super(__Cell, self).maxWidth(__float.valueOf(arg0)))

    @overload
    def getMinWidth(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Cell.getMinWidth()"""
        return float.__wrap(super(Cell, self).getMinWidth())

    @overload
    def padTop(self, arg0: 'Value') -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.padTop(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Cell'.__wrap(super(__Cell, self).padTop(arg0))

    @overload
    def getMinHeight(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Cell.getMinHeight()"""
        return float.__wrap(super(Cell, self).getMinHeight())

    @overload
    def isEndRow(self) -> bool:
        """public boolean com.badlogic.gdx.scenes.scene2d.ui.Cell.isEndRow()"""
        return bool.__wrap(super(Cell, self).isEndRow())

    @overload
    def size(self, arg0: float, arg1: float) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.size(float,float)"""
        return 'Cell'.__wrap(super(__Cell, self).size(__float.valueOf(arg0), __float.valueOf(arg1)))

    @overload
    def getSpaceBottom(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Cell.getSpaceBottom()"""
        return float.__wrap(super(Cell, self).getSpaceBottom())

    @staticmethod
    @overload
    def defaults() -> 'Cell':
        """public static com.badlogic.gdx.scenes.scene2d.ui.Cell com.badlogic.gdx.scenes.scene2d.ui.Cell.defaults()"""
        return Cell.__wrap(__Cell.defaults())

    @overload
    def prefSize(self, arg0: float) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.prefSize(float)"""
        return 'Cell'.__wrap(super(__Cell, self).prefSize(__float.valueOf(arg0)))

    @overload
    def getSpaceBottomValue(self) -> 'Value':
        """public com.badlogic.gdx.scenes.scene2d.ui.Value com.badlogic.gdx.scenes.scene2d.ui.Cell.getSpaceBottomValue()"""
        return 'Value'.__wrap(super(Cell, self).getSpaceBottomValue())

    @overload
    def grow(self) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.grow()"""
        return 'Cell'.__wrap(super(Cell, self).grow())

    @overload
    def getUniformX(self) -> 'Boolean':
        """public java.lang.Boolean com.badlogic.gdx.scenes.scene2d.ui.Cell.getUniformX()"""
        return 'Boolean'.__wrap(super(Cell, self).getUniformX())

    @overload
    def uniform(self) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.uniform()"""
        return 'Cell'.__wrap(super(Cell, self).uniform())

    @overload
    def getPadBottomValue(self) -> 'Value':
        """public com.badlogic.gdx.scenes.scene2d.ui.Value com.badlogic.gdx.scenes.scene2d.ui.Cell.getPadBottomValue()"""
        return 'Value'.__wrap(super(Cell, self).getPadBottomValue())

    @overload
    def height(self, arg0: 'Value') -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.height(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Cell'.__wrap(super(__Cell, self).height(arg0))

    @overload
    def uniform(self, arg0: bool) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.uniform(boolean)"""
        return 'Cell'.__wrap(super(__Cell, self).uniform(__boolean.valueOf(arg0)))

    @overload
    def getComputedPadBottom(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Cell.getComputedPadBottom()"""
        return float.__wrap(super(Cell, self).getComputedPadBottom())

    @overload
    def size(self, arg0: float) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.size(float)"""
        return 'Cell'.__wrap(super(__Cell, self).size(__float.valueOf(arg0)))

    @overload
    def getMinHeightValue(self) -> 'Value':
        """public com.badlogic.gdx.scenes.scene2d.ui.Value com.badlogic.gdx.scenes.scene2d.ui.Cell.getMinHeightValue()"""
        return 'Value'.__wrap(super(Cell, self).getMinHeightValue())

    @overload
    def fill(self, arg0: float, arg1: float) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.fill(float,float)"""
        return 'Cell'.__wrap(super(__Cell, self).fill(__float.valueOf(arg0), __float.valueOf(arg1)))

    @overload
    def top(self) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.top()"""
        return 'Cell'.__wrap(super(Cell, self).top())

    @overload
    def padLeft(self, arg0: 'Value') -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.padLeft(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Cell'.__wrap(super(__Cell, self).padLeft(arg0))

    @overload
    def prefHeight(self, arg0: 'Value') -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.prefHeight(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Cell'.__wrap(super(__Cell, self).prefHeight(arg0))

    @overload
    def prefSize(self, arg0: 'Value', arg1: 'Value') -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.prefSize(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Cell'.__wrap(super(__Cell, self).prefSize(arg0, arg1))

    @overload
    def setActor(self, arg0: 'Actor') -> 'Cell':
        """public <A extends com.badlogic.gdx.scenes.scene2d.Actor> com.badlogic.gdx.scenes.scene2d.ui.Cell<A> com.badlogic.gdx.scenes.scene2d.ui.Cell.setActor(A)"""
        return 'Cell'.__wrap(super(__Cell, self).setActor(arg0))

    @overload
    def width(self, arg0: 'Value') -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.width(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Cell'.__wrap(super(__Cell, self).width(arg0))

    @overload
    def getRow(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.ui.Cell.getRow()"""
        return int.__wrap(super(Cell, self).getRow())

    @overload
    def maxWidth(self, arg0: 'Value') -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.maxWidth(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Cell'.__wrap(super(__Cell, self).maxWidth(arg0))

    @overload
    def padBottom(self, arg0: 'Value') -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.padBottom(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Cell'.__wrap(super(__Cell, self).padBottom(arg0))

    @overload
    def fill(self, arg0: bool, arg1: bool) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.fill(boolean,boolean)"""
        return 'Cell'.__wrap(super(__Cell, self).fill(__boolean.valueOf(arg0), __boolean.valueOf(arg1)))

    @overload
    def maxHeight(self, arg0: 'Value') -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.maxHeight(com.badlogic.gdx.scenes.scene2d.ui.Value)"""
        return 'Cell'.__wrap(super(__Cell, self).maxHeight(arg0))

    @overload
    def space(self, arg0: float, arg1: float, arg2: float, arg3: float) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.space(float,float,float,float)"""
        return 'Cell'.__wrap(super(__Cell, self).space(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3)))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def setTable(self, arg0: 'Table'):
        """public void com.badlogic.gdx.scenes.scene2d.ui.Cell.setTable(com.badlogic.gdx.scenes.scene2d.ui.Table)"""
        super(__Cell, self).setTable(arg0)

    @overload
    def getColumn(self) -> int:
        """public int com.badlogic.gdx.scenes.scene2d.ui.Cell.getColumn()"""
        return int.__wrap(super(Cell, self).getColumn())

    @overload
    def space(self, arg0: float) -> 'Cell':
        """public com.badlogic.gdx.scenes.scene2d.ui.Cell<T> com.badlogic.gdx.scenes.scene2d.ui.Cell.space(float)"""
        return 'Cell'.__wrap(super(__Cell, self).space(__float.valueOf(arg0)))

    @overload
    def getActorX(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Cell.getActorX()"""
        return float.__wrap(super(Cell, self).getActorX())

    @overload
    def getComputedPadTop(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Cell.getComputedPadTop()"""
        return float.__wrap(super(Cell, self).getComputedPadTop())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String com.badlogic.gdx.scenes.scene2d.ui.Cell.toString()"""
        return str.__wrap(super(Cell, self).toString())

    @overload
    def getComputedPadLeft(self) -> float:
        """public float com.badlogic.gdx.scenes.scene2d.ui.Cell.getComputedPadLeft()"""
        return float.__wrap(super(Cell, self).getComputedPadLeft()) 
 
 
# CLASS: com.badlogic.gdx.scenes.scene2d.ui.Table$DebugRect
from pyquantum_helper import import_once as __import_once__
from builtins import str
from pyquantum_helper import override
import java.lang.Object as __object
from builtins import type
from builtins import float
import com.badlogic.gdx.scenes.scene2d.ui.Table as __Table_DebugRect
__DebugRect = __Table_DebugRect.DebugRect
import com.badlogic.gdx.math.Vector2 as __Vector2
__Vector2 = __Vector2
import com.badlogic.gdx.math.Rectangle as __Rectangle
__Rectangle = __Rectangle
import java.lang.Long as __long
import java.lang.Float as __float
import java.lang.Class as __Class
__Class = __Class
import java.lang.String as __String
__String = __String
import java.lang.String as __string
import java.lang.Object as __Object
__Object = __Object
try:
    from pygdx import math
except ImportError:
    math = __import_once__("pygdx.math")

import java.lang.Integer as __int
from builtins import bool
from builtins import int
 
class DebugRect(pygdx.__Rectangle, math.Rectangle):
    """com.badlogic.gdx.scenes.scene2d.ui.Table.DebugRect"""
 
    @staticmethod
    def __wrap(java_value: __DebugRect) -> 'DebugRect':
        return DebugRect(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __DebugRect):
        """
        Dynamic initializer for DebugRect.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def fromString(self, arg0: str) -> 'math.Rectangle':
        """public com.badlogic.gdx.math.Rectangle com.badlogic.gdx.math.Rectangle.fromString(java.lang.String)"""
        return 'math.Rectangle'.__wrap(super(__math.Rectangle, self).fromString(arg0))

    @overload
    def contains(self, arg0: 'Rectangle') -> bool:
        """public boolean com.badlogic.gdx.math.Rectangle.contains(com.badlogic.gdx.math.Rectangle)"""
        return bool.__wrap(super(__math.Rectangle, self).contains(arg0))

    @overload
    def merge(self, arg0: 'Rectangle') -> 'math.Rectangle':
        """public com.badlogic.gdx.math.Rectangle com.badlogic.gdx.math.Rectangle.merge(com.badlogic.gdx.math.Rectangle)"""
        return 'math.Rectangle'.__wrap(super(__math.Rectangle, self).merge(arg0))

    @override
    @overload
    def getAspectRatio(self) -> float:
        """public float com.badlogic.gdx.math.Rectangle.getAspectRatio()"""
        return float.__wrap(super(math.Rectangle, self).getAspectRatio())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def __init__(self, ):
        """public com.badlogic.gdx.scenes.scene2d.ui.Table$DebugRect()"""
        val = __DebugRect()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def contains(self, arg0: float, arg1: float) -> bool:
        """public boolean com.badlogic.gdx.math.Rectangle.contains(float,float)"""
        return bool.__wrap(super(__math.Rectangle, self).contains(__float.valueOf(arg0), __float.valueOf(arg1)))

    @override
    @overload
    def getY(self) -> float:
        """public float com.badlogic.gdx.math.Rectangle.getY()"""
        return float.__wrap(super(math.Rectangle, self).getY())

    @overload
    def setHeight(self, arg0: float) -> 'math.Rectangle':
        """public com.badlogic.gdx.math.Rectangle com.badlogic.gdx.math.Rectangle.setHeight(float)"""
        return 'math.Rectangle'.__wrap(super(__math.Rectangle, self).setHeight(__float.valueOf(arg0)))

    @overload
    def overlaps(self, arg0: 'Rectangle') -> bool:
        """public boolean com.badlogic.gdx.math.Rectangle.overlaps(com.badlogic.gdx.math.Rectangle)"""
        return bool.__wrap(super(__math.Rectangle, self).overlaps(arg0))

    @overload
    def merge(self, arg0: float, arg1: float) -> 'math.Rectangle':
        """public com.badlogic.gdx.math.Rectangle com.badlogic.gdx.math.Rectangle.merge(float,float)"""
        return 'math.Rectangle'.__wrap(super(__math.Rectangle, self).merge(__float.valueOf(arg0), __float.valueOf(arg1)))

    @overload
    def setX(self, arg0: float) -> 'math.Rectangle':
        """public com.badlogic.gdx.math.Rectangle com.badlogic.gdx.math.Rectangle.setX(float)"""
        return 'math.Rectangle'.__wrap(super(__math.Rectangle, self).setX(__float.valueOf(arg0)))

    @override
    @overload
    def area(self) -> float:
        """public float com.badlogic.gdx.math.Rectangle.area()"""
        return float.__wrap(super(math.Rectangle, self).area())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def setY(self, arg0: float) -> 'math.Rectangle':
        """public com.badlogic.gdx.math.Rectangle com.badlogic.gdx.math.Rectangle.setY(float)"""
        return 'math.Rectangle'.__wrap(super(__math.Rectangle, self).setY(__float.valueOf(arg0)))

    @overload
    def merge(self, arg0: 'Vector2') -> 'math.Rectangle':
        """public com.badlogic.gdx.math.Rectangle com.badlogic.gdx.math.Rectangle.merge(com.badlogic.gdx.math.Vector2[])"""
        return 'math.Rectangle'.__wrap(super(__math.Rectangle, self).merge(arg0))

    @override
    @overload
    def getX(self) -> float:
        """public float com.badlogic.gdx.math.Rectangle.getX()"""
        return float.__wrap(super(math.Rectangle, self).getX())

    @overload
    def getCenter(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.math.Rectangle.getCenter(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__math.Rectangle, self).getCenter(arg0))

    @overload
    def fitOutside(self, arg0: 'Rectangle') -> 'math.Rectangle':
        """public com.badlogic.gdx.math.Rectangle com.badlogic.gdx.math.Rectangle.fitOutside(com.badlogic.gdx.math.Rectangle)"""
        return 'math.Rectangle'.__wrap(super(__math.Rectangle, self).fitOutside(arg0))

    @overload
    def setWidth(self, arg0: float) -> 'math.Rectangle':
        """public com.badlogic.gdx.math.Rectangle com.badlogic.gdx.math.Rectangle.setWidth(float)"""
        return 'math.Rectangle'.__wrap(super(__math.Rectangle, self).setWidth(__float.valueOf(arg0)))

    @overload
    def getPosition(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.math.Rectangle.getPosition(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__math.Rectangle, self).getPosition(arg0))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean com.badlogic.gdx.math.Rectangle.equals(java.lang.Object)"""
        return bool.__wrap(super(__math.Rectangle, self).equals(arg0))

    @overload
    def getSize(self, arg0: 'Vector2') -> 'math.Vector2':
        """public com.badlogic.gdx.math.Vector2 com.badlogic.gdx.math.Rectangle.getSize(com.badlogic.gdx.math.Vector2)"""
        return 'math.Vector2'.__wrap(super(__math.Rectangle, self).getSize(arg0))

    @overload
    def set(self, arg0: float, arg1: float, arg2: float, arg3: float) -> 'math.Rectangle':
        """public com.badlogic.gdx.math.Rectangle com.badlogic.gdx.math.Rectangle.set(float,float,float,float)"""
        return 'math.Rectangle'.__wrap(super(__math.Rectangle, self).set(__float.valueOf(arg0), __float.valueOf(arg1), __float.valueOf(arg2), __float.valueOf(arg3)))

    @overload
    def set(self, arg0: 'Rectangle') -> 'math.Rectangle':
        """public com.badlogic.gdx.math.Rectangle com.badlogic.gdx.math.Rectangle.set(com.badlogic.gdx.math.Rectangle)"""
        return 'math.Rectangle'.__wrap(super(__math.Rectangle, self).set(arg0))

    @overload
    def contains(self, arg0: 'Vector2') -> bool:
        """public boolean com.badlogic.gdx.math.Rectangle.contains(com.badlogic.gdx.math.Vector2)"""
        return bool.__wrap(super(__math.Rectangle, self).contains(arg0))

    @overload
    def merge(self, arg0: 'Vector2') -> 'math.Rectangle':
        """public com.badlogic.gdx.math.Rectangle com.badlogic.gdx.math.Rectangle.merge(com.badlogic.gdx.math.Vector2)"""
        return 'math.Rectangle'.__wrap(super(__math.Rectangle, self).merge(arg0))

    @override
    @overload
    def hashCode(self) -> int:
        """public int com.badlogic.gdx.math.Rectangle.hashCode()"""
        return int.__wrap(super(math.Rectangle, self).hashCode())

    @overload
    def setCenter(self, arg0: 'Vector2') -> 'math.Rectangle':
        """public com.badlogic.gdx.math.Rectangle com.badlogic.gdx.math.Rectangle.setCenter(com.badlogic.gdx.math.Vector2)"""
        return 'math.Rectangle'.__wrap(super(__math.Rectangle, self).setCenter(arg0))

    @override
    @overload
    def getHeight(self) -> float:
        """public float com.badlogic.gdx.math.Rectangle.getHeight()"""
        return float.__wrap(super(math.Rectangle, self).getHeight())

    @override
    @overload
    def getWidth(self) -> float:
        """public float com.badlogic.gdx.math.Rectangle.getWidth()"""
        return float.__wrap(super(math.Rectangle, self).getWidth())

    @overload
    def setPosition(self, arg0: float, arg1: float) -> 'math.Rectangle':
        """public com.badlogic.gdx.math.Rectangle com.badlogic.gdx.math.Rectangle.setPosition(float,float)"""
        return 'math.Rectangle'.__wrap(super(__math.Rectangle, self).setPosition(__float.valueOf(arg0), __float.valueOf(arg1)))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @overload
    def fitInside(self, arg0: 'Rectangle') -> 'math.Rectangle':
        """public com.badlogic.gdx.math.Rectangle com.badlogic.gdx.math.Rectangle.fitInside(com.badlogic.gdx.math.Rectangle)"""
        return 'math.Rectangle'.__wrap(super(__math.Rectangle, self).fitInside(arg0))

    @override
    @overload
    def perimeter(self) -> float:
        """public float com.badlogic.gdx.math.Rectangle.perimeter()"""
        return float.__wrap(super(math.Rectangle, self).perimeter())

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def __init__(self):
        """public com.badlogic.gdx.scenes.scene2d.ui.Table$DebugRect()"""
        val = __DebugRect()
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def setSize(self, arg0: float) -> 'math.Rectangle':
        """public com.badlogic.gdx.math.Rectangle com.badlogic.gdx.math.Rectangle.setSize(float)"""
        return 'math.Rectangle'.__wrap(super(__math.Rectangle, self).setSize(__float.valueOf(arg0)))

    @overload
    def setCenter(self, arg0: float, arg1: float) -> 'math.Rectangle':
        """public com.badlogic.gdx.math.Rectangle com.badlogic.gdx.math.Rectangle.setCenter(float,float)"""
        return 'math.Rectangle'.__wrap(super(__math.Rectangle, self).setCenter(__float.valueOf(arg0), __float.valueOf(arg1)))

    @overload
    def contains(self, arg0: 'Circle') -> bool:
        """public boolean com.badlogic.gdx.math.Rectangle.contains(com.badlogic.gdx.math.Circle)"""
        return bool.__wrap(super(__math.Rectangle, self).contains(arg0))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def setSize(self, arg0: float, arg1: float) -> 'math.Rectangle':
        """public com.badlogic.gdx.math.Rectangle com.badlogic.gdx.math.Rectangle.setSize(float,float)"""
        return 'math.Rectangle'.__wrap(super(__math.Rectangle, self).setSize(__float.valueOf(arg0), __float.valueOf(arg1)))

    @overload
    def setPosition(self, arg0: 'Vector2') -> 'math.Rectangle':
        """public com.badlogic.gdx.math.Rectangle com.badlogic.gdx.math.Rectangle.setPosition(com.badlogic.gdx.math.Vector2)"""
        return 'math.Rectangle'.__wrap(super(__math.Rectangle, self).setPosition(arg0))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String com.badlogic.gdx.math.Rectangle.toString()"""
        return str.__wrap(super(math.Rectangle, self).toString())