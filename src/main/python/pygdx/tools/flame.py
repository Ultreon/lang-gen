from __future__ import annotations
from overload import overload


 
from pyquantum_helper import import_once as _import_once
import javax.accessibility.AccessibleContext as AccessibleContext
import javax.swing.JToolTip as JToolTip
import java.awt.event.HierarchyBoundsListener as HierarchyBoundsListener
import java.awt.event.ActionListener as _ActionListener
_ActionListener = _ActionListener
import java.awt.ComponentOrientation as _ComponentOrientation
_ComponentOrientation = _ComponentOrientation
import java.awt.image.ImageProducer as ImageProducer
import com.badlogic.gdx.utils.Array as _Array
_Array = _Array
import java.awt.GraphicsConfiguration as GraphicsConfiguration
import java.awt.Graphics as _Graphics
_Graphics = _Graphics
import javax.swing.JToolTip as _JToolTip
_JToolTip = _JToolTip
import java.awt.Container as _Container
_Container = _Container
import java.awt.MenuComponent as MenuComponent
import java.awt.im.InputMethodRequests as _InputMethodRequests
_InputMethodRequests = _InputMethodRequests
import java.awt.FocusTraversalPolicy as _FocusTraversalPolicy
_FocusTraversalPolicy = _FocusTraversalPolicy
import java.lang.Byte as _byte
import java.awt.Dimension as Dimension
import java.awt.Font as _Font
_Font = _Font
import javax.swing.plaf.PanelUI as _PanelUI
_PanelUI = _PanelUI
import java.awt.event.ContainerListener as ContainerListener
import javax.swing.event.AncestorListener as AncestorListener
import java.awt.AWTEvent as AWTEvent
import java.awt.image.ColorModel as _ColorModel
_ColorModel = _ColorModel
import java.lang.Object as _object
import java.awt.ComponentOrientation as ComponentOrientation
import java.awt.im.InputContext as _InputContext
_InputContext = _InputContext
from builtins import float
import java.awt.event.HierarchyListener as HierarchyListener
import java.awt.event.InputMethodListener as InputMethodListener
from typing import List
import java.awt.event.MouseWheelListener as _MouseWheelListener
_MouseWheelListener = _MouseWheelListener
import java.awt.event.KeyListener as KeyListener
import java.awt.Component as Component
from builtins import int
import java.awt.LayoutManager as LayoutManager
import java.awt.FontMetrics as _FontMetrics
_FontMetrics = _FontMetrics
import java.awt.Container as Container
try:
    from pygdx.graphics import g2d
except ImportError:
    g2d = _import_once("pygdx.graphics.g2d")

from builtins import type
import java.awt.image.VolatileImage as _VolatileImage
_VolatileImage = _VolatileImage
import java.awt.Shape as Shape
import java.awt.Rectangle as Rectangle
import java.awt.event.ContainerListener as _ContainerListener
_ContainerListener = _ContainerListener
import java.awt.event.HierarchyListener as _HierarchyListener
_HierarchyListener = _HierarchyListener
import java.lang.String as _string
import javax.swing.InputVerifier as _InputVerifier
_InputVerifier = _InputVerifier
import com.badlogic.gdx.tools.flame.TexturePanel as _TexturePanel
_TexturePanel = _TexturePanel
import java.awt.Insets as _Insets
_Insets = _Insets
import javax.swing.border.Border as _Border
_Border = _Border
import java.awt.event.ComponentListener as _ComponentListener
_ComponentListener = _ComponentListener
import javax.swing.ActionMap as ActionMap
import java.beans.VetoableChangeListener as VetoableChangeListener
import java.awt.event.ComponentListener as ComponentListener
import javax.swing.KeyStroke as KeyStroke
import java.beans.VetoableChangeListener as _VetoableChangeListener
_VetoableChangeListener = _VetoableChangeListener
from builtins import object
import java.awt.event.KeyListener as _KeyListener
_KeyListener = _KeyListener
import java.awt.Component.BaselineResizeBehavior as BaselineResizeBehavior
import java.awt.Component as _Component_BaselineResizeBehavior
_BaselineResizeBehavior = _Component_BaselineResizeBehavior.BaselineResizeBehavior
import java.awt.Cursor as _Cursor
_Cursor = _Cursor
import java.awt.im.InputMethodRequests as InputMethodRequests
import java.lang.Long as _long
import javax.swing.JPanel as _JPanel
_JPanel = _JPanel
import java.awt.event.FocusListener as _FocusListener
_FocusListener = _FocusListener
import java.lang.Character as _char
import javax.swing.TransferHandler as TransferHandler
import java.awt.event.FocusEvent.Cause as Cause
import javax.accessibility.AccessibleContext as _AccessibleContext
_AccessibleContext = _AccessibleContext
import java.awt.event.MouseWheelListener as MouseWheelListener
import java.util.Set as _Set
_Set = _Set
import java.awt.image.ColorModel as ColorModel
import java.lang.Boolean as _boolean
import java.awt.event.MouseMotionListener as MouseMotionListener
import java.util.EventListener as EventListener
import java.awt.Insets as Insets
import javax.swing.KeyStroke as _KeyStroke
_KeyStroke = _KeyStroke
import java.awt.GraphicsConfiguration as _GraphicsConfiguration
_GraphicsConfiguration = _GraphicsConfiguration
import java.awt.dnd.DropTarget as _DropTarget
_DropTarget = _DropTarget
from builtins import bool
import java.beans.PropertyChangeListener as _PropertyChangeListener
_PropertyChangeListener = _PropertyChangeListener
try:
    from pygdx import utils
except ImportError:
    utils = _import_once("pygdx.utils")

import java.awt.LayoutManager as _LayoutManager
_LayoutManager = _LayoutManager
import java.awt.PopupMenu as PopupMenu
import java.util.EventListener as _EventListener
_EventListener = _EventListener
import java.awt.im.InputContext as InputContext
import java.awt.Component as _Component
_Component = _Component
import java.awt.Font as Font
import java.awt.image.VolatileImage as VolatileImage
import java.awt.dnd.DropTarget as DropTarget
import java.lang.String as _String
_String = _String
import java.lang.Float as _float
import java.awt.Cursor as Cursor
import java.awt.event.MouseListener as _MouseListener
_MouseListener = _MouseListener
import java.awt.Toolkit as _Toolkit
_Toolkit = _Toolkit
import java.io.PrintStream as PrintStream
import javax.swing.JRootPane as _JRootPane
_JRootPane = _JRootPane
import java.awt.Dimension as _Dimension
_Dimension = _Dimension
import java.awt.event.ActionListener as ActionListener
import java.awt.event.MouseEvent as MouseEvent
import java.awt.Color as _Color
_Color = _Color
import javax.swing.JPopupMenu as _JPopupMenu
_JPopupMenu = _JPopupMenu
import javax.swing.InputMap as _InputMap
_InputMap = _InputMap
import java.awt.event.MouseListener as MouseListener
import com.badlogic.gdx.tools.flame.TextureAtlasPanel as _TextureAtlasPanel
_TextureAtlasPanel = _TextureAtlasPanel
import java.lang.Class as _Class
_Class = _Class
import java.util.Locale as Locale
import java.lang.Double as _double
import javax.swing.plaf.PanelUI as PanelUI
import java.awt.Point as _Point
_Point = _Point
import java.lang.Object as _Object
_Object = _Object
import java.beans.PropertyChangeListener as PropertyChangeListener
import javax.swing.border.Border as Border
import javax.swing.JComponent as _JComponent
_JComponent = _JComponent
import javax.swing.InputVerifier as InputVerifier
import java.io.PrintWriter as PrintWriter
import java.awt.Point as Point
import javax.swing.event.AncestorListener as _AncestorListener
_AncestorListener = _AncestorListener
import java.lang.Short as _short
import java.awt.Toolkit as Toolkit
import java.awt.event.HierarchyBoundsListener as _HierarchyBoundsListener
_HierarchyBoundsListener = _HierarchyBoundsListener
import javax.swing.TransferHandler as _TransferHandler
_TransferHandler = _TransferHandler
import javax.swing.InputMap as InputMap
import java.awt.Rectangle as _Rectangle
_Rectangle = _Rectangle
import javax.swing.JRootPane as JRootPane
import java.awt.Event as Event
import java.awt.event.FocusListener as FocusListener
import java.awt.image.ImageObserver as ImageObserver
from builtins import str
from pyquantum_helper import override
import javax.swing.ActionMap as _ActionMap
_ActionMap = _ActionMap
import java.awt.FocusTraversalPolicy as FocusTraversalPolicy
import java.awt.event.MouseMotionListener as _MouseMotionListener
_MouseMotionListener = _MouseMotionListener
import java.awt.event.InputMethodListener as _InputMethodListener
_InputMethodListener = _InputMethodListener
import javax.swing.JPopupMenu as JPopupMenu
import java.util.Set as Set
import java.lang.Integer as _int
import java.awt.Image as _Image
_Image = _Image
import java.awt.FontMetrics as FontMetrics
import java.awt.Color as Color
import java.awt.Image as Image
import java.awt.Graphics as Graphics
import java.awt.ImageCapabilities as ImageCapabilities
import java.util.Locale as _Locale
_Locale = _Locale
 
class TextureAtlasPanel():
    """com.badlogic.gdx.tools.flame.TextureAtlasPanel"""
 
    @staticmethod
    def _wrap(java_value: _TextureAtlasPanel) -> 'TextureAtlasPanel':
        return TextureAtlasPanel(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _TextureAtlasPanel):
        """
        Dynamic initializer for TextureAtlasPanel.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_TextureAtlasPanel__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_TextureAtlasPanel__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def removeVetoableChangeListener(self, arg0: 'VetoableChangeListener'):
        """public synchronized void javax.swing.JComponent.removeVetoableChangeListener(java.beans.VetoableChangeListener)"""
        super(_JComponent, self).removeVetoableChangeListener(arg0)

    @override
    @overload
    def getComponents(self) -> List['Component']:
        """public java.awt.Component[] java.awt.Container.getComponents()"""
        return List['Component']._wrap(super(Container, self).getComponents())

    @override
    @overload
    def setDebugGraphicsOptions(self, arg0: int):
        """public void javax.swing.JComponent.setDebugGraphicsOptions(int)"""
        super(_JComponent, self).setDebugGraphicsOptions(_int.valueOf(arg0))

    @override
    @overload
    def isValid(self) -> bool:
        """public boolean java.awt.Component.isValid()"""
        return bool._wrap(super(Component, self).isValid())

    @overload
    def setAtlas(self, arg0: 'TextureAtlas', arg1: str):
        """public void com.badlogic.gdx.tools.flame.TextureAtlasPanel.setAtlas(com.badlogic.gdx.graphics.g2d.TextureAtlas,java.lang.String)"""
        super(_TextureAtlasPanel, self).setAtlas(arg0, arg1)

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def getDefaultLocale() -> 'Locale':
        """public static java.util.Locale javax.swing.JComponent.getDefaultLocale()"""
        return Locale._wrap(_JComponent.getDefaultLocale())

    @override
    @overload
    def getInputVerifier(self) -> 'InputVerifier':
        """public javax.swing.InputVerifier javax.swing.JComponent.getInputVerifier()"""
        return 'InputVerifier'._wrap(super(JComponent, self).getInputVerifier())

    @override
    @overload
    def list(self, arg0: 'PrintStream', arg1: int):
        """public void java.awt.Container.list(java.io.PrintStream,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @override
    @overload
    def setUI(self, arg0: 'PanelUI'):
        """public void javax.swing.JPanel.setUI(javax.swing.plaf.PanelUI)"""
        super(_JPanel, self).setUI(arg0)

    @override
    @overload
    def getFocusTraversalPolicy(self) -> 'FocusTraversalPolicy':
        """public java.awt.FocusTraversalPolicy java.awt.Container.getFocusTraversalPolicy()"""
        return 'FocusTraversalPolicy'._wrap(super(Container, self).getFocusTraversalPolicy())

    @override
    @overload
    def getParent(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getParent()"""
        return 'Container'._wrap(super(Component, self).getParent())

    @override
    @overload
    def paintImmediately(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.paintImmediately(java.awt.Rectangle)"""
        super(_JComponent, self).paintImmediately(arg0)

    @staticmethod
    @overload
    def setDefaultLocale(arg0: 'Locale'):
        """public static void javax.swing.JComponent.setDefaultLocale(java.util.Locale)"""
        _JComponent.setDefaultLocale(arg0)

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,float,float)"""
        super(_Component, self).firePropertyChange(arg0, _float.valueOf(arg1), _float.valueOf(arg2))

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object)"""
        super(_Container, self).add(arg0, arg1)

    @override
    @overload
    def getLocale(self) -> 'Locale':
        """public java.util.Locale java.awt.Component.getLocale()"""
        return 'Locale'._wrap(super(Component, self).getLocale())

    @override
    @overload
    def setInheritsPopupMenu(self, arg0: bool):
        """public void javax.swing.JComponent.setInheritsPopupMenu(boolean)"""
        super(_JComponent, self).setInheritsPopupMenu(_boolean.valueOf(arg0))

    @override
    @overload
    def getHierarchyListeners(self) -> List['HierarchyListener']:
        """public synchronized java.awt.event.HierarchyListener[] java.awt.Component.getHierarchyListeners()"""
        return List['HierarchyListener']._wrap(super(Component, self).getHierarchyListeners())

    @override
    @overload
    def nextFocus(self):
        """public void java.awt.Component.nextFocus()"""
        super(Component, self).nextFocus()

    @override
    @overload
    def isPaintingTile(self) -> bool:
        """public boolean javax.swing.JComponent.isPaintingTile()"""
        return bool._wrap(super(JComponent, self).isPaintingTile())

    @override
    @overload
    def isDisplayable(self) -> bool:
        """public boolean java.awt.Component.isDisplayable()"""
        return bool._wrap(super(Component, self).isDisplayable())

    @override
    @overload
    def getBounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.getBounds()"""
        return 'Rectangle'._wrap(super(Component, self).getBounds())

    @override
    @overload
    def removeMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.removeMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).removeMouseMotionListener(arg0)

    @override
    @overload
    def isShowing(self) -> bool:
        """public boolean java.awt.Component.isShowing()"""
        return bool._wrap(super(Component, self).isShowing())

    @override
    @overload
    def getDropTarget(self) -> 'DropTarget':
        """public synchronized java.awt.dnd.DropTarget java.awt.Component.getDropTarget()"""
        return 'DropTarget'._wrap(super(Component, self).getDropTarget())

    @override
    @overload
    def isFontSet(self) -> bool:
        """public boolean java.awt.Component.isFontSet()"""
        return bool._wrap(super(Component, self).isFontSet())

    @overload
    def mouseUp(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseUp(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseUp(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def setIgnoreRepaint(self, arg0: bool):
        """public void java.awt.Component.setIgnoreRepaint(boolean)"""
        super(_Component, self).setIgnoreRepaint(_boolean.valueOf(arg0))

    @override
    @overload
    def getPropertyChangeListeners(self) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners()"""
        return List['PropertyChangeListener']._wrap(super(Component, self).getPropertyChangeListeners())

    @override
    @overload
    def isBackgroundSet(self) -> bool:
        """public boolean java.awt.Component.isBackgroundSet()"""
        return bool._wrap(super(Component, self).isBackgroundSet())

    @override
    @overload
    def getLocation(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocation()"""
        return 'Point'._wrap(super(Component, self).getLocation())

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int._wrap(super(object, self).hashCode())

    @overload
    def clearSelection(self):
        """public void com.badlogic.gdx.tools.flame.TextureAtlasPanel.clearSelection()"""
        super(TextureAtlasPanel, self).clearSelection()

    @override
    @overload
    def location(self) -> 'Point':
        """public java.awt.Point java.awt.Component.location()"""
        return 'Point'._wrap(super(Component, self).location())

    @override
    @overload
    def getComponentOrientation(self) -> 'ComponentOrientation':
        """public java.awt.ComponentOrientation java.awt.Component.getComponentOrientation()"""
        return 'ComponentOrientation'._wrap(super(Component, self).getComponentOrientation())

    @override
    @overload
    def addHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.addHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).addHierarchyListener(arg0)

    @overload
    def getCurrentRegionPanel(self) -> 'TexturePanel':
        """public com.badlogic.gdx.tools.flame.TexturePanel com.badlogic.gdx.tools.flame.TextureAtlasPanel.getCurrentRegionPanel()"""
        return 'TexturePanel'._wrap(super(TextureAtlasPanel, self).getCurrentRegionPanel())

    @override
    @overload
    def getInheritsPopupMenu(self) -> bool:
        """public boolean javax.swing.JComponent.getInheritsPopupMenu()"""
        return bool._wrap(super(JComponent, self).getInheritsPopupMenu())

    @override
    @overload
    def setComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Component.setComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Component, self).setComponentOrientation(arg0)

    @override
    @overload
    def getFocusCycleRootAncestor(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getFocusCycleRootAncestor()"""
        return 'Container'._wrap(super(Component, self).getFocusCycleRootAncestor())

    @override
    @overload
    def show(self, arg0: bool):
        """public void java.awt.Component.show(boolean)"""
        super(_Component, self).show(_boolean.valueOf(arg0))

    @override
    @overload
    def grabFocus(self):
        """public void javax.swing.JComponent.grabFocus()"""
        super(JComponent, self).grabFocus()

    @overload
    def locate(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.locate(int,int)"""
        return 'Component'._wrap(super(_Container, self).locate(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def isPaintingForPrint(self) -> bool:
        """public final boolean javax.swing.JComponent.isPaintingForPrint()"""
        return bool._wrap(super(JComponent, self).isPaintingForPrint())

    @overload
    def keyDown(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyDown(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyDown(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,int,int)"""
        super(_JComponent, self).firePropertyChange(arg0, _int.valueOf(arg1), _int.valueOf(arg2))

    @override
    @overload
    def getLayout(self) -> 'LayoutManager':
        """public java.awt.LayoutManager java.awt.Container.getLayout()"""
        return 'LayoutManager'._wrap(super(Container, self).getLayout())

    @override
    @overload
    def preferredSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.preferredSize()"""
        return 'Dimension'._wrap(super(Container, self).preferredSize())

    @override
    @overload
    def addNotify(self):
        """public void javax.swing.JComponent.addNotify()"""
        super(JComponent, self).addNotify()

    @override
    @overload
    def setSize(self, arg0: int, arg1: int):
        """public void java.awt.Component.setSize(int,int)"""
        super(_Component, self).setSize(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.repaint(int,int,int,int)"""
        super(_Component, self).repaint(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @overload
    def requestFocusInWindow(self, arg0: 'Cause') -> bool:
        """public boolean java.awt.Component.requestFocusInWindow(java.awt.event.FocusEvent$Cause)"""
        return bool._wrap(super(_Component, self).requestFocusInWindow(arg0))

    @override
    @overload
    def remove(self, arg0: int):
        """public void java.awt.Container.remove(int)"""
        super(_Container, self).remove(_int.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,long,long)"""
        super(_Component, self).firePropertyChange(arg0, _long.valueOf(arg1), _long.valueOf(arg2))

    @override
    @overload
    def setFocusCycleRoot(self, arg0: bool):
        """public void java.awt.Container.setFocusCycleRoot(boolean)"""
        super(_Container, self).setFocusCycleRoot(_boolean.valueOf(arg0))

    @overload
    def keyUp(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyUp(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyUp(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def setBackground(self, arg0: 'Color'):
        """public void javax.swing.JComponent.setBackground(java.awt.Color)"""
        super(_JComponent, self).setBackground(arg0)

    @override
    @overload
    def doLayout(self):
        """public void java.awt.Container.doLayout()"""
        super(Container, self).doLayout()

    @override
    @overload
    def enable(self):
        """public void javax.swing.JComponent.enable()"""
        super(JComponent, self).enable()

    @override
    @overload
    def getInsets(self) -> 'Insets':
        """public java.awt.Insets javax.swing.JComponent.getInsets()"""
        return 'Insets'._wrap(super(JComponent, self).getInsets())

    @override
    @overload
    def setNextFocusableComponent(self, arg0: 'Component'):
        """public void javax.swing.JComponent.setNextFocusableComponent(java.awt.Component)"""
        super(_JComponent, self).setNextFocusableComponent(arg0)

    @override
    @overload
    def getAlignmentY(self) -> float:
        """public float javax.swing.JComponent.getAlignmentY()"""
        return float._wrap(super(JComponent, self).getAlignmentY())

    @overload
    def checkImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @override
    @overload
    def getFocusTraversalKeysEnabled(self) -> bool:
        """public boolean java.awt.Component.getFocusTraversalKeysEnabled()"""
        return bool._wrap(super(Component, self).getFocusTraversalKeysEnabled())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getRootPane(self) -> 'JRootPane':
        """public javax.swing.JRootPane javax.swing.JComponent.getRootPane()"""
        return 'JRootPane'._wrap(super(JComponent, self).getRootPane())

    @override
    @overload
    def invalidate(self):
        """public void java.awt.Container.invalidate()"""
        super(Container, self).invalidate()

    @override
    @overload
    def resetKeyboardActions(self):
        """public void javax.swing.JComponent.resetKeyboardActions()"""
        super(JComponent, self).resetKeyboardActions()

    @overload
    def getComponent(self, arg0: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponent(int)"""
        return 'Component'._wrap(super(_Container, self).getComponent(_int.valueOf(arg0)))

    @override
    @overload
    def addPropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Container.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Container, self).addPropertyChangeListener(arg0, arg1)

    @override
    @overload
    def setInputMap(self, arg0: int, arg1: 'InputMap'):
        """public final void javax.swing.JComponent.setInputMap(int,javax.swing.InputMap)"""
        super(_JComponent, self).setInputMap(_int.valueOf(arg0), arg1)

    @override
    @overload
    def removePropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0)

    @override
    @overload
    def applyComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Container.applyComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Container, self).applyComponentOrientation(arg0)

    @override
    @overload
    def setBorder(self, arg0: 'Border'):
        """public void javax.swing.JComponent.setBorder(javax.swing.border.Border)"""
        super(_JComponent, self).setBorder(arg0)

    @override
    @overload
    def remove(self, arg0: 'MenuComponent'):
        """public void java.awt.Component.remove(java.awt.MenuComponent)"""
        super(_Component, self).remove(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintStream'):
        """public void java.awt.Component.list(java.io.PrintStream)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def removeMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.removeMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).removeMouseListener(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintWriter'):
        """public void java.awt.Component.list(java.io.PrintWriter)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def getKeyListeners(self) -> List['KeyListener']:
        """public synchronized java.awt.event.KeyListener[] java.awt.Component.getKeyListeners()"""
        return List['KeyListener']._wrap(super(Component, self).getKeyListeners())

    @override
    @overload
    def getInputContext(self) -> 'InputContext':
        """public java.awt.im.InputContext java.awt.Component.getInputContext()"""
        return 'InputContext'._wrap(super(Component, self).getInputContext())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,double,double)"""
        super(_Component, self).firePropertyChange(arg0, _double.valueOf(arg1), _double.valueOf(arg2))

    @override
    @overload
    def removeAncestorListener(self, arg0: 'AncestorListener'):
        """public void javax.swing.JComponent.removeAncestorListener(javax.swing.event.AncestorListener)"""
        super(_JComponent, self).removeAncestorListener(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintWriter', arg1: int):
        """public void java.awt.Container.list(java.io.PrintWriter,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @overload
    def checkImage(self, arg0: 'Image', arg1: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, arg1))

    @override
    @overload
    def removeFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.removeFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).removeFocusListener(arg0)

    @overload
    def mouseDown(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDown(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDown(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getConditionForKeyStroke(self, arg0: 'KeyStroke') -> int:
        """public int javax.swing.JComponent.getConditionForKeyStroke(javax.swing.KeyStroke)"""
        return int._wrap(super(_JComponent, self).getConditionForKeyStroke(arg0))

    @override
    @overload
    def getTreeLock(self) -> object:
        """public final java.lang.Object java.awt.Component.getTreeLock()"""
        return object._wrap(super(Component, self).getTreeLock())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @override
    @overload
    def addVetoableChangeListener(self, arg0: 'VetoableChangeListener'):
        """public synchronized void javax.swing.JComponent.addVetoableChangeListener(java.beans.VetoableChangeListener)"""
        super(_JComponent, self).addVetoableChangeListener(arg0)

    @overload
    def contains(self, arg0: 'Point') -> bool:
        """public boolean java.awt.Component.contains(java.awt.Point)"""
        return bool._wrap(super(_Component, self).contains(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,short,short)"""
        super(_Component, self).firePropertyChange(arg0, _short.valueOf(arg1), _short.valueOf(arg2))

    @override
    @overload
    def dispatchEvent(self, arg0: 'AWTEvent'):
        """public final void java.awt.Component.dispatchEvent(java.awt.AWTEvent)"""
        super(_Component, self).dispatchEvent(arg0)

    @override
    @overload
    def removeContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.removeContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).removeContainerListener(arg0)

    @override
    @overload
    def getGraphicsConfiguration(self) -> 'GraphicsConfiguration':
        """public java.awt.GraphicsConfiguration java.awt.Component.getGraphicsConfiguration()"""
        return 'GraphicsConfiguration'._wrap(super(Component, self).getGraphicsConfiguration())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: bool, arg2: bool):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,boolean,boolean)"""
        super(_JComponent, self).firePropertyChange(arg0, _boolean.valueOf(arg1), _boolean.valueOf(arg2))

    @override
    @overload
    def registerKeyboardAction(self, arg0: 'ActionListener', arg1: str, arg2: 'KeyStroke', arg3: int):
        """public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,java.lang.String,javax.swing.KeyStroke,int)"""
        super(_JComponent, self).registerKeyboardAction(arg0, arg1, arg2, _int.valueOf(arg3))

    @overload
    def __init__(self):
        """public com.badlogic.gdx.tools.flame.TextureAtlasPanel()"""
        val = _TextureAtlasPanel()
        self.__wrapper = val

    @overload
    def findComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(arg0))

    @override
    @overload
    def resize(self, arg0: int, arg1: int):
        """public void java.awt.Component.resize(int,int)"""
        super(_Component, self).resize(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getHeight(self) -> int:
        """public int javax.swing.JComponent.getHeight()"""
        return int._wrap(super(JComponent, self).getHeight())

    @override
    @overload
    def getTransferHandler(self) -> 'TransferHandler':
        """public javax.swing.TransferHandler javax.swing.JComponent.getTransferHandler()"""
        return 'TransferHandler'._wrap(super(JComponent, self).getTransferHandler())

    @overload
    def imageUpdate(self, arg0: 'Image', arg1: int, arg2: int, arg3: int, arg4: int, arg5: int) -> bool:
        """public boolean java.awt.Component.imageUpdate(java.awt.Image,int,int,int,int,int)"""
        return bool._wrap(super(_Component, self).imageUpdate(arg0, _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4), _int.valueOf(arg5)))

    @override
    @overload
    def getWidth(self) -> int:
        """public int javax.swing.JComponent.getWidth()"""
        return int._wrap(super(JComponent, self).getWidth())

    @override
    @overload
    def transferFocusBackward(self):
        """public void java.awt.Component.transferFocusBackward()"""
        super(Component, self).transferFocusBackward()

    @overload
    def getPropertyChangeListeners(self, arg0: str) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners(java.lang.String)"""
        return List['PropertyChangeListener']._wrap(super(_Component, self).getPropertyChangeListeners(arg0))

    @overload
    def getAtlasName(self) -> str:
        """public java.lang.String com.badlogic.gdx.tools.flame.TextureAtlasPanel.getAtlasName()"""
        return str._wrap(super(TextureAtlasPanel, self).getAtlasName())

    @staticmethod
    @overload
    def isLightweightComponent(arg0: 'Component') -> bool:
        """public static boolean javax.swing.JComponent.isLightweightComponent(java.awt.Component)"""
        return bool._wrap(_JComponent.isLightweightComponent(arg0))

    @override
    @overload
    def getBorder(self) -> 'Border':
        """public javax.swing.border.Border javax.swing.JComponent.getBorder()"""
        return 'Border'._wrap(super(JComponent, self).getBorder())

    @override
    @overload
    def printAll(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.printAll(java.awt.Graphics)"""
        super(_JComponent, self).printAll(arg0)

    @override
    @overload
    def addComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.addComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).addComponentListener(arg0)

    @override
    @overload
    def getBaselineResizeBehavior(self) -> 'BaselineResizeBehavior.Component$BaselineResizeBehavior':
        """public java.awt.Component$BaselineResizeBehavior javax.swing.JComponent.getBaselineResizeBehavior()"""
        return 'BaselineResizeBehavior.Component$BaselineResizeBehavior'._wrap(super(JComponent, self).getBaselineResizeBehavior())

    @override
    @overload
    def print(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.print(java.awt.Graphics)"""
        super(_JComponent, self).print(arg0)

    @override
    @overload
    def setInputVerifier(self, arg0: 'InputVerifier'):
        """public void javax.swing.JComponent.setInputVerifier(javax.swing.InputVerifier)"""
        super(_JComponent, self).setInputVerifier(arg0)

    @override
    @overload
    def addAncestorListener(self, arg0: 'AncestorListener'):
        """public void javax.swing.JComponent.addAncestorListener(javax.swing.event.AncestorListener)"""
        super(_JComponent, self).addAncestorListener(arg0)

    @override
    @overload
    def getFont(self) -> 'Font':
        """public java.awt.Font java.awt.Component.getFont()"""
        return 'Font'._wrap(super(Component, self).getFont())

    @override
    @overload
    def setFont(self, arg0: 'Font'):
        """public void javax.swing.JComponent.setFont(java.awt.Font)"""
        super(_JComponent, self).setFont(arg0)

    @override
    @overload
    def isOptimizedDrawingEnabled(self) -> bool:
        """public boolean javax.swing.JComponent.isOptimizedDrawingEnabled()"""
        return bool._wrap(super(JComponent, self).isOptimizedDrawingEnabled())

    @override
    @overload
    def isValidateRoot(self) -> bool:
        """public boolean javax.swing.JComponent.isValidateRoot()"""
        return bool._wrap(super(JComponent, self).isValidateRoot())

    @overload
    def prepareImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @override
    @overload
    def setForeground(self, arg0: 'Color'):
        """public void javax.swing.JComponent.setForeground(java.awt.Color)"""
        super(_JComponent, self).setForeground(arg0)

    @overload
    def mouseDrag(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDrag(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDrag(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def isOpaque(self) -> bool:
        """public boolean javax.swing.JComponent.isOpaque()"""
        return bool._wrap(super(JComponent, self).isOpaque())

    @overload
    def createVolatileImage(self, arg0: int, arg1: int, arg2: 'ImageCapabilities') -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int,java.awt.ImageCapabilities) throws java.awt.AWTException"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1), arg2))

    @override
    @overload
    def bounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.bounds()"""
        return 'Rectangle'._wrap(super(Component, self).bounds())

    @override
    @overload
    def update(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.update(java.awt.Graphics)"""
        super(_JComponent, self).update(arg0)

    @override
    @overload
    def add(self, arg0: 'PopupMenu'):
        """public void java.awt.Component.add(java.awt.PopupMenu)"""
        super(_Component, self).add(arg0)

    @override
    @overload
    def getToolTipText(self) -> str:
        """public java.lang.String javax.swing.JComponent.getToolTipText()"""
        return str._wrap(super(JComponent, self).getToolTipText())

    @override
    @overload
    def isVisible(self) -> bool:
        """public boolean java.awt.Component.isVisible()"""
        return bool._wrap(super(Component, self).isVisible())

    @override
    @overload
    def setDropTarget(self, arg0: 'DropTarget'):
        """public synchronized void java.awt.Component.setDropTarget(java.awt.dnd.DropTarget)"""
        super(_Component, self).setDropTarget(arg0)

    @override
    @overload
    def getLocationOnScreen(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocationOnScreen()"""
        return 'Point'._wrap(super(Component, self).getLocationOnScreen())

    @override
    @overload
    def getY(self) -> int:
        """public int javax.swing.JComponent.getY()"""
        return int._wrap(super(JComponent, self).getY())

    @overload
    def getComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def isMaximumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMaximumSizeSet()"""
        return bool._wrap(super(Component, self).isMaximumSizeSet())

    @override
    @overload
    def setAlignmentY(self, arg0: float):
        """public void javax.swing.JComponent.setAlignmentY(float)"""
        super(_JComponent, self).setAlignmentY(_float.valueOf(arg0))

    @override
    @overload
    def getRegisteredKeyStrokes(self) -> List['KeyStroke']:
        """public javax.swing.KeyStroke[] javax.swing.JComponent.getRegisteredKeyStrokes()"""
        return List['KeyStroke']._wrap(super(JComponent, self).getRegisteredKeyStrokes())

    @override
    @overload
    def isFocusable(self) -> bool:
        """public boolean java.awt.Component.isFocusable()"""
        return bool._wrap(super(Component, self).isFocusable())

    @override
    @overload
    def isFocusTraversalPolicyProvider(self) -> bool:
        """public final boolean java.awt.Container.isFocusTraversalPolicyProvider()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicyProvider())

    @override
    @overload
    def getMouseListeners(self) -> List['MouseListener']:
        """public synchronized java.awt.event.MouseListener[] java.awt.Component.getMouseListeners()"""
        return List['MouseListener']._wrap(super(Component, self).getMouseListeners())

    @override
    @overload
    def registerKeyboardAction(self, arg0: 'ActionListener', arg1: 'KeyStroke', arg2: int):
        """public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,javax.swing.KeyStroke,int)"""
        super(_JComponent, self).registerKeyboardAction(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def transferFocusUpCycle(self):
        """public void java.awt.Component.transferFocusUpCycle()"""
        super(Component, self).transferFocusUpCycle()

    @override
    @overload
    def removeKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.removeKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).removeKeyListener(arg0)

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: str, arg2: str):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,char,char)"""
        super(_JComponent, self).firePropertyChange(arg0, _char.valueOf(arg1), _char.valueOf(arg2))

    @override
    @overload
    def getMouseMotionListeners(self) -> List['MouseMotionListener']:
        """public synchronized java.awt.event.MouseMotionListener[] java.awt.Component.getMouseMotionListeners()"""
        return List['MouseMotionListener']._wrap(super(Component, self).getMouseMotionListeners())

    @override
    @overload
    def getAutoscrolls(self) -> bool:
        """public boolean javax.swing.JComponent.getAutoscrolls()"""
        return bool._wrap(super(JComponent, self).getAutoscrolls())

    @override
    @overload
    def addContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.addContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).addContainerListener(arg0)

    @override
    @overload
    def isFocusTraversable(self) -> bool:
        """public boolean java.awt.Component.isFocusTraversable()"""
        return bool._wrap(super(Component, self).isFocusTraversable())

    @overload
    def mouseExit(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseExit(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseExit(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getBounds(self, arg0: 'Rectangle') -> 'Rectangle':
        """public java.awt.Rectangle javax.swing.JComponent.getBounds(java.awt.Rectangle)"""
        return 'Rectangle'._wrap(super(_JComponent, self).getBounds(arg0))

    @override
    @overload
    def setToolTipText(self, arg0: str):
        """public void javax.swing.JComponent.setToolTipText(java.lang.String)"""
        super(_JComponent, self).setToolTipText(arg0)

    @override
    @overload
    def setAutoscrolls(self, arg0: bool):
        """public void javax.swing.JComponent.setAutoscrolls(boolean)"""
        super(_JComponent, self).setAutoscrolls(_boolean.valueOf(arg0))

    @override
    @overload
    def setComponentPopupMenu(self, arg0: 'JPopupMenu'):
        """public void javax.swing.JComponent.setComponentPopupMenu(javax.swing.JPopupMenu)"""
        super(_JComponent, self).setComponentPopupMenu(arg0)

    @override
    @overload
    def setMixingCutoutShape(self, arg0: 'Shape'):
        """public void java.awt.Component.setMixingCutoutShape(java.awt.Shape)"""
        super(_Component, self).setMixingCutoutShape(arg0)

    @override
    @overload
    def getVisibleRect(self) -> 'Rectangle':
        """public java.awt.Rectangle javax.swing.JComponent.getVisibleRect()"""
        return 'Rectangle'._wrap(super(JComponent, self).getVisibleRect())

    @override
    @overload
    def requestFocus(self, arg0: 'Cause'):
        """public void java.awt.Component.requestFocus(java.awt.event.FocusEvent$Cause)"""
        super(_Component, self).requestFocus(arg0)

    @overload
    def createImage(self, arg0: int, arg1: int) -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(int,int)"""
        return 'Image'._wrap(super(_Component, self).createImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def putClientProperty(self, arg0: object, arg1: object):
        """public final void javax.swing.JComponent.putClientProperty(java.lang.Object,java.lang.Object)"""
        super(_JComponent, self).putClientProperty(arg0, arg1)

    @override
    @overload
    def getVetoableChangeListeners(self) -> List['VetoableChangeListener']:
        """public synchronized java.beans.VetoableChangeListener[] javax.swing.JComponent.getVetoableChangeListeners()"""
        return List['VetoableChangeListener']._wrap(super(JComponent, self).getVetoableChangeListeners())

    @override
    @overload
    def scrollRectToVisible(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.scrollRectToVisible(java.awt.Rectangle)"""
        super(_JComponent, self).scrollRectToVisible(arg0)

    @override
    @overload
    def getTopLevelAncestor(self) -> 'Container':
        """public java.awt.Container javax.swing.JComponent.getTopLevelAncestor()"""
        return 'Container'._wrap(super(JComponent, self).getTopLevelAncestor())

    @override
    @overload
    def isRequestFocusEnabled(self) -> bool:
        """public boolean javax.swing.JComponent.isRequestFocusEnabled()"""
        return bool._wrap(super(JComponent, self).isRequestFocusEnabled())

    @override
    @overload
    def getFocusListeners(self) -> List['FocusListener']:
        """public synchronized java.awt.event.FocusListener[] java.awt.Component.getFocusListeners()"""
        return List['FocusListener']._wrap(super(Component, self).getFocusListeners())

    @override
    @overload
    def setLayout(self, arg0: 'LayoutManager'):
        """public void java.awt.Container.setLayout(java.awt.LayoutManager)"""
        super(_Container, self).setLayout(arg0)

    @overload
    def add(self, arg0: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0))

    @override
    @overload
    def getMouseWheelListeners(self) -> List['MouseWheelListener']:
        """public synchronized java.awt.event.MouseWheelListener[] java.awt.Component.getMouseWheelListeners()"""
        return List['MouseWheelListener']._wrap(super(Component, self).getMouseWheelListeners())

    @override
    @overload
    def reshape(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void javax.swing.JComponent.reshape(int,int,int,int)"""
        super(_JComponent, self).reshape(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def setTransferHandler(self, arg0: 'TransferHandler'):
        """public void javax.swing.JComponent.setTransferHandler(javax.swing.TransferHandler)"""
        super(_JComponent, self).setTransferHandler(arg0)

    @override
    @overload
    def getPreferredSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getPreferredSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getPreferredSize())

    @override
    @overload
    def setLocation(self, arg0: int, arg1: int):
        """public void java.awt.Component.setLocation(int,int)"""
        super(_Component, self).setLocation(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def removeInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.removeInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).removeInputMethodListener(arg0)

    @override
    @overload
    def setFocusable(self, arg0: bool):
        """public void java.awt.Component.setFocusable(boolean)"""
        super(_Component, self).setFocusable(_boolean.valueOf(arg0))

    @overload
    def getSelectedRegions(self) -> 'utils.Array':
        """public com.badlogic.gdx.utils.Array<com.badlogic.gdx.graphics.g2d.TextureRegion> com.badlogic.gdx.tools.flame.TextureAtlasPanel.getSelectedRegions()"""
        return 'utils.Array'._wrap(super(TextureAtlasPanel, self).getSelectedRegions())

    @override
    @overload
    def paintComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.paintComponents(java.awt.Graphics)"""
        super(_Container, self).paintComponents(arg0)

    @override
    @overload
    def addFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.addFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).addFocusListener(arg0)

    @overload
    def prepareImage(self, arg0: 'Image', arg1: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, arg1))

    @override
    @overload
    def addKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.addKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).addKeyListener(arg0)

    @override
    @overload
    def resize(self, arg0: 'Dimension'):
        """public void java.awt.Component.resize(java.awt.Dimension)"""
        super(_Component, self).resize(arg0)

    @override
    @overload
    def setComponentZOrder(self, arg0: 'Component', arg1: int):
        """public void java.awt.Container.setComponentZOrder(java.awt.Component,int)"""
        super(_Container, self).setComponentZOrder(arg0, _int.valueOf(arg1))

    @override
    @overload
    def list(self):
        """public void java.awt.Component.list()"""
        super(Component, self).list()

    @overload
    def add(self, arg0: str, arg1: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.lang.String,java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, arg1))

    @override
    @overload
    def paintImmediately(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void javax.swing.JComponent.paintImmediately(int,int,int,int)"""
        super(_JComponent, self).paintImmediately(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def getMinimumSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getMinimumSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getMinimumSize())

    @override
    @overload
    def setEnabled(self, arg0: bool):
        """public void javax.swing.JComponent.setEnabled(boolean)"""
        super(_JComponent, self).setEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def hasFocus(self) -> bool:
        """public boolean java.awt.Component.hasFocus()"""
        return bool._wrap(super(Component, self).hasFocus())

    @overload
    def createVolatileImage(self, arg0: int, arg1: int) -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int)"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.removeHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).removeHierarchyListener(arg0)

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.awt.Component.toString()"""
        return str._wrap(super(Component, self).toString())

    @override
    @overload
    def addMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.addMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).addMouseListener(arg0)

    @override
    @overload
    def isFocusOwner(self) -> bool:
        """public boolean java.awt.Component.isFocusOwner()"""
        return bool._wrap(super(Component, self).isFocusOwner())

    @override
    @overload
    def getAccessibleContext(self) -> 'AccessibleContext':
        """public javax.accessibility.AccessibleContext javax.swing.JPanel.getAccessibleContext()"""
        return 'AccessibleContext'._wrap(super(JPanel, self).getAccessibleContext())

    @overload
    def postEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.postEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).postEvent(arg0))

    @overload
    def getLocation(self, arg0: 'Point') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getLocation(java.awt.Point)"""
        return 'Point'._wrap(super(_JComponent, self).getLocation(arg0))

    @overload
    def getBaseline(self, arg0: int, arg1: int) -> int:
        """public int javax.swing.JComponent.getBaseline(int,int)"""
        return int._wrap(super(_JComponent, self).getBaseline(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def findComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeNotify(self):
        """public void javax.swing.JComponent.removeNotify()"""
        super(JComponent, self).removeNotify()

    @override
    @overload
    def getForeground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getForeground()"""
        return 'Color'._wrap(super(Component, self).getForeground())

    @override
    @overload
    def show(self):
        """public void java.awt.Component.show()"""
        super(Component, self).show()

    @override
    @overload
    def isDoubleBuffered(self) -> bool:
        """public boolean javax.swing.JComponent.isDoubleBuffered()"""
        return bool._wrap(super(JComponent, self).isDoubleBuffered())

    @override
    @overload
    def isFocusCycleRoot(self) -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot()"""
        return bool._wrap(super(Container, self).isFocusCycleRoot())

    @override
    @overload
    def addMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.addMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).addMouseWheelListener(arg0)

    @override
    @overload
    def hide(self):
        """public void javax.swing.JComponent.hide()"""
        super(JComponent, self).hide()

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def revalidate(self):
        """public void javax.swing.JComponent.revalidate()"""
        super(JComponent, self).revalidate()

    @override
    @overload
    def getActionMap(self) -> 'ActionMap':
        """public final javax.swing.ActionMap javax.swing.JComponent.getActionMap()"""
        return 'ActionMap'._wrap(super(JComponent, self).getActionMap())

    @override
    @overload
    def requestFocusInWindow(self) -> bool:
        """public boolean javax.swing.JComponent.requestFocusInWindow()"""
        return bool._wrap(super(JComponent, self).requestFocusInWindow())

    @overload
    def action(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.action(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).action(arg0, arg1))

    @override
    @overload
    def isManagingFocus(self) -> bool:
        """public boolean javax.swing.JComponent.isManagingFocus()"""
        return bool._wrap(super(JComponent, self).isManagingFocus())

    @override
    @overload
    def isLightweight(self) -> bool:
        """public boolean java.awt.Component.isLightweight()"""
        return bool._wrap(super(Component, self).isLightweight())

    @override
    @overload
    def setAlignmentX(self, arg0: float):
        """public void javax.swing.JComponent.setAlignmentX(float)"""
        super(_JComponent, self).setAlignmentX(_float.valueOf(arg0))

    @overload
    def getFocusTraversalKeys(self, arg0: int) -> 'Set':
        """public java.util.Set<java.awt.AWTKeyStroke> java.awt.Container.getFocusTraversalKeys(int)"""
        return 'Set'._wrap(super(_Container, self).getFocusTraversalKeys(_int.valueOf(arg0)))

    @override
    @overload
    def setFocusTraversalKeysEnabled(self, arg0: bool):
        """public void java.awt.Component.setFocusTraversalKeysEnabled(boolean)"""
        super(_Component, self).setFocusTraversalKeysEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def remove(self, arg0: 'Component'):
        """public void java.awt.Container.remove(java.awt.Component)"""
        super(_Container, self).remove(arg0)

    @overload
    def getInsets(self, arg0: 'Insets') -> 'Insets':
        """public java.awt.Insets javax.swing.JComponent.getInsets(java.awt.Insets)"""
        return 'Insets'._wrap(super(_JComponent, self).getInsets(arg0))

    @override
    @overload
    def insets(self) -> 'Insets':
        """public java.awt.Insets java.awt.Container.insets()"""
        return 'Insets'._wrap(super(Container, self).insets())

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int):
        """public void javax.swing.JComponent.repaint(long,int,int,int,int)"""
        super(_JComponent, self).repaint(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4))

    @override
    @overload
    def setFocusTraversalPolicy(self, arg0: 'FocusTraversalPolicy'):
        """public void java.awt.Container.setFocusTraversalPolicy(java.awt.FocusTraversalPolicy)"""
        super(_Container, self).setFocusTraversalPolicy(arg0)

    @overload
    def getSize(self, arg0: 'Dimension') -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getSize(java.awt.Dimension)"""
        return 'Dimension'._wrap(super(_JComponent, self).getSize(arg0))

    @override
    @overload
    def enable(self, arg0: bool):
        """public void java.awt.Component.enable(boolean)"""
        super(_Component, self).enable(_boolean.valueOf(arg0))

    @overload
    def getToolTipLocation(self, arg0: 'MouseEvent') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getToolTipLocation(java.awt.event.MouseEvent)"""
        return 'Point'._wrap(super(_JComponent, self).getToolTipLocation(arg0))

    @override
    @overload
    def addPropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Container.addPropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Container, self).addPropertyChangeListener(arg0)

    @overload
    def getComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(arg0))

    @override
    @overload
    def size(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.size()"""
        return 'Dimension'._wrap(super(Component, self).size())

    @override
    @overload
    def getVerifyInputWhenFocusTarget(self) -> bool:
        """public boolean javax.swing.JComponent.getVerifyInputWhenFocusTarget()"""
        return bool._wrap(super(JComponent, self).getVerifyInputWhenFocusTarget())

    @overload
    def mouseMove(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseMove(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseMove(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getActionForKeyStroke(self, arg0: 'KeyStroke') -> 'ActionListener':
        """public java.awt.event.ActionListener javax.swing.JComponent.getActionForKeyStroke(javax.swing.KeyStroke)"""
        return 'ActionListener'._wrap(super(_JComponent, self).getActionForKeyStroke(arg0))

    @overload
    def lostFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.lostFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).lostFocus(arg0, arg1))

    @override
    @overload
    def isMinimumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMinimumSizeSet()"""
        return bool._wrap(super(Component, self).isMinimumSizeSet())

    @override
    @overload
    def isForegroundSet(self) -> bool:
        """public boolean java.awt.Component.isForegroundSet()"""
        return bool._wrap(super(Component, self).isForegroundSet())

    @overload
    def getMousePosition(self, arg0: bool) -> 'Point':
        """public java.awt.Point java.awt.Container.getMousePosition(boolean) throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(_Container, self).getMousePosition(_boolean.valueOf(arg0)))

    @overload
    def getFontMetrics(self, arg0: 'Font') -> 'FontMetrics':
        """public java.awt.FontMetrics javax.swing.JComponent.getFontMetrics(java.awt.Font)"""
        return 'FontMetrics'._wrap(super(_JComponent, self).getFontMetrics(arg0))

    @overload
    def getListeners(self, arg0: 'Class') -> List['EventListener']:
        """public <T extends java.util.EventListener> T[] javax.swing.JComponent.getListeners(java.lang.Class<T>)"""
        return List['EventListener']._wrap(super(_JComponent, self).getListeners(arg0))

    @override
    @overload
    def getHierarchyBoundsListeners(self) -> List['HierarchyBoundsListener']:
        """public synchronized java.awt.event.HierarchyBoundsListener[] java.awt.Component.getHierarchyBoundsListeners()"""
        return List['HierarchyBoundsListener']._wrap(super(Component, self).getHierarchyBoundsListeners())

    @override
    @overload
    def minimumSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.minimumSize()"""
        return 'Dimension'._wrap(super(Container, self).minimumSize())

    @overload
    def handleEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.handleEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).handleEvent(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @override
    @overload
    def getComponentListeners(self) -> List['ComponentListener']:
        """public synchronized java.awt.event.ComponentListener[] java.awt.Component.getComponentListeners()"""
        return List['ComponentListener']._wrap(super(Component, self).getComponentListeners())

    @override
    @overload
    def computeVisibleRect(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.computeVisibleRect(java.awt.Rectangle)"""
        super(_JComponent, self).computeVisibleRect(arg0)

    @override
    @overload
    def deliverEvent(self, arg0: 'Event'):
        """public void java.awt.Container.deliverEvent(java.awt.Event)"""
        super(_Container, self).deliverEvent(arg0)

    @override
    @overload
    def addHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.addHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).addHierarchyBoundsListener(arg0)

    @override
    @overload
    def getAlignmentX(self) -> float:
        """public float javax.swing.JComponent.getAlignmentX()"""
        return float._wrap(super(JComponent, self).getAlignmentX())

    @overload
    def add(self, arg0: 'Component', arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component,int)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def repaint(self):
        """public void java.awt.Component.repaint()"""
        super(Component, self).repaint()

    @overload
    def gotFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.gotFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).gotFocus(arg0, arg1))

    @override
    @overload
    def createToolTip(self) -> 'JToolTip':
        """public javax.swing.JToolTip javax.swing.JComponent.createToolTip()"""
        return 'JToolTip'._wrap(super(JComponent, self).createToolTip())

    @overload
    def getToolTipText(self, arg0: 'MouseEvent') -> str:
        """public java.lang.String javax.swing.JComponent.getToolTipText(java.awt.event.MouseEvent)"""
        return str._wrap(super(_JComponent, self).getToolTipText(arg0))

    @override
    @overload
    def printComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.printComponents(java.awt.Graphics)"""
        super(_Container, self).printComponents(arg0)

    @override
    @overload
    def getColorModel(self) -> 'ColorModel':
        """public java.awt.image.ColorModel java.awt.Component.getColorModel()"""
        return 'ColorModel'._wrap(super(Component, self).getColorModel())

    @override
    @overload
    def setFocusTraversalPolicyProvider(self, arg0: bool):
        """public final void java.awt.Container.setFocusTraversalPolicyProvider(boolean)"""
        super(_Container, self).setFocusTraversalPolicyProvider(_boolean.valueOf(arg0))

    @overload
    def getComponentZOrder(self, arg0: 'Component') -> int:
        """public int java.awt.Container.getComponentZOrder(java.awt.Component)"""
        return int._wrap(super(_Container, self).getComponentZOrder(arg0))

    @override
    @overload
    def getDebugGraphicsOptions(self) -> int:
        """public int javax.swing.JComponent.getDebugGraphicsOptions()"""
        return int._wrap(super(JComponent, self).getDebugGraphicsOptions())

    @overload
    def areFocusTraversalKeysSet(self, arg0: int) -> bool:
        """public boolean java.awt.Container.areFocusTraversalKeysSet(int)"""
        return bool._wrap(super(_Container, self).areFocusTraversalKeysSet(_int.valueOf(arg0)))

    @override
    @overload
    def getSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.getSize()"""
        return 'Dimension'._wrap(super(Component, self).getSize())

    @override
    @overload
    def setName(self, arg0: str):
        """public void java.awt.Component.setName(java.lang.String)"""
        super(_Component, self).setName(arg0)

    @override
    @overload
    def repaint(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.repaint(java.awt.Rectangle)"""
        super(_JComponent, self).repaint(arg0)

    @overload
    def getClientProperty(self, arg0: object) -> object:
        """public final java.lang.Object javax.swing.JComponent.getClientProperty(java.lang.Object)"""
        return object._wrap(super(_JComponent, self).getClientProperty(arg0))

    @override
    @overload
    def unregisterKeyboardAction(self, arg0: 'KeyStroke'):
        """public void javax.swing.JComponent.unregisterKeyboardAction(javax.swing.KeyStroke)"""
        super(_JComponent, self).unregisterKeyboardAction(arg0)

    @overload
    def requestFocus(self, arg0: bool) -> bool:
        """public boolean javax.swing.JComponent.requestFocus(boolean)"""
        return bool._wrap(super(_JComponent, self).requestFocus(_boolean.valueOf(arg0)))

    @override
    @overload
    def setActionMap(self, arg0: 'ActionMap'):
        """public final void javax.swing.JComponent.setActionMap(javax.swing.ActionMap)"""
        super(_JComponent, self).setActionMap(arg0)

    @override
    @overload
    def getX(self) -> int:
        """public int javax.swing.JComponent.getX()"""
        return int._wrap(super(JComponent, self).getX())

    @overload
    def mouseEnter(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseEnter(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseEnter(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def updateUI(self):
        """public void javax.swing.JPanel.updateUI()"""
        super(JPanel, self).updateUI()

    @override
    @overload
    def getToolkit(self) -> 'Toolkit':
        """public java.awt.Toolkit java.awt.Component.getToolkit()"""
        return 'Toolkit'._wrap(super(Component, self).getToolkit())

    @override
    @overload
    def isCursorSet(self) -> bool:
        """public boolean java.awt.Component.isCursorSet()"""
        return bool._wrap(super(Component, self).isCursorSet())

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object, arg2: int):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object,int)"""
        super(_Container, self).add(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def setPreferredSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setPreferredSize(java.awt.Dimension)"""
        super(_JComponent, self).setPreferredSize(arg0)

    @override
    @overload
    def setBounds(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.setBounds(int,int,int,int)"""
        super(_Component, self).setBounds(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def isFocusTraversalPolicySet(self) -> bool:
        """public boolean java.awt.Container.isFocusTraversalPolicySet()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicySet())

    @override
    @overload
    def requestFocus(self):
        """public void javax.swing.JComponent.requestFocus()"""
        super(JComponent, self).requestFocus()

    @override
    @overload
    def getAncestorListeners(self) -> List['AncestorListener']:
        """public javax.swing.event.AncestorListener[] javax.swing.JComponent.getAncestorListeners()"""
        return List['AncestorListener']._wrap(super(JComponent, self).getAncestorListeners())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool._wrap(super(_object, self).equals(arg0))

    @overload
    def getInputMap(self, arg0: int) -> 'InputMap':
        """public final javax.swing.InputMap javax.swing.JComponent.getInputMap(int)"""
        return 'InputMap'._wrap(super(_JComponent, self).getInputMap(_int.valueOf(arg0)))

    @override
    @overload
    def isEnabled(self) -> bool:
        """public boolean java.awt.Component.isEnabled()"""
        return bool._wrap(super(Component, self).isEnabled())

    @override
    @overload
    def move(self, arg0: int, arg1: int):
        """public void java.awt.Component.move(int,int)"""
        super(_Component, self).move(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getName(self) -> str:
        """public java.lang.String java.awt.Component.getName()"""
        return str._wrap(super(Component, self).getName())

    @override
    @overload
    def addMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.addMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).addMouseMotionListener(arg0)

    @override
    @overload
    def getIgnoreRepaint(self) -> bool:
        """public boolean java.awt.Component.getIgnoreRepaint()"""
        return bool._wrap(super(Component, self).getIgnoreRepaint())

    @overload
    def isFocusCycleRoot(self, arg0: 'Container') -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot(java.awt.Container)"""
        return bool._wrap(super(_Container, self).isFocusCycleRoot(arg0))

    @overload
    def __init__(self, ):
        """public com.badlogic.gdx.tools.flame.TextureAtlasPanel()"""
        val = _TextureAtlasPanel()
        self.__wrapper = val

    @override
    @overload
    def getGraphics(self) -> 'Graphics':
        """public java.awt.Graphics javax.swing.JComponent.getGraphics()"""
        return 'Graphics'._wrap(super(JComponent, self).getGraphics())

    @override
    @overload
    def setLocale(self, arg0: 'Locale'):
        """public void java.awt.Component.setLocale(java.util.Locale)"""
        super(_Component, self).setLocale(arg0)

    @override
    @overload
    def paintAll(self, arg0: 'Graphics'):
        """public void java.awt.Component.paintAll(java.awt.Graphics)"""
        super(_Component, self).paintAll(arg0)

    @override
    @overload
    def setDoubleBuffered(self, arg0: bool):
        """public void javax.swing.JComponent.setDoubleBuffered(boolean)"""
        super(_JComponent, self).setDoubleBuffered(_boolean.valueOf(arg0))

    @override
    @overload
    def isPreferredSizeSet(self) -> bool:
        """public boolean java.awt.Component.isPreferredSizeSet()"""
        return bool._wrap(super(Component, self).isPreferredSizeSet())

    @override
    @overload
    def addInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.addInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).addInputMethodListener(arg0)

    @override
    @overload
    def removeMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.removeMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).removeMouseWheelListener(arg0)

    @override
    @overload
    def getInputMap(self) -> 'InputMap':
        """public final javax.swing.InputMap javax.swing.JComponent.getInputMap()"""
        return 'InputMap'._wrap(super(JComponent, self).getInputMap())

    @override
    @overload
    def setVisible(self, arg0: bool):
        """public void javax.swing.JComponent.setVisible(boolean)"""
        super(_JComponent, self).setVisible(_boolean.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,byte,byte)"""
        super(_Component, self).firePropertyChange(arg0, _byte.valueOf(arg1), _byte.valueOf(arg2))

    @override
    @overload
    def getUIClassID(self) -> str:
        """public java.lang.String javax.swing.JPanel.getUIClassID()"""
        return str._wrap(super(JPanel, self).getUIClassID())

    @override
    @overload
    def transferFocusDownCycle(self):
        """public void java.awt.Container.transferFocusDownCycle()"""
        super(Container, self).transferFocusDownCycle()

    @override
    @overload
    def getNextFocusableComponent(self) -> 'Component':
        """public java.awt.Component javax.swing.JComponent.getNextFocusableComponent()"""
        return 'Component'._wrap(super(JComponent, self).getNextFocusableComponent())

    @override
    @overload
    def getUI(self) -> 'PanelUI':
        """public javax.swing.plaf.PanelUI javax.swing.JPanel.getUI()"""
        return 'PanelUI'._wrap(super(JPanel, self).getUI())

    @override
    @overload
    def setBounds(self, arg0: 'Rectangle'):
        """public void java.awt.Component.setBounds(java.awt.Rectangle)"""
        super(_Component, self).setBounds(arg0)

    @override
    @overload
    def repaint(self, arg0: int):
        """public void java.awt.Component.repaint(long)"""
        super(_Component, self).repaint(_long.valueOf(arg0))

    @override
    @overload
    def removeHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.removeHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).removeHierarchyBoundsListener(arg0)

    @override
    @overload
    def getComponentPopupMenu(self) -> 'JPopupMenu':
        """public javax.swing.JPopupMenu javax.swing.JComponent.getComponentPopupMenu()"""
        return 'JPopupMenu'._wrap(super(JComponent, self).getComponentPopupMenu())

    @override
    @overload
    def getMousePosition(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getMousePosition() throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(Component, self).getMousePosition())

    @override
    @overload
    def getComponentCount(self) -> int:
        """public int java.awt.Container.getComponentCount()"""
        return int._wrap(super(Container, self).getComponentCount())

    @override
    @overload
    def getInputMethodRequests(self) -> 'InputMethodRequests':
        """public java.awt.im.InputMethodRequests java.awt.Component.getInputMethodRequests()"""
        return 'InputMethodRequests'._wrap(super(Component, self).getInputMethodRequests())

    @override
    @overload
    def setMaximumSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setMaximumSize(java.awt.Dimension)"""
        super(_JComponent, self).setMaximumSize(arg0)

    @override
    @overload
    def setRequestFocusEnabled(self, arg0: bool):
        """public void javax.swing.JComponent.setRequestFocusEnabled(boolean)"""
        super(_JComponent, self).setRequestFocusEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def setFocusTraversalKeys(self, arg0: int, arg1: 'Set'):
        """public void javax.swing.JComponent.setFocusTraversalKeys(int,java.util.Set<? extends java.awt.AWTKeyStroke>)"""
        super(_JComponent, self).setFocusTraversalKeys(_int.valueOf(arg0), arg1)

    @overload
    def inside(self, arg0: int, arg1: int) -> bool:
        """public boolean java.awt.Component.inside(int,int)"""
        return bool._wrap(super(_Component, self).inside(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def requestDefaultFocus(self) -> bool:
        """public boolean javax.swing.JComponent.requestDefaultFocus()"""
        return bool._wrap(super(JComponent, self).requestDefaultFocus())

    @override
    @overload
    def disable(self):
        """public void javax.swing.JComponent.disable()"""
        super(JComponent, self).disable()

    @override
    @overload
    def enableInputMethods(self, arg0: bool):
        """public void java.awt.Component.enableInputMethods(boolean)"""
        super(_Component, self).enableInputMethods(_boolean.valueOf(arg0))

    @override
    @overload
    def layout(self):
        """public void java.awt.Container.layout()"""
        super(Container, self).layout()

    @override
    @overload
    def getInputMethodListeners(self) -> List['InputMethodListener']:
        """public synchronized java.awt.event.InputMethodListener[] java.awt.Component.getInputMethodListeners()"""
        return List['InputMethodListener']._wrap(super(Component, self).getInputMethodListeners())

    @override
    @overload
    def paint(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.paint(java.awt.Graphics)"""
        super(_JComponent, self).paint(arg0)

    @override
    @overload
    def transferFocus(self):
        """public void java.awt.Component.transferFocus()"""
        super(Component, self).transferFocus()

    @override
    @overload
    def removeComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.removeComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).removeComponentListener(arg0)

    @override
    @overload
    def getCursor(self) -> 'Cursor':
        """public java.awt.Cursor java.awt.Component.getCursor()"""
        return 'Cursor'._wrap(super(Component, self).getCursor())

    @override
    @overload
    def setMinimumSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setMinimumSize(java.awt.Dimension)"""
        super(_JComponent, self).setMinimumSize(arg0)

    @override
    @overload
    def getContainerListeners(self) -> List['ContainerListener']:
        """public synchronized java.awt.event.ContainerListener[] java.awt.Container.getContainerListeners()"""
        return List['ContainerListener']._wrap(super(Container, self).getContainerListeners())

    @override
    @overload
    def setLocation(self, arg0: 'Point'):
        """public void java.awt.Component.setLocation(java.awt.Point)"""
        super(_Component, self).setLocation(arg0)

    @override
    @overload
    def setSize(self, arg0: 'Dimension'):
        """public void java.awt.Component.setSize(java.awt.Dimension)"""
        super(_Component, self).setSize(arg0)

    @override
    @overload
    def removeAll(self):
        """public void java.awt.Container.removeAll()"""
        super(Container, self).removeAll()

    @overload
    def getPopupLocation(self, arg0: 'MouseEvent') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getPopupLocation(java.awt.event.MouseEvent)"""
        return 'Point'._wrap(super(_JComponent, self).getPopupLocation(arg0))

    @overload
    def isAncestorOf(self, arg0: 'Component') -> bool:
        """public boolean java.awt.Container.isAncestorOf(java.awt.Component)"""
        return bool._wrap(super(_Container, self).isAncestorOf(arg0))

    @override
    @overload
    def setOpaque(self, arg0: bool):
        """public void javax.swing.JComponent.setOpaque(boolean)"""
        super(_JComponent, self).setOpaque(_boolean.valueOf(arg0))

    @overload
    def contains(self, arg0: int, arg1: int) -> bool:
        """public boolean javax.swing.JComponent.contains(int,int)"""
        return bool._wrap(super(_JComponent, self).contains(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def setCursor(self, arg0: 'Cursor'):
        """public void java.awt.Component.setCursor(java.awt.Cursor)"""
        super(_Component, self).setCursor(arg0)

    @override
    @overload
    def validate(self):
        """public void java.awt.Container.validate()"""
        super(Container, self).validate()

    @override
    @overload
    def getMaximumSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getMaximumSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getMaximumSize())

    @override
    @overload
    def getBackground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getBackground()"""
        return 'Color'._wrap(super(Component, self).getBackground())

    @overload
    def createImage(self, arg0: 'ImageProducer') -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(java.awt.image.ImageProducer)"""
        return 'Image'._wrap(super(_Component, self).createImage(arg0))

    @override
    @overload
    def setVerifyInputWhenFocusTarget(self, arg0: bool):
        """public void javax.swing.JComponent.setVerifyInputWhenFocusTarget(boolean)"""
        super(_JComponent, self).setVerifyInputWhenFocusTarget(_boolean.valueOf(arg0))

    @override
    @overload
    def removePropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0, arg1)

    @override
    @overload
    def countComponents(self) -> int:
        """public int java.awt.Container.countComponents()"""
        return int._wrap(super(Container, self).countComponents())

 
 
 
# CLASS: com.badlogic.gdx.tools.flame.TextureAtlasPanel
from pyquantum_helper import import_once as _import_once
import javax.accessibility.AccessibleContext as AccessibleContext
import javax.swing.JToolTip as JToolTip
import java.awt.event.HierarchyBoundsListener as HierarchyBoundsListener
import java.awt.event.ActionListener as _ActionListener
_ActionListener = _ActionListener
import java.awt.ComponentOrientation as _ComponentOrientation
_ComponentOrientation = _ComponentOrientation
import java.awt.image.ImageProducer as ImageProducer
import com.badlogic.gdx.utils.Array as _Array
_Array = _Array
import java.awt.GraphicsConfiguration as GraphicsConfiguration
import java.awt.Graphics as _Graphics
_Graphics = _Graphics
import javax.swing.JToolTip as _JToolTip
_JToolTip = _JToolTip
import java.awt.Container as _Container
_Container = _Container
import java.awt.MenuComponent as MenuComponent
import java.awt.im.InputMethodRequests as _InputMethodRequests
_InputMethodRequests = _InputMethodRequests
import java.awt.FocusTraversalPolicy as _FocusTraversalPolicy
_FocusTraversalPolicy = _FocusTraversalPolicy
import java.lang.Byte as _byte
import java.awt.Dimension as Dimension
import java.awt.Font as _Font
_Font = _Font
import javax.swing.plaf.PanelUI as _PanelUI
_PanelUI = _PanelUI
import java.awt.event.ContainerListener as ContainerListener
import javax.swing.event.AncestorListener as AncestorListener
import java.awt.AWTEvent as AWTEvent
import java.awt.image.ColorModel as _ColorModel
_ColorModel = _ColorModel
import java.lang.Object as _object
import java.awt.ComponentOrientation as ComponentOrientation
import java.awt.im.InputContext as _InputContext
_InputContext = _InputContext
from builtins import float
import java.awt.event.HierarchyListener as HierarchyListener
import java.awt.event.InputMethodListener as InputMethodListener
from typing import List
import java.awt.event.MouseWheelListener as _MouseWheelListener
_MouseWheelListener = _MouseWheelListener
import java.awt.event.KeyListener as KeyListener
import java.awt.Component as Component
from builtins import int
import java.awt.LayoutManager as LayoutManager
import java.awt.FontMetrics as _FontMetrics
_FontMetrics = _FontMetrics
import java.awt.Container as Container
try:
    from pygdx.graphics import g2d
except ImportError:
    g2d = _import_once("pygdx.graphics.g2d")

from builtins import type
import java.awt.image.VolatileImage as _VolatileImage
_VolatileImage = _VolatileImage
import java.awt.Shape as Shape
import java.awt.Rectangle as Rectangle
import java.awt.event.ContainerListener as _ContainerListener
_ContainerListener = _ContainerListener
import java.awt.event.HierarchyListener as _HierarchyListener
_HierarchyListener = _HierarchyListener
import java.lang.String as _string
import javax.swing.InputVerifier as _InputVerifier
_InputVerifier = _InputVerifier
import com.badlogic.gdx.tools.flame.TexturePanel as _TexturePanel
_TexturePanel = _TexturePanel
import java.awt.Insets as _Insets
_Insets = _Insets
import javax.swing.border.Border as _Border
_Border = _Border
import java.awt.event.ComponentListener as _ComponentListener
_ComponentListener = _ComponentListener
import javax.swing.ActionMap as ActionMap
import java.beans.VetoableChangeListener as VetoableChangeListener
import java.awt.event.ComponentListener as ComponentListener
import javax.swing.KeyStroke as KeyStroke
import java.beans.VetoableChangeListener as _VetoableChangeListener
_VetoableChangeListener = _VetoableChangeListener
from builtins import object
import java.awt.event.KeyListener as _KeyListener
_KeyListener = _KeyListener
import java.awt.Component.BaselineResizeBehavior as BaselineResizeBehavior
import java.awt.Component as _Component_BaselineResizeBehavior
_BaselineResizeBehavior = _Component_BaselineResizeBehavior.BaselineResizeBehavior
import java.awt.Cursor as _Cursor
_Cursor = _Cursor
import java.awt.im.InputMethodRequests as InputMethodRequests
import java.lang.Long as _long
import javax.swing.JPanel as _JPanel
_JPanel = _JPanel
import java.awt.event.FocusListener as _FocusListener
_FocusListener = _FocusListener
import java.lang.Character as _char
import javax.swing.TransferHandler as TransferHandler
import java.awt.event.FocusEvent.Cause as Cause
import javax.accessibility.AccessibleContext as _AccessibleContext
_AccessibleContext = _AccessibleContext
import java.awt.event.MouseWheelListener as MouseWheelListener
import java.util.Set as _Set
_Set = _Set
import java.awt.image.ColorModel as ColorModel
import java.lang.Boolean as _boolean
import java.awt.event.MouseMotionListener as MouseMotionListener
import java.util.EventListener as EventListener
import java.awt.Insets as Insets
import javax.swing.KeyStroke as _KeyStroke
_KeyStroke = _KeyStroke
import java.awt.GraphicsConfiguration as _GraphicsConfiguration
_GraphicsConfiguration = _GraphicsConfiguration
import java.awt.dnd.DropTarget as _DropTarget
_DropTarget = _DropTarget
from builtins import bool
import java.beans.PropertyChangeListener as _PropertyChangeListener
_PropertyChangeListener = _PropertyChangeListener
try:
    from pygdx import utils
except ImportError:
    utils = _import_once("pygdx.utils")

import java.awt.LayoutManager as _LayoutManager
_LayoutManager = _LayoutManager
import java.awt.PopupMenu as PopupMenu
import java.util.EventListener as _EventListener
_EventListener = _EventListener
import java.awt.im.InputContext as InputContext
import java.awt.Component as _Component
_Component = _Component
import java.awt.Font as Font
import java.awt.image.VolatileImage as VolatileImage
import java.awt.dnd.DropTarget as DropTarget
import java.lang.String as _String
_String = _String
import java.lang.Float as _float
import java.awt.Cursor as Cursor
import java.awt.event.MouseListener as _MouseListener
_MouseListener = _MouseListener
import java.awt.Toolkit as _Toolkit
_Toolkit = _Toolkit
import java.io.PrintStream as PrintStream
import javax.swing.JRootPane as _JRootPane
_JRootPane = _JRootPane
import java.awt.Dimension as _Dimension
_Dimension = _Dimension
import java.awt.event.ActionListener as ActionListener
import java.awt.event.MouseEvent as MouseEvent
import java.awt.Color as _Color
_Color = _Color
import javax.swing.JPopupMenu as _JPopupMenu
_JPopupMenu = _JPopupMenu
import javax.swing.InputMap as _InputMap
_InputMap = _InputMap
import java.awt.event.MouseListener as MouseListener
import com.badlogic.gdx.tools.flame.TextureAtlasPanel as _TextureAtlasPanel
_TextureAtlasPanel = _TextureAtlasPanel
import java.lang.Class as _Class
_Class = _Class
import java.util.Locale as Locale
import java.lang.Double as _double
import javax.swing.plaf.PanelUI as PanelUI
import java.awt.Point as _Point
_Point = _Point
import java.lang.Object as _Object
_Object = _Object
import java.beans.PropertyChangeListener as PropertyChangeListener
import javax.swing.border.Border as Border
import javax.swing.JComponent as _JComponent
_JComponent = _JComponent
import javax.swing.InputVerifier as InputVerifier
import java.io.PrintWriter as PrintWriter
import java.awt.Point as Point
import javax.swing.event.AncestorListener as _AncestorListener
_AncestorListener = _AncestorListener
import java.lang.Short as _short
import java.awt.Toolkit as Toolkit
import java.awt.event.HierarchyBoundsListener as _HierarchyBoundsListener
_HierarchyBoundsListener = _HierarchyBoundsListener
import javax.swing.TransferHandler as _TransferHandler
_TransferHandler = _TransferHandler
import javax.swing.InputMap as InputMap
import java.awt.Rectangle as _Rectangle
_Rectangle = _Rectangle
import javax.swing.JRootPane as JRootPane
import java.awt.Event as Event
import java.awt.event.FocusListener as FocusListener
import java.awt.image.ImageObserver as ImageObserver
from builtins import str
from pyquantum_helper import override
import javax.swing.ActionMap as _ActionMap
_ActionMap = _ActionMap
import java.awt.FocusTraversalPolicy as FocusTraversalPolicy
import java.awt.event.MouseMotionListener as _MouseMotionListener
_MouseMotionListener = _MouseMotionListener
import java.awt.event.InputMethodListener as _InputMethodListener
_InputMethodListener = _InputMethodListener
import javax.swing.JPopupMenu as JPopupMenu
import java.util.Set as Set
import java.lang.Integer as _int
import java.awt.Image as _Image
_Image = _Image
import java.awt.FontMetrics as FontMetrics
import java.awt.Color as Color
import java.awt.Image as Image
import java.awt.Graphics as Graphics
import java.awt.ImageCapabilities as ImageCapabilities
import java.util.Locale as _Locale
_Locale = _Locale
 
class TextureAtlasPanel():
    """com.badlogic.gdx.tools.flame.TextureAtlasPanel"""
 
    @staticmethod
    def _wrap(java_value: _TextureAtlasPanel) -> 'TextureAtlasPanel':
        return TextureAtlasPanel(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _TextureAtlasPanel):
        """
        Dynamic initializer for TextureAtlasPanel.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_TextureAtlasPanel__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_TextureAtlasPanel__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def removeVetoableChangeListener(self, arg0: 'VetoableChangeListener'):
        """public synchronized void javax.swing.JComponent.removeVetoableChangeListener(java.beans.VetoableChangeListener)"""
        super(_JComponent, self).removeVetoableChangeListener(arg0)

    @override
    @overload
    def getComponents(self) -> List['Component']:
        """public java.awt.Component[] java.awt.Container.getComponents()"""
        return List['Component']._wrap(super(Container, self).getComponents())

    @override
    @overload
    def setDebugGraphicsOptions(self, arg0: int):
        """public void javax.swing.JComponent.setDebugGraphicsOptions(int)"""
        super(_JComponent, self).setDebugGraphicsOptions(_int.valueOf(arg0))

    @override
    @overload
    def isValid(self) -> bool:
        """public boolean java.awt.Component.isValid()"""
        return bool._wrap(super(Component, self).isValid())

    @overload
    def setAtlas(self, arg0: 'TextureAtlas', arg1: str):
        """public void com.badlogic.gdx.tools.flame.TextureAtlasPanel.setAtlas(com.badlogic.gdx.graphics.g2d.TextureAtlas,java.lang.String)"""
        super(_TextureAtlasPanel, self).setAtlas(arg0, arg1)

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def getDefaultLocale() -> 'Locale':
        """public static java.util.Locale javax.swing.JComponent.getDefaultLocale()"""
        return Locale._wrap(_JComponent.getDefaultLocale())

    @override
    @overload
    def getInputVerifier(self) -> 'InputVerifier':
        """public javax.swing.InputVerifier javax.swing.JComponent.getInputVerifier()"""
        return 'InputVerifier'._wrap(super(JComponent, self).getInputVerifier())

    @override
    @overload
    def list(self, arg0: 'PrintStream', arg1: int):
        """public void java.awt.Container.list(java.io.PrintStream,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @override
    @overload
    def setUI(self, arg0: 'PanelUI'):
        """public void javax.swing.JPanel.setUI(javax.swing.plaf.PanelUI)"""
        super(_JPanel, self).setUI(arg0)

    @override
    @overload
    def getFocusTraversalPolicy(self) -> 'FocusTraversalPolicy':
        """public java.awt.FocusTraversalPolicy java.awt.Container.getFocusTraversalPolicy()"""
        return 'FocusTraversalPolicy'._wrap(super(Container, self).getFocusTraversalPolicy())

    @override
    @overload
    def getParent(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getParent()"""
        return 'Container'._wrap(super(Component, self).getParent())

    @override
    @overload
    def paintImmediately(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.paintImmediately(java.awt.Rectangle)"""
        super(_JComponent, self).paintImmediately(arg0)

    @staticmethod
    @overload
    def setDefaultLocale(arg0: 'Locale'):
        """public static void javax.swing.JComponent.setDefaultLocale(java.util.Locale)"""
        _JComponent.setDefaultLocale(arg0)

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,float,float)"""
        super(_Component, self).firePropertyChange(arg0, _float.valueOf(arg1), _float.valueOf(arg2))

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object)"""
        super(_Container, self).add(arg0, arg1)

    @override
    @overload
    def getLocale(self) -> 'Locale':
        """public java.util.Locale java.awt.Component.getLocale()"""
        return 'Locale'._wrap(super(Component, self).getLocale())

    @override
    @overload
    def setInheritsPopupMenu(self, arg0: bool):
        """public void javax.swing.JComponent.setInheritsPopupMenu(boolean)"""
        super(_JComponent, self).setInheritsPopupMenu(_boolean.valueOf(arg0))

    @override
    @overload
    def getHierarchyListeners(self) -> List['HierarchyListener']:
        """public synchronized java.awt.event.HierarchyListener[] java.awt.Component.getHierarchyListeners()"""
        return List['HierarchyListener']._wrap(super(Component, self).getHierarchyListeners())

    @override
    @overload
    def nextFocus(self):
        """public void java.awt.Component.nextFocus()"""
        super(Component, self).nextFocus()

    @override
    @overload
    def isPaintingTile(self) -> bool:
        """public boolean javax.swing.JComponent.isPaintingTile()"""
        return bool._wrap(super(JComponent, self).isPaintingTile())

    @override
    @overload
    def isDisplayable(self) -> bool:
        """public boolean java.awt.Component.isDisplayable()"""
        return bool._wrap(super(Component, self).isDisplayable())

    @override
    @overload
    def getBounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.getBounds()"""
        return 'Rectangle'._wrap(super(Component, self).getBounds())

    @override
    @overload
    def removeMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.removeMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).removeMouseMotionListener(arg0)

    @override
    @overload
    def isShowing(self) -> bool:
        """public boolean java.awt.Component.isShowing()"""
        return bool._wrap(super(Component, self).isShowing())

    @override
    @overload
    def getDropTarget(self) -> 'DropTarget':
        """public synchronized java.awt.dnd.DropTarget java.awt.Component.getDropTarget()"""
        return 'DropTarget'._wrap(super(Component, self).getDropTarget())

    @override
    @overload
    def isFontSet(self) -> bool:
        """public boolean java.awt.Component.isFontSet()"""
        return bool._wrap(super(Component, self).isFontSet())

    @overload
    def mouseUp(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseUp(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseUp(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def setIgnoreRepaint(self, arg0: bool):
        """public void java.awt.Component.setIgnoreRepaint(boolean)"""
        super(_Component, self).setIgnoreRepaint(_boolean.valueOf(arg0))

    @override
    @overload
    def getPropertyChangeListeners(self) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners()"""
        return List['PropertyChangeListener']._wrap(super(Component, self).getPropertyChangeListeners())

    @override
    @overload
    def isBackgroundSet(self) -> bool:
        """public boolean java.awt.Component.isBackgroundSet()"""
        return bool._wrap(super(Component, self).isBackgroundSet())

    @override
    @overload
    def getLocation(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocation()"""
        return 'Point'._wrap(super(Component, self).getLocation())

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int._wrap(super(object, self).hashCode())

    @overload
    def clearSelection(self):
        """public void com.badlogic.gdx.tools.flame.TextureAtlasPanel.clearSelection()"""
        super(TextureAtlasPanel, self).clearSelection()

    @override
    @overload
    def location(self) -> 'Point':
        """public java.awt.Point java.awt.Component.location()"""
        return 'Point'._wrap(super(Component, self).location())

    @override
    @overload
    def getComponentOrientation(self) -> 'ComponentOrientation':
        """public java.awt.ComponentOrientation java.awt.Component.getComponentOrientation()"""
        return 'ComponentOrientation'._wrap(super(Component, self).getComponentOrientation())

    @override
    @overload
    def addHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.addHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).addHierarchyListener(arg0)

    @overload
    def getCurrentRegionPanel(self) -> 'TexturePanel':
        """public com.badlogic.gdx.tools.flame.TexturePanel com.badlogic.gdx.tools.flame.TextureAtlasPanel.getCurrentRegionPanel()"""
        return 'TexturePanel'._wrap(super(TextureAtlasPanel, self).getCurrentRegionPanel())

    @override
    @overload
    def getInheritsPopupMenu(self) -> bool:
        """public boolean javax.swing.JComponent.getInheritsPopupMenu()"""
        return bool._wrap(super(JComponent, self).getInheritsPopupMenu())

    @override
    @overload
    def setComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Component.setComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Component, self).setComponentOrientation(arg0)

    @override
    @overload
    def getFocusCycleRootAncestor(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getFocusCycleRootAncestor()"""
        return 'Container'._wrap(super(Component, self).getFocusCycleRootAncestor())

    @override
    @overload
    def show(self, arg0: bool):
        """public void java.awt.Component.show(boolean)"""
        super(_Component, self).show(_boolean.valueOf(arg0))

    @override
    @overload
    def grabFocus(self):
        """public void javax.swing.JComponent.grabFocus()"""
        super(JComponent, self).grabFocus()

    @overload
    def locate(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.locate(int,int)"""
        return 'Component'._wrap(super(_Container, self).locate(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def isPaintingForPrint(self) -> bool:
        """public final boolean javax.swing.JComponent.isPaintingForPrint()"""
        return bool._wrap(super(JComponent, self).isPaintingForPrint())

    @overload
    def keyDown(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyDown(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyDown(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,int,int)"""
        super(_JComponent, self).firePropertyChange(arg0, _int.valueOf(arg1), _int.valueOf(arg2))

    @override
    @overload
    def getLayout(self) -> 'LayoutManager':
        """public java.awt.LayoutManager java.awt.Container.getLayout()"""
        return 'LayoutManager'._wrap(super(Container, self).getLayout())

    @override
    @overload
    def preferredSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.preferredSize()"""
        return 'Dimension'._wrap(super(Container, self).preferredSize())

    @override
    @overload
    def addNotify(self):
        """public void javax.swing.JComponent.addNotify()"""
        super(JComponent, self).addNotify()

    @override
    @overload
    def setSize(self, arg0: int, arg1: int):
        """public void java.awt.Component.setSize(int,int)"""
        super(_Component, self).setSize(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.repaint(int,int,int,int)"""
        super(_Component, self).repaint(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @overload
    def requestFocusInWindow(self, arg0: 'Cause') -> bool:
        """public boolean java.awt.Component.requestFocusInWindow(java.awt.event.FocusEvent$Cause)"""
        return bool._wrap(super(_Component, self).requestFocusInWindow(arg0))

    @override
    @overload
    def remove(self, arg0: int):
        """public void java.awt.Container.remove(int)"""
        super(_Container, self).remove(_int.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,long,long)"""
        super(_Component, self).firePropertyChange(arg0, _long.valueOf(arg1), _long.valueOf(arg2))

    @override
    @overload
    def setFocusCycleRoot(self, arg0: bool):
        """public void java.awt.Container.setFocusCycleRoot(boolean)"""
        super(_Container, self).setFocusCycleRoot(_boolean.valueOf(arg0))

    @overload
    def keyUp(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyUp(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyUp(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def setBackground(self, arg0: 'Color'):
        """public void javax.swing.JComponent.setBackground(java.awt.Color)"""
        super(_JComponent, self).setBackground(arg0)

    @override
    @overload
    def doLayout(self):
        """public void java.awt.Container.doLayout()"""
        super(Container, self).doLayout()

    @override
    @overload
    def enable(self):
        """public void javax.swing.JComponent.enable()"""
        super(JComponent, self).enable()

    @override
    @overload
    def getInsets(self) -> 'Insets':
        """public java.awt.Insets javax.swing.JComponent.getInsets()"""
        return 'Insets'._wrap(super(JComponent, self).getInsets())

    @override
    @overload
    def setNextFocusableComponent(self, arg0: 'Component'):
        """public void javax.swing.JComponent.setNextFocusableComponent(java.awt.Component)"""
        super(_JComponent, self).setNextFocusableComponent(arg0)

    @override
    @overload
    def getAlignmentY(self) -> float:
        """public float javax.swing.JComponent.getAlignmentY()"""
        return float._wrap(super(JComponent, self).getAlignmentY())

    @overload
    def checkImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @override
    @overload
    def getFocusTraversalKeysEnabled(self) -> bool:
        """public boolean java.awt.Component.getFocusTraversalKeysEnabled()"""
        return bool._wrap(super(Component, self).getFocusTraversalKeysEnabled())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getRootPane(self) -> 'JRootPane':
        """public javax.swing.JRootPane javax.swing.JComponent.getRootPane()"""
        return 'JRootPane'._wrap(super(JComponent, self).getRootPane())

    @override
    @overload
    def invalidate(self):
        """public void java.awt.Container.invalidate()"""
        super(Container, self).invalidate()

    @override
    @overload
    def resetKeyboardActions(self):
        """public void javax.swing.JComponent.resetKeyboardActions()"""
        super(JComponent, self).resetKeyboardActions()

    @overload
    def getComponent(self, arg0: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponent(int)"""
        return 'Component'._wrap(super(_Container, self).getComponent(_int.valueOf(arg0)))

    @override
    @overload
    def addPropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Container.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Container, self).addPropertyChangeListener(arg0, arg1)

    @override
    @overload
    def setInputMap(self, arg0: int, arg1: 'InputMap'):
        """public final void javax.swing.JComponent.setInputMap(int,javax.swing.InputMap)"""
        super(_JComponent, self).setInputMap(_int.valueOf(arg0), arg1)

    @override
    @overload
    def removePropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0)

    @override
    @overload
    def applyComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Container.applyComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Container, self).applyComponentOrientation(arg0)

    @override
    @overload
    def setBorder(self, arg0: 'Border'):
        """public void javax.swing.JComponent.setBorder(javax.swing.border.Border)"""
        super(_JComponent, self).setBorder(arg0)

    @override
    @overload
    def remove(self, arg0: 'MenuComponent'):
        """public void java.awt.Component.remove(java.awt.MenuComponent)"""
        super(_Component, self).remove(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintStream'):
        """public void java.awt.Component.list(java.io.PrintStream)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def removeMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.removeMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).removeMouseListener(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintWriter'):
        """public void java.awt.Component.list(java.io.PrintWriter)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def getKeyListeners(self) -> List['KeyListener']:
        """public synchronized java.awt.event.KeyListener[] java.awt.Component.getKeyListeners()"""
        return List['KeyListener']._wrap(super(Component, self).getKeyListeners())

    @override
    @overload
    def getInputContext(self) -> 'InputContext':
        """public java.awt.im.InputContext java.awt.Component.getInputContext()"""
        return 'InputContext'._wrap(super(Component, self).getInputContext())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,double,double)"""
        super(_Component, self).firePropertyChange(arg0, _double.valueOf(arg1), _double.valueOf(arg2))

    @override
    @overload
    def removeAncestorListener(self, arg0: 'AncestorListener'):
        """public void javax.swing.JComponent.removeAncestorListener(javax.swing.event.AncestorListener)"""
        super(_JComponent, self).removeAncestorListener(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintWriter', arg1: int):
        """public void java.awt.Container.list(java.io.PrintWriter,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @overload
    def checkImage(self, arg0: 'Image', arg1: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, arg1))

    @override
    @overload
    def removeFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.removeFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).removeFocusListener(arg0)

    @overload
    def mouseDown(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDown(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDown(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getConditionForKeyStroke(self, arg0: 'KeyStroke') -> int:
        """public int javax.swing.JComponent.getConditionForKeyStroke(javax.swing.KeyStroke)"""
        return int._wrap(super(_JComponent, self).getConditionForKeyStroke(arg0))

    @override
    @overload
    def getTreeLock(self) -> object:
        """public final java.lang.Object java.awt.Component.getTreeLock()"""
        return object._wrap(super(Component, self).getTreeLock())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @override
    @overload
    def addVetoableChangeListener(self, arg0: 'VetoableChangeListener'):
        """public synchronized void javax.swing.JComponent.addVetoableChangeListener(java.beans.VetoableChangeListener)"""
        super(_JComponent, self).addVetoableChangeListener(arg0)

    @overload
    def contains(self, arg0: 'Point') -> bool:
        """public boolean java.awt.Component.contains(java.awt.Point)"""
        return bool._wrap(super(_Component, self).contains(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,short,short)"""
        super(_Component, self).firePropertyChange(arg0, _short.valueOf(arg1), _short.valueOf(arg2))

    @override
    @overload
    def dispatchEvent(self, arg0: 'AWTEvent'):
        """public final void java.awt.Component.dispatchEvent(java.awt.AWTEvent)"""
        super(_Component, self).dispatchEvent(arg0)

    @override
    @overload
    def removeContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.removeContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).removeContainerListener(arg0)

    @override
    @overload
    def getGraphicsConfiguration(self) -> 'GraphicsConfiguration':
        """public java.awt.GraphicsConfiguration java.awt.Component.getGraphicsConfiguration()"""
        return 'GraphicsConfiguration'._wrap(super(Component, self).getGraphicsConfiguration())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: bool, arg2: bool):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,boolean,boolean)"""
        super(_JComponent, self).firePropertyChange(arg0, _boolean.valueOf(arg1), _boolean.valueOf(arg2))

    @override
    @overload
    def registerKeyboardAction(self, arg0: 'ActionListener', arg1: str, arg2: 'KeyStroke', arg3: int):
        """public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,java.lang.String,javax.swing.KeyStroke,int)"""
        super(_JComponent, self).registerKeyboardAction(arg0, arg1, arg2, _int.valueOf(arg3))

    @overload
    def __init__(self):
        """public com.badlogic.gdx.tools.flame.TextureAtlasPanel()"""
        val = _TextureAtlasPanel()
        self.__wrapper = val

    @overload
    def findComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(arg0))

    @override
    @overload
    def resize(self, arg0: int, arg1: int):
        """public void java.awt.Component.resize(int,int)"""
        super(_Component, self).resize(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getHeight(self) -> int:
        """public int javax.swing.JComponent.getHeight()"""
        return int._wrap(super(JComponent, self).getHeight())

    @override
    @overload
    def getTransferHandler(self) -> 'TransferHandler':
        """public javax.swing.TransferHandler javax.swing.JComponent.getTransferHandler()"""
        return 'TransferHandler'._wrap(super(JComponent, self).getTransferHandler())

    @overload
    def imageUpdate(self, arg0: 'Image', arg1: int, arg2: int, arg3: int, arg4: int, arg5: int) -> bool:
        """public boolean java.awt.Component.imageUpdate(java.awt.Image,int,int,int,int,int)"""
        return bool._wrap(super(_Component, self).imageUpdate(arg0, _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4), _int.valueOf(arg5)))

    @override
    @overload
    def getWidth(self) -> int:
        """public int javax.swing.JComponent.getWidth()"""
        return int._wrap(super(JComponent, self).getWidth())

    @override
    @overload
    def transferFocusBackward(self):
        """public void java.awt.Component.transferFocusBackward()"""
        super(Component, self).transferFocusBackward()

    @overload
    def getPropertyChangeListeners(self, arg0: str) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners(java.lang.String)"""
        return List['PropertyChangeListener']._wrap(super(_Component, self).getPropertyChangeListeners(arg0))

    @overload
    def getAtlasName(self) -> str:
        """public java.lang.String com.badlogic.gdx.tools.flame.TextureAtlasPanel.getAtlasName()"""
        return str._wrap(super(TextureAtlasPanel, self).getAtlasName())

    @staticmethod
    @overload
    def isLightweightComponent(arg0: 'Component') -> bool:
        """public static boolean javax.swing.JComponent.isLightweightComponent(java.awt.Component)"""
        return bool._wrap(_JComponent.isLightweightComponent(arg0))

    @override
    @overload
    def getBorder(self) -> 'Border':
        """public javax.swing.border.Border javax.swing.JComponent.getBorder()"""
        return 'Border'._wrap(super(JComponent, self).getBorder())

    @override
    @overload
    def printAll(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.printAll(java.awt.Graphics)"""
        super(_JComponent, self).printAll(arg0)

    @override
    @overload
    def addComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.addComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).addComponentListener(arg0)

    @override
    @overload
    def getBaselineResizeBehavior(self) -> 'BaselineResizeBehavior.Component$BaselineResizeBehavior':
        """public java.awt.Component$BaselineResizeBehavior javax.swing.JComponent.getBaselineResizeBehavior()"""
        return 'BaselineResizeBehavior.Component$BaselineResizeBehavior'._wrap(super(JComponent, self).getBaselineResizeBehavior())

    @override
    @overload
    def print(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.print(java.awt.Graphics)"""
        super(_JComponent, self).print(arg0)

    @override
    @overload
    def setInputVerifier(self, arg0: 'InputVerifier'):
        """public void javax.swing.JComponent.setInputVerifier(javax.swing.InputVerifier)"""
        super(_JComponent, self).setInputVerifier(arg0)

    @override
    @overload
    def addAncestorListener(self, arg0: 'AncestorListener'):
        """public void javax.swing.JComponent.addAncestorListener(javax.swing.event.AncestorListener)"""
        super(_JComponent, self).addAncestorListener(arg0)

    @override
    @overload
    def getFont(self) -> 'Font':
        """public java.awt.Font java.awt.Component.getFont()"""
        return 'Font'._wrap(super(Component, self).getFont())

    @override
    @overload
    def setFont(self, arg0: 'Font'):
        """public void javax.swing.JComponent.setFont(java.awt.Font)"""
        super(_JComponent, self).setFont(arg0)

    @override
    @overload
    def isOptimizedDrawingEnabled(self) -> bool:
        """public boolean javax.swing.JComponent.isOptimizedDrawingEnabled()"""
        return bool._wrap(super(JComponent, self).isOptimizedDrawingEnabled())

    @override
    @overload
    def isValidateRoot(self) -> bool:
        """public boolean javax.swing.JComponent.isValidateRoot()"""
        return bool._wrap(super(JComponent, self).isValidateRoot())

    @overload
    def prepareImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @override
    @overload
    def setForeground(self, arg0: 'Color'):
        """public void javax.swing.JComponent.setForeground(java.awt.Color)"""
        super(_JComponent, self).setForeground(arg0)

    @overload
    def mouseDrag(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDrag(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDrag(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def isOpaque(self) -> bool:
        """public boolean javax.swing.JComponent.isOpaque()"""
        return bool._wrap(super(JComponent, self).isOpaque())

    @overload
    def createVolatileImage(self, arg0: int, arg1: int, arg2: 'ImageCapabilities') -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int,java.awt.ImageCapabilities) throws java.awt.AWTException"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1), arg2))

    @override
    @overload
    def bounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.bounds()"""
        return 'Rectangle'._wrap(super(Component, self).bounds())

    @override
    @overload
    def update(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.update(java.awt.Graphics)"""
        super(_JComponent, self).update(arg0)

    @override
    @overload
    def add(self, arg0: 'PopupMenu'):
        """public void java.awt.Component.add(java.awt.PopupMenu)"""
        super(_Component, self).add(arg0)

    @override
    @overload
    def getToolTipText(self) -> str:
        """public java.lang.String javax.swing.JComponent.getToolTipText()"""
        return str._wrap(super(JComponent, self).getToolTipText())

    @override
    @overload
    def isVisible(self) -> bool:
        """public boolean java.awt.Component.isVisible()"""
        return bool._wrap(super(Component, self).isVisible())

    @override
    @overload
    def setDropTarget(self, arg0: 'DropTarget'):
        """public synchronized void java.awt.Component.setDropTarget(java.awt.dnd.DropTarget)"""
        super(_Component, self).setDropTarget(arg0)

    @override
    @overload
    def getLocationOnScreen(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocationOnScreen()"""
        return 'Point'._wrap(super(Component, self).getLocationOnScreen())

    @override
    @overload
    def getY(self) -> int:
        """public int javax.swing.JComponent.getY()"""
        return int._wrap(super(JComponent, self).getY())

    @overload
    def getComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def isMaximumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMaximumSizeSet()"""
        return bool._wrap(super(Component, self).isMaximumSizeSet())

    @override
    @overload
    def setAlignmentY(self, arg0: float):
        """public void javax.swing.JComponent.setAlignmentY(float)"""
        super(_JComponent, self).setAlignmentY(_float.valueOf(arg0))

    @override
    @overload
    def getRegisteredKeyStrokes(self) -> List['KeyStroke']:
        """public javax.swing.KeyStroke[] javax.swing.JComponent.getRegisteredKeyStrokes()"""
        return List['KeyStroke']._wrap(super(JComponent, self).getRegisteredKeyStrokes())

    @override
    @overload
    def isFocusable(self) -> bool:
        """public boolean java.awt.Component.isFocusable()"""
        return bool._wrap(super(Component, self).isFocusable())

    @override
    @overload
    def isFocusTraversalPolicyProvider(self) -> bool:
        """public final boolean java.awt.Container.isFocusTraversalPolicyProvider()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicyProvider())

    @override
    @overload
    def getMouseListeners(self) -> List['MouseListener']:
        """public synchronized java.awt.event.MouseListener[] java.awt.Component.getMouseListeners()"""
        return List['MouseListener']._wrap(super(Component, self).getMouseListeners())

    @override
    @overload
    def registerKeyboardAction(self, arg0: 'ActionListener', arg1: 'KeyStroke', arg2: int):
        """public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,javax.swing.KeyStroke,int)"""
        super(_JComponent, self).registerKeyboardAction(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def transferFocusUpCycle(self):
        """public void java.awt.Component.transferFocusUpCycle()"""
        super(Component, self).transferFocusUpCycle()

    @override
    @overload
    def removeKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.removeKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).removeKeyListener(arg0)

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: str, arg2: str):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,char,char)"""
        super(_JComponent, self).firePropertyChange(arg0, _char.valueOf(arg1), _char.valueOf(arg2))

    @override
    @overload
    def getMouseMotionListeners(self) -> List['MouseMotionListener']:
        """public synchronized java.awt.event.MouseMotionListener[] java.awt.Component.getMouseMotionListeners()"""
        return List['MouseMotionListener']._wrap(super(Component, self).getMouseMotionListeners())

    @override
    @overload
    def getAutoscrolls(self) -> bool:
        """public boolean javax.swing.JComponent.getAutoscrolls()"""
        return bool._wrap(super(JComponent, self).getAutoscrolls())

    @override
    @overload
    def addContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.addContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).addContainerListener(arg0)

    @override
    @overload
    def isFocusTraversable(self) -> bool:
        """public boolean java.awt.Component.isFocusTraversable()"""
        return bool._wrap(super(Component, self).isFocusTraversable())

    @overload
    def mouseExit(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseExit(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseExit(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getBounds(self, arg0: 'Rectangle') -> 'Rectangle':
        """public java.awt.Rectangle javax.swing.JComponent.getBounds(java.awt.Rectangle)"""
        return 'Rectangle'._wrap(super(_JComponent, self).getBounds(arg0))

    @override
    @overload
    def setToolTipText(self, arg0: str):
        """public void javax.swing.JComponent.setToolTipText(java.lang.String)"""
        super(_JComponent, self).setToolTipText(arg0)

    @override
    @overload
    def setAutoscrolls(self, arg0: bool):
        """public void javax.swing.JComponent.setAutoscrolls(boolean)"""
        super(_JComponent, self).setAutoscrolls(_boolean.valueOf(arg0))

    @override
    @overload
    def setComponentPopupMenu(self, arg0: 'JPopupMenu'):
        """public void javax.swing.JComponent.setComponentPopupMenu(javax.swing.JPopupMenu)"""
        super(_JComponent, self).setComponentPopupMenu(arg0)

    @override
    @overload
    def setMixingCutoutShape(self, arg0: 'Shape'):
        """public void java.awt.Component.setMixingCutoutShape(java.awt.Shape)"""
        super(_Component, self).setMixingCutoutShape(arg0)

    @override
    @overload
    def getVisibleRect(self) -> 'Rectangle':
        """public java.awt.Rectangle javax.swing.JComponent.getVisibleRect()"""
        return 'Rectangle'._wrap(super(JComponent, self).getVisibleRect())

    @override
    @overload
    def requestFocus(self, arg0: 'Cause'):
        """public void java.awt.Component.requestFocus(java.awt.event.FocusEvent$Cause)"""
        super(_Component, self).requestFocus(arg0)

    @overload
    def createImage(self, arg0: int, arg1: int) -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(int,int)"""
        return 'Image'._wrap(super(_Component, self).createImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def putClientProperty(self, arg0: object, arg1: object):
        """public final void javax.swing.JComponent.putClientProperty(java.lang.Object,java.lang.Object)"""
        super(_JComponent, self).putClientProperty(arg0, arg1)

    @override
    @overload
    def getVetoableChangeListeners(self) -> List['VetoableChangeListener']:
        """public synchronized java.beans.VetoableChangeListener[] javax.swing.JComponent.getVetoableChangeListeners()"""
        return List['VetoableChangeListener']._wrap(super(JComponent, self).getVetoableChangeListeners())

    @override
    @overload
    def scrollRectToVisible(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.scrollRectToVisible(java.awt.Rectangle)"""
        super(_JComponent, self).scrollRectToVisible(arg0)

    @override
    @overload
    def getTopLevelAncestor(self) -> 'Container':
        """public java.awt.Container javax.swing.JComponent.getTopLevelAncestor()"""
        return 'Container'._wrap(super(JComponent, self).getTopLevelAncestor())

    @override
    @overload
    def isRequestFocusEnabled(self) -> bool:
        """public boolean javax.swing.JComponent.isRequestFocusEnabled()"""
        return bool._wrap(super(JComponent, self).isRequestFocusEnabled())

    @override
    @overload
    def getFocusListeners(self) -> List['FocusListener']:
        """public synchronized java.awt.event.FocusListener[] java.awt.Component.getFocusListeners()"""
        return List['FocusListener']._wrap(super(Component, self).getFocusListeners())

    @override
    @overload
    def setLayout(self, arg0: 'LayoutManager'):
        """public void java.awt.Container.setLayout(java.awt.LayoutManager)"""
        super(_Container, self).setLayout(arg0)

    @overload
    def add(self, arg0: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0))

    @override
    @overload
    def getMouseWheelListeners(self) -> List['MouseWheelListener']:
        """public synchronized java.awt.event.MouseWheelListener[] java.awt.Component.getMouseWheelListeners()"""
        return List['MouseWheelListener']._wrap(super(Component, self).getMouseWheelListeners())

    @override
    @overload
    def reshape(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void javax.swing.JComponent.reshape(int,int,int,int)"""
        super(_JComponent, self).reshape(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def setTransferHandler(self, arg0: 'TransferHandler'):
        """public void javax.swing.JComponent.setTransferHandler(javax.swing.TransferHandler)"""
        super(_JComponent, self).setTransferHandler(arg0)

    @override
    @overload
    def getPreferredSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getPreferredSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getPreferredSize())

    @override
    @overload
    def setLocation(self, arg0: int, arg1: int):
        """public void java.awt.Component.setLocation(int,int)"""
        super(_Component, self).setLocation(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def removeInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.removeInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).removeInputMethodListener(arg0)

    @override
    @overload
    def setFocusable(self, arg0: bool):
        """public void java.awt.Component.setFocusable(boolean)"""
        super(_Component, self).setFocusable(_boolean.valueOf(arg0))

    @overload
    def getSelectedRegions(self) -> 'utils.Array':
        """public com.badlogic.gdx.utils.Array<com.badlogic.gdx.graphics.g2d.TextureRegion> com.badlogic.gdx.tools.flame.TextureAtlasPanel.getSelectedRegions()"""
        return 'utils.Array'._wrap(super(TextureAtlasPanel, self).getSelectedRegions())

    @override
    @overload
    def paintComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.paintComponents(java.awt.Graphics)"""
        super(_Container, self).paintComponents(arg0)

    @override
    @overload
    def addFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.addFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).addFocusListener(arg0)

    @overload
    def prepareImage(self, arg0: 'Image', arg1: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, arg1))

    @override
    @overload
    def addKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.addKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).addKeyListener(arg0)

    @override
    @overload
    def resize(self, arg0: 'Dimension'):
        """public void java.awt.Component.resize(java.awt.Dimension)"""
        super(_Component, self).resize(arg0)

    @override
    @overload
    def setComponentZOrder(self, arg0: 'Component', arg1: int):
        """public void java.awt.Container.setComponentZOrder(java.awt.Component,int)"""
        super(_Container, self).setComponentZOrder(arg0, _int.valueOf(arg1))

    @override
    @overload
    def list(self):
        """public void java.awt.Component.list()"""
        super(Component, self).list()

    @overload
    def add(self, arg0: str, arg1: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.lang.String,java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, arg1))

    @override
    @overload
    def paintImmediately(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void javax.swing.JComponent.paintImmediately(int,int,int,int)"""
        super(_JComponent, self).paintImmediately(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def getMinimumSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getMinimumSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getMinimumSize())

    @override
    @overload
    def setEnabled(self, arg0: bool):
        """public void javax.swing.JComponent.setEnabled(boolean)"""
        super(_JComponent, self).setEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def hasFocus(self) -> bool:
        """public boolean java.awt.Component.hasFocus()"""
        return bool._wrap(super(Component, self).hasFocus())

    @overload
    def createVolatileImage(self, arg0: int, arg1: int) -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int)"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.removeHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).removeHierarchyListener(arg0)

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.awt.Component.toString()"""
        return str._wrap(super(Component, self).toString())

    @override
    @overload
    def addMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.addMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).addMouseListener(arg0)

    @override
    @overload
    def isFocusOwner(self) -> bool:
        """public boolean java.awt.Component.isFocusOwner()"""
        return bool._wrap(super(Component, self).isFocusOwner())

    @override
    @overload
    def getAccessibleContext(self) -> 'AccessibleContext':
        """public javax.accessibility.AccessibleContext javax.swing.JPanel.getAccessibleContext()"""
        return 'AccessibleContext'._wrap(super(JPanel, self).getAccessibleContext())

    @overload
    def postEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.postEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).postEvent(arg0))

    @overload
    def getLocation(self, arg0: 'Point') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getLocation(java.awt.Point)"""
        return 'Point'._wrap(super(_JComponent, self).getLocation(arg0))

    @overload
    def getBaseline(self, arg0: int, arg1: int) -> int:
        """public int javax.swing.JComponent.getBaseline(int,int)"""
        return int._wrap(super(_JComponent, self).getBaseline(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def findComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeNotify(self):
        """public void javax.swing.JComponent.removeNotify()"""
        super(JComponent, self).removeNotify()

    @override
    @overload
    def getForeground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getForeground()"""
        return 'Color'._wrap(super(Component, self).getForeground())

    @override
    @overload
    def show(self):
        """public void java.awt.Component.show()"""
        super(Component, self).show()

    @override
    @overload
    def isDoubleBuffered(self) -> bool:
        """public boolean javax.swing.JComponent.isDoubleBuffered()"""
        return bool._wrap(super(JComponent, self).isDoubleBuffered())

    @override
    @overload
    def isFocusCycleRoot(self) -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot()"""
        return bool._wrap(super(Container, self).isFocusCycleRoot())

    @override
    @overload
    def addMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.addMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).addMouseWheelListener(arg0)

    @override
    @overload
    def hide(self):
        """public void javax.swing.JComponent.hide()"""
        super(JComponent, self).hide()

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def revalidate(self):
        """public void javax.swing.JComponent.revalidate()"""
        super(JComponent, self).revalidate()

    @override
    @overload
    def getActionMap(self) -> 'ActionMap':
        """public final javax.swing.ActionMap javax.swing.JComponent.getActionMap()"""
        return 'ActionMap'._wrap(super(JComponent, self).getActionMap())

    @override
    @overload
    def requestFocusInWindow(self) -> bool:
        """public boolean javax.swing.JComponent.requestFocusInWindow()"""
        return bool._wrap(super(JComponent, self).requestFocusInWindow())

    @overload
    def action(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.action(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).action(arg0, arg1))

    @override
    @overload
    def isManagingFocus(self) -> bool:
        """public boolean javax.swing.JComponent.isManagingFocus()"""
        return bool._wrap(super(JComponent, self).isManagingFocus())

    @override
    @overload
    def isLightweight(self) -> bool:
        """public boolean java.awt.Component.isLightweight()"""
        return bool._wrap(super(Component, self).isLightweight())

    @override
    @overload
    def setAlignmentX(self, arg0: float):
        """public void javax.swing.JComponent.setAlignmentX(float)"""
        super(_JComponent, self).setAlignmentX(_float.valueOf(arg0))

    @overload
    def getFocusTraversalKeys(self, arg0: int) -> 'Set':
        """public java.util.Set<java.awt.AWTKeyStroke> java.awt.Container.getFocusTraversalKeys(int)"""
        return 'Set'._wrap(super(_Container, self).getFocusTraversalKeys(_int.valueOf(arg0)))

    @override
    @overload
    def setFocusTraversalKeysEnabled(self, arg0: bool):
        """public void java.awt.Component.setFocusTraversalKeysEnabled(boolean)"""
        super(_Component, self).setFocusTraversalKeysEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def remove(self, arg0: 'Component'):
        """public void java.awt.Container.remove(java.awt.Component)"""
        super(_Container, self).remove(arg0)

    @overload
    def getInsets(self, arg0: 'Insets') -> 'Insets':
        """public java.awt.Insets javax.swing.JComponent.getInsets(java.awt.Insets)"""
        return 'Insets'._wrap(super(_JComponent, self).getInsets(arg0))

    @override
    @overload
    def insets(self) -> 'Insets':
        """public java.awt.Insets java.awt.Container.insets()"""
        return 'Insets'._wrap(super(Container, self).insets())

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int):
        """public void javax.swing.JComponent.repaint(long,int,int,int,int)"""
        super(_JComponent, self).repaint(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4))

    @override
    @overload
    def setFocusTraversalPolicy(self, arg0: 'FocusTraversalPolicy'):
        """public void java.awt.Container.setFocusTraversalPolicy(java.awt.FocusTraversalPolicy)"""
        super(_Container, self).setFocusTraversalPolicy(arg0)

    @overload
    def getSize(self, arg0: 'Dimension') -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getSize(java.awt.Dimension)"""
        return 'Dimension'._wrap(super(_JComponent, self).getSize(arg0))

    @override
    @overload
    def enable(self, arg0: bool):
        """public void java.awt.Component.enable(boolean)"""
        super(_Component, self).enable(_boolean.valueOf(arg0))

    @overload
    def getToolTipLocation(self, arg0: 'MouseEvent') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getToolTipLocation(java.awt.event.MouseEvent)"""
        return 'Point'._wrap(super(_JComponent, self).getToolTipLocation(arg0))

    @override
    @overload
    def addPropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Container.addPropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Container, self).addPropertyChangeListener(arg0)

    @overload
    def getComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(arg0))

    @override
    @overload
    def size(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.size()"""
        return 'Dimension'._wrap(super(Component, self).size())

    @override
    @overload
    def getVerifyInputWhenFocusTarget(self) -> bool:
        """public boolean javax.swing.JComponent.getVerifyInputWhenFocusTarget()"""
        return bool._wrap(super(JComponent, self).getVerifyInputWhenFocusTarget())

    @overload
    def mouseMove(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseMove(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseMove(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getActionForKeyStroke(self, arg0: 'KeyStroke') -> 'ActionListener':
        """public java.awt.event.ActionListener javax.swing.JComponent.getActionForKeyStroke(javax.swing.KeyStroke)"""
        return 'ActionListener'._wrap(super(_JComponent, self).getActionForKeyStroke(arg0))

    @overload
    def lostFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.lostFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).lostFocus(arg0, arg1))

    @override
    @overload
    def isMinimumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMinimumSizeSet()"""
        return bool._wrap(super(Component, self).isMinimumSizeSet())

    @override
    @overload
    def isForegroundSet(self) -> bool:
        """public boolean java.awt.Component.isForegroundSet()"""
        return bool._wrap(super(Component, self).isForegroundSet())

    @overload
    def getMousePosition(self, arg0: bool) -> 'Point':
        """public java.awt.Point java.awt.Container.getMousePosition(boolean) throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(_Container, self).getMousePosition(_boolean.valueOf(arg0)))

    @overload
    def getFontMetrics(self, arg0: 'Font') -> 'FontMetrics':
        """public java.awt.FontMetrics javax.swing.JComponent.getFontMetrics(java.awt.Font)"""
        return 'FontMetrics'._wrap(super(_JComponent, self).getFontMetrics(arg0))

    @overload
    def getListeners(self, arg0: 'Class') -> List['EventListener']:
        """public <T extends java.util.EventListener> T[] javax.swing.JComponent.getListeners(java.lang.Class<T>)"""
        return List['EventListener']._wrap(super(_JComponent, self).getListeners(arg0))

    @override
    @overload
    def getHierarchyBoundsListeners(self) -> List['HierarchyBoundsListener']:
        """public synchronized java.awt.event.HierarchyBoundsListener[] java.awt.Component.getHierarchyBoundsListeners()"""
        return List['HierarchyBoundsListener']._wrap(super(Component, self).getHierarchyBoundsListeners())

    @override
    @overload
    def minimumSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.minimumSize()"""
        return 'Dimension'._wrap(super(Container, self).minimumSize())

    @overload
    def handleEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.handleEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).handleEvent(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @override
    @overload
    def getComponentListeners(self) -> List['ComponentListener']:
        """public synchronized java.awt.event.ComponentListener[] java.awt.Component.getComponentListeners()"""
        return List['ComponentListener']._wrap(super(Component, self).getComponentListeners())

    @override
    @overload
    def computeVisibleRect(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.computeVisibleRect(java.awt.Rectangle)"""
        super(_JComponent, self).computeVisibleRect(arg0)

    @override
    @overload
    def deliverEvent(self, arg0: 'Event'):
        """public void java.awt.Container.deliverEvent(java.awt.Event)"""
        super(_Container, self).deliverEvent(arg0)

    @override
    @overload
    def addHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.addHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).addHierarchyBoundsListener(arg0)

    @override
    @overload
    def getAlignmentX(self) -> float:
        """public float javax.swing.JComponent.getAlignmentX()"""
        return float._wrap(super(JComponent, self).getAlignmentX())

    @overload
    def add(self, arg0: 'Component', arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component,int)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def repaint(self):
        """public void java.awt.Component.repaint()"""
        super(Component, self).repaint()

    @overload
    def gotFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.gotFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).gotFocus(arg0, arg1))

    @override
    @overload
    def createToolTip(self) -> 'JToolTip':
        """public javax.swing.JToolTip javax.swing.JComponent.createToolTip()"""
        return 'JToolTip'._wrap(super(JComponent, self).createToolTip())

    @overload
    def getToolTipText(self, arg0: 'MouseEvent') -> str:
        """public java.lang.String javax.swing.JComponent.getToolTipText(java.awt.event.MouseEvent)"""
        return str._wrap(super(_JComponent, self).getToolTipText(arg0))

    @override
    @overload
    def printComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.printComponents(java.awt.Graphics)"""
        super(_Container, self).printComponents(arg0)

    @override
    @overload
    def getColorModel(self) -> 'ColorModel':
        """public java.awt.image.ColorModel java.awt.Component.getColorModel()"""
        return 'ColorModel'._wrap(super(Component, self).getColorModel())

    @override
    @overload
    def setFocusTraversalPolicyProvider(self, arg0: bool):
        """public final void java.awt.Container.setFocusTraversalPolicyProvider(boolean)"""
        super(_Container, self).setFocusTraversalPolicyProvider(_boolean.valueOf(arg0))

    @overload
    def getComponentZOrder(self, arg0: 'Component') -> int:
        """public int java.awt.Container.getComponentZOrder(java.awt.Component)"""
        return int._wrap(super(_Container, self).getComponentZOrder(arg0))

    @override
    @overload
    def getDebugGraphicsOptions(self) -> int:
        """public int javax.swing.JComponent.getDebugGraphicsOptions()"""
        return int._wrap(super(JComponent, self).getDebugGraphicsOptions())

    @overload
    def areFocusTraversalKeysSet(self, arg0: int) -> bool:
        """public boolean java.awt.Container.areFocusTraversalKeysSet(int)"""
        return bool._wrap(super(_Container, self).areFocusTraversalKeysSet(_int.valueOf(arg0)))

    @override
    @overload
    def getSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.getSize()"""
        return 'Dimension'._wrap(super(Component, self).getSize())

    @override
    @overload
    def setName(self, arg0: str):
        """public void java.awt.Component.setName(java.lang.String)"""
        super(_Component, self).setName(arg0)

    @override
    @overload
    def repaint(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.repaint(java.awt.Rectangle)"""
        super(_JComponent, self).repaint(arg0)

    @overload
    def getClientProperty(self, arg0: object) -> object:
        """public final java.lang.Object javax.swing.JComponent.getClientProperty(java.lang.Object)"""
        return object._wrap(super(_JComponent, self).getClientProperty(arg0))

    @override
    @overload
    def unregisterKeyboardAction(self, arg0: 'KeyStroke'):
        """public void javax.swing.JComponent.unregisterKeyboardAction(javax.swing.KeyStroke)"""
        super(_JComponent, self).unregisterKeyboardAction(arg0)

    @overload
    def requestFocus(self, arg0: bool) -> bool:
        """public boolean javax.swing.JComponent.requestFocus(boolean)"""
        return bool._wrap(super(_JComponent, self).requestFocus(_boolean.valueOf(arg0)))

    @override
    @overload
    def setActionMap(self, arg0: 'ActionMap'):
        """public final void javax.swing.JComponent.setActionMap(javax.swing.ActionMap)"""
        super(_JComponent, self).setActionMap(arg0)

    @override
    @overload
    def getX(self) -> int:
        """public int javax.swing.JComponent.getX()"""
        return int._wrap(super(JComponent, self).getX())

    @overload
    def mouseEnter(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseEnter(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseEnter(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def updateUI(self):
        """public void javax.swing.JPanel.updateUI()"""
        super(JPanel, self).updateUI()

    @override
    @overload
    def getToolkit(self) -> 'Toolkit':
        """public java.awt.Toolkit java.awt.Component.getToolkit()"""
        return 'Toolkit'._wrap(super(Component, self).getToolkit())

    @override
    @overload
    def isCursorSet(self) -> bool:
        """public boolean java.awt.Component.isCursorSet()"""
        return bool._wrap(super(Component, self).isCursorSet())

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object, arg2: int):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object,int)"""
        super(_Container, self).add(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def setPreferredSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setPreferredSize(java.awt.Dimension)"""
        super(_JComponent, self).setPreferredSize(arg0)

    @override
    @overload
    def setBounds(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.setBounds(int,int,int,int)"""
        super(_Component, self).setBounds(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def isFocusTraversalPolicySet(self) -> bool:
        """public boolean java.awt.Container.isFocusTraversalPolicySet()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicySet())

    @override
    @overload
    def requestFocus(self):
        """public void javax.swing.JComponent.requestFocus()"""
        super(JComponent, self).requestFocus()

    @override
    @overload
    def getAncestorListeners(self) -> List['AncestorListener']:
        """public javax.swing.event.AncestorListener[] javax.swing.JComponent.getAncestorListeners()"""
        return List['AncestorListener']._wrap(super(JComponent, self).getAncestorListeners())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool._wrap(super(_object, self).equals(arg0))

    @overload
    def getInputMap(self, arg0: int) -> 'InputMap':
        """public final javax.swing.InputMap javax.swing.JComponent.getInputMap(int)"""
        return 'InputMap'._wrap(super(_JComponent, self).getInputMap(_int.valueOf(arg0)))

    @override
    @overload
    def isEnabled(self) -> bool:
        """public boolean java.awt.Component.isEnabled()"""
        return bool._wrap(super(Component, self).isEnabled())

    @override
    @overload
    def move(self, arg0: int, arg1: int):
        """public void java.awt.Component.move(int,int)"""
        super(_Component, self).move(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getName(self) -> str:
        """public java.lang.String java.awt.Component.getName()"""
        return str._wrap(super(Component, self).getName())

    @override
    @overload
    def addMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.addMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).addMouseMotionListener(arg0)

    @override
    @overload
    def getIgnoreRepaint(self) -> bool:
        """public boolean java.awt.Component.getIgnoreRepaint()"""
        return bool._wrap(super(Component, self).getIgnoreRepaint())

    @overload
    def isFocusCycleRoot(self, arg0: 'Container') -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot(java.awt.Container)"""
        return bool._wrap(super(_Container, self).isFocusCycleRoot(arg0))

    @overload
    def __init__(self, ):
        """public com.badlogic.gdx.tools.flame.TextureAtlasPanel()"""
        val = _TextureAtlasPanel()
        self.__wrapper = val

    @override
    @overload
    def getGraphics(self) -> 'Graphics':
        """public java.awt.Graphics javax.swing.JComponent.getGraphics()"""
        return 'Graphics'._wrap(super(JComponent, self).getGraphics())

    @override
    @overload
    def setLocale(self, arg0: 'Locale'):
        """public void java.awt.Component.setLocale(java.util.Locale)"""
        super(_Component, self).setLocale(arg0)

    @override
    @overload
    def paintAll(self, arg0: 'Graphics'):
        """public void java.awt.Component.paintAll(java.awt.Graphics)"""
        super(_Component, self).paintAll(arg0)

    @override
    @overload
    def setDoubleBuffered(self, arg0: bool):
        """public void javax.swing.JComponent.setDoubleBuffered(boolean)"""
        super(_JComponent, self).setDoubleBuffered(_boolean.valueOf(arg0))

    @override
    @overload
    def isPreferredSizeSet(self) -> bool:
        """public boolean java.awt.Component.isPreferredSizeSet()"""
        return bool._wrap(super(Component, self).isPreferredSizeSet())

    @override
    @overload
    def addInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.addInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).addInputMethodListener(arg0)

    @override
    @overload
    def removeMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.removeMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).removeMouseWheelListener(arg0)

    @override
    @overload
    def getInputMap(self) -> 'InputMap':
        """public final javax.swing.InputMap javax.swing.JComponent.getInputMap()"""
        return 'InputMap'._wrap(super(JComponent, self).getInputMap())

    @override
    @overload
    def setVisible(self, arg0: bool):
        """public void javax.swing.JComponent.setVisible(boolean)"""
        super(_JComponent, self).setVisible(_boolean.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,byte,byte)"""
        super(_Component, self).firePropertyChange(arg0, _byte.valueOf(arg1), _byte.valueOf(arg2))

    @override
    @overload
    def getUIClassID(self) -> str:
        """public java.lang.String javax.swing.JPanel.getUIClassID()"""
        return str._wrap(super(JPanel, self).getUIClassID())

    @override
    @overload
    def transferFocusDownCycle(self):
        """public void java.awt.Container.transferFocusDownCycle()"""
        super(Container, self).transferFocusDownCycle()

    @override
    @overload
    def getNextFocusableComponent(self) -> 'Component':
        """public java.awt.Component javax.swing.JComponent.getNextFocusableComponent()"""
        return 'Component'._wrap(super(JComponent, self).getNextFocusableComponent())

    @override
    @overload
    def getUI(self) -> 'PanelUI':
        """public javax.swing.plaf.PanelUI javax.swing.JPanel.getUI()"""
        return 'PanelUI'._wrap(super(JPanel, self).getUI())

    @override
    @overload
    def setBounds(self, arg0: 'Rectangle'):
        """public void java.awt.Component.setBounds(java.awt.Rectangle)"""
        super(_Component, self).setBounds(arg0)

    @override
    @overload
    def repaint(self, arg0: int):
        """public void java.awt.Component.repaint(long)"""
        super(_Component, self).repaint(_long.valueOf(arg0))

    @override
    @overload
    def removeHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.removeHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).removeHierarchyBoundsListener(arg0)

    @override
    @overload
    def getComponentPopupMenu(self) -> 'JPopupMenu':
        """public javax.swing.JPopupMenu javax.swing.JComponent.getComponentPopupMenu()"""
        return 'JPopupMenu'._wrap(super(JComponent, self).getComponentPopupMenu())

    @override
    @overload
    def getMousePosition(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getMousePosition() throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(Component, self).getMousePosition())

    @override
    @overload
    def getComponentCount(self) -> int:
        """public int java.awt.Container.getComponentCount()"""
        return int._wrap(super(Container, self).getComponentCount())

    @override
    @overload
    def getInputMethodRequests(self) -> 'InputMethodRequests':
        """public java.awt.im.InputMethodRequests java.awt.Component.getInputMethodRequests()"""
        return 'InputMethodRequests'._wrap(super(Component, self).getInputMethodRequests())

    @override
    @overload
    def setMaximumSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setMaximumSize(java.awt.Dimension)"""
        super(_JComponent, self).setMaximumSize(arg0)

    @override
    @overload
    def setRequestFocusEnabled(self, arg0: bool):
        """public void javax.swing.JComponent.setRequestFocusEnabled(boolean)"""
        super(_JComponent, self).setRequestFocusEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def setFocusTraversalKeys(self, arg0: int, arg1: 'Set'):
        """public void javax.swing.JComponent.setFocusTraversalKeys(int,java.util.Set<? extends java.awt.AWTKeyStroke>)"""
        super(_JComponent, self).setFocusTraversalKeys(_int.valueOf(arg0), arg1)

    @overload
    def inside(self, arg0: int, arg1: int) -> bool:
        """public boolean java.awt.Component.inside(int,int)"""
        return bool._wrap(super(_Component, self).inside(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def requestDefaultFocus(self) -> bool:
        """public boolean javax.swing.JComponent.requestDefaultFocus()"""
        return bool._wrap(super(JComponent, self).requestDefaultFocus())

    @override
    @overload
    def disable(self):
        """public void javax.swing.JComponent.disable()"""
        super(JComponent, self).disable()

    @override
    @overload
    def enableInputMethods(self, arg0: bool):
        """public void java.awt.Component.enableInputMethods(boolean)"""
        super(_Component, self).enableInputMethods(_boolean.valueOf(arg0))

    @override
    @overload
    def layout(self):
        """public void java.awt.Container.layout()"""
        super(Container, self).layout()

    @override
    @overload
    def getInputMethodListeners(self) -> List['InputMethodListener']:
        """public synchronized java.awt.event.InputMethodListener[] java.awt.Component.getInputMethodListeners()"""
        return List['InputMethodListener']._wrap(super(Component, self).getInputMethodListeners())

    @override
    @overload
    def paint(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.paint(java.awt.Graphics)"""
        super(_JComponent, self).paint(arg0)

    @override
    @overload
    def transferFocus(self):
        """public void java.awt.Component.transferFocus()"""
        super(Component, self).transferFocus()

    @override
    @overload
    def removeComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.removeComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).removeComponentListener(arg0)

    @override
    @overload
    def getCursor(self) -> 'Cursor':
        """public java.awt.Cursor java.awt.Component.getCursor()"""
        return 'Cursor'._wrap(super(Component, self).getCursor())

    @override
    @overload
    def setMinimumSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setMinimumSize(java.awt.Dimension)"""
        super(_JComponent, self).setMinimumSize(arg0)

    @override
    @overload
    def getContainerListeners(self) -> List['ContainerListener']:
        """public synchronized java.awt.event.ContainerListener[] java.awt.Container.getContainerListeners()"""
        return List['ContainerListener']._wrap(super(Container, self).getContainerListeners())

    @override
    @overload
    def setLocation(self, arg0: 'Point'):
        """public void java.awt.Component.setLocation(java.awt.Point)"""
        super(_Component, self).setLocation(arg0)

    @override
    @overload
    def setSize(self, arg0: 'Dimension'):
        """public void java.awt.Component.setSize(java.awt.Dimension)"""
        super(_Component, self).setSize(arg0)

    @override
    @overload
    def removeAll(self):
        """public void java.awt.Container.removeAll()"""
        super(Container, self).removeAll()

    @overload
    def getPopupLocation(self, arg0: 'MouseEvent') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getPopupLocation(java.awt.event.MouseEvent)"""
        return 'Point'._wrap(super(_JComponent, self).getPopupLocation(arg0))

    @overload
    def isAncestorOf(self, arg0: 'Component') -> bool:
        """public boolean java.awt.Container.isAncestorOf(java.awt.Component)"""
        return bool._wrap(super(_Container, self).isAncestorOf(arg0))

    @override
    @overload
    def setOpaque(self, arg0: bool):
        """public void javax.swing.JComponent.setOpaque(boolean)"""
        super(_JComponent, self).setOpaque(_boolean.valueOf(arg0))

    @overload
    def contains(self, arg0: int, arg1: int) -> bool:
        """public boolean javax.swing.JComponent.contains(int,int)"""
        return bool._wrap(super(_JComponent, self).contains(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def setCursor(self, arg0: 'Cursor'):
        """public void java.awt.Component.setCursor(java.awt.Cursor)"""
        super(_Component, self).setCursor(arg0)

    @override
    @overload
    def validate(self):
        """public void java.awt.Container.validate()"""
        super(Container, self).validate()

    @override
    @overload
    def getMaximumSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getMaximumSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getMaximumSize())

    @override
    @overload
    def getBackground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getBackground()"""
        return 'Color'._wrap(super(Component, self).getBackground())

    @overload
    def createImage(self, arg0: 'ImageProducer') -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(java.awt.image.ImageProducer)"""
        return 'Image'._wrap(super(_Component, self).createImage(arg0))

    @override
    @overload
    def setVerifyInputWhenFocusTarget(self, arg0: bool):
        """public void javax.swing.JComponent.setVerifyInputWhenFocusTarget(boolean)"""
        super(_JComponent, self).setVerifyInputWhenFocusTarget(_boolean.valueOf(arg0))

    @override
    @overload
    def removePropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0, arg1)

    @override
    @overload
    def countComponents(self) -> int:
        """public int java.awt.Container.countComponents()"""
        return int._wrap(super(Container, self).countComponents())

 
 
 
# CLASS: com.badlogic.gdx.tools.flame.TextureAtlasPanel 
 
 
# CLASS: com.badlogic.gdx.tools.flame.PointSpriteBatchPanel
from pyquantum_helper import import_once as _import_once
import javax.accessibility.AccessibleContext as AccessibleContext
import javax.swing.JToolTip as JToolTip
import java.awt.event.HierarchyBoundsListener as HierarchyBoundsListener
import java.awt.event.ActionListener as _ActionListener
_ActionListener = _ActionListener
import java.awt.ComponentOrientation as _ComponentOrientation
_ComponentOrientation = _ComponentOrientation
import java.awt.image.ImageProducer as ImageProducer
import java.awt.GraphicsConfiguration as GraphicsConfiguration
import java.awt.Graphics as _Graphics
_Graphics = _Graphics
import javax.swing.JToolTip as _JToolTip
_JToolTip = _JToolTip
import java.awt.Container as _Container
_Container = _Container
import java.awt.MenuComponent as MenuComponent
import java.awt.im.InputMethodRequests as _InputMethodRequests
_InputMethodRequests = _InputMethodRequests
import java.awt.FocusTraversalPolicy as _FocusTraversalPolicy
_FocusTraversalPolicy = _FocusTraversalPolicy
import java.lang.Byte as _byte
import java.awt.Dimension as Dimension
import java.awt.Font as _Font
_Font = _Font
import javax.swing.plaf.PanelUI as _PanelUI
_PanelUI = _PanelUI
import java.awt.event.ContainerListener as ContainerListener
import javax.swing.event.AncestorListener as AncestorListener
import java.awt.AWTEvent as AWTEvent
import javax.swing.JPanel as JPanel
import java.awt.image.ColorModel as _ColorModel
_ColorModel = _ColorModel
import java.lang.Object as _object
import java.awt.ComponentOrientation as ComponentOrientation
import java.awt.im.InputContext as _InputContext
_InputContext = _InputContext
from builtins import float
import java.awt.event.HierarchyListener as HierarchyListener
import java.awt.event.InputMethodListener as InputMethodListener
from typing import List
import java.awt.event.MouseWheelListener as _MouseWheelListener
_MouseWheelListener = _MouseWheelListener
import java.awt.event.KeyListener as KeyListener
import java.awt.Component as Component
from builtins import int
import java.awt.LayoutManager as LayoutManager
import java.awt.FontMetrics as _FontMetrics
_FontMetrics = _FontMetrics
import java.awt.Container as Container
from builtins import type
import java.awt.image.VolatileImage as _VolatileImage
_VolatileImage = _VolatileImage
import java.awt.Shape as Shape
import com.badlogic.gdx.tools.flame.EditorPanel as _EditorPanel
_EditorPanel = _EditorPanel
import java.awt.Rectangle as Rectangle
import java.awt.event.ContainerListener as _ContainerListener
_ContainerListener = _ContainerListener
import java.awt.event.HierarchyListener as _HierarchyListener
_HierarchyListener = _HierarchyListener
import java.lang.String as _string
import javax.swing.InputVerifier as _InputVerifier
_InputVerifier = _InputVerifier
import java.awt.Insets as _Insets
_Insets = _Insets
import javax.swing.border.Border as _Border
_Border = _Border
import java.awt.event.ComponentListener as _ComponentListener
_ComponentListener = _ComponentListener
import javax.swing.ActionMap as ActionMap
import java.beans.VetoableChangeListener as VetoableChangeListener
import java.awt.event.ComponentListener as ComponentListener
import javax.swing.KeyStroke as KeyStroke
import java.beans.VetoableChangeListener as _VetoableChangeListener
_VetoableChangeListener = _VetoableChangeListener
from builtins import object
import java.awt.event.KeyListener as _KeyListener
_KeyListener = _KeyListener
import java.awt.Component.BaselineResizeBehavior as BaselineResizeBehavior
import java.awt.Component as _Component_BaselineResizeBehavior
_BaselineResizeBehavior = _Component_BaselineResizeBehavior.BaselineResizeBehavior
import java.awt.Cursor as _Cursor
_Cursor = _Cursor
import java.awt.im.InputMethodRequests as InputMethodRequests
import java.lang.Long as _long
import javax.swing.JPanel as _JPanel
_JPanel = _JPanel
import java.awt.event.FocusListener as _FocusListener
_FocusListener = _FocusListener
import java.lang.Character as _char
import javax.swing.TransferHandler as TransferHandler
import java.awt.event.FocusEvent.Cause as Cause
import javax.swing.JComponent as JComponent
import javax.accessibility.AccessibleContext as _AccessibleContext
_AccessibleContext = _AccessibleContext
import java.awt.event.MouseWheelListener as MouseWheelListener
import java.util.Set as _Set
_Set = _Set
import java.awt.image.ColorModel as ColorModel
import java.lang.Boolean as _boolean
import java.awt.event.MouseMotionListener as MouseMotionListener
import java.util.EventListener as EventListener
import com.badlogic.gdx.tools.flame.PointSpriteBatchPanel as _PointSpriteBatchPanel
_PointSpriteBatchPanel = _PointSpriteBatchPanel
import java.awt.Insets as Insets
import javax.swing.KeyStroke as _KeyStroke
_KeyStroke = _KeyStroke
import java.awt.GraphicsConfiguration as _GraphicsConfiguration
_GraphicsConfiguration = _GraphicsConfiguration
import java.awt.dnd.DropTarget as _DropTarget
_DropTarget = _DropTarget
from builtins import bool
import java.beans.PropertyChangeListener as _PropertyChangeListener
_PropertyChangeListener = _PropertyChangeListener
import java.awt.LayoutManager as _LayoutManager
_LayoutManager = _LayoutManager
import java.awt.PopupMenu as PopupMenu
import java.util.EventListener as _EventListener
_EventListener = _EventListener
import java.awt.im.InputContext as InputContext
import java.awt.Component as _Component
_Component = _Component
import java.awt.Font as Font
import java.awt.image.VolatileImage as VolatileImage
import java.awt.dnd.DropTarget as DropTarget
import java.lang.String as _String
_String = _String
import java.lang.Float as _float
import java.awt.Cursor as Cursor
import java.awt.event.MouseListener as _MouseListener
_MouseListener = _MouseListener
import java.awt.Toolkit as _Toolkit
_Toolkit = _Toolkit
import java.io.PrintStream as PrintStream
import javax.swing.JRootPane as _JRootPane
_JRootPane = _JRootPane
import java.awt.Dimension as _Dimension
_Dimension = _Dimension
import java.awt.event.ActionListener as ActionListener
import java.awt.event.MouseEvent as MouseEvent
import java.awt.Color as _Color
_Color = _Color
import javax.swing.JPopupMenu as _JPopupMenu
_JPopupMenu = _JPopupMenu
import javax.swing.InputMap as _InputMap
_InputMap = _InputMap
import java.awt.event.MouseListener as MouseListener
import java.lang.Class as _Class
_Class = _Class
import java.util.Locale as Locale
import java.lang.Double as _double
import javax.swing.plaf.PanelUI as PanelUI
import java.awt.Point as _Point
_Point = _Point
import java.lang.Object as _Object
_Object = _Object
import java.beans.PropertyChangeListener as PropertyChangeListener
import javax.swing.border.Border as Border
import javax.swing.JComponent as _JComponent
_JComponent = _JComponent
import javax.swing.InputVerifier as InputVerifier
import java.io.PrintWriter as PrintWriter
import java.awt.Point as Point
import javax.swing.event.AncestorListener as _AncestorListener
_AncestorListener = _AncestorListener
import java.lang.Short as _short
import java.awt.Toolkit as Toolkit
import java.awt.event.HierarchyBoundsListener as _HierarchyBoundsListener
_HierarchyBoundsListener = _HierarchyBoundsListener
import javax.swing.TransferHandler as _TransferHandler
_TransferHandler = _TransferHandler
import javax.swing.InputMap as InputMap
import java.awt.Rectangle as _Rectangle
_Rectangle = _Rectangle
import javax.swing.JRootPane as JRootPane
import java.awt.Event as Event
import java.awt.event.FocusListener as FocusListener
import java.awt.image.ImageObserver as ImageObserver
from builtins import str
from pyquantum_helper import override
import javax.swing.ActionMap as _ActionMap
_ActionMap = _ActionMap
import java.awt.FocusTraversalPolicy as FocusTraversalPolicy
import java.awt.event.MouseMotionListener as _MouseMotionListener
_MouseMotionListener = _MouseMotionListener
import java.awt.event.InputMethodListener as _InputMethodListener
_InputMethodListener = _InputMethodListener
try:
    from pygdx.graphics.g3d.particles import batches
except ImportError:
    batches = _import_once("pygdx.graphics.g3d.particles.batches")

import javax.swing.JPopupMenu as JPopupMenu
import java.util.Set as Set
import java.lang.Integer as _int
import java.awt.Image as _Image
_Image = _Image
import java.awt.FontMetrics as FontMetrics
import java.awt.Color as Color
import java.awt.Image as Image
import java.awt.Graphics as Graphics
import java.awt.ImageCapabilities as ImageCapabilities
import java.util.Locale as _Locale
_Locale = _Locale
 
class PointSpriteBatchPanel():
    """com.badlogic.gdx.tools.flame.PointSpriteBatchPanel"""
 
    @staticmethod
    def _wrap(java_value: _PointSpriteBatchPanel) -> 'PointSpriteBatchPanel':
        return PointSpriteBatchPanel(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _PointSpriteBatchPanel):
        """
        Dynamic initializer for PointSpriteBatchPanel.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_PointSpriteBatchPanel__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_PointSpriteBatchPanel__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def removeVetoableChangeListener(self, arg0: 'VetoableChangeListener'):
        """public synchronized void javax.swing.JComponent.removeVetoableChangeListener(java.beans.VetoableChangeListener)"""
        super(_JComponent, self).removeVetoableChangeListener(arg0)

    @override
    @overload
    def getComponents(self) -> List['Component']:
        """public java.awt.Component[] java.awt.Container.getComponents()"""
        return List['Component']._wrap(super(Container, self).getComponents())

    @override
    @overload
    def setDebugGraphicsOptions(self, arg0: int):
        """public void javax.swing.JComponent.setDebugGraphicsOptions(int)"""
        super(_JComponent, self).setDebugGraphicsOptions(_int.valueOf(arg0))

    @override
    @overload
    def isValid(self) -> bool:
        """public boolean java.awt.Component.isValid()"""
        return bool._wrap(super(Component, self).isValid())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def getDefaultLocale() -> 'Locale':
        """public static java.util.Locale javax.swing.JComponent.getDefaultLocale()"""
        return Locale._wrap(_JComponent.getDefaultLocale())

    @override
    @overload
    def getInputVerifier(self) -> 'InputVerifier':
        """public javax.swing.InputVerifier javax.swing.JComponent.getInputVerifier()"""
        return 'InputVerifier'._wrap(super(JComponent, self).getInputVerifier())

    @override
    @overload
    def list(self, arg0: 'PrintStream', arg1: int):
        """public void java.awt.Container.list(java.io.PrintStream,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @override
    @overload
    def setUI(self, arg0: 'PanelUI'):
        """public void javax.swing.JPanel.setUI(javax.swing.plaf.PanelUI)"""
        super(_JPanel, self).setUI(arg0)

    @override
    @overload
    def getFocusTraversalPolicy(self) -> 'FocusTraversalPolicy':
        """public java.awt.FocusTraversalPolicy java.awt.Container.getFocusTraversalPolicy()"""
        return 'FocusTraversalPolicy'._wrap(super(Container, self).getFocusTraversalPolicy())

    @override
    @overload
    def getParent(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getParent()"""
        return 'Container'._wrap(super(Component, self).getParent())

    @override
    @overload
    def paintImmediately(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.paintImmediately(java.awt.Rectangle)"""
        super(_JComponent, self).paintImmediately(arg0)

    @staticmethod
    @overload
    def setDefaultLocale(arg0: 'Locale'):
        """public static void javax.swing.JComponent.setDefaultLocale(java.util.Locale)"""
        _JComponent.setDefaultLocale(arg0)

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,float,float)"""
        super(_Component, self).firePropertyChange(arg0, _float.valueOf(arg1), _float.valueOf(arg2))

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object)"""
        super(_Container, self).add(arg0, arg1)

    @override
    @overload
    def getLocale(self) -> 'Locale':
        """public java.util.Locale java.awt.Component.getLocale()"""
        return 'Locale'._wrap(super(Component, self).getLocale())

    @override
    @overload
    def setInheritsPopupMenu(self, arg0: bool):
        """public void javax.swing.JComponent.setInheritsPopupMenu(boolean)"""
        super(_JComponent, self).setInheritsPopupMenu(_boolean.valueOf(arg0))

    @override
    @overload
    def getHierarchyListeners(self) -> List['HierarchyListener']:
        """public synchronized java.awt.event.HierarchyListener[] java.awt.Component.getHierarchyListeners()"""
        return List['HierarchyListener']._wrap(super(Component, self).getHierarchyListeners())

    @override
    @overload
    def nextFocus(self):
        """public void java.awt.Component.nextFocus()"""
        super(Component, self).nextFocus()

    @override
    @overload
    def isPaintingTile(self) -> bool:
        """public boolean javax.swing.JComponent.isPaintingTile()"""
        return bool._wrap(super(JComponent, self).isPaintingTile())

    @override
    @overload
    def getContentPanel(self) -> 'JPanel':
        """public javax.swing.JPanel com.badlogic.gdx.tools.flame.EditorPanel.getContentPanel()"""
        return 'JPanel'._wrap(super(EditorPanel, self).getContentPanel())

    @override
    @overload
    def isDisplayable(self) -> bool:
        """public boolean java.awt.Component.isDisplayable()"""
        return bool._wrap(super(Component, self).isDisplayable())

    @override
    @overload
    def getBounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.getBounds()"""
        return 'Rectangle'._wrap(super(Component, self).getBounds())

    @override
    @overload
    def removeMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.removeMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).removeMouseMotionListener(arg0)

    @override
    @overload
    def isShowing(self) -> bool:
        """public boolean java.awt.Component.isShowing()"""
        return bool._wrap(super(Component, self).isShowing())

    @override
    @overload
    def getDropTarget(self) -> 'DropTarget':
        """public synchronized java.awt.dnd.DropTarget java.awt.Component.getDropTarget()"""
        return 'DropTarget'._wrap(super(Component, self).getDropTarget())

    @override
    @overload
    def isFontSet(self) -> bool:
        """public boolean java.awt.Component.isFontSet()"""
        return bool._wrap(super(Component, self).isFontSet())

    @overload
    def mouseUp(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseUp(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseUp(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def setIgnoreRepaint(self, arg0: bool):
        """public void java.awt.Component.setIgnoreRepaint(boolean)"""
        super(_Component, self).setIgnoreRepaint(_boolean.valueOf(arg0))

    @override
    @overload
    def getPropertyChangeListeners(self) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners()"""
        return List['PropertyChangeListener']._wrap(super(Component, self).getPropertyChangeListeners())

    @override
    @overload
    def isBackgroundSet(self) -> bool:
        """public boolean java.awt.Component.isBackgroundSet()"""
        return bool._wrap(super(Component, self).isBackgroundSet())

    @override
    @overload
    def getLocation(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocation()"""
        return 'Point'._wrap(super(Component, self).getLocation())

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int._wrap(super(object, self).hashCode())

    @override
    @overload
    def location(self) -> 'Point':
        """public java.awt.Point java.awt.Component.location()"""
        return 'Point'._wrap(super(Component, self).location())

    @override
    @overload
    def getComponentOrientation(self) -> 'ComponentOrientation':
        """public java.awt.ComponentOrientation java.awt.Component.getComponentOrientation()"""
        return 'ComponentOrientation'._wrap(super(Component, self).getComponentOrientation())

    @override
    @overload
    def addHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.addHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).addHierarchyListener(arg0)

    @override
    @overload
    def getInheritsPopupMenu(self) -> bool:
        """public boolean javax.swing.JComponent.getInheritsPopupMenu()"""
        return bool._wrap(super(JComponent, self).getInheritsPopupMenu())

    @override
    @overload
    def setComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Component.setComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Component, self).setComponentOrientation(arg0)

    @override
    @overload
    def getFocusCycleRootAncestor(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getFocusCycleRootAncestor()"""
        return 'Container'._wrap(super(Component, self).getFocusCycleRootAncestor())

    @override
    @overload
    def show(self, arg0: bool):
        """public void java.awt.Component.show(boolean)"""
        super(_Component, self).show(_boolean.valueOf(arg0))

    @staticmethod
    @overload
    def addContent(arg0: 'JPanel', arg1: int, arg2: int, arg3: 'JComponent', arg4: bool, arg5: int, arg6: int, arg7: float, arg8: float):
        """public static void com.badlogic.gdx.tools.flame.EditorPanel.addContent(javax.swing.JPanel,int,int,javax.swing.JComponent,boolean,int,int,float,float)"""
        _EditorPanel.addContent(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3, _boolean.valueOf(arg4), _int.valueOf(arg5), _int.valueOf(arg6), _float.valueOf(arg7), _float.valueOf(arg8))

    @override
    @overload
    def grabFocus(self):
        """public void javax.swing.JComponent.grabFocus()"""
        super(JComponent, self).grabFocus()

    @overload
    def locate(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.locate(int,int)"""
        return 'Component'._wrap(super(_Container, self).locate(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def isPaintingForPrint(self) -> bool:
        """public final boolean javax.swing.JComponent.isPaintingForPrint()"""
        return bool._wrap(super(JComponent, self).isPaintingForPrint())

    @overload
    def keyDown(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyDown(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyDown(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,int,int)"""
        super(_JComponent, self).firePropertyChange(arg0, _int.valueOf(arg1), _int.valueOf(arg2))

    @override
    @overload
    def getLayout(self) -> 'LayoutManager':
        """public java.awt.LayoutManager java.awt.Container.getLayout()"""
        return 'LayoutManager'._wrap(super(Container, self).getLayout())

    @override
    @overload
    def preferredSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.preferredSize()"""
        return 'Dimension'._wrap(super(Container, self).preferredSize())

    @override
    @overload
    def addNotify(self):
        """public void javax.swing.JComponent.addNotify()"""
        super(JComponent, self).addNotify()

    @override
    @overload
    def setSize(self, arg0: int, arg1: int):
        """public void java.awt.Component.setSize(int,int)"""
        super(_Component, self).setSize(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.repaint(int,int,int,int)"""
        super(_Component, self).repaint(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @overload
    def requestFocusInWindow(self, arg0: 'Cause') -> bool:
        """public boolean java.awt.Component.requestFocusInWindow(java.awt.event.FocusEvent$Cause)"""
        return bool._wrap(super(_Component, self).requestFocusInWindow(arg0))

    @override
    @overload
    def remove(self, arg0: int):
        """public void java.awt.Container.remove(int)"""
        super(_Container, self).remove(_int.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,long,long)"""
        super(_Component, self).firePropertyChange(arg0, _long.valueOf(arg1), _long.valueOf(arg2))

    @override
    @overload
    def update(self, arg0: 'FlameMain'):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.update(com.badlogic.gdx.tools.flame.FlameMain)"""
        super(_EditorPanel, self).update(arg0)

    @override
    @overload
    def setFocusCycleRoot(self, arg0: bool):
        """public void java.awt.Container.setFocusCycleRoot(boolean)"""
        super(_Container, self).setFocusCycleRoot(_boolean.valueOf(arg0))

    @overload
    def keyUp(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyUp(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyUp(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def setBackground(self, arg0: 'Color'):
        """public void javax.swing.JComponent.setBackground(java.awt.Color)"""
        super(_JComponent, self).setBackground(arg0)

    @override
    @overload
    def doLayout(self):
        """public void java.awt.Container.doLayout()"""
        super(Container, self).doLayout()

    @override
    @overload
    def enable(self):
        """public void javax.swing.JComponent.enable()"""
        super(JComponent, self).enable()

    @override
    @overload
    def getInsets(self) -> 'Insets':
        """public java.awt.Insets javax.swing.JComponent.getInsets()"""
        return 'Insets'._wrap(super(JComponent, self).getInsets())

    @override
    @overload
    def setNextFocusableComponent(self, arg0: 'Component'):
        """public void javax.swing.JComponent.setNextFocusableComponent(java.awt.Component)"""
        super(_JComponent, self).setNextFocusableComponent(arg0)

    @override
    @overload
    def getAlignmentY(self) -> float:
        """public float javax.swing.JComponent.getAlignmentY()"""
        return float._wrap(super(JComponent, self).getAlignmentY())

    @overload
    def checkImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @override
    @overload
    def getFocusTraversalKeysEnabled(self) -> bool:
        """public boolean java.awt.Component.getFocusTraversalKeysEnabled()"""
        return bool._wrap(super(Component, self).getFocusTraversalKeysEnabled())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getRootPane(self) -> 'JRootPane':
        """public javax.swing.JRootPane javax.swing.JComponent.getRootPane()"""
        return 'JRootPane'._wrap(super(JComponent, self).getRootPane())

    @override
    @overload
    def invalidate(self):
        """public void java.awt.Container.invalidate()"""
        super(Container, self).invalidate()

    @override
    @overload
    def resetKeyboardActions(self):
        """public void javax.swing.JComponent.resetKeyboardActions()"""
        super(JComponent, self).resetKeyboardActions()

    @overload
    def getComponent(self, arg0: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponent(int)"""
        return 'Component'._wrap(super(_Container, self).getComponent(_int.valueOf(arg0)))

    @override
    @overload
    def setName(self, arg0: str):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setName(java.lang.String)"""
        super(_EditorPanel, self).setName(arg0)

    @override
    @overload
    def addPropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Container.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Container, self).addPropertyChangeListener(arg0, arg1)

    @override
    @overload
    def setInputMap(self, arg0: int, arg1: 'InputMap'):
        """public final void javax.swing.JComponent.setInputMap(int,javax.swing.InputMap)"""
        super(_JComponent, self).setInputMap(_int.valueOf(arg0), arg1)

    @override
    @overload
    def removePropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0)

    @override
    @overload
    def applyComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Container.applyComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Container, self).applyComponentOrientation(arg0)

    @override
    @overload
    def setBorder(self, arg0: 'Border'):
        """public void javax.swing.JComponent.setBorder(javax.swing.border.Border)"""
        super(_JComponent, self).setBorder(arg0)

    @override
    @overload
    def remove(self, arg0: 'MenuComponent'):
        """public void java.awt.Component.remove(java.awt.MenuComponent)"""
        super(_Component, self).remove(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintStream'):
        """public void java.awt.Component.list(java.io.PrintStream)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def removeMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.removeMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).removeMouseListener(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintWriter'):
        """public void java.awt.Component.list(java.io.PrintWriter)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def getKeyListeners(self) -> List['KeyListener']:
        """public synchronized java.awt.event.KeyListener[] java.awt.Component.getKeyListeners()"""
        return List['KeyListener']._wrap(super(Component, self).getKeyListeners())

    @override
    @overload
    def getInputContext(self) -> 'InputContext':
        """public java.awt.im.InputContext java.awt.Component.getInputContext()"""
        return 'InputContext'._wrap(super(Component, self).getInputContext())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,double,double)"""
        super(_Component, self).firePropertyChange(arg0, _double.valueOf(arg1), _double.valueOf(arg2))

    @override
    @overload
    def removeAncestorListener(self, arg0: 'AncestorListener'):
        """public void javax.swing.JComponent.removeAncestorListener(javax.swing.event.AncestorListener)"""
        super(_JComponent, self).removeAncestorListener(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintWriter', arg1: int):
        """public void java.awt.Container.list(java.io.PrintWriter,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @overload
    def checkImage(self, arg0: 'Image', arg1: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, arg1))

    @override
    @overload
    def removeFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.removeFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).removeFocusListener(arg0)

    @overload
    def mouseDown(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDown(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDown(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def setIsAlwayShown(self, arg0: bool):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setIsAlwayShown(boolean)"""
        super(_EditorPanel, self).setIsAlwayShown(_boolean.valueOf(arg0))

    @overload
    def getConditionForKeyStroke(self, arg0: 'KeyStroke') -> int:
        """public int javax.swing.JComponent.getConditionForKeyStroke(javax.swing.KeyStroke)"""
        return int._wrap(super(_JComponent, self).getConditionForKeyStroke(arg0))

    @override
    @overload
    def getTreeLock(self) -> object:
        """public final java.lang.Object java.awt.Component.getTreeLock()"""
        return object._wrap(super(Component, self).getTreeLock())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @override
    @overload
    def addVetoableChangeListener(self, arg0: 'VetoableChangeListener'):
        """public synchronized void javax.swing.JComponent.addVetoableChangeListener(java.beans.VetoableChangeListener)"""
        super(_JComponent, self).addVetoableChangeListener(arg0)

    @overload
    def contains(self, arg0: 'Point') -> bool:
        """public boolean java.awt.Component.contains(java.awt.Point)"""
        return bool._wrap(super(_Component, self).contains(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,short,short)"""
        super(_Component, self).firePropertyChange(arg0, _short.valueOf(arg1), _short.valueOf(arg2))

    @override
    @overload
    def dispatchEvent(self, arg0: 'AWTEvent'):
        """public final void java.awt.Component.dispatchEvent(java.awt.AWTEvent)"""
        super(_Component, self).dispatchEvent(arg0)

    @override
    @overload
    def removeContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.removeContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).removeContainerListener(arg0)

    @override
    @overload
    def getGraphicsConfiguration(self) -> 'GraphicsConfiguration':
        """public java.awt.GraphicsConfiguration java.awt.Component.getGraphicsConfiguration()"""
        return 'GraphicsConfiguration'._wrap(super(Component, self).getGraphicsConfiguration())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: bool, arg2: bool):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,boolean,boolean)"""
        super(_JComponent, self).firePropertyChange(arg0, _boolean.valueOf(arg1), _boolean.valueOf(arg2))

    @override
    @overload
    def registerKeyboardAction(self, arg0: 'ActionListener', arg1: str, arg2: 'KeyStroke', arg3: int):
        """public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,java.lang.String,javax.swing.KeyStroke,int)"""
        super(_JComponent, self).registerKeyboardAction(arg0, arg1, arg2, _int.valueOf(arg3))

    @overload
    def findComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(arg0))

    @override
    @overload
    def resize(self, arg0: int, arg1: int):
        """public void java.awt.Component.resize(int,int)"""
        super(_Component, self).resize(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getHeight(self) -> int:
        """public int javax.swing.JComponent.getHeight()"""
        return int._wrap(super(JComponent, self).getHeight())

    @override
    @overload
    def getTransferHandler(self) -> 'TransferHandler':
        """public javax.swing.TransferHandler javax.swing.JComponent.getTransferHandler()"""
        return 'TransferHandler'._wrap(super(JComponent, self).getTransferHandler())

    @overload
    def imageUpdate(self, arg0: 'Image', arg1: int, arg2: int, arg3: int, arg4: int, arg5: int) -> bool:
        """public boolean java.awt.Component.imageUpdate(java.awt.Image,int,int,int,int,int)"""
        return bool._wrap(super(_Component, self).imageUpdate(arg0, _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4), _int.valueOf(arg5)))

    @override
    @overload
    def getWidth(self) -> int:
        """public int javax.swing.JComponent.getWidth()"""
        return int._wrap(super(JComponent, self).getWidth())

    @override
    @overload
    def transferFocusBackward(self):
        """public void java.awt.Component.transferFocusBackward()"""
        super(Component, self).transferFocusBackward()

    @overload
    def getPropertyChangeListeners(self, arg0: str) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners(java.lang.String)"""
        return List['PropertyChangeListener']._wrap(super(_Component, self).getPropertyChangeListeners(arg0))

    @override
    @overload
    def getName(self) -> str:
        """public java.lang.String com.badlogic.gdx.tools.flame.EditorPanel.getName()"""
        return str._wrap(super(EditorPanel, self).getName())

    @staticmethod
    @overload
    def isLightweightComponent(arg0: 'Component') -> bool:
        """public static boolean javax.swing.JComponent.isLightweightComponent(java.awt.Component)"""
        return bool._wrap(_JComponent.isLightweightComponent(arg0))

    @override
    @overload
    def getBorder(self) -> 'Border':
        """public javax.swing.border.Border javax.swing.JComponent.getBorder()"""
        return 'Border'._wrap(super(JComponent, self).getBorder())

    @override
    @overload
    def printAll(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.printAll(java.awt.Graphics)"""
        super(_JComponent, self).printAll(arg0)

    @override
    @overload
    def addComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.addComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).addComponentListener(arg0)

    @override
    @overload
    def getBaselineResizeBehavior(self) -> 'BaselineResizeBehavior.Component$BaselineResizeBehavior':
        """public java.awt.Component$BaselineResizeBehavior javax.swing.JComponent.getBaselineResizeBehavior()"""
        return 'BaselineResizeBehavior.Component$BaselineResizeBehavior'._wrap(super(JComponent, self).getBaselineResizeBehavior())

    @override
    @overload
    def print(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.print(java.awt.Graphics)"""
        super(_JComponent, self).print(arg0)

    @override
    @overload
    def setInputVerifier(self, arg0: 'InputVerifier'):
        """public void javax.swing.JComponent.setInputVerifier(javax.swing.InputVerifier)"""
        super(_JComponent, self).setInputVerifier(arg0)

    @override
    @overload
    def addAncestorListener(self, arg0: 'AncestorListener'):
        """public void javax.swing.JComponent.addAncestorListener(javax.swing.event.AncestorListener)"""
        super(_JComponent, self).addAncestorListener(arg0)

    @override
    @overload
    def getFont(self) -> 'Font':
        """public java.awt.Font java.awt.Component.getFont()"""
        return 'Font'._wrap(super(Component, self).getFont())

    @override
    @overload
    def setFont(self, arg0: 'Font'):
        """public void javax.swing.JComponent.setFont(java.awt.Font)"""
        super(_JComponent, self).setFont(arg0)

    @override
    @overload
    def isOptimizedDrawingEnabled(self) -> bool:
        """public boolean javax.swing.JComponent.isOptimizedDrawingEnabled()"""
        return bool._wrap(super(JComponent, self).isOptimizedDrawingEnabled())

    @override
    @overload
    def isValidateRoot(self) -> bool:
        """public boolean javax.swing.JComponent.isValidateRoot()"""
        return bool._wrap(super(JComponent, self).isValidateRoot())

    @overload
    def prepareImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @override
    @overload
    def setHasAdvanced(self, arg0: bool):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setHasAdvanced(boolean)"""
        super(_EditorPanel, self).setHasAdvanced(_boolean.valueOf(arg0))

    @override
    @overload
    def setForeground(self, arg0: 'Color'):
        """public void javax.swing.JComponent.setForeground(java.awt.Color)"""
        super(_JComponent, self).setForeground(arg0)

    @overload
    def mouseDrag(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDrag(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDrag(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def isOpaque(self) -> bool:
        """public boolean javax.swing.JComponent.isOpaque()"""
        return bool._wrap(super(JComponent, self).isOpaque())

    @overload
    def createVolatileImage(self, arg0: int, arg1: int, arg2: 'ImageCapabilities') -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int,java.awt.ImageCapabilities) throws java.awt.AWTException"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1), arg2))

    @override
    @overload
    def bounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.bounds()"""
        return 'Rectangle'._wrap(super(Component, self).bounds())

    @override
    @overload
    def update(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.update(java.awt.Graphics)"""
        super(_JComponent, self).update(arg0)

    @override
    @overload
    def add(self, arg0: 'PopupMenu'):
        """public void java.awt.Component.add(java.awt.PopupMenu)"""
        super(_Component, self).add(arg0)

    @override
    @overload
    def getToolTipText(self) -> str:
        """public java.lang.String javax.swing.JComponent.getToolTipText()"""
        return str._wrap(super(JComponent, self).getToolTipText())

    @override
    @overload
    def isVisible(self) -> bool:
        """public boolean java.awt.Component.isVisible()"""
        return bool._wrap(super(Component, self).isVisible())

    @override
    @overload
    def setDropTarget(self, arg0: 'DropTarget'):
        """public synchronized void java.awt.Component.setDropTarget(java.awt.dnd.DropTarget)"""
        super(_Component, self).setDropTarget(arg0)

    @override
    @overload
    def getLocationOnScreen(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocationOnScreen()"""
        return 'Point'._wrap(super(Component, self).getLocationOnScreen())

    @override
    @overload
    def getY(self) -> int:
        """public int javax.swing.JComponent.getY()"""
        return int._wrap(super(JComponent, self).getY())

    @overload
    def getComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def isMaximumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMaximumSizeSet()"""
        return bool._wrap(super(Component, self).isMaximumSizeSet())

    @override
    @overload
    def setAlignmentY(self, arg0: float):
        """public void javax.swing.JComponent.setAlignmentY(float)"""
        super(_JComponent, self).setAlignmentY(_float.valueOf(arg0))

    @override
    @overload
    def getRegisteredKeyStrokes(self) -> List['KeyStroke']:
        """public javax.swing.KeyStroke[] javax.swing.JComponent.getRegisteredKeyStrokes()"""
        return List['KeyStroke']._wrap(super(JComponent, self).getRegisteredKeyStrokes())

    @override
    @overload
    def isFocusable(self) -> bool:
        """public boolean java.awt.Component.isFocusable()"""
        return bool._wrap(super(Component, self).isFocusable())

    @override
    @overload
    def isFocusTraversalPolicyProvider(self) -> bool:
        """public final boolean java.awt.Container.isFocusTraversalPolicyProvider()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicyProvider())

    @override
    @overload
    def getMouseListeners(self) -> List['MouseListener']:
        """public synchronized java.awt.event.MouseListener[] java.awt.Component.getMouseListeners()"""
        return List['MouseListener']._wrap(super(Component, self).getMouseListeners())

    @override
    @overload
    def setValue(self, arg0: object):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setValue(T)"""
        super(_EditorPanel, self).setValue(arg0)

    @override
    @overload
    def registerKeyboardAction(self, arg0: 'ActionListener', arg1: 'KeyStroke', arg2: int):
        """public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,javax.swing.KeyStroke,int)"""
        super(_JComponent, self).registerKeyboardAction(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def transferFocusUpCycle(self):
        """public void java.awt.Component.transferFocusUpCycle()"""
        super(Component, self).transferFocusUpCycle()

    @override
    @overload
    def removeKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.removeKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).removeKeyListener(arg0)

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: str, arg2: str):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,char,char)"""
        super(_JComponent, self).firePropertyChange(arg0, _char.valueOf(arg1), _char.valueOf(arg2))

    @override
    @overload
    def getMouseMotionListeners(self) -> List['MouseMotionListener']:
        """public synchronized java.awt.event.MouseMotionListener[] java.awt.Component.getMouseMotionListeners()"""
        return List['MouseMotionListener']._wrap(super(Component, self).getMouseMotionListeners())

    @override
    @overload
    def getAutoscrolls(self) -> bool:
        """public boolean javax.swing.JComponent.getAutoscrolls()"""
        return bool._wrap(super(JComponent, self).getAutoscrolls())

    @override
    @overload
    def addContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.addContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).addContainerListener(arg0)

    @override
    @overload
    def isFocusTraversable(self) -> bool:
        """public boolean java.awt.Component.isFocusTraversable()"""
        return bool._wrap(super(Component, self).isFocusTraversable())

    @overload
    def mouseExit(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseExit(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseExit(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getBounds(self, arg0: 'Rectangle') -> 'Rectangle':
        """public java.awt.Rectangle javax.swing.JComponent.getBounds(java.awt.Rectangle)"""
        return 'Rectangle'._wrap(super(_JComponent, self).getBounds(arg0))

    @override
    @overload
    def setToolTipText(self, arg0: str):
        """public void javax.swing.JComponent.setToolTipText(java.lang.String)"""
        super(_JComponent, self).setToolTipText(arg0)

    @override
    @overload
    def setAutoscrolls(self, arg0: bool):
        """public void javax.swing.JComponent.setAutoscrolls(boolean)"""
        super(_JComponent, self).setAutoscrolls(_boolean.valueOf(arg0))

    @override
    @overload
    def setComponentPopupMenu(self, arg0: 'JPopupMenu'):
        """public void javax.swing.JComponent.setComponentPopupMenu(javax.swing.JPopupMenu)"""
        super(_JComponent, self).setComponentPopupMenu(arg0)

    @override
    @overload
    def setMixingCutoutShape(self, arg0: 'Shape'):
        """public void java.awt.Component.setMixingCutoutShape(java.awt.Shape)"""
        super(_Component, self).setMixingCutoutShape(arg0)

    @override
    @overload
    def getVisibleRect(self) -> 'Rectangle':
        """public java.awt.Rectangle javax.swing.JComponent.getVisibleRect()"""
        return 'Rectangle'._wrap(super(JComponent, self).getVisibleRect())

    @override
    @overload
    def requestFocus(self, arg0: 'Cause'):
        """public void java.awt.Component.requestFocus(java.awt.event.FocusEvent$Cause)"""
        super(_Component, self).requestFocus(arg0)

    @overload
    def createImage(self, arg0: int, arg1: int) -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(int,int)"""
        return 'Image'._wrap(super(_Component, self).createImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def putClientProperty(self, arg0: object, arg1: object):
        """public final void javax.swing.JComponent.putClientProperty(java.lang.Object,java.lang.Object)"""
        super(_JComponent, self).putClientProperty(arg0, arg1)

    @override
    @overload
    def getVetoableChangeListeners(self) -> List['VetoableChangeListener']:
        """public synchronized java.beans.VetoableChangeListener[] javax.swing.JComponent.getVetoableChangeListeners()"""
        return List['VetoableChangeListener']._wrap(super(JComponent, self).getVetoableChangeListeners())

    @override
    @overload
    def scrollRectToVisible(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.scrollRectToVisible(java.awt.Rectangle)"""
        super(_JComponent, self).scrollRectToVisible(arg0)

    @override
    @overload
    def getTopLevelAncestor(self) -> 'Container':
        """public java.awt.Container javax.swing.JComponent.getTopLevelAncestor()"""
        return 'Container'._wrap(super(JComponent, self).getTopLevelAncestor())

    @override
    @overload
    def isRequestFocusEnabled(self) -> bool:
        """public boolean javax.swing.JComponent.isRequestFocusEnabled()"""
        return bool._wrap(super(JComponent, self).isRequestFocusEnabled())

    @override
    @overload
    def getFocusListeners(self) -> List['FocusListener']:
        """public synchronized java.awt.event.FocusListener[] java.awt.Component.getFocusListeners()"""
        return List['FocusListener']._wrap(super(Component, self).getFocusListeners())

    @override
    @overload
    def setLayout(self, arg0: 'LayoutManager'):
        """public void java.awt.Container.setLayout(java.awt.LayoutManager)"""
        super(_Container, self).setLayout(arg0)

    @overload
    def add(self, arg0: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0))

    @override
    @overload
    def getMouseWheelListeners(self) -> List['MouseWheelListener']:
        """public synchronized java.awt.event.MouseWheelListener[] java.awt.Component.getMouseWheelListeners()"""
        return List['MouseWheelListener']._wrap(super(Component, self).getMouseWheelListeners())

    @override
    @overload
    def reshape(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void javax.swing.JComponent.reshape(int,int,int,int)"""
        super(_JComponent, self).reshape(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def setTransferHandler(self, arg0: 'TransferHandler'):
        """public void javax.swing.JComponent.setTransferHandler(javax.swing.TransferHandler)"""
        super(_JComponent, self).setTransferHandler(arg0)

    @override
    @overload
    def getPreferredSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getPreferredSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getPreferredSize())

    @override
    @overload
    def setLocation(self, arg0: int, arg1: int):
        """public void java.awt.Component.setLocation(int,int)"""
        super(_Component, self).setLocation(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def removeInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.removeInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).removeInputMethodListener(arg0)

    @override
    @overload
    def setFocusable(self, arg0: bool):
        """public void java.awt.Component.setFocusable(boolean)"""
        super(_Component, self).setFocusable(_boolean.valueOf(arg0))

    @override
    @overload
    def paintComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.paintComponents(java.awt.Graphics)"""
        super(_Container, self).paintComponents(arg0)

    @override
    @overload
    def addFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.addFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).addFocusListener(arg0)

    @overload
    def prepareImage(self, arg0: 'Image', arg1: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, arg1))

    @override
    @overload
    def addKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.addKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).addKeyListener(arg0)

    @override
    @overload
    def resize(self, arg0: 'Dimension'):
        """public void java.awt.Component.resize(java.awt.Dimension)"""
        super(_Component, self).resize(arg0)

    @override
    @overload
    def setComponentZOrder(self, arg0: 'Component', arg1: int):
        """public void java.awt.Container.setComponentZOrder(java.awt.Component,int)"""
        super(_Container, self).setComponentZOrder(arg0, _int.valueOf(arg1))

    @override
    @overload
    def list(self):
        """public void java.awt.Component.list()"""
        super(Component, self).list()

    @overload
    def add(self, arg0: str, arg1: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.lang.String,java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, arg1))

    @override
    @overload
    def paintImmediately(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void javax.swing.JComponent.paintImmediately(int,int,int,int)"""
        super(_JComponent, self).paintImmediately(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def getMinimumSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getMinimumSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getMinimumSize())

    @override
    @overload
    def setEnabled(self, arg0: bool):
        """public void javax.swing.JComponent.setEnabled(boolean)"""
        super(_JComponent, self).setEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def hasFocus(self) -> bool:
        """public boolean java.awt.Component.hasFocus()"""
        return bool._wrap(super(Component, self).hasFocus())

    @overload
    def createVolatileImage(self, arg0: int, arg1: int) -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int)"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.removeHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).removeHierarchyListener(arg0)

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.awt.Component.toString()"""
        return str._wrap(super(Component, self).toString())

    @override
    @overload
    def addMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.addMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).addMouseListener(arg0)

    @override
    @overload
    def isFocusOwner(self) -> bool:
        """public boolean java.awt.Component.isFocusOwner()"""
        return bool._wrap(super(Component, self).isFocusOwner())

    @override
    @overload
    def getAccessibleContext(self) -> 'AccessibleContext':
        """public javax.accessibility.AccessibleContext javax.swing.JPanel.getAccessibleContext()"""
        return 'AccessibleContext'._wrap(super(JPanel, self).getAccessibleContext())

    @overload
    def postEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.postEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).postEvent(arg0))

    @overload
    def getLocation(self, arg0: 'Point') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getLocation(java.awt.Point)"""
        return 'Point'._wrap(super(_JComponent, self).getLocation(arg0))

    @overload
    def getBaseline(self, arg0: int, arg1: int) -> int:
        """public int javax.swing.JComponent.getBaseline(int,int)"""
        return int._wrap(super(_JComponent, self).getBaseline(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def findComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeNotify(self):
        """public void javax.swing.JComponent.removeNotify()"""
        super(JComponent, self).removeNotify()

    @override
    @overload
    def getForeground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getForeground()"""
        return 'Color'._wrap(super(Component, self).getForeground())

    @override
    @overload
    def show(self):
        """public void java.awt.Component.show()"""
        super(Component, self).show()

    @override
    @overload
    def isDoubleBuffered(self) -> bool:
        """public boolean javax.swing.JComponent.isDoubleBuffered()"""
        return bool._wrap(super(JComponent, self).isDoubleBuffered())

    @override
    @overload
    def setDescription(self, arg0: str):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setDescription(java.lang.String)"""
        super(_EditorPanel, self).setDescription(arg0)

    @override
    @overload
    def isFocusCycleRoot(self) -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot()"""
        return bool._wrap(super(Container, self).isFocusCycleRoot())

    @override
    @overload
    def addMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.addMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).addMouseWheelListener(arg0)

    @override
    @overload
    def hide(self):
        """public void javax.swing.JComponent.hide()"""
        super(JComponent, self).hide()

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def revalidate(self):
        """public void javax.swing.JComponent.revalidate()"""
        super(JComponent, self).revalidate()

    @override
    @overload
    def getActionMap(self) -> 'ActionMap':
        """public final javax.swing.ActionMap javax.swing.JComponent.getActionMap()"""
        return 'ActionMap'._wrap(super(JComponent, self).getActionMap())

    @override
    @overload
    def requestFocusInWindow(self) -> bool:
        """public boolean javax.swing.JComponent.requestFocusInWindow()"""
        return bool._wrap(super(JComponent, self).requestFocusInWindow())

    @overload
    def action(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.action(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).action(arg0, arg1))

    @override
    @overload
    def isManagingFocus(self) -> bool:
        """public boolean javax.swing.JComponent.isManagingFocus()"""
        return bool._wrap(super(JComponent, self).isManagingFocus())

    @override
    @overload
    def isLightweight(self) -> bool:
        """public boolean java.awt.Component.isLightweight()"""
        return bool._wrap(super(Component, self).isLightweight())

    @override
    @overload
    def setAlignmentX(self, arg0: float):
        """public void javax.swing.JComponent.setAlignmentX(float)"""
        super(_JComponent, self).setAlignmentX(_float.valueOf(arg0))

    @overload
    def getFocusTraversalKeys(self, arg0: int) -> 'Set':
        """public java.util.Set<java.awt.AWTKeyStroke> java.awt.Container.getFocusTraversalKeys(int)"""
        return 'Set'._wrap(super(_Container, self).getFocusTraversalKeys(_int.valueOf(arg0)))

    @override
    @overload
    def setFocusTraversalKeysEnabled(self, arg0: bool):
        """public void java.awt.Component.setFocusTraversalKeysEnabled(boolean)"""
        super(_Component, self).setFocusTraversalKeysEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def remove(self, arg0: 'Component'):
        """public void java.awt.Container.remove(java.awt.Component)"""
        super(_Container, self).remove(arg0)

    @overload
    def getInsets(self, arg0: 'Insets') -> 'Insets':
        """public java.awt.Insets javax.swing.JComponent.getInsets(java.awt.Insets)"""
        return 'Insets'._wrap(super(_JComponent, self).getInsets(arg0))

    @override
    @overload
    def insets(self) -> 'Insets':
        """public java.awt.Insets java.awt.Container.insets()"""
        return 'Insets'._wrap(super(Container, self).insets())

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int):
        """public void javax.swing.JComponent.repaint(long,int,int,int,int)"""
        super(_JComponent, self).repaint(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4))

    @override
    @overload
    def setFocusTraversalPolicy(self, arg0: 'FocusTraversalPolicy'):
        """public void java.awt.Container.setFocusTraversalPolicy(java.awt.FocusTraversalPolicy)"""
        super(_Container, self).setFocusTraversalPolicy(arg0)

    @overload
    def getSize(self, arg0: 'Dimension') -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getSize(java.awt.Dimension)"""
        return 'Dimension'._wrap(super(_JComponent, self).getSize(arg0))

    @override
    @overload
    def enable(self, arg0: bool):
        """public void java.awt.Component.enable(boolean)"""
        super(_Component, self).enable(_boolean.valueOf(arg0))

    @overload
    def getToolTipLocation(self, arg0: 'MouseEvent') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getToolTipLocation(java.awt.event.MouseEvent)"""
        return 'Point'._wrap(super(_JComponent, self).getToolTipLocation(arg0))

    @override
    @overload
    def addPropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Container.addPropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Container, self).addPropertyChangeListener(arg0)

    @overload
    def getComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(arg0))

    @override
    @overload
    def size(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.size()"""
        return 'Dimension'._wrap(super(Component, self).size())

    @override
    @overload
    def getVerifyInputWhenFocusTarget(self) -> bool:
        """public boolean javax.swing.JComponent.getVerifyInputWhenFocusTarget()"""
        return bool._wrap(super(JComponent, self).getVerifyInputWhenFocusTarget())

    @overload
    def mouseMove(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseMove(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseMove(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def __init__(self, arg0: 'FlameMain', arg1: 'PointSpriteParticleBatch'):
        """public com.badlogic.gdx.tools.flame.PointSpriteBatchPanel(com.badlogic.gdx.tools.flame.FlameMain,com.badlogic.gdx.graphics.g3d.particles.batches.PointSpriteParticleBatch)"""
        val = _PointSpriteBatchPanel(arg0, arg1)
        self.__wrapper = val

    @overload
    def getActionForKeyStroke(self, arg0: 'KeyStroke') -> 'ActionListener':
        """public java.awt.event.ActionListener javax.swing.JComponent.getActionForKeyStroke(javax.swing.KeyStroke)"""
        return 'ActionListener'._wrap(super(_JComponent, self).getActionForKeyStroke(arg0))

    @overload
    def lostFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.lostFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).lostFocus(arg0, arg1))

    @override
    @overload
    def isMinimumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMinimumSizeSet()"""
        return bool._wrap(super(Component, self).isMinimumSizeSet())

    @override
    @overload
    def isForegroundSet(self) -> bool:
        """public boolean java.awt.Component.isForegroundSet()"""
        return bool._wrap(super(Component, self).isForegroundSet())

    @overload
    def getMousePosition(self, arg0: bool) -> 'Point':
        """public java.awt.Point java.awt.Container.getMousePosition(boolean) throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(_Container, self).getMousePosition(_boolean.valueOf(arg0)))

    @overload
    def getFontMetrics(self, arg0: 'Font') -> 'FontMetrics':
        """public java.awt.FontMetrics javax.swing.JComponent.getFontMetrics(java.awt.Font)"""
        return 'FontMetrics'._wrap(super(_JComponent, self).getFontMetrics(arg0))

    @overload
    def getListeners(self, arg0: 'Class') -> List['EventListener']:
        """public <T extends java.util.EventListener> T[] javax.swing.JComponent.getListeners(java.lang.Class<T>)"""
        return List['EventListener']._wrap(super(_JComponent, self).getListeners(arg0))

    @override
    @overload
    def getHierarchyBoundsListeners(self) -> List['HierarchyBoundsListener']:
        """public synchronized java.awt.event.HierarchyBoundsListener[] java.awt.Component.getHierarchyBoundsListeners()"""
        return List['HierarchyBoundsListener']._wrap(super(Component, self).getHierarchyBoundsListeners())

    @override
    @overload
    def minimumSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.minimumSize()"""
        return 'Dimension'._wrap(super(Container, self).minimumSize())

    @overload
    def handleEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.handleEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).handleEvent(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @override
    @overload
    def getComponentListeners(self) -> List['ComponentListener']:
        """public synchronized java.awt.event.ComponentListener[] java.awt.Component.getComponentListeners()"""
        return List['ComponentListener']._wrap(super(Component, self).getComponentListeners())

    @override
    @overload
    def computeVisibleRect(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.computeVisibleRect(java.awt.Rectangle)"""
        super(_JComponent, self).computeVisibleRect(arg0)

    @override
    @overload
    def deliverEvent(self, arg0: 'Event'):
        """public void java.awt.Container.deliverEvent(java.awt.Event)"""
        super(_Container, self).deliverEvent(arg0)

    @override
    @overload
    def addHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.addHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).addHierarchyBoundsListener(arg0)

    @override
    @overload
    def getAlignmentX(self) -> float:
        """public float javax.swing.JComponent.getAlignmentX()"""
        return float._wrap(super(JComponent, self).getAlignmentX())

    @overload
    def add(self, arg0: 'Component', arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component,int)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def repaint(self):
        """public void java.awt.Component.repaint()"""
        super(Component, self).repaint()

    @overload
    def gotFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.gotFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).gotFocus(arg0, arg1))

    @override
    @overload
    def createToolTip(self) -> 'JToolTip':
        """public javax.swing.JToolTip javax.swing.JComponent.createToolTip()"""
        return 'JToolTip'._wrap(super(JComponent, self).createToolTip())

    @override
    @overload
    def setEmbedded(self):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setEmbedded()"""
        super(EditorPanel, self).setEmbedded()

    @overload
    def getToolTipText(self, arg0: 'MouseEvent') -> str:
        """public java.lang.String javax.swing.JComponent.getToolTipText(java.awt.event.MouseEvent)"""
        return str._wrap(super(_JComponent, self).getToolTipText(arg0))

    @override
    @overload
    def printComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.printComponents(java.awt.Graphics)"""
        super(_Container, self).printComponents(arg0)

    @override
    @overload
    def getColorModel(self) -> 'ColorModel':
        """public java.awt.image.ColorModel java.awt.Component.getColorModel()"""
        return 'ColorModel'._wrap(super(Component, self).getColorModel())

    @override
    @overload
    def setFocusTraversalPolicyProvider(self, arg0: bool):
        """public final void java.awt.Container.setFocusTraversalPolicyProvider(boolean)"""
        super(_Container, self).setFocusTraversalPolicyProvider(_boolean.valueOf(arg0))

    @overload
    def getComponentZOrder(self, arg0: 'Component') -> int:
        """public int java.awt.Container.getComponentZOrder(java.awt.Component)"""
        return int._wrap(super(_Container, self).getComponentZOrder(arg0))

    @override
    @overload
    def getDebugGraphicsOptions(self) -> int:
        """public int javax.swing.JComponent.getDebugGraphicsOptions()"""
        return int._wrap(super(JComponent, self).getDebugGraphicsOptions())

    @overload
    def areFocusTraversalKeysSet(self, arg0: int) -> bool:
        """public boolean java.awt.Container.areFocusTraversalKeysSet(int)"""
        return bool._wrap(super(_Container, self).areFocusTraversalKeysSet(_int.valueOf(arg0)))

    @override
    @overload
    def getSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.getSize()"""
        return 'Dimension'._wrap(super(Component, self).getSize())

    @override
    @overload
    def repaint(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.repaint(java.awt.Rectangle)"""
        super(_JComponent, self).repaint(arg0)

    @overload
    def getClientProperty(self, arg0: object) -> object:
        """public final java.lang.Object javax.swing.JComponent.getClientProperty(java.lang.Object)"""
        return object._wrap(super(_JComponent, self).getClientProperty(arg0))

    @override
    @overload
    def unregisterKeyboardAction(self, arg0: 'KeyStroke'):
        """public void javax.swing.JComponent.unregisterKeyboardAction(javax.swing.KeyStroke)"""
        super(_JComponent, self).unregisterKeyboardAction(arg0)

    @overload
    def requestFocus(self, arg0: bool) -> bool:
        """public boolean javax.swing.JComponent.requestFocus(boolean)"""
        return bool._wrap(super(_JComponent, self).requestFocus(_boolean.valueOf(arg0)))

    @override
    @overload
    def setActionMap(self, arg0: 'ActionMap'):
        """public final void javax.swing.JComponent.setActionMap(javax.swing.ActionMap)"""
        super(_JComponent, self).setActionMap(arg0)

    @override
    @overload
    def getX(self) -> int:
        """public int javax.swing.JComponent.getX()"""
        return int._wrap(super(JComponent, self).getX())

    @overload
    def mouseEnter(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseEnter(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseEnter(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def updateUI(self):
        """public void javax.swing.JPanel.updateUI()"""
        super(JPanel, self).updateUI()

    @override
    @overload
    def getToolkit(self) -> 'Toolkit':
        """public java.awt.Toolkit java.awt.Component.getToolkit()"""
        return 'Toolkit'._wrap(super(Component, self).getToolkit())

    @override
    @overload
    def isCursorSet(self) -> bool:
        """public boolean java.awt.Component.isCursorSet()"""
        return bool._wrap(super(Component, self).isCursorSet())

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object, arg2: int):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object,int)"""
        super(_Container, self).add(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def setPreferredSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setPreferredSize(java.awt.Dimension)"""
        super(_JComponent, self).setPreferredSize(arg0)

    @override
    @overload
    def setBounds(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.setBounds(int,int,int,int)"""
        super(_Component, self).setBounds(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def isFocusTraversalPolicySet(self) -> bool:
        """public boolean java.awt.Container.isFocusTraversalPolicySet()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicySet())

    @override
    @overload
    def requestFocus(self):
        """public void javax.swing.JComponent.requestFocus()"""
        super(JComponent, self).requestFocus()

    @override
    @overload
    def getAncestorListeners(self) -> List['AncestorListener']:
        """public javax.swing.event.AncestorListener[] javax.swing.JComponent.getAncestorListeners()"""
        return List['AncestorListener']._wrap(super(JComponent, self).getAncestorListeners())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool._wrap(super(_object, self).equals(arg0))

    @overload
    def getInputMap(self, arg0: int) -> 'InputMap':
        """public final javax.swing.InputMap javax.swing.JComponent.getInputMap(int)"""
        return 'InputMap'._wrap(super(_JComponent, self).getInputMap(_int.valueOf(arg0)))

    @override
    @overload
    def isEnabled(self) -> bool:
        """public boolean java.awt.Component.isEnabled()"""
        return bool._wrap(super(Component, self).isEnabled())

    @override
    @overload
    def move(self, arg0: int, arg1: int):
        """public void java.awt.Component.move(int,int)"""
        super(_Component, self).move(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def addMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.addMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).addMouseMotionListener(arg0)

    @override
    @overload
    def getIgnoreRepaint(self) -> bool:
        """public boolean java.awt.Component.getIgnoreRepaint()"""
        return bool._wrap(super(Component, self).getIgnoreRepaint())

    @overload
    def isFocusCycleRoot(self, arg0: 'Container') -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot(java.awt.Container)"""
        return bool._wrap(super(_Container, self).isFocusCycleRoot(arg0))

    @override
    @overload
    def getGraphics(self) -> 'Graphics':
        """public java.awt.Graphics javax.swing.JComponent.getGraphics()"""
        return 'Graphics'._wrap(super(JComponent, self).getGraphics())

    @override
    @overload
    def setLocale(self, arg0: 'Locale'):
        """public void java.awt.Component.setLocale(java.util.Locale)"""
        super(_Component, self).setLocale(arg0)

    @override
    @overload
    def paintAll(self, arg0: 'Graphics'):
        """public void java.awt.Component.paintAll(java.awt.Graphics)"""
        super(_Component, self).paintAll(arg0)

    @override
    @overload
    def setDoubleBuffered(self, arg0: bool):
        """public void javax.swing.JComponent.setDoubleBuffered(boolean)"""
        super(_JComponent, self).setDoubleBuffered(_boolean.valueOf(arg0))

    @override
    @overload
    def isPreferredSizeSet(self) -> bool:
        """public boolean java.awt.Component.isPreferredSizeSet()"""
        return bool._wrap(super(Component, self).isPreferredSizeSet())

    @override
    @overload
    def addInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.addInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).addInputMethodListener(arg0)

    @override
    @overload
    def removeMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.removeMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).removeMouseWheelListener(arg0)

    @override
    @overload
    def getInputMap(self) -> 'InputMap':
        """public final javax.swing.InputMap javax.swing.JComponent.getInputMap()"""
        return 'InputMap'._wrap(super(JComponent, self).getInputMap())

    @override
    @overload
    def setVisible(self, arg0: bool):
        """public void javax.swing.JComponent.setVisible(boolean)"""
        super(_JComponent, self).setVisible(_boolean.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,byte,byte)"""
        super(_Component, self).firePropertyChange(arg0, _byte.valueOf(arg1), _byte.valueOf(arg2))

    @override
    @overload
    def getUIClassID(self) -> str:
        """public java.lang.String javax.swing.JPanel.getUIClassID()"""
        return str._wrap(super(JPanel, self).getUIClassID())

    @override
    @overload
    def transferFocusDownCycle(self):
        """public void java.awt.Container.transferFocusDownCycle()"""
        super(Container, self).transferFocusDownCycle()

    @override
    @overload
    def getNextFocusableComponent(self) -> 'Component':
        """public java.awt.Component javax.swing.JComponent.getNextFocusableComponent()"""
        return 'Component'._wrap(super(JComponent, self).getNextFocusableComponent())

    @override
    @overload
    def getUI(self) -> 'PanelUI':
        """public javax.swing.plaf.PanelUI javax.swing.JPanel.getUI()"""
        return 'PanelUI'._wrap(super(JPanel, self).getUI())

    @override
    @overload
    def setBounds(self, arg0: 'Rectangle'):
        """public void java.awt.Component.setBounds(java.awt.Rectangle)"""
        super(_Component, self).setBounds(arg0)

    @override
    @overload
    def repaint(self, arg0: int):
        """public void java.awt.Component.repaint(long)"""
        super(_Component, self).repaint(_long.valueOf(arg0))

    @override
    @overload
    def removeHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.removeHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).removeHierarchyBoundsListener(arg0)

    @override
    @overload
    def getComponentPopupMenu(self) -> 'JPopupMenu':
        """public javax.swing.JPopupMenu javax.swing.JComponent.getComponentPopupMenu()"""
        return 'JPopupMenu'._wrap(super(JComponent, self).getComponentPopupMenu())

    @override
    @overload
    def getMousePosition(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getMousePosition() throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(Component, self).getMousePosition())

    @override
    @overload
    def getComponentCount(self) -> int:
        """public int java.awt.Container.getComponentCount()"""
        return int._wrap(super(Container, self).getComponentCount())

    @override
    @overload
    def getInputMethodRequests(self) -> 'InputMethodRequests':
        """public java.awt.im.InputMethodRequests java.awt.Component.getInputMethodRequests()"""
        return 'InputMethodRequests'._wrap(super(Component, self).getInputMethodRequests())

    @override
    @overload
    def setMaximumSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setMaximumSize(java.awt.Dimension)"""
        super(_JComponent, self).setMaximumSize(arg0)

    @override
    @overload
    def setRequestFocusEnabled(self, arg0: bool):
        """public void javax.swing.JComponent.setRequestFocusEnabled(boolean)"""
        super(_JComponent, self).setRequestFocusEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def setFocusTraversalKeys(self, arg0: int, arg1: 'Set'):
        """public void javax.swing.JComponent.setFocusTraversalKeys(int,java.util.Set<? extends java.awt.AWTKeyStroke>)"""
        super(_JComponent, self).setFocusTraversalKeys(_int.valueOf(arg0), arg1)

    @overload
    def inside(self, arg0: int, arg1: int) -> bool:
        """public boolean java.awt.Component.inside(int,int)"""
        return bool._wrap(super(_Component, self).inside(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def requestDefaultFocus(self) -> bool:
        """public boolean javax.swing.JComponent.requestDefaultFocus()"""
        return bool._wrap(super(JComponent, self).requestDefaultFocus())

    @override
    @overload
    def disable(self):
        """public void javax.swing.JComponent.disable()"""
        super(JComponent, self).disable()

    @override
    @overload
    def showContent(self, arg0: bool):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.showContent(boolean)"""
        super(_EditorPanel, self).showContent(_boolean.valueOf(arg0))

    @override
    @overload
    def enableInputMethods(self, arg0: bool):
        """public void java.awt.Component.enableInputMethods(boolean)"""
        super(_Component, self).enableInputMethods(_boolean.valueOf(arg0))

    @override
    @overload
    def layout(self):
        """public void java.awt.Container.layout()"""
        super(Container, self).layout()

    @override
    @overload
    def getInputMethodListeners(self) -> List['InputMethodListener']:
        """public synchronized java.awt.event.InputMethodListener[] java.awt.Component.getInputMethodListeners()"""
        return List['InputMethodListener']._wrap(super(Component, self).getInputMethodListeners())

    @override
    @overload
    def paint(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.paint(java.awt.Graphics)"""
        super(_JComponent, self).paint(arg0)

    @override
    @overload
    def transferFocus(self):
        """public void java.awt.Component.transferFocus()"""
        super(Component, self).transferFocus()

    @override
    @overload
    def removeComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.removeComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).removeComponentListener(arg0)

    @override
    @overload
    def getCursor(self) -> 'Cursor':
        """public java.awt.Cursor java.awt.Component.getCursor()"""
        return 'Cursor'._wrap(super(Component, self).getCursor())

    @override
    @overload
    def setMinimumSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setMinimumSize(java.awt.Dimension)"""
        super(_JComponent, self).setMinimumSize(arg0)

    @override
    @overload
    def getAdvancedPanel(self) -> 'JPanel':
        """public javax.swing.JPanel com.badlogic.gdx.tools.flame.EditorPanel.getAdvancedPanel()"""
        return 'JPanel'._wrap(super(EditorPanel, self).getAdvancedPanel())

    @override
    @overload
    def getContainerListeners(self) -> List['ContainerListener']:
        """public synchronized java.awt.event.ContainerListener[] java.awt.Container.getContainerListeners()"""
        return List['ContainerListener']._wrap(super(Container, self).getContainerListeners())

    @override
    @overload
    def setLocation(self, arg0: 'Point'):
        """public void java.awt.Component.setLocation(java.awt.Point)"""
        super(_Component, self).setLocation(arg0)

    @override
    @overload
    def setSize(self, arg0: 'Dimension'):
        """public void java.awt.Component.setSize(java.awt.Dimension)"""
        super(_Component, self).setSize(arg0)

    @override
    @overload
    def removeAll(self):
        """public void java.awt.Container.removeAll()"""
        super(Container, self).removeAll()

    @overload
    def getPopupLocation(self, arg0: 'MouseEvent') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getPopupLocation(java.awt.event.MouseEvent)"""
        return 'Point'._wrap(super(_JComponent, self).getPopupLocation(arg0))

    @overload
    def isAncestorOf(self, arg0: 'Component') -> bool:
        """public boolean java.awt.Container.isAncestorOf(java.awt.Component)"""
        return bool._wrap(super(_Container, self).isAncestorOf(arg0))

    @override
    @overload
    def setOpaque(self, arg0: bool):
        """public void javax.swing.JComponent.setOpaque(boolean)"""
        super(_JComponent, self).setOpaque(_boolean.valueOf(arg0))

    @overload
    def contains(self, arg0: int, arg1: int) -> bool:
        """public boolean javax.swing.JComponent.contains(int,int)"""
        return bool._wrap(super(_JComponent, self).contains(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def setCursor(self, arg0: 'Cursor'):
        """public void java.awt.Component.setCursor(java.awt.Cursor)"""
        super(_Component, self).setCursor(arg0)

    @override
    @overload
    def validate(self):
        """public void java.awt.Container.validate()"""
        super(Container, self).validate()

    @override
    @overload
    def getMaximumSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getMaximumSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getMaximumSize())

    @override
    @overload
    def getBackground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getBackground()"""
        return 'Color'._wrap(super(Component, self).getBackground())

    @overload
    def createImage(self, arg0: 'ImageProducer') -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(java.awt.image.ImageProducer)"""
        return 'Image'._wrap(super(_Component, self).createImage(arg0))

    @override
    @overload
    def setVerifyInputWhenFocusTarget(self, arg0: bool):
        """public void javax.swing.JComponent.setVerifyInputWhenFocusTarget(boolean)"""
        super(_JComponent, self).setVerifyInputWhenFocusTarget(_boolean.valueOf(arg0))

    @override
    @overload
    def removePropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0, arg1)

    @override
    @overload
    def countComponents(self) -> int:
        """public int java.awt.Container.countComponents()"""
        return int._wrap(super(Container, self).countComponents()) 
 
 
# CLASS: com.badlogic.gdx.tools.flame.ScaleInfluencerPanel
from pyquantum_helper import import_once as _import_once
import javax.accessibility.AccessibleContext as AccessibleContext
import javax.swing.JToolTip as JToolTip
import java.awt.event.HierarchyBoundsListener as HierarchyBoundsListener
import java.awt.event.ActionListener as _ActionListener
_ActionListener = _ActionListener
import java.awt.ComponentOrientation as _ComponentOrientation
_ComponentOrientation = _ComponentOrientation
import java.awt.image.ImageProducer as ImageProducer
import java.awt.GraphicsConfiguration as GraphicsConfiguration
import java.awt.Graphics as _Graphics
_Graphics = _Graphics
import javax.swing.JToolTip as _JToolTip
_JToolTip = _JToolTip
import java.awt.Container as _Container
_Container = _Container
import java.awt.MenuComponent as MenuComponent
import java.awt.im.InputMethodRequests as _InputMethodRequests
_InputMethodRequests = _InputMethodRequests
import java.awt.FocusTraversalPolicy as _FocusTraversalPolicy
_FocusTraversalPolicy = _FocusTraversalPolicy
import java.lang.Byte as _byte
import java.awt.Dimension as Dimension
import java.awt.Font as _Font
_Font = _Font
import javax.swing.plaf.PanelUI as _PanelUI
_PanelUI = _PanelUI
import java.awt.event.ContainerListener as ContainerListener
import javax.swing.event.AncestorListener as AncestorListener
import java.awt.AWTEvent as AWTEvent
import javax.swing.JPanel as JPanel
import java.awt.image.ColorModel as _ColorModel
_ColorModel = _ColorModel
import java.lang.Object as _object
import java.awt.ComponentOrientation as ComponentOrientation
import java.awt.im.InputContext as _InputContext
_InputContext = _InputContext
from builtins import float
import java.awt.event.HierarchyListener as HierarchyListener
import java.awt.event.InputMethodListener as InputMethodListener
from typing import List
import java.awt.event.MouseWheelListener as _MouseWheelListener
_MouseWheelListener = _MouseWheelListener
import java.awt.event.KeyListener as KeyListener
import java.awt.Component as Component
import com.badlogic.gdx.tools.flame.ScaleInfluencerPanel as _ScaleInfluencerPanel
_ScaleInfluencerPanel = _ScaleInfluencerPanel
from builtins import int
import java.awt.LayoutManager as LayoutManager
import java.awt.FontMetrics as _FontMetrics
_FontMetrics = _FontMetrics
import java.awt.Container as Container
from builtins import type
import java.awt.image.VolatileImage as _VolatileImage
_VolatileImage = _VolatileImage
import java.awt.Shape as Shape
import com.badlogic.gdx.tools.flame.EditorPanel as _EditorPanel
_EditorPanel = _EditorPanel
import java.awt.Rectangle as Rectangle
import java.awt.event.ContainerListener as _ContainerListener
_ContainerListener = _ContainerListener
import java.awt.event.HierarchyListener as _HierarchyListener
_HierarchyListener = _HierarchyListener
import java.lang.String as _string
import javax.swing.InputVerifier as _InputVerifier
_InputVerifier = _InputVerifier
import java.awt.Insets as _Insets
_Insets = _Insets
import javax.swing.border.Border as _Border
_Border = _Border
import java.awt.event.ComponentListener as _ComponentListener
_ComponentListener = _ComponentListener
import javax.swing.ActionMap as ActionMap
import java.beans.VetoableChangeListener as VetoableChangeListener
import java.awt.event.ComponentListener as ComponentListener
import javax.swing.KeyStroke as KeyStroke
import java.beans.VetoableChangeListener as _VetoableChangeListener
_VetoableChangeListener = _VetoableChangeListener
from builtins import object
try:
    from pygdx.graphics.g3d.particles import influencers
except ImportError:
    influencers = _import_once("pygdx.graphics.g3d.particles.influencers")

import java.awt.event.KeyListener as _KeyListener
_KeyListener = _KeyListener
import java.awt.Component.BaselineResizeBehavior as BaselineResizeBehavior
import java.awt.Component as _Component_BaselineResizeBehavior
_BaselineResizeBehavior = _Component_BaselineResizeBehavior.BaselineResizeBehavior
import java.awt.Cursor as _Cursor
_Cursor = _Cursor
import java.awt.im.InputMethodRequests as InputMethodRequests
import java.lang.Long as _long
import javax.swing.JPanel as _JPanel
_JPanel = _JPanel
import java.awt.event.FocusListener as _FocusListener
_FocusListener = _FocusListener
import java.lang.Character as _char
import javax.swing.TransferHandler as TransferHandler
import java.awt.event.FocusEvent.Cause as Cause
import javax.swing.JComponent as JComponent
import javax.accessibility.AccessibleContext as _AccessibleContext
_AccessibleContext = _AccessibleContext
import java.awt.event.MouseWheelListener as MouseWheelListener
import java.util.Set as _Set
_Set = _Set
import java.awt.image.ColorModel as ColorModel
import java.lang.Boolean as _boolean
import java.awt.event.MouseMotionListener as MouseMotionListener
import java.util.EventListener as EventListener
import java.awt.Insets as Insets
import javax.swing.KeyStroke as _KeyStroke
_KeyStroke = _KeyStroke
import java.awt.GraphicsConfiguration as _GraphicsConfiguration
_GraphicsConfiguration = _GraphicsConfiguration
import java.awt.dnd.DropTarget as _DropTarget
_DropTarget = _DropTarget
from builtins import bool
import java.beans.PropertyChangeListener as _PropertyChangeListener
_PropertyChangeListener = _PropertyChangeListener
import java.awt.LayoutManager as _LayoutManager
_LayoutManager = _LayoutManager
import java.awt.PopupMenu as PopupMenu
import java.util.EventListener as _EventListener
_EventListener = _EventListener
import java.awt.im.InputContext as InputContext
import java.awt.Component as _Component
_Component = _Component
import java.awt.Font as Font
import java.awt.image.VolatileImage as VolatileImage
import java.awt.dnd.DropTarget as DropTarget
import java.lang.String as _String
_String = _String
import java.lang.Float as _float
import java.awt.Cursor as Cursor
import java.awt.event.MouseListener as _MouseListener
_MouseListener = _MouseListener
import java.awt.Toolkit as _Toolkit
_Toolkit = _Toolkit
import java.io.PrintStream as PrintStream
import javax.swing.JRootPane as _JRootPane
_JRootPane = _JRootPane
import java.awt.Dimension as _Dimension
_Dimension = _Dimension
import java.awt.event.ActionListener as ActionListener
import java.awt.event.MouseEvent as MouseEvent
import java.awt.Color as _Color
_Color = _Color
import javax.swing.JPopupMenu as _JPopupMenu
_JPopupMenu = _JPopupMenu
import javax.swing.InputMap as _InputMap
_InputMap = _InputMap
import java.awt.event.MouseListener as MouseListener
import java.lang.Class as _Class
_Class = _Class
import java.util.Locale as Locale
import java.lang.Double as _double
import javax.swing.plaf.PanelUI as PanelUI
import java.awt.Point as _Point
_Point = _Point
import java.lang.Object as _Object
_Object = _Object
import java.beans.PropertyChangeListener as PropertyChangeListener
import javax.swing.border.Border as Border
import javax.swing.JComponent as _JComponent
_JComponent = _JComponent
import javax.swing.InputVerifier as InputVerifier
import java.io.PrintWriter as PrintWriter
import java.awt.Point as Point
import javax.swing.event.AncestorListener as _AncestorListener
_AncestorListener = _AncestorListener
import java.lang.Short as _short
import java.awt.Toolkit as Toolkit
import java.awt.event.HierarchyBoundsListener as _HierarchyBoundsListener
_HierarchyBoundsListener = _HierarchyBoundsListener
import javax.swing.TransferHandler as _TransferHandler
_TransferHandler = _TransferHandler
import javax.swing.InputMap as InputMap
import java.awt.Rectangle as _Rectangle
_Rectangle = _Rectangle
import javax.swing.JRootPane as JRootPane
import java.awt.Event as Event
import java.awt.event.FocusListener as FocusListener
import java.awt.image.ImageObserver as ImageObserver
from builtins import str
from pyquantum_helper import override
import javax.swing.ActionMap as _ActionMap
_ActionMap = _ActionMap
import java.awt.FocusTraversalPolicy as FocusTraversalPolicy
import java.awt.event.MouseMotionListener as _MouseMotionListener
_MouseMotionListener = _MouseMotionListener
import java.awt.event.InputMethodListener as _InputMethodListener
_InputMethodListener = _InputMethodListener
import javax.swing.JPopupMenu as JPopupMenu
import java.util.Set as Set
import java.lang.Integer as _int
import java.awt.Image as _Image
_Image = _Image
import java.awt.FontMetrics as FontMetrics
import java.awt.Color as Color
import java.awt.Image as Image
import java.awt.Graphics as Graphics
import java.awt.ImageCapabilities as ImageCapabilities
import java.util.Locale as _Locale
_Locale = _Locale
 
class ScaleInfluencerPanel():
    """com.badlogic.gdx.tools.flame.ScaleInfluencerPanel"""
 
    @staticmethod
    def _wrap(java_value: _ScaleInfluencerPanel) -> 'ScaleInfluencerPanel':
        return ScaleInfluencerPanel(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _ScaleInfluencerPanel):
        """
        Dynamic initializer for ScaleInfluencerPanel.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_ScaleInfluencerPanel__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_ScaleInfluencerPanel__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def removeVetoableChangeListener(self, arg0: 'VetoableChangeListener'):
        """public synchronized void javax.swing.JComponent.removeVetoableChangeListener(java.beans.VetoableChangeListener)"""
        super(_JComponent, self).removeVetoableChangeListener(arg0)

    @override
    @overload
    def getComponents(self) -> List['Component']:
        """public java.awt.Component[] java.awt.Container.getComponents()"""
        return List['Component']._wrap(super(Container, self).getComponents())

    @override
    @overload
    def setDebugGraphicsOptions(self, arg0: int):
        """public void javax.swing.JComponent.setDebugGraphicsOptions(int)"""
        super(_JComponent, self).setDebugGraphicsOptions(_int.valueOf(arg0))

    @override
    @overload
    def isValid(self) -> bool:
        """public boolean java.awt.Component.isValid()"""
        return bool._wrap(super(Component, self).isValid())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def getDefaultLocale() -> 'Locale':
        """public static java.util.Locale javax.swing.JComponent.getDefaultLocale()"""
        return Locale._wrap(_JComponent.getDefaultLocale())

    @override
    @overload
    def getInputVerifier(self) -> 'InputVerifier':
        """public javax.swing.InputVerifier javax.swing.JComponent.getInputVerifier()"""
        return 'InputVerifier'._wrap(super(JComponent, self).getInputVerifier())

    @override
    @overload
    def list(self, arg0: 'PrintStream', arg1: int):
        """public void java.awt.Container.list(java.io.PrintStream,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @override
    @overload
    def setUI(self, arg0: 'PanelUI'):
        """public void javax.swing.JPanel.setUI(javax.swing.plaf.PanelUI)"""
        super(_JPanel, self).setUI(arg0)

    @override
    @overload
    def getFocusTraversalPolicy(self) -> 'FocusTraversalPolicy':
        """public java.awt.FocusTraversalPolicy java.awt.Container.getFocusTraversalPolicy()"""
        return 'FocusTraversalPolicy'._wrap(super(Container, self).getFocusTraversalPolicy())

    @override
    @overload
    def getParent(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getParent()"""
        return 'Container'._wrap(super(Component, self).getParent())

    @override
    @overload
    def paintImmediately(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.paintImmediately(java.awt.Rectangle)"""
        super(_JComponent, self).paintImmediately(arg0)

    @staticmethod
    @overload
    def setDefaultLocale(arg0: 'Locale'):
        """public static void javax.swing.JComponent.setDefaultLocale(java.util.Locale)"""
        _JComponent.setDefaultLocale(arg0)

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,float,float)"""
        super(_Component, self).firePropertyChange(arg0, _float.valueOf(arg1), _float.valueOf(arg2))

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object)"""
        super(_Container, self).add(arg0, arg1)

    @override
    @overload
    def getLocale(self) -> 'Locale':
        """public java.util.Locale java.awt.Component.getLocale()"""
        return 'Locale'._wrap(super(Component, self).getLocale())

    @override
    @overload
    def setInheritsPopupMenu(self, arg0: bool):
        """public void javax.swing.JComponent.setInheritsPopupMenu(boolean)"""
        super(_JComponent, self).setInheritsPopupMenu(_boolean.valueOf(arg0))

    @override
    @overload
    def getHierarchyListeners(self) -> List['HierarchyListener']:
        """public synchronized java.awt.event.HierarchyListener[] java.awt.Component.getHierarchyListeners()"""
        return List['HierarchyListener']._wrap(super(Component, self).getHierarchyListeners())

    @override
    @overload
    def nextFocus(self):
        """public void java.awt.Component.nextFocus()"""
        super(Component, self).nextFocus()

    @override
    @overload
    def isPaintingTile(self) -> bool:
        """public boolean javax.swing.JComponent.isPaintingTile()"""
        return bool._wrap(super(JComponent, self).isPaintingTile())

    @override
    @overload
    def getContentPanel(self) -> 'JPanel':
        """public javax.swing.JPanel com.badlogic.gdx.tools.flame.EditorPanel.getContentPanel()"""
        return 'JPanel'._wrap(super(EditorPanel, self).getContentPanel())

    @override
    @overload
    def isDisplayable(self) -> bool:
        """public boolean java.awt.Component.isDisplayable()"""
        return bool._wrap(super(Component, self).isDisplayable())

    @override
    @overload
    def getBounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.getBounds()"""
        return 'Rectangle'._wrap(super(Component, self).getBounds())

    @override
    @overload
    def removeMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.removeMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).removeMouseMotionListener(arg0)

    @override
    @overload
    def isShowing(self) -> bool:
        """public boolean java.awt.Component.isShowing()"""
        return bool._wrap(super(Component, self).isShowing())

    @override
    @overload
    def getDropTarget(self) -> 'DropTarget':
        """public synchronized java.awt.dnd.DropTarget java.awt.Component.getDropTarget()"""
        return 'DropTarget'._wrap(super(Component, self).getDropTarget())

    @override
    @overload
    def isFontSet(self) -> bool:
        """public boolean java.awt.Component.isFontSet()"""
        return bool._wrap(super(Component, self).isFontSet())

    @overload
    def mouseUp(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseUp(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseUp(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def setIgnoreRepaint(self, arg0: bool):
        """public void java.awt.Component.setIgnoreRepaint(boolean)"""
        super(_Component, self).setIgnoreRepaint(_boolean.valueOf(arg0))

    @override
    @overload
    def getPropertyChangeListeners(self) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners()"""
        return List['PropertyChangeListener']._wrap(super(Component, self).getPropertyChangeListeners())

    @override
    @overload
    def isBackgroundSet(self) -> bool:
        """public boolean java.awt.Component.isBackgroundSet()"""
        return bool._wrap(super(Component, self).isBackgroundSet())

    @override
    @overload
    def getLocation(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocation()"""
        return 'Point'._wrap(super(Component, self).getLocation())

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int._wrap(super(object, self).hashCode())

    @override
    @overload
    def location(self) -> 'Point':
        """public java.awt.Point java.awt.Component.location()"""
        return 'Point'._wrap(super(Component, self).location())

    @override
    @overload
    def getComponentOrientation(self) -> 'ComponentOrientation':
        """public java.awt.ComponentOrientation java.awt.Component.getComponentOrientation()"""
        return 'ComponentOrientation'._wrap(super(Component, self).getComponentOrientation())

    @override
    @overload
    def addHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.addHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).addHierarchyListener(arg0)

    @override
    @overload
    def getInheritsPopupMenu(self) -> bool:
        """public boolean javax.swing.JComponent.getInheritsPopupMenu()"""
        return bool._wrap(super(JComponent, self).getInheritsPopupMenu())

    @override
    @overload
    def setComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Component.setComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Component, self).setComponentOrientation(arg0)

    @override
    @overload
    def getFocusCycleRootAncestor(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getFocusCycleRootAncestor()"""
        return 'Container'._wrap(super(Component, self).getFocusCycleRootAncestor())

    @override
    @overload
    def show(self, arg0: bool):
        """public void java.awt.Component.show(boolean)"""
        super(_Component, self).show(_boolean.valueOf(arg0))

    @staticmethod
    @overload
    def addContent(arg0: 'JPanel', arg1: int, arg2: int, arg3: 'JComponent', arg4: bool, arg5: int, arg6: int, arg7: float, arg8: float):
        """public static void com.badlogic.gdx.tools.flame.EditorPanel.addContent(javax.swing.JPanel,int,int,javax.swing.JComponent,boolean,int,int,float,float)"""
        _EditorPanel.addContent(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3, _boolean.valueOf(arg4), _int.valueOf(arg5), _int.valueOf(arg6), _float.valueOf(arg7), _float.valueOf(arg8))

    @override
    @overload
    def grabFocus(self):
        """public void javax.swing.JComponent.grabFocus()"""
        super(JComponent, self).grabFocus()

    @overload
    def locate(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.locate(int,int)"""
        return 'Component'._wrap(super(_Container, self).locate(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def isPaintingForPrint(self) -> bool:
        """public final boolean javax.swing.JComponent.isPaintingForPrint()"""
        return bool._wrap(super(JComponent, self).isPaintingForPrint())

    @overload
    def keyDown(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyDown(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyDown(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,int,int)"""
        super(_JComponent, self).firePropertyChange(arg0, _int.valueOf(arg1), _int.valueOf(arg2))

    @override
    @overload
    def getLayout(self) -> 'LayoutManager':
        """public java.awt.LayoutManager java.awt.Container.getLayout()"""
        return 'LayoutManager'._wrap(super(Container, self).getLayout())

    @override
    @overload
    def preferredSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.preferredSize()"""
        return 'Dimension'._wrap(super(Container, self).preferredSize())

    @override
    @overload
    def addNotify(self):
        """public void javax.swing.JComponent.addNotify()"""
        super(JComponent, self).addNotify()

    @override
    @overload
    def setSize(self, arg0: int, arg1: int):
        """public void java.awt.Component.setSize(int,int)"""
        super(_Component, self).setSize(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.repaint(int,int,int,int)"""
        super(_Component, self).repaint(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @overload
    def requestFocusInWindow(self, arg0: 'Cause') -> bool:
        """public boolean java.awt.Component.requestFocusInWindow(java.awt.event.FocusEvent$Cause)"""
        return bool._wrap(super(_Component, self).requestFocusInWindow(arg0))

    @override
    @overload
    def remove(self, arg0: int):
        """public void java.awt.Container.remove(int)"""
        super(_Container, self).remove(_int.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,long,long)"""
        super(_Component, self).firePropertyChange(arg0, _long.valueOf(arg1), _long.valueOf(arg2))

    @override
    @overload
    def update(self, arg0: 'FlameMain'):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.update(com.badlogic.gdx.tools.flame.FlameMain)"""
        super(_EditorPanel, self).update(arg0)

    @override
    @overload
    def setFocusCycleRoot(self, arg0: bool):
        """public void java.awt.Container.setFocusCycleRoot(boolean)"""
        super(_Container, self).setFocusCycleRoot(_boolean.valueOf(arg0))

    @overload
    def keyUp(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyUp(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyUp(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def setBackground(self, arg0: 'Color'):
        """public void javax.swing.JComponent.setBackground(java.awt.Color)"""
        super(_JComponent, self).setBackground(arg0)

    @override
    @overload
    def doLayout(self):
        """public void java.awt.Container.doLayout()"""
        super(Container, self).doLayout()

    @override
    @overload
    def enable(self):
        """public void javax.swing.JComponent.enable()"""
        super(JComponent, self).enable()

    @override
    @overload
    def getInsets(self) -> 'Insets':
        """public java.awt.Insets javax.swing.JComponent.getInsets()"""
        return 'Insets'._wrap(super(JComponent, self).getInsets())

    @override
    @overload
    def setNextFocusableComponent(self, arg0: 'Component'):
        """public void javax.swing.JComponent.setNextFocusableComponent(java.awt.Component)"""
        super(_JComponent, self).setNextFocusableComponent(arg0)

    @override
    @overload
    def getAlignmentY(self) -> float:
        """public float javax.swing.JComponent.getAlignmentY()"""
        return float._wrap(super(JComponent, self).getAlignmentY())

    @overload
    def checkImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @override
    @overload
    def getFocusTraversalKeysEnabled(self) -> bool:
        """public boolean java.awt.Component.getFocusTraversalKeysEnabled()"""
        return bool._wrap(super(Component, self).getFocusTraversalKeysEnabled())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getRootPane(self) -> 'JRootPane':
        """public javax.swing.JRootPane javax.swing.JComponent.getRootPane()"""
        return 'JRootPane'._wrap(super(JComponent, self).getRootPane())

    @override
    @overload
    def invalidate(self):
        """public void java.awt.Container.invalidate()"""
        super(Container, self).invalidate()

    @override
    @overload
    def resetKeyboardActions(self):
        """public void javax.swing.JComponent.resetKeyboardActions()"""
        super(JComponent, self).resetKeyboardActions()

    @overload
    def getComponent(self, arg0: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponent(int)"""
        return 'Component'._wrap(super(_Container, self).getComponent(_int.valueOf(arg0)))

    @override
    @overload
    def setName(self, arg0: str):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setName(java.lang.String)"""
        super(_EditorPanel, self).setName(arg0)

    @override
    @overload
    def addPropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Container.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Container, self).addPropertyChangeListener(arg0, arg1)

    @override
    @overload
    def setInputMap(self, arg0: int, arg1: 'InputMap'):
        """public final void javax.swing.JComponent.setInputMap(int,javax.swing.InputMap)"""
        super(_JComponent, self).setInputMap(_int.valueOf(arg0), arg1)

    @override
    @overload
    def removePropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0)

    @override
    @overload
    def applyComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Container.applyComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Container, self).applyComponentOrientation(arg0)

    @override
    @overload
    def setBorder(self, arg0: 'Border'):
        """public void javax.swing.JComponent.setBorder(javax.swing.border.Border)"""
        super(_JComponent, self).setBorder(arg0)

    @override
    @overload
    def remove(self, arg0: 'MenuComponent'):
        """public void java.awt.Component.remove(java.awt.MenuComponent)"""
        super(_Component, self).remove(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintStream'):
        """public void java.awt.Component.list(java.io.PrintStream)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def removeMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.removeMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).removeMouseListener(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintWriter'):
        """public void java.awt.Component.list(java.io.PrintWriter)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def getKeyListeners(self) -> List['KeyListener']:
        """public synchronized java.awt.event.KeyListener[] java.awt.Component.getKeyListeners()"""
        return List['KeyListener']._wrap(super(Component, self).getKeyListeners())

    @override
    @overload
    def getInputContext(self) -> 'InputContext':
        """public java.awt.im.InputContext java.awt.Component.getInputContext()"""
        return 'InputContext'._wrap(super(Component, self).getInputContext())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,double,double)"""
        super(_Component, self).firePropertyChange(arg0, _double.valueOf(arg1), _double.valueOf(arg2))

    @override
    @overload
    def removeAncestorListener(self, arg0: 'AncestorListener'):
        """public void javax.swing.JComponent.removeAncestorListener(javax.swing.event.AncestorListener)"""
        super(_JComponent, self).removeAncestorListener(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintWriter', arg1: int):
        """public void java.awt.Container.list(java.io.PrintWriter,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @overload
    def checkImage(self, arg0: 'Image', arg1: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, arg1))

    @override
    @overload
    def removeFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.removeFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).removeFocusListener(arg0)

    @overload
    def mouseDown(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDown(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDown(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def setIsAlwayShown(self, arg0: bool):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setIsAlwayShown(boolean)"""
        super(_EditorPanel, self).setIsAlwayShown(_boolean.valueOf(arg0))

    @overload
    def getConditionForKeyStroke(self, arg0: 'KeyStroke') -> int:
        """public int javax.swing.JComponent.getConditionForKeyStroke(javax.swing.KeyStroke)"""
        return int._wrap(super(_JComponent, self).getConditionForKeyStroke(arg0))

    @override
    @overload
    def getTreeLock(self) -> object:
        """public final java.lang.Object java.awt.Component.getTreeLock()"""
        return object._wrap(super(Component, self).getTreeLock())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @override
    @overload
    def addVetoableChangeListener(self, arg0: 'VetoableChangeListener'):
        """public synchronized void javax.swing.JComponent.addVetoableChangeListener(java.beans.VetoableChangeListener)"""
        super(_JComponent, self).addVetoableChangeListener(arg0)

    @overload
    def contains(self, arg0: 'Point') -> bool:
        """public boolean java.awt.Component.contains(java.awt.Point)"""
        return bool._wrap(super(_Component, self).contains(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,short,short)"""
        super(_Component, self).firePropertyChange(arg0, _short.valueOf(arg1), _short.valueOf(arg2))

    @override
    @overload
    def dispatchEvent(self, arg0: 'AWTEvent'):
        """public final void java.awt.Component.dispatchEvent(java.awt.AWTEvent)"""
        super(_Component, self).dispatchEvent(arg0)

    @override
    @overload
    def removeContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.removeContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).removeContainerListener(arg0)

    @override
    @overload
    def getGraphicsConfiguration(self) -> 'GraphicsConfiguration':
        """public java.awt.GraphicsConfiguration java.awt.Component.getGraphicsConfiguration()"""
        return 'GraphicsConfiguration'._wrap(super(Component, self).getGraphicsConfiguration())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: bool, arg2: bool):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,boolean,boolean)"""
        super(_JComponent, self).firePropertyChange(arg0, _boolean.valueOf(arg1), _boolean.valueOf(arg2))

    @overload
    def setValue(self, arg0: 'ScaleInfluencer'):
        """public void com.badlogic.gdx.tools.flame.ScaleInfluencerPanel.setValue(com.badlogic.gdx.graphics.g3d.particles.influencers.ScaleInfluencer)"""
        super(_ScaleInfluencerPanel, self).setValue(arg0)

    @override
    @overload
    def registerKeyboardAction(self, arg0: 'ActionListener', arg1: str, arg2: 'KeyStroke', arg3: int):
        """public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,java.lang.String,javax.swing.KeyStroke,int)"""
        super(_JComponent, self).registerKeyboardAction(arg0, arg1, arg2, _int.valueOf(arg3))

    @overload
    def findComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(arg0))

    @override
    @overload
    def resize(self, arg0: int, arg1: int):
        """public void java.awt.Component.resize(int,int)"""
        super(_Component, self).resize(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getHeight(self) -> int:
        """public int javax.swing.JComponent.getHeight()"""
        return int._wrap(super(JComponent, self).getHeight())

    @override
    @overload
    def getTransferHandler(self) -> 'TransferHandler':
        """public javax.swing.TransferHandler javax.swing.JComponent.getTransferHandler()"""
        return 'TransferHandler'._wrap(super(JComponent, self).getTransferHandler())

    @overload
    def imageUpdate(self, arg0: 'Image', arg1: int, arg2: int, arg3: int, arg4: int, arg5: int) -> bool:
        """public boolean java.awt.Component.imageUpdate(java.awt.Image,int,int,int,int,int)"""
        return bool._wrap(super(_Component, self).imageUpdate(arg0, _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4), _int.valueOf(arg5)))

    @override
    @overload
    def getWidth(self) -> int:
        """public int javax.swing.JComponent.getWidth()"""
        return int._wrap(super(JComponent, self).getWidth())

    @override
    @overload
    def transferFocusBackward(self):
        """public void java.awt.Component.transferFocusBackward()"""
        super(Component, self).transferFocusBackward()

    @overload
    def getPropertyChangeListeners(self, arg0: str) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners(java.lang.String)"""
        return List['PropertyChangeListener']._wrap(super(_Component, self).getPropertyChangeListeners(arg0))

    @override
    @overload
    def getName(self) -> str:
        """public java.lang.String com.badlogic.gdx.tools.flame.EditorPanel.getName()"""
        return str._wrap(super(EditorPanel, self).getName())

    @staticmethod
    @overload
    def isLightweightComponent(arg0: 'Component') -> bool:
        """public static boolean javax.swing.JComponent.isLightweightComponent(java.awt.Component)"""
        return bool._wrap(_JComponent.isLightweightComponent(arg0))

    @override
    @overload
    def getBorder(self) -> 'Border':
        """public javax.swing.border.Border javax.swing.JComponent.getBorder()"""
        return 'Border'._wrap(super(JComponent, self).getBorder())

    @override
    @overload
    def printAll(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.printAll(java.awt.Graphics)"""
        super(_JComponent, self).printAll(arg0)

    @override
    @overload
    def addComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.addComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).addComponentListener(arg0)

    @override
    @overload
    def getBaselineResizeBehavior(self) -> 'BaselineResizeBehavior.Component$BaselineResizeBehavior':
        """public java.awt.Component$BaselineResizeBehavior javax.swing.JComponent.getBaselineResizeBehavior()"""
        return 'BaselineResizeBehavior.Component$BaselineResizeBehavior'._wrap(super(JComponent, self).getBaselineResizeBehavior())

    @override
    @overload
    def print(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.print(java.awt.Graphics)"""
        super(_JComponent, self).print(arg0)

    @override
    @overload
    def setInputVerifier(self, arg0: 'InputVerifier'):
        """public void javax.swing.JComponent.setInputVerifier(javax.swing.InputVerifier)"""
        super(_JComponent, self).setInputVerifier(arg0)

    @override
    @overload
    def addAncestorListener(self, arg0: 'AncestorListener'):
        """public void javax.swing.JComponent.addAncestorListener(javax.swing.event.AncestorListener)"""
        super(_JComponent, self).addAncestorListener(arg0)

    @override
    @overload
    def getFont(self) -> 'Font':
        """public java.awt.Font java.awt.Component.getFont()"""
        return 'Font'._wrap(super(Component, self).getFont())

    @override
    @overload
    def setFont(self, arg0: 'Font'):
        """public void javax.swing.JComponent.setFont(java.awt.Font)"""
        super(_JComponent, self).setFont(arg0)

    @override
    @overload
    def isOptimizedDrawingEnabled(self) -> bool:
        """public boolean javax.swing.JComponent.isOptimizedDrawingEnabled()"""
        return bool._wrap(super(JComponent, self).isOptimizedDrawingEnabled())

    @override
    @overload
    def isValidateRoot(self) -> bool:
        """public boolean javax.swing.JComponent.isValidateRoot()"""
        return bool._wrap(super(JComponent, self).isValidateRoot())

    @overload
    def prepareImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @override
    @overload
    def setHasAdvanced(self, arg0: bool):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setHasAdvanced(boolean)"""
        super(_EditorPanel, self).setHasAdvanced(_boolean.valueOf(arg0))

    @override
    @overload
    def setForeground(self, arg0: 'Color'):
        """public void javax.swing.JComponent.setForeground(java.awt.Color)"""
        super(_JComponent, self).setForeground(arg0)

    @overload
    def mouseDrag(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDrag(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDrag(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def isOpaque(self) -> bool:
        """public boolean javax.swing.JComponent.isOpaque()"""
        return bool._wrap(super(JComponent, self).isOpaque())

    @overload
    def createVolatileImage(self, arg0: int, arg1: int, arg2: 'ImageCapabilities') -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int,java.awt.ImageCapabilities) throws java.awt.AWTException"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1), arg2))

    @override
    @overload
    def bounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.bounds()"""
        return 'Rectangle'._wrap(super(Component, self).bounds())

    @override
    @overload
    def update(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.update(java.awt.Graphics)"""
        super(_JComponent, self).update(arg0)

    @override
    @overload
    def add(self, arg0: 'PopupMenu'):
        """public void java.awt.Component.add(java.awt.PopupMenu)"""
        super(_Component, self).add(arg0)

    @override
    @overload
    def getToolTipText(self) -> str:
        """public java.lang.String javax.swing.JComponent.getToolTipText()"""
        return str._wrap(super(JComponent, self).getToolTipText())

    @override
    @overload
    def isVisible(self) -> bool:
        """public boolean java.awt.Component.isVisible()"""
        return bool._wrap(super(Component, self).isVisible())

    @override
    @overload
    def setDropTarget(self, arg0: 'DropTarget'):
        """public synchronized void java.awt.Component.setDropTarget(java.awt.dnd.DropTarget)"""
        super(_Component, self).setDropTarget(arg0)

    @override
    @overload
    def getLocationOnScreen(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocationOnScreen()"""
        return 'Point'._wrap(super(Component, self).getLocationOnScreen())

    @override
    @overload
    def getY(self) -> int:
        """public int javax.swing.JComponent.getY()"""
        return int._wrap(super(JComponent, self).getY())

    @overload
    def getComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def isMaximumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMaximumSizeSet()"""
        return bool._wrap(super(Component, self).isMaximumSizeSet())

    @override
    @overload
    def setAlignmentY(self, arg0: float):
        """public void javax.swing.JComponent.setAlignmentY(float)"""
        super(_JComponent, self).setAlignmentY(_float.valueOf(arg0))

    @override
    @overload
    def getRegisteredKeyStrokes(self) -> List['KeyStroke']:
        """public javax.swing.KeyStroke[] javax.swing.JComponent.getRegisteredKeyStrokes()"""
        return List['KeyStroke']._wrap(super(JComponent, self).getRegisteredKeyStrokes())

    @override
    @overload
    def isFocusable(self) -> bool:
        """public boolean java.awt.Component.isFocusable()"""
        return bool._wrap(super(Component, self).isFocusable())

    @override
    @overload
    def isFocusTraversalPolicyProvider(self) -> bool:
        """public final boolean java.awt.Container.isFocusTraversalPolicyProvider()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicyProvider())

    @override
    @overload
    def getMouseListeners(self) -> List['MouseListener']:
        """public synchronized java.awt.event.MouseListener[] java.awt.Component.getMouseListeners()"""
        return List['MouseListener']._wrap(super(Component, self).getMouseListeners())

    @override
    @overload
    def registerKeyboardAction(self, arg0: 'ActionListener', arg1: 'KeyStroke', arg2: int):
        """public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,javax.swing.KeyStroke,int)"""
        super(_JComponent, self).registerKeyboardAction(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def transferFocusUpCycle(self):
        """public void java.awt.Component.transferFocusUpCycle()"""
        super(Component, self).transferFocusUpCycle()

    @override
    @overload
    def removeKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.removeKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).removeKeyListener(arg0)

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: str, arg2: str):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,char,char)"""
        super(_JComponent, self).firePropertyChange(arg0, _char.valueOf(arg1), _char.valueOf(arg2))

    @override
    @overload
    def getMouseMotionListeners(self) -> List['MouseMotionListener']:
        """public synchronized java.awt.event.MouseMotionListener[] java.awt.Component.getMouseMotionListeners()"""
        return List['MouseMotionListener']._wrap(super(Component, self).getMouseMotionListeners())

    @override
    @overload
    def getAutoscrolls(self) -> bool:
        """public boolean javax.swing.JComponent.getAutoscrolls()"""
        return bool._wrap(super(JComponent, self).getAutoscrolls())

    @override
    @overload
    def addContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.addContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).addContainerListener(arg0)

    @override
    @overload
    def isFocusTraversable(self) -> bool:
        """public boolean java.awt.Component.isFocusTraversable()"""
        return bool._wrap(super(Component, self).isFocusTraversable())

    @overload
    def mouseExit(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseExit(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseExit(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getBounds(self, arg0: 'Rectangle') -> 'Rectangle':
        """public java.awt.Rectangle javax.swing.JComponent.getBounds(java.awt.Rectangle)"""
        return 'Rectangle'._wrap(super(_JComponent, self).getBounds(arg0))

    @override
    @overload
    def setToolTipText(self, arg0: str):
        """public void javax.swing.JComponent.setToolTipText(java.lang.String)"""
        super(_JComponent, self).setToolTipText(arg0)

    @override
    @overload
    def setAutoscrolls(self, arg0: bool):
        """public void javax.swing.JComponent.setAutoscrolls(boolean)"""
        super(_JComponent, self).setAutoscrolls(_boolean.valueOf(arg0))

    @override
    @overload
    def setComponentPopupMenu(self, arg0: 'JPopupMenu'):
        """public void javax.swing.JComponent.setComponentPopupMenu(javax.swing.JPopupMenu)"""
        super(_JComponent, self).setComponentPopupMenu(arg0)

    @override
    @overload
    def setMixingCutoutShape(self, arg0: 'Shape'):
        """public void java.awt.Component.setMixingCutoutShape(java.awt.Shape)"""
        super(_Component, self).setMixingCutoutShape(arg0)

    @override
    @overload
    def getVisibleRect(self) -> 'Rectangle':
        """public java.awt.Rectangle javax.swing.JComponent.getVisibleRect()"""
        return 'Rectangle'._wrap(super(JComponent, self).getVisibleRect())

    @override
    @overload
    def requestFocus(self, arg0: 'Cause'):
        """public void java.awt.Component.requestFocus(java.awt.event.FocusEvent$Cause)"""
        super(_Component, self).requestFocus(arg0)

    @overload
    def createImage(self, arg0: int, arg1: int) -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(int,int)"""
        return 'Image'._wrap(super(_Component, self).createImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def putClientProperty(self, arg0: object, arg1: object):
        """public final void javax.swing.JComponent.putClientProperty(java.lang.Object,java.lang.Object)"""
        super(_JComponent, self).putClientProperty(arg0, arg1)

    @override
    @overload
    def getVetoableChangeListeners(self) -> List['VetoableChangeListener']:
        """public synchronized java.beans.VetoableChangeListener[] javax.swing.JComponent.getVetoableChangeListeners()"""
        return List['VetoableChangeListener']._wrap(super(JComponent, self).getVetoableChangeListeners())

    @override
    @overload
    def scrollRectToVisible(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.scrollRectToVisible(java.awt.Rectangle)"""
        super(_JComponent, self).scrollRectToVisible(arg0)

    @override
    @overload
    def getTopLevelAncestor(self) -> 'Container':
        """public java.awt.Container javax.swing.JComponent.getTopLevelAncestor()"""
        return 'Container'._wrap(super(JComponent, self).getTopLevelAncestor())

    @override
    @overload
    def isRequestFocusEnabled(self) -> bool:
        """public boolean javax.swing.JComponent.isRequestFocusEnabled()"""
        return bool._wrap(super(JComponent, self).isRequestFocusEnabled())

    @override
    @overload
    def getFocusListeners(self) -> List['FocusListener']:
        """public synchronized java.awt.event.FocusListener[] java.awt.Component.getFocusListeners()"""
        return List['FocusListener']._wrap(super(Component, self).getFocusListeners())

    @override
    @overload
    def setLayout(self, arg0: 'LayoutManager'):
        """public void java.awt.Container.setLayout(java.awt.LayoutManager)"""
        super(_Container, self).setLayout(arg0)

    @overload
    def add(self, arg0: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0))

    @override
    @overload
    def getMouseWheelListeners(self) -> List['MouseWheelListener']:
        """public synchronized java.awt.event.MouseWheelListener[] java.awt.Component.getMouseWheelListeners()"""
        return List['MouseWheelListener']._wrap(super(Component, self).getMouseWheelListeners())

    @override
    @overload
    def reshape(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void javax.swing.JComponent.reshape(int,int,int,int)"""
        super(_JComponent, self).reshape(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def setTransferHandler(self, arg0: 'TransferHandler'):
        """public void javax.swing.JComponent.setTransferHandler(javax.swing.TransferHandler)"""
        super(_JComponent, self).setTransferHandler(arg0)

    @override
    @overload
    def getPreferredSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getPreferredSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getPreferredSize())

    @override
    @overload
    def setLocation(self, arg0: int, arg1: int):
        """public void java.awt.Component.setLocation(int,int)"""
        super(_Component, self).setLocation(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def removeInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.removeInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).removeInputMethodListener(arg0)

    @override
    @overload
    def setFocusable(self, arg0: bool):
        """public void java.awt.Component.setFocusable(boolean)"""
        super(_Component, self).setFocusable(_boolean.valueOf(arg0))

    @override
    @overload
    def paintComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.paintComponents(java.awt.Graphics)"""
        super(_Container, self).paintComponents(arg0)

    @override
    @overload
    def addFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.addFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).addFocusListener(arg0)

    @overload
    def __init__(self, arg0: 'FlameMain', arg1: 'ScaleInfluencer'):
        """public com.badlogic.gdx.tools.flame.ScaleInfluencerPanel(com.badlogic.gdx.tools.flame.FlameMain,com.badlogic.gdx.graphics.g3d.particles.influencers.ScaleInfluencer)"""
        val = _ScaleInfluencerPanel(arg0, arg1)
        self.__wrapper = val

    @overload
    def prepareImage(self, arg0: 'Image', arg1: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, arg1))

    @override
    @overload
    def addKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.addKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).addKeyListener(arg0)

    @override
    @overload
    def resize(self, arg0: 'Dimension'):
        """public void java.awt.Component.resize(java.awt.Dimension)"""
        super(_Component, self).resize(arg0)

    @override
    @overload
    def setComponentZOrder(self, arg0: 'Component', arg1: int):
        """public void java.awt.Container.setComponentZOrder(java.awt.Component,int)"""
        super(_Container, self).setComponentZOrder(arg0, _int.valueOf(arg1))

    @override
    @overload
    def list(self):
        """public void java.awt.Component.list()"""
        super(Component, self).list()

    @overload
    def add(self, arg0: str, arg1: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.lang.String,java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, arg1))

    @override
    @overload
    def paintImmediately(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void javax.swing.JComponent.paintImmediately(int,int,int,int)"""
        super(_JComponent, self).paintImmediately(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def getMinimumSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getMinimumSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getMinimumSize())

    @override
    @overload
    def setEnabled(self, arg0: bool):
        """public void javax.swing.JComponent.setEnabled(boolean)"""
        super(_JComponent, self).setEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def hasFocus(self) -> bool:
        """public boolean java.awt.Component.hasFocus()"""
        return bool._wrap(super(Component, self).hasFocus())

    @overload
    def createVolatileImage(self, arg0: int, arg1: int) -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int)"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.removeHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).removeHierarchyListener(arg0)

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.awt.Component.toString()"""
        return str._wrap(super(Component, self).toString())

    @override
    @overload
    def addMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.addMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).addMouseListener(arg0)

    @override
    @overload
    def isFocusOwner(self) -> bool:
        """public boolean java.awt.Component.isFocusOwner()"""
        return bool._wrap(super(Component, self).isFocusOwner())

    @override
    @overload
    def getAccessibleContext(self) -> 'AccessibleContext':
        """public javax.accessibility.AccessibleContext javax.swing.JPanel.getAccessibleContext()"""
        return 'AccessibleContext'._wrap(super(JPanel, self).getAccessibleContext())

    @overload
    def postEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.postEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).postEvent(arg0))

    @overload
    def getLocation(self, arg0: 'Point') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getLocation(java.awt.Point)"""
        return 'Point'._wrap(super(_JComponent, self).getLocation(arg0))

    @overload
    def getBaseline(self, arg0: int, arg1: int) -> int:
        """public int javax.swing.JComponent.getBaseline(int,int)"""
        return int._wrap(super(_JComponent, self).getBaseline(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def findComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeNotify(self):
        """public void javax.swing.JComponent.removeNotify()"""
        super(JComponent, self).removeNotify()

    @override
    @overload
    def getForeground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getForeground()"""
        return 'Color'._wrap(super(Component, self).getForeground())

    @override
    @overload
    def show(self):
        """public void java.awt.Component.show()"""
        super(Component, self).show()

    @override
    @overload
    def isDoubleBuffered(self) -> bool:
        """public boolean javax.swing.JComponent.isDoubleBuffered()"""
        return bool._wrap(super(JComponent, self).isDoubleBuffered())

    @override
    @overload
    def setDescription(self, arg0: str):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setDescription(java.lang.String)"""
        super(_EditorPanel, self).setDescription(arg0)

    @override
    @overload
    def isFocusCycleRoot(self) -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot()"""
        return bool._wrap(super(Container, self).isFocusCycleRoot())

    @override
    @overload
    def addMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.addMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).addMouseWheelListener(arg0)

    @override
    @overload
    def hide(self):
        """public void javax.swing.JComponent.hide()"""
        super(JComponent, self).hide()

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def revalidate(self):
        """public void javax.swing.JComponent.revalidate()"""
        super(JComponent, self).revalidate()

    @override
    @overload
    def getActionMap(self) -> 'ActionMap':
        """public final javax.swing.ActionMap javax.swing.JComponent.getActionMap()"""
        return 'ActionMap'._wrap(super(JComponent, self).getActionMap())

    @override
    @overload
    def requestFocusInWindow(self) -> bool:
        """public boolean javax.swing.JComponent.requestFocusInWindow()"""
        return bool._wrap(super(JComponent, self).requestFocusInWindow())

    @overload
    def action(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.action(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).action(arg0, arg1))

    @override
    @overload
    def isManagingFocus(self) -> bool:
        """public boolean javax.swing.JComponent.isManagingFocus()"""
        return bool._wrap(super(JComponent, self).isManagingFocus())

    @override
    @overload
    def isLightweight(self) -> bool:
        """public boolean java.awt.Component.isLightweight()"""
        return bool._wrap(super(Component, self).isLightweight())

    @override
    @overload
    def setAlignmentX(self, arg0: float):
        """public void javax.swing.JComponent.setAlignmentX(float)"""
        super(_JComponent, self).setAlignmentX(_float.valueOf(arg0))

    @overload
    def getFocusTraversalKeys(self, arg0: int) -> 'Set':
        """public java.util.Set<java.awt.AWTKeyStroke> java.awt.Container.getFocusTraversalKeys(int)"""
        return 'Set'._wrap(super(_Container, self).getFocusTraversalKeys(_int.valueOf(arg0)))

    @override
    @overload
    def setFocusTraversalKeysEnabled(self, arg0: bool):
        """public void java.awt.Component.setFocusTraversalKeysEnabled(boolean)"""
        super(_Component, self).setFocusTraversalKeysEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def remove(self, arg0: 'Component'):
        """public void java.awt.Container.remove(java.awt.Component)"""
        super(_Container, self).remove(arg0)

    @overload
    def getInsets(self, arg0: 'Insets') -> 'Insets':
        """public java.awt.Insets javax.swing.JComponent.getInsets(java.awt.Insets)"""
        return 'Insets'._wrap(super(_JComponent, self).getInsets(arg0))

    @override
    @overload
    def insets(self) -> 'Insets':
        """public java.awt.Insets java.awt.Container.insets()"""
        return 'Insets'._wrap(super(Container, self).insets())

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int):
        """public void javax.swing.JComponent.repaint(long,int,int,int,int)"""
        super(_JComponent, self).repaint(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4))

    @override
    @overload
    def setFocusTraversalPolicy(self, arg0: 'FocusTraversalPolicy'):
        """public void java.awt.Container.setFocusTraversalPolicy(java.awt.FocusTraversalPolicy)"""
        super(_Container, self).setFocusTraversalPolicy(arg0)

    @overload
    def getSize(self, arg0: 'Dimension') -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getSize(java.awt.Dimension)"""
        return 'Dimension'._wrap(super(_JComponent, self).getSize(arg0))

    @override
    @overload
    def enable(self, arg0: bool):
        """public void java.awt.Component.enable(boolean)"""
        super(_Component, self).enable(_boolean.valueOf(arg0))

    @overload
    def getToolTipLocation(self, arg0: 'MouseEvent') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getToolTipLocation(java.awt.event.MouseEvent)"""
        return 'Point'._wrap(super(_JComponent, self).getToolTipLocation(arg0))

    @override
    @overload
    def addPropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Container.addPropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Container, self).addPropertyChangeListener(arg0)

    @overload
    def getComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(arg0))

    @override
    @overload
    def size(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.size()"""
        return 'Dimension'._wrap(super(Component, self).size())

    @override
    @overload
    def getVerifyInputWhenFocusTarget(self) -> bool:
        """public boolean javax.swing.JComponent.getVerifyInputWhenFocusTarget()"""
        return bool._wrap(super(JComponent, self).getVerifyInputWhenFocusTarget())

    @overload
    def mouseMove(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseMove(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseMove(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getActionForKeyStroke(self, arg0: 'KeyStroke') -> 'ActionListener':
        """public java.awt.event.ActionListener javax.swing.JComponent.getActionForKeyStroke(javax.swing.KeyStroke)"""
        return 'ActionListener'._wrap(super(_JComponent, self).getActionForKeyStroke(arg0))

    @overload
    def lostFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.lostFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).lostFocus(arg0, arg1))

    @override
    @overload
    def isMinimumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMinimumSizeSet()"""
        return bool._wrap(super(Component, self).isMinimumSizeSet())

    @override
    @overload
    def isForegroundSet(self) -> bool:
        """public boolean java.awt.Component.isForegroundSet()"""
        return bool._wrap(super(Component, self).isForegroundSet())

    @overload
    def getMousePosition(self, arg0: bool) -> 'Point':
        """public java.awt.Point java.awt.Container.getMousePosition(boolean) throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(_Container, self).getMousePosition(_boolean.valueOf(arg0)))

    @overload
    def getFontMetrics(self, arg0: 'Font') -> 'FontMetrics':
        """public java.awt.FontMetrics javax.swing.JComponent.getFontMetrics(java.awt.Font)"""
        return 'FontMetrics'._wrap(super(_JComponent, self).getFontMetrics(arg0))

    @overload
    def getListeners(self, arg0: 'Class') -> List['EventListener']:
        """public <T extends java.util.EventListener> T[] javax.swing.JComponent.getListeners(java.lang.Class<T>)"""
        return List['EventListener']._wrap(super(_JComponent, self).getListeners(arg0))

    @override
    @overload
    def getHierarchyBoundsListeners(self) -> List['HierarchyBoundsListener']:
        """public synchronized java.awt.event.HierarchyBoundsListener[] java.awt.Component.getHierarchyBoundsListeners()"""
        return List['HierarchyBoundsListener']._wrap(super(Component, self).getHierarchyBoundsListeners())

    @override
    @overload
    def minimumSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.minimumSize()"""
        return 'Dimension'._wrap(super(Container, self).minimumSize())

    @overload
    def handleEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.handleEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).handleEvent(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @override
    @overload
    def getComponentListeners(self) -> List['ComponentListener']:
        """public synchronized java.awt.event.ComponentListener[] java.awt.Component.getComponentListeners()"""
        return List['ComponentListener']._wrap(super(Component, self).getComponentListeners())

    @override
    @overload
    def computeVisibleRect(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.computeVisibleRect(java.awt.Rectangle)"""
        super(_JComponent, self).computeVisibleRect(arg0)

    @override
    @overload
    def deliverEvent(self, arg0: 'Event'):
        """public void java.awt.Container.deliverEvent(java.awt.Event)"""
        super(_Container, self).deliverEvent(arg0)

    @override
    @overload
    def addHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.addHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).addHierarchyBoundsListener(arg0)

    @override
    @overload
    def getAlignmentX(self) -> float:
        """public float javax.swing.JComponent.getAlignmentX()"""
        return float._wrap(super(JComponent, self).getAlignmentX())

    @overload
    def add(self, arg0: 'Component', arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component,int)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def repaint(self):
        """public void java.awt.Component.repaint()"""
        super(Component, self).repaint()

    @overload
    def gotFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.gotFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).gotFocus(arg0, arg1))

    @override
    @overload
    def createToolTip(self) -> 'JToolTip':
        """public javax.swing.JToolTip javax.swing.JComponent.createToolTip()"""
        return 'JToolTip'._wrap(super(JComponent, self).createToolTip())

    @override
    @overload
    def setEmbedded(self):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setEmbedded()"""
        super(EditorPanel, self).setEmbedded()

    @overload
    def getToolTipText(self, arg0: 'MouseEvent') -> str:
        """public java.lang.String javax.swing.JComponent.getToolTipText(java.awt.event.MouseEvent)"""
        return str._wrap(super(_JComponent, self).getToolTipText(arg0))

    @override
    @overload
    def printComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.printComponents(java.awt.Graphics)"""
        super(_Container, self).printComponents(arg0)

    @override
    @overload
    def getColorModel(self) -> 'ColorModel':
        """public java.awt.image.ColorModel java.awt.Component.getColorModel()"""
        return 'ColorModel'._wrap(super(Component, self).getColorModel())

    @override
    @overload
    def setFocusTraversalPolicyProvider(self, arg0: bool):
        """public final void java.awt.Container.setFocusTraversalPolicyProvider(boolean)"""
        super(_Container, self).setFocusTraversalPolicyProvider(_boolean.valueOf(arg0))

    @overload
    def getComponentZOrder(self, arg0: 'Component') -> int:
        """public int java.awt.Container.getComponentZOrder(java.awt.Component)"""
        return int._wrap(super(_Container, self).getComponentZOrder(arg0))

    @override
    @overload
    def getDebugGraphicsOptions(self) -> int:
        """public int javax.swing.JComponent.getDebugGraphicsOptions()"""
        return int._wrap(super(JComponent, self).getDebugGraphicsOptions())

    @overload
    def areFocusTraversalKeysSet(self, arg0: int) -> bool:
        """public boolean java.awt.Container.areFocusTraversalKeysSet(int)"""
        return bool._wrap(super(_Container, self).areFocusTraversalKeysSet(_int.valueOf(arg0)))

    @override
    @overload
    def getSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.getSize()"""
        return 'Dimension'._wrap(super(Component, self).getSize())

    @override
    @overload
    def repaint(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.repaint(java.awt.Rectangle)"""
        super(_JComponent, self).repaint(arg0)

    @overload
    def getClientProperty(self, arg0: object) -> object:
        """public final java.lang.Object javax.swing.JComponent.getClientProperty(java.lang.Object)"""
        return object._wrap(super(_JComponent, self).getClientProperty(arg0))

    @override
    @overload
    def unregisterKeyboardAction(self, arg0: 'KeyStroke'):
        """public void javax.swing.JComponent.unregisterKeyboardAction(javax.swing.KeyStroke)"""
        super(_JComponent, self).unregisterKeyboardAction(arg0)

    @overload
    def requestFocus(self, arg0: bool) -> bool:
        """public boolean javax.swing.JComponent.requestFocus(boolean)"""
        return bool._wrap(super(_JComponent, self).requestFocus(_boolean.valueOf(arg0)))

    @override
    @overload
    def setActionMap(self, arg0: 'ActionMap'):
        """public final void javax.swing.JComponent.setActionMap(javax.swing.ActionMap)"""
        super(_JComponent, self).setActionMap(arg0)

    @override
    @overload
    def getX(self) -> int:
        """public int javax.swing.JComponent.getX()"""
        return int._wrap(super(JComponent, self).getX())

    @overload
    def mouseEnter(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseEnter(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseEnter(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def updateUI(self):
        """public void javax.swing.JPanel.updateUI()"""
        super(JPanel, self).updateUI()

    @override
    @overload
    def getToolkit(self) -> 'Toolkit':
        """public java.awt.Toolkit java.awt.Component.getToolkit()"""
        return 'Toolkit'._wrap(super(Component, self).getToolkit())

    @override
    @overload
    def isCursorSet(self) -> bool:
        """public boolean java.awt.Component.isCursorSet()"""
        return bool._wrap(super(Component, self).isCursorSet())

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object, arg2: int):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object,int)"""
        super(_Container, self).add(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def setPreferredSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setPreferredSize(java.awt.Dimension)"""
        super(_JComponent, self).setPreferredSize(arg0)

    @override
    @overload
    def setBounds(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.setBounds(int,int,int,int)"""
        super(_Component, self).setBounds(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def isFocusTraversalPolicySet(self) -> bool:
        """public boolean java.awt.Container.isFocusTraversalPolicySet()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicySet())

    @override
    @overload
    def requestFocus(self):
        """public void javax.swing.JComponent.requestFocus()"""
        super(JComponent, self).requestFocus()

    @override
    @overload
    def getAncestorListeners(self) -> List['AncestorListener']:
        """public javax.swing.event.AncestorListener[] javax.swing.JComponent.getAncestorListeners()"""
        return List['AncestorListener']._wrap(super(JComponent, self).getAncestorListeners())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool._wrap(super(_object, self).equals(arg0))

    @overload
    def getInputMap(self, arg0: int) -> 'InputMap':
        """public final javax.swing.InputMap javax.swing.JComponent.getInputMap(int)"""
        return 'InputMap'._wrap(super(_JComponent, self).getInputMap(_int.valueOf(arg0)))

    @override
    @overload
    def isEnabled(self) -> bool:
        """public boolean java.awt.Component.isEnabled()"""
        return bool._wrap(super(Component, self).isEnabled())

    @override
    @overload
    def move(self, arg0: int, arg1: int):
        """public void java.awt.Component.move(int,int)"""
        super(_Component, self).move(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def addMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.addMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).addMouseMotionListener(arg0)

    @override
    @overload
    def getIgnoreRepaint(self) -> bool:
        """public boolean java.awt.Component.getIgnoreRepaint()"""
        return bool._wrap(super(Component, self).getIgnoreRepaint())

    @overload
    def isFocusCycleRoot(self, arg0: 'Container') -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot(java.awt.Container)"""
        return bool._wrap(super(_Container, self).isFocusCycleRoot(arg0))

    @override
    @overload
    def getGraphics(self) -> 'Graphics':
        """public java.awt.Graphics javax.swing.JComponent.getGraphics()"""
        return 'Graphics'._wrap(super(JComponent, self).getGraphics())

    @override
    @overload
    def setLocale(self, arg0: 'Locale'):
        """public void java.awt.Component.setLocale(java.util.Locale)"""
        super(_Component, self).setLocale(arg0)

    @override
    @overload
    def paintAll(self, arg0: 'Graphics'):
        """public void java.awt.Component.paintAll(java.awt.Graphics)"""
        super(_Component, self).paintAll(arg0)

    @override
    @overload
    def setDoubleBuffered(self, arg0: bool):
        """public void javax.swing.JComponent.setDoubleBuffered(boolean)"""
        super(_JComponent, self).setDoubleBuffered(_boolean.valueOf(arg0))

    @override
    @overload
    def isPreferredSizeSet(self) -> bool:
        """public boolean java.awt.Component.isPreferredSizeSet()"""
        return bool._wrap(super(Component, self).isPreferredSizeSet())

    @override
    @overload
    def addInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.addInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).addInputMethodListener(arg0)

    @override
    @overload
    def removeMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.removeMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).removeMouseWheelListener(arg0)

    @override
    @overload
    def getInputMap(self) -> 'InputMap':
        """public final javax.swing.InputMap javax.swing.JComponent.getInputMap()"""
        return 'InputMap'._wrap(super(JComponent, self).getInputMap())

    @override
    @overload
    def setVisible(self, arg0: bool):
        """public void javax.swing.JComponent.setVisible(boolean)"""
        super(_JComponent, self).setVisible(_boolean.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,byte,byte)"""
        super(_Component, self).firePropertyChange(arg0, _byte.valueOf(arg1), _byte.valueOf(arg2))

    @override
    @overload
    def getUIClassID(self) -> str:
        """public java.lang.String javax.swing.JPanel.getUIClassID()"""
        return str._wrap(super(JPanel, self).getUIClassID())

    @override
    @overload
    def transferFocusDownCycle(self):
        """public void java.awt.Container.transferFocusDownCycle()"""
        super(Container, self).transferFocusDownCycle()

    @override
    @overload
    def getNextFocusableComponent(self) -> 'Component':
        """public java.awt.Component javax.swing.JComponent.getNextFocusableComponent()"""
        return 'Component'._wrap(super(JComponent, self).getNextFocusableComponent())

    @override
    @overload
    def getUI(self) -> 'PanelUI':
        """public javax.swing.plaf.PanelUI javax.swing.JPanel.getUI()"""
        return 'PanelUI'._wrap(super(JPanel, self).getUI())

    @override
    @overload
    def setBounds(self, arg0: 'Rectangle'):
        """public void java.awt.Component.setBounds(java.awt.Rectangle)"""
        super(_Component, self).setBounds(arg0)

    @override
    @overload
    def repaint(self, arg0: int):
        """public void java.awt.Component.repaint(long)"""
        super(_Component, self).repaint(_long.valueOf(arg0))

    @override
    @overload
    def removeHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.removeHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).removeHierarchyBoundsListener(arg0)

    @override
    @overload
    def getComponentPopupMenu(self) -> 'JPopupMenu':
        """public javax.swing.JPopupMenu javax.swing.JComponent.getComponentPopupMenu()"""
        return 'JPopupMenu'._wrap(super(JComponent, self).getComponentPopupMenu())

    @override
    @overload
    def getMousePosition(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getMousePosition() throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(Component, self).getMousePosition())

    @override
    @overload
    def getComponentCount(self) -> int:
        """public int java.awt.Container.getComponentCount()"""
        return int._wrap(super(Container, self).getComponentCount())

    @override
    @overload
    def getInputMethodRequests(self) -> 'InputMethodRequests':
        """public java.awt.im.InputMethodRequests java.awt.Component.getInputMethodRequests()"""
        return 'InputMethodRequests'._wrap(super(Component, self).getInputMethodRequests())

    @override
    @overload
    def setMaximumSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setMaximumSize(java.awt.Dimension)"""
        super(_JComponent, self).setMaximumSize(arg0)

    @override
    @overload
    def setRequestFocusEnabled(self, arg0: bool):
        """public void javax.swing.JComponent.setRequestFocusEnabled(boolean)"""
        super(_JComponent, self).setRequestFocusEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def setFocusTraversalKeys(self, arg0: int, arg1: 'Set'):
        """public void javax.swing.JComponent.setFocusTraversalKeys(int,java.util.Set<? extends java.awt.AWTKeyStroke>)"""
        super(_JComponent, self).setFocusTraversalKeys(_int.valueOf(arg0), arg1)

    @overload
    def inside(self, arg0: int, arg1: int) -> bool:
        """public boolean java.awt.Component.inside(int,int)"""
        return bool._wrap(super(_Component, self).inside(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def requestDefaultFocus(self) -> bool:
        """public boolean javax.swing.JComponent.requestDefaultFocus()"""
        return bool._wrap(super(JComponent, self).requestDefaultFocus())

    @override
    @overload
    def disable(self):
        """public void javax.swing.JComponent.disable()"""
        super(JComponent, self).disable()

    @override
    @overload
    def showContent(self, arg0: bool):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.showContent(boolean)"""
        super(_EditorPanel, self).showContent(_boolean.valueOf(arg0))

    @override
    @overload
    def enableInputMethods(self, arg0: bool):
        """public void java.awt.Component.enableInputMethods(boolean)"""
        super(_Component, self).enableInputMethods(_boolean.valueOf(arg0))

    @override
    @overload
    def layout(self):
        """public void java.awt.Container.layout()"""
        super(Container, self).layout()

    @override
    @overload
    def getInputMethodListeners(self) -> List['InputMethodListener']:
        """public synchronized java.awt.event.InputMethodListener[] java.awt.Component.getInputMethodListeners()"""
        return List['InputMethodListener']._wrap(super(Component, self).getInputMethodListeners())

    @override
    @overload
    def paint(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.paint(java.awt.Graphics)"""
        super(_JComponent, self).paint(arg0)

    @override
    @overload
    def transferFocus(self):
        """public void java.awt.Component.transferFocus()"""
        super(Component, self).transferFocus()

    @override
    @overload
    def removeComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.removeComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).removeComponentListener(arg0)

    @override
    @overload
    def getCursor(self) -> 'Cursor':
        """public java.awt.Cursor java.awt.Component.getCursor()"""
        return 'Cursor'._wrap(super(Component, self).getCursor())

    @override
    @overload
    def setMinimumSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setMinimumSize(java.awt.Dimension)"""
        super(_JComponent, self).setMinimumSize(arg0)

    @override
    @overload
    def getAdvancedPanel(self) -> 'JPanel':
        """public javax.swing.JPanel com.badlogic.gdx.tools.flame.EditorPanel.getAdvancedPanel()"""
        return 'JPanel'._wrap(super(EditorPanel, self).getAdvancedPanel())

    @override
    @overload
    def getContainerListeners(self) -> List['ContainerListener']:
        """public synchronized java.awt.event.ContainerListener[] java.awt.Container.getContainerListeners()"""
        return List['ContainerListener']._wrap(super(Container, self).getContainerListeners())

    @override
    @overload
    def setLocation(self, arg0: 'Point'):
        """public void java.awt.Component.setLocation(java.awt.Point)"""
        super(_Component, self).setLocation(arg0)

    @override
    @overload
    def setSize(self, arg0: 'Dimension'):
        """public void java.awt.Component.setSize(java.awt.Dimension)"""
        super(_Component, self).setSize(arg0)

    @override
    @overload
    def removeAll(self):
        """public void java.awt.Container.removeAll()"""
        super(Container, self).removeAll()

    @overload
    def getPopupLocation(self, arg0: 'MouseEvent') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getPopupLocation(java.awt.event.MouseEvent)"""
        return 'Point'._wrap(super(_JComponent, self).getPopupLocation(arg0))

    @overload
    def isAncestorOf(self, arg0: 'Component') -> bool:
        """public boolean java.awt.Container.isAncestorOf(java.awt.Component)"""
        return bool._wrap(super(_Container, self).isAncestorOf(arg0))

    @override
    @overload
    def setOpaque(self, arg0: bool):
        """public void javax.swing.JComponent.setOpaque(boolean)"""
        super(_JComponent, self).setOpaque(_boolean.valueOf(arg0))

    @overload
    def contains(self, arg0: int, arg1: int) -> bool:
        """public boolean javax.swing.JComponent.contains(int,int)"""
        return bool._wrap(super(_JComponent, self).contains(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def setCursor(self, arg0: 'Cursor'):
        """public void java.awt.Component.setCursor(java.awt.Cursor)"""
        super(_Component, self).setCursor(arg0)

    @override
    @overload
    def validate(self):
        """public void java.awt.Container.validate()"""
        super(Container, self).validate()

    @override
    @overload
    def getMaximumSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getMaximumSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getMaximumSize())

    @override
    @overload
    def getBackground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getBackground()"""
        return 'Color'._wrap(super(Component, self).getBackground())

    @overload
    def createImage(self, arg0: 'ImageProducer') -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(java.awt.image.ImageProducer)"""
        return 'Image'._wrap(super(_Component, self).createImage(arg0))

    @override
    @overload
    def setVerifyInputWhenFocusTarget(self, arg0: bool):
        """public void javax.swing.JComponent.setVerifyInputWhenFocusTarget(boolean)"""
        super(_JComponent, self).setVerifyInputWhenFocusTarget(_boolean.valueOf(arg0))

    @override
    @overload
    def removePropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0, arg1)

    @override
    @overload
    def countComponents(self) -> int:
        """public int java.awt.Container.countComponents()"""
        return int._wrap(super(Container, self).countComponents()) 
 
 
# CLASS: com.badlogic.gdx.tools.flame.TextureLoaderPanel
import javax.accessibility.AccessibleContext as AccessibleContext
import javax.swing.JToolTip as JToolTip
import java.awt.event.HierarchyBoundsListener as HierarchyBoundsListener
import java.awt.event.ActionListener as _ActionListener
_ActionListener = _ActionListener
import java.awt.ComponentOrientation as _ComponentOrientation
_ComponentOrientation = _ComponentOrientation
import java.awt.image.ImageProducer as ImageProducer
import java.awt.GraphicsConfiguration as GraphicsConfiguration
import java.awt.Graphics as _Graphics
_Graphics = _Graphics
import javax.swing.JToolTip as _JToolTip
_JToolTip = _JToolTip
import java.awt.Container as _Container
_Container = _Container
import java.awt.MenuComponent as MenuComponent
import java.awt.im.InputMethodRequests as _InputMethodRequests
_InputMethodRequests = _InputMethodRequests
import java.awt.FocusTraversalPolicy as _FocusTraversalPolicy
_FocusTraversalPolicy = _FocusTraversalPolicy
import java.lang.Byte as _byte
import java.awt.Dimension as Dimension
import java.awt.Font as _Font
_Font = _Font
import javax.swing.plaf.PanelUI as _PanelUI
_PanelUI = _PanelUI
import java.awt.event.ContainerListener as ContainerListener
import javax.swing.event.AncestorListener as AncestorListener
import java.awt.AWTEvent as AWTEvent
import javax.swing.JPanel as JPanel
import java.awt.image.ColorModel as _ColorModel
_ColorModel = _ColorModel
import java.lang.Object as _object
import java.awt.ComponentOrientation as ComponentOrientation
import java.awt.im.InputContext as _InputContext
_InputContext = _InputContext
from builtins import float
import com.badlogic.gdx.tools.flame.TextureLoaderPanel as _TextureLoaderPanel
_TextureLoaderPanel = _TextureLoaderPanel
import java.awt.event.HierarchyListener as HierarchyListener
import java.awt.event.InputMethodListener as InputMethodListener
from typing import List
import java.awt.event.MouseWheelListener as _MouseWheelListener
_MouseWheelListener = _MouseWheelListener
import java.awt.event.KeyListener as KeyListener
import java.awt.Component as Component
from builtins import int
import java.awt.LayoutManager as LayoutManager
import java.awt.FontMetrics as _FontMetrics
_FontMetrics = _FontMetrics
import java.awt.Container as Container
from builtins import type
import java.awt.image.VolatileImage as _VolatileImage
_VolatileImage = _VolatileImage
import java.awt.Shape as Shape
import com.badlogic.gdx.tools.flame.EditorPanel as _EditorPanel
_EditorPanel = _EditorPanel
import java.awt.Rectangle as Rectangle
import java.awt.event.ContainerListener as _ContainerListener
_ContainerListener = _ContainerListener
import java.awt.event.HierarchyListener as _HierarchyListener
_HierarchyListener = _HierarchyListener
import java.lang.String as _string
import javax.swing.InputVerifier as _InputVerifier
_InputVerifier = _InputVerifier
import java.awt.Insets as _Insets
_Insets = _Insets
import javax.swing.border.Border as _Border
_Border = _Border
import java.awt.event.ComponentListener as _ComponentListener
_ComponentListener = _ComponentListener
import javax.swing.ActionMap as ActionMap
import java.beans.VetoableChangeListener as VetoableChangeListener
import java.awt.event.ComponentListener as ComponentListener
import javax.swing.KeyStroke as KeyStroke
import java.beans.VetoableChangeListener as _VetoableChangeListener
_VetoableChangeListener = _VetoableChangeListener
from builtins import object
import java.awt.event.KeyListener as _KeyListener
_KeyListener = _KeyListener
import java.awt.Component.BaselineResizeBehavior as BaselineResizeBehavior
import java.awt.Component as _Component_BaselineResizeBehavior
_BaselineResizeBehavior = _Component_BaselineResizeBehavior.BaselineResizeBehavior
import java.awt.Cursor as _Cursor
_Cursor = _Cursor
import java.awt.im.InputMethodRequests as InputMethodRequests
import java.lang.Long as _long
import javax.swing.JPanel as _JPanel
_JPanel = _JPanel
import java.awt.event.FocusListener as _FocusListener
_FocusListener = _FocusListener
import java.lang.Character as _char
import javax.swing.TransferHandler as TransferHandler
import java.awt.event.FocusEvent.Cause as Cause
import javax.swing.JComponent as JComponent
import javax.accessibility.AccessibleContext as _AccessibleContext
_AccessibleContext = _AccessibleContext
import java.awt.event.MouseWheelListener as MouseWheelListener
import java.util.Set as _Set
_Set = _Set
import java.awt.image.ColorModel as ColorModel
import java.lang.Boolean as _boolean
import java.awt.event.MouseMotionListener as MouseMotionListener
import java.util.EventListener as EventListener
import java.awt.Insets as Insets
import javax.swing.KeyStroke as _KeyStroke
_KeyStroke = _KeyStroke
import java.awt.GraphicsConfiguration as _GraphicsConfiguration
_GraphicsConfiguration = _GraphicsConfiguration
import java.awt.dnd.DropTarget as _DropTarget
_DropTarget = _DropTarget
from builtins import bool
import java.beans.PropertyChangeListener as _PropertyChangeListener
_PropertyChangeListener = _PropertyChangeListener
import java.awt.LayoutManager as _LayoutManager
_LayoutManager = _LayoutManager
import java.awt.PopupMenu as PopupMenu
import java.util.EventListener as _EventListener
_EventListener = _EventListener
import java.awt.im.InputContext as InputContext
import java.awt.Component as _Component
_Component = _Component
import java.awt.Font as Font
import java.awt.image.VolatileImage as VolatileImage
import java.awt.dnd.DropTarget as DropTarget
import java.lang.String as _String
_String = _String
import java.lang.Float as _float
import java.awt.Cursor as Cursor
import java.awt.event.MouseListener as _MouseListener
_MouseListener = _MouseListener
import java.awt.Toolkit as _Toolkit
_Toolkit = _Toolkit
import java.io.PrintStream as PrintStream
import javax.swing.JRootPane as _JRootPane
_JRootPane = _JRootPane
import java.awt.Dimension as _Dimension
_Dimension = _Dimension
import java.awt.event.ActionListener as ActionListener
import java.awt.event.MouseEvent as MouseEvent
import java.awt.Color as _Color
_Color = _Color
import javax.swing.JPopupMenu as _JPopupMenu
_JPopupMenu = _JPopupMenu
import javax.swing.InputMap as _InputMap
_InputMap = _InputMap
import java.awt.event.MouseListener as MouseListener
import java.lang.Class as _Class
_Class = _Class
import java.util.Locale as Locale
import java.lang.Double as _double
import javax.swing.plaf.PanelUI as PanelUI
import java.awt.Point as _Point
_Point = _Point
import java.lang.Object as _Object
_Object = _Object
import java.beans.PropertyChangeListener as PropertyChangeListener
import javax.swing.border.Border as Border
import javax.swing.JComponent as _JComponent
_JComponent = _JComponent
import javax.swing.InputVerifier as InputVerifier
import java.io.PrintWriter as PrintWriter
import java.awt.Point as Point
import javax.swing.event.AncestorListener as _AncestorListener
_AncestorListener = _AncestorListener
import java.lang.Short as _short
import java.awt.Toolkit as Toolkit
import java.awt.event.HierarchyBoundsListener as _HierarchyBoundsListener
_HierarchyBoundsListener = _HierarchyBoundsListener
import javax.swing.TransferHandler as _TransferHandler
_TransferHandler = _TransferHandler
import javax.swing.InputMap as InputMap
import java.awt.Rectangle as _Rectangle
_Rectangle = _Rectangle
import javax.swing.JRootPane as JRootPane
import java.awt.Event as Event
import java.awt.event.FocusListener as FocusListener
import java.awt.image.ImageObserver as ImageObserver
from builtins import str
from pyquantum_helper import override
import javax.swing.ActionMap as _ActionMap
_ActionMap = _ActionMap
import java.awt.FocusTraversalPolicy as FocusTraversalPolicy
import java.awt.event.MouseMotionListener as _MouseMotionListener
_MouseMotionListener = _MouseMotionListener
import java.awt.event.InputMethodListener as _InputMethodListener
_InputMethodListener = _InputMethodListener
import javax.swing.JPopupMenu as JPopupMenu
import java.util.Set as Set
import java.lang.Integer as _int
import java.awt.Image as _Image
_Image = _Image
import java.awt.FontMetrics as FontMetrics
import java.awt.Color as Color
import java.awt.Image as Image
import java.awt.Graphics as Graphics
import java.awt.ImageCapabilities as ImageCapabilities
import java.util.Locale as _Locale
_Locale = _Locale
 
class TextureLoaderPanel():
    """com.badlogic.gdx.tools.flame.TextureLoaderPanel"""
 
    @staticmethod
    def _wrap(java_value: _TextureLoaderPanel) -> 'TextureLoaderPanel':
        return TextureLoaderPanel(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _TextureLoaderPanel):
        """
        Dynamic initializer for TextureLoaderPanel.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_TextureLoaderPanel__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_TextureLoaderPanel__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def removeVetoableChangeListener(self, arg0: 'VetoableChangeListener'):
        """public synchronized void javax.swing.JComponent.removeVetoableChangeListener(java.beans.VetoableChangeListener)"""
        super(_JComponent, self).removeVetoableChangeListener(arg0)

    @override
    @overload
    def getComponents(self) -> List['Component']:
        """public java.awt.Component[] java.awt.Container.getComponents()"""
        return List['Component']._wrap(super(Container, self).getComponents())

    @override
    @overload
    def setDebugGraphicsOptions(self, arg0: int):
        """public void javax.swing.JComponent.setDebugGraphicsOptions(int)"""
        super(_JComponent, self).setDebugGraphicsOptions(_int.valueOf(arg0))

    @override
    @overload
    def isValid(self) -> bool:
        """public boolean java.awt.Component.isValid()"""
        return bool._wrap(super(Component, self).isValid())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def getDefaultLocale() -> 'Locale':
        """public static java.util.Locale javax.swing.JComponent.getDefaultLocale()"""
        return Locale._wrap(_JComponent.getDefaultLocale())

    @override
    @overload
    def getInputVerifier(self) -> 'InputVerifier':
        """public javax.swing.InputVerifier javax.swing.JComponent.getInputVerifier()"""
        return 'InputVerifier'._wrap(super(JComponent, self).getInputVerifier())

    @override
    @overload
    def list(self, arg0: 'PrintStream', arg1: int):
        """public void java.awt.Container.list(java.io.PrintStream,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @override
    @overload
    def setUI(self, arg0: 'PanelUI'):
        """public void javax.swing.JPanel.setUI(javax.swing.plaf.PanelUI)"""
        super(_JPanel, self).setUI(arg0)

    @override
    @overload
    def getFocusTraversalPolicy(self) -> 'FocusTraversalPolicy':
        """public java.awt.FocusTraversalPolicy java.awt.Container.getFocusTraversalPolicy()"""
        return 'FocusTraversalPolicy'._wrap(super(Container, self).getFocusTraversalPolicy())

    @override
    @overload
    def getParent(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getParent()"""
        return 'Container'._wrap(super(Component, self).getParent())

    @override
    @overload
    def paintImmediately(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.paintImmediately(java.awt.Rectangle)"""
        super(_JComponent, self).paintImmediately(arg0)

    @staticmethod
    @overload
    def setDefaultLocale(arg0: 'Locale'):
        """public static void javax.swing.JComponent.setDefaultLocale(java.util.Locale)"""
        _JComponent.setDefaultLocale(arg0)

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,float,float)"""
        super(_Component, self).firePropertyChange(arg0, _float.valueOf(arg1), _float.valueOf(arg2))

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object)"""
        super(_Container, self).add(arg0, arg1)

    @override
    @overload
    def getLocale(self) -> 'Locale':
        """public java.util.Locale java.awt.Component.getLocale()"""
        return 'Locale'._wrap(super(Component, self).getLocale())

    @override
    @overload
    def setInheritsPopupMenu(self, arg0: bool):
        """public void javax.swing.JComponent.setInheritsPopupMenu(boolean)"""
        super(_JComponent, self).setInheritsPopupMenu(_boolean.valueOf(arg0))

    @override
    @overload
    def getHierarchyListeners(self) -> List['HierarchyListener']:
        """public synchronized java.awt.event.HierarchyListener[] java.awt.Component.getHierarchyListeners()"""
        return List['HierarchyListener']._wrap(super(Component, self).getHierarchyListeners())

    @override
    @overload
    def nextFocus(self):
        """public void java.awt.Component.nextFocus()"""
        super(Component, self).nextFocus()

    @override
    @overload
    def isPaintingTile(self) -> bool:
        """public boolean javax.swing.JComponent.isPaintingTile()"""
        return bool._wrap(super(JComponent, self).isPaintingTile())

    @override
    @overload
    def getContentPanel(self) -> 'JPanel':
        """public javax.swing.JPanel com.badlogic.gdx.tools.flame.EditorPanel.getContentPanel()"""
        return 'JPanel'._wrap(super(EditorPanel, self).getContentPanel())

    @override
    @overload
    def isDisplayable(self) -> bool:
        """public boolean java.awt.Component.isDisplayable()"""
        return bool._wrap(super(Component, self).isDisplayable())

    @override
    @overload
    def getBounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.getBounds()"""
        return 'Rectangle'._wrap(super(Component, self).getBounds())

    @override
    @overload
    def removeMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.removeMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).removeMouseMotionListener(arg0)

    @override
    @overload
    def isShowing(self) -> bool:
        """public boolean java.awt.Component.isShowing()"""
        return bool._wrap(super(Component, self).isShowing())

    @override
    @overload
    def getDropTarget(self) -> 'DropTarget':
        """public synchronized java.awt.dnd.DropTarget java.awt.Component.getDropTarget()"""
        return 'DropTarget'._wrap(super(Component, self).getDropTarget())

    @override
    @overload
    def isFontSet(self) -> bool:
        """public boolean java.awt.Component.isFontSet()"""
        return bool._wrap(super(Component, self).isFontSet())

    @overload
    def mouseUp(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseUp(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseUp(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def setIgnoreRepaint(self, arg0: bool):
        """public void java.awt.Component.setIgnoreRepaint(boolean)"""
        super(_Component, self).setIgnoreRepaint(_boolean.valueOf(arg0))

    @override
    @overload
    def getPropertyChangeListeners(self) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners()"""
        return List['PropertyChangeListener']._wrap(super(Component, self).getPropertyChangeListeners())

    @override
    @overload
    def isBackgroundSet(self) -> bool:
        """public boolean java.awt.Component.isBackgroundSet()"""
        return bool._wrap(super(Component, self).isBackgroundSet())

    @override
    @overload
    def getLocation(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocation()"""
        return 'Point'._wrap(super(Component, self).getLocation())

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int._wrap(super(object, self).hashCode())

    @override
    @overload
    def location(self) -> 'Point':
        """public java.awt.Point java.awt.Component.location()"""
        return 'Point'._wrap(super(Component, self).location())

    @override
    @overload
    def getComponentOrientation(self) -> 'ComponentOrientation':
        """public java.awt.ComponentOrientation java.awt.Component.getComponentOrientation()"""
        return 'ComponentOrientation'._wrap(super(Component, self).getComponentOrientation())

    @override
    @overload
    def addHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.addHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).addHierarchyListener(arg0)

    @override
    @overload
    def getInheritsPopupMenu(self) -> bool:
        """public boolean javax.swing.JComponent.getInheritsPopupMenu()"""
        return bool._wrap(super(JComponent, self).getInheritsPopupMenu())

    @override
    @overload
    def setComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Component.setComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Component, self).setComponentOrientation(arg0)

    @override
    @overload
    def getFocusCycleRootAncestor(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getFocusCycleRootAncestor()"""
        return 'Container'._wrap(super(Component, self).getFocusCycleRootAncestor())

    @override
    @overload
    def show(self, arg0: bool):
        """public void java.awt.Component.show(boolean)"""
        super(_Component, self).show(_boolean.valueOf(arg0))

    @staticmethod
    @overload
    def addContent(arg0: 'JPanel', arg1: int, arg2: int, arg3: 'JComponent', arg4: bool, arg5: int, arg6: int, arg7: float, arg8: float):
        """public static void com.badlogic.gdx.tools.flame.EditorPanel.addContent(javax.swing.JPanel,int,int,javax.swing.JComponent,boolean,int,int,float,float)"""
        _EditorPanel.addContent(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3, _boolean.valueOf(arg4), _int.valueOf(arg5), _int.valueOf(arg6), _float.valueOf(arg7), _float.valueOf(arg8))

    @override
    @overload
    def grabFocus(self):
        """public void javax.swing.JComponent.grabFocus()"""
        super(JComponent, self).grabFocus()

    @overload
    def locate(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.locate(int,int)"""
        return 'Component'._wrap(super(_Container, self).locate(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def isPaintingForPrint(self) -> bool:
        """public final boolean javax.swing.JComponent.isPaintingForPrint()"""
        return bool._wrap(super(JComponent, self).isPaintingForPrint())

    @overload
    def keyDown(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyDown(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyDown(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,int,int)"""
        super(_JComponent, self).firePropertyChange(arg0, _int.valueOf(arg1), _int.valueOf(arg2))

    @override
    @overload
    def getLayout(self) -> 'LayoutManager':
        """public java.awt.LayoutManager java.awt.Container.getLayout()"""
        return 'LayoutManager'._wrap(super(Container, self).getLayout())

    @override
    @overload
    def preferredSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.preferredSize()"""
        return 'Dimension'._wrap(super(Container, self).preferredSize())

    @override
    @overload
    def addNotify(self):
        """public void javax.swing.JComponent.addNotify()"""
        super(JComponent, self).addNotify()

    @override
    @overload
    def setSize(self, arg0: int, arg1: int):
        """public void java.awt.Component.setSize(int,int)"""
        super(_Component, self).setSize(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.repaint(int,int,int,int)"""
        super(_Component, self).repaint(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @overload
    def requestFocusInWindow(self, arg0: 'Cause') -> bool:
        """public boolean java.awt.Component.requestFocusInWindow(java.awt.event.FocusEvent$Cause)"""
        return bool._wrap(super(_Component, self).requestFocusInWindow(arg0))

    @override
    @overload
    def remove(self, arg0: int):
        """public void java.awt.Container.remove(int)"""
        super(_Container, self).remove(_int.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,long,long)"""
        super(_Component, self).firePropertyChange(arg0, _long.valueOf(arg1), _long.valueOf(arg2))

    @override
    @overload
    def update(self, arg0: 'FlameMain'):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.update(com.badlogic.gdx.tools.flame.FlameMain)"""
        super(_EditorPanel, self).update(arg0)

    @override
    @overload
    def setFocusCycleRoot(self, arg0: bool):
        """public void java.awt.Container.setFocusCycleRoot(boolean)"""
        super(_Container, self).setFocusCycleRoot(_boolean.valueOf(arg0))

    @overload
    def keyUp(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyUp(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyUp(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def setBackground(self, arg0: 'Color'):
        """public void javax.swing.JComponent.setBackground(java.awt.Color)"""
        super(_JComponent, self).setBackground(arg0)

    @override
    @overload
    def doLayout(self):
        """public void java.awt.Container.doLayout()"""
        super(Container, self).doLayout()

    @override
    @overload
    def enable(self):
        """public void javax.swing.JComponent.enable()"""
        super(JComponent, self).enable()

    @override
    @overload
    def getInsets(self) -> 'Insets':
        """public java.awt.Insets javax.swing.JComponent.getInsets()"""
        return 'Insets'._wrap(super(JComponent, self).getInsets())

    @override
    @overload
    def setNextFocusableComponent(self, arg0: 'Component'):
        """public void javax.swing.JComponent.setNextFocusableComponent(java.awt.Component)"""
        super(_JComponent, self).setNextFocusableComponent(arg0)

    @override
    @overload
    def getAlignmentY(self) -> float:
        """public float javax.swing.JComponent.getAlignmentY()"""
        return float._wrap(super(JComponent, self).getAlignmentY())

    @overload
    def checkImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @override
    @overload
    def getFocusTraversalKeysEnabled(self) -> bool:
        """public boolean java.awt.Component.getFocusTraversalKeysEnabled()"""
        return bool._wrap(super(Component, self).getFocusTraversalKeysEnabled())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getRootPane(self) -> 'JRootPane':
        """public javax.swing.JRootPane javax.swing.JComponent.getRootPane()"""
        return 'JRootPane'._wrap(super(JComponent, self).getRootPane())

    @override
    @overload
    def invalidate(self):
        """public void java.awt.Container.invalidate()"""
        super(Container, self).invalidate()

    @override
    @overload
    def resetKeyboardActions(self):
        """public void javax.swing.JComponent.resetKeyboardActions()"""
        super(JComponent, self).resetKeyboardActions()

    @overload
    def getComponent(self, arg0: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponent(int)"""
        return 'Component'._wrap(super(_Container, self).getComponent(_int.valueOf(arg0)))

    @override
    @overload
    def setName(self, arg0: str):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setName(java.lang.String)"""
        super(_EditorPanel, self).setName(arg0)

    @override
    @overload
    def addPropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Container.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Container, self).addPropertyChangeListener(arg0, arg1)

    @override
    @overload
    def setInputMap(self, arg0: int, arg1: 'InputMap'):
        """public final void javax.swing.JComponent.setInputMap(int,javax.swing.InputMap)"""
        super(_JComponent, self).setInputMap(_int.valueOf(arg0), arg1)

    @override
    @overload
    def removePropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0)

    @override
    @overload
    def applyComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Container.applyComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Container, self).applyComponentOrientation(arg0)

    @override
    @overload
    def setBorder(self, arg0: 'Border'):
        """public void javax.swing.JComponent.setBorder(javax.swing.border.Border)"""
        super(_JComponent, self).setBorder(arg0)

    @override
    @overload
    def remove(self, arg0: 'MenuComponent'):
        """public void java.awt.Component.remove(java.awt.MenuComponent)"""
        super(_Component, self).remove(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintStream'):
        """public void java.awt.Component.list(java.io.PrintStream)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def removeMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.removeMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).removeMouseListener(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintWriter'):
        """public void java.awt.Component.list(java.io.PrintWriter)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def getKeyListeners(self) -> List['KeyListener']:
        """public synchronized java.awt.event.KeyListener[] java.awt.Component.getKeyListeners()"""
        return List['KeyListener']._wrap(super(Component, self).getKeyListeners())

    @override
    @overload
    def getInputContext(self) -> 'InputContext':
        """public java.awt.im.InputContext java.awt.Component.getInputContext()"""
        return 'InputContext'._wrap(super(Component, self).getInputContext())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,double,double)"""
        super(_Component, self).firePropertyChange(arg0, _double.valueOf(arg1), _double.valueOf(arg2))

    @override
    @overload
    def removeAncestorListener(self, arg0: 'AncestorListener'):
        """public void javax.swing.JComponent.removeAncestorListener(javax.swing.event.AncestorListener)"""
        super(_JComponent, self).removeAncestorListener(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintWriter', arg1: int):
        """public void java.awt.Container.list(java.io.PrintWriter,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @overload
    def checkImage(self, arg0: 'Image', arg1: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, arg1))

    @override
    @overload
    def removeFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.removeFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).removeFocusListener(arg0)

    @overload
    def mouseDown(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDown(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDown(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def setIsAlwayShown(self, arg0: bool):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setIsAlwayShown(boolean)"""
        super(_EditorPanel, self).setIsAlwayShown(_boolean.valueOf(arg0))

    @overload
    def getConditionForKeyStroke(self, arg0: 'KeyStroke') -> int:
        """public int javax.swing.JComponent.getConditionForKeyStroke(javax.swing.KeyStroke)"""
        return int._wrap(super(_JComponent, self).getConditionForKeyStroke(arg0))

    @override
    @overload
    def getTreeLock(self) -> object:
        """public final java.lang.Object java.awt.Component.getTreeLock()"""
        return object._wrap(super(Component, self).getTreeLock())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @override
    @overload
    def addVetoableChangeListener(self, arg0: 'VetoableChangeListener'):
        """public synchronized void javax.swing.JComponent.addVetoableChangeListener(java.beans.VetoableChangeListener)"""
        super(_JComponent, self).addVetoableChangeListener(arg0)

    @overload
    def contains(self, arg0: 'Point') -> bool:
        """public boolean java.awt.Component.contains(java.awt.Point)"""
        return bool._wrap(super(_Component, self).contains(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,short,short)"""
        super(_Component, self).firePropertyChange(arg0, _short.valueOf(arg1), _short.valueOf(arg2))

    @override
    @overload
    def dispatchEvent(self, arg0: 'AWTEvent'):
        """public final void java.awt.Component.dispatchEvent(java.awt.AWTEvent)"""
        super(_Component, self).dispatchEvent(arg0)

    @override
    @overload
    def removeContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.removeContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).removeContainerListener(arg0)

    @override
    @overload
    def getGraphicsConfiguration(self) -> 'GraphicsConfiguration':
        """public java.awt.GraphicsConfiguration java.awt.Component.getGraphicsConfiguration()"""
        return 'GraphicsConfiguration'._wrap(super(Component, self).getGraphicsConfiguration())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: bool, arg2: bool):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,boolean,boolean)"""
        super(_JComponent, self).firePropertyChange(arg0, _boolean.valueOf(arg1), _boolean.valueOf(arg2))

    @override
    @overload
    def registerKeyboardAction(self, arg0: 'ActionListener', arg1: str, arg2: 'KeyStroke', arg3: int):
        """public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,java.lang.String,javax.swing.KeyStroke,int)"""
        super(_JComponent, self).registerKeyboardAction(arg0, arg1, arg2, _int.valueOf(arg3))

    @overload
    def findComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(arg0))

    @override
    @overload
    def resize(self, arg0: int, arg1: int):
        """public void java.awt.Component.resize(int,int)"""
        super(_Component, self).resize(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getHeight(self) -> int:
        """public int javax.swing.JComponent.getHeight()"""
        return int._wrap(super(JComponent, self).getHeight())

    @override
    @overload
    def getTransferHandler(self) -> 'TransferHandler':
        """public javax.swing.TransferHandler javax.swing.JComponent.getTransferHandler()"""
        return 'TransferHandler'._wrap(super(JComponent, self).getTransferHandler())

    @overload
    def imageUpdate(self, arg0: 'Image', arg1: int, arg2: int, arg3: int, arg4: int, arg5: int) -> bool:
        """public boolean java.awt.Component.imageUpdate(java.awt.Image,int,int,int,int,int)"""
        return bool._wrap(super(_Component, self).imageUpdate(arg0, _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4), _int.valueOf(arg5)))

    @override
    @overload
    def getWidth(self) -> int:
        """public int javax.swing.JComponent.getWidth()"""
        return int._wrap(super(JComponent, self).getWidth())

    @override
    @overload
    def transferFocusBackward(self):
        """public void java.awt.Component.transferFocusBackward()"""
        super(Component, self).transferFocusBackward()

    @overload
    def getPropertyChangeListeners(self, arg0: str) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners(java.lang.String)"""
        return List['PropertyChangeListener']._wrap(super(_Component, self).getPropertyChangeListeners(arg0))

    @override
    @overload
    def getName(self) -> str:
        """public java.lang.String com.badlogic.gdx.tools.flame.EditorPanel.getName()"""
        return str._wrap(super(EditorPanel, self).getName())

    @staticmethod
    @overload
    def isLightweightComponent(arg0: 'Component') -> bool:
        """public static boolean javax.swing.JComponent.isLightweightComponent(java.awt.Component)"""
        return bool._wrap(_JComponent.isLightweightComponent(arg0))

    @override
    @overload
    def getBorder(self) -> 'Border':
        """public javax.swing.border.Border javax.swing.JComponent.getBorder()"""
        return 'Border'._wrap(super(JComponent, self).getBorder())

    @override
    @overload
    def printAll(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.printAll(java.awt.Graphics)"""
        super(_JComponent, self).printAll(arg0)

    @override
    @overload
    def addComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.addComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).addComponentListener(arg0)

    @override
    @overload
    def getBaselineResizeBehavior(self) -> 'BaselineResizeBehavior.Component$BaselineResizeBehavior':
        """public java.awt.Component$BaselineResizeBehavior javax.swing.JComponent.getBaselineResizeBehavior()"""
        return 'BaselineResizeBehavior.Component$BaselineResizeBehavior'._wrap(super(JComponent, self).getBaselineResizeBehavior())

    @override
    @overload
    def print(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.print(java.awt.Graphics)"""
        super(_JComponent, self).print(arg0)

    @override
    @overload
    def setInputVerifier(self, arg0: 'InputVerifier'):
        """public void javax.swing.JComponent.setInputVerifier(javax.swing.InputVerifier)"""
        super(_JComponent, self).setInputVerifier(arg0)

    @override
    @overload
    def addAncestorListener(self, arg0: 'AncestorListener'):
        """public void javax.swing.JComponent.addAncestorListener(javax.swing.event.AncestorListener)"""
        super(_JComponent, self).addAncestorListener(arg0)

    @override
    @overload
    def getFont(self) -> 'Font':
        """public java.awt.Font java.awt.Component.getFont()"""
        return 'Font'._wrap(super(Component, self).getFont())

    @override
    @overload
    def setFont(self, arg0: 'Font'):
        """public void javax.swing.JComponent.setFont(java.awt.Font)"""
        super(_JComponent, self).setFont(arg0)

    @override
    @overload
    def isOptimizedDrawingEnabled(self) -> bool:
        """public boolean javax.swing.JComponent.isOptimizedDrawingEnabled()"""
        return bool._wrap(super(JComponent, self).isOptimizedDrawingEnabled())

    @override
    @overload
    def isValidateRoot(self) -> bool:
        """public boolean javax.swing.JComponent.isValidateRoot()"""
        return bool._wrap(super(JComponent, self).isValidateRoot())

    @overload
    def prepareImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @override
    @overload
    def setHasAdvanced(self, arg0: bool):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setHasAdvanced(boolean)"""
        super(_EditorPanel, self).setHasAdvanced(_boolean.valueOf(arg0))

    @override
    @overload
    def setForeground(self, arg0: 'Color'):
        """public void javax.swing.JComponent.setForeground(java.awt.Color)"""
        super(_JComponent, self).setForeground(arg0)

    @overload
    def mouseDrag(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDrag(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDrag(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def isOpaque(self) -> bool:
        """public boolean javax.swing.JComponent.isOpaque()"""
        return bool._wrap(super(JComponent, self).isOpaque())

    @overload
    def createVolatileImage(self, arg0: int, arg1: int, arg2: 'ImageCapabilities') -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int,java.awt.ImageCapabilities) throws java.awt.AWTException"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1), arg2))

    @override
    @overload
    def bounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.bounds()"""
        return 'Rectangle'._wrap(super(Component, self).bounds())

    @override
    @overload
    def update(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.update(java.awt.Graphics)"""
        super(_JComponent, self).update(arg0)

    @override
    @overload
    def add(self, arg0: 'PopupMenu'):
        """public void java.awt.Component.add(java.awt.PopupMenu)"""
        super(_Component, self).add(arg0)

    @override
    @overload
    def getToolTipText(self) -> str:
        """public java.lang.String javax.swing.JComponent.getToolTipText()"""
        return str._wrap(super(JComponent, self).getToolTipText())

    @override
    @overload
    def isVisible(self) -> bool:
        """public boolean java.awt.Component.isVisible()"""
        return bool._wrap(super(Component, self).isVisible())

    @override
    @overload
    def setDropTarget(self, arg0: 'DropTarget'):
        """public synchronized void java.awt.Component.setDropTarget(java.awt.dnd.DropTarget)"""
        super(_Component, self).setDropTarget(arg0)

    @override
    @overload
    def getLocationOnScreen(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocationOnScreen()"""
        return 'Point'._wrap(super(Component, self).getLocationOnScreen())

    @override
    @overload
    def getY(self) -> int:
        """public int javax.swing.JComponent.getY()"""
        return int._wrap(super(JComponent, self).getY())

    @overload
    def getComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def isMaximumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMaximumSizeSet()"""
        return bool._wrap(super(Component, self).isMaximumSizeSet())

    @override
    @overload
    def setAlignmentY(self, arg0: float):
        """public void javax.swing.JComponent.setAlignmentY(float)"""
        super(_JComponent, self).setAlignmentY(_float.valueOf(arg0))

    @override
    @overload
    def getRegisteredKeyStrokes(self) -> List['KeyStroke']:
        """public javax.swing.KeyStroke[] javax.swing.JComponent.getRegisteredKeyStrokes()"""
        return List['KeyStroke']._wrap(super(JComponent, self).getRegisteredKeyStrokes())

    @override
    @overload
    def isFocusable(self) -> bool:
        """public boolean java.awt.Component.isFocusable()"""
        return bool._wrap(super(Component, self).isFocusable())

    @override
    @overload
    def isFocusTraversalPolicyProvider(self) -> bool:
        """public final boolean java.awt.Container.isFocusTraversalPolicyProvider()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicyProvider())

    @override
    @overload
    def getMouseListeners(self) -> List['MouseListener']:
        """public synchronized java.awt.event.MouseListener[] java.awt.Component.getMouseListeners()"""
        return List['MouseListener']._wrap(super(Component, self).getMouseListeners())

    @override
    @overload
    def setValue(self, arg0: object):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setValue(T)"""
        super(_EditorPanel, self).setValue(arg0)

    @override
    @overload
    def registerKeyboardAction(self, arg0: 'ActionListener', arg1: 'KeyStroke', arg2: int):
        """public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,javax.swing.KeyStroke,int)"""
        super(_JComponent, self).registerKeyboardAction(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def transferFocusUpCycle(self):
        """public void java.awt.Component.transferFocusUpCycle()"""
        super(Component, self).transferFocusUpCycle()

    @override
    @overload
    def removeKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.removeKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).removeKeyListener(arg0)

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: str, arg2: str):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,char,char)"""
        super(_JComponent, self).firePropertyChange(arg0, _char.valueOf(arg1), _char.valueOf(arg2))

    @override
    @overload
    def getMouseMotionListeners(self) -> List['MouseMotionListener']:
        """public synchronized java.awt.event.MouseMotionListener[] java.awt.Component.getMouseMotionListeners()"""
        return List['MouseMotionListener']._wrap(super(Component, self).getMouseMotionListeners())

    @override
    @overload
    def getAutoscrolls(self) -> bool:
        """public boolean javax.swing.JComponent.getAutoscrolls()"""
        return bool._wrap(super(JComponent, self).getAutoscrolls())

    @override
    @overload
    def addContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.addContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).addContainerListener(arg0)

    @override
    @overload
    def isFocusTraversable(self) -> bool:
        """public boolean java.awt.Component.isFocusTraversable()"""
        return bool._wrap(super(Component, self).isFocusTraversable())

    @overload
    def mouseExit(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseExit(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseExit(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getBounds(self, arg0: 'Rectangle') -> 'Rectangle':
        """public java.awt.Rectangle javax.swing.JComponent.getBounds(java.awt.Rectangle)"""
        return 'Rectangle'._wrap(super(_JComponent, self).getBounds(arg0))

    @override
    @overload
    def setToolTipText(self, arg0: str):
        """public void javax.swing.JComponent.setToolTipText(java.lang.String)"""
        super(_JComponent, self).setToolTipText(arg0)

    @override
    @overload
    def setAutoscrolls(self, arg0: bool):
        """public void javax.swing.JComponent.setAutoscrolls(boolean)"""
        super(_JComponent, self).setAutoscrolls(_boolean.valueOf(arg0))

    @override
    @overload
    def setComponentPopupMenu(self, arg0: 'JPopupMenu'):
        """public void javax.swing.JComponent.setComponentPopupMenu(javax.swing.JPopupMenu)"""
        super(_JComponent, self).setComponentPopupMenu(arg0)

    @override
    @overload
    def setMixingCutoutShape(self, arg0: 'Shape'):
        """public void java.awt.Component.setMixingCutoutShape(java.awt.Shape)"""
        super(_Component, self).setMixingCutoutShape(arg0)

    @override
    @overload
    def getVisibleRect(self) -> 'Rectangle':
        """public java.awt.Rectangle javax.swing.JComponent.getVisibleRect()"""
        return 'Rectangle'._wrap(super(JComponent, self).getVisibleRect())

    @override
    @overload
    def requestFocus(self, arg0: 'Cause'):
        """public void java.awt.Component.requestFocus(java.awt.event.FocusEvent$Cause)"""
        super(_Component, self).requestFocus(arg0)

    @overload
    def createImage(self, arg0: int, arg1: int) -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(int,int)"""
        return 'Image'._wrap(super(_Component, self).createImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def putClientProperty(self, arg0: object, arg1: object):
        """public final void javax.swing.JComponent.putClientProperty(java.lang.Object,java.lang.Object)"""
        super(_JComponent, self).putClientProperty(arg0, arg1)

    @override
    @overload
    def getVetoableChangeListeners(self) -> List['VetoableChangeListener']:
        """public synchronized java.beans.VetoableChangeListener[] javax.swing.JComponent.getVetoableChangeListeners()"""
        return List['VetoableChangeListener']._wrap(super(JComponent, self).getVetoableChangeListeners())

    @override
    @overload
    def scrollRectToVisible(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.scrollRectToVisible(java.awt.Rectangle)"""
        super(_JComponent, self).scrollRectToVisible(arg0)

    @override
    @overload
    def getTopLevelAncestor(self) -> 'Container':
        """public java.awt.Container javax.swing.JComponent.getTopLevelAncestor()"""
        return 'Container'._wrap(super(JComponent, self).getTopLevelAncestor())

    @override
    @overload
    def isRequestFocusEnabled(self) -> bool:
        """public boolean javax.swing.JComponent.isRequestFocusEnabled()"""
        return bool._wrap(super(JComponent, self).isRequestFocusEnabled())

    @override
    @overload
    def getFocusListeners(self) -> List['FocusListener']:
        """public synchronized java.awt.event.FocusListener[] java.awt.Component.getFocusListeners()"""
        return List['FocusListener']._wrap(super(Component, self).getFocusListeners())

    @override
    @overload
    def setLayout(self, arg0: 'LayoutManager'):
        """public void java.awt.Container.setLayout(java.awt.LayoutManager)"""
        super(_Container, self).setLayout(arg0)

    @overload
    def add(self, arg0: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0))

    @override
    @overload
    def getMouseWheelListeners(self) -> List['MouseWheelListener']:
        """public synchronized java.awt.event.MouseWheelListener[] java.awt.Component.getMouseWheelListeners()"""
        return List['MouseWheelListener']._wrap(super(Component, self).getMouseWheelListeners())

    @override
    @overload
    def reshape(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void javax.swing.JComponent.reshape(int,int,int,int)"""
        super(_JComponent, self).reshape(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def setTransferHandler(self, arg0: 'TransferHandler'):
        """public void javax.swing.JComponent.setTransferHandler(javax.swing.TransferHandler)"""
        super(_JComponent, self).setTransferHandler(arg0)

    @override
    @overload
    def getPreferredSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getPreferredSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getPreferredSize())

    @override
    @overload
    def setLocation(self, arg0: int, arg1: int):
        """public void java.awt.Component.setLocation(int,int)"""
        super(_Component, self).setLocation(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def removeInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.removeInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).removeInputMethodListener(arg0)

    @override
    @overload
    def setFocusable(self, arg0: bool):
        """public void java.awt.Component.setFocusable(boolean)"""
        super(_Component, self).setFocusable(_boolean.valueOf(arg0))

    @override
    @overload
    def paintComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.paintComponents(java.awt.Graphics)"""
        super(_Container, self).paintComponents(arg0)

    @override
    @overload
    def addFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.addFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).addFocusListener(arg0)

    @overload
    def prepareImage(self, arg0: 'Image', arg1: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, arg1))

    @override
    @overload
    def addKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.addKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).addKeyListener(arg0)

    @override
    @overload
    def resize(self, arg0: 'Dimension'):
        """public void java.awt.Component.resize(java.awt.Dimension)"""
        super(_Component, self).resize(arg0)

    @override
    @overload
    def setComponentZOrder(self, arg0: 'Component', arg1: int):
        """public void java.awt.Container.setComponentZOrder(java.awt.Component,int)"""
        super(_Container, self).setComponentZOrder(arg0, _int.valueOf(arg1))

    @override
    @overload
    def list(self):
        """public void java.awt.Component.list()"""
        super(Component, self).list()

    @overload
    def add(self, arg0: str, arg1: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.lang.String,java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, arg1))

    @override
    @overload
    def paintImmediately(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void javax.swing.JComponent.paintImmediately(int,int,int,int)"""
        super(_JComponent, self).paintImmediately(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def getMinimumSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getMinimumSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getMinimumSize())

    @override
    @overload
    def setEnabled(self, arg0: bool):
        """public void javax.swing.JComponent.setEnabled(boolean)"""
        super(_JComponent, self).setEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def hasFocus(self) -> bool:
        """public boolean java.awt.Component.hasFocus()"""
        return bool._wrap(super(Component, self).hasFocus())

    @overload
    def createVolatileImage(self, arg0: int, arg1: int) -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int)"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.removeHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).removeHierarchyListener(arg0)

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.awt.Component.toString()"""
        return str._wrap(super(Component, self).toString())

    @override
    @overload
    def addMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.addMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).addMouseListener(arg0)

    @override
    @overload
    def isFocusOwner(self) -> bool:
        """public boolean java.awt.Component.isFocusOwner()"""
        return bool._wrap(super(Component, self).isFocusOwner())

    @override
    @overload
    def getAccessibleContext(self) -> 'AccessibleContext':
        """public javax.accessibility.AccessibleContext javax.swing.JPanel.getAccessibleContext()"""
        return 'AccessibleContext'._wrap(super(JPanel, self).getAccessibleContext())

    @overload
    def postEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.postEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).postEvent(arg0))

    @overload
    def getLocation(self, arg0: 'Point') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getLocation(java.awt.Point)"""
        return 'Point'._wrap(super(_JComponent, self).getLocation(arg0))

    @overload
    def getBaseline(self, arg0: int, arg1: int) -> int:
        """public int javax.swing.JComponent.getBaseline(int,int)"""
        return int._wrap(super(_JComponent, self).getBaseline(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def findComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeNotify(self):
        """public void javax.swing.JComponent.removeNotify()"""
        super(JComponent, self).removeNotify()

    @override
    @overload
    def getForeground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getForeground()"""
        return 'Color'._wrap(super(Component, self).getForeground())

    @override
    @overload
    def show(self):
        """public void java.awt.Component.show()"""
        super(Component, self).show()

    @override
    @overload
    def isDoubleBuffered(self) -> bool:
        """public boolean javax.swing.JComponent.isDoubleBuffered()"""
        return bool._wrap(super(JComponent, self).isDoubleBuffered())

    @override
    @overload
    def setDescription(self, arg0: str):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setDescription(java.lang.String)"""
        super(_EditorPanel, self).setDescription(arg0)

    @override
    @overload
    def isFocusCycleRoot(self) -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot()"""
        return bool._wrap(super(Container, self).isFocusCycleRoot())

    @override
    @overload
    def addMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.addMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).addMouseWheelListener(arg0)

    @override
    @overload
    def hide(self):
        """public void javax.swing.JComponent.hide()"""
        super(JComponent, self).hide()

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def revalidate(self):
        """public void javax.swing.JComponent.revalidate()"""
        super(JComponent, self).revalidate()

    @override
    @overload
    def getActionMap(self) -> 'ActionMap':
        """public final javax.swing.ActionMap javax.swing.JComponent.getActionMap()"""
        return 'ActionMap'._wrap(super(JComponent, self).getActionMap())

    @override
    @overload
    def requestFocusInWindow(self) -> bool:
        """public boolean javax.swing.JComponent.requestFocusInWindow()"""
        return bool._wrap(super(JComponent, self).requestFocusInWindow())

    @overload
    def action(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.action(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).action(arg0, arg1))

    @override
    @overload
    def isManagingFocus(self) -> bool:
        """public boolean javax.swing.JComponent.isManagingFocus()"""
        return bool._wrap(super(JComponent, self).isManagingFocus())

    @override
    @overload
    def isLightweight(self) -> bool:
        """public boolean java.awt.Component.isLightweight()"""
        return bool._wrap(super(Component, self).isLightweight())

    @override
    @overload
    def setAlignmentX(self, arg0: float):
        """public void javax.swing.JComponent.setAlignmentX(float)"""
        super(_JComponent, self).setAlignmentX(_float.valueOf(arg0))

    @overload
    def __init__(self, arg0: 'FlameMain', arg1: str, arg2: str):
        """public com.badlogic.gdx.tools.flame.TextureLoaderPanel(com.badlogic.gdx.tools.flame.FlameMain,java.lang.String,java.lang.String)"""
        val = _TextureLoaderPanel(arg0, arg1, arg2)
        self.__wrapper = val

    @overload
    def getFocusTraversalKeys(self, arg0: int) -> 'Set':
        """public java.util.Set<java.awt.AWTKeyStroke> java.awt.Container.getFocusTraversalKeys(int)"""
        return 'Set'._wrap(super(_Container, self).getFocusTraversalKeys(_int.valueOf(arg0)))

    @override
    @overload
    def setFocusTraversalKeysEnabled(self, arg0: bool):
        """public void java.awt.Component.setFocusTraversalKeysEnabled(boolean)"""
        super(_Component, self).setFocusTraversalKeysEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def remove(self, arg0: 'Component'):
        """public void java.awt.Container.remove(java.awt.Component)"""
        super(_Container, self).remove(arg0)

    @overload
    def getInsets(self, arg0: 'Insets') -> 'Insets':
        """public java.awt.Insets javax.swing.JComponent.getInsets(java.awt.Insets)"""
        return 'Insets'._wrap(super(_JComponent, self).getInsets(arg0))

    @override
    @overload
    def insets(self) -> 'Insets':
        """public java.awt.Insets java.awt.Container.insets()"""
        return 'Insets'._wrap(super(Container, self).insets())

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int):
        """public void javax.swing.JComponent.repaint(long,int,int,int,int)"""
        super(_JComponent, self).repaint(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4))

    @override
    @overload
    def setFocusTraversalPolicy(self, arg0: 'FocusTraversalPolicy'):
        """public void java.awt.Container.setFocusTraversalPolicy(java.awt.FocusTraversalPolicy)"""
        super(_Container, self).setFocusTraversalPolicy(arg0)

    @overload
    def getSize(self, arg0: 'Dimension') -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getSize(java.awt.Dimension)"""
        return 'Dimension'._wrap(super(_JComponent, self).getSize(arg0))

    @override
    @overload
    def enable(self, arg0: bool):
        """public void java.awt.Component.enable(boolean)"""
        super(_Component, self).enable(_boolean.valueOf(arg0))

    @overload
    def getToolTipLocation(self, arg0: 'MouseEvent') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getToolTipLocation(java.awt.event.MouseEvent)"""
        return 'Point'._wrap(super(_JComponent, self).getToolTipLocation(arg0))

    @override
    @overload
    def addPropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Container.addPropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Container, self).addPropertyChangeListener(arg0)

    @overload
    def getComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(arg0))

    @override
    @overload
    def size(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.size()"""
        return 'Dimension'._wrap(super(Component, self).size())

    @override
    @overload
    def getVerifyInputWhenFocusTarget(self) -> bool:
        """public boolean javax.swing.JComponent.getVerifyInputWhenFocusTarget()"""
        return bool._wrap(super(JComponent, self).getVerifyInputWhenFocusTarget())

    @overload
    def mouseMove(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseMove(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseMove(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getActionForKeyStroke(self, arg0: 'KeyStroke') -> 'ActionListener':
        """public java.awt.event.ActionListener javax.swing.JComponent.getActionForKeyStroke(javax.swing.KeyStroke)"""
        return 'ActionListener'._wrap(super(_JComponent, self).getActionForKeyStroke(arg0))

    @overload
    def lostFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.lostFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).lostFocus(arg0, arg1))

    @override
    @overload
    def isMinimumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMinimumSizeSet()"""
        return bool._wrap(super(Component, self).isMinimumSizeSet())

    @override
    @overload
    def isForegroundSet(self) -> bool:
        """public boolean java.awt.Component.isForegroundSet()"""
        return bool._wrap(super(Component, self).isForegroundSet())

    @overload
    def getMousePosition(self, arg0: bool) -> 'Point':
        """public java.awt.Point java.awt.Container.getMousePosition(boolean) throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(_Container, self).getMousePosition(_boolean.valueOf(arg0)))

    @overload
    def getFontMetrics(self, arg0: 'Font') -> 'FontMetrics':
        """public java.awt.FontMetrics javax.swing.JComponent.getFontMetrics(java.awt.Font)"""
        return 'FontMetrics'._wrap(super(_JComponent, self).getFontMetrics(arg0))

    @overload
    def getListeners(self, arg0: 'Class') -> List['EventListener']:
        """public <T extends java.util.EventListener> T[] javax.swing.JComponent.getListeners(java.lang.Class<T>)"""
        return List['EventListener']._wrap(super(_JComponent, self).getListeners(arg0))

    @override
    @overload
    def getHierarchyBoundsListeners(self) -> List['HierarchyBoundsListener']:
        """public synchronized java.awt.event.HierarchyBoundsListener[] java.awt.Component.getHierarchyBoundsListeners()"""
        return List['HierarchyBoundsListener']._wrap(super(Component, self).getHierarchyBoundsListeners())

    @override
    @overload
    def minimumSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.minimumSize()"""
        return 'Dimension'._wrap(super(Container, self).minimumSize())

    @overload
    def handleEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.handleEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).handleEvent(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @override
    @overload
    def getComponentListeners(self) -> List['ComponentListener']:
        """public synchronized java.awt.event.ComponentListener[] java.awt.Component.getComponentListeners()"""
        return List['ComponentListener']._wrap(super(Component, self).getComponentListeners())

    @override
    @overload
    def computeVisibleRect(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.computeVisibleRect(java.awt.Rectangle)"""
        super(_JComponent, self).computeVisibleRect(arg0)

    @override
    @overload
    def deliverEvent(self, arg0: 'Event'):
        """public void java.awt.Container.deliverEvent(java.awt.Event)"""
        super(_Container, self).deliverEvent(arg0)

    @override
    @overload
    def addHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.addHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).addHierarchyBoundsListener(arg0)

    @override
    @overload
    def getAlignmentX(self) -> float:
        """public float javax.swing.JComponent.getAlignmentX()"""
        return float._wrap(super(JComponent, self).getAlignmentX())

    @overload
    def add(self, arg0: 'Component', arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component,int)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def repaint(self):
        """public void java.awt.Component.repaint()"""
        super(Component, self).repaint()

    @overload
    def gotFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.gotFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).gotFocus(arg0, arg1))

    @override
    @overload
    def createToolTip(self) -> 'JToolTip':
        """public javax.swing.JToolTip javax.swing.JComponent.createToolTip()"""
        return 'JToolTip'._wrap(super(JComponent, self).createToolTip())

    @override
    @overload
    def setEmbedded(self):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setEmbedded()"""
        super(EditorPanel, self).setEmbedded()

    @overload
    def getToolTipText(self, arg0: 'MouseEvent') -> str:
        """public java.lang.String javax.swing.JComponent.getToolTipText(java.awt.event.MouseEvent)"""
        return str._wrap(super(_JComponent, self).getToolTipText(arg0))

    @override
    @overload
    def printComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.printComponents(java.awt.Graphics)"""
        super(_Container, self).printComponents(arg0)

    @override
    @overload
    def getColorModel(self) -> 'ColorModel':
        """public java.awt.image.ColorModel java.awt.Component.getColorModel()"""
        return 'ColorModel'._wrap(super(Component, self).getColorModel())

    @override
    @overload
    def setFocusTraversalPolicyProvider(self, arg0: bool):
        """public final void java.awt.Container.setFocusTraversalPolicyProvider(boolean)"""
        super(_Container, self).setFocusTraversalPolicyProvider(_boolean.valueOf(arg0))

    @overload
    def getComponentZOrder(self, arg0: 'Component') -> int:
        """public int java.awt.Container.getComponentZOrder(java.awt.Component)"""
        return int._wrap(super(_Container, self).getComponentZOrder(arg0))

    @override
    @overload
    def getDebugGraphicsOptions(self) -> int:
        """public int javax.swing.JComponent.getDebugGraphicsOptions()"""
        return int._wrap(super(JComponent, self).getDebugGraphicsOptions())

    @overload
    def areFocusTraversalKeysSet(self, arg0: int) -> bool:
        """public boolean java.awt.Container.areFocusTraversalKeysSet(int)"""
        return bool._wrap(super(_Container, self).areFocusTraversalKeysSet(_int.valueOf(arg0)))

    @override
    @overload
    def getSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.getSize()"""
        return 'Dimension'._wrap(super(Component, self).getSize())

    @override
    @overload
    def repaint(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.repaint(java.awt.Rectangle)"""
        super(_JComponent, self).repaint(arg0)

    @overload
    def getClientProperty(self, arg0: object) -> object:
        """public final java.lang.Object javax.swing.JComponent.getClientProperty(java.lang.Object)"""
        return object._wrap(super(_JComponent, self).getClientProperty(arg0))

    @override
    @overload
    def unregisterKeyboardAction(self, arg0: 'KeyStroke'):
        """public void javax.swing.JComponent.unregisterKeyboardAction(javax.swing.KeyStroke)"""
        super(_JComponent, self).unregisterKeyboardAction(arg0)

    @overload
    def requestFocus(self, arg0: bool) -> bool:
        """public boolean javax.swing.JComponent.requestFocus(boolean)"""
        return bool._wrap(super(_JComponent, self).requestFocus(_boolean.valueOf(arg0)))

    @override
    @overload
    def setActionMap(self, arg0: 'ActionMap'):
        """public final void javax.swing.JComponent.setActionMap(javax.swing.ActionMap)"""
        super(_JComponent, self).setActionMap(arg0)

    @override
    @overload
    def getX(self) -> int:
        """public int javax.swing.JComponent.getX()"""
        return int._wrap(super(JComponent, self).getX())

    @overload
    def mouseEnter(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseEnter(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseEnter(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def updateUI(self):
        """public void javax.swing.JPanel.updateUI()"""
        super(JPanel, self).updateUI()

    @override
    @overload
    def getToolkit(self) -> 'Toolkit':
        """public java.awt.Toolkit java.awt.Component.getToolkit()"""
        return 'Toolkit'._wrap(super(Component, self).getToolkit())

    @override
    @overload
    def isCursorSet(self) -> bool:
        """public boolean java.awt.Component.isCursorSet()"""
        return bool._wrap(super(Component, self).isCursorSet())

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object, arg2: int):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object,int)"""
        super(_Container, self).add(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def setPreferredSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setPreferredSize(java.awt.Dimension)"""
        super(_JComponent, self).setPreferredSize(arg0)

    @override
    @overload
    def setBounds(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.setBounds(int,int,int,int)"""
        super(_Component, self).setBounds(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def isFocusTraversalPolicySet(self) -> bool:
        """public boolean java.awt.Container.isFocusTraversalPolicySet()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicySet())

    @override
    @overload
    def requestFocus(self):
        """public void javax.swing.JComponent.requestFocus()"""
        super(JComponent, self).requestFocus()

    @override
    @overload
    def getAncestorListeners(self) -> List['AncestorListener']:
        """public javax.swing.event.AncestorListener[] javax.swing.JComponent.getAncestorListeners()"""
        return List['AncestorListener']._wrap(super(JComponent, self).getAncestorListeners())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool._wrap(super(_object, self).equals(arg0))

    @overload
    def getInputMap(self, arg0: int) -> 'InputMap':
        """public final javax.swing.InputMap javax.swing.JComponent.getInputMap(int)"""
        return 'InputMap'._wrap(super(_JComponent, self).getInputMap(_int.valueOf(arg0)))

    @override
    @overload
    def isEnabled(self) -> bool:
        """public boolean java.awt.Component.isEnabled()"""
        return bool._wrap(super(Component, self).isEnabled())

    @override
    @overload
    def move(self, arg0: int, arg1: int):
        """public void java.awt.Component.move(int,int)"""
        super(_Component, self).move(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def addMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.addMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).addMouseMotionListener(arg0)

    @override
    @overload
    def getIgnoreRepaint(self) -> bool:
        """public boolean java.awt.Component.getIgnoreRepaint()"""
        return bool._wrap(super(Component, self).getIgnoreRepaint())

    @overload
    def isFocusCycleRoot(self, arg0: 'Container') -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot(java.awt.Container)"""
        return bool._wrap(super(_Container, self).isFocusCycleRoot(arg0))

    @override
    @overload
    def getGraphics(self) -> 'Graphics':
        """public java.awt.Graphics javax.swing.JComponent.getGraphics()"""
        return 'Graphics'._wrap(super(JComponent, self).getGraphics())

    @override
    @overload
    def setLocale(self, arg0: 'Locale'):
        """public void java.awt.Component.setLocale(java.util.Locale)"""
        super(_Component, self).setLocale(arg0)

    @override
    @overload
    def paintAll(self, arg0: 'Graphics'):
        """public void java.awt.Component.paintAll(java.awt.Graphics)"""
        super(_Component, self).paintAll(arg0)

    @override
    @overload
    def setDoubleBuffered(self, arg0: bool):
        """public void javax.swing.JComponent.setDoubleBuffered(boolean)"""
        super(_JComponent, self).setDoubleBuffered(_boolean.valueOf(arg0))

    @override
    @overload
    def isPreferredSizeSet(self) -> bool:
        """public boolean java.awt.Component.isPreferredSizeSet()"""
        return bool._wrap(super(Component, self).isPreferredSizeSet())

    @override
    @overload
    def addInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.addInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).addInputMethodListener(arg0)

    @override
    @overload
    def removeMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.removeMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).removeMouseWheelListener(arg0)

    @override
    @overload
    def getInputMap(self) -> 'InputMap':
        """public final javax.swing.InputMap javax.swing.JComponent.getInputMap()"""
        return 'InputMap'._wrap(super(JComponent, self).getInputMap())

    @override
    @overload
    def setVisible(self, arg0: bool):
        """public void javax.swing.JComponent.setVisible(boolean)"""
        super(_JComponent, self).setVisible(_boolean.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,byte,byte)"""
        super(_Component, self).firePropertyChange(arg0, _byte.valueOf(arg1), _byte.valueOf(arg2))

    @override
    @overload
    def getUIClassID(self) -> str:
        """public java.lang.String javax.swing.JPanel.getUIClassID()"""
        return str._wrap(super(JPanel, self).getUIClassID())

    @override
    @overload
    def transferFocusDownCycle(self):
        """public void java.awt.Container.transferFocusDownCycle()"""
        super(Container, self).transferFocusDownCycle()

    @override
    @overload
    def getNextFocusableComponent(self) -> 'Component':
        """public java.awt.Component javax.swing.JComponent.getNextFocusableComponent()"""
        return 'Component'._wrap(super(JComponent, self).getNextFocusableComponent())

    @override
    @overload
    def getUI(self) -> 'PanelUI':
        """public javax.swing.plaf.PanelUI javax.swing.JPanel.getUI()"""
        return 'PanelUI'._wrap(super(JPanel, self).getUI())

    @override
    @overload
    def setBounds(self, arg0: 'Rectangle'):
        """public void java.awt.Component.setBounds(java.awt.Rectangle)"""
        super(_Component, self).setBounds(arg0)

    @override
    @overload
    def repaint(self, arg0: int):
        """public void java.awt.Component.repaint(long)"""
        super(_Component, self).repaint(_long.valueOf(arg0))

    @override
    @overload
    def removeHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.removeHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).removeHierarchyBoundsListener(arg0)

    @override
    @overload
    def getComponentPopupMenu(self) -> 'JPopupMenu':
        """public javax.swing.JPopupMenu javax.swing.JComponent.getComponentPopupMenu()"""
        return 'JPopupMenu'._wrap(super(JComponent, self).getComponentPopupMenu())

    @override
    @overload
    def getMousePosition(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getMousePosition() throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(Component, self).getMousePosition())

    @override
    @overload
    def getComponentCount(self) -> int:
        """public int java.awt.Container.getComponentCount()"""
        return int._wrap(super(Container, self).getComponentCount())

    @override
    @overload
    def getInputMethodRequests(self) -> 'InputMethodRequests':
        """public java.awt.im.InputMethodRequests java.awt.Component.getInputMethodRequests()"""
        return 'InputMethodRequests'._wrap(super(Component, self).getInputMethodRequests())

    @override
    @overload
    def setMaximumSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setMaximumSize(java.awt.Dimension)"""
        super(_JComponent, self).setMaximumSize(arg0)

    @override
    @overload
    def setRequestFocusEnabled(self, arg0: bool):
        """public void javax.swing.JComponent.setRequestFocusEnabled(boolean)"""
        super(_JComponent, self).setRequestFocusEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def setFocusTraversalKeys(self, arg0: int, arg1: 'Set'):
        """public void javax.swing.JComponent.setFocusTraversalKeys(int,java.util.Set<? extends java.awt.AWTKeyStroke>)"""
        super(_JComponent, self).setFocusTraversalKeys(_int.valueOf(arg0), arg1)

    @overload
    def inside(self, arg0: int, arg1: int) -> bool:
        """public boolean java.awt.Component.inside(int,int)"""
        return bool._wrap(super(_Component, self).inside(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def requestDefaultFocus(self) -> bool:
        """public boolean javax.swing.JComponent.requestDefaultFocus()"""
        return bool._wrap(super(JComponent, self).requestDefaultFocus())

    @override
    @overload
    def disable(self):
        """public void javax.swing.JComponent.disable()"""
        super(JComponent, self).disable()

    @override
    @overload
    def showContent(self, arg0: bool):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.showContent(boolean)"""
        super(_EditorPanel, self).showContent(_boolean.valueOf(arg0))

    @override
    @overload
    def enableInputMethods(self, arg0: bool):
        """public void java.awt.Component.enableInputMethods(boolean)"""
        super(_Component, self).enableInputMethods(_boolean.valueOf(arg0))

    @override
    @overload
    def layout(self):
        """public void java.awt.Container.layout()"""
        super(Container, self).layout()

    @override
    @overload
    def getInputMethodListeners(self) -> List['InputMethodListener']:
        """public synchronized java.awt.event.InputMethodListener[] java.awt.Component.getInputMethodListeners()"""
        return List['InputMethodListener']._wrap(super(Component, self).getInputMethodListeners())

    @override
    @overload
    def paint(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.paint(java.awt.Graphics)"""
        super(_JComponent, self).paint(arg0)

    @override
    @overload
    def transferFocus(self):
        """public void java.awt.Component.transferFocus()"""
        super(Component, self).transferFocus()

    @override
    @overload
    def removeComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.removeComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).removeComponentListener(arg0)

    @override
    @overload
    def getCursor(self) -> 'Cursor':
        """public java.awt.Cursor java.awt.Component.getCursor()"""
        return 'Cursor'._wrap(super(Component, self).getCursor())

    @override
    @overload
    def setMinimumSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setMinimumSize(java.awt.Dimension)"""
        super(_JComponent, self).setMinimumSize(arg0)

    @override
    @overload
    def getAdvancedPanel(self) -> 'JPanel':
        """public javax.swing.JPanel com.badlogic.gdx.tools.flame.EditorPanel.getAdvancedPanel()"""
        return 'JPanel'._wrap(super(EditorPanel, self).getAdvancedPanel())

    @override
    @overload
    def getContainerListeners(self) -> List['ContainerListener']:
        """public synchronized java.awt.event.ContainerListener[] java.awt.Container.getContainerListeners()"""
        return List['ContainerListener']._wrap(super(Container, self).getContainerListeners())

    @override
    @overload
    def setLocation(self, arg0: 'Point'):
        """public void java.awt.Component.setLocation(java.awt.Point)"""
        super(_Component, self).setLocation(arg0)

    @override
    @overload
    def setSize(self, arg0: 'Dimension'):
        """public void java.awt.Component.setSize(java.awt.Dimension)"""
        super(_Component, self).setSize(arg0)

    @override
    @overload
    def removeAll(self):
        """public void java.awt.Container.removeAll()"""
        super(Container, self).removeAll()

    @overload
    def getPopupLocation(self, arg0: 'MouseEvent') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getPopupLocation(java.awt.event.MouseEvent)"""
        return 'Point'._wrap(super(_JComponent, self).getPopupLocation(arg0))

    @overload
    def isAncestorOf(self, arg0: 'Component') -> bool:
        """public boolean java.awt.Container.isAncestorOf(java.awt.Component)"""
        return bool._wrap(super(_Container, self).isAncestorOf(arg0))

    @override
    @overload
    def setOpaque(self, arg0: bool):
        """public void javax.swing.JComponent.setOpaque(boolean)"""
        super(_JComponent, self).setOpaque(_boolean.valueOf(arg0))

    @overload
    def contains(self, arg0: int, arg1: int) -> bool:
        """public boolean javax.swing.JComponent.contains(int,int)"""
        return bool._wrap(super(_JComponent, self).contains(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def setCursor(self, arg0: 'Cursor'):
        """public void java.awt.Component.setCursor(java.awt.Cursor)"""
        super(_Component, self).setCursor(arg0)

    @override
    @overload
    def validate(self):
        """public void java.awt.Container.validate()"""
        super(Container, self).validate()

    @override
    @overload
    def getMaximumSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getMaximumSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getMaximumSize())

    @override
    @overload
    def getBackground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getBackground()"""
        return 'Color'._wrap(super(Component, self).getBackground())

    @overload
    def createImage(self, arg0: 'ImageProducer') -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(java.awt.image.ImageProducer)"""
        return 'Image'._wrap(super(_Component, self).createImage(arg0))

    @override
    @overload
    def setVerifyInputWhenFocusTarget(self, arg0: bool):
        """public void javax.swing.JComponent.setVerifyInputWhenFocusTarget(boolean)"""
        super(_JComponent, self).setVerifyInputWhenFocusTarget(_boolean.valueOf(arg0))

    @override
    @overload
    def removePropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0, arg1)

    @override
    @overload
    def countComponents(self) -> int:
        """public int java.awt.Container.countComponents()"""
        return int._wrap(super(Container, self).countComponents()) 
 
 
# CLASS: com.badlogic.gdx.tools.flame.BillboardBatchPanel
from pyquantum_helper import import_once as _import_once
import javax.accessibility.AccessibleContext as AccessibleContext
import javax.swing.JToolTip as JToolTip
import java.awt.event.HierarchyBoundsListener as HierarchyBoundsListener
import java.awt.event.ActionListener as _ActionListener
_ActionListener = _ActionListener
import java.awt.ComponentOrientation as _ComponentOrientation
_ComponentOrientation = _ComponentOrientation
import java.awt.image.ImageProducer as ImageProducer
import java.awt.GraphicsConfiguration as GraphicsConfiguration
import java.awt.Graphics as _Graphics
_Graphics = _Graphics
import javax.swing.JToolTip as _JToolTip
_JToolTip = _JToolTip
import java.awt.Container as _Container
_Container = _Container
import java.awt.MenuComponent as MenuComponent
import java.awt.im.InputMethodRequests as _InputMethodRequests
_InputMethodRequests = _InputMethodRequests
import java.awt.FocusTraversalPolicy as _FocusTraversalPolicy
_FocusTraversalPolicy = _FocusTraversalPolicy
import java.lang.Byte as _byte
import java.awt.Dimension as Dimension
import java.awt.Font as _Font
_Font = _Font
import javax.swing.plaf.PanelUI as _PanelUI
_PanelUI = _PanelUI
import java.awt.event.ContainerListener as ContainerListener
import javax.swing.event.AncestorListener as AncestorListener
import java.awt.AWTEvent as AWTEvent
import javax.swing.JPanel as JPanel
import java.awt.image.ColorModel as _ColorModel
_ColorModel = _ColorModel
import java.lang.Object as _object
import java.awt.ComponentOrientation as ComponentOrientation
import java.awt.im.InputContext as _InputContext
_InputContext = _InputContext
from builtins import float
import java.awt.event.HierarchyListener as HierarchyListener
import java.awt.event.InputMethodListener as InputMethodListener
from typing import List
import java.awt.event.MouseWheelListener as _MouseWheelListener
_MouseWheelListener = _MouseWheelListener
import java.awt.event.KeyListener as KeyListener
import java.awt.Component as Component
from builtins import int
import java.awt.LayoutManager as LayoutManager
import java.awt.FontMetrics as _FontMetrics
_FontMetrics = _FontMetrics
import java.awt.Container as Container
from builtins import type
import java.awt.image.VolatileImage as _VolatileImage
_VolatileImage = _VolatileImage
import java.awt.Shape as Shape
import com.badlogic.gdx.tools.flame.EditorPanel as _EditorPanel
_EditorPanel = _EditorPanel
import java.awt.Rectangle as Rectangle
import java.awt.event.ContainerListener as _ContainerListener
_ContainerListener = _ContainerListener
import java.awt.event.HierarchyListener as _HierarchyListener
_HierarchyListener = _HierarchyListener
import java.lang.String as _string
import javax.swing.InputVerifier as _InputVerifier
_InputVerifier = _InputVerifier
import java.awt.Insets as _Insets
_Insets = _Insets
import javax.swing.border.Border as _Border
_Border = _Border
import java.awt.event.ComponentListener as _ComponentListener
_ComponentListener = _ComponentListener
import javax.swing.ActionMap as ActionMap
import java.beans.VetoableChangeListener as VetoableChangeListener
import java.awt.event.ComponentListener as ComponentListener
import com.badlogic.gdx.tools.flame.BillboardBatchPanel as _BillboardBatchPanel
_BillboardBatchPanel = _BillboardBatchPanel
import javax.swing.KeyStroke as KeyStroke
import java.beans.VetoableChangeListener as _VetoableChangeListener
_VetoableChangeListener = _VetoableChangeListener
from builtins import object
import java.awt.event.KeyListener as _KeyListener
_KeyListener = _KeyListener
import java.awt.Component.BaselineResizeBehavior as BaselineResizeBehavior
import java.awt.Component as _Component_BaselineResizeBehavior
_BaselineResizeBehavior = _Component_BaselineResizeBehavior.BaselineResizeBehavior
import java.awt.Cursor as _Cursor
_Cursor = _Cursor
import java.awt.im.InputMethodRequests as InputMethodRequests
import java.lang.Long as _long
import javax.swing.JPanel as _JPanel
_JPanel = _JPanel
import java.awt.event.FocusListener as _FocusListener
_FocusListener = _FocusListener
import java.lang.Character as _char
import javax.swing.TransferHandler as TransferHandler
import java.awt.event.FocusEvent.Cause as Cause
import javax.swing.JComponent as JComponent
import javax.accessibility.AccessibleContext as _AccessibleContext
_AccessibleContext = _AccessibleContext
import java.awt.event.MouseWheelListener as MouseWheelListener
import java.util.Set as _Set
_Set = _Set
import java.awt.image.ColorModel as ColorModel
import java.lang.Boolean as _boolean
import java.awt.event.MouseMotionListener as MouseMotionListener
import java.util.EventListener as EventListener
import java.awt.Insets as Insets
import javax.swing.KeyStroke as _KeyStroke
_KeyStroke = _KeyStroke
import java.awt.GraphicsConfiguration as _GraphicsConfiguration
_GraphicsConfiguration = _GraphicsConfiguration
import java.awt.dnd.DropTarget as _DropTarget
_DropTarget = _DropTarget
from builtins import bool
import java.beans.PropertyChangeListener as _PropertyChangeListener
_PropertyChangeListener = _PropertyChangeListener
import java.awt.LayoutManager as _LayoutManager
_LayoutManager = _LayoutManager
import java.awt.PopupMenu as PopupMenu
import java.util.EventListener as _EventListener
_EventListener = _EventListener
import java.awt.im.InputContext as InputContext
import java.awt.Component as _Component
_Component = _Component
import java.awt.Font as Font
import java.awt.image.VolatileImage as VolatileImage
import java.awt.dnd.DropTarget as DropTarget
import java.lang.String as _String
_String = _String
import java.lang.Float as _float
import java.awt.Cursor as Cursor
import java.awt.event.MouseListener as _MouseListener
_MouseListener = _MouseListener
import java.awt.Toolkit as _Toolkit
_Toolkit = _Toolkit
import java.io.PrintStream as PrintStream
import javax.swing.JRootPane as _JRootPane
_JRootPane = _JRootPane
import java.awt.Dimension as _Dimension
_Dimension = _Dimension
import java.awt.event.ActionListener as ActionListener
import java.awt.event.MouseEvent as MouseEvent
import java.awt.Color as _Color
_Color = _Color
import javax.swing.JPopupMenu as _JPopupMenu
_JPopupMenu = _JPopupMenu
import javax.swing.InputMap as _InputMap
_InputMap = _InputMap
import java.awt.event.MouseListener as MouseListener
import java.lang.Class as _Class
_Class = _Class
import java.util.Locale as Locale
import java.lang.Double as _double
import javax.swing.plaf.PanelUI as PanelUI
import java.awt.Point as _Point
_Point = _Point
import java.lang.Object as _Object
_Object = _Object
import java.beans.PropertyChangeListener as PropertyChangeListener
import javax.swing.border.Border as Border
import javax.swing.JComponent as _JComponent
_JComponent = _JComponent
import javax.swing.InputVerifier as InputVerifier
import java.io.PrintWriter as PrintWriter
import java.awt.Point as Point
import javax.swing.event.AncestorListener as _AncestorListener
_AncestorListener = _AncestorListener
import java.lang.Short as _short
import java.awt.Toolkit as Toolkit
import java.awt.event.HierarchyBoundsListener as _HierarchyBoundsListener
_HierarchyBoundsListener = _HierarchyBoundsListener
import javax.swing.TransferHandler as _TransferHandler
_TransferHandler = _TransferHandler
import javax.swing.InputMap as InputMap
import java.awt.Rectangle as _Rectangle
_Rectangle = _Rectangle
import javax.swing.JRootPane as JRootPane
import java.awt.Event as Event
import java.awt.event.FocusListener as FocusListener
import java.awt.image.ImageObserver as ImageObserver
from builtins import str
from pyquantum_helper import override
import javax.swing.ActionMap as _ActionMap
_ActionMap = _ActionMap
import java.awt.FocusTraversalPolicy as FocusTraversalPolicy
import java.awt.event.MouseMotionListener as _MouseMotionListener
_MouseMotionListener = _MouseMotionListener
import java.awt.event.InputMethodListener as _InputMethodListener
_InputMethodListener = _InputMethodListener
try:
    from pygdx.graphics.g3d.particles import batches
except ImportError:
    batches = _import_once("pygdx.graphics.g3d.particles.batches")

import javax.swing.JPopupMenu as JPopupMenu
import java.util.Set as Set
import java.lang.Integer as _int
import java.awt.Image as _Image
_Image = _Image
import java.awt.FontMetrics as FontMetrics
import java.awt.Color as Color
import java.awt.Image as Image
import java.awt.Graphics as Graphics
import java.awt.ImageCapabilities as ImageCapabilities
import java.util.Locale as _Locale
_Locale = _Locale
 
class BillboardBatchPanel():
    """com.badlogic.gdx.tools.flame.BillboardBatchPanel"""
 
    @staticmethod
    def _wrap(java_value: _BillboardBatchPanel) -> 'BillboardBatchPanel':
        return BillboardBatchPanel(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _BillboardBatchPanel):
        """
        Dynamic initializer for BillboardBatchPanel.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_BillboardBatchPanel__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_BillboardBatchPanel__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def removeVetoableChangeListener(self, arg0: 'VetoableChangeListener'):
        """public synchronized void javax.swing.JComponent.removeVetoableChangeListener(java.beans.VetoableChangeListener)"""
        super(_JComponent, self).removeVetoableChangeListener(arg0)

    @override
    @overload
    def getComponents(self) -> List['Component']:
        """public java.awt.Component[] java.awt.Container.getComponents()"""
        return List['Component']._wrap(super(Container, self).getComponents())

    @override
    @overload
    def setDebugGraphicsOptions(self, arg0: int):
        """public void javax.swing.JComponent.setDebugGraphicsOptions(int)"""
        super(_JComponent, self).setDebugGraphicsOptions(_int.valueOf(arg0))

    @override
    @overload
    def isValid(self) -> bool:
        """public boolean java.awt.Component.isValid()"""
        return bool._wrap(super(Component, self).isValid())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def getDefaultLocale() -> 'Locale':
        """public static java.util.Locale javax.swing.JComponent.getDefaultLocale()"""
        return Locale._wrap(_JComponent.getDefaultLocale())

    @override
    @overload
    def getInputVerifier(self) -> 'InputVerifier':
        """public javax.swing.InputVerifier javax.swing.JComponent.getInputVerifier()"""
        return 'InputVerifier'._wrap(super(JComponent, self).getInputVerifier())

    @override
    @overload
    def list(self, arg0: 'PrintStream', arg1: int):
        """public void java.awt.Container.list(java.io.PrintStream,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @override
    @overload
    def setUI(self, arg0: 'PanelUI'):
        """public void javax.swing.JPanel.setUI(javax.swing.plaf.PanelUI)"""
        super(_JPanel, self).setUI(arg0)

    @override
    @overload
    def getFocusTraversalPolicy(self) -> 'FocusTraversalPolicy':
        """public java.awt.FocusTraversalPolicy java.awt.Container.getFocusTraversalPolicy()"""
        return 'FocusTraversalPolicy'._wrap(super(Container, self).getFocusTraversalPolicy())

    @override
    @overload
    def getParent(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getParent()"""
        return 'Container'._wrap(super(Component, self).getParent())

    @override
    @overload
    def paintImmediately(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.paintImmediately(java.awt.Rectangle)"""
        super(_JComponent, self).paintImmediately(arg0)

    @staticmethod
    @overload
    def setDefaultLocale(arg0: 'Locale'):
        """public static void javax.swing.JComponent.setDefaultLocale(java.util.Locale)"""
        _JComponent.setDefaultLocale(arg0)

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,float,float)"""
        super(_Component, self).firePropertyChange(arg0, _float.valueOf(arg1), _float.valueOf(arg2))

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object)"""
        super(_Container, self).add(arg0, arg1)

    @override
    @overload
    def getLocale(self) -> 'Locale':
        """public java.util.Locale java.awt.Component.getLocale()"""
        return 'Locale'._wrap(super(Component, self).getLocale())

    @override
    @overload
    def setInheritsPopupMenu(self, arg0: bool):
        """public void javax.swing.JComponent.setInheritsPopupMenu(boolean)"""
        super(_JComponent, self).setInheritsPopupMenu(_boolean.valueOf(arg0))

    @override
    @overload
    def getHierarchyListeners(self) -> List['HierarchyListener']:
        """public synchronized java.awt.event.HierarchyListener[] java.awt.Component.getHierarchyListeners()"""
        return List['HierarchyListener']._wrap(super(Component, self).getHierarchyListeners())

    @override
    @overload
    def nextFocus(self):
        """public void java.awt.Component.nextFocus()"""
        super(Component, self).nextFocus()

    @override
    @overload
    def isPaintingTile(self) -> bool:
        """public boolean javax.swing.JComponent.isPaintingTile()"""
        return bool._wrap(super(JComponent, self).isPaintingTile())

    @override
    @overload
    def getContentPanel(self) -> 'JPanel':
        """public javax.swing.JPanel com.badlogic.gdx.tools.flame.EditorPanel.getContentPanel()"""
        return 'JPanel'._wrap(super(EditorPanel, self).getContentPanel())

    @override
    @overload
    def isDisplayable(self) -> bool:
        """public boolean java.awt.Component.isDisplayable()"""
        return bool._wrap(super(Component, self).isDisplayable())

    @override
    @overload
    def getBounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.getBounds()"""
        return 'Rectangle'._wrap(super(Component, self).getBounds())

    @override
    @overload
    def removeMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.removeMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).removeMouseMotionListener(arg0)

    @override
    @overload
    def isShowing(self) -> bool:
        """public boolean java.awt.Component.isShowing()"""
        return bool._wrap(super(Component, self).isShowing())

    @override
    @overload
    def getDropTarget(self) -> 'DropTarget':
        """public synchronized java.awt.dnd.DropTarget java.awt.Component.getDropTarget()"""
        return 'DropTarget'._wrap(super(Component, self).getDropTarget())

    @override
    @overload
    def isFontSet(self) -> bool:
        """public boolean java.awt.Component.isFontSet()"""
        return bool._wrap(super(Component, self).isFontSet())

    @overload
    def mouseUp(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseUp(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseUp(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def setIgnoreRepaint(self, arg0: bool):
        """public void java.awt.Component.setIgnoreRepaint(boolean)"""
        super(_Component, self).setIgnoreRepaint(_boolean.valueOf(arg0))

    @override
    @overload
    def getPropertyChangeListeners(self) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners()"""
        return List['PropertyChangeListener']._wrap(super(Component, self).getPropertyChangeListeners())

    @override
    @overload
    def isBackgroundSet(self) -> bool:
        """public boolean java.awt.Component.isBackgroundSet()"""
        return bool._wrap(super(Component, self).isBackgroundSet())

    @override
    @overload
    def getLocation(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocation()"""
        return 'Point'._wrap(super(Component, self).getLocation())

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int._wrap(super(object, self).hashCode())

    @override
    @overload
    def location(self) -> 'Point':
        """public java.awt.Point java.awt.Component.location()"""
        return 'Point'._wrap(super(Component, self).location())

    @override
    @overload
    def getComponentOrientation(self) -> 'ComponentOrientation':
        """public java.awt.ComponentOrientation java.awt.Component.getComponentOrientation()"""
        return 'ComponentOrientation'._wrap(super(Component, self).getComponentOrientation())

    @override
    @overload
    def addHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.addHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).addHierarchyListener(arg0)

    @override
    @overload
    def getInheritsPopupMenu(self) -> bool:
        """public boolean javax.swing.JComponent.getInheritsPopupMenu()"""
        return bool._wrap(super(JComponent, self).getInheritsPopupMenu())

    @override
    @overload
    def setComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Component.setComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Component, self).setComponentOrientation(arg0)

    @override
    @overload
    def getFocusCycleRootAncestor(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getFocusCycleRootAncestor()"""
        return 'Container'._wrap(super(Component, self).getFocusCycleRootAncestor())

    @override
    @overload
    def show(self, arg0: bool):
        """public void java.awt.Component.show(boolean)"""
        super(_Component, self).show(_boolean.valueOf(arg0))

    @staticmethod
    @overload
    def addContent(arg0: 'JPanel', arg1: int, arg2: int, arg3: 'JComponent', arg4: bool, arg5: int, arg6: int, arg7: float, arg8: float):
        """public static void com.badlogic.gdx.tools.flame.EditorPanel.addContent(javax.swing.JPanel,int,int,javax.swing.JComponent,boolean,int,int,float,float)"""
        _EditorPanel.addContent(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3, _boolean.valueOf(arg4), _int.valueOf(arg5), _int.valueOf(arg6), _float.valueOf(arg7), _float.valueOf(arg8))

    @override
    @overload
    def grabFocus(self):
        """public void javax.swing.JComponent.grabFocus()"""
        super(JComponent, self).grabFocus()

    @overload
    def locate(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.locate(int,int)"""
        return 'Component'._wrap(super(_Container, self).locate(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def isPaintingForPrint(self) -> bool:
        """public final boolean javax.swing.JComponent.isPaintingForPrint()"""
        return bool._wrap(super(JComponent, self).isPaintingForPrint())

    @overload
    def keyDown(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyDown(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyDown(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,int,int)"""
        super(_JComponent, self).firePropertyChange(arg0, _int.valueOf(arg1), _int.valueOf(arg2))

    @override
    @overload
    def getLayout(self) -> 'LayoutManager':
        """public java.awt.LayoutManager java.awt.Container.getLayout()"""
        return 'LayoutManager'._wrap(super(Container, self).getLayout())

    @override
    @overload
    def preferredSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.preferredSize()"""
        return 'Dimension'._wrap(super(Container, self).preferredSize())

    @override
    @overload
    def addNotify(self):
        """public void javax.swing.JComponent.addNotify()"""
        super(JComponent, self).addNotify()

    @override
    @overload
    def setSize(self, arg0: int, arg1: int):
        """public void java.awt.Component.setSize(int,int)"""
        super(_Component, self).setSize(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.repaint(int,int,int,int)"""
        super(_Component, self).repaint(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @overload
    def requestFocusInWindow(self, arg0: 'Cause') -> bool:
        """public boolean java.awt.Component.requestFocusInWindow(java.awt.event.FocusEvent$Cause)"""
        return bool._wrap(super(_Component, self).requestFocusInWindow(arg0))

    @override
    @overload
    def remove(self, arg0: int):
        """public void java.awt.Container.remove(int)"""
        super(_Container, self).remove(_int.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,long,long)"""
        super(_Component, self).firePropertyChange(arg0, _long.valueOf(arg1), _long.valueOf(arg2))

    @override
    @overload
    def update(self, arg0: 'FlameMain'):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.update(com.badlogic.gdx.tools.flame.FlameMain)"""
        super(_EditorPanel, self).update(arg0)

    @override
    @overload
    def setFocusCycleRoot(self, arg0: bool):
        """public void java.awt.Container.setFocusCycleRoot(boolean)"""
        super(_Container, self).setFocusCycleRoot(_boolean.valueOf(arg0))

    @overload
    def keyUp(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyUp(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyUp(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def setBackground(self, arg0: 'Color'):
        """public void javax.swing.JComponent.setBackground(java.awt.Color)"""
        super(_JComponent, self).setBackground(arg0)

    @override
    @overload
    def doLayout(self):
        """public void java.awt.Container.doLayout()"""
        super(Container, self).doLayout()

    @override
    @overload
    def enable(self):
        """public void javax.swing.JComponent.enable()"""
        super(JComponent, self).enable()

    @override
    @overload
    def getInsets(self) -> 'Insets':
        """public java.awt.Insets javax.swing.JComponent.getInsets()"""
        return 'Insets'._wrap(super(JComponent, self).getInsets())

    @override
    @overload
    def setNextFocusableComponent(self, arg0: 'Component'):
        """public void javax.swing.JComponent.setNextFocusableComponent(java.awt.Component)"""
        super(_JComponent, self).setNextFocusableComponent(arg0)

    @override
    @overload
    def getAlignmentY(self) -> float:
        """public float javax.swing.JComponent.getAlignmentY()"""
        return float._wrap(super(JComponent, self).getAlignmentY())

    @overload
    def checkImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @override
    @overload
    def getFocusTraversalKeysEnabled(self) -> bool:
        """public boolean java.awt.Component.getFocusTraversalKeysEnabled()"""
        return bool._wrap(super(Component, self).getFocusTraversalKeysEnabled())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getRootPane(self) -> 'JRootPane':
        """public javax.swing.JRootPane javax.swing.JComponent.getRootPane()"""
        return 'JRootPane'._wrap(super(JComponent, self).getRootPane())

    @override
    @overload
    def invalidate(self):
        """public void java.awt.Container.invalidate()"""
        super(Container, self).invalidate()

    @override
    @overload
    def resetKeyboardActions(self):
        """public void javax.swing.JComponent.resetKeyboardActions()"""
        super(JComponent, self).resetKeyboardActions()

    @overload
    def getComponent(self, arg0: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponent(int)"""
        return 'Component'._wrap(super(_Container, self).getComponent(_int.valueOf(arg0)))

    @override
    @overload
    def setName(self, arg0: str):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setName(java.lang.String)"""
        super(_EditorPanel, self).setName(arg0)

    @override
    @overload
    def addPropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Container.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Container, self).addPropertyChangeListener(arg0, arg1)

    @override
    @overload
    def setInputMap(self, arg0: int, arg1: 'InputMap'):
        """public final void javax.swing.JComponent.setInputMap(int,javax.swing.InputMap)"""
        super(_JComponent, self).setInputMap(_int.valueOf(arg0), arg1)

    @override
    @overload
    def removePropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0)

    @override
    @overload
    def applyComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Container.applyComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Container, self).applyComponentOrientation(arg0)

    @override
    @overload
    def setBorder(self, arg0: 'Border'):
        """public void javax.swing.JComponent.setBorder(javax.swing.border.Border)"""
        super(_JComponent, self).setBorder(arg0)

    @override
    @overload
    def remove(self, arg0: 'MenuComponent'):
        """public void java.awt.Component.remove(java.awt.MenuComponent)"""
        super(_Component, self).remove(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintStream'):
        """public void java.awt.Component.list(java.io.PrintStream)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def removeMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.removeMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).removeMouseListener(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintWriter'):
        """public void java.awt.Component.list(java.io.PrintWriter)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def getKeyListeners(self) -> List['KeyListener']:
        """public synchronized java.awt.event.KeyListener[] java.awt.Component.getKeyListeners()"""
        return List['KeyListener']._wrap(super(Component, self).getKeyListeners())

    @override
    @overload
    def getInputContext(self) -> 'InputContext':
        """public java.awt.im.InputContext java.awt.Component.getInputContext()"""
        return 'InputContext'._wrap(super(Component, self).getInputContext())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,double,double)"""
        super(_Component, self).firePropertyChange(arg0, _double.valueOf(arg1), _double.valueOf(arg2))

    @override
    @overload
    def removeAncestorListener(self, arg0: 'AncestorListener'):
        """public void javax.swing.JComponent.removeAncestorListener(javax.swing.event.AncestorListener)"""
        super(_JComponent, self).removeAncestorListener(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintWriter', arg1: int):
        """public void java.awt.Container.list(java.io.PrintWriter,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @overload
    def checkImage(self, arg0: 'Image', arg1: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, arg1))

    @override
    @overload
    def removeFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.removeFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).removeFocusListener(arg0)

    @overload
    def mouseDown(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDown(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDown(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def setIsAlwayShown(self, arg0: bool):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setIsAlwayShown(boolean)"""
        super(_EditorPanel, self).setIsAlwayShown(_boolean.valueOf(arg0))

    @overload
    def getConditionForKeyStroke(self, arg0: 'KeyStroke') -> int:
        """public int javax.swing.JComponent.getConditionForKeyStroke(javax.swing.KeyStroke)"""
        return int._wrap(super(_JComponent, self).getConditionForKeyStroke(arg0))

    @override
    @overload
    def getTreeLock(self) -> object:
        """public final java.lang.Object java.awt.Component.getTreeLock()"""
        return object._wrap(super(Component, self).getTreeLock())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @override
    @overload
    def addVetoableChangeListener(self, arg0: 'VetoableChangeListener'):
        """public synchronized void javax.swing.JComponent.addVetoableChangeListener(java.beans.VetoableChangeListener)"""
        super(_JComponent, self).addVetoableChangeListener(arg0)

    @overload
    def contains(self, arg0: 'Point') -> bool:
        """public boolean java.awt.Component.contains(java.awt.Point)"""
        return bool._wrap(super(_Component, self).contains(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,short,short)"""
        super(_Component, self).firePropertyChange(arg0, _short.valueOf(arg1), _short.valueOf(arg2))

    @override
    @overload
    def dispatchEvent(self, arg0: 'AWTEvent'):
        """public final void java.awt.Component.dispatchEvent(java.awt.AWTEvent)"""
        super(_Component, self).dispatchEvent(arg0)

    @override
    @overload
    def removeContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.removeContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).removeContainerListener(arg0)

    @override
    @overload
    def getGraphicsConfiguration(self) -> 'GraphicsConfiguration':
        """public java.awt.GraphicsConfiguration java.awt.Component.getGraphicsConfiguration()"""
        return 'GraphicsConfiguration'._wrap(super(Component, self).getGraphicsConfiguration())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: bool, arg2: bool):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,boolean,boolean)"""
        super(_JComponent, self).firePropertyChange(arg0, _boolean.valueOf(arg1), _boolean.valueOf(arg2))

    @override
    @overload
    def registerKeyboardAction(self, arg0: 'ActionListener', arg1: str, arg2: 'KeyStroke', arg3: int):
        """public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,java.lang.String,javax.swing.KeyStroke,int)"""
        super(_JComponent, self).registerKeyboardAction(arg0, arg1, arg2, _int.valueOf(arg3))

    @overload
    def findComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(arg0))

    @override
    @overload
    def resize(self, arg0: int, arg1: int):
        """public void java.awt.Component.resize(int,int)"""
        super(_Component, self).resize(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getHeight(self) -> int:
        """public int javax.swing.JComponent.getHeight()"""
        return int._wrap(super(JComponent, self).getHeight())

    @override
    @overload
    def getTransferHandler(self) -> 'TransferHandler':
        """public javax.swing.TransferHandler javax.swing.JComponent.getTransferHandler()"""
        return 'TransferHandler'._wrap(super(JComponent, self).getTransferHandler())

    @overload
    def imageUpdate(self, arg0: 'Image', arg1: int, arg2: int, arg3: int, arg4: int, arg5: int) -> bool:
        """public boolean java.awt.Component.imageUpdate(java.awt.Image,int,int,int,int,int)"""
        return bool._wrap(super(_Component, self).imageUpdate(arg0, _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4), _int.valueOf(arg5)))

    @override
    @overload
    def getWidth(self) -> int:
        """public int javax.swing.JComponent.getWidth()"""
        return int._wrap(super(JComponent, self).getWidth())

    @override
    @overload
    def transferFocusBackward(self):
        """public void java.awt.Component.transferFocusBackward()"""
        super(Component, self).transferFocusBackward()

    @overload
    def getPropertyChangeListeners(self, arg0: str) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners(java.lang.String)"""
        return List['PropertyChangeListener']._wrap(super(_Component, self).getPropertyChangeListeners(arg0))

    @override
    @overload
    def getName(self) -> str:
        """public java.lang.String com.badlogic.gdx.tools.flame.EditorPanel.getName()"""
        return str._wrap(super(EditorPanel, self).getName())

    @staticmethod
    @overload
    def isLightweightComponent(arg0: 'Component') -> bool:
        """public static boolean javax.swing.JComponent.isLightweightComponent(java.awt.Component)"""
        return bool._wrap(_JComponent.isLightweightComponent(arg0))

    @override
    @overload
    def getBorder(self) -> 'Border':
        """public javax.swing.border.Border javax.swing.JComponent.getBorder()"""
        return 'Border'._wrap(super(JComponent, self).getBorder())

    @override
    @overload
    def printAll(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.printAll(java.awt.Graphics)"""
        super(_JComponent, self).printAll(arg0)

    @override
    @overload
    def addComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.addComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).addComponentListener(arg0)

    @override
    @overload
    def getBaselineResizeBehavior(self) -> 'BaselineResizeBehavior.Component$BaselineResizeBehavior':
        """public java.awt.Component$BaselineResizeBehavior javax.swing.JComponent.getBaselineResizeBehavior()"""
        return 'BaselineResizeBehavior.Component$BaselineResizeBehavior'._wrap(super(JComponent, self).getBaselineResizeBehavior())

    @override
    @overload
    def print(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.print(java.awt.Graphics)"""
        super(_JComponent, self).print(arg0)

    @override
    @overload
    def setInputVerifier(self, arg0: 'InputVerifier'):
        """public void javax.swing.JComponent.setInputVerifier(javax.swing.InputVerifier)"""
        super(_JComponent, self).setInputVerifier(arg0)

    @override
    @overload
    def addAncestorListener(self, arg0: 'AncestorListener'):
        """public void javax.swing.JComponent.addAncestorListener(javax.swing.event.AncestorListener)"""
        super(_JComponent, self).addAncestorListener(arg0)

    @override
    @overload
    def getFont(self) -> 'Font':
        """public java.awt.Font java.awt.Component.getFont()"""
        return 'Font'._wrap(super(Component, self).getFont())

    @override
    @overload
    def setFont(self, arg0: 'Font'):
        """public void javax.swing.JComponent.setFont(java.awt.Font)"""
        super(_JComponent, self).setFont(arg0)

    @override
    @overload
    def isOptimizedDrawingEnabled(self) -> bool:
        """public boolean javax.swing.JComponent.isOptimizedDrawingEnabled()"""
        return bool._wrap(super(JComponent, self).isOptimizedDrawingEnabled())

    @override
    @overload
    def isValidateRoot(self) -> bool:
        """public boolean javax.swing.JComponent.isValidateRoot()"""
        return bool._wrap(super(JComponent, self).isValidateRoot())

    @overload
    def prepareImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @override
    @overload
    def setHasAdvanced(self, arg0: bool):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setHasAdvanced(boolean)"""
        super(_EditorPanel, self).setHasAdvanced(_boolean.valueOf(arg0))

    @override
    @overload
    def setForeground(self, arg0: 'Color'):
        """public void javax.swing.JComponent.setForeground(java.awt.Color)"""
        super(_JComponent, self).setForeground(arg0)

    @overload
    def mouseDrag(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDrag(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDrag(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def isOpaque(self) -> bool:
        """public boolean javax.swing.JComponent.isOpaque()"""
        return bool._wrap(super(JComponent, self).isOpaque())

    @overload
    def createVolatileImage(self, arg0: int, arg1: int, arg2: 'ImageCapabilities') -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int,java.awt.ImageCapabilities) throws java.awt.AWTException"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1), arg2))

    @override
    @overload
    def bounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.bounds()"""
        return 'Rectangle'._wrap(super(Component, self).bounds())

    @override
    @overload
    def update(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.update(java.awt.Graphics)"""
        super(_JComponent, self).update(arg0)

    @override
    @overload
    def add(self, arg0: 'PopupMenu'):
        """public void java.awt.Component.add(java.awt.PopupMenu)"""
        super(_Component, self).add(arg0)

    @override
    @overload
    def getToolTipText(self) -> str:
        """public java.lang.String javax.swing.JComponent.getToolTipText()"""
        return str._wrap(super(JComponent, self).getToolTipText())

    @override
    @overload
    def isVisible(self) -> bool:
        """public boolean java.awt.Component.isVisible()"""
        return bool._wrap(super(Component, self).isVisible())

    @override
    @overload
    def setDropTarget(self, arg0: 'DropTarget'):
        """public synchronized void java.awt.Component.setDropTarget(java.awt.dnd.DropTarget)"""
        super(_Component, self).setDropTarget(arg0)

    @override
    @overload
    def getLocationOnScreen(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocationOnScreen()"""
        return 'Point'._wrap(super(Component, self).getLocationOnScreen())

    @override
    @overload
    def getY(self) -> int:
        """public int javax.swing.JComponent.getY()"""
        return int._wrap(super(JComponent, self).getY())

    @overload
    def getComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def isMaximumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMaximumSizeSet()"""
        return bool._wrap(super(Component, self).isMaximumSizeSet())

    @override
    @overload
    def setAlignmentY(self, arg0: float):
        """public void javax.swing.JComponent.setAlignmentY(float)"""
        super(_JComponent, self).setAlignmentY(_float.valueOf(arg0))

    @override
    @overload
    def getRegisteredKeyStrokes(self) -> List['KeyStroke']:
        """public javax.swing.KeyStroke[] javax.swing.JComponent.getRegisteredKeyStrokes()"""
        return List['KeyStroke']._wrap(super(JComponent, self).getRegisteredKeyStrokes())

    @override
    @overload
    def isFocusable(self) -> bool:
        """public boolean java.awt.Component.isFocusable()"""
        return bool._wrap(super(Component, self).isFocusable())

    @override
    @overload
    def isFocusTraversalPolicyProvider(self) -> bool:
        """public final boolean java.awt.Container.isFocusTraversalPolicyProvider()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicyProvider())

    @override
    @overload
    def getMouseListeners(self) -> List['MouseListener']:
        """public synchronized java.awt.event.MouseListener[] java.awt.Component.getMouseListeners()"""
        return List['MouseListener']._wrap(super(Component, self).getMouseListeners())

    @override
    @overload
    def setValue(self, arg0: object):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setValue(T)"""
        super(_EditorPanel, self).setValue(arg0)

    @override
    @overload
    def registerKeyboardAction(self, arg0: 'ActionListener', arg1: 'KeyStroke', arg2: int):
        """public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,javax.swing.KeyStroke,int)"""
        super(_JComponent, self).registerKeyboardAction(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def transferFocusUpCycle(self):
        """public void java.awt.Component.transferFocusUpCycle()"""
        super(Component, self).transferFocusUpCycle()

    @override
    @overload
    def removeKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.removeKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).removeKeyListener(arg0)

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: str, arg2: str):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,char,char)"""
        super(_JComponent, self).firePropertyChange(arg0, _char.valueOf(arg1), _char.valueOf(arg2))

    @override
    @overload
    def getMouseMotionListeners(self) -> List['MouseMotionListener']:
        """public synchronized java.awt.event.MouseMotionListener[] java.awt.Component.getMouseMotionListeners()"""
        return List['MouseMotionListener']._wrap(super(Component, self).getMouseMotionListeners())

    @override
    @overload
    def getAutoscrolls(self) -> bool:
        """public boolean javax.swing.JComponent.getAutoscrolls()"""
        return bool._wrap(super(JComponent, self).getAutoscrolls())

    @override
    @overload
    def addContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.addContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).addContainerListener(arg0)

    @override
    @overload
    def isFocusTraversable(self) -> bool:
        """public boolean java.awt.Component.isFocusTraversable()"""
        return bool._wrap(super(Component, self).isFocusTraversable())

    @overload
    def mouseExit(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseExit(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseExit(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getBounds(self, arg0: 'Rectangle') -> 'Rectangle':
        """public java.awt.Rectangle javax.swing.JComponent.getBounds(java.awt.Rectangle)"""
        return 'Rectangle'._wrap(super(_JComponent, self).getBounds(arg0))

    @override
    @overload
    def setToolTipText(self, arg0: str):
        """public void javax.swing.JComponent.setToolTipText(java.lang.String)"""
        super(_JComponent, self).setToolTipText(arg0)

    @override
    @overload
    def setAutoscrolls(self, arg0: bool):
        """public void javax.swing.JComponent.setAutoscrolls(boolean)"""
        super(_JComponent, self).setAutoscrolls(_boolean.valueOf(arg0))

    @override
    @overload
    def setComponentPopupMenu(self, arg0: 'JPopupMenu'):
        """public void javax.swing.JComponent.setComponentPopupMenu(javax.swing.JPopupMenu)"""
        super(_JComponent, self).setComponentPopupMenu(arg0)

    @override
    @overload
    def setMixingCutoutShape(self, arg0: 'Shape'):
        """public void java.awt.Component.setMixingCutoutShape(java.awt.Shape)"""
        super(_Component, self).setMixingCutoutShape(arg0)

    @override
    @overload
    def getVisibleRect(self) -> 'Rectangle':
        """public java.awt.Rectangle javax.swing.JComponent.getVisibleRect()"""
        return 'Rectangle'._wrap(super(JComponent, self).getVisibleRect())

    @override
    @overload
    def requestFocus(self, arg0: 'Cause'):
        """public void java.awt.Component.requestFocus(java.awt.event.FocusEvent$Cause)"""
        super(_Component, self).requestFocus(arg0)

    @overload
    def createImage(self, arg0: int, arg1: int) -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(int,int)"""
        return 'Image'._wrap(super(_Component, self).createImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def putClientProperty(self, arg0: object, arg1: object):
        """public final void javax.swing.JComponent.putClientProperty(java.lang.Object,java.lang.Object)"""
        super(_JComponent, self).putClientProperty(arg0, arg1)

    @override
    @overload
    def getVetoableChangeListeners(self) -> List['VetoableChangeListener']:
        """public synchronized java.beans.VetoableChangeListener[] javax.swing.JComponent.getVetoableChangeListeners()"""
        return List['VetoableChangeListener']._wrap(super(JComponent, self).getVetoableChangeListeners())

    @override
    @overload
    def scrollRectToVisible(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.scrollRectToVisible(java.awt.Rectangle)"""
        super(_JComponent, self).scrollRectToVisible(arg0)

    @override
    @overload
    def getTopLevelAncestor(self) -> 'Container':
        """public java.awt.Container javax.swing.JComponent.getTopLevelAncestor()"""
        return 'Container'._wrap(super(JComponent, self).getTopLevelAncestor())

    @override
    @overload
    def isRequestFocusEnabled(self) -> bool:
        """public boolean javax.swing.JComponent.isRequestFocusEnabled()"""
        return bool._wrap(super(JComponent, self).isRequestFocusEnabled())

    @override
    @overload
    def getFocusListeners(self) -> List['FocusListener']:
        """public synchronized java.awt.event.FocusListener[] java.awt.Component.getFocusListeners()"""
        return List['FocusListener']._wrap(super(Component, self).getFocusListeners())

    @override
    @overload
    def setLayout(self, arg0: 'LayoutManager'):
        """public void java.awt.Container.setLayout(java.awt.LayoutManager)"""
        super(_Container, self).setLayout(arg0)

    @overload
    def add(self, arg0: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0))

    @override
    @overload
    def getMouseWheelListeners(self) -> List['MouseWheelListener']:
        """public synchronized java.awt.event.MouseWheelListener[] java.awt.Component.getMouseWheelListeners()"""
        return List['MouseWheelListener']._wrap(super(Component, self).getMouseWheelListeners())

    @override
    @overload
    def reshape(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void javax.swing.JComponent.reshape(int,int,int,int)"""
        super(_JComponent, self).reshape(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def setTransferHandler(self, arg0: 'TransferHandler'):
        """public void javax.swing.JComponent.setTransferHandler(javax.swing.TransferHandler)"""
        super(_JComponent, self).setTransferHandler(arg0)

    @override
    @overload
    def getPreferredSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getPreferredSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getPreferredSize())

    @override
    @overload
    def setLocation(self, arg0: int, arg1: int):
        """public void java.awt.Component.setLocation(int,int)"""
        super(_Component, self).setLocation(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def removeInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.removeInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).removeInputMethodListener(arg0)

    @override
    @overload
    def setFocusable(self, arg0: bool):
        """public void java.awt.Component.setFocusable(boolean)"""
        super(_Component, self).setFocusable(_boolean.valueOf(arg0))

    @override
    @overload
    def paintComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.paintComponents(java.awt.Graphics)"""
        super(_Container, self).paintComponents(arg0)

    @override
    @overload
    def addFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.addFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).addFocusListener(arg0)

    @overload
    def prepareImage(self, arg0: 'Image', arg1: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, arg1))

    @override
    @overload
    def addKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.addKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).addKeyListener(arg0)

    @override
    @overload
    def resize(self, arg0: 'Dimension'):
        """public void java.awt.Component.resize(java.awt.Dimension)"""
        super(_Component, self).resize(arg0)

    @override
    @overload
    def setComponentZOrder(self, arg0: 'Component', arg1: int):
        """public void java.awt.Container.setComponentZOrder(java.awt.Component,int)"""
        super(_Container, self).setComponentZOrder(arg0, _int.valueOf(arg1))

    @override
    @overload
    def list(self):
        """public void java.awt.Component.list()"""
        super(Component, self).list()

    @overload
    def add(self, arg0: str, arg1: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.lang.String,java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, arg1))

    @override
    @overload
    def paintImmediately(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void javax.swing.JComponent.paintImmediately(int,int,int,int)"""
        super(_JComponent, self).paintImmediately(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def getMinimumSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getMinimumSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getMinimumSize())

    @override
    @overload
    def setEnabled(self, arg0: bool):
        """public void javax.swing.JComponent.setEnabled(boolean)"""
        super(_JComponent, self).setEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def hasFocus(self) -> bool:
        """public boolean java.awt.Component.hasFocus()"""
        return bool._wrap(super(Component, self).hasFocus())

    @overload
    def createVolatileImage(self, arg0: int, arg1: int) -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int)"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.removeHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).removeHierarchyListener(arg0)

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.awt.Component.toString()"""
        return str._wrap(super(Component, self).toString())

    @override
    @overload
    def addMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.addMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).addMouseListener(arg0)

    @override
    @overload
    def isFocusOwner(self) -> bool:
        """public boolean java.awt.Component.isFocusOwner()"""
        return bool._wrap(super(Component, self).isFocusOwner())

    @override
    @overload
    def getAccessibleContext(self) -> 'AccessibleContext':
        """public javax.accessibility.AccessibleContext javax.swing.JPanel.getAccessibleContext()"""
        return 'AccessibleContext'._wrap(super(JPanel, self).getAccessibleContext())

    @overload
    def postEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.postEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).postEvent(arg0))

    @overload
    def getLocation(self, arg0: 'Point') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getLocation(java.awt.Point)"""
        return 'Point'._wrap(super(_JComponent, self).getLocation(arg0))

    @overload
    def getBaseline(self, arg0: int, arg1: int) -> int:
        """public int javax.swing.JComponent.getBaseline(int,int)"""
        return int._wrap(super(_JComponent, self).getBaseline(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def findComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeNotify(self):
        """public void javax.swing.JComponent.removeNotify()"""
        super(JComponent, self).removeNotify()

    @override
    @overload
    def getForeground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getForeground()"""
        return 'Color'._wrap(super(Component, self).getForeground())

    @override
    @overload
    def show(self):
        """public void java.awt.Component.show()"""
        super(Component, self).show()

    @override
    @overload
    def isDoubleBuffered(self) -> bool:
        """public boolean javax.swing.JComponent.isDoubleBuffered()"""
        return bool._wrap(super(JComponent, self).isDoubleBuffered())

    @override
    @overload
    def setDescription(self, arg0: str):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setDescription(java.lang.String)"""
        super(_EditorPanel, self).setDescription(arg0)

    @override
    @overload
    def isFocusCycleRoot(self) -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot()"""
        return bool._wrap(super(Container, self).isFocusCycleRoot())

    @override
    @overload
    def addMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.addMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).addMouseWheelListener(arg0)

    @override
    @overload
    def hide(self):
        """public void javax.swing.JComponent.hide()"""
        super(JComponent, self).hide()

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def revalidate(self):
        """public void javax.swing.JComponent.revalidate()"""
        super(JComponent, self).revalidate()

    @override
    @overload
    def getActionMap(self) -> 'ActionMap':
        """public final javax.swing.ActionMap javax.swing.JComponent.getActionMap()"""
        return 'ActionMap'._wrap(super(JComponent, self).getActionMap())

    @override
    @overload
    def requestFocusInWindow(self) -> bool:
        """public boolean javax.swing.JComponent.requestFocusInWindow()"""
        return bool._wrap(super(JComponent, self).requestFocusInWindow())

    @overload
    def action(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.action(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).action(arg0, arg1))

    @override
    @overload
    def isManagingFocus(self) -> bool:
        """public boolean javax.swing.JComponent.isManagingFocus()"""
        return bool._wrap(super(JComponent, self).isManagingFocus())

    @override
    @overload
    def isLightweight(self) -> bool:
        """public boolean java.awt.Component.isLightweight()"""
        return bool._wrap(super(Component, self).isLightweight())

    @override
    @overload
    def setAlignmentX(self, arg0: float):
        """public void javax.swing.JComponent.setAlignmentX(float)"""
        super(_JComponent, self).setAlignmentX(_float.valueOf(arg0))

    @overload
    def getFocusTraversalKeys(self, arg0: int) -> 'Set':
        """public java.util.Set<java.awt.AWTKeyStroke> java.awt.Container.getFocusTraversalKeys(int)"""
        return 'Set'._wrap(super(_Container, self).getFocusTraversalKeys(_int.valueOf(arg0)))

    @override
    @overload
    def setFocusTraversalKeysEnabled(self, arg0: bool):
        """public void java.awt.Component.setFocusTraversalKeysEnabled(boolean)"""
        super(_Component, self).setFocusTraversalKeysEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def remove(self, arg0: 'Component'):
        """public void java.awt.Container.remove(java.awt.Component)"""
        super(_Container, self).remove(arg0)

    @overload
    def getInsets(self, arg0: 'Insets') -> 'Insets':
        """public java.awt.Insets javax.swing.JComponent.getInsets(java.awt.Insets)"""
        return 'Insets'._wrap(super(_JComponent, self).getInsets(arg0))

    @override
    @overload
    def insets(self) -> 'Insets':
        """public java.awt.Insets java.awt.Container.insets()"""
        return 'Insets'._wrap(super(Container, self).insets())

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int):
        """public void javax.swing.JComponent.repaint(long,int,int,int,int)"""
        super(_JComponent, self).repaint(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4))

    @override
    @overload
    def setFocusTraversalPolicy(self, arg0: 'FocusTraversalPolicy'):
        """public void java.awt.Container.setFocusTraversalPolicy(java.awt.FocusTraversalPolicy)"""
        super(_Container, self).setFocusTraversalPolicy(arg0)

    @overload
    def getSize(self, arg0: 'Dimension') -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getSize(java.awt.Dimension)"""
        return 'Dimension'._wrap(super(_JComponent, self).getSize(arg0))

    @override
    @overload
    def enable(self, arg0: bool):
        """public void java.awt.Component.enable(boolean)"""
        super(_Component, self).enable(_boolean.valueOf(arg0))

    @overload
    def getToolTipLocation(self, arg0: 'MouseEvent') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getToolTipLocation(java.awt.event.MouseEvent)"""
        return 'Point'._wrap(super(_JComponent, self).getToolTipLocation(arg0))

    @override
    @overload
    def addPropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Container.addPropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Container, self).addPropertyChangeListener(arg0)

    @overload
    def getComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(arg0))

    @override
    @overload
    def size(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.size()"""
        return 'Dimension'._wrap(super(Component, self).size())

    @override
    @overload
    def getVerifyInputWhenFocusTarget(self) -> bool:
        """public boolean javax.swing.JComponent.getVerifyInputWhenFocusTarget()"""
        return bool._wrap(super(JComponent, self).getVerifyInputWhenFocusTarget())

    @overload
    def mouseMove(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseMove(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseMove(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getActionForKeyStroke(self, arg0: 'KeyStroke') -> 'ActionListener':
        """public java.awt.event.ActionListener javax.swing.JComponent.getActionForKeyStroke(javax.swing.KeyStroke)"""
        return 'ActionListener'._wrap(super(_JComponent, self).getActionForKeyStroke(arg0))

    @overload
    def lostFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.lostFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).lostFocus(arg0, arg1))

    @override
    @overload
    def isMinimumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMinimumSizeSet()"""
        return bool._wrap(super(Component, self).isMinimumSizeSet())

    @override
    @overload
    def isForegroundSet(self) -> bool:
        """public boolean java.awt.Component.isForegroundSet()"""
        return bool._wrap(super(Component, self).isForegroundSet())

    @overload
    def getMousePosition(self, arg0: bool) -> 'Point':
        """public java.awt.Point java.awt.Container.getMousePosition(boolean) throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(_Container, self).getMousePosition(_boolean.valueOf(arg0)))

    @overload
    def getFontMetrics(self, arg0: 'Font') -> 'FontMetrics':
        """public java.awt.FontMetrics javax.swing.JComponent.getFontMetrics(java.awt.Font)"""
        return 'FontMetrics'._wrap(super(_JComponent, self).getFontMetrics(arg0))

    @overload
    def getListeners(self, arg0: 'Class') -> List['EventListener']:
        """public <T extends java.util.EventListener> T[] javax.swing.JComponent.getListeners(java.lang.Class<T>)"""
        return List['EventListener']._wrap(super(_JComponent, self).getListeners(arg0))

    @override
    @overload
    def getHierarchyBoundsListeners(self) -> List['HierarchyBoundsListener']:
        """public synchronized java.awt.event.HierarchyBoundsListener[] java.awt.Component.getHierarchyBoundsListeners()"""
        return List['HierarchyBoundsListener']._wrap(super(Component, self).getHierarchyBoundsListeners())

    @override
    @overload
    def minimumSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.minimumSize()"""
        return 'Dimension'._wrap(super(Container, self).minimumSize())

    @overload
    def handleEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.handleEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).handleEvent(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @override
    @overload
    def getComponentListeners(self) -> List['ComponentListener']:
        """public synchronized java.awt.event.ComponentListener[] java.awt.Component.getComponentListeners()"""
        return List['ComponentListener']._wrap(super(Component, self).getComponentListeners())

    @override
    @overload
    def computeVisibleRect(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.computeVisibleRect(java.awt.Rectangle)"""
        super(_JComponent, self).computeVisibleRect(arg0)

    @override
    @overload
    def deliverEvent(self, arg0: 'Event'):
        """public void java.awt.Container.deliverEvent(java.awt.Event)"""
        super(_Container, self).deliverEvent(arg0)

    @override
    @overload
    def addHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.addHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).addHierarchyBoundsListener(arg0)

    @override
    @overload
    def getAlignmentX(self) -> float:
        """public float javax.swing.JComponent.getAlignmentX()"""
        return float._wrap(super(JComponent, self).getAlignmentX())

    @overload
    def add(self, arg0: 'Component', arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component,int)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def repaint(self):
        """public void java.awt.Component.repaint()"""
        super(Component, self).repaint()

    @overload
    def gotFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.gotFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).gotFocus(arg0, arg1))

    @override
    @overload
    def createToolTip(self) -> 'JToolTip':
        """public javax.swing.JToolTip javax.swing.JComponent.createToolTip()"""
        return 'JToolTip'._wrap(super(JComponent, self).createToolTip())

    @override
    @overload
    def setEmbedded(self):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setEmbedded()"""
        super(EditorPanel, self).setEmbedded()

    @overload
    def getToolTipText(self, arg0: 'MouseEvent') -> str:
        """public java.lang.String javax.swing.JComponent.getToolTipText(java.awt.event.MouseEvent)"""
        return str._wrap(super(_JComponent, self).getToolTipText(arg0))

    @override
    @overload
    def printComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.printComponents(java.awt.Graphics)"""
        super(_Container, self).printComponents(arg0)

    @override
    @overload
    def getColorModel(self) -> 'ColorModel':
        """public java.awt.image.ColorModel java.awt.Component.getColorModel()"""
        return 'ColorModel'._wrap(super(Component, self).getColorModel())

    @override
    @overload
    def setFocusTraversalPolicyProvider(self, arg0: bool):
        """public final void java.awt.Container.setFocusTraversalPolicyProvider(boolean)"""
        super(_Container, self).setFocusTraversalPolicyProvider(_boolean.valueOf(arg0))

    @overload
    def getComponentZOrder(self, arg0: 'Component') -> int:
        """public int java.awt.Container.getComponentZOrder(java.awt.Component)"""
        return int._wrap(super(_Container, self).getComponentZOrder(arg0))

    @override
    @overload
    def getDebugGraphicsOptions(self) -> int:
        """public int javax.swing.JComponent.getDebugGraphicsOptions()"""
        return int._wrap(super(JComponent, self).getDebugGraphicsOptions())

    @overload
    def areFocusTraversalKeysSet(self, arg0: int) -> bool:
        """public boolean java.awt.Container.areFocusTraversalKeysSet(int)"""
        return bool._wrap(super(_Container, self).areFocusTraversalKeysSet(_int.valueOf(arg0)))

    @override
    @overload
    def getSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.getSize()"""
        return 'Dimension'._wrap(super(Component, self).getSize())

    @override
    @overload
    def repaint(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.repaint(java.awt.Rectangle)"""
        super(_JComponent, self).repaint(arg0)

    @overload
    def getClientProperty(self, arg0: object) -> object:
        """public final java.lang.Object javax.swing.JComponent.getClientProperty(java.lang.Object)"""
        return object._wrap(super(_JComponent, self).getClientProperty(arg0))

    @override
    @overload
    def unregisterKeyboardAction(self, arg0: 'KeyStroke'):
        """public void javax.swing.JComponent.unregisterKeyboardAction(javax.swing.KeyStroke)"""
        super(_JComponent, self).unregisterKeyboardAction(arg0)

    @overload
    def requestFocus(self, arg0: bool) -> bool:
        """public boolean javax.swing.JComponent.requestFocus(boolean)"""
        return bool._wrap(super(_JComponent, self).requestFocus(_boolean.valueOf(arg0)))

    @override
    @overload
    def setActionMap(self, arg0: 'ActionMap'):
        """public final void javax.swing.JComponent.setActionMap(javax.swing.ActionMap)"""
        super(_JComponent, self).setActionMap(arg0)

    @override
    @overload
    def getX(self) -> int:
        """public int javax.swing.JComponent.getX()"""
        return int._wrap(super(JComponent, self).getX())

    @overload
    def mouseEnter(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseEnter(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseEnter(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def updateUI(self):
        """public void javax.swing.JPanel.updateUI()"""
        super(JPanel, self).updateUI()

    @override
    @overload
    def getToolkit(self) -> 'Toolkit':
        """public java.awt.Toolkit java.awt.Component.getToolkit()"""
        return 'Toolkit'._wrap(super(Component, self).getToolkit())

    @override
    @overload
    def isCursorSet(self) -> bool:
        """public boolean java.awt.Component.isCursorSet()"""
        return bool._wrap(super(Component, self).isCursorSet())

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object, arg2: int):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object,int)"""
        super(_Container, self).add(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def setPreferredSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setPreferredSize(java.awt.Dimension)"""
        super(_JComponent, self).setPreferredSize(arg0)

    @override
    @overload
    def setBounds(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.setBounds(int,int,int,int)"""
        super(_Component, self).setBounds(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def isFocusTraversalPolicySet(self) -> bool:
        """public boolean java.awt.Container.isFocusTraversalPolicySet()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicySet())

    @override
    @overload
    def requestFocus(self):
        """public void javax.swing.JComponent.requestFocus()"""
        super(JComponent, self).requestFocus()

    @override
    @overload
    def getAncestorListeners(self) -> List['AncestorListener']:
        """public javax.swing.event.AncestorListener[] javax.swing.JComponent.getAncestorListeners()"""
        return List['AncestorListener']._wrap(super(JComponent, self).getAncestorListeners())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool._wrap(super(_object, self).equals(arg0))

    @overload
    def getInputMap(self, arg0: int) -> 'InputMap':
        """public final javax.swing.InputMap javax.swing.JComponent.getInputMap(int)"""
        return 'InputMap'._wrap(super(_JComponent, self).getInputMap(_int.valueOf(arg0)))

    @override
    @overload
    def isEnabled(self) -> bool:
        """public boolean java.awt.Component.isEnabled()"""
        return bool._wrap(super(Component, self).isEnabled())

    @override
    @overload
    def move(self, arg0: int, arg1: int):
        """public void java.awt.Component.move(int,int)"""
        super(_Component, self).move(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def addMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.addMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).addMouseMotionListener(arg0)

    @override
    @overload
    def getIgnoreRepaint(self) -> bool:
        """public boolean java.awt.Component.getIgnoreRepaint()"""
        return bool._wrap(super(Component, self).getIgnoreRepaint())

    @overload
    def isFocusCycleRoot(self, arg0: 'Container') -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot(java.awt.Container)"""
        return bool._wrap(super(_Container, self).isFocusCycleRoot(arg0))

    @override
    @overload
    def getGraphics(self) -> 'Graphics':
        """public java.awt.Graphics javax.swing.JComponent.getGraphics()"""
        return 'Graphics'._wrap(super(JComponent, self).getGraphics())

    @override
    @overload
    def setLocale(self, arg0: 'Locale'):
        """public void java.awt.Component.setLocale(java.util.Locale)"""
        super(_Component, self).setLocale(arg0)

    @override
    @overload
    def paintAll(self, arg0: 'Graphics'):
        """public void java.awt.Component.paintAll(java.awt.Graphics)"""
        super(_Component, self).paintAll(arg0)

    @override
    @overload
    def setDoubleBuffered(self, arg0: bool):
        """public void javax.swing.JComponent.setDoubleBuffered(boolean)"""
        super(_JComponent, self).setDoubleBuffered(_boolean.valueOf(arg0))

    @override
    @overload
    def isPreferredSizeSet(self) -> bool:
        """public boolean java.awt.Component.isPreferredSizeSet()"""
        return bool._wrap(super(Component, self).isPreferredSizeSet())

    @override
    @overload
    def addInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.addInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).addInputMethodListener(arg0)

    @override
    @overload
    def removeMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.removeMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).removeMouseWheelListener(arg0)

    @override
    @overload
    def getInputMap(self) -> 'InputMap':
        """public final javax.swing.InputMap javax.swing.JComponent.getInputMap()"""
        return 'InputMap'._wrap(super(JComponent, self).getInputMap())

    @override
    @overload
    def setVisible(self, arg0: bool):
        """public void javax.swing.JComponent.setVisible(boolean)"""
        super(_JComponent, self).setVisible(_boolean.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,byte,byte)"""
        super(_Component, self).firePropertyChange(arg0, _byte.valueOf(arg1), _byte.valueOf(arg2))

    @override
    @overload
    def getUIClassID(self) -> str:
        """public java.lang.String javax.swing.JPanel.getUIClassID()"""
        return str._wrap(super(JPanel, self).getUIClassID())

    @override
    @overload
    def transferFocusDownCycle(self):
        """public void java.awt.Container.transferFocusDownCycle()"""
        super(Container, self).transferFocusDownCycle()

    @override
    @overload
    def getNextFocusableComponent(self) -> 'Component':
        """public java.awt.Component javax.swing.JComponent.getNextFocusableComponent()"""
        return 'Component'._wrap(super(JComponent, self).getNextFocusableComponent())

    @override
    @overload
    def getUI(self) -> 'PanelUI':
        """public javax.swing.plaf.PanelUI javax.swing.JPanel.getUI()"""
        return 'PanelUI'._wrap(super(JPanel, self).getUI())

    @override
    @overload
    def setBounds(self, arg0: 'Rectangle'):
        """public void java.awt.Component.setBounds(java.awt.Rectangle)"""
        super(_Component, self).setBounds(arg0)

    @override
    @overload
    def repaint(self, arg0: int):
        """public void java.awt.Component.repaint(long)"""
        super(_Component, self).repaint(_long.valueOf(arg0))

    @override
    @overload
    def removeHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.removeHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).removeHierarchyBoundsListener(arg0)

    @override
    @overload
    def getComponentPopupMenu(self) -> 'JPopupMenu':
        """public javax.swing.JPopupMenu javax.swing.JComponent.getComponentPopupMenu()"""
        return 'JPopupMenu'._wrap(super(JComponent, self).getComponentPopupMenu())

    @override
    @overload
    def getMousePosition(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getMousePosition() throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(Component, self).getMousePosition())

    @override
    @overload
    def getComponentCount(self) -> int:
        """public int java.awt.Container.getComponentCount()"""
        return int._wrap(super(Container, self).getComponentCount())

    @override
    @overload
    def getInputMethodRequests(self) -> 'InputMethodRequests':
        """public java.awt.im.InputMethodRequests java.awt.Component.getInputMethodRequests()"""
        return 'InputMethodRequests'._wrap(super(Component, self).getInputMethodRequests())

    @override
    @overload
    def setMaximumSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setMaximumSize(java.awt.Dimension)"""
        super(_JComponent, self).setMaximumSize(arg0)

    @override
    @overload
    def setRequestFocusEnabled(self, arg0: bool):
        """public void javax.swing.JComponent.setRequestFocusEnabled(boolean)"""
        super(_JComponent, self).setRequestFocusEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def setFocusTraversalKeys(self, arg0: int, arg1: 'Set'):
        """public void javax.swing.JComponent.setFocusTraversalKeys(int,java.util.Set<? extends java.awt.AWTKeyStroke>)"""
        super(_JComponent, self).setFocusTraversalKeys(_int.valueOf(arg0), arg1)

    @overload
    def inside(self, arg0: int, arg1: int) -> bool:
        """public boolean java.awt.Component.inside(int,int)"""
        return bool._wrap(super(_Component, self).inside(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def requestDefaultFocus(self) -> bool:
        """public boolean javax.swing.JComponent.requestDefaultFocus()"""
        return bool._wrap(super(JComponent, self).requestDefaultFocus())

    @override
    @overload
    def disable(self):
        """public void javax.swing.JComponent.disable()"""
        super(JComponent, self).disable()

    @override
    @overload
    def showContent(self, arg0: bool):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.showContent(boolean)"""
        super(_EditorPanel, self).showContent(_boolean.valueOf(arg0))

    @override
    @overload
    def enableInputMethods(self, arg0: bool):
        """public void java.awt.Component.enableInputMethods(boolean)"""
        super(_Component, self).enableInputMethods(_boolean.valueOf(arg0))

    @override
    @overload
    def layout(self):
        """public void java.awt.Container.layout()"""
        super(Container, self).layout()

    @override
    @overload
    def getInputMethodListeners(self) -> List['InputMethodListener']:
        """public synchronized java.awt.event.InputMethodListener[] java.awt.Component.getInputMethodListeners()"""
        return List['InputMethodListener']._wrap(super(Component, self).getInputMethodListeners())

    @override
    @overload
    def paint(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.paint(java.awt.Graphics)"""
        super(_JComponent, self).paint(arg0)

    @override
    @overload
    def transferFocus(self):
        """public void java.awt.Component.transferFocus()"""
        super(Component, self).transferFocus()

    @override
    @overload
    def removeComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.removeComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).removeComponentListener(arg0)

    @override
    @overload
    def getCursor(self) -> 'Cursor':
        """public java.awt.Cursor java.awt.Component.getCursor()"""
        return 'Cursor'._wrap(super(Component, self).getCursor())

    @override
    @overload
    def setMinimumSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setMinimumSize(java.awt.Dimension)"""
        super(_JComponent, self).setMinimumSize(arg0)

    @override
    @overload
    def getAdvancedPanel(self) -> 'JPanel':
        """public javax.swing.JPanel com.badlogic.gdx.tools.flame.EditorPanel.getAdvancedPanel()"""
        return 'JPanel'._wrap(super(EditorPanel, self).getAdvancedPanel())

    @override
    @overload
    def getContainerListeners(self) -> List['ContainerListener']:
        """public synchronized java.awt.event.ContainerListener[] java.awt.Container.getContainerListeners()"""
        return List['ContainerListener']._wrap(super(Container, self).getContainerListeners())

    @override
    @overload
    def setLocation(self, arg0: 'Point'):
        """public void java.awt.Component.setLocation(java.awt.Point)"""
        super(_Component, self).setLocation(arg0)

    @override
    @overload
    def setSize(self, arg0: 'Dimension'):
        """public void java.awt.Component.setSize(java.awt.Dimension)"""
        super(_Component, self).setSize(arg0)

    @override
    @overload
    def removeAll(self):
        """public void java.awt.Container.removeAll()"""
        super(Container, self).removeAll()

    @overload
    def getPopupLocation(self, arg0: 'MouseEvent') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getPopupLocation(java.awt.event.MouseEvent)"""
        return 'Point'._wrap(super(_JComponent, self).getPopupLocation(arg0))

    @overload
    def isAncestorOf(self, arg0: 'Component') -> bool:
        """public boolean java.awt.Container.isAncestorOf(java.awt.Component)"""
        return bool._wrap(super(_Container, self).isAncestorOf(arg0))

    @override
    @overload
    def setOpaque(self, arg0: bool):
        """public void javax.swing.JComponent.setOpaque(boolean)"""
        super(_JComponent, self).setOpaque(_boolean.valueOf(arg0))

    @overload
    def contains(self, arg0: int, arg1: int) -> bool:
        """public boolean javax.swing.JComponent.contains(int,int)"""
        return bool._wrap(super(_JComponent, self).contains(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def setCursor(self, arg0: 'Cursor'):
        """public void java.awt.Component.setCursor(java.awt.Cursor)"""
        super(_Component, self).setCursor(arg0)

    @override
    @overload
    def validate(self):
        """public void java.awt.Container.validate()"""
        super(Container, self).validate()

    @override
    @overload
    def getMaximumSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getMaximumSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getMaximumSize())

    @override
    @overload
    def getBackground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getBackground()"""
        return 'Color'._wrap(super(Component, self).getBackground())

    @overload
    def createImage(self, arg0: 'ImageProducer') -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(java.awt.image.ImageProducer)"""
        return 'Image'._wrap(super(_Component, self).createImage(arg0))

    @overload
    def __init__(self, arg0: 'FlameMain', arg1: 'BillboardParticleBatch'):
        """public com.badlogic.gdx.tools.flame.BillboardBatchPanel(com.badlogic.gdx.tools.flame.FlameMain,com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch)"""
        val = _BillboardBatchPanel(arg0, arg1)
        self.__wrapper = val

    @override
    @overload
    def setVerifyInputWhenFocusTarget(self, arg0: bool):
        """public void javax.swing.JComponent.setVerifyInputWhenFocusTarget(boolean)"""
        super(_JComponent, self).setVerifyInputWhenFocusTarget(_boolean.valueOf(arg0))

    @override
    @overload
    def removePropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0, arg1)

    @override
    @overload
    def countComponents(self) -> int:
        """public int java.awt.Container.countComponents()"""
        return int._wrap(super(Container, self).countComponents()) 
 
 
# CLASS: com.badlogic.gdx.tools.flame.FlameMain$ControllerType
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _Object
_Object = _Object
import java.lang.Object as _object
from builtins import type
import java.lang.String as _String
_String = _String
from typing import List
import java.lang.Enum as Enum
import java.lang.String as _string
import java.lang.Enum as _Enum
_Enum = _Enum
import com.badlogic.gdx.tools.flame.FlameMain as _FlameMain_ControllerType
_ControllerType = _FlameMain_ControllerType.ControllerType
import java.lang.Integer as _int
import java.util.Optional as _Optional
_Optional = _Optional
import java.util.Optional as Optional
from builtins import bool
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class ControllerType():
    """com.badlogic.gdx.tools.flame.FlameMain.ControllerType"""
 
    @staticmethod
    def _wrap(java_value: _ControllerType) -> 'ControllerType':
        return ControllerType(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _ControllerType):
        """
        Dynamic initializer for ControllerType.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_ControllerType__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_ControllerType__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def hashCode(self) -> int:
        """public final int java.lang.Enum.hashCode()"""
        return int._wrap(super(Enum, self).hashCode())

    @staticmethod
    @overload
    def valueOf(arg0: 'Class', arg1: str) -> 'Enum':
        """public static <T extends java.lang.Enum<T>> T java.lang.Enum.valueOf(java.lang.Class<T>,java.lang.String)"""
        return Enum._wrap(_Enum.valueOf(arg0, arg1))

    @override
    @overload
    def name(self) -> str:
        """public final java.lang.String java.lang.Enum.name()"""
        return str._wrap(super(Enum, self).name())

    @override
    @overload
    def describeConstable(self) -> 'Optional':
        """public final java.util.Optional<java.lang.Enum$EnumDesc<E>> java.lang.Enum.describeConstable()"""
        return 'Optional'._wrap(super(Enum, self).describeConstable())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.lang.Enum.toString()"""
        return str._wrap(super(Enum, self).toString())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def ordinal(self) -> int:
        """public final int java.lang.Enum.ordinal()"""
        return int._wrap(super(Enum, self).ordinal())

    @staticmethod
    @overload
    def valueOf(arg0: str) -> 'ControllerType':
        """public static com.badlogic.gdx.tools.flame.FlameMain$ControllerType com.badlogic.gdx.tools.flame.FlameMain$ControllerType.valueOf(java.lang.String)"""
        return ControllerType._wrap(_ControllerType.valueOf(arg0))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @override
    @overload
    def getDeclaringClass(self) -> 'type.Class':
        """public final java.lang.Class<E> java.lang.Enum.getDeclaringClass()"""
        return 'type.Class'._wrap(super(Enum, self).getDeclaringClass())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def equals(self, arg0: object) -> bool:
        """public final boolean java.lang.Enum.equals(java.lang.Object)"""
        return bool._wrap(super(_Enum, self).equals(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def compareTo(self, arg0: 'Enum') -> int:
        """public final int java.lang.Enum.compareTo(E)"""
        return int._wrap(super(_Enum, self).compareTo(arg0))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def values() -> List['ControllerType']:
        """public static com.badlogic.gdx.tools.flame.FlameMain$ControllerType[] com.badlogic.gdx.tools.flame.FlameMain$ControllerType.values()"""
        return List[ControllerType]._wrap(_ControllerType.values()) 
 
 
# CLASS: com.badlogic.gdx.tools.flame.ParticleControllerInfluencerPanel
from pyquantum_helper import import_once as _import_once
import javax.accessibility.AccessibleContext as AccessibleContext
try:
    from pygdx.graphics.g3d import particles
except ImportError:
    particles = _import_once("pygdx.graphics.g3d.particles")

import javax.swing.JToolTip as JToolTip
import java.awt.event.HierarchyBoundsListener as HierarchyBoundsListener
import java.awt.event.ActionListener as _ActionListener
_ActionListener = _ActionListener
import java.awt.ComponentOrientation as _ComponentOrientation
_ComponentOrientation = _ComponentOrientation
import java.awt.image.ImageProducer as ImageProducer
import java.awt.GraphicsConfiguration as GraphicsConfiguration
import com.badlogic.gdx.tools.flame.ParticleControllerInfluencerPanel as _ParticleControllerInfluencerPanel
_ParticleControllerInfluencerPanel = _ParticleControllerInfluencerPanel
import java.awt.Graphics as _Graphics
_Graphics = _Graphics
import javax.swing.JToolTip as _JToolTip
_JToolTip = _JToolTip
import java.awt.Container as _Container
_Container = _Container
import java.awt.MenuComponent as MenuComponent
import java.awt.im.InputMethodRequests as _InputMethodRequests
_InputMethodRequests = _InputMethodRequests
import java.awt.FocusTraversalPolicy as _FocusTraversalPolicy
_FocusTraversalPolicy = _FocusTraversalPolicy
import java.lang.Byte as _byte
import java.awt.Dimension as Dimension
import java.awt.Font as _Font
_Font = _Font
import javax.swing.plaf.PanelUI as _PanelUI
_PanelUI = _PanelUI
import java.awt.event.ContainerListener as ContainerListener
import javax.swing.event.AncestorListener as AncestorListener
import java.awt.AWTEvent as AWTEvent
import javax.swing.JPanel as JPanel
import java.awt.image.ColorModel as _ColorModel
_ColorModel = _ColorModel
import java.lang.Object as _object
import java.awt.ComponentOrientation as ComponentOrientation
import java.awt.im.InputContext as _InputContext
_InputContext = _InputContext
from builtins import float
import java.awt.event.HierarchyListener as HierarchyListener
import java.awt.event.InputMethodListener as InputMethodListener
from typing import List
import java.awt.event.MouseWheelListener as _MouseWheelListener
_MouseWheelListener = _MouseWheelListener
import java.awt.event.KeyListener as KeyListener
import java.awt.Component as Component
from builtins import int
import java.awt.LayoutManager as LayoutManager
import java.awt.FontMetrics as _FontMetrics
_FontMetrics = _FontMetrics
import java.awt.Container as Container
from builtins import type
import java.awt.image.VolatileImage as _VolatileImage
_VolatileImage = _VolatileImage
import java.awt.Shape as Shape
import com.badlogic.gdx.tools.flame.EditorPanel as _EditorPanel
_EditorPanel = _EditorPanel
import java.awt.Rectangle as Rectangle
import java.awt.event.ContainerListener as _ContainerListener
_ContainerListener = _ContainerListener
import java.awt.event.HierarchyListener as _HierarchyListener
_HierarchyListener = _HierarchyListener
import java.lang.String as _string
import javax.swing.InputVerifier as _InputVerifier
_InputVerifier = _InputVerifier
import java.awt.Insets as _Insets
_Insets = _Insets
import javax.swing.border.Border as _Border
_Border = _Border
import java.awt.event.ComponentListener as _ComponentListener
_ComponentListener = _ComponentListener
import javax.swing.ActionMap as ActionMap
import java.beans.VetoableChangeListener as VetoableChangeListener
import java.awt.event.ComponentListener as ComponentListener
import javax.swing.KeyStroke as KeyStroke
import java.beans.VetoableChangeListener as _VetoableChangeListener
_VetoableChangeListener = _VetoableChangeListener
from builtins import object
try:
    from pygdx.graphics.g3d.particles import influencers
except ImportError:
    influencers = _import_once("pygdx.graphics.g3d.particles.influencers")

import java.awt.event.KeyListener as _KeyListener
_KeyListener = _KeyListener
import java.awt.Component.BaselineResizeBehavior as BaselineResizeBehavior
import java.awt.Component as _Component_BaselineResizeBehavior
_BaselineResizeBehavior = _Component_BaselineResizeBehavior.BaselineResizeBehavior
import java.awt.Cursor as _Cursor
_Cursor = _Cursor
import java.awt.im.InputMethodRequests as InputMethodRequests
import java.lang.Long as _long
import javax.swing.JPanel as _JPanel
_JPanel = _JPanel
import java.awt.event.FocusListener as _FocusListener
_FocusListener = _FocusListener
import java.lang.Character as _char
import javax.swing.TransferHandler as TransferHandler
import java.awt.event.FocusEvent.Cause as Cause
import javax.swing.JComponent as JComponent
import javax.accessibility.AccessibleContext as _AccessibleContext
_AccessibleContext = _AccessibleContext
import java.awt.event.MouseWheelListener as MouseWheelListener
import java.util.Set as _Set
_Set = _Set
import java.awt.image.ColorModel as ColorModel
import java.lang.Boolean as _boolean
import java.awt.event.MouseMotionListener as MouseMotionListener
import java.util.EventListener as EventListener
import java.awt.Insets as Insets
import javax.swing.KeyStroke as _KeyStroke
_KeyStroke = _KeyStroke
import java.awt.GraphicsConfiguration as _GraphicsConfiguration
_GraphicsConfiguration = _GraphicsConfiguration
import java.awt.dnd.DropTarget as _DropTarget
_DropTarget = _DropTarget
from builtins import bool
import java.beans.PropertyChangeListener as _PropertyChangeListener
_PropertyChangeListener = _PropertyChangeListener
import java.awt.LayoutManager as _LayoutManager
_LayoutManager = _LayoutManager
import java.awt.PopupMenu as PopupMenu
import java.util.EventListener as _EventListener
_EventListener = _EventListener
import java.awt.im.InputContext as InputContext
import java.awt.Component as _Component
_Component = _Component
import java.awt.Font as Font
import java.awt.image.VolatileImage as VolatileImage
import java.awt.dnd.DropTarget as DropTarget
import java.lang.String as _String
_String = _String
import java.lang.Float as _float
import java.awt.Cursor as Cursor
import java.awt.event.MouseListener as _MouseListener
_MouseListener = _MouseListener
import java.awt.Toolkit as _Toolkit
_Toolkit = _Toolkit
import java.io.PrintStream as PrintStream
import javax.swing.JRootPane as _JRootPane
_JRootPane = _JRootPane
import java.awt.Dimension as _Dimension
_Dimension = _Dimension
import java.awt.event.ActionListener as ActionListener
import java.awt.event.MouseEvent as MouseEvent
import java.awt.Color as _Color
_Color = _Color
import javax.swing.JPopupMenu as _JPopupMenu
_JPopupMenu = _JPopupMenu
import javax.swing.InputMap as _InputMap
_InputMap = _InputMap
import java.awt.event.MouseListener as MouseListener
import java.lang.Class as _Class
_Class = _Class
import java.util.Locale as Locale
import java.lang.Double as _double
import javax.swing.plaf.PanelUI as PanelUI
import java.awt.Point as _Point
_Point = _Point
import java.lang.Object as _Object
_Object = _Object
import java.beans.PropertyChangeListener as PropertyChangeListener
import javax.swing.border.Border as Border
import javax.swing.JComponent as _JComponent
_JComponent = _JComponent
import javax.swing.InputVerifier as InputVerifier
import java.io.PrintWriter as PrintWriter
import java.awt.Point as Point
import javax.swing.event.AncestorListener as _AncestorListener
_AncestorListener = _AncestorListener
import java.lang.Short as _short
import java.awt.Toolkit as Toolkit
import java.awt.event.HierarchyBoundsListener as _HierarchyBoundsListener
_HierarchyBoundsListener = _HierarchyBoundsListener
import javax.swing.TransferHandler as _TransferHandler
_TransferHandler = _TransferHandler
import javax.swing.InputMap as InputMap
import java.awt.Rectangle as _Rectangle
_Rectangle = _Rectangle
import javax.swing.JRootPane as JRootPane
import java.awt.Event as Event
import java.awt.event.FocusListener as FocusListener
import java.awt.image.ImageObserver as ImageObserver
from builtins import str
from pyquantum_helper import override
import javax.swing.ActionMap as _ActionMap
_ActionMap = _ActionMap
import java.awt.FocusTraversalPolicy as FocusTraversalPolicy
import java.awt.event.MouseMotionListener as _MouseMotionListener
_MouseMotionListener = _MouseMotionListener
import java.awt.event.InputMethodListener as _InputMethodListener
_InputMethodListener = _InputMethodListener
import javax.swing.JPopupMenu as JPopupMenu
import java.util.Set as Set
import java.lang.Integer as _int
import java.awt.Image as _Image
_Image = _Image
import java.awt.FontMetrics as FontMetrics
import java.awt.Color as Color
import java.awt.Image as Image
import java.awt.Graphics as Graphics
import java.awt.ImageCapabilities as ImageCapabilities
import java.util.Locale as _Locale
_Locale = _Locale
 
class ParticleControllerInfluencerPanel():
    """com.badlogic.gdx.tools.flame.ParticleControllerInfluencerPanel"""
 
    @staticmethod
    def _wrap(java_value: _ParticleControllerInfluencerPanel) -> 'ParticleControllerInfluencerPanel':
        return ParticleControllerInfluencerPanel(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _ParticleControllerInfluencerPanel):
        """
        Dynamic initializer for ParticleControllerInfluencerPanel.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_ParticleControllerInfluencerPanel__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_ParticleControllerInfluencerPanel__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def removeVetoableChangeListener(self, arg0: 'VetoableChangeListener'):
        """public synchronized void javax.swing.JComponent.removeVetoableChangeListener(java.beans.VetoableChangeListener)"""
        super(_JComponent, self).removeVetoableChangeListener(arg0)

    @override
    @overload
    def getComponents(self) -> List['Component']:
        """public java.awt.Component[] java.awt.Container.getComponents()"""
        return List['Component']._wrap(super(Container, self).getComponents())

    @override
    @overload
    def setDebugGraphicsOptions(self, arg0: int):
        """public void javax.swing.JComponent.setDebugGraphicsOptions(int)"""
        super(_JComponent, self).setDebugGraphicsOptions(_int.valueOf(arg0))

    @override
    @overload
    def isValid(self) -> bool:
        """public boolean java.awt.Component.isValid()"""
        return bool._wrap(super(Component, self).isValid())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def getDefaultLocale() -> 'Locale':
        """public static java.util.Locale javax.swing.JComponent.getDefaultLocale()"""
        return Locale._wrap(_JComponent.getDefaultLocale())

    @override
    @overload
    def getInputVerifier(self) -> 'InputVerifier':
        """public javax.swing.InputVerifier javax.swing.JComponent.getInputVerifier()"""
        return 'InputVerifier'._wrap(super(JComponent, self).getInputVerifier())

    @override
    @overload
    def list(self, arg0: 'PrintStream', arg1: int):
        """public void java.awt.Container.list(java.io.PrintStream,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @override
    @overload
    def setUI(self, arg0: 'PanelUI'):
        """public void javax.swing.JPanel.setUI(javax.swing.plaf.PanelUI)"""
        super(_JPanel, self).setUI(arg0)

    @override
    @overload
    def getFocusTraversalPolicy(self) -> 'FocusTraversalPolicy':
        """public java.awt.FocusTraversalPolicy java.awt.Container.getFocusTraversalPolicy()"""
        return 'FocusTraversalPolicy'._wrap(super(Container, self).getFocusTraversalPolicy())

    @override
    @overload
    def getParent(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getParent()"""
        return 'Container'._wrap(super(Component, self).getParent())

    @override
    @overload
    def paintImmediately(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.paintImmediately(java.awt.Rectangle)"""
        super(_JComponent, self).paintImmediately(arg0)

    @staticmethod
    @overload
    def setDefaultLocale(arg0: 'Locale'):
        """public static void javax.swing.JComponent.setDefaultLocale(java.util.Locale)"""
        _JComponent.setDefaultLocale(arg0)

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,float,float)"""
        super(_Component, self).firePropertyChange(arg0, _float.valueOf(arg1), _float.valueOf(arg2))

    @overload
    def __init__(self, arg0: 'FlameMain', arg1: 'ParticleControllerInfluencer', arg2: bool, arg3: str, arg4: str):
        """public com.badlogic.gdx.tools.flame.ParticleControllerInfluencerPanel(com.badlogic.gdx.tools.flame.FlameMain,com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer,boolean,java.lang.String,java.lang.String)"""
        val = _ParticleControllerInfluencerPanel(arg0, arg1, _boolean.valueOf(arg2), arg3, arg4)
        self.__wrapper = val

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object)"""
        super(_Container, self).add(arg0, arg1)

    @override
    @overload
    def getLocale(self) -> 'Locale':
        """public java.util.Locale java.awt.Component.getLocale()"""
        return 'Locale'._wrap(super(Component, self).getLocale())

    @override
    @overload
    def setInheritsPopupMenu(self, arg0: bool):
        """public void javax.swing.JComponent.setInheritsPopupMenu(boolean)"""
        super(_JComponent, self).setInheritsPopupMenu(_boolean.valueOf(arg0))

    @override
    @overload
    def getHierarchyListeners(self) -> List['HierarchyListener']:
        """public synchronized java.awt.event.HierarchyListener[] java.awt.Component.getHierarchyListeners()"""
        return List['HierarchyListener']._wrap(super(Component, self).getHierarchyListeners())

    @override
    @overload
    def nextFocus(self):
        """public void java.awt.Component.nextFocus()"""
        super(Component, self).nextFocus()

    @override
    @overload
    def isPaintingTile(self) -> bool:
        """public boolean javax.swing.JComponent.isPaintingTile()"""
        return bool._wrap(super(JComponent, self).isPaintingTile())

    @override
    @overload
    def getContentPanel(self) -> 'JPanel':
        """public javax.swing.JPanel com.badlogic.gdx.tools.flame.EditorPanel.getContentPanel()"""
        return 'JPanel'._wrap(super(EditorPanel, self).getContentPanel())

    @override
    @overload
    def isDisplayable(self) -> bool:
        """public boolean java.awt.Component.isDisplayable()"""
        return bool._wrap(super(Component, self).isDisplayable())

    @override
    @overload
    def getBounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.getBounds()"""
        return 'Rectangle'._wrap(super(Component, self).getBounds())

    @override
    @overload
    def removeMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.removeMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).removeMouseMotionListener(arg0)

    @override
    @overload
    def isShowing(self) -> bool:
        """public boolean java.awt.Component.isShowing()"""
        return bool._wrap(super(Component, self).isShowing())

    @override
    @overload
    def getDropTarget(self) -> 'DropTarget':
        """public synchronized java.awt.dnd.DropTarget java.awt.Component.getDropTarget()"""
        return 'DropTarget'._wrap(super(Component, self).getDropTarget())

    @override
    @overload
    def isFontSet(self) -> bool:
        """public boolean java.awt.Component.isFontSet()"""
        return bool._wrap(super(Component, self).isFontSet())

    @overload
    def mouseUp(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseUp(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseUp(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def setIgnoreRepaint(self, arg0: bool):
        """public void java.awt.Component.setIgnoreRepaint(boolean)"""
        super(_Component, self).setIgnoreRepaint(_boolean.valueOf(arg0))

    @override
    @overload
    def getPropertyChangeListeners(self) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners()"""
        return List['PropertyChangeListener']._wrap(super(Component, self).getPropertyChangeListeners())

    @override
    @overload
    def isBackgroundSet(self) -> bool:
        """public boolean java.awt.Component.isBackgroundSet()"""
        return bool._wrap(super(Component, self).isBackgroundSet())

    @override
    @overload
    def getLocation(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocation()"""
        return 'Point'._wrap(super(Component, self).getLocation())

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int._wrap(super(object, self).hashCode())

    @override
    @overload
    def location(self) -> 'Point':
        """public java.awt.Point java.awt.Component.location()"""
        return 'Point'._wrap(super(Component, self).location())

    @override
    @overload
    def getComponentOrientation(self) -> 'ComponentOrientation':
        """public java.awt.ComponentOrientation java.awt.Component.getComponentOrientation()"""
        return 'ComponentOrientation'._wrap(super(Component, self).getComponentOrientation())

    @override
    @overload
    def addHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.addHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).addHierarchyListener(arg0)

    @override
    @overload
    def getInheritsPopupMenu(self) -> bool:
        """public boolean javax.swing.JComponent.getInheritsPopupMenu()"""
        return bool._wrap(super(JComponent, self).getInheritsPopupMenu())

    @override
    @overload
    def setComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Component.setComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Component, self).setComponentOrientation(arg0)

    @override
    @overload
    def getFocusCycleRootAncestor(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getFocusCycleRootAncestor()"""
        return 'Container'._wrap(super(Component, self).getFocusCycleRootAncestor())

    @override
    @overload
    def show(self, arg0: bool):
        """public void java.awt.Component.show(boolean)"""
        super(_Component, self).show(_boolean.valueOf(arg0))

    @staticmethod
    @overload
    def addContent(arg0: 'JPanel', arg1: int, arg2: int, arg3: 'JComponent', arg4: bool, arg5: int, arg6: int, arg7: float, arg8: float):
        """public static void com.badlogic.gdx.tools.flame.EditorPanel.addContent(javax.swing.JPanel,int,int,javax.swing.JComponent,boolean,int,int,float,float)"""
        _EditorPanel.addContent(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3, _boolean.valueOf(arg4), _int.valueOf(arg5), _int.valueOf(arg6), _float.valueOf(arg7), _float.valueOf(arg8))

    @override
    @overload
    def grabFocus(self):
        """public void javax.swing.JComponent.grabFocus()"""
        super(JComponent, self).grabFocus()

    @overload
    def locate(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.locate(int,int)"""
        return 'Component'._wrap(super(_Container, self).locate(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def isPaintingForPrint(self) -> bool:
        """public final boolean javax.swing.JComponent.isPaintingForPrint()"""
        return bool._wrap(super(JComponent, self).isPaintingForPrint())

    @overload
    def keyDown(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyDown(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyDown(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,int,int)"""
        super(_JComponent, self).firePropertyChange(arg0, _int.valueOf(arg1), _int.valueOf(arg2))

    @override
    @overload
    def getLayout(self) -> 'LayoutManager':
        """public java.awt.LayoutManager java.awt.Container.getLayout()"""
        return 'LayoutManager'._wrap(super(Container, self).getLayout())

    @override
    @overload
    def preferredSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.preferredSize()"""
        return 'Dimension'._wrap(super(Container, self).preferredSize())

    @override
    @overload
    def addNotify(self):
        """public void javax.swing.JComponent.addNotify()"""
        super(JComponent, self).addNotify()

    @override
    @overload
    def setSize(self, arg0: int, arg1: int):
        """public void java.awt.Component.setSize(int,int)"""
        super(_Component, self).setSize(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.repaint(int,int,int,int)"""
        super(_Component, self).repaint(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @overload
    def requestFocusInWindow(self, arg0: 'Cause') -> bool:
        """public boolean java.awt.Component.requestFocusInWindow(java.awt.event.FocusEvent$Cause)"""
        return bool._wrap(super(_Component, self).requestFocusInWindow(arg0))

    @override
    @overload
    def remove(self, arg0: int):
        """public void java.awt.Container.remove(int)"""
        super(_Container, self).remove(_int.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,long,long)"""
        super(_Component, self).firePropertyChange(arg0, _long.valueOf(arg1), _long.valueOf(arg2))

    @override
    @overload
    def update(self, arg0: 'FlameMain'):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.update(com.badlogic.gdx.tools.flame.FlameMain)"""
        super(_EditorPanel, self).update(arg0)

    @override
    @overload
    def setFocusCycleRoot(self, arg0: bool):
        """public void java.awt.Container.setFocusCycleRoot(boolean)"""
        super(_Container, self).setFocusCycleRoot(_boolean.valueOf(arg0))

    @overload
    def keyUp(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyUp(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyUp(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def setBackground(self, arg0: 'Color'):
        """public void javax.swing.JComponent.setBackground(java.awt.Color)"""
        super(_JComponent, self).setBackground(arg0)

    @override
    @overload
    def doLayout(self):
        """public void java.awt.Container.doLayout()"""
        super(Container, self).doLayout()

    @override
    @overload
    def enable(self):
        """public void javax.swing.JComponent.enable()"""
        super(JComponent, self).enable()

    @override
    @overload
    def getInsets(self) -> 'Insets':
        """public java.awt.Insets javax.swing.JComponent.getInsets()"""
        return 'Insets'._wrap(super(JComponent, self).getInsets())

    @override
    @overload
    def setNextFocusableComponent(self, arg0: 'Component'):
        """public void javax.swing.JComponent.setNextFocusableComponent(java.awt.Component)"""
        super(_JComponent, self).setNextFocusableComponent(arg0)

    @override
    @overload
    def getAlignmentY(self) -> float:
        """public float javax.swing.JComponent.getAlignmentY()"""
        return float._wrap(super(JComponent, self).getAlignmentY())

    @overload
    def checkImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @override
    @overload
    def getFocusTraversalKeysEnabled(self) -> bool:
        """public boolean java.awt.Component.getFocusTraversalKeysEnabled()"""
        return bool._wrap(super(Component, self).getFocusTraversalKeysEnabled())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getRootPane(self) -> 'JRootPane':
        """public javax.swing.JRootPane javax.swing.JComponent.getRootPane()"""
        return 'JRootPane'._wrap(super(JComponent, self).getRootPane())

    @override
    @overload
    def invalidate(self):
        """public void java.awt.Container.invalidate()"""
        super(Container, self).invalidate()

    @override
    @overload
    def resetKeyboardActions(self):
        """public void javax.swing.JComponent.resetKeyboardActions()"""
        super(JComponent, self).resetKeyboardActions()

    @overload
    def getComponent(self, arg0: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponent(int)"""
        return 'Component'._wrap(super(_Container, self).getComponent(_int.valueOf(arg0)))

    @override
    @overload
    def setName(self, arg0: str):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setName(java.lang.String)"""
        super(_EditorPanel, self).setName(arg0)

    @override
    @overload
    def addPropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Container.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Container, self).addPropertyChangeListener(arg0, arg1)

    @override
    @overload
    def setInputMap(self, arg0: int, arg1: 'InputMap'):
        """public final void javax.swing.JComponent.setInputMap(int,javax.swing.InputMap)"""
        super(_JComponent, self).setInputMap(_int.valueOf(arg0), arg1)

    @override
    @overload
    def removePropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0)

    @override
    @overload
    def applyComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Container.applyComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Container, self).applyComponentOrientation(arg0)

    @override
    @overload
    def setBorder(self, arg0: 'Border'):
        """public void javax.swing.JComponent.setBorder(javax.swing.border.Border)"""
        super(_JComponent, self).setBorder(arg0)

    @override
    @overload
    def remove(self, arg0: 'MenuComponent'):
        """public void java.awt.Component.remove(java.awt.MenuComponent)"""
        super(_Component, self).remove(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintStream'):
        """public void java.awt.Component.list(java.io.PrintStream)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def removeMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.removeMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).removeMouseListener(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintWriter'):
        """public void java.awt.Component.list(java.io.PrintWriter)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def getKeyListeners(self) -> List['KeyListener']:
        """public synchronized java.awt.event.KeyListener[] java.awt.Component.getKeyListeners()"""
        return List['KeyListener']._wrap(super(Component, self).getKeyListeners())

    @override
    @overload
    def getInputContext(self) -> 'InputContext':
        """public java.awt.im.InputContext java.awt.Component.getInputContext()"""
        return 'InputContext'._wrap(super(Component, self).getInputContext())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,double,double)"""
        super(_Component, self).firePropertyChange(arg0, _double.valueOf(arg1), _double.valueOf(arg2))

    @override
    @overload
    def removeAncestorListener(self, arg0: 'AncestorListener'):
        """public void javax.swing.JComponent.removeAncestorListener(javax.swing.event.AncestorListener)"""
        super(_JComponent, self).removeAncestorListener(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintWriter', arg1: int):
        """public void java.awt.Container.list(java.io.PrintWriter,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @overload
    def checkImage(self, arg0: 'Image', arg1: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, arg1))

    @override
    @overload
    def removeFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.removeFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).removeFocusListener(arg0)

    @overload
    def mouseDown(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDown(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDown(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def setIsAlwayShown(self, arg0: bool):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setIsAlwayShown(boolean)"""
        super(_EditorPanel, self).setIsAlwayShown(_boolean.valueOf(arg0))

    @overload
    def getConditionForKeyStroke(self, arg0: 'KeyStroke') -> int:
        """public int javax.swing.JComponent.getConditionForKeyStroke(javax.swing.KeyStroke)"""
        return int._wrap(super(_JComponent, self).getConditionForKeyStroke(arg0))

    @override
    @overload
    def getTreeLock(self) -> object:
        """public final java.lang.Object java.awt.Component.getTreeLock()"""
        return object._wrap(super(Component, self).getTreeLock())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @override
    @overload
    def addVetoableChangeListener(self, arg0: 'VetoableChangeListener'):
        """public synchronized void javax.swing.JComponent.addVetoableChangeListener(java.beans.VetoableChangeListener)"""
        super(_JComponent, self).addVetoableChangeListener(arg0)

    @overload
    def contains(self, arg0: 'Point') -> bool:
        """public boolean java.awt.Component.contains(java.awt.Point)"""
        return bool._wrap(super(_Component, self).contains(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,short,short)"""
        super(_Component, self).firePropertyChange(arg0, _short.valueOf(arg1), _short.valueOf(arg2))

    @override
    @overload
    def dispatchEvent(self, arg0: 'AWTEvent'):
        """public final void java.awt.Component.dispatchEvent(java.awt.AWTEvent)"""
        super(_Component, self).dispatchEvent(arg0)

    @override
    @overload
    def removeContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.removeContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).removeContainerListener(arg0)

    @override
    @overload
    def getGraphicsConfiguration(self) -> 'GraphicsConfiguration':
        """public java.awt.GraphicsConfiguration java.awt.Component.getGraphicsConfiguration()"""
        return 'GraphicsConfiguration'._wrap(super(Component, self).getGraphicsConfiguration())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: bool, arg2: bool):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,boolean,boolean)"""
        super(_JComponent, self).firePropertyChange(arg0, _boolean.valueOf(arg1), _boolean.valueOf(arg2))

    @override
    @overload
    def registerKeyboardAction(self, arg0: 'ActionListener', arg1: str, arg2: 'KeyStroke', arg3: int):
        """public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,java.lang.String,javax.swing.KeyStroke,int)"""
        super(_JComponent, self).registerKeyboardAction(arg0, arg1, arg2, _int.valueOf(arg3))

    @overload
    def findComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(arg0))

    @override
    @overload
    def resize(self, arg0: int, arg1: int):
        """public void java.awt.Component.resize(int,int)"""
        super(_Component, self).resize(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getHeight(self) -> int:
        """public int javax.swing.JComponent.getHeight()"""
        return int._wrap(super(JComponent, self).getHeight())

    @override
    @overload
    def getTransferHandler(self) -> 'TransferHandler':
        """public javax.swing.TransferHandler javax.swing.JComponent.getTransferHandler()"""
        return 'TransferHandler'._wrap(super(JComponent, self).getTransferHandler())

    @overload
    def imageUpdate(self, arg0: 'Image', arg1: int, arg2: int, arg3: int, arg4: int, arg5: int) -> bool:
        """public boolean java.awt.Component.imageUpdate(java.awt.Image,int,int,int,int,int)"""
        return bool._wrap(super(_Component, self).imageUpdate(arg0, _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4), _int.valueOf(arg5)))

    @override
    @overload
    def getWidth(self) -> int:
        """public int javax.swing.JComponent.getWidth()"""
        return int._wrap(super(JComponent, self).getWidth())

    @override
    @overload
    def transferFocusBackward(self):
        """public void java.awt.Component.transferFocusBackward()"""
        super(Component, self).transferFocusBackward()

    @overload
    def getPropertyChangeListeners(self, arg0: str) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners(java.lang.String)"""
        return List['PropertyChangeListener']._wrap(super(_Component, self).getPropertyChangeListeners(arg0))

    @override
    @overload
    def getName(self) -> str:
        """public java.lang.String com.badlogic.gdx.tools.flame.EditorPanel.getName()"""
        return str._wrap(super(EditorPanel, self).getName())

    @staticmethod
    @overload
    def isLightweightComponent(arg0: 'Component') -> bool:
        """public static boolean javax.swing.JComponent.isLightweightComponent(java.awt.Component)"""
        return bool._wrap(_JComponent.isLightweightComponent(arg0))

    @override
    @overload
    def getBorder(self) -> 'Border':
        """public javax.swing.border.Border javax.swing.JComponent.getBorder()"""
        return 'Border'._wrap(super(JComponent, self).getBorder())

    @override
    @overload
    def printAll(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.printAll(java.awt.Graphics)"""
        super(_JComponent, self).printAll(arg0)

    @override
    @overload
    def addComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.addComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).addComponentListener(arg0)

    @override
    @overload
    def getBaselineResizeBehavior(self) -> 'BaselineResizeBehavior.Component$BaselineResizeBehavior':
        """public java.awt.Component$BaselineResizeBehavior javax.swing.JComponent.getBaselineResizeBehavior()"""
        return 'BaselineResizeBehavior.Component$BaselineResizeBehavior'._wrap(super(JComponent, self).getBaselineResizeBehavior())

    @override
    @overload
    def print(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.print(java.awt.Graphics)"""
        super(_JComponent, self).print(arg0)

    @override
    @overload
    def setInputVerifier(self, arg0: 'InputVerifier'):
        """public void javax.swing.JComponent.setInputVerifier(javax.swing.InputVerifier)"""
        super(_JComponent, self).setInputVerifier(arg0)

    @override
    @overload
    def addAncestorListener(self, arg0: 'AncestorListener'):
        """public void javax.swing.JComponent.addAncestorListener(javax.swing.event.AncestorListener)"""
        super(_JComponent, self).addAncestorListener(arg0)

    @override
    @overload
    def getFont(self) -> 'Font':
        """public java.awt.Font java.awt.Component.getFont()"""
        return 'Font'._wrap(super(Component, self).getFont())

    @override
    @overload
    def setFont(self, arg0: 'Font'):
        """public void javax.swing.JComponent.setFont(java.awt.Font)"""
        super(_JComponent, self).setFont(arg0)

    @override
    @overload
    def isOptimizedDrawingEnabled(self) -> bool:
        """public boolean javax.swing.JComponent.isOptimizedDrawingEnabled()"""
        return bool._wrap(super(JComponent, self).isOptimizedDrawingEnabled())

    @override
    @overload
    def isValidateRoot(self) -> bool:
        """public boolean javax.swing.JComponent.isValidateRoot()"""
        return bool._wrap(super(JComponent, self).isValidateRoot())

    @overload
    def prepareImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @override
    @overload
    def setHasAdvanced(self, arg0: bool):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setHasAdvanced(boolean)"""
        super(_EditorPanel, self).setHasAdvanced(_boolean.valueOf(arg0))

    @override
    @overload
    def setForeground(self, arg0: 'Color'):
        """public void javax.swing.JComponent.setForeground(java.awt.Color)"""
        super(_JComponent, self).setForeground(arg0)

    @overload
    def mouseDrag(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDrag(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDrag(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def isOpaque(self) -> bool:
        """public boolean javax.swing.JComponent.isOpaque()"""
        return bool._wrap(super(JComponent, self).isOpaque())

    @overload
    def createVolatileImage(self, arg0: int, arg1: int, arg2: 'ImageCapabilities') -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int,java.awt.ImageCapabilities) throws java.awt.AWTException"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1), arg2))

    @override
    @overload
    def bounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.bounds()"""
        return 'Rectangle'._wrap(super(Component, self).bounds())

    @override
    @overload
    def update(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.update(java.awt.Graphics)"""
        super(_JComponent, self).update(arg0)

    @override
    @overload
    def add(self, arg0: 'PopupMenu'):
        """public void java.awt.Component.add(java.awt.PopupMenu)"""
        super(_Component, self).add(arg0)

    @override
    @overload
    def getToolTipText(self) -> str:
        """public java.lang.String javax.swing.JComponent.getToolTipText()"""
        return str._wrap(super(JComponent, self).getToolTipText())

    @override
    @overload
    def isVisible(self) -> bool:
        """public boolean java.awt.Component.isVisible()"""
        return bool._wrap(super(Component, self).isVisible())

    @override
    @overload
    def setDropTarget(self, arg0: 'DropTarget'):
        """public synchronized void java.awt.Component.setDropTarget(java.awt.dnd.DropTarget)"""
        super(_Component, self).setDropTarget(arg0)

    @override
    @overload
    def getLocationOnScreen(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocationOnScreen()"""
        return 'Point'._wrap(super(Component, self).getLocationOnScreen())

    @override
    @overload
    def getY(self) -> int:
        """public int javax.swing.JComponent.getY()"""
        return int._wrap(super(JComponent, self).getY())

    @overload
    def getComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def isMaximumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMaximumSizeSet()"""
        return bool._wrap(super(Component, self).isMaximumSizeSet())

    @override
    @overload
    def setAlignmentY(self, arg0: float):
        """public void javax.swing.JComponent.setAlignmentY(float)"""
        super(_JComponent, self).setAlignmentY(_float.valueOf(arg0))

    @override
    @overload
    def getRegisteredKeyStrokes(self) -> List['KeyStroke']:
        """public javax.swing.KeyStroke[] javax.swing.JComponent.getRegisteredKeyStrokes()"""
        return List['KeyStroke']._wrap(super(JComponent, self).getRegisteredKeyStrokes())

    @override
    @overload
    def isFocusable(self) -> bool:
        """public boolean java.awt.Component.isFocusable()"""
        return bool._wrap(super(Component, self).isFocusable())

    @override
    @overload
    def isFocusTraversalPolicyProvider(self) -> bool:
        """public final boolean java.awt.Container.isFocusTraversalPolicyProvider()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicyProvider())

    @override
    @overload
    def getMouseListeners(self) -> List['MouseListener']:
        """public synchronized java.awt.event.MouseListener[] java.awt.Component.getMouseListeners()"""
        return List['MouseListener']._wrap(super(Component, self).getMouseListeners())

    @override
    @overload
    def registerKeyboardAction(self, arg0: 'ActionListener', arg1: 'KeyStroke', arg2: int):
        """public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,javax.swing.KeyStroke,int)"""
        super(_JComponent, self).registerKeyboardAction(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def transferFocusUpCycle(self):
        """public void java.awt.Component.transferFocusUpCycle()"""
        super(Component, self).transferFocusUpCycle()

    @override
    @overload
    def removeKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.removeKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).removeKeyListener(arg0)

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: str, arg2: str):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,char,char)"""
        super(_JComponent, self).firePropertyChange(arg0, _char.valueOf(arg1), _char.valueOf(arg2))

    @override
    @overload
    def getMouseMotionListeners(self) -> List['MouseMotionListener']:
        """public synchronized java.awt.event.MouseMotionListener[] java.awt.Component.getMouseMotionListeners()"""
        return List['MouseMotionListener']._wrap(super(Component, self).getMouseMotionListeners())

    @override
    @overload
    def getAutoscrolls(self) -> bool:
        """public boolean javax.swing.JComponent.getAutoscrolls()"""
        return bool._wrap(super(JComponent, self).getAutoscrolls())

    @override
    @overload
    def addContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.addContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).addContainerListener(arg0)

    @override
    @overload
    def isFocusTraversable(self) -> bool:
        """public boolean java.awt.Component.isFocusTraversable()"""
        return bool._wrap(super(Component, self).isFocusTraversable())

    @overload
    def mouseExit(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseExit(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseExit(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getBounds(self, arg0: 'Rectangle') -> 'Rectangle':
        """public java.awt.Rectangle javax.swing.JComponent.getBounds(java.awt.Rectangle)"""
        return 'Rectangle'._wrap(super(_JComponent, self).getBounds(arg0))

    @override
    @overload
    def setToolTipText(self, arg0: str):
        """public void javax.swing.JComponent.setToolTipText(java.lang.String)"""
        super(_JComponent, self).setToolTipText(arg0)

    @override
    @overload
    def setAutoscrolls(self, arg0: bool):
        """public void javax.swing.JComponent.setAutoscrolls(boolean)"""
        super(_JComponent, self).setAutoscrolls(_boolean.valueOf(arg0))

    @override
    @overload
    def setComponentPopupMenu(self, arg0: 'JPopupMenu'):
        """public void javax.swing.JComponent.setComponentPopupMenu(javax.swing.JPopupMenu)"""
        super(_JComponent, self).setComponentPopupMenu(arg0)

    @override
    @overload
    def setMixingCutoutShape(self, arg0: 'Shape'):
        """public void java.awt.Component.setMixingCutoutShape(java.awt.Shape)"""
        super(_Component, self).setMixingCutoutShape(arg0)

    @override
    @overload
    def getVisibleRect(self) -> 'Rectangle':
        """public java.awt.Rectangle javax.swing.JComponent.getVisibleRect()"""
        return 'Rectangle'._wrap(super(JComponent, self).getVisibleRect())

    @override
    @overload
    def requestFocus(self, arg0: 'Cause'):
        """public void java.awt.Component.requestFocus(java.awt.event.FocusEvent$Cause)"""
        super(_Component, self).requestFocus(arg0)

    @overload
    def createImage(self, arg0: int, arg1: int) -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(int,int)"""
        return 'Image'._wrap(super(_Component, self).createImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def putClientProperty(self, arg0: object, arg1: object):
        """public final void javax.swing.JComponent.putClientProperty(java.lang.Object,java.lang.Object)"""
        super(_JComponent, self).putClientProperty(arg0, arg1)

    @override
    @overload
    def getVetoableChangeListeners(self) -> List['VetoableChangeListener']:
        """public synchronized java.beans.VetoableChangeListener[] javax.swing.JComponent.getVetoableChangeListeners()"""
        return List['VetoableChangeListener']._wrap(super(JComponent, self).getVetoableChangeListeners())

    @override
    @overload
    def scrollRectToVisible(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.scrollRectToVisible(java.awt.Rectangle)"""
        super(_JComponent, self).scrollRectToVisible(arg0)

    @override
    @overload
    def getTopLevelAncestor(self) -> 'Container':
        """public java.awt.Container javax.swing.JComponent.getTopLevelAncestor()"""
        return 'Container'._wrap(super(JComponent, self).getTopLevelAncestor())

    @override
    @overload
    def isRequestFocusEnabled(self) -> bool:
        """public boolean javax.swing.JComponent.isRequestFocusEnabled()"""
        return bool._wrap(super(JComponent, self).isRequestFocusEnabled())

    @override
    @overload
    def getFocusListeners(self) -> List['FocusListener']:
        """public synchronized java.awt.event.FocusListener[] java.awt.Component.getFocusListeners()"""
        return List['FocusListener']._wrap(super(Component, self).getFocusListeners())

    @override
    @overload
    def setLayout(self, arg0: 'LayoutManager'):
        """public void java.awt.Container.setLayout(java.awt.LayoutManager)"""
        super(_Container, self).setLayout(arg0)

    @overload
    def add(self, arg0: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0))

    @override
    @overload
    def getMouseWheelListeners(self) -> List['MouseWheelListener']:
        """public synchronized java.awt.event.MouseWheelListener[] java.awt.Component.getMouseWheelListeners()"""
        return List['MouseWheelListener']._wrap(super(Component, self).getMouseWheelListeners())

    @override
    @overload
    def reshape(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void javax.swing.JComponent.reshape(int,int,int,int)"""
        super(_JComponent, self).reshape(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def setTransferHandler(self, arg0: 'TransferHandler'):
        """public void javax.swing.JComponent.setTransferHandler(javax.swing.TransferHandler)"""
        super(_JComponent, self).setTransferHandler(arg0)

    @override
    @overload
    def getPreferredSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getPreferredSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getPreferredSize())

    @override
    @overload
    def setLocation(self, arg0: int, arg1: int):
        """public void java.awt.Component.setLocation(int,int)"""
        super(_Component, self).setLocation(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def removeInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.removeInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).removeInputMethodListener(arg0)

    @override
    @overload
    def setFocusable(self, arg0: bool):
        """public void java.awt.Component.setFocusable(boolean)"""
        super(_Component, self).setFocusable(_boolean.valueOf(arg0))

    @override
    @overload
    def paintComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.paintComponents(java.awt.Graphics)"""
        super(_Container, self).paintComponents(arg0)

    @override
    @overload
    def addFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.addFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).addFocusListener(arg0)

    @overload
    def prepareImage(self, arg0: 'Image', arg1: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, arg1))

    @override
    @overload
    def addKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.addKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).addKeyListener(arg0)

    @override
    @overload
    def resize(self, arg0: 'Dimension'):
        """public void java.awt.Component.resize(java.awt.Dimension)"""
        super(_Component, self).resize(arg0)

    @override
    @overload
    def setComponentZOrder(self, arg0: 'Component', arg1: int):
        """public void java.awt.Container.setComponentZOrder(java.awt.Component,int)"""
        super(_Container, self).setComponentZOrder(arg0, _int.valueOf(arg1))

    @override
    @overload
    def list(self):
        """public void java.awt.Component.list()"""
        super(Component, self).list()

    @overload
    def add(self, arg0: str, arg1: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.lang.String,java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, arg1))

    @override
    @overload
    def paintImmediately(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void javax.swing.JComponent.paintImmediately(int,int,int,int)"""
        super(_JComponent, self).paintImmediately(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def getMinimumSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getMinimumSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getMinimumSize())

    @override
    @overload
    def setEnabled(self, arg0: bool):
        """public void javax.swing.JComponent.setEnabled(boolean)"""
        super(_JComponent, self).setEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def hasFocus(self) -> bool:
        """public boolean java.awt.Component.hasFocus()"""
        return bool._wrap(super(Component, self).hasFocus())

    @overload
    def createVolatileImage(self, arg0: int, arg1: int) -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int)"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.removeHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).removeHierarchyListener(arg0)

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.awt.Component.toString()"""
        return str._wrap(super(Component, self).toString())

    @override
    @overload
    def addMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.addMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).addMouseListener(arg0)

    @override
    @overload
    def isFocusOwner(self) -> bool:
        """public boolean java.awt.Component.isFocusOwner()"""
        return bool._wrap(super(Component, self).isFocusOwner())

    @override
    @overload
    def getAccessibleContext(self) -> 'AccessibleContext':
        """public javax.accessibility.AccessibleContext javax.swing.JPanel.getAccessibleContext()"""
        return 'AccessibleContext'._wrap(super(JPanel, self).getAccessibleContext())

    @overload
    def postEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.postEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).postEvent(arg0))

    @overload
    def getLocation(self, arg0: 'Point') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getLocation(java.awt.Point)"""
        return 'Point'._wrap(super(_JComponent, self).getLocation(arg0))

    @overload
    def getBaseline(self, arg0: int, arg1: int) -> int:
        """public int javax.swing.JComponent.getBaseline(int,int)"""
        return int._wrap(super(_JComponent, self).getBaseline(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def findComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeNotify(self):
        """public void javax.swing.JComponent.removeNotify()"""
        super(JComponent, self).removeNotify()

    @override
    @overload
    def getForeground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getForeground()"""
        return 'Color'._wrap(super(Component, self).getForeground())

    @override
    @overload
    def show(self):
        """public void java.awt.Component.show()"""
        super(Component, self).show()

    @override
    @overload
    def isDoubleBuffered(self) -> bool:
        """public boolean javax.swing.JComponent.isDoubleBuffered()"""
        return bool._wrap(super(JComponent, self).isDoubleBuffered())

    @override
    @overload
    def setDescription(self, arg0: str):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setDescription(java.lang.String)"""
        super(_EditorPanel, self).setDescription(arg0)

    @override
    @overload
    def isFocusCycleRoot(self) -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot()"""
        return bool._wrap(super(Container, self).isFocusCycleRoot())

    @override
    @overload
    def addMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.addMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).addMouseWheelListener(arg0)

    @override
    @overload
    def hide(self):
        """public void javax.swing.JComponent.hide()"""
        super(JComponent, self).hide()

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def revalidate(self):
        """public void javax.swing.JComponent.revalidate()"""
        super(JComponent, self).revalidate()

    @override
    @overload
    def getActionMap(self) -> 'ActionMap':
        """public final javax.swing.ActionMap javax.swing.JComponent.getActionMap()"""
        return 'ActionMap'._wrap(super(JComponent, self).getActionMap())

    @override
    @overload
    def requestFocusInWindow(self) -> bool:
        """public boolean javax.swing.JComponent.requestFocusInWindow()"""
        return bool._wrap(super(JComponent, self).requestFocusInWindow())

    @overload
    def action(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.action(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).action(arg0, arg1))

    @override
    @overload
    def isManagingFocus(self) -> bool:
        """public boolean javax.swing.JComponent.isManagingFocus()"""
        return bool._wrap(super(JComponent, self).isManagingFocus())

    @override
    @overload
    def isLightweight(self) -> bool:
        """public boolean java.awt.Component.isLightweight()"""
        return bool._wrap(super(Component, self).isLightweight())

    @override
    @overload
    def setAlignmentX(self, arg0: float):
        """public void javax.swing.JComponent.setAlignmentX(float)"""
        super(_JComponent, self).setAlignmentX(_float.valueOf(arg0))

    @overload
    def getFocusTraversalKeys(self, arg0: int) -> 'Set':
        """public java.util.Set<java.awt.AWTKeyStroke> java.awt.Container.getFocusTraversalKeys(int)"""
        return 'Set'._wrap(super(_Container, self).getFocusTraversalKeys(_int.valueOf(arg0)))

    @override
    @overload
    def setFocusTraversalKeysEnabled(self, arg0: bool):
        """public void java.awt.Component.setFocusTraversalKeysEnabled(boolean)"""
        super(_Component, self).setFocusTraversalKeysEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def remove(self, arg0: 'Component'):
        """public void java.awt.Container.remove(java.awt.Component)"""
        super(_Container, self).remove(arg0)

    @overload
    def getInsets(self, arg0: 'Insets') -> 'Insets':
        """public java.awt.Insets javax.swing.JComponent.getInsets(java.awt.Insets)"""
        return 'Insets'._wrap(super(_JComponent, self).getInsets(arg0))

    @override
    @overload
    def insets(self) -> 'Insets':
        """public java.awt.Insets java.awt.Container.insets()"""
        return 'Insets'._wrap(super(Container, self).insets())

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int):
        """public void javax.swing.JComponent.repaint(long,int,int,int,int)"""
        super(_JComponent, self).repaint(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4))

    @override
    @overload
    def setFocusTraversalPolicy(self, arg0: 'FocusTraversalPolicy'):
        """public void java.awt.Container.setFocusTraversalPolicy(java.awt.FocusTraversalPolicy)"""
        super(_Container, self).setFocusTraversalPolicy(arg0)

    @overload
    def getSize(self, arg0: 'Dimension') -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getSize(java.awt.Dimension)"""
        return 'Dimension'._wrap(super(_JComponent, self).getSize(arg0))

    @override
    @overload
    def enable(self, arg0: bool):
        """public void java.awt.Component.enable(boolean)"""
        super(_Component, self).enable(_boolean.valueOf(arg0))

    @overload
    def getToolTipLocation(self, arg0: 'MouseEvent') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getToolTipLocation(java.awt.event.MouseEvent)"""
        return 'Point'._wrap(super(_JComponent, self).getToolTipLocation(arg0))

    @override
    @overload
    def addPropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Container.addPropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Container, self).addPropertyChangeListener(arg0)

    @overload
    def getComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(arg0))

    @override
    @overload
    def size(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.size()"""
        return 'Dimension'._wrap(super(Component, self).size())

    @override
    @overload
    def getVerifyInputWhenFocusTarget(self) -> bool:
        """public boolean javax.swing.JComponent.getVerifyInputWhenFocusTarget()"""
        return bool._wrap(super(JComponent, self).getVerifyInputWhenFocusTarget())

    @overload
    def mouseMove(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseMove(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseMove(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getActionForKeyStroke(self, arg0: 'KeyStroke') -> 'ActionListener':
        """public java.awt.event.ActionListener javax.swing.JComponent.getActionForKeyStroke(javax.swing.KeyStroke)"""
        return 'ActionListener'._wrap(super(_JComponent, self).getActionForKeyStroke(arg0))

    @overload
    def lostFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.lostFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).lostFocus(arg0, arg1))

    @override
    @overload
    def isMinimumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMinimumSizeSet()"""
        return bool._wrap(super(Component, self).isMinimumSizeSet())

    @override
    @overload
    def isForegroundSet(self) -> bool:
        """public boolean java.awt.Component.isForegroundSet()"""
        return bool._wrap(super(Component, self).isForegroundSet())

    @overload
    def getMousePosition(self, arg0: bool) -> 'Point':
        """public java.awt.Point java.awt.Container.getMousePosition(boolean) throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(_Container, self).getMousePosition(_boolean.valueOf(arg0)))

    @overload
    def getFontMetrics(self, arg0: 'Font') -> 'FontMetrics':
        """public java.awt.FontMetrics javax.swing.JComponent.getFontMetrics(java.awt.Font)"""
        return 'FontMetrics'._wrap(super(_JComponent, self).getFontMetrics(arg0))

    @overload
    def getListeners(self, arg0: 'Class') -> List['EventListener']:
        """public <T extends java.util.EventListener> T[] javax.swing.JComponent.getListeners(java.lang.Class<T>)"""
        return List['EventListener']._wrap(super(_JComponent, self).getListeners(arg0))

    @override
    @overload
    def getHierarchyBoundsListeners(self) -> List['HierarchyBoundsListener']:
        """public synchronized java.awt.event.HierarchyBoundsListener[] java.awt.Component.getHierarchyBoundsListeners()"""
        return List['HierarchyBoundsListener']._wrap(super(Component, self).getHierarchyBoundsListeners())

    @override
    @overload
    def minimumSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.minimumSize()"""
        return 'Dimension'._wrap(super(Container, self).minimumSize())

    @overload
    def handleEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.handleEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).handleEvent(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @override
    @overload
    def getComponentListeners(self) -> List['ComponentListener']:
        """public synchronized java.awt.event.ComponentListener[] java.awt.Component.getComponentListeners()"""
        return List['ComponentListener']._wrap(super(Component, self).getComponentListeners())

    @override
    @overload
    def computeVisibleRect(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.computeVisibleRect(java.awt.Rectangle)"""
        super(_JComponent, self).computeVisibleRect(arg0)

    @override
    @overload
    def deliverEvent(self, arg0: 'Event'):
        """public void java.awt.Container.deliverEvent(java.awt.Event)"""
        super(_Container, self).deliverEvent(arg0)

    @override
    @overload
    def addHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.addHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).addHierarchyBoundsListener(arg0)

    @override
    @overload
    def getAlignmentX(self) -> float:
        """public float javax.swing.JComponent.getAlignmentX()"""
        return float._wrap(super(JComponent, self).getAlignmentX())

    @overload
    def add(self, arg0: 'Component', arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component,int)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def repaint(self):
        """public void java.awt.Component.repaint()"""
        super(Component, self).repaint()

    @overload
    def gotFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.gotFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).gotFocus(arg0, arg1))

    @override
    @overload
    def createToolTip(self) -> 'JToolTip':
        """public javax.swing.JToolTip javax.swing.JComponent.createToolTip()"""
        return 'JToolTip'._wrap(super(JComponent, self).createToolTip())

    @override
    @overload
    def setEmbedded(self):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setEmbedded()"""
        super(EditorPanel, self).setEmbedded()

    @overload
    def getToolTipText(self, arg0: 'MouseEvent') -> str:
        """public java.lang.String javax.swing.JComponent.getToolTipText(java.awt.event.MouseEvent)"""
        return str._wrap(super(_JComponent, self).getToolTipText(arg0))

    @override
    @overload
    def printComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.printComponents(java.awt.Graphics)"""
        super(_Container, self).printComponents(arg0)

    @override
    @overload
    def getColorModel(self) -> 'ColorModel':
        """public java.awt.image.ColorModel java.awt.Component.getColorModel()"""
        return 'ColorModel'._wrap(super(Component, self).getColorModel())

    @override
    @overload
    def setFocusTraversalPolicyProvider(self, arg0: bool):
        """public final void java.awt.Container.setFocusTraversalPolicyProvider(boolean)"""
        super(_Container, self).setFocusTraversalPolicyProvider(_boolean.valueOf(arg0))

    @overload
    def getComponentZOrder(self, arg0: 'Component') -> int:
        """public int java.awt.Container.getComponentZOrder(java.awt.Component)"""
        return int._wrap(super(_Container, self).getComponentZOrder(arg0))

    @override
    @overload
    def getDebugGraphicsOptions(self) -> int:
        """public int javax.swing.JComponent.getDebugGraphicsOptions()"""
        return int._wrap(super(JComponent, self).getDebugGraphicsOptions())

    @overload
    def areFocusTraversalKeysSet(self, arg0: int) -> bool:
        """public boolean java.awt.Container.areFocusTraversalKeysSet(int)"""
        return bool._wrap(super(_Container, self).areFocusTraversalKeysSet(_int.valueOf(arg0)))

    @override
    @overload
    def getSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.getSize()"""
        return 'Dimension'._wrap(super(Component, self).getSize())

    @override
    @overload
    def repaint(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.repaint(java.awt.Rectangle)"""
        super(_JComponent, self).repaint(arg0)

    @overload
    def getClientProperty(self, arg0: object) -> object:
        """public final java.lang.Object javax.swing.JComponent.getClientProperty(java.lang.Object)"""
        return object._wrap(super(_JComponent, self).getClientProperty(arg0))

    @override
    @overload
    def unregisterKeyboardAction(self, arg0: 'KeyStroke'):
        """public void javax.swing.JComponent.unregisterKeyboardAction(javax.swing.KeyStroke)"""
        super(_JComponent, self).unregisterKeyboardAction(arg0)

    @overload
    def requestFocus(self, arg0: bool) -> bool:
        """public boolean javax.swing.JComponent.requestFocus(boolean)"""
        return bool._wrap(super(_JComponent, self).requestFocus(_boolean.valueOf(arg0)))

    @override
    @overload
    def setActionMap(self, arg0: 'ActionMap'):
        """public final void javax.swing.JComponent.setActionMap(javax.swing.ActionMap)"""
        super(_JComponent, self).setActionMap(arg0)

    @override
    @overload
    def getX(self) -> int:
        """public int javax.swing.JComponent.getX()"""
        return int._wrap(super(JComponent, self).getX())

    @overload
    def mouseEnter(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseEnter(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseEnter(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def updateUI(self):
        """public void javax.swing.JPanel.updateUI()"""
        super(JPanel, self).updateUI()

    @override
    @overload
    def getToolkit(self) -> 'Toolkit':
        """public java.awt.Toolkit java.awt.Component.getToolkit()"""
        return 'Toolkit'._wrap(super(Component, self).getToolkit())

    @override
    @overload
    def isCursorSet(self) -> bool:
        """public boolean java.awt.Component.isCursorSet()"""
        return bool._wrap(super(Component, self).isCursorSet())

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object, arg2: int):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object,int)"""
        super(_Container, self).add(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def setPreferredSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setPreferredSize(java.awt.Dimension)"""
        super(_JComponent, self).setPreferredSize(arg0)

    @override
    @overload
    def setBounds(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.setBounds(int,int,int,int)"""
        super(_Component, self).setBounds(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def isFocusTraversalPolicySet(self) -> bool:
        """public boolean java.awt.Container.isFocusTraversalPolicySet()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicySet())

    @override
    @overload
    def requestFocus(self):
        """public void javax.swing.JComponent.requestFocus()"""
        super(JComponent, self).requestFocus()

    @override
    @overload
    def getAncestorListeners(self) -> List['AncestorListener']:
        """public javax.swing.event.AncestorListener[] javax.swing.JComponent.getAncestorListeners()"""
        return List['AncestorListener']._wrap(super(JComponent, self).getAncestorListeners())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool._wrap(super(_object, self).equals(arg0))

    @overload
    def getInputMap(self, arg0: int) -> 'InputMap':
        """public final javax.swing.InputMap javax.swing.JComponent.getInputMap(int)"""
        return 'InputMap'._wrap(super(_JComponent, self).getInputMap(_int.valueOf(arg0)))

    @override
    @overload
    def isEnabled(self) -> bool:
        """public boolean java.awt.Component.isEnabled()"""
        return bool._wrap(super(Component, self).isEnabled())

    @override
    @overload
    def move(self, arg0: int, arg1: int):
        """public void java.awt.Component.move(int,int)"""
        super(_Component, self).move(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def addMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.addMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).addMouseMotionListener(arg0)

    @override
    @overload
    def getIgnoreRepaint(self) -> bool:
        """public boolean java.awt.Component.getIgnoreRepaint()"""
        return bool._wrap(super(Component, self).getIgnoreRepaint())

    @overload
    def isFocusCycleRoot(self, arg0: 'Container') -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot(java.awt.Container)"""
        return bool._wrap(super(_Container, self).isFocusCycleRoot(arg0))

    @override
    @overload
    def getGraphics(self) -> 'Graphics':
        """public java.awt.Graphics javax.swing.JComponent.getGraphics()"""
        return 'Graphics'._wrap(super(JComponent, self).getGraphics())

    @override
    @overload
    def handle(self, arg0: int, arg1: object):
        """public void com.badlogic.gdx.tools.flame.ParticleControllerInfluencerPanel.handle(int,java.lang.Object)"""
        super(_ParticleControllerInfluencerPanel, self).handle(_int.valueOf(arg0), arg1)

    @override
    @overload
    def setLocale(self, arg0: 'Locale'):
        """public void java.awt.Component.setLocale(java.util.Locale)"""
        super(_Component, self).setLocale(arg0)

    @override
    @overload
    def paintAll(self, arg0: 'Graphics'):
        """public void java.awt.Component.paintAll(java.awt.Graphics)"""
        super(_Component, self).paintAll(arg0)

    @override
    @overload
    def setDoubleBuffered(self, arg0: bool):
        """public void javax.swing.JComponent.setDoubleBuffered(boolean)"""
        super(_JComponent, self).setDoubleBuffered(_boolean.valueOf(arg0))

    @override
    @overload
    def isPreferredSizeSet(self) -> bool:
        """public boolean java.awt.Component.isPreferredSizeSet()"""
        return bool._wrap(super(Component, self).isPreferredSizeSet())

    @override
    @overload
    def addInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.addInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).addInputMethodListener(arg0)

    @override
    @overload
    def removeMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.removeMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).removeMouseWheelListener(arg0)

    @override
    @overload
    def getInputMap(self) -> 'InputMap':
        """public final javax.swing.InputMap javax.swing.JComponent.getInputMap()"""
        return 'InputMap'._wrap(super(JComponent, self).getInputMap())

    @override
    @overload
    def setVisible(self, arg0: bool):
        """public void javax.swing.JComponent.setVisible(boolean)"""
        super(_JComponent, self).setVisible(_boolean.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,byte,byte)"""
        super(_Component, self).firePropertyChange(arg0, _byte.valueOf(arg1), _byte.valueOf(arg2))

    @override
    @overload
    def getUIClassID(self) -> str:
        """public java.lang.String javax.swing.JPanel.getUIClassID()"""
        return str._wrap(super(JPanel, self).getUIClassID())

    @override
    @overload
    def transferFocusDownCycle(self):
        """public void java.awt.Container.transferFocusDownCycle()"""
        super(Container, self).transferFocusDownCycle()

    @override
    @overload
    def getNextFocusableComponent(self) -> 'Component':
        """public java.awt.Component javax.swing.JComponent.getNextFocusableComponent()"""
        return 'Component'._wrap(super(JComponent, self).getNextFocusableComponent())

    @override
    @overload
    def getUI(self) -> 'PanelUI':
        """public javax.swing.plaf.PanelUI javax.swing.JPanel.getUI()"""
        return 'PanelUI'._wrap(super(JPanel, self).getUI())

    @override
    @overload
    def setBounds(self, arg0: 'Rectangle'):
        """public void java.awt.Component.setBounds(java.awt.Rectangle)"""
        super(_Component, self).setBounds(arg0)

    @override
    @overload
    def repaint(self, arg0: int):
        """public void java.awt.Component.repaint(long)"""
        super(_Component, self).repaint(_long.valueOf(arg0))

    @override
    @overload
    def removeHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.removeHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).removeHierarchyBoundsListener(arg0)

    @override
    @overload
    def getComponentPopupMenu(self) -> 'JPopupMenu':
        """public javax.swing.JPopupMenu javax.swing.JComponent.getComponentPopupMenu()"""
        return 'JPopupMenu'._wrap(super(JComponent, self).getComponentPopupMenu())

    @override
    @overload
    def getMousePosition(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getMousePosition() throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(Component, self).getMousePosition())

    @override
    @overload
    def getComponentCount(self) -> int:
        """public int java.awt.Container.getComponentCount()"""
        return int._wrap(super(Container, self).getComponentCount())

    @override
    @overload
    def getInputMethodRequests(self) -> 'InputMethodRequests':
        """public java.awt.im.InputMethodRequests java.awt.Component.getInputMethodRequests()"""
        return 'InputMethodRequests'._wrap(super(Component, self).getInputMethodRequests())

    @override
    @overload
    def setMaximumSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setMaximumSize(java.awt.Dimension)"""
        super(_JComponent, self).setMaximumSize(arg0)

    @override
    @overload
    def setRequestFocusEnabled(self, arg0: bool):
        """public void javax.swing.JComponent.setRequestFocusEnabled(boolean)"""
        super(_JComponent, self).setRequestFocusEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def setFocusTraversalKeys(self, arg0: int, arg1: 'Set'):
        """public void javax.swing.JComponent.setFocusTraversalKeys(int,java.util.Set<? extends java.awt.AWTKeyStroke>)"""
        super(_JComponent, self).setFocusTraversalKeys(_int.valueOf(arg0), arg1)

    @overload
    def inside(self, arg0: int, arg1: int) -> bool:
        """public boolean java.awt.Component.inside(int,int)"""
        return bool._wrap(super(_Component, self).inside(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def requestDefaultFocus(self) -> bool:
        """public boolean javax.swing.JComponent.requestDefaultFocus()"""
        return bool._wrap(super(JComponent, self).requestDefaultFocus())

    @override
    @overload
    def disable(self):
        """public void javax.swing.JComponent.disable()"""
        super(JComponent, self).disable()

    @override
    @overload
    def showContent(self, arg0: bool):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.showContent(boolean)"""
        super(_EditorPanel, self).showContent(_boolean.valueOf(arg0))

    @override
    @overload
    def enableInputMethods(self, arg0: bool):
        """public void java.awt.Component.enableInputMethods(boolean)"""
        super(_Component, self).enableInputMethods(_boolean.valueOf(arg0))

    @override
    @overload
    def layout(self):
        """public void java.awt.Container.layout()"""
        super(Container, self).layout()

    @override
    @overload
    def getInputMethodListeners(self) -> List['InputMethodListener']:
        """public synchronized java.awt.event.InputMethodListener[] java.awt.Component.getInputMethodListeners()"""
        return List['InputMethodListener']._wrap(super(Component, self).getInputMethodListeners())

    @override
    @overload
    def paint(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.paint(java.awt.Graphics)"""
        super(_JComponent, self).paint(arg0)

    @override
    @overload
    def transferFocus(self):
        """public void java.awt.Component.transferFocus()"""
        super(Component, self).transferFocus()

    @override
    @overload
    def removeComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.removeComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).removeComponentListener(arg0)

    @override
    @overload
    def getCursor(self) -> 'Cursor':
        """public java.awt.Cursor java.awt.Component.getCursor()"""
        return 'Cursor'._wrap(super(Component, self).getCursor())

    @override
    @overload
    def setMinimumSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setMinimumSize(java.awt.Dimension)"""
        super(_JComponent, self).setMinimumSize(arg0)

    @overload
    def onTemplateChecked(self, arg0: 'ParticleController', arg1: bool):
        """public void com.badlogic.gdx.tools.flame.ParticleControllerInfluencerPanel.onTemplateChecked(com.badlogic.gdx.graphics.g3d.particles.ParticleController,boolean)"""
        super(_ParticleControllerInfluencerPanel, self).onTemplateChecked(arg0, _boolean.valueOf(arg1))

    @override
    @overload
    def getAdvancedPanel(self) -> 'JPanel':
        """public javax.swing.JPanel com.badlogic.gdx.tools.flame.EditorPanel.getAdvancedPanel()"""
        return 'JPanel'._wrap(super(EditorPanel, self).getAdvancedPanel())

    @override
    @overload
    def getContainerListeners(self) -> List['ContainerListener']:
        """public synchronized java.awt.event.ContainerListener[] java.awt.Container.getContainerListeners()"""
        return List['ContainerListener']._wrap(super(Container, self).getContainerListeners())

    @override
    @overload
    def setLocation(self, arg0: 'Point'):
        """public void java.awt.Component.setLocation(java.awt.Point)"""
        super(_Component, self).setLocation(arg0)

    @override
    @overload
    def setSize(self, arg0: 'Dimension'):
        """public void java.awt.Component.setSize(java.awt.Dimension)"""
        super(_Component, self).setSize(arg0)

    @override
    @overload
    def removeAll(self):
        """public void java.awt.Container.removeAll()"""
        super(Container, self).removeAll()

    @overload
    def getPopupLocation(self, arg0: 'MouseEvent') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getPopupLocation(java.awt.event.MouseEvent)"""
        return 'Point'._wrap(super(_JComponent, self).getPopupLocation(arg0))

    @overload
    def isAncestorOf(self, arg0: 'Component') -> bool:
        """public boolean java.awt.Container.isAncestorOf(java.awt.Component)"""
        return bool._wrap(super(_Container, self).isAncestorOf(arg0))

    @override
    @overload
    def setOpaque(self, arg0: bool):
        """public void javax.swing.JComponent.setOpaque(boolean)"""
        super(_JComponent, self).setOpaque(_boolean.valueOf(arg0))

    @overload
    def onResourceLoaded(self, arg0: 'ParticleEffect'):
        """public void com.badlogic.gdx.tools.flame.ParticleControllerInfluencerPanel.onResourceLoaded(com.badlogic.gdx.graphics.g3d.particles.ParticleEffect)"""
        super(_ParticleControllerInfluencerPanel, self).onResourceLoaded(arg0)

    @overload
    def contains(self, arg0: int, arg1: int) -> bool:
        """public boolean javax.swing.JComponent.contains(int,int)"""
        return bool._wrap(super(_JComponent, self).contains(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def setCursor(self, arg0: 'Cursor'):
        """public void java.awt.Component.setCursor(java.awt.Cursor)"""
        super(_Component, self).setCursor(arg0)

    @override
    @overload
    def validate(self):
        """public void java.awt.Container.validate()"""
        super(Container, self).validate()

    @override
    @overload
    def getMaximumSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getMaximumSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getMaximumSize())

    @override
    @overload
    def getBackground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getBackground()"""
        return 'Color'._wrap(super(Component, self).getBackground())

    @overload
    def createImage(self, arg0: 'ImageProducer') -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(java.awt.image.ImageProducer)"""
        return 'Image'._wrap(super(_Component, self).createImage(arg0))

    @override
    @overload
    def setVerifyInputWhenFocusTarget(self, arg0: bool):
        """public void javax.swing.JComponent.setVerifyInputWhenFocusTarget(boolean)"""
        super(_JComponent, self).setVerifyInputWhenFocusTarget(_boolean.valueOf(arg0))

    @overload
    def setValue(self, arg0: 'ParticleControllerInfluencer'):
        """public void com.badlogic.gdx.tools.flame.ParticleControllerInfluencerPanel.setValue(com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer)"""
        super(_ParticleControllerInfluencerPanel, self).setValue(arg0)

    @override
    @overload
    def removePropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0, arg1)

    @override
    @overload
    def countComponents(self) -> int:
        """public int java.awt.Container.countComponents()"""
        return int._wrap(super(Container, self).countComponents()) 
 
 
# CLASS: com.badlogic.gdx.tools.flame.InfluencerPanel
from pyquantum_helper import import_once as _import_once
import javax.accessibility.AccessibleContext as AccessibleContext
import javax.swing.JToolTip as JToolTip
import java.awt.event.HierarchyBoundsListener as HierarchyBoundsListener
import java.awt.event.ActionListener as _ActionListener
_ActionListener = _ActionListener
import java.awt.ComponentOrientation as _ComponentOrientation
_ComponentOrientation = _ComponentOrientation
import java.awt.image.ImageProducer as ImageProducer
import java.awt.GraphicsConfiguration as GraphicsConfiguration
import java.awt.Graphics as _Graphics
_Graphics = _Graphics
import javax.swing.JToolTip as _JToolTip
_JToolTip = _JToolTip
import java.awt.Container as _Container
_Container = _Container
import java.awt.MenuComponent as MenuComponent
import java.awt.im.InputMethodRequests as _InputMethodRequests
_InputMethodRequests = _InputMethodRequests
import java.awt.FocusTraversalPolicy as _FocusTraversalPolicy
_FocusTraversalPolicy = _FocusTraversalPolicy
import java.lang.Byte as _byte
import java.awt.Dimension as Dimension
import java.awt.Font as _Font
_Font = _Font
import javax.swing.plaf.PanelUI as _PanelUI
_PanelUI = _PanelUI
import java.awt.event.ContainerListener as ContainerListener
import javax.swing.event.AncestorListener as AncestorListener
import java.awt.AWTEvent as AWTEvent
import javax.swing.JPanel as JPanel
import java.awt.image.ColorModel as _ColorModel
_ColorModel = _ColorModel
import java.lang.Object as _object
import java.awt.ComponentOrientation as ComponentOrientation
import java.awt.im.InputContext as _InputContext
_InputContext = _InputContext
from builtins import float
import java.awt.event.HierarchyListener as HierarchyListener
import java.awt.event.InputMethodListener as InputMethodListener
from typing import List
import java.awt.event.MouseWheelListener as _MouseWheelListener
_MouseWheelListener = _MouseWheelListener
import java.awt.event.KeyListener as KeyListener
import java.awt.Component as Component
from builtins import int
import java.awt.LayoutManager as LayoutManager
import java.awt.FontMetrics as _FontMetrics
_FontMetrics = _FontMetrics
import java.awt.Container as Container
from builtins import type
import java.awt.image.VolatileImage as _VolatileImage
_VolatileImage = _VolatileImage
import java.awt.Shape as Shape
import com.badlogic.gdx.tools.flame.EditorPanel as _EditorPanel
_EditorPanel = _EditorPanel
import java.awt.Rectangle as Rectangle
import java.awt.event.ContainerListener as _ContainerListener
_ContainerListener = _ContainerListener
import java.awt.event.HierarchyListener as _HierarchyListener
_HierarchyListener = _HierarchyListener
import java.lang.String as _string
import javax.swing.InputVerifier as _InputVerifier
_InputVerifier = _InputVerifier
import java.awt.Insets as _Insets
_Insets = _Insets
import javax.swing.border.Border as _Border
_Border = _Border
import java.awt.event.ComponentListener as _ComponentListener
_ComponentListener = _ComponentListener
import javax.swing.ActionMap as ActionMap
import java.beans.VetoableChangeListener as VetoableChangeListener
import java.awt.event.ComponentListener as ComponentListener
import javax.swing.KeyStroke as KeyStroke
import java.beans.VetoableChangeListener as _VetoableChangeListener
_VetoableChangeListener = _VetoableChangeListener
from builtins import object
try:
    from pygdx.graphics.g3d.particles import influencers
except ImportError:
    influencers = _import_once("pygdx.graphics.g3d.particles.influencers")

import java.awt.event.KeyListener as _KeyListener
_KeyListener = _KeyListener
import java.awt.Component.BaselineResizeBehavior as BaselineResizeBehavior
import java.awt.Component as _Component_BaselineResizeBehavior
_BaselineResizeBehavior = _Component_BaselineResizeBehavior.BaselineResizeBehavior
import java.awt.Cursor as _Cursor
_Cursor = _Cursor
import java.awt.im.InputMethodRequests as InputMethodRequests
import java.lang.Long as _long
import javax.swing.JPanel as _JPanel
_JPanel = _JPanel
import java.awt.event.FocusListener as _FocusListener
_FocusListener = _FocusListener
import java.lang.Character as _char
import javax.swing.TransferHandler as TransferHandler
import java.awt.event.FocusEvent.Cause as Cause
import javax.swing.JComponent as JComponent
import javax.accessibility.AccessibleContext as _AccessibleContext
_AccessibleContext = _AccessibleContext
import java.awt.event.MouseWheelListener as MouseWheelListener
import java.util.Set as _Set
_Set = _Set
import java.awt.image.ColorModel as ColorModel
import java.lang.Boolean as _boolean
import java.awt.event.MouseMotionListener as MouseMotionListener
import java.util.EventListener as EventListener
import java.awt.Insets as Insets
import javax.swing.KeyStroke as _KeyStroke
_KeyStroke = _KeyStroke
import java.awt.GraphicsConfiguration as _GraphicsConfiguration
_GraphicsConfiguration = _GraphicsConfiguration
import java.awt.dnd.DropTarget as _DropTarget
_DropTarget = _DropTarget
from builtins import bool
import java.beans.PropertyChangeListener as _PropertyChangeListener
_PropertyChangeListener = _PropertyChangeListener
import java.awt.LayoutManager as _LayoutManager
_LayoutManager = _LayoutManager
import java.awt.PopupMenu as PopupMenu
import java.util.EventListener as _EventListener
_EventListener = _EventListener
import java.awt.im.InputContext as InputContext
import java.awt.Component as _Component
_Component = _Component
import java.awt.Font as Font
import java.awt.image.VolatileImage as VolatileImage
import java.awt.dnd.DropTarget as DropTarget
import java.lang.String as _String
_String = _String
import java.lang.Float as _float
import java.awt.Cursor as Cursor
import java.awt.event.MouseListener as _MouseListener
_MouseListener = _MouseListener
import java.awt.Toolkit as _Toolkit
_Toolkit = _Toolkit
import java.io.PrintStream as PrintStream
import com.badlogic.gdx.tools.flame.InfluencerPanel as _InfluencerPanel
_InfluencerPanel = _InfluencerPanel
import javax.swing.JRootPane as _JRootPane
_JRootPane = _JRootPane
import java.awt.Dimension as _Dimension
_Dimension = _Dimension
import java.awt.event.ActionListener as ActionListener
import java.awt.event.MouseEvent as MouseEvent
import java.awt.Color as _Color
_Color = _Color
import javax.swing.JPopupMenu as _JPopupMenu
_JPopupMenu = _JPopupMenu
import javax.swing.InputMap as _InputMap
_InputMap = _InputMap
import java.awt.event.MouseListener as MouseListener
import java.lang.Class as _Class
_Class = _Class
import java.util.Locale as Locale
import java.lang.Double as _double
import javax.swing.plaf.PanelUI as PanelUI
import java.awt.Point as _Point
_Point = _Point
import java.lang.Object as _Object
_Object = _Object
import java.beans.PropertyChangeListener as PropertyChangeListener
import javax.swing.border.Border as Border
import javax.swing.JComponent as _JComponent
_JComponent = _JComponent
import javax.swing.InputVerifier as InputVerifier
import java.io.PrintWriter as PrintWriter
import java.awt.Point as Point
import javax.swing.event.AncestorListener as _AncestorListener
_AncestorListener = _AncestorListener
import java.lang.Short as _short
import java.awt.Toolkit as Toolkit
import java.awt.event.HierarchyBoundsListener as _HierarchyBoundsListener
_HierarchyBoundsListener = _HierarchyBoundsListener
import javax.swing.TransferHandler as _TransferHandler
_TransferHandler = _TransferHandler
import javax.swing.InputMap as InputMap
import java.awt.Rectangle as _Rectangle
_Rectangle = _Rectangle
import javax.swing.JRootPane as JRootPane
import java.awt.Event as Event
import java.awt.event.FocusListener as FocusListener
import java.awt.image.ImageObserver as ImageObserver
from builtins import str
from pyquantum_helper import override
import javax.swing.ActionMap as _ActionMap
_ActionMap = _ActionMap
import java.awt.FocusTraversalPolicy as FocusTraversalPolicy
import java.awt.event.MouseMotionListener as _MouseMotionListener
_MouseMotionListener = _MouseMotionListener
import java.awt.event.InputMethodListener as _InputMethodListener
_InputMethodListener = _InputMethodListener
import javax.swing.JPopupMenu as JPopupMenu
import java.util.Set as Set
import java.lang.Integer as _int
import java.awt.Image as _Image
_Image = _Image
import java.awt.FontMetrics as FontMetrics
import java.awt.Color as Color
import java.awt.Image as Image
import java.awt.Graphics as Graphics
import java.awt.ImageCapabilities as ImageCapabilities
import java.util.Locale as _Locale
_Locale = _Locale
 
class InfluencerPanel():
    """com.badlogic.gdx.tools.flame.InfluencerPanel"""
 
    @staticmethod
    def _wrap(java_value: _InfluencerPanel) -> 'InfluencerPanel':
        return InfluencerPanel(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _InfluencerPanel):
        """
        Dynamic initializer for InfluencerPanel.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_InfluencerPanel__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_InfluencerPanel__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def removeVetoableChangeListener(self, arg0: 'VetoableChangeListener'):
        """public synchronized void javax.swing.JComponent.removeVetoableChangeListener(java.beans.VetoableChangeListener)"""
        super(_JComponent, self).removeVetoableChangeListener(arg0)

    @override
    @overload
    def getComponents(self) -> List['Component']:
        """public java.awt.Component[] java.awt.Container.getComponents()"""
        return List['Component']._wrap(super(Container, self).getComponents())

    @override
    @overload
    def setDebugGraphicsOptions(self, arg0: int):
        """public void javax.swing.JComponent.setDebugGraphicsOptions(int)"""
        super(_JComponent, self).setDebugGraphicsOptions(_int.valueOf(arg0))

    @override
    @overload
    def isValid(self) -> bool:
        """public boolean java.awt.Component.isValid()"""
        return bool._wrap(super(Component, self).isValid())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def getDefaultLocale() -> 'Locale':
        """public static java.util.Locale javax.swing.JComponent.getDefaultLocale()"""
        return Locale._wrap(_JComponent.getDefaultLocale())

    @override
    @overload
    def getInputVerifier(self) -> 'InputVerifier':
        """public javax.swing.InputVerifier javax.swing.JComponent.getInputVerifier()"""
        return 'InputVerifier'._wrap(super(JComponent, self).getInputVerifier())

    @override
    @overload
    def list(self, arg0: 'PrintStream', arg1: int):
        """public void java.awt.Container.list(java.io.PrintStream,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @override
    @overload
    def setUI(self, arg0: 'PanelUI'):
        """public void javax.swing.JPanel.setUI(javax.swing.plaf.PanelUI)"""
        super(_JPanel, self).setUI(arg0)

    @override
    @overload
    def getFocusTraversalPolicy(self) -> 'FocusTraversalPolicy':
        """public java.awt.FocusTraversalPolicy java.awt.Container.getFocusTraversalPolicy()"""
        return 'FocusTraversalPolicy'._wrap(super(Container, self).getFocusTraversalPolicy())

    @override
    @overload
    def getParent(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getParent()"""
        return 'Container'._wrap(super(Component, self).getParent())

    @override
    @overload
    def paintImmediately(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.paintImmediately(java.awt.Rectangle)"""
        super(_JComponent, self).paintImmediately(arg0)

    @staticmethod
    @overload
    def setDefaultLocale(arg0: 'Locale'):
        """public static void javax.swing.JComponent.setDefaultLocale(java.util.Locale)"""
        _JComponent.setDefaultLocale(arg0)

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,float,float)"""
        super(_Component, self).firePropertyChange(arg0, _float.valueOf(arg1), _float.valueOf(arg2))

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object)"""
        super(_Container, self).add(arg0, arg1)

    @override
    @overload
    def getLocale(self) -> 'Locale':
        """public java.util.Locale java.awt.Component.getLocale()"""
        return 'Locale'._wrap(super(Component, self).getLocale())

    @override
    @overload
    def setInheritsPopupMenu(self, arg0: bool):
        """public void javax.swing.JComponent.setInheritsPopupMenu(boolean)"""
        super(_JComponent, self).setInheritsPopupMenu(_boolean.valueOf(arg0))

    @override
    @overload
    def getHierarchyListeners(self) -> List['HierarchyListener']:
        """public synchronized java.awt.event.HierarchyListener[] java.awt.Component.getHierarchyListeners()"""
        return List['HierarchyListener']._wrap(super(Component, self).getHierarchyListeners())

    @override
    @overload
    def nextFocus(self):
        """public void java.awt.Component.nextFocus()"""
        super(Component, self).nextFocus()

    @override
    @overload
    def isPaintingTile(self) -> bool:
        """public boolean javax.swing.JComponent.isPaintingTile()"""
        return bool._wrap(super(JComponent, self).isPaintingTile())

    @override
    @overload
    def getContentPanel(self) -> 'JPanel':
        """public javax.swing.JPanel com.badlogic.gdx.tools.flame.EditorPanel.getContentPanel()"""
        return 'JPanel'._wrap(super(EditorPanel, self).getContentPanel())

    @override
    @overload
    def isDisplayable(self) -> bool:
        """public boolean java.awt.Component.isDisplayable()"""
        return bool._wrap(super(Component, self).isDisplayable())

    @override
    @overload
    def getBounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.getBounds()"""
        return 'Rectangle'._wrap(super(Component, self).getBounds())

    @override
    @overload
    def removeMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.removeMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).removeMouseMotionListener(arg0)

    @override
    @overload
    def isShowing(self) -> bool:
        """public boolean java.awt.Component.isShowing()"""
        return bool._wrap(super(Component, self).isShowing())

    @override
    @overload
    def getDropTarget(self) -> 'DropTarget':
        """public synchronized java.awt.dnd.DropTarget java.awt.Component.getDropTarget()"""
        return 'DropTarget'._wrap(super(Component, self).getDropTarget())

    @override
    @overload
    def isFontSet(self) -> bool:
        """public boolean java.awt.Component.isFontSet()"""
        return bool._wrap(super(Component, self).isFontSet())

    @overload
    def mouseUp(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseUp(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseUp(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def setIgnoreRepaint(self, arg0: bool):
        """public void java.awt.Component.setIgnoreRepaint(boolean)"""
        super(_Component, self).setIgnoreRepaint(_boolean.valueOf(arg0))

    @override
    @overload
    def getPropertyChangeListeners(self) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners()"""
        return List['PropertyChangeListener']._wrap(super(Component, self).getPropertyChangeListeners())

    @override
    @overload
    def isBackgroundSet(self) -> bool:
        """public boolean java.awt.Component.isBackgroundSet()"""
        return bool._wrap(super(Component, self).isBackgroundSet())

    @override
    @overload
    def getLocation(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocation()"""
        return 'Point'._wrap(super(Component, self).getLocation())

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int._wrap(super(object, self).hashCode())

    @override
    @overload
    def location(self) -> 'Point':
        """public java.awt.Point java.awt.Component.location()"""
        return 'Point'._wrap(super(Component, self).location())

    @override
    @overload
    def getComponentOrientation(self) -> 'ComponentOrientation':
        """public java.awt.ComponentOrientation java.awt.Component.getComponentOrientation()"""
        return 'ComponentOrientation'._wrap(super(Component, self).getComponentOrientation())

    @override
    @overload
    def addHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.addHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).addHierarchyListener(arg0)

    @override
    @overload
    def getInheritsPopupMenu(self) -> bool:
        """public boolean javax.swing.JComponent.getInheritsPopupMenu()"""
        return bool._wrap(super(JComponent, self).getInheritsPopupMenu())

    @override
    @overload
    def setComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Component.setComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Component, self).setComponentOrientation(arg0)

    @override
    @overload
    def getFocusCycleRootAncestor(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getFocusCycleRootAncestor()"""
        return 'Container'._wrap(super(Component, self).getFocusCycleRootAncestor())

    @override
    @overload
    def show(self, arg0: bool):
        """public void java.awt.Component.show(boolean)"""
        super(_Component, self).show(_boolean.valueOf(arg0))

    @staticmethod
    @overload
    def addContent(arg0: 'JPanel', arg1: int, arg2: int, arg3: 'JComponent', arg4: bool, arg5: int, arg6: int, arg7: float, arg8: float):
        """public static void com.badlogic.gdx.tools.flame.EditorPanel.addContent(javax.swing.JPanel,int,int,javax.swing.JComponent,boolean,int,int,float,float)"""
        _EditorPanel.addContent(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3, _boolean.valueOf(arg4), _int.valueOf(arg5), _int.valueOf(arg6), _float.valueOf(arg7), _float.valueOf(arg8))

    @override
    @overload
    def grabFocus(self):
        """public void javax.swing.JComponent.grabFocus()"""
        super(JComponent, self).grabFocus()

    @overload
    def locate(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.locate(int,int)"""
        return 'Component'._wrap(super(_Container, self).locate(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def isPaintingForPrint(self) -> bool:
        """public final boolean javax.swing.JComponent.isPaintingForPrint()"""
        return bool._wrap(super(JComponent, self).isPaintingForPrint())

    @overload
    def keyDown(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyDown(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyDown(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,int,int)"""
        super(_JComponent, self).firePropertyChange(arg0, _int.valueOf(arg1), _int.valueOf(arg2))

    @override
    @overload
    def getLayout(self) -> 'LayoutManager':
        """public java.awt.LayoutManager java.awt.Container.getLayout()"""
        return 'LayoutManager'._wrap(super(Container, self).getLayout())

    @override
    @overload
    def preferredSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.preferredSize()"""
        return 'Dimension'._wrap(super(Container, self).preferredSize())

    @override
    @overload
    def addNotify(self):
        """public void javax.swing.JComponent.addNotify()"""
        super(JComponent, self).addNotify()

    @override
    @overload
    def setSize(self, arg0: int, arg1: int):
        """public void java.awt.Component.setSize(int,int)"""
        super(_Component, self).setSize(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.repaint(int,int,int,int)"""
        super(_Component, self).repaint(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @overload
    def requestFocusInWindow(self, arg0: 'Cause') -> bool:
        """public boolean java.awt.Component.requestFocusInWindow(java.awt.event.FocusEvent$Cause)"""
        return bool._wrap(super(_Component, self).requestFocusInWindow(arg0))

    @override
    @overload
    def remove(self, arg0: int):
        """public void java.awt.Container.remove(int)"""
        super(_Container, self).remove(_int.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,long,long)"""
        super(_Component, self).firePropertyChange(arg0, _long.valueOf(arg1), _long.valueOf(arg2))

    @override
    @overload
    def update(self, arg0: 'FlameMain'):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.update(com.badlogic.gdx.tools.flame.FlameMain)"""
        super(_EditorPanel, self).update(arg0)

    @override
    @overload
    def setFocusCycleRoot(self, arg0: bool):
        """public void java.awt.Container.setFocusCycleRoot(boolean)"""
        super(_Container, self).setFocusCycleRoot(_boolean.valueOf(arg0))

    @overload
    def keyUp(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyUp(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyUp(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def setBackground(self, arg0: 'Color'):
        """public void javax.swing.JComponent.setBackground(java.awt.Color)"""
        super(_JComponent, self).setBackground(arg0)

    @override
    @overload
    def doLayout(self):
        """public void java.awt.Container.doLayout()"""
        super(Container, self).doLayout()

    @override
    @overload
    def enable(self):
        """public void javax.swing.JComponent.enable()"""
        super(JComponent, self).enable()

    @override
    @overload
    def getInsets(self) -> 'Insets':
        """public java.awt.Insets javax.swing.JComponent.getInsets()"""
        return 'Insets'._wrap(super(JComponent, self).getInsets())

    @override
    @overload
    def setNextFocusableComponent(self, arg0: 'Component'):
        """public void javax.swing.JComponent.setNextFocusableComponent(java.awt.Component)"""
        super(_JComponent, self).setNextFocusableComponent(arg0)

    @override
    @overload
    def getAlignmentY(self) -> float:
        """public float javax.swing.JComponent.getAlignmentY()"""
        return float._wrap(super(JComponent, self).getAlignmentY())

    @overload
    def checkImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @override
    @overload
    def getFocusTraversalKeysEnabled(self) -> bool:
        """public boolean java.awt.Component.getFocusTraversalKeysEnabled()"""
        return bool._wrap(super(Component, self).getFocusTraversalKeysEnabled())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getRootPane(self) -> 'JRootPane':
        """public javax.swing.JRootPane javax.swing.JComponent.getRootPane()"""
        return 'JRootPane'._wrap(super(JComponent, self).getRootPane())

    @override
    @overload
    def invalidate(self):
        """public void java.awt.Container.invalidate()"""
        super(Container, self).invalidate()

    @override
    @overload
    def resetKeyboardActions(self):
        """public void javax.swing.JComponent.resetKeyboardActions()"""
        super(JComponent, self).resetKeyboardActions()

    @overload
    def getComponent(self, arg0: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponent(int)"""
        return 'Component'._wrap(super(_Container, self).getComponent(_int.valueOf(arg0)))

    @override
    @overload
    def setName(self, arg0: str):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setName(java.lang.String)"""
        super(_EditorPanel, self).setName(arg0)

    @override
    @overload
    def addPropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Container.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Container, self).addPropertyChangeListener(arg0, arg1)

    @override
    @overload
    def setInputMap(self, arg0: int, arg1: 'InputMap'):
        """public final void javax.swing.JComponent.setInputMap(int,javax.swing.InputMap)"""
        super(_JComponent, self).setInputMap(_int.valueOf(arg0), arg1)

    @override
    @overload
    def removePropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0)

    @override
    @overload
    def applyComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Container.applyComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Container, self).applyComponentOrientation(arg0)

    @override
    @overload
    def setBorder(self, arg0: 'Border'):
        """public void javax.swing.JComponent.setBorder(javax.swing.border.Border)"""
        super(_JComponent, self).setBorder(arg0)

    @override
    @overload
    def remove(self, arg0: 'MenuComponent'):
        """public void java.awt.Component.remove(java.awt.MenuComponent)"""
        super(_Component, self).remove(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintStream'):
        """public void java.awt.Component.list(java.io.PrintStream)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def removeMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.removeMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).removeMouseListener(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintWriter'):
        """public void java.awt.Component.list(java.io.PrintWriter)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def getKeyListeners(self) -> List['KeyListener']:
        """public synchronized java.awt.event.KeyListener[] java.awt.Component.getKeyListeners()"""
        return List['KeyListener']._wrap(super(Component, self).getKeyListeners())

    @override
    @overload
    def getInputContext(self) -> 'InputContext':
        """public java.awt.im.InputContext java.awt.Component.getInputContext()"""
        return 'InputContext'._wrap(super(Component, self).getInputContext())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,double,double)"""
        super(_Component, self).firePropertyChange(arg0, _double.valueOf(arg1), _double.valueOf(arg2))

    @override
    @overload
    def removeAncestorListener(self, arg0: 'AncestorListener'):
        """public void javax.swing.JComponent.removeAncestorListener(javax.swing.event.AncestorListener)"""
        super(_JComponent, self).removeAncestorListener(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintWriter', arg1: int):
        """public void java.awt.Container.list(java.io.PrintWriter,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @overload
    def checkImage(self, arg0: 'Image', arg1: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, arg1))

    @override
    @overload
    def removeFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.removeFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).removeFocusListener(arg0)

    @overload
    def mouseDown(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDown(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDown(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def setIsAlwayShown(self, arg0: bool):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setIsAlwayShown(boolean)"""
        super(_EditorPanel, self).setIsAlwayShown(_boolean.valueOf(arg0))

    @overload
    def getConditionForKeyStroke(self, arg0: 'KeyStroke') -> int:
        """public int javax.swing.JComponent.getConditionForKeyStroke(javax.swing.KeyStroke)"""
        return int._wrap(super(_JComponent, self).getConditionForKeyStroke(arg0))

    @override
    @overload
    def getTreeLock(self) -> object:
        """public final java.lang.Object java.awt.Component.getTreeLock()"""
        return object._wrap(super(Component, self).getTreeLock())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @override
    @overload
    def addVetoableChangeListener(self, arg0: 'VetoableChangeListener'):
        """public synchronized void javax.swing.JComponent.addVetoableChangeListener(java.beans.VetoableChangeListener)"""
        super(_JComponent, self).addVetoableChangeListener(arg0)

    @overload
    def contains(self, arg0: 'Point') -> bool:
        """public boolean java.awt.Component.contains(java.awt.Point)"""
        return bool._wrap(super(_Component, self).contains(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,short,short)"""
        super(_Component, self).firePropertyChange(arg0, _short.valueOf(arg1), _short.valueOf(arg2))

    @override
    @overload
    def dispatchEvent(self, arg0: 'AWTEvent'):
        """public final void java.awt.Component.dispatchEvent(java.awt.AWTEvent)"""
        super(_Component, self).dispatchEvent(arg0)

    @override
    @overload
    def removeContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.removeContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).removeContainerListener(arg0)

    @override
    @overload
    def getGraphicsConfiguration(self) -> 'GraphicsConfiguration':
        """public java.awt.GraphicsConfiguration java.awt.Component.getGraphicsConfiguration()"""
        return 'GraphicsConfiguration'._wrap(super(Component, self).getGraphicsConfiguration())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: bool, arg2: bool):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,boolean,boolean)"""
        super(_JComponent, self).firePropertyChange(arg0, _boolean.valueOf(arg1), _boolean.valueOf(arg2))

    @override
    @overload
    def registerKeyboardAction(self, arg0: 'ActionListener', arg1: str, arg2: 'KeyStroke', arg3: int):
        """public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,java.lang.String,javax.swing.KeyStroke,int)"""
        super(_JComponent, self).registerKeyboardAction(arg0, arg1, arg2, _int.valueOf(arg3))

    @overload
    def findComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(arg0))

    @override
    @overload
    def resize(self, arg0: int, arg1: int):
        """public void java.awt.Component.resize(int,int)"""
        super(_Component, self).resize(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getHeight(self) -> int:
        """public int javax.swing.JComponent.getHeight()"""
        return int._wrap(super(JComponent, self).getHeight())

    @override
    @overload
    def getTransferHandler(self) -> 'TransferHandler':
        """public javax.swing.TransferHandler javax.swing.JComponent.getTransferHandler()"""
        return 'TransferHandler'._wrap(super(JComponent, self).getTransferHandler())

    @overload
    def imageUpdate(self, arg0: 'Image', arg1: int, arg2: int, arg3: int, arg4: int, arg5: int) -> bool:
        """public boolean java.awt.Component.imageUpdate(java.awt.Image,int,int,int,int,int)"""
        return bool._wrap(super(_Component, self).imageUpdate(arg0, _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4), _int.valueOf(arg5)))

    @override
    @overload
    def getWidth(self) -> int:
        """public int javax.swing.JComponent.getWidth()"""
        return int._wrap(super(JComponent, self).getWidth())

    @override
    @overload
    def transferFocusBackward(self):
        """public void java.awt.Component.transferFocusBackward()"""
        super(Component, self).transferFocusBackward()

    @overload
    def __init__(self, arg0: 'FlameMain', arg1: 'Influencer', arg2: str, arg3: str):
        """public com.badlogic.gdx.tools.flame.InfluencerPanel(com.badlogic.gdx.tools.flame.FlameMain,T,java.lang.String,java.lang.String)"""
        val = _InfluencerPanel(arg0, arg1, arg2, arg3)
        self.__wrapper = val

    @overload
    def getPropertyChangeListeners(self, arg0: str) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners(java.lang.String)"""
        return List['PropertyChangeListener']._wrap(super(_Component, self).getPropertyChangeListeners(arg0))

    @override
    @overload
    def getName(self) -> str:
        """public java.lang.String com.badlogic.gdx.tools.flame.EditorPanel.getName()"""
        return str._wrap(super(EditorPanel, self).getName())

    @staticmethod
    @overload
    def isLightweightComponent(arg0: 'Component') -> bool:
        """public static boolean javax.swing.JComponent.isLightweightComponent(java.awt.Component)"""
        return bool._wrap(_JComponent.isLightweightComponent(arg0))

    @override
    @overload
    def getBorder(self) -> 'Border':
        """public javax.swing.border.Border javax.swing.JComponent.getBorder()"""
        return 'Border'._wrap(super(JComponent, self).getBorder())

    @override
    @overload
    def printAll(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.printAll(java.awt.Graphics)"""
        super(_JComponent, self).printAll(arg0)

    @override
    @overload
    def addComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.addComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).addComponentListener(arg0)

    @override
    @overload
    def getBaselineResizeBehavior(self) -> 'BaselineResizeBehavior.Component$BaselineResizeBehavior':
        """public java.awt.Component$BaselineResizeBehavior javax.swing.JComponent.getBaselineResizeBehavior()"""
        return 'BaselineResizeBehavior.Component$BaselineResizeBehavior'._wrap(super(JComponent, self).getBaselineResizeBehavior())

    @override
    @overload
    def print(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.print(java.awt.Graphics)"""
        super(_JComponent, self).print(arg0)

    @override
    @overload
    def setInputVerifier(self, arg0: 'InputVerifier'):
        """public void javax.swing.JComponent.setInputVerifier(javax.swing.InputVerifier)"""
        super(_JComponent, self).setInputVerifier(arg0)

    @override
    @overload
    def addAncestorListener(self, arg0: 'AncestorListener'):
        """public void javax.swing.JComponent.addAncestorListener(javax.swing.event.AncestorListener)"""
        super(_JComponent, self).addAncestorListener(arg0)

    @override
    @overload
    def getFont(self) -> 'Font':
        """public java.awt.Font java.awt.Component.getFont()"""
        return 'Font'._wrap(super(Component, self).getFont())

    @override
    @overload
    def setFont(self, arg0: 'Font'):
        """public void javax.swing.JComponent.setFont(java.awt.Font)"""
        super(_JComponent, self).setFont(arg0)

    @override
    @overload
    def isOptimizedDrawingEnabled(self) -> bool:
        """public boolean javax.swing.JComponent.isOptimizedDrawingEnabled()"""
        return bool._wrap(super(JComponent, self).isOptimizedDrawingEnabled())

    @override
    @overload
    def isValidateRoot(self) -> bool:
        """public boolean javax.swing.JComponent.isValidateRoot()"""
        return bool._wrap(super(JComponent, self).isValidateRoot())

    @overload
    def prepareImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @override
    @overload
    def setHasAdvanced(self, arg0: bool):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setHasAdvanced(boolean)"""
        super(_EditorPanel, self).setHasAdvanced(_boolean.valueOf(arg0))

    @override
    @overload
    def setForeground(self, arg0: 'Color'):
        """public void javax.swing.JComponent.setForeground(java.awt.Color)"""
        super(_JComponent, self).setForeground(arg0)

    @overload
    def mouseDrag(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDrag(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDrag(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def isOpaque(self) -> bool:
        """public boolean javax.swing.JComponent.isOpaque()"""
        return bool._wrap(super(JComponent, self).isOpaque())

    @overload
    def createVolatileImage(self, arg0: int, arg1: int, arg2: 'ImageCapabilities') -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int,java.awt.ImageCapabilities) throws java.awt.AWTException"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1), arg2))

    @override
    @overload
    def bounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.bounds()"""
        return 'Rectangle'._wrap(super(Component, self).bounds())

    @override
    @overload
    def update(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.update(java.awt.Graphics)"""
        super(_JComponent, self).update(arg0)

    @override
    @overload
    def add(self, arg0: 'PopupMenu'):
        """public void java.awt.Component.add(java.awt.PopupMenu)"""
        super(_Component, self).add(arg0)

    @override
    @overload
    def getToolTipText(self) -> str:
        """public java.lang.String javax.swing.JComponent.getToolTipText()"""
        return str._wrap(super(JComponent, self).getToolTipText())

    @override
    @overload
    def isVisible(self) -> bool:
        """public boolean java.awt.Component.isVisible()"""
        return bool._wrap(super(Component, self).isVisible())

    @override
    @overload
    def setDropTarget(self, arg0: 'DropTarget'):
        """public synchronized void java.awt.Component.setDropTarget(java.awt.dnd.DropTarget)"""
        super(_Component, self).setDropTarget(arg0)

    @override
    @overload
    def getLocationOnScreen(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocationOnScreen()"""
        return 'Point'._wrap(super(Component, self).getLocationOnScreen())

    @override
    @overload
    def getY(self) -> int:
        """public int javax.swing.JComponent.getY()"""
        return int._wrap(super(JComponent, self).getY())

    @overload
    def getComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def isMaximumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMaximumSizeSet()"""
        return bool._wrap(super(Component, self).isMaximumSizeSet())

    @override
    @overload
    def setAlignmentY(self, arg0: float):
        """public void javax.swing.JComponent.setAlignmentY(float)"""
        super(_JComponent, self).setAlignmentY(_float.valueOf(arg0))

    @override
    @overload
    def getRegisteredKeyStrokes(self) -> List['KeyStroke']:
        """public javax.swing.KeyStroke[] javax.swing.JComponent.getRegisteredKeyStrokes()"""
        return List['KeyStroke']._wrap(super(JComponent, self).getRegisteredKeyStrokes())

    @override
    @overload
    def isFocusable(self) -> bool:
        """public boolean java.awt.Component.isFocusable()"""
        return bool._wrap(super(Component, self).isFocusable())

    @override
    @overload
    def isFocusTraversalPolicyProvider(self) -> bool:
        """public final boolean java.awt.Container.isFocusTraversalPolicyProvider()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicyProvider())

    @override
    @overload
    def getMouseListeners(self) -> List['MouseListener']:
        """public synchronized java.awt.event.MouseListener[] java.awt.Component.getMouseListeners()"""
        return List['MouseListener']._wrap(super(Component, self).getMouseListeners())

    @override
    @overload
    def setValue(self, arg0: object):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setValue(T)"""
        super(_EditorPanel, self).setValue(arg0)

    @override
    @overload
    def registerKeyboardAction(self, arg0: 'ActionListener', arg1: 'KeyStroke', arg2: int):
        """public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,javax.swing.KeyStroke,int)"""
        super(_JComponent, self).registerKeyboardAction(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def transferFocusUpCycle(self):
        """public void java.awt.Component.transferFocusUpCycle()"""
        super(Component, self).transferFocusUpCycle()

    @override
    @overload
    def removeKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.removeKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).removeKeyListener(arg0)

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: str, arg2: str):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,char,char)"""
        super(_JComponent, self).firePropertyChange(arg0, _char.valueOf(arg1), _char.valueOf(arg2))

    @override
    @overload
    def getMouseMotionListeners(self) -> List['MouseMotionListener']:
        """public synchronized java.awt.event.MouseMotionListener[] java.awt.Component.getMouseMotionListeners()"""
        return List['MouseMotionListener']._wrap(super(Component, self).getMouseMotionListeners())

    @override
    @overload
    def getAutoscrolls(self) -> bool:
        """public boolean javax.swing.JComponent.getAutoscrolls()"""
        return bool._wrap(super(JComponent, self).getAutoscrolls())

    @override
    @overload
    def addContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.addContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).addContainerListener(arg0)

    @override
    @overload
    def isFocusTraversable(self) -> bool:
        """public boolean java.awt.Component.isFocusTraversable()"""
        return bool._wrap(super(Component, self).isFocusTraversable())

    @overload
    def mouseExit(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseExit(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseExit(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getBounds(self, arg0: 'Rectangle') -> 'Rectangle':
        """public java.awt.Rectangle javax.swing.JComponent.getBounds(java.awt.Rectangle)"""
        return 'Rectangle'._wrap(super(_JComponent, self).getBounds(arg0))

    @override
    @overload
    def setToolTipText(self, arg0: str):
        """public void javax.swing.JComponent.setToolTipText(java.lang.String)"""
        super(_JComponent, self).setToolTipText(arg0)

    @override
    @overload
    def setAutoscrolls(self, arg0: bool):
        """public void javax.swing.JComponent.setAutoscrolls(boolean)"""
        super(_JComponent, self).setAutoscrolls(_boolean.valueOf(arg0))

    @override
    @overload
    def setComponentPopupMenu(self, arg0: 'JPopupMenu'):
        """public void javax.swing.JComponent.setComponentPopupMenu(javax.swing.JPopupMenu)"""
        super(_JComponent, self).setComponentPopupMenu(arg0)

    @override
    @overload
    def setMixingCutoutShape(self, arg0: 'Shape'):
        """public void java.awt.Component.setMixingCutoutShape(java.awt.Shape)"""
        super(_Component, self).setMixingCutoutShape(arg0)

    @override
    @overload
    def getVisibleRect(self) -> 'Rectangle':
        """public java.awt.Rectangle javax.swing.JComponent.getVisibleRect()"""
        return 'Rectangle'._wrap(super(JComponent, self).getVisibleRect())

    @override
    @overload
    def requestFocus(self, arg0: 'Cause'):
        """public void java.awt.Component.requestFocus(java.awt.event.FocusEvent$Cause)"""
        super(_Component, self).requestFocus(arg0)

    @overload
    def createImage(self, arg0: int, arg1: int) -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(int,int)"""
        return 'Image'._wrap(super(_Component, self).createImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def putClientProperty(self, arg0: object, arg1: object):
        """public final void javax.swing.JComponent.putClientProperty(java.lang.Object,java.lang.Object)"""
        super(_JComponent, self).putClientProperty(arg0, arg1)

    @override
    @overload
    def getVetoableChangeListeners(self) -> List['VetoableChangeListener']:
        """public synchronized java.beans.VetoableChangeListener[] javax.swing.JComponent.getVetoableChangeListeners()"""
        return List['VetoableChangeListener']._wrap(super(JComponent, self).getVetoableChangeListeners())

    @override
    @overload
    def scrollRectToVisible(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.scrollRectToVisible(java.awt.Rectangle)"""
        super(_JComponent, self).scrollRectToVisible(arg0)

    @override
    @overload
    def getTopLevelAncestor(self) -> 'Container':
        """public java.awt.Container javax.swing.JComponent.getTopLevelAncestor()"""
        return 'Container'._wrap(super(JComponent, self).getTopLevelAncestor())

    @override
    @overload
    def isRequestFocusEnabled(self) -> bool:
        """public boolean javax.swing.JComponent.isRequestFocusEnabled()"""
        return bool._wrap(super(JComponent, self).isRequestFocusEnabled())

    @override
    @overload
    def getFocusListeners(self) -> List['FocusListener']:
        """public synchronized java.awt.event.FocusListener[] java.awt.Component.getFocusListeners()"""
        return List['FocusListener']._wrap(super(Component, self).getFocusListeners())

    @override
    @overload
    def setLayout(self, arg0: 'LayoutManager'):
        """public void java.awt.Container.setLayout(java.awt.LayoutManager)"""
        super(_Container, self).setLayout(arg0)

    @overload
    def add(self, arg0: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0))

    @override
    @overload
    def getMouseWheelListeners(self) -> List['MouseWheelListener']:
        """public synchronized java.awt.event.MouseWheelListener[] java.awt.Component.getMouseWheelListeners()"""
        return List['MouseWheelListener']._wrap(super(Component, self).getMouseWheelListeners())

    @override
    @overload
    def reshape(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void javax.swing.JComponent.reshape(int,int,int,int)"""
        super(_JComponent, self).reshape(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def setTransferHandler(self, arg0: 'TransferHandler'):
        """public void javax.swing.JComponent.setTransferHandler(javax.swing.TransferHandler)"""
        super(_JComponent, self).setTransferHandler(arg0)

    @override
    @overload
    def getPreferredSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getPreferredSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getPreferredSize())

    @override
    @overload
    def setLocation(self, arg0: int, arg1: int):
        """public void java.awt.Component.setLocation(int,int)"""
        super(_Component, self).setLocation(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def removeInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.removeInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).removeInputMethodListener(arg0)

    @override
    @overload
    def setFocusable(self, arg0: bool):
        """public void java.awt.Component.setFocusable(boolean)"""
        super(_Component, self).setFocusable(_boolean.valueOf(arg0))

    @overload
    def __init__(self, arg0: 'FlameMain', arg1: 'Influencer', arg2: str, arg3: str, arg4: bool, arg5: bool):
        """public com.badlogic.gdx.tools.flame.InfluencerPanel(com.badlogic.gdx.tools.flame.FlameMain,T,java.lang.String,java.lang.String,boolean,boolean)"""
        val = _InfluencerPanel(arg0, arg1, arg2, arg3, _boolean.valueOf(arg4), _boolean.valueOf(arg5))
        self.__wrapper = val

    @override
    @overload
    def paintComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.paintComponents(java.awt.Graphics)"""
        super(_Container, self).paintComponents(arg0)

    @override
    @overload
    def addFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.addFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).addFocusListener(arg0)

    @overload
    def prepareImage(self, arg0: 'Image', arg1: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, arg1))

    @override
    @overload
    def addKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.addKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).addKeyListener(arg0)

    @override
    @overload
    def resize(self, arg0: 'Dimension'):
        """public void java.awt.Component.resize(java.awt.Dimension)"""
        super(_Component, self).resize(arg0)

    @override
    @overload
    def setComponentZOrder(self, arg0: 'Component', arg1: int):
        """public void java.awt.Container.setComponentZOrder(java.awt.Component,int)"""
        super(_Container, self).setComponentZOrder(arg0, _int.valueOf(arg1))

    @override
    @overload
    def list(self):
        """public void java.awt.Component.list()"""
        super(Component, self).list()

    @overload
    def add(self, arg0: str, arg1: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.lang.String,java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, arg1))

    @override
    @overload
    def paintImmediately(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void javax.swing.JComponent.paintImmediately(int,int,int,int)"""
        super(_JComponent, self).paintImmediately(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def getMinimumSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getMinimumSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getMinimumSize())

    @override
    @overload
    def setEnabled(self, arg0: bool):
        """public void javax.swing.JComponent.setEnabled(boolean)"""
        super(_JComponent, self).setEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def hasFocus(self) -> bool:
        """public boolean java.awt.Component.hasFocus()"""
        return bool._wrap(super(Component, self).hasFocus())

    @overload
    def createVolatileImage(self, arg0: int, arg1: int) -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int)"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.removeHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).removeHierarchyListener(arg0)

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.awt.Component.toString()"""
        return str._wrap(super(Component, self).toString())

    @override
    @overload
    def addMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.addMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).addMouseListener(arg0)

    @override
    @overload
    def isFocusOwner(self) -> bool:
        """public boolean java.awt.Component.isFocusOwner()"""
        return bool._wrap(super(Component, self).isFocusOwner())

    @override
    @overload
    def getAccessibleContext(self) -> 'AccessibleContext':
        """public javax.accessibility.AccessibleContext javax.swing.JPanel.getAccessibleContext()"""
        return 'AccessibleContext'._wrap(super(JPanel, self).getAccessibleContext())

    @overload
    def postEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.postEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).postEvent(arg0))

    @overload
    def getLocation(self, arg0: 'Point') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getLocation(java.awt.Point)"""
        return 'Point'._wrap(super(_JComponent, self).getLocation(arg0))

    @overload
    def getBaseline(self, arg0: int, arg1: int) -> int:
        """public int javax.swing.JComponent.getBaseline(int,int)"""
        return int._wrap(super(_JComponent, self).getBaseline(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def findComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeNotify(self):
        """public void javax.swing.JComponent.removeNotify()"""
        super(JComponent, self).removeNotify()

    @override
    @overload
    def getForeground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getForeground()"""
        return 'Color'._wrap(super(Component, self).getForeground())

    @override
    @overload
    def show(self):
        """public void java.awt.Component.show()"""
        super(Component, self).show()

    @override
    @overload
    def isDoubleBuffered(self) -> bool:
        """public boolean javax.swing.JComponent.isDoubleBuffered()"""
        return bool._wrap(super(JComponent, self).isDoubleBuffered())

    @override
    @overload
    def setDescription(self, arg0: str):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setDescription(java.lang.String)"""
        super(_EditorPanel, self).setDescription(arg0)

    @override
    @overload
    def isFocusCycleRoot(self) -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot()"""
        return bool._wrap(super(Container, self).isFocusCycleRoot())

    @override
    @overload
    def addMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.addMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).addMouseWheelListener(arg0)

    @override
    @overload
    def hide(self):
        """public void javax.swing.JComponent.hide()"""
        super(JComponent, self).hide()

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def revalidate(self):
        """public void javax.swing.JComponent.revalidate()"""
        super(JComponent, self).revalidate()

    @override
    @overload
    def getActionMap(self) -> 'ActionMap':
        """public final javax.swing.ActionMap javax.swing.JComponent.getActionMap()"""
        return 'ActionMap'._wrap(super(JComponent, self).getActionMap())

    @override
    @overload
    def requestFocusInWindow(self) -> bool:
        """public boolean javax.swing.JComponent.requestFocusInWindow()"""
        return bool._wrap(super(JComponent, self).requestFocusInWindow())

    @overload
    def action(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.action(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).action(arg0, arg1))

    @override
    @overload
    def isManagingFocus(self) -> bool:
        """public boolean javax.swing.JComponent.isManagingFocus()"""
        return bool._wrap(super(JComponent, self).isManagingFocus())

    @override
    @overload
    def isLightweight(self) -> bool:
        """public boolean java.awt.Component.isLightweight()"""
        return bool._wrap(super(Component, self).isLightweight())

    @override
    @overload
    def setAlignmentX(self, arg0: float):
        """public void javax.swing.JComponent.setAlignmentX(float)"""
        super(_JComponent, self).setAlignmentX(_float.valueOf(arg0))

    @overload
    def getFocusTraversalKeys(self, arg0: int) -> 'Set':
        """public java.util.Set<java.awt.AWTKeyStroke> java.awt.Container.getFocusTraversalKeys(int)"""
        return 'Set'._wrap(super(_Container, self).getFocusTraversalKeys(_int.valueOf(arg0)))

    @override
    @overload
    def setFocusTraversalKeysEnabled(self, arg0: bool):
        """public void java.awt.Component.setFocusTraversalKeysEnabled(boolean)"""
        super(_Component, self).setFocusTraversalKeysEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def remove(self, arg0: 'Component'):
        """public void java.awt.Container.remove(java.awt.Component)"""
        super(_Container, self).remove(arg0)

    @overload
    def getInsets(self, arg0: 'Insets') -> 'Insets':
        """public java.awt.Insets javax.swing.JComponent.getInsets(java.awt.Insets)"""
        return 'Insets'._wrap(super(_JComponent, self).getInsets(arg0))

    @override
    @overload
    def insets(self) -> 'Insets':
        """public java.awt.Insets java.awt.Container.insets()"""
        return 'Insets'._wrap(super(Container, self).insets())

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int):
        """public void javax.swing.JComponent.repaint(long,int,int,int,int)"""
        super(_JComponent, self).repaint(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4))

    @override
    @overload
    def setFocusTraversalPolicy(self, arg0: 'FocusTraversalPolicy'):
        """public void java.awt.Container.setFocusTraversalPolicy(java.awt.FocusTraversalPolicy)"""
        super(_Container, self).setFocusTraversalPolicy(arg0)

    @overload
    def getSize(self, arg0: 'Dimension') -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getSize(java.awt.Dimension)"""
        return 'Dimension'._wrap(super(_JComponent, self).getSize(arg0))

    @override
    @overload
    def enable(self, arg0: bool):
        """public void java.awt.Component.enable(boolean)"""
        super(_Component, self).enable(_boolean.valueOf(arg0))

    @overload
    def getToolTipLocation(self, arg0: 'MouseEvent') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getToolTipLocation(java.awt.event.MouseEvent)"""
        return 'Point'._wrap(super(_JComponent, self).getToolTipLocation(arg0))

    @override
    @overload
    def addPropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Container.addPropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Container, self).addPropertyChangeListener(arg0)

    @overload
    def getComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(arg0))

    @override
    @overload
    def size(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.size()"""
        return 'Dimension'._wrap(super(Component, self).size())

    @override
    @overload
    def getVerifyInputWhenFocusTarget(self) -> bool:
        """public boolean javax.swing.JComponent.getVerifyInputWhenFocusTarget()"""
        return bool._wrap(super(JComponent, self).getVerifyInputWhenFocusTarget())

    @overload
    def mouseMove(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseMove(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseMove(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getActionForKeyStroke(self, arg0: 'KeyStroke') -> 'ActionListener':
        """public java.awt.event.ActionListener javax.swing.JComponent.getActionForKeyStroke(javax.swing.KeyStroke)"""
        return 'ActionListener'._wrap(super(_JComponent, self).getActionForKeyStroke(arg0))

    @overload
    def lostFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.lostFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).lostFocus(arg0, arg1))

    @override
    @overload
    def isMinimumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMinimumSizeSet()"""
        return bool._wrap(super(Component, self).isMinimumSizeSet())

    @override
    @overload
    def isForegroundSet(self) -> bool:
        """public boolean java.awt.Component.isForegroundSet()"""
        return bool._wrap(super(Component, self).isForegroundSet())

    @overload
    def getMousePosition(self, arg0: bool) -> 'Point':
        """public java.awt.Point java.awt.Container.getMousePosition(boolean) throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(_Container, self).getMousePosition(_boolean.valueOf(arg0)))

    @overload
    def getFontMetrics(self, arg0: 'Font') -> 'FontMetrics':
        """public java.awt.FontMetrics javax.swing.JComponent.getFontMetrics(java.awt.Font)"""
        return 'FontMetrics'._wrap(super(_JComponent, self).getFontMetrics(arg0))

    @overload
    def getListeners(self, arg0: 'Class') -> List['EventListener']:
        """public <T extends java.util.EventListener> T[] javax.swing.JComponent.getListeners(java.lang.Class<T>)"""
        return List['EventListener']._wrap(super(_JComponent, self).getListeners(arg0))

    @override
    @overload
    def getHierarchyBoundsListeners(self) -> List['HierarchyBoundsListener']:
        """public synchronized java.awt.event.HierarchyBoundsListener[] java.awt.Component.getHierarchyBoundsListeners()"""
        return List['HierarchyBoundsListener']._wrap(super(Component, self).getHierarchyBoundsListeners())

    @override
    @overload
    def minimumSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.minimumSize()"""
        return 'Dimension'._wrap(super(Container, self).minimumSize())

    @overload
    def handleEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.handleEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).handleEvent(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @override
    @overload
    def getComponentListeners(self) -> List['ComponentListener']:
        """public synchronized java.awt.event.ComponentListener[] java.awt.Component.getComponentListeners()"""
        return List['ComponentListener']._wrap(super(Component, self).getComponentListeners())

    @override
    @overload
    def computeVisibleRect(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.computeVisibleRect(java.awt.Rectangle)"""
        super(_JComponent, self).computeVisibleRect(arg0)

    @override
    @overload
    def deliverEvent(self, arg0: 'Event'):
        """public void java.awt.Container.deliverEvent(java.awt.Event)"""
        super(_Container, self).deliverEvent(arg0)

    @override
    @overload
    def addHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.addHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).addHierarchyBoundsListener(arg0)

    @override
    @overload
    def getAlignmentX(self) -> float:
        """public float javax.swing.JComponent.getAlignmentX()"""
        return float._wrap(super(JComponent, self).getAlignmentX())

    @overload
    def add(self, arg0: 'Component', arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component,int)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def repaint(self):
        """public void java.awt.Component.repaint()"""
        super(Component, self).repaint()

    @overload
    def gotFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.gotFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).gotFocus(arg0, arg1))

    @override
    @overload
    def createToolTip(self) -> 'JToolTip':
        """public javax.swing.JToolTip javax.swing.JComponent.createToolTip()"""
        return 'JToolTip'._wrap(super(JComponent, self).createToolTip())

    @override
    @overload
    def setEmbedded(self):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setEmbedded()"""
        super(EditorPanel, self).setEmbedded()

    @overload
    def getToolTipText(self, arg0: 'MouseEvent') -> str:
        """public java.lang.String javax.swing.JComponent.getToolTipText(java.awt.event.MouseEvent)"""
        return str._wrap(super(_JComponent, self).getToolTipText(arg0))

    @override
    @overload
    def printComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.printComponents(java.awt.Graphics)"""
        super(_Container, self).printComponents(arg0)

    @override
    @overload
    def getColorModel(self) -> 'ColorModel':
        """public java.awt.image.ColorModel java.awt.Component.getColorModel()"""
        return 'ColorModel'._wrap(super(Component, self).getColorModel())

    @override
    @overload
    def setFocusTraversalPolicyProvider(self, arg0: bool):
        """public final void java.awt.Container.setFocusTraversalPolicyProvider(boolean)"""
        super(_Container, self).setFocusTraversalPolicyProvider(_boolean.valueOf(arg0))

    @overload
    def getComponentZOrder(self, arg0: 'Component') -> int:
        """public int java.awt.Container.getComponentZOrder(java.awt.Component)"""
        return int._wrap(super(_Container, self).getComponentZOrder(arg0))

    @override
    @overload
    def getDebugGraphicsOptions(self) -> int:
        """public int javax.swing.JComponent.getDebugGraphicsOptions()"""
        return int._wrap(super(JComponent, self).getDebugGraphicsOptions())

    @overload
    def areFocusTraversalKeysSet(self, arg0: int) -> bool:
        """public boolean java.awt.Container.areFocusTraversalKeysSet(int)"""
        return bool._wrap(super(_Container, self).areFocusTraversalKeysSet(_int.valueOf(arg0)))

    @override
    @overload
    def getSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.getSize()"""
        return 'Dimension'._wrap(super(Component, self).getSize())

    @override
    @overload
    def repaint(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.repaint(java.awt.Rectangle)"""
        super(_JComponent, self).repaint(arg0)

    @overload
    def getClientProperty(self, arg0: object) -> object:
        """public final java.lang.Object javax.swing.JComponent.getClientProperty(java.lang.Object)"""
        return object._wrap(super(_JComponent, self).getClientProperty(arg0))

    @override
    @overload
    def unregisterKeyboardAction(self, arg0: 'KeyStroke'):
        """public void javax.swing.JComponent.unregisterKeyboardAction(javax.swing.KeyStroke)"""
        super(_JComponent, self).unregisterKeyboardAction(arg0)

    @overload
    def requestFocus(self, arg0: bool) -> bool:
        """public boolean javax.swing.JComponent.requestFocus(boolean)"""
        return bool._wrap(super(_JComponent, self).requestFocus(_boolean.valueOf(arg0)))

    @override
    @overload
    def setActionMap(self, arg0: 'ActionMap'):
        """public final void javax.swing.JComponent.setActionMap(javax.swing.ActionMap)"""
        super(_JComponent, self).setActionMap(arg0)

    @override
    @overload
    def getX(self) -> int:
        """public int javax.swing.JComponent.getX()"""
        return int._wrap(super(JComponent, self).getX())

    @overload
    def mouseEnter(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseEnter(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseEnter(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def updateUI(self):
        """public void javax.swing.JPanel.updateUI()"""
        super(JPanel, self).updateUI()

    @override
    @overload
    def getToolkit(self) -> 'Toolkit':
        """public java.awt.Toolkit java.awt.Component.getToolkit()"""
        return 'Toolkit'._wrap(super(Component, self).getToolkit())

    @override
    @overload
    def isCursorSet(self) -> bool:
        """public boolean java.awt.Component.isCursorSet()"""
        return bool._wrap(super(Component, self).isCursorSet())

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object, arg2: int):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object,int)"""
        super(_Container, self).add(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def setPreferredSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setPreferredSize(java.awt.Dimension)"""
        super(_JComponent, self).setPreferredSize(arg0)

    @override
    @overload
    def setBounds(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.setBounds(int,int,int,int)"""
        super(_Component, self).setBounds(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def isFocusTraversalPolicySet(self) -> bool:
        """public boolean java.awt.Container.isFocusTraversalPolicySet()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicySet())

    @override
    @overload
    def requestFocus(self):
        """public void javax.swing.JComponent.requestFocus()"""
        super(JComponent, self).requestFocus()

    @override
    @overload
    def getAncestorListeners(self) -> List['AncestorListener']:
        """public javax.swing.event.AncestorListener[] javax.swing.JComponent.getAncestorListeners()"""
        return List['AncestorListener']._wrap(super(JComponent, self).getAncestorListeners())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool._wrap(super(_object, self).equals(arg0))

    @overload
    def getInputMap(self, arg0: int) -> 'InputMap':
        """public final javax.swing.InputMap javax.swing.JComponent.getInputMap(int)"""
        return 'InputMap'._wrap(super(_JComponent, self).getInputMap(_int.valueOf(arg0)))

    @override
    @overload
    def isEnabled(self) -> bool:
        """public boolean java.awt.Component.isEnabled()"""
        return bool._wrap(super(Component, self).isEnabled())

    @override
    @overload
    def move(self, arg0: int, arg1: int):
        """public void java.awt.Component.move(int,int)"""
        super(_Component, self).move(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def addMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.addMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).addMouseMotionListener(arg0)

    @override
    @overload
    def getIgnoreRepaint(self) -> bool:
        """public boolean java.awt.Component.getIgnoreRepaint()"""
        return bool._wrap(super(Component, self).getIgnoreRepaint())

    @overload
    def isFocusCycleRoot(self, arg0: 'Container') -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot(java.awt.Container)"""
        return bool._wrap(super(_Container, self).isFocusCycleRoot(arg0))

    @override
    @overload
    def getGraphics(self) -> 'Graphics':
        """public java.awt.Graphics javax.swing.JComponent.getGraphics()"""
        return 'Graphics'._wrap(super(JComponent, self).getGraphics())

    @override
    @overload
    def setLocale(self, arg0: 'Locale'):
        """public void java.awt.Component.setLocale(java.util.Locale)"""
        super(_Component, self).setLocale(arg0)

    @override
    @overload
    def paintAll(self, arg0: 'Graphics'):
        """public void java.awt.Component.paintAll(java.awt.Graphics)"""
        super(_Component, self).paintAll(arg0)

    @override
    @overload
    def setDoubleBuffered(self, arg0: bool):
        """public void javax.swing.JComponent.setDoubleBuffered(boolean)"""
        super(_JComponent, self).setDoubleBuffered(_boolean.valueOf(arg0))

    @override
    @overload
    def isPreferredSizeSet(self) -> bool:
        """public boolean java.awt.Component.isPreferredSizeSet()"""
        return bool._wrap(super(Component, self).isPreferredSizeSet())

    @override
    @overload
    def addInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.addInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).addInputMethodListener(arg0)

    @override
    @overload
    def removeMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.removeMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).removeMouseWheelListener(arg0)

    @override
    @overload
    def getInputMap(self) -> 'InputMap':
        """public final javax.swing.InputMap javax.swing.JComponent.getInputMap()"""
        return 'InputMap'._wrap(super(JComponent, self).getInputMap())

    @override
    @overload
    def setVisible(self, arg0: bool):
        """public void javax.swing.JComponent.setVisible(boolean)"""
        super(_JComponent, self).setVisible(_boolean.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,byte,byte)"""
        super(_Component, self).firePropertyChange(arg0, _byte.valueOf(arg1), _byte.valueOf(arg2))

    @override
    @overload
    def getUIClassID(self) -> str:
        """public java.lang.String javax.swing.JPanel.getUIClassID()"""
        return str._wrap(super(JPanel, self).getUIClassID())

    @override
    @overload
    def transferFocusDownCycle(self):
        """public void java.awt.Container.transferFocusDownCycle()"""
        super(Container, self).transferFocusDownCycle()

    @override
    @overload
    def getNextFocusableComponent(self) -> 'Component':
        """public java.awt.Component javax.swing.JComponent.getNextFocusableComponent()"""
        return 'Component'._wrap(super(JComponent, self).getNextFocusableComponent())

    @override
    @overload
    def getUI(self) -> 'PanelUI':
        """public javax.swing.plaf.PanelUI javax.swing.JPanel.getUI()"""
        return 'PanelUI'._wrap(super(JPanel, self).getUI())

    @override
    @overload
    def setBounds(self, arg0: 'Rectangle'):
        """public void java.awt.Component.setBounds(java.awt.Rectangle)"""
        super(_Component, self).setBounds(arg0)

    @override
    @overload
    def repaint(self, arg0: int):
        """public void java.awt.Component.repaint(long)"""
        super(_Component, self).repaint(_long.valueOf(arg0))

    @override
    @overload
    def removeHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.removeHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).removeHierarchyBoundsListener(arg0)

    @override
    @overload
    def getComponentPopupMenu(self) -> 'JPopupMenu':
        """public javax.swing.JPopupMenu javax.swing.JComponent.getComponentPopupMenu()"""
        return 'JPopupMenu'._wrap(super(JComponent, self).getComponentPopupMenu())

    @override
    @overload
    def getMousePosition(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getMousePosition() throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(Component, self).getMousePosition())

    @override
    @overload
    def getComponentCount(self) -> int:
        """public int java.awt.Container.getComponentCount()"""
        return int._wrap(super(Container, self).getComponentCount())

    @override
    @overload
    def getInputMethodRequests(self) -> 'InputMethodRequests':
        """public java.awt.im.InputMethodRequests java.awt.Component.getInputMethodRequests()"""
        return 'InputMethodRequests'._wrap(super(Component, self).getInputMethodRequests())

    @override
    @overload
    def setMaximumSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setMaximumSize(java.awt.Dimension)"""
        super(_JComponent, self).setMaximumSize(arg0)

    @override
    @overload
    def setRequestFocusEnabled(self, arg0: bool):
        """public void javax.swing.JComponent.setRequestFocusEnabled(boolean)"""
        super(_JComponent, self).setRequestFocusEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def setFocusTraversalKeys(self, arg0: int, arg1: 'Set'):
        """public void javax.swing.JComponent.setFocusTraversalKeys(int,java.util.Set<? extends java.awt.AWTKeyStroke>)"""
        super(_JComponent, self).setFocusTraversalKeys(_int.valueOf(arg0), arg1)

    @overload
    def inside(self, arg0: int, arg1: int) -> bool:
        """public boolean java.awt.Component.inside(int,int)"""
        return bool._wrap(super(_Component, self).inside(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def requestDefaultFocus(self) -> bool:
        """public boolean javax.swing.JComponent.requestDefaultFocus()"""
        return bool._wrap(super(JComponent, self).requestDefaultFocus())

    @override
    @overload
    def disable(self):
        """public void javax.swing.JComponent.disable()"""
        super(JComponent, self).disable()

    @override
    @overload
    def showContent(self, arg0: bool):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.showContent(boolean)"""
        super(_EditorPanel, self).showContent(_boolean.valueOf(arg0))

    @override
    @overload
    def enableInputMethods(self, arg0: bool):
        """public void java.awt.Component.enableInputMethods(boolean)"""
        super(_Component, self).enableInputMethods(_boolean.valueOf(arg0))

    @override
    @overload
    def layout(self):
        """public void java.awt.Container.layout()"""
        super(Container, self).layout()

    @override
    @overload
    def getInputMethodListeners(self) -> List['InputMethodListener']:
        """public synchronized java.awt.event.InputMethodListener[] java.awt.Component.getInputMethodListeners()"""
        return List['InputMethodListener']._wrap(super(Component, self).getInputMethodListeners())

    @override
    @overload
    def paint(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.paint(java.awt.Graphics)"""
        super(_JComponent, self).paint(arg0)

    @override
    @overload
    def transferFocus(self):
        """public void java.awt.Component.transferFocus()"""
        super(Component, self).transferFocus()

    @override
    @overload
    def removeComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.removeComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).removeComponentListener(arg0)

    @override
    @overload
    def getCursor(self) -> 'Cursor':
        """public java.awt.Cursor java.awt.Component.getCursor()"""
        return 'Cursor'._wrap(super(Component, self).getCursor())

    @override
    @overload
    def setMinimumSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setMinimumSize(java.awt.Dimension)"""
        super(_JComponent, self).setMinimumSize(arg0)

    @override
    @overload
    def getAdvancedPanel(self) -> 'JPanel':
        """public javax.swing.JPanel com.badlogic.gdx.tools.flame.EditorPanel.getAdvancedPanel()"""
        return 'JPanel'._wrap(super(EditorPanel, self).getAdvancedPanel())

    @override
    @overload
    def getContainerListeners(self) -> List['ContainerListener']:
        """public synchronized java.awt.event.ContainerListener[] java.awt.Container.getContainerListeners()"""
        return List['ContainerListener']._wrap(super(Container, self).getContainerListeners())

    @override
    @overload
    def setLocation(self, arg0: 'Point'):
        """public void java.awt.Component.setLocation(java.awt.Point)"""
        super(_Component, self).setLocation(arg0)

    @override
    @overload
    def setSize(self, arg0: 'Dimension'):
        """public void java.awt.Component.setSize(java.awt.Dimension)"""
        super(_Component, self).setSize(arg0)

    @override
    @overload
    def removeAll(self):
        """public void java.awt.Container.removeAll()"""
        super(Container, self).removeAll()

    @overload
    def getPopupLocation(self, arg0: 'MouseEvent') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getPopupLocation(java.awt.event.MouseEvent)"""
        return 'Point'._wrap(super(_JComponent, self).getPopupLocation(arg0))

    @overload
    def isAncestorOf(self, arg0: 'Component') -> bool:
        """public boolean java.awt.Container.isAncestorOf(java.awt.Component)"""
        return bool._wrap(super(_Container, self).isAncestorOf(arg0))

    @override
    @overload
    def setOpaque(self, arg0: bool):
        """public void javax.swing.JComponent.setOpaque(boolean)"""
        super(_JComponent, self).setOpaque(_boolean.valueOf(arg0))

    @overload
    def contains(self, arg0: int, arg1: int) -> bool:
        """public boolean javax.swing.JComponent.contains(int,int)"""
        return bool._wrap(super(_JComponent, self).contains(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def setCursor(self, arg0: 'Cursor'):
        """public void java.awt.Component.setCursor(java.awt.Cursor)"""
        super(_Component, self).setCursor(arg0)

    @override
    @overload
    def validate(self):
        """public void java.awt.Container.validate()"""
        super(Container, self).validate()

    @override
    @overload
    def getMaximumSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getMaximumSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getMaximumSize())

    @override
    @overload
    def getBackground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getBackground()"""
        return 'Color'._wrap(super(Component, self).getBackground())

    @overload
    def createImage(self, arg0: 'ImageProducer') -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(java.awt.image.ImageProducer)"""
        return 'Image'._wrap(super(_Component, self).createImage(arg0))

    @override
    @overload
    def setVerifyInputWhenFocusTarget(self, arg0: bool):
        """public void javax.swing.JComponent.setVerifyInputWhenFocusTarget(boolean)"""
        super(_JComponent, self).setVerifyInputWhenFocusTarget(_boolean.valueOf(arg0))

    @override
    @overload
    def removePropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0, arg1)

    @override
    @overload
    def countComponents(self) -> int:
        """public int java.awt.Container.countComponents()"""
        return int._wrap(super(Container, self).countComponents()) 
 
 
# CLASS: com.badlogic.gdx.tools.flame.TemplatePickerPanel
from pyquantum_helper import import_once as _import_once
import javax.accessibility.AccessibleContext as AccessibleContext
import javax.swing.JToolTip as JToolTip
import java.awt.event.HierarchyBoundsListener as HierarchyBoundsListener
import java.awt.event.ActionListener as _ActionListener
_ActionListener = _ActionListener
import java.awt.ComponentOrientation as _ComponentOrientation
_ComponentOrientation = _ComponentOrientation
import java.awt.image.ImageProducer as ImageProducer
import java.awt.GraphicsConfiguration as GraphicsConfiguration
import java.awt.Graphics as _Graphics
_Graphics = _Graphics
import javax.swing.JToolTip as _JToolTip
_JToolTip = _JToolTip
import java.awt.Container as _Container
_Container = _Container
import java.awt.MenuComponent as MenuComponent
import java.awt.im.InputMethodRequests as _InputMethodRequests
_InputMethodRequests = _InputMethodRequests
import java.awt.FocusTraversalPolicy as _FocusTraversalPolicy
_FocusTraversalPolicy = _FocusTraversalPolicy
import java.lang.Byte as _byte
import java.awt.Dimension as Dimension
import java.awt.Font as _Font
_Font = _Font
import javax.swing.plaf.PanelUI as _PanelUI
_PanelUI = _PanelUI
import java.awt.event.ContainerListener as ContainerListener
import javax.swing.event.AncestorListener as AncestorListener
import java.awt.AWTEvent as AWTEvent
import javax.swing.JPanel as JPanel
import java.awt.image.ColorModel as _ColorModel
_ColorModel = _ColorModel
import java.lang.Object as _object
import java.awt.ComponentOrientation as ComponentOrientation
import java.awt.im.InputContext as _InputContext
_InputContext = _InputContext
from builtins import float
import java.awt.event.HierarchyListener as HierarchyListener
import java.awt.event.InputMethodListener as InputMethodListener
from typing import List
import java.awt.event.MouseWheelListener as _MouseWheelListener
_MouseWheelListener = _MouseWheelListener
import java.awt.event.KeyListener as KeyListener
import java.awt.Component as Component
from builtins import int
import java.awt.LayoutManager as LayoutManager
import java.awt.FontMetrics as _FontMetrics
_FontMetrics = _FontMetrics
import java.awt.Container as Container
from builtins import type
import java.awt.image.VolatileImage as _VolatileImage
_VolatileImage = _VolatileImage
import java.awt.Shape as Shape
import com.badlogic.gdx.tools.flame.EditorPanel as _EditorPanel
_EditorPanel = _EditorPanel
import java.awt.Rectangle as Rectangle
import java.awt.event.ContainerListener as _ContainerListener
_ContainerListener = _ContainerListener
import java.awt.event.HierarchyListener as _HierarchyListener
_HierarchyListener = _HierarchyListener
import java.lang.String as _string
import javax.swing.InputVerifier as _InputVerifier
_InputVerifier = _InputVerifier
import java.awt.Insets as _Insets
_Insets = _Insets
import javax.swing.border.Border as _Border
_Border = _Border
import java.awt.event.ComponentListener as _ComponentListener
_ComponentListener = _ComponentListener
import javax.swing.ActionMap as ActionMap
import java.beans.VetoableChangeListener as VetoableChangeListener
import java.awt.event.ComponentListener as ComponentListener
import javax.swing.KeyStroke as KeyStroke
import java.beans.VetoableChangeListener as _VetoableChangeListener
_VetoableChangeListener = _VetoableChangeListener
from builtins import object
import java.awt.event.KeyListener as _KeyListener
_KeyListener = _KeyListener
import java.awt.Component.BaselineResizeBehavior as BaselineResizeBehavior
import java.awt.Component as _Component_BaselineResizeBehavior
_BaselineResizeBehavior = _Component_BaselineResizeBehavior.BaselineResizeBehavior
import java.awt.Cursor as _Cursor
_Cursor = _Cursor
import java.awt.im.InputMethodRequests as InputMethodRequests
import java.lang.Long as _long
import javax.swing.JPanel as _JPanel
_JPanel = _JPanel
import java.awt.event.FocusListener as _FocusListener
_FocusListener = _FocusListener
import java.lang.Character as _char
import javax.swing.TransferHandler as TransferHandler
import java.awt.event.FocusEvent.Cause as Cause
import javax.swing.JComponent as JComponent
import javax.accessibility.AccessibleContext as _AccessibleContext
_AccessibleContext = _AccessibleContext
import java.awt.event.MouseWheelListener as MouseWheelListener
import java.util.Set as _Set
_Set = _Set
import java.awt.image.ColorModel as ColorModel
import java.lang.Boolean as _boolean
import java.awt.event.MouseMotionListener as MouseMotionListener
import java.util.EventListener as EventListener
import java.awt.Insets as Insets
import javax.swing.KeyStroke as _KeyStroke
_KeyStroke = _KeyStroke
import java.awt.GraphicsConfiguration as _GraphicsConfiguration
_GraphicsConfiguration = _GraphicsConfiguration
import java.awt.dnd.DropTarget as _DropTarget
_DropTarget = _DropTarget
from builtins import bool
import java.beans.PropertyChangeListener as _PropertyChangeListener
_PropertyChangeListener = _PropertyChangeListener
try:
    from pygdx import utils
except ImportError:
    utils = _import_once("pygdx.utils")

import java.awt.LayoutManager as _LayoutManager
_LayoutManager = _LayoutManager
import java.awt.PopupMenu as PopupMenu
import java.util.EventListener as _EventListener
_EventListener = _EventListener
import java.awt.im.InputContext as InputContext
import java.awt.Component as _Component
_Component = _Component
import java.awt.Font as Font
import java.awt.image.VolatileImage as VolatileImage
import java.awt.dnd.DropTarget as DropTarget
import java.lang.String as _String
_String = _String
import java.lang.Float as _float
import java.awt.Cursor as Cursor
import java.awt.event.MouseListener as _MouseListener
_MouseListener = _MouseListener
import java.awt.Toolkit as _Toolkit
_Toolkit = _Toolkit
import java.io.PrintStream as PrintStream
import javax.swing.JRootPane as _JRootPane
_JRootPane = _JRootPane
import java.awt.Dimension as _Dimension
_Dimension = _Dimension
import java.awt.event.ActionListener as ActionListener
import java.awt.event.MouseEvent as MouseEvent
import java.awt.Color as _Color
_Color = _Color
import javax.swing.JPopupMenu as _JPopupMenu
_JPopupMenu = _JPopupMenu
import javax.swing.InputMap as _InputMap
_InputMap = _InputMap
import java.awt.event.MouseListener as MouseListener
import java.lang.Class as _Class
_Class = _Class
import java.util.Locale as Locale
import java.lang.Double as _double
import javax.swing.plaf.PanelUI as PanelUI
import java.awt.Point as _Point
_Point = _Point
import java.lang.Object as _Object
_Object = _Object
import java.beans.PropertyChangeListener as PropertyChangeListener
import javax.swing.border.Border as Border
import javax.swing.JComponent as _JComponent
_JComponent = _JComponent
import javax.swing.InputVerifier as InputVerifier
import java.io.PrintWriter as PrintWriter
import java.awt.Point as Point
import javax.swing.event.AncestorListener as _AncestorListener
_AncestorListener = _AncestorListener
import java.lang.Short as _short
import java.awt.Toolkit as Toolkit
import java.awt.event.HierarchyBoundsListener as _HierarchyBoundsListener
_HierarchyBoundsListener = _HierarchyBoundsListener
import javax.swing.TransferHandler as _TransferHandler
_TransferHandler = _TransferHandler
import javax.swing.InputMap as InputMap
import java.awt.Rectangle as _Rectangle
_Rectangle = _Rectangle
import javax.swing.JRootPane as JRootPane
import java.awt.Event as Event
import java.awt.event.FocusListener as FocusListener
import java.awt.image.ImageObserver as ImageObserver
from builtins import str
from pyquantum_helper import override
import javax.swing.ActionMap as _ActionMap
_ActionMap = _ActionMap
import java.awt.FocusTraversalPolicy as FocusTraversalPolicy
import java.awt.event.MouseMotionListener as _MouseMotionListener
_MouseMotionListener = _MouseMotionListener
import java.awt.event.InputMethodListener as _InputMethodListener
_InputMethodListener = _InputMethodListener
import javax.swing.JPopupMenu as JPopupMenu
import java.util.Set as Set
import java.lang.Integer as _int
import java.awt.Image as _Image
_Image = _Image
import java.awt.FontMetrics as FontMetrics
import java.awt.Color as Color
import java.awt.Image as Image
import java.awt.Graphics as Graphics
import com.badlogic.gdx.tools.flame.TemplatePickerPanel as _TemplatePickerPanel
_TemplatePickerPanel = _TemplatePickerPanel
import java.awt.ImageCapabilities as ImageCapabilities
import java.util.Locale as _Locale
_Locale = _Locale
 
class TemplatePickerPanel():
    """com.badlogic.gdx.tools.flame.TemplatePickerPanel"""
 
    @staticmethod
    def _wrap(java_value: _TemplatePickerPanel) -> 'TemplatePickerPanel':
        return TemplatePickerPanel(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _TemplatePickerPanel):
        """
        Dynamic initializer for TemplatePickerPanel.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_TemplatePickerPanel__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_TemplatePickerPanel__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def removeVetoableChangeListener(self, arg0: 'VetoableChangeListener'):
        """public synchronized void javax.swing.JComponent.removeVetoableChangeListener(java.beans.VetoableChangeListener)"""
        super(_JComponent, self).removeVetoableChangeListener(arg0)

    @override
    @overload
    def getComponents(self) -> List['Component']:
        """public java.awt.Component[] java.awt.Container.getComponents()"""
        return List['Component']._wrap(super(Container, self).getComponents())

    @override
    @overload
    def setDebugGraphicsOptions(self, arg0: int):
        """public void javax.swing.JComponent.setDebugGraphicsOptions(int)"""
        super(_JComponent, self).setDebugGraphicsOptions(_int.valueOf(arg0))

    @override
    @overload
    def isValid(self) -> bool:
        """public boolean java.awt.Component.isValid()"""
        return bool._wrap(super(Component, self).isValid())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def getDefaultLocale() -> 'Locale':
        """public static java.util.Locale javax.swing.JComponent.getDefaultLocale()"""
        return Locale._wrap(_JComponent.getDefaultLocale())

    @override
    @overload
    def getInputVerifier(self) -> 'InputVerifier':
        """public javax.swing.InputVerifier javax.swing.JComponent.getInputVerifier()"""
        return 'InputVerifier'._wrap(super(JComponent, self).getInputVerifier())

    @overload
    def setOneModelSelectionRequired(self, arg0: bool):
        """public void com.badlogic.gdx.tools.flame.TemplatePickerPanel.setOneModelSelectionRequired(boolean)"""
        super(_TemplatePickerPanel, self).setOneModelSelectionRequired(_boolean.valueOf(arg0))

    @override
    @overload
    def list(self, arg0: 'PrintStream', arg1: int):
        """public void java.awt.Container.list(java.io.PrintStream,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @override
    @overload
    def setUI(self, arg0: 'PanelUI'):
        """public void javax.swing.JPanel.setUI(javax.swing.plaf.PanelUI)"""
        super(_JPanel, self).setUI(arg0)

    @override
    @overload
    def getFocusTraversalPolicy(self) -> 'FocusTraversalPolicy':
        """public java.awt.FocusTraversalPolicy java.awt.Container.getFocusTraversalPolicy()"""
        return 'FocusTraversalPolicy'._wrap(super(Container, self).getFocusTraversalPolicy())

    @override
    @overload
    def getParent(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getParent()"""
        return 'Container'._wrap(super(Component, self).getParent())

    @override
    @overload
    def paintImmediately(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.paintImmediately(java.awt.Rectangle)"""
        super(_JComponent, self).paintImmediately(arg0)

    @staticmethod
    @overload
    def setDefaultLocale(arg0: 'Locale'):
        """public static void javax.swing.JComponent.setDefaultLocale(java.util.Locale)"""
        _JComponent.setDefaultLocale(arg0)

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,float,float)"""
        super(_Component, self).firePropertyChange(arg0, _float.valueOf(arg1), _float.valueOf(arg2))

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object)"""
        super(_Container, self).add(arg0, arg1)

    @override
    @overload
    def getLocale(self) -> 'Locale':
        """public java.util.Locale java.awt.Component.getLocale()"""
        return 'Locale'._wrap(super(Component, self).getLocale())

    @override
    @overload
    def setInheritsPopupMenu(self, arg0: bool):
        """public void javax.swing.JComponent.setInheritsPopupMenu(boolean)"""
        super(_JComponent, self).setInheritsPopupMenu(_boolean.valueOf(arg0))

    @override
    @overload
    def getHierarchyListeners(self) -> List['HierarchyListener']:
        """public synchronized java.awt.event.HierarchyListener[] java.awt.Component.getHierarchyListeners()"""
        return List['HierarchyListener']._wrap(super(Component, self).getHierarchyListeners())

    @override
    @overload
    def nextFocus(self):
        """public void java.awt.Component.nextFocus()"""
        super(Component, self).nextFocus()

    @override
    @overload
    def isPaintingTile(self) -> bool:
        """public boolean javax.swing.JComponent.isPaintingTile()"""
        return bool._wrap(super(JComponent, self).isPaintingTile())

    @override
    @overload
    def getContentPanel(self) -> 'JPanel':
        """public javax.swing.JPanel com.badlogic.gdx.tools.flame.EditorPanel.getContentPanel()"""
        return 'JPanel'._wrap(super(EditorPanel, self).getContentPanel())

    @override
    @overload
    def isDisplayable(self) -> bool:
        """public boolean java.awt.Component.isDisplayable()"""
        return bool._wrap(super(Component, self).isDisplayable())

    @override
    @overload
    def getBounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.getBounds()"""
        return 'Rectangle'._wrap(super(Component, self).getBounds())

    @override
    @overload
    def removeMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.removeMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).removeMouseMotionListener(arg0)

    @override
    @overload
    def isShowing(self) -> bool:
        """public boolean java.awt.Component.isShowing()"""
        return bool._wrap(super(Component, self).isShowing())

    @override
    @overload
    def getDropTarget(self) -> 'DropTarget':
        """public synchronized java.awt.dnd.DropTarget java.awt.Component.getDropTarget()"""
        return 'DropTarget'._wrap(super(Component, self).getDropTarget())

    @override
    @overload
    def isFontSet(self) -> bool:
        """public boolean java.awt.Component.isFontSet()"""
        return bool._wrap(super(Component, self).isFontSet())

    @overload
    def mouseUp(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseUp(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseUp(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def setIgnoreRepaint(self, arg0: bool):
        """public void java.awt.Component.setIgnoreRepaint(boolean)"""
        super(_Component, self).setIgnoreRepaint(_boolean.valueOf(arg0))

    @override
    @overload
    def getPropertyChangeListeners(self) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners()"""
        return List['PropertyChangeListener']._wrap(super(Component, self).getPropertyChangeListeners())

    @override
    @overload
    def isBackgroundSet(self) -> bool:
        """public boolean java.awt.Component.isBackgroundSet()"""
        return bool._wrap(super(Component, self).isBackgroundSet())

    @overload
    def reloadTemplates(self):
        """public void com.badlogic.gdx.tools.flame.TemplatePickerPanel.reloadTemplates()"""
        super(TemplatePickerPanel, self).reloadTemplates()

    @override
    @overload
    def getLocation(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocation()"""
        return 'Point'._wrap(super(Component, self).getLocation())

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int._wrap(super(object, self).hashCode())

    @override
    @overload
    def location(self) -> 'Point':
        """public java.awt.Point java.awt.Component.location()"""
        return 'Point'._wrap(super(Component, self).location())

    @override
    @overload
    def getComponentOrientation(self) -> 'ComponentOrientation':
        """public java.awt.ComponentOrientation java.awt.Component.getComponentOrientation()"""
        return 'ComponentOrientation'._wrap(super(Component, self).getComponentOrientation())

    @override
    @overload
    def addHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.addHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).addHierarchyListener(arg0)

    @override
    @overload
    def getInheritsPopupMenu(self) -> bool:
        """public boolean javax.swing.JComponent.getInheritsPopupMenu()"""
        return bool._wrap(super(JComponent, self).getInheritsPopupMenu())

    @overload
    def setExcludedTemplates(self, arg0: 'Array'):
        """public void com.badlogic.gdx.tools.flame.TemplatePickerPanel.setExcludedTemplates(com.badlogic.gdx.utils.Array<T>)"""
        super(_TemplatePickerPanel, self).setExcludedTemplates(arg0)

    @override
    @overload
    def setComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Component.setComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Component, self).setComponentOrientation(arg0)

    @override
    @overload
    def getFocusCycleRootAncestor(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getFocusCycleRootAncestor()"""
        return 'Container'._wrap(super(Component, self).getFocusCycleRootAncestor())

    @override
    @overload
    def show(self, arg0: bool):
        """public void java.awt.Component.show(boolean)"""
        super(_Component, self).show(_boolean.valueOf(arg0))

    @staticmethod
    @overload
    def addContent(arg0: 'JPanel', arg1: int, arg2: int, arg3: 'JComponent', arg4: bool, arg5: int, arg6: int, arg7: float, arg8: float):
        """public static void com.badlogic.gdx.tools.flame.EditorPanel.addContent(javax.swing.JPanel,int,int,javax.swing.JComponent,boolean,int,int,float,float)"""
        _EditorPanel.addContent(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3, _boolean.valueOf(arg4), _int.valueOf(arg5), _int.valueOf(arg6), _float.valueOf(arg7), _float.valueOf(arg8))

    @override
    @overload
    def grabFocus(self):
        """public void javax.swing.JComponent.grabFocus()"""
        super(JComponent, self).grabFocus()

    @overload
    def locate(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.locate(int,int)"""
        return 'Component'._wrap(super(_Container, self).locate(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def isPaintingForPrint(self) -> bool:
        """public final boolean javax.swing.JComponent.isPaintingForPrint()"""
        return bool._wrap(super(JComponent, self).isPaintingForPrint())

    @overload
    def keyDown(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyDown(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyDown(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,int,int)"""
        super(_JComponent, self).firePropertyChange(arg0, _int.valueOf(arg1), _int.valueOf(arg2))

    @override
    @overload
    def getLayout(self) -> 'LayoutManager':
        """public java.awt.LayoutManager java.awt.Container.getLayout()"""
        return 'LayoutManager'._wrap(super(Container, self).getLayout())

    @override
    @overload
    def preferredSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.preferredSize()"""
        return 'Dimension'._wrap(super(Container, self).preferredSize())

    @override
    @overload
    def addNotify(self):
        """public void javax.swing.JComponent.addNotify()"""
        super(JComponent, self).addNotify()

    @override
    @overload
    def setSize(self, arg0: int, arg1: int):
        """public void java.awt.Component.setSize(int,int)"""
        super(_Component, self).setSize(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.repaint(int,int,int,int)"""
        super(_Component, self).repaint(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @overload
    def requestFocusInWindow(self, arg0: 'Cause') -> bool:
        """public boolean java.awt.Component.requestFocusInWindow(java.awt.event.FocusEvent$Cause)"""
        return bool._wrap(super(_Component, self).requestFocusInWindow(arg0))

    @override
    @overload
    def remove(self, arg0: int):
        """public void java.awt.Container.remove(int)"""
        super(_Container, self).remove(_int.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,long,long)"""
        super(_Component, self).firePropertyChange(arg0, _long.valueOf(arg1), _long.valueOf(arg2))

    @override
    @overload
    def update(self, arg0: 'FlameMain'):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.update(com.badlogic.gdx.tools.flame.FlameMain)"""
        super(_EditorPanel, self).update(arg0)

    @override
    @overload
    def setFocusCycleRoot(self, arg0: bool):
        """public void java.awt.Container.setFocusCycleRoot(boolean)"""
        super(_Container, self).setFocusCycleRoot(_boolean.valueOf(arg0))

    @overload
    def keyUp(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyUp(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyUp(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def setBackground(self, arg0: 'Color'):
        """public void javax.swing.JComponent.setBackground(java.awt.Color)"""
        super(_JComponent, self).setBackground(arg0)

    @override
    @overload
    def doLayout(self):
        """public void java.awt.Container.doLayout()"""
        super(Container, self).doLayout()

    @override
    @overload
    def enable(self):
        """public void javax.swing.JComponent.enable()"""
        super(JComponent, self).enable()

    @override
    @overload
    def getInsets(self) -> 'Insets':
        """public java.awt.Insets javax.swing.JComponent.getInsets()"""
        return 'Insets'._wrap(super(JComponent, self).getInsets())

    @override
    @overload
    def setNextFocusableComponent(self, arg0: 'Component'):
        """public void javax.swing.JComponent.setNextFocusableComponent(java.awt.Component)"""
        super(_JComponent, self).setNextFocusableComponent(arg0)

    @override
    @overload
    def getAlignmentY(self) -> float:
        """public float javax.swing.JComponent.getAlignmentY()"""
        return float._wrap(super(JComponent, self).getAlignmentY())

    @overload
    def checkImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @override
    @overload
    def getFocusTraversalKeysEnabled(self) -> bool:
        """public boolean java.awt.Component.getFocusTraversalKeysEnabled()"""
        return bool._wrap(super(Component, self).getFocusTraversalKeysEnabled())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getRootPane(self) -> 'JRootPane':
        """public javax.swing.JRootPane javax.swing.JComponent.getRootPane()"""
        return 'JRootPane'._wrap(super(JComponent, self).getRootPane())

    @override
    @overload
    def invalidate(self):
        """public void java.awt.Container.invalidate()"""
        super(Container, self).invalidate()

    @override
    @overload
    def resetKeyboardActions(self):
        """public void javax.swing.JComponent.resetKeyboardActions()"""
        super(JComponent, self).resetKeyboardActions()

    @overload
    def getComponent(self, arg0: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponent(int)"""
        return 'Component'._wrap(super(_Container, self).getComponent(_int.valueOf(arg0)))

    @override
    @overload
    def setName(self, arg0: str):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setName(java.lang.String)"""
        super(_EditorPanel, self).setName(arg0)

    @override
    @overload
    def addPropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Container.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Container, self).addPropertyChangeListener(arg0, arg1)

    @override
    @overload
    def setInputMap(self, arg0: int, arg1: 'InputMap'):
        """public final void javax.swing.JComponent.setInputMap(int,javax.swing.InputMap)"""
        super(_JComponent, self).setInputMap(_int.valueOf(arg0), arg1)

    @override
    @overload
    def removePropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0)

    @override
    @overload
    def applyComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Container.applyComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Container, self).applyComponentOrientation(arg0)

    @override
    @overload
    def setBorder(self, arg0: 'Border'):
        """public void javax.swing.JComponent.setBorder(javax.swing.border.Border)"""
        super(_JComponent, self).setBorder(arg0)

    @override
    @overload
    def remove(self, arg0: 'MenuComponent'):
        """public void java.awt.Component.remove(java.awt.MenuComponent)"""
        super(_Component, self).remove(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintStream'):
        """public void java.awt.Component.list(java.io.PrintStream)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def removeMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.removeMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).removeMouseListener(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintWriter'):
        """public void java.awt.Component.list(java.io.PrintWriter)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def getKeyListeners(self) -> List['KeyListener']:
        """public synchronized java.awt.event.KeyListener[] java.awt.Component.getKeyListeners()"""
        return List['KeyListener']._wrap(super(Component, self).getKeyListeners())

    @override
    @overload
    def getInputContext(self) -> 'InputContext':
        """public java.awt.im.InputContext java.awt.Component.getInputContext()"""
        return 'InputContext'._wrap(super(Component, self).getInputContext())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,double,double)"""
        super(_Component, self).firePropertyChange(arg0, _double.valueOf(arg1), _double.valueOf(arg2))

    @override
    @overload
    def removeAncestorListener(self, arg0: 'AncestorListener'):
        """public void javax.swing.JComponent.removeAncestorListener(javax.swing.event.AncestorListener)"""
        super(_JComponent, self).removeAncestorListener(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintWriter', arg1: int):
        """public void java.awt.Container.list(java.io.PrintWriter,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @overload
    def checkImage(self, arg0: 'Image', arg1: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, arg1))

    @override
    @overload
    def removeFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.removeFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).removeFocusListener(arg0)

    @overload
    def mouseDown(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDown(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDown(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def setIsAlwayShown(self, arg0: bool):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setIsAlwayShown(boolean)"""
        super(_EditorPanel, self).setIsAlwayShown(_boolean.valueOf(arg0))

    @overload
    def getConditionForKeyStroke(self, arg0: 'KeyStroke') -> int:
        """public int javax.swing.JComponent.getConditionForKeyStroke(javax.swing.KeyStroke)"""
        return int._wrap(super(_JComponent, self).getConditionForKeyStroke(arg0))

    @override
    @overload
    def getTreeLock(self) -> object:
        """public final java.lang.Object java.awt.Component.getTreeLock()"""
        return object._wrap(super(Component, self).getTreeLock())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @override
    @overload
    def addVetoableChangeListener(self, arg0: 'VetoableChangeListener'):
        """public synchronized void javax.swing.JComponent.addVetoableChangeListener(java.beans.VetoableChangeListener)"""
        super(_JComponent, self).addVetoableChangeListener(arg0)

    @overload
    def contains(self, arg0: 'Point') -> bool:
        """public boolean java.awt.Component.contains(java.awt.Point)"""
        return bool._wrap(super(_Component, self).contains(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,short,short)"""
        super(_Component, self).firePropertyChange(arg0, _short.valueOf(arg1), _short.valueOf(arg2))

    @override
    @overload
    def dispatchEvent(self, arg0: 'AWTEvent'):
        """public final void java.awt.Component.dispatchEvent(java.awt.AWTEvent)"""
        super(_Component, self).dispatchEvent(arg0)

    @override
    @overload
    def removeContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.removeContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).removeContainerListener(arg0)

    @override
    @overload
    def getGraphicsConfiguration(self) -> 'GraphicsConfiguration':
        """public java.awt.GraphicsConfiguration java.awt.Component.getGraphicsConfiguration()"""
        return 'GraphicsConfiguration'._wrap(super(Component, self).getGraphicsConfiguration())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: bool, arg2: bool):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,boolean,boolean)"""
        super(_JComponent, self).firePropertyChange(arg0, _boolean.valueOf(arg1), _boolean.valueOf(arg2))

    @override
    @overload
    def registerKeyboardAction(self, arg0: 'ActionListener', arg1: str, arg2: 'KeyStroke', arg3: int):
        """public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,java.lang.String,javax.swing.KeyStroke,int)"""
        super(_JComponent, self).registerKeyboardAction(arg0, arg1, arg2, _int.valueOf(arg3))

    @overload
    def findComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(arg0))

    @override
    @overload
    def resize(self, arg0: int, arg1: int):
        """public void java.awt.Component.resize(int,int)"""
        super(_Component, self).resize(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getHeight(self) -> int:
        """public int javax.swing.JComponent.getHeight()"""
        return int._wrap(super(JComponent, self).getHeight())

    @override
    @overload
    def getTransferHandler(self) -> 'TransferHandler':
        """public javax.swing.TransferHandler javax.swing.JComponent.getTransferHandler()"""
        return 'TransferHandler'._wrap(super(JComponent, self).getTransferHandler())

    @overload
    def imageUpdate(self, arg0: 'Image', arg1: int, arg2: int, arg3: int, arg4: int, arg5: int) -> bool:
        """public boolean java.awt.Component.imageUpdate(java.awt.Image,int,int,int,int,int)"""
        return bool._wrap(super(_Component, self).imageUpdate(arg0, _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4), _int.valueOf(arg5)))

    @override
    @overload
    def getWidth(self) -> int:
        """public int javax.swing.JComponent.getWidth()"""
        return int._wrap(super(JComponent, self).getWidth())

    @override
    @overload
    def transferFocusBackward(self):
        """public void java.awt.Component.transferFocusBackward()"""
        super(Component, self).transferFocusBackward()

    @overload
    def getPropertyChangeListeners(self, arg0: str) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners(java.lang.String)"""
        return List['PropertyChangeListener']._wrap(super(_Component, self).getPropertyChangeListeners(arg0))

    @overload
    def setValue(self, arg0: 'Array'):
        """public void com.badlogic.gdx.tools.flame.TemplatePickerPanel.setValue(com.badlogic.gdx.utils.Array<T>)"""
        super(_TemplatePickerPanel, self).setValue(arg0)

    @override
    @overload
    def getName(self) -> str:
        """public java.lang.String com.badlogic.gdx.tools.flame.EditorPanel.getName()"""
        return str._wrap(super(EditorPanel, self).getName())

    @staticmethod
    @overload
    def isLightweightComponent(arg0: 'Component') -> bool:
        """public static boolean javax.swing.JComponent.isLightweightComponent(java.awt.Component)"""
        return bool._wrap(_JComponent.isLightweightComponent(arg0))

    @override
    @overload
    def getBorder(self) -> 'Border':
        """public javax.swing.border.Border javax.swing.JComponent.getBorder()"""
        return 'Border'._wrap(super(JComponent, self).getBorder())

    @override
    @overload
    def printAll(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.printAll(java.awt.Graphics)"""
        super(_JComponent, self).printAll(arg0)

    @override
    @overload
    def addComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.addComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).addComponentListener(arg0)

    @override
    @overload
    def getBaselineResizeBehavior(self) -> 'BaselineResizeBehavior.Component$BaselineResizeBehavior':
        """public java.awt.Component$BaselineResizeBehavior javax.swing.JComponent.getBaselineResizeBehavior()"""
        return 'BaselineResizeBehavior.Component$BaselineResizeBehavior'._wrap(super(JComponent, self).getBaselineResizeBehavior())

    @override
    @overload
    def print(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.print(java.awt.Graphics)"""
        super(_JComponent, self).print(arg0)

    @override
    @overload
    def setInputVerifier(self, arg0: 'InputVerifier'):
        """public void javax.swing.JComponent.setInputVerifier(javax.swing.InputVerifier)"""
        super(_JComponent, self).setInputVerifier(arg0)

    @override
    @overload
    def addAncestorListener(self, arg0: 'AncestorListener'):
        """public void javax.swing.JComponent.addAncestorListener(javax.swing.event.AncestorListener)"""
        super(_JComponent, self).addAncestorListener(arg0)

    @override
    @overload
    def getFont(self) -> 'Font':
        """public java.awt.Font java.awt.Component.getFont()"""
        return 'Font'._wrap(super(Component, self).getFont())

    @override
    @overload
    def setFont(self, arg0: 'Font'):
        """public void javax.swing.JComponent.setFont(java.awt.Font)"""
        super(_JComponent, self).setFont(arg0)

    @override
    @overload
    def isOptimizedDrawingEnabled(self) -> bool:
        """public boolean javax.swing.JComponent.isOptimizedDrawingEnabled()"""
        return bool._wrap(super(JComponent, self).isOptimizedDrawingEnabled())

    @override
    @overload
    def isValidateRoot(self) -> bool:
        """public boolean javax.swing.JComponent.isValidateRoot()"""
        return bool._wrap(super(JComponent, self).isValidateRoot())

    @overload
    def prepareImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @override
    @overload
    def setHasAdvanced(self, arg0: bool):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setHasAdvanced(boolean)"""
        super(_EditorPanel, self).setHasAdvanced(_boolean.valueOf(arg0))

    @override
    @overload
    def setForeground(self, arg0: 'Color'):
        """public void javax.swing.JComponent.setForeground(java.awt.Color)"""
        super(_JComponent, self).setForeground(arg0)

    @overload
    def mouseDrag(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDrag(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDrag(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def isOpaque(self) -> bool:
        """public boolean javax.swing.JComponent.isOpaque()"""
        return bool._wrap(super(JComponent, self).isOpaque())

    @overload
    def createVolatileImage(self, arg0: int, arg1: int, arg2: 'ImageCapabilities') -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int,java.awt.ImageCapabilities) throws java.awt.AWTException"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1), arg2))

    @override
    @overload
    def bounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.bounds()"""
        return 'Rectangle'._wrap(super(Component, self).bounds())

    @override
    @overload
    def update(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.update(java.awt.Graphics)"""
        super(_JComponent, self).update(arg0)

    @override
    @overload
    def add(self, arg0: 'PopupMenu'):
        """public void java.awt.Component.add(java.awt.PopupMenu)"""
        super(_Component, self).add(arg0)

    @override
    @overload
    def getToolTipText(self) -> str:
        """public java.lang.String javax.swing.JComponent.getToolTipText()"""
        return str._wrap(super(JComponent, self).getToolTipText())

    @override
    @overload
    def isVisible(self) -> bool:
        """public boolean java.awt.Component.isVisible()"""
        return bool._wrap(super(Component, self).isVisible())

    @override
    @overload
    def setDropTarget(self, arg0: 'DropTarget'):
        """public synchronized void java.awt.Component.setDropTarget(java.awt.dnd.DropTarget)"""
        super(_Component, self).setDropTarget(arg0)

    @override
    @overload
    def getLocationOnScreen(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocationOnScreen()"""
        return 'Point'._wrap(super(Component, self).getLocationOnScreen())

    @override
    @overload
    def getY(self) -> int:
        """public int javax.swing.JComponent.getY()"""
        return int._wrap(super(JComponent, self).getY())

    @overload
    def getComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def isMaximumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMaximumSizeSet()"""
        return bool._wrap(super(Component, self).isMaximumSizeSet())

    @override
    @overload
    def setAlignmentY(self, arg0: float):
        """public void javax.swing.JComponent.setAlignmentY(float)"""
        super(_JComponent, self).setAlignmentY(_float.valueOf(arg0))

    @override
    @overload
    def getRegisteredKeyStrokes(self) -> List['KeyStroke']:
        """public javax.swing.KeyStroke[] javax.swing.JComponent.getRegisteredKeyStrokes()"""
        return List['KeyStroke']._wrap(super(JComponent, self).getRegisteredKeyStrokes())

    @override
    @overload
    def isFocusable(self) -> bool:
        """public boolean java.awt.Component.isFocusable()"""
        return bool._wrap(super(Component, self).isFocusable())

    @override
    @overload
    def isFocusTraversalPolicyProvider(self) -> bool:
        """public final boolean java.awt.Container.isFocusTraversalPolicyProvider()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicyProvider())

    @override
    @overload
    def getMouseListeners(self) -> List['MouseListener']:
        """public synchronized java.awt.event.MouseListener[] java.awt.Component.getMouseListeners()"""
        return List['MouseListener']._wrap(super(Component, self).getMouseListeners())

    @overload
    def setMultipleSelectionAllowed(self, arg0: bool):
        """public void com.badlogic.gdx.tools.flame.TemplatePickerPanel.setMultipleSelectionAllowed(boolean)"""
        super(_TemplatePickerPanel, self).setMultipleSelectionAllowed(_boolean.valueOf(arg0))

    @override
    @overload
    def registerKeyboardAction(self, arg0: 'ActionListener', arg1: 'KeyStroke', arg2: int):
        """public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,javax.swing.KeyStroke,int)"""
        super(_JComponent, self).registerKeyboardAction(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def transferFocusUpCycle(self):
        """public void java.awt.Component.transferFocusUpCycle()"""
        super(Component, self).transferFocusUpCycle()

    @override
    @overload
    def removeKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.removeKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).removeKeyListener(arg0)

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: str, arg2: str):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,char,char)"""
        super(_JComponent, self).firePropertyChange(arg0, _char.valueOf(arg1), _char.valueOf(arg2))

    @override
    @overload
    def getMouseMotionListeners(self) -> List['MouseMotionListener']:
        """public synchronized java.awt.event.MouseMotionListener[] java.awt.Component.getMouseMotionListeners()"""
        return List['MouseMotionListener']._wrap(super(Component, self).getMouseMotionListeners())

    @override
    @overload
    def getAutoscrolls(self) -> bool:
        """public boolean javax.swing.JComponent.getAutoscrolls()"""
        return bool._wrap(super(JComponent, self).getAutoscrolls())

    @override
    @overload
    def addContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.addContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).addContainerListener(arg0)

    @override
    @overload
    def isFocusTraversable(self) -> bool:
        """public boolean java.awt.Component.isFocusTraversable()"""
        return bool._wrap(super(Component, self).isFocusTraversable())

    @overload
    def mouseExit(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseExit(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseExit(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def __init__(self, arg0: 'FlameMain', arg1: 'Array', arg2: 'Listener', arg3: 'Class', arg4: 'LoaderButton', arg5: bool, arg6: bool):
        """public com.badlogic.gdx.tools.flame.TemplatePickerPanel(com.badlogic.gdx.tools.flame.FlameMain,com.badlogic.gdx.utils.Array<T>,com.badlogic.gdx.tools.flame.TemplatePickerPanel$Listener,java.lang.Class<T>,com.badlogic.gdx.tools.flame.LoaderButton<T>,boolean,boolean)"""
        val = _TemplatePickerPanel(arg0, arg1, arg2, arg3, arg4, _boolean.valueOf(arg5), _boolean.valueOf(arg6))
        self.__wrapper = val

    @overload
    def getBounds(self, arg0: 'Rectangle') -> 'Rectangle':
        """public java.awt.Rectangle javax.swing.JComponent.getBounds(java.awt.Rectangle)"""
        return 'Rectangle'._wrap(super(_JComponent, self).getBounds(arg0))

    @override
    @overload
    def setToolTipText(self, arg0: str):
        """public void javax.swing.JComponent.setToolTipText(java.lang.String)"""
        super(_JComponent, self).setToolTipText(arg0)

    @override
    @overload
    def setAutoscrolls(self, arg0: bool):
        """public void javax.swing.JComponent.setAutoscrolls(boolean)"""
        super(_JComponent, self).setAutoscrolls(_boolean.valueOf(arg0))

    @override
    @overload
    def setComponentPopupMenu(self, arg0: 'JPopupMenu'):
        """public void javax.swing.JComponent.setComponentPopupMenu(javax.swing.JPopupMenu)"""
        super(_JComponent, self).setComponentPopupMenu(arg0)

    @override
    @overload
    def setMixingCutoutShape(self, arg0: 'Shape'):
        """public void java.awt.Component.setMixingCutoutShape(java.awt.Shape)"""
        super(_Component, self).setMixingCutoutShape(arg0)

    @override
    @overload
    def getVisibleRect(self) -> 'Rectangle':
        """public java.awt.Rectangle javax.swing.JComponent.getVisibleRect()"""
        return 'Rectangle'._wrap(super(JComponent, self).getVisibleRect())

    @override
    @overload
    def requestFocus(self, arg0: 'Cause'):
        """public void java.awt.Component.requestFocus(java.awt.event.FocusEvent$Cause)"""
        super(_Component, self).requestFocus(arg0)

    @overload
    def createImage(self, arg0: int, arg1: int) -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(int,int)"""
        return 'Image'._wrap(super(_Component, self).createImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def onResourceLoaded(self, arg0: object):
        """public void com.badlogic.gdx.tools.flame.TemplatePickerPanel.onResourceLoaded(T)"""
        super(_TemplatePickerPanel, self).onResourceLoaded(arg0)

    @override
    @overload
    def putClientProperty(self, arg0: object, arg1: object):
        """public final void javax.swing.JComponent.putClientProperty(java.lang.Object,java.lang.Object)"""
        super(_JComponent, self).putClientProperty(arg0, arg1)

    @override
    @overload
    def getVetoableChangeListeners(self) -> List['VetoableChangeListener']:
        """public synchronized java.beans.VetoableChangeListener[] javax.swing.JComponent.getVetoableChangeListeners()"""
        return List['VetoableChangeListener']._wrap(super(JComponent, self).getVetoableChangeListeners())

    @override
    @overload
    def scrollRectToVisible(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.scrollRectToVisible(java.awt.Rectangle)"""
        super(_JComponent, self).scrollRectToVisible(arg0)

    @override
    @overload
    def getTopLevelAncestor(self) -> 'Container':
        """public java.awt.Container javax.swing.JComponent.getTopLevelAncestor()"""
        return 'Container'._wrap(super(JComponent, self).getTopLevelAncestor())

    @override
    @overload
    def isRequestFocusEnabled(self) -> bool:
        """public boolean javax.swing.JComponent.isRequestFocusEnabled()"""
        return bool._wrap(super(JComponent, self).isRequestFocusEnabled())

    @override
    @overload
    def getFocusListeners(self) -> List['FocusListener']:
        """public synchronized java.awt.event.FocusListener[] java.awt.Component.getFocusListeners()"""
        return List['FocusListener']._wrap(super(Component, self).getFocusListeners())

    @overload
    def setLoadedTemplates(self, arg0: 'Array'):
        """public void com.badlogic.gdx.tools.flame.TemplatePickerPanel.setLoadedTemplates(com.badlogic.gdx.utils.Array<T>)"""
        super(_TemplatePickerPanel, self).setLoadedTemplates(arg0)

    @override
    @overload
    def setLayout(self, arg0: 'LayoutManager'):
        """public void java.awt.Container.setLayout(java.awt.LayoutManager)"""
        super(_Container, self).setLayout(arg0)

    @overload
    def add(self, arg0: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0))

    @override
    @overload
    def getMouseWheelListeners(self) -> List['MouseWheelListener']:
        """public synchronized java.awt.event.MouseWheelListener[] java.awt.Component.getMouseWheelListeners()"""
        return List['MouseWheelListener']._wrap(super(Component, self).getMouseWheelListeners())

    @override
    @overload
    def reshape(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void javax.swing.JComponent.reshape(int,int,int,int)"""
        super(_JComponent, self).reshape(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def setTransferHandler(self, arg0: 'TransferHandler'):
        """public void javax.swing.JComponent.setTransferHandler(javax.swing.TransferHandler)"""
        super(_JComponent, self).setTransferHandler(arg0)

    @override
    @overload
    def getPreferredSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getPreferredSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getPreferredSize())

    @override
    @overload
    def setLocation(self, arg0: int, arg1: int):
        """public void java.awt.Component.setLocation(int,int)"""
        super(_Component, self).setLocation(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def removeInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.removeInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).removeInputMethodListener(arg0)

    @override
    @overload
    def setFocusable(self, arg0: bool):
        """public void java.awt.Component.setFocusable(boolean)"""
        super(_Component, self).setFocusable(_boolean.valueOf(arg0))

    @override
    @overload
    def paintComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.paintComponents(java.awt.Graphics)"""
        super(_Container, self).paintComponents(arg0)

    @override
    @overload
    def addFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.addFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).addFocusListener(arg0)

    @overload
    def prepareImage(self, arg0: 'Image', arg1: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, arg1))

    @override
    @overload
    def addKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.addKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).addKeyListener(arg0)

    @override
    @overload
    def resize(self, arg0: 'Dimension'):
        """public void java.awt.Component.resize(java.awt.Dimension)"""
        super(_Component, self).resize(arg0)

    @override
    @overload
    def setComponentZOrder(self, arg0: 'Component', arg1: int):
        """public void java.awt.Container.setComponentZOrder(java.awt.Component,int)"""
        super(_Container, self).setComponentZOrder(arg0, _int.valueOf(arg1))

    @override
    @overload
    def list(self):
        """public void java.awt.Component.list()"""
        super(Component, self).list()

    @overload
    def add(self, arg0: str, arg1: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.lang.String,java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, arg1))

    @override
    @overload
    def paintImmediately(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void javax.swing.JComponent.paintImmediately(int,int,int,int)"""
        super(_JComponent, self).paintImmediately(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def getMinimumSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getMinimumSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getMinimumSize())

    @override
    @overload
    def setEnabled(self, arg0: bool):
        """public void javax.swing.JComponent.setEnabled(boolean)"""
        super(_JComponent, self).setEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def hasFocus(self) -> bool:
        """public boolean java.awt.Component.hasFocus()"""
        return bool._wrap(super(Component, self).hasFocus())

    @overload
    def createVolatileImage(self, arg0: int, arg1: int) -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int)"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.removeHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).removeHierarchyListener(arg0)

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.awt.Component.toString()"""
        return str._wrap(super(Component, self).toString())

    @override
    @overload
    def addMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.addMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).addMouseListener(arg0)

    @override
    @overload
    def isFocusOwner(self) -> bool:
        """public boolean java.awt.Component.isFocusOwner()"""
        return bool._wrap(super(Component, self).isFocusOwner())

    @override
    @overload
    def getAccessibleContext(self) -> 'AccessibleContext':
        """public javax.accessibility.AccessibleContext javax.swing.JPanel.getAccessibleContext()"""
        return 'AccessibleContext'._wrap(super(JPanel, self).getAccessibleContext())

    @overload
    def __init__(self, arg0: 'FlameMain', arg1: 'Array', arg2: 'Listener', arg3: 'Class'):
        """public com.badlogic.gdx.tools.flame.TemplatePickerPanel(com.badlogic.gdx.tools.flame.FlameMain,com.badlogic.gdx.utils.Array<T>,com.badlogic.gdx.tools.flame.TemplatePickerPanel$Listener,java.lang.Class<T>)"""
        val = _TemplatePickerPanel(arg0, arg1, arg2, arg3)
        self.__wrapper = val

    @overload
    def postEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.postEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).postEvent(arg0))

    @overload
    def getLocation(self, arg0: 'Point') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getLocation(java.awt.Point)"""
        return 'Point'._wrap(super(_JComponent, self).getLocation(arg0))

    @overload
    def getBaseline(self, arg0: int, arg1: int) -> int:
        """public int javax.swing.JComponent.getBaseline(int,int)"""
        return int._wrap(super(_JComponent, self).getBaseline(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def findComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeNotify(self):
        """public void javax.swing.JComponent.removeNotify()"""
        super(JComponent, self).removeNotify()

    @override
    @overload
    def getForeground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getForeground()"""
        return 'Color'._wrap(super(Component, self).getForeground())

    @override
    @overload
    def show(self):
        """public void java.awt.Component.show()"""
        super(Component, self).show()

    @override
    @overload
    def isDoubleBuffered(self) -> bool:
        """public boolean javax.swing.JComponent.isDoubleBuffered()"""
        return bool._wrap(super(JComponent, self).isDoubleBuffered())

    @override
    @overload
    def setDescription(self, arg0: str):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setDescription(java.lang.String)"""
        super(_EditorPanel, self).setDescription(arg0)

    @override
    @overload
    def isFocusCycleRoot(self) -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot()"""
        return bool._wrap(super(Container, self).isFocusCycleRoot())

    @override
    @overload
    def addMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.addMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).addMouseWheelListener(arg0)

    @override
    @overload
    def hide(self):
        """public void javax.swing.JComponent.hide()"""
        super(JComponent, self).hide()

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def revalidate(self):
        """public void javax.swing.JComponent.revalidate()"""
        super(JComponent, self).revalidate()

    @override
    @overload
    def getActionMap(self) -> 'ActionMap':
        """public final javax.swing.ActionMap javax.swing.JComponent.getActionMap()"""
        return 'ActionMap'._wrap(super(JComponent, self).getActionMap())

    @override
    @overload
    def requestFocusInWindow(self) -> bool:
        """public boolean javax.swing.JComponent.requestFocusInWindow()"""
        return bool._wrap(super(JComponent, self).requestFocusInWindow())

    @overload
    def action(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.action(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).action(arg0, arg1))

    @override
    @overload
    def isManagingFocus(self) -> bool:
        """public boolean javax.swing.JComponent.isManagingFocus()"""
        return bool._wrap(super(JComponent, self).isManagingFocus())

    @override
    @overload
    def isLightweight(self) -> bool:
        """public boolean java.awt.Component.isLightweight()"""
        return bool._wrap(super(Component, self).isLightweight())

    @override
    @overload
    def setAlignmentX(self, arg0: float):
        """public void javax.swing.JComponent.setAlignmentX(float)"""
        super(_JComponent, self).setAlignmentX(_float.valueOf(arg0))

    @overload
    def getFocusTraversalKeys(self, arg0: int) -> 'Set':
        """public java.util.Set<java.awt.AWTKeyStroke> java.awt.Container.getFocusTraversalKeys(int)"""
        return 'Set'._wrap(super(_Container, self).getFocusTraversalKeys(_int.valueOf(arg0)))

    @override
    @overload
    def setFocusTraversalKeysEnabled(self, arg0: bool):
        """public void java.awt.Component.setFocusTraversalKeysEnabled(boolean)"""
        super(_Component, self).setFocusTraversalKeysEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def remove(self, arg0: 'Component'):
        """public void java.awt.Container.remove(java.awt.Component)"""
        super(_Container, self).remove(arg0)

    @overload
    def getInsets(self, arg0: 'Insets') -> 'Insets':
        """public java.awt.Insets javax.swing.JComponent.getInsets(java.awt.Insets)"""
        return 'Insets'._wrap(super(_JComponent, self).getInsets(arg0))

    @override
    @overload
    def insets(self) -> 'Insets':
        """public java.awt.Insets java.awt.Container.insets()"""
        return 'Insets'._wrap(super(Container, self).insets())

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int):
        """public void javax.swing.JComponent.repaint(long,int,int,int,int)"""
        super(_JComponent, self).repaint(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4))

    @override
    @overload
    def setFocusTraversalPolicy(self, arg0: 'FocusTraversalPolicy'):
        """public void java.awt.Container.setFocusTraversalPolicy(java.awt.FocusTraversalPolicy)"""
        super(_Container, self).setFocusTraversalPolicy(arg0)

    @overload
    def getSize(self, arg0: 'Dimension') -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getSize(java.awt.Dimension)"""
        return 'Dimension'._wrap(super(_JComponent, self).getSize(arg0))

    @override
    @overload
    def enable(self, arg0: bool):
        """public void java.awt.Component.enable(boolean)"""
        super(_Component, self).enable(_boolean.valueOf(arg0))

    @overload
    def getToolTipLocation(self, arg0: 'MouseEvent') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getToolTipLocation(java.awt.event.MouseEvent)"""
        return 'Point'._wrap(super(_JComponent, self).getToolTipLocation(arg0))

    @override
    @overload
    def addPropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Container.addPropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Container, self).addPropertyChangeListener(arg0)

    @overload
    def getComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(arg0))

    @override
    @overload
    def size(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.size()"""
        return 'Dimension'._wrap(super(Component, self).size())

    @override
    @overload
    def getVerifyInputWhenFocusTarget(self) -> bool:
        """public boolean javax.swing.JComponent.getVerifyInputWhenFocusTarget()"""
        return bool._wrap(super(JComponent, self).getVerifyInputWhenFocusTarget())

    @overload
    def mouseMove(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseMove(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseMove(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getActionForKeyStroke(self, arg0: 'KeyStroke') -> 'ActionListener':
        """public java.awt.event.ActionListener javax.swing.JComponent.getActionForKeyStroke(javax.swing.KeyStroke)"""
        return 'ActionListener'._wrap(super(_JComponent, self).getActionForKeyStroke(arg0))

    @overload
    def lostFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.lostFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).lostFocus(arg0, arg1))

    @override
    @overload
    def isMinimumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMinimumSizeSet()"""
        return bool._wrap(super(Component, self).isMinimumSizeSet())

    @override
    @overload
    def isForegroundSet(self) -> bool:
        """public boolean java.awt.Component.isForegroundSet()"""
        return bool._wrap(super(Component, self).isForegroundSet())

    @overload
    def getMousePosition(self, arg0: bool) -> 'Point':
        """public java.awt.Point java.awt.Container.getMousePosition(boolean) throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(_Container, self).getMousePosition(_boolean.valueOf(arg0)))

    @overload
    def getFontMetrics(self, arg0: 'Font') -> 'FontMetrics':
        """public java.awt.FontMetrics javax.swing.JComponent.getFontMetrics(java.awt.Font)"""
        return 'FontMetrics'._wrap(super(_JComponent, self).getFontMetrics(arg0))

    @overload
    def __init__(self, arg0: 'FlameMain', arg1: 'Array', arg2: 'Listener', arg3: 'Class', arg4: 'LoaderButton'):
        """public com.badlogic.gdx.tools.flame.TemplatePickerPanel(com.badlogic.gdx.tools.flame.FlameMain,com.badlogic.gdx.utils.Array<T>,com.badlogic.gdx.tools.flame.TemplatePickerPanel$Listener,java.lang.Class<T>,com.badlogic.gdx.tools.flame.LoaderButton<T>)"""
        val = _TemplatePickerPanel(arg0, arg1, arg2, arg3, arg4)
        self.__wrapper = val

    @overload
    def getListeners(self, arg0: 'Class') -> List['EventListener']:
        """public <T extends java.util.EventListener> T[] javax.swing.JComponent.getListeners(java.lang.Class<T>)"""
        return List['EventListener']._wrap(super(_JComponent, self).getListeners(arg0))

    @override
    @overload
    def getHierarchyBoundsListeners(self) -> List['HierarchyBoundsListener']:
        """public synchronized java.awt.event.HierarchyBoundsListener[] java.awt.Component.getHierarchyBoundsListeners()"""
        return List['HierarchyBoundsListener']._wrap(super(Component, self).getHierarchyBoundsListeners())

    @override
    @overload
    def minimumSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.minimumSize()"""
        return 'Dimension'._wrap(super(Container, self).minimumSize())

    @overload
    def handleEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.handleEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).handleEvent(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @override
    @overload
    def getComponentListeners(self) -> List['ComponentListener']:
        """public synchronized java.awt.event.ComponentListener[] java.awt.Component.getComponentListeners()"""
        return List['ComponentListener']._wrap(super(Component, self).getComponentListeners())

    @override
    @overload
    def computeVisibleRect(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.computeVisibleRect(java.awt.Rectangle)"""
        super(_JComponent, self).computeVisibleRect(arg0)

    @override
    @overload
    def deliverEvent(self, arg0: 'Event'):
        """public void java.awt.Container.deliverEvent(java.awt.Event)"""
        super(_Container, self).deliverEvent(arg0)

    @override
    @overload
    def addHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.addHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).addHierarchyBoundsListener(arg0)

    @override
    @overload
    def getAlignmentX(self) -> float:
        """public float javax.swing.JComponent.getAlignmentX()"""
        return float._wrap(super(JComponent, self).getAlignmentX())

    @overload
    def add(self, arg0: 'Component', arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component,int)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def repaint(self):
        """public void java.awt.Component.repaint()"""
        super(Component, self).repaint()

    @overload
    def gotFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.gotFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).gotFocus(arg0, arg1))

    @override
    @overload
    def createToolTip(self) -> 'JToolTip':
        """public javax.swing.JToolTip javax.swing.JComponent.createToolTip()"""
        return 'JToolTip'._wrap(super(JComponent, self).createToolTip())

    @override
    @overload
    def setEmbedded(self):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setEmbedded()"""
        super(EditorPanel, self).setEmbedded()

    @overload
    def getToolTipText(self, arg0: 'MouseEvent') -> str:
        """public java.lang.String javax.swing.JComponent.getToolTipText(java.awt.event.MouseEvent)"""
        return str._wrap(super(_JComponent, self).getToolTipText(arg0))

    @override
    @overload
    def printComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.printComponents(java.awt.Graphics)"""
        super(_Container, self).printComponents(arg0)

    @override
    @overload
    def getColorModel(self) -> 'ColorModel':
        """public java.awt.image.ColorModel java.awt.Component.getColorModel()"""
        return 'ColorModel'._wrap(super(Component, self).getColorModel())

    @override
    @overload
    def setFocusTraversalPolicyProvider(self, arg0: bool):
        """public final void java.awt.Container.setFocusTraversalPolicyProvider(boolean)"""
        super(_Container, self).setFocusTraversalPolicyProvider(_boolean.valueOf(arg0))

    @overload
    def getComponentZOrder(self, arg0: 'Component') -> int:
        """public int java.awt.Container.getComponentZOrder(java.awt.Component)"""
        return int._wrap(super(_Container, self).getComponentZOrder(arg0))

    @override
    @overload
    def getDebugGraphicsOptions(self) -> int:
        """public int javax.swing.JComponent.getDebugGraphicsOptions()"""
        return int._wrap(super(JComponent, self).getDebugGraphicsOptions())

    @overload
    def areFocusTraversalKeysSet(self, arg0: int) -> bool:
        """public boolean java.awt.Container.areFocusTraversalKeysSet(int)"""
        return bool._wrap(super(_Container, self).areFocusTraversalKeysSet(_int.valueOf(arg0)))

    @override
    @overload
    def getSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.getSize()"""
        return 'Dimension'._wrap(super(Component, self).getSize())

    @override
    @overload
    def repaint(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.repaint(java.awt.Rectangle)"""
        super(_JComponent, self).repaint(arg0)

    @overload
    def getClientProperty(self, arg0: object) -> object:
        """public final java.lang.Object javax.swing.JComponent.getClientProperty(java.lang.Object)"""
        return object._wrap(super(_JComponent, self).getClientProperty(arg0))

    @override
    @overload
    def unregisterKeyboardAction(self, arg0: 'KeyStroke'):
        """public void javax.swing.JComponent.unregisterKeyboardAction(javax.swing.KeyStroke)"""
        super(_JComponent, self).unregisterKeyboardAction(arg0)

    @overload
    def requestFocus(self, arg0: bool) -> bool:
        """public boolean javax.swing.JComponent.requestFocus(boolean)"""
        return bool._wrap(super(_JComponent, self).requestFocus(_boolean.valueOf(arg0)))

    @override
    @overload
    def setActionMap(self, arg0: 'ActionMap'):
        """public final void javax.swing.JComponent.setActionMap(javax.swing.ActionMap)"""
        super(_JComponent, self).setActionMap(arg0)

    @override
    @overload
    def getX(self) -> int:
        """public int javax.swing.JComponent.getX()"""
        return int._wrap(super(JComponent, self).getX())

    @overload
    def mouseEnter(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseEnter(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseEnter(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def updateUI(self):
        """public void javax.swing.JPanel.updateUI()"""
        super(JPanel, self).updateUI()

    @override
    @overload
    def getToolkit(self) -> 'Toolkit':
        """public java.awt.Toolkit java.awt.Component.getToolkit()"""
        return 'Toolkit'._wrap(super(Component, self).getToolkit())

    @override
    @overload
    def isCursorSet(self) -> bool:
        """public boolean java.awt.Component.isCursorSet()"""
        return bool._wrap(super(Component, self).isCursorSet())

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object, arg2: int):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object,int)"""
        super(_Container, self).add(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def setPreferredSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setPreferredSize(java.awt.Dimension)"""
        super(_JComponent, self).setPreferredSize(arg0)

    @override
    @overload
    def setBounds(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.setBounds(int,int,int,int)"""
        super(_Component, self).setBounds(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def isFocusTraversalPolicySet(self) -> bool:
        """public boolean java.awt.Container.isFocusTraversalPolicySet()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicySet())

    @override
    @overload
    def requestFocus(self):
        """public void javax.swing.JComponent.requestFocus()"""
        super(JComponent, self).requestFocus()

    @override
    @overload
    def getAncestorListeners(self) -> List['AncestorListener']:
        """public javax.swing.event.AncestorListener[] javax.swing.JComponent.getAncestorListeners()"""
        return List['AncestorListener']._wrap(super(JComponent, self).getAncestorListeners())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool._wrap(super(_object, self).equals(arg0))

    @overload
    def getInputMap(self, arg0: int) -> 'InputMap':
        """public final javax.swing.InputMap javax.swing.JComponent.getInputMap(int)"""
        return 'InputMap'._wrap(super(_JComponent, self).getInputMap(_int.valueOf(arg0)))

    @override
    @overload
    def isEnabled(self) -> bool:
        """public boolean java.awt.Component.isEnabled()"""
        return bool._wrap(super(Component, self).isEnabled())

    @override
    @overload
    def move(self, arg0: int, arg1: int):
        """public void java.awt.Component.move(int,int)"""
        super(_Component, self).move(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def addMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.addMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).addMouseMotionListener(arg0)

    @override
    @overload
    def getIgnoreRepaint(self) -> bool:
        """public boolean java.awt.Component.getIgnoreRepaint()"""
        return bool._wrap(super(Component, self).getIgnoreRepaint())

    @overload
    def isFocusCycleRoot(self, arg0: 'Container') -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot(java.awt.Container)"""
        return bool._wrap(super(_Container, self).isFocusCycleRoot(arg0))

    @override
    @overload
    def getGraphics(self) -> 'Graphics':
        """public java.awt.Graphics javax.swing.JComponent.getGraphics()"""
        return 'Graphics'._wrap(super(JComponent, self).getGraphics())

    @override
    @overload
    def setLocale(self, arg0: 'Locale'):
        """public void java.awt.Component.setLocale(java.util.Locale)"""
        super(_Component, self).setLocale(arg0)

    @override
    @overload
    def paintAll(self, arg0: 'Graphics'):
        """public void java.awt.Component.paintAll(java.awt.Graphics)"""
        super(_Component, self).paintAll(arg0)

    @override
    @overload
    def setDoubleBuffered(self, arg0: bool):
        """public void javax.swing.JComponent.setDoubleBuffered(boolean)"""
        super(_JComponent, self).setDoubleBuffered(_boolean.valueOf(arg0))

    @override
    @overload
    def isPreferredSizeSet(self) -> bool:
        """public boolean java.awt.Component.isPreferredSizeSet()"""
        return bool._wrap(super(Component, self).isPreferredSizeSet())

    @override
    @overload
    def addInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.addInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).addInputMethodListener(arg0)

    @override
    @overload
    def removeMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.removeMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).removeMouseWheelListener(arg0)

    @override
    @overload
    def getInputMap(self) -> 'InputMap':
        """public final javax.swing.InputMap javax.swing.JComponent.getInputMap()"""
        return 'InputMap'._wrap(super(JComponent, self).getInputMap())

    @override
    @overload
    def setVisible(self, arg0: bool):
        """public void javax.swing.JComponent.setVisible(boolean)"""
        super(_JComponent, self).setVisible(_boolean.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,byte,byte)"""
        super(_Component, self).firePropertyChange(arg0, _byte.valueOf(arg1), _byte.valueOf(arg2))

    @override
    @overload
    def getUIClassID(self) -> str:
        """public java.lang.String javax.swing.JPanel.getUIClassID()"""
        return str._wrap(super(JPanel, self).getUIClassID())

    @override
    @overload
    def transferFocusDownCycle(self):
        """public void java.awt.Container.transferFocusDownCycle()"""
        super(Container, self).transferFocusDownCycle()

    @override
    @overload
    def getNextFocusableComponent(self) -> 'Component':
        """public java.awt.Component javax.swing.JComponent.getNextFocusableComponent()"""
        return 'Component'._wrap(super(JComponent, self).getNextFocusableComponent())

    @override
    @overload
    def getUI(self) -> 'PanelUI':
        """public javax.swing.plaf.PanelUI javax.swing.JPanel.getUI()"""
        return 'PanelUI'._wrap(super(JPanel, self).getUI())

    @override
    @overload
    def setBounds(self, arg0: 'Rectangle'):
        """public void java.awt.Component.setBounds(java.awt.Rectangle)"""
        super(_Component, self).setBounds(arg0)

    @override
    @overload
    def repaint(self, arg0: int):
        """public void java.awt.Component.repaint(long)"""
        super(_Component, self).repaint(_long.valueOf(arg0))

    @override
    @overload
    def removeHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.removeHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).removeHierarchyBoundsListener(arg0)

    @override
    @overload
    def getComponentPopupMenu(self) -> 'JPopupMenu':
        """public javax.swing.JPopupMenu javax.swing.JComponent.getComponentPopupMenu()"""
        return 'JPopupMenu'._wrap(super(JComponent, self).getComponentPopupMenu())

    @override
    @overload
    def getMousePosition(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getMousePosition() throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(Component, self).getMousePosition())

    @override
    @overload
    def getComponentCount(self) -> int:
        """public int java.awt.Container.getComponentCount()"""
        return int._wrap(super(Container, self).getComponentCount())

    @override
    @overload
    def getInputMethodRequests(self) -> 'InputMethodRequests':
        """public java.awt.im.InputMethodRequests java.awt.Component.getInputMethodRequests()"""
        return 'InputMethodRequests'._wrap(super(Component, self).getInputMethodRequests())

    @override
    @overload
    def setMaximumSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setMaximumSize(java.awt.Dimension)"""
        super(_JComponent, self).setMaximumSize(arg0)

    @override
    @overload
    def setRequestFocusEnabled(self, arg0: bool):
        """public void javax.swing.JComponent.setRequestFocusEnabled(boolean)"""
        super(_JComponent, self).setRequestFocusEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def setFocusTraversalKeys(self, arg0: int, arg1: 'Set'):
        """public void javax.swing.JComponent.setFocusTraversalKeys(int,java.util.Set<? extends java.awt.AWTKeyStroke>)"""
        super(_JComponent, self).setFocusTraversalKeys(_int.valueOf(arg0), arg1)

    @overload
    def inside(self, arg0: int, arg1: int) -> bool:
        """public boolean java.awt.Component.inside(int,int)"""
        return bool._wrap(super(_Component, self).inside(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def requestDefaultFocus(self) -> bool:
        """public boolean javax.swing.JComponent.requestDefaultFocus()"""
        return bool._wrap(super(JComponent, self).requestDefaultFocus())

    @override
    @overload
    def disable(self):
        """public void javax.swing.JComponent.disable()"""
        super(JComponent, self).disable()

    @override
    @overload
    def showContent(self, arg0: bool):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.showContent(boolean)"""
        super(_EditorPanel, self).showContent(_boolean.valueOf(arg0))

    @override
    @overload
    def enableInputMethods(self, arg0: bool):
        """public void java.awt.Component.enableInputMethods(boolean)"""
        super(_Component, self).enableInputMethods(_boolean.valueOf(arg0))

    @override
    @overload
    def layout(self):
        """public void java.awt.Container.layout()"""
        super(Container, self).layout()

    @override
    @overload
    def getInputMethodListeners(self) -> List['InputMethodListener']:
        """public synchronized java.awt.event.InputMethodListener[] java.awt.Component.getInputMethodListeners()"""
        return List['InputMethodListener']._wrap(super(Component, self).getInputMethodListeners())

    @override
    @overload
    def paint(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.paint(java.awt.Graphics)"""
        super(_JComponent, self).paint(arg0)

    @override
    @overload
    def transferFocus(self):
        """public void java.awt.Component.transferFocus()"""
        super(Component, self).transferFocus()

    @override
    @overload
    def removeComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.removeComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).removeComponentListener(arg0)

    @override
    @overload
    def getCursor(self) -> 'Cursor':
        """public java.awt.Cursor java.awt.Component.getCursor()"""
        return 'Cursor'._wrap(super(Component, self).getCursor())

    @override
    @overload
    def setMinimumSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setMinimumSize(java.awt.Dimension)"""
        super(_JComponent, self).setMinimumSize(arg0)

    @override
    @overload
    def getAdvancedPanel(self) -> 'JPanel':
        """public javax.swing.JPanel com.badlogic.gdx.tools.flame.EditorPanel.getAdvancedPanel()"""
        return 'JPanel'._wrap(super(EditorPanel, self).getAdvancedPanel())

    @override
    @overload
    def getContainerListeners(self) -> List['ContainerListener']:
        """public synchronized java.awt.event.ContainerListener[] java.awt.Container.getContainerListeners()"""
        return List['ContainerListener']._wrap(super(Container, self).getContainerListeners())

    @override
    @overload
    def setLocation(self, arg0: 'Point'):
        """public void java.awt.Component.setLocation(java.awt.Point)"""
        super(_Component, self).setLocation(arg0)

    @override
    @overload
    def setSize(self, arg0: 'Dimension'):
        """public void java.awt.Component.setSize(java.awt.Dimension)"""
        super(_Component, self).setSize(arg0)

    @override
    @overload
    def removeAll(self):
        """public void java.awt.Container.removeAll()"""
        super(Container, self).removeAll()

    @overload
    def getPopupLocation(self, arg0: 'MouseEvent') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getPopupLocation(java.awt.event.MouseEvent)"""
        return 'Point'._wrap(super(_JComponent, self).getPopupLocation(arg0))

    @overload
    def isAncestorOf(self, arg0: 'Component') -> bool:
        """public boolean java.awt.Container.isAncestorOf(java.awt.Component)"""
        return bool._wrap(super(_Container, self).isAncestorOf(arg0))

    @override
    @overload
    def setOpaque(self, arg0: bool):
        """public void javax.swing.JComponent.setOpaque(boolean)"""
        super(_JComponent, self).setOpaque(_boolean.valueOf(arg0))

    @overload
    def contains(self, arg0: int, arg1: int) -> bool:
        """public boolean javax.swing.JComponent.contains(int,int)"""
        return bool._wrap(super(_JComponent, self).contains(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def setCursor(self, arg0: 'Cursor'):
        """public void java.awt.Component.setCursor(java.awt.Cursor)"""
        super(_Component, self).setCursor(arg0)

    @override
    @overload
    def validate(self):
        """public void java.awt.Container.validate()"""
        super(Container, self).validate()

    @override
    @overload
    def getMaximumSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getMaximumSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getMaximumSize())

    @override
    @overload
    def getBackground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getBackground()"""
        return 'Color'._wrap(super(Component, self).getBackground())

    @overload
    def createImage(self, arg0: 'ImageProducer') -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(java.awt.image.ImageProducer)"""
        return 'Image'._wrap(super(_Component, self).createImage(arg0))

    @override
    @overload
    def setVerifyInputWhenFocusTarget(self, arg0: bool):
        """public void javax.swing.JComponent.setVerifyInputWhenFocusTarget(boolean)"""
        super(_JComponent, self).setVerifyInputWhenFocusTarget(_boolean.valueOf(arg0))

    @override
    @overload
    def removePropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0, arg1)

    @override
    @overload
    def countComponents(self) -> int:
        """public int java.awt.Container.countComponents()"""
        return int._wrap(super(Container, self).countComponents()) 
 
 
# CLASS: com.badlogic.gdx.tools.flame.EditorPanel
import javax.accessibility.AccessibleContext as AccessibleContext
import javax.swing.JToolTip as JToolTip
import java.awt.event.HierarchyBoundsListener as HierarchyBoundsListener
import java.awt.event.ActionListener as _ActionListener
_ActionListener = _ActionListener
import java.awt.ComponentOrientation as _ComponentOrientation
_ComponentOrientation = _ComponentOrientation
import java.awt.image.ImageProducer as ImageProducer
import java.awt.GraphicsConfiguration as GraphicsConfiguration
import java.awt.Graphics as _Graphics
_Graphics = _Graphics
import javax.swing.JToolTip as _JToolTip
_JToolTip = _JToolTip
import java.awt.Container as _Container
_Container = _Container
import java.awt.MenuComponent as MenuComponent
import java.awt.im.InputMethodRequests as _InputMethodRequests
_InputMethodRequests = _InputMethodRequests
import java.awt.FocusTraversalPolicy as _FocusTraversalPolicy
_FocusTraversalPolicy = _FocusTraversalPolicy
import java.lang.Byte as _byte
import java.awt.Dimension as Dimension
import java.awt.Font as _Font
_Font = _Font
import javax.swing.plaf.PanelUI as _PanelUI
_PanelUI = _PanelUI
import java.awt.event.ContainerListener as ContainerListener
import javax.swing.event.AncestorListener as AncestorListener
import java.awt.AWTEvent as AWTEvent
import javax.swing.JPanel as JPanel
import java.awt.image.ColorModel as _ColorModel
_ColorModel = _ColorModel
import java.lang.Object as _object
import java.awt.ComponentOrientation as ComponentOrientation
import java.awt.im.InputContext as _InputContext
_InputContext = _InputContext
from builtins import float
import java.awt.event.HierarchyListener as HierarchyListener
import java.awt.event.InputMethodListener as InputMethodListener
from typing import List
import java.awt.event.MouseWheelListener as _MouseWheelListener
_MouseWheelListener = _MouseWheelListener
import java.awt.event.KeyListener as KeyListener
import java.awt.Component as Component
from builtins import int
import java.awt.LayoutManager as LayoutManager
import java.awt.FontMetrics as _FontMetrics
_FontMetrics = _FontMetrics
import java.awt.Container as Container
from builtins import type
import java.awt.image.VolatileImage as _VolatileImage
_VolatileImage = _VolatileImage
import java.awt.Shape as Shape
import com.badlogic.gdx.tools.flame.EditorPanel as _EditorPanel
_EditorPanel = _EditorPanel
import java.awt.Rectangle as Rectangle
import java.awt.event.ContainerListener as _ContainerListener
_ContainerListener = _ContainerListener
import java.awt.event.HierarchyListener as _HierarchyListener
_HierarchyListener = _HierarchyListener
import java.lang.String as _string
import javax.swing.InputVerifier as _InputVerifier
_InputVerifier = _InputVerifier
import java.awt.Insets as _Insets
_Insets = _Insets
import javax.swing.border.Border as _Border
_Border = _Border
import java.awt.event.ComponentListener as _ComponentListener
_ComponentListener = _ComponentListener
import javax.swing.ActionMap as ActionMap
import java.beans.VetoableChangeListener as VetoableChangeListener
import java.awt.event.ComponentListener as ComponentListener
import javax.swing.KeyStroke as KeyStroke
import java.beans.VetoableChangeListener as _VetoableChangeListener
_VetoableChangeListener = _VetoableChangeListener
from builtins import object
import java.awt.event.KeyListener as _KeyListener
_KeyListener = _KeyListener
import java.awt.Component.BaselineResizeBehavior as BaselineResizeBehavior
import java.awt.Component as _Component_BaselineResizeBehavior
_BaselineResizeBehavior = _Component_BaselineResizeBehavior.BaselineResizeBehavior
import java.awt.Cursor as _Cursor
_Cursor = _Cursor
import java.awt.im.InputMethodRequests as InputMethodRequests
import java.lang.Long as _long
import javax.swing.JPanel as _JPanel
_JPanel = _JPanel
import java.awt.event.FocusListener as _FocusListener
_FocusListener = _FocusListener
import java.lang.Character as _char
import javax.swing.TransferHandler as TransferHandler
import java.awt.event.FocusEvent.Cause as Cause
import javax.swing.JComponent as JComponent
import javax.accessibility.AccessibleContext as _AccessibleContext
_AccessibleContext = _AccessibleContext
import java.awt.event.MouseWheelListener as MouseWheelListener
import java.util.Set as _Set
_Set = _Set
import java.awt.image.ColorModel as ColorModel
import java.lang.Boolean as _boolean
import java.awt.event.MouseMotionListener as MouseMotionListener
import java.util.EventListener as EventListener
import java.awt.Insets as Insets
import javax.swing.KeyStroke as _KeyStroke
_KeyStroke = _KeyStroke
import java.awt.GraphicsConfiguration as _GraphicsConfiguration
_GraphicsConfiguration = _GraphicsConfiguration
import java.awt.dnd.DropTarget as _DropTarget
_DropTarget = _DropTarget
from builtins import bool
import java.beans.PropertyChangeListener as _PropertyChangeListener
_PropertyChangeListener = _PropertyChangeListener
import java.awt.LayoutManager as _LayoutManager
_LayoutManager = _LayoutManager
import java.awt.PopupMenu as PopupMenu
import java.util.EventListener as _EventListener
_EventListener = _EventListener
import java.awt.im.InputContext as InputContext
import java.awt.Component as _Component
_Component = _Component
import java.awt.Font as Font
import java.awt.image.VolatileImage as VolatileImage
import java.awt.dnd.DropTarget as DropTarget
import java.lang.String as _String
_String = _String
import java.lang.Float as _float
import java.awt.Cursor as Cursor
import java.awt.event.MouseListener as _MouseListener
_MouseListener = _MouseListener
import java.awt.Toolkit as _Toolkit
_Toolkit = _Toolkit
import java.io.PrintStream as PrintStream
import javax.swing.JRootPane as _JRootPane
_JRootPane = _JRootPane
import java.awt.Dimension as _Dimension
_Dimension = _Dimension
import java.awt.event.ActionListener as ActionListener
import java.awt.event.MouseEvent as MouseEvent
import java.awt.Color as _Color
_Color = _Color
import javax.swing.JPopupMenu as _JPopupMenu
_JPopupMenu = _JPopupMenu
import javax.swing.InputMap as _InputMap
_InputMap = _InputMap
import java.awt.event.MouseListener as MouseListener
import java.lang.Class as _Class
_Class = _Class
import java.util.Locale as Locale
import java.lang.Double as _double
import javax.swing.plaf.PanelUI as PanelUI
import java.awt.Point as _Point
_Point = _Point
import java.lang.Object as _Object
_Object = _Object
import java.beans.PropertyChangeListener as PropertyChangeListener
import javax.swing.border.Border as Border
import javax.swing.JComponent as _JComponent
_JComponent = _JComponent
import javax.swing.InputVerifier as InputVerifier
import java.io.PrintWriter as PrintWriter
import java.awt.Point as Point
import javax.swing.event.AncestorListener as _AncestorListener
_AncestorListener = _AncestorListener
import java.lang.Short as _short
import java.awt.Toolkit as Toolkit
import java.awt.event.HierarchyBoundsListener as _HierarchyBoundsListener
_HierarchyBoundsListener = _HierarchyBoundsListener
import javax.swing.TransferHandler as _TransferHandler
_TransferHandler = _TransferHandler
import javax.swing.InputMap as InputMap
import java.awt.Rectangle as _Rectangle
_Rectangle = _Rectangle
import javax.swing.JRootPane as JRootPane
import java.awt.Event as Event
import java.awt.event.FocusListener as FocusListener
import java.awt.image.ImageObserver as ImageObserver
from builtins import str
from pyquantum_helper import override
import javax.swing.ActionMap as _ActionMap
_ActionMap = _ActionMap
import java.awt.FocusTraversalPolicy as FocusTraversalPolicy
import java.awt.event.MouseMotionListener as _MouseMotionListener
_MouseMotionListener = _MouseMotionListener
import java.awt.event.InputMethodListener as _InputMethodListener
_InputMethodListener = _InputMethodListener
import javax.swing.JPopupMenu as JPopupMenu
import java.util.Set as Set
import java.lang.Integer as _int
import java.awt.Image as _Image
_Image = _Image
import java.awt.FontMetrics as FontMetrics
import java.awt.Color as Color
import java.awt.Image as Image
import java.awt.Graphics as Graphics
import java.awt.ImageCapabilities as ImageCapabilities
import java.util.Locale as _Locale
_Locale = _Locale
 
class EditorPanel():
    """com.badlogic.gdx.tools.flame.EditorPanel"""
 
    @staticmethod
    def _wrap(java_value: _EditorPanel) -> 'EditorPanel':
        return EditorPanel(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _EditorPanel):
        """
        Dynamic initializer for EditorPanel.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_EditorPanel__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_EditorPanel__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def removeVetoableChangeListener(self, arg0: 'VetoableChangeListener'):
        """public synchronized void javax.swing.JComponent.removeVetoableChangeListener(java.beans.VetoableChangeListener)"""
        super(_JComponent, self).removeVetoableChangeListener(arg0)

    @override
    @overload
    def getComponents(self) -> List['Component']:
        """public java.awt.Component[] java.awt.Container.getComponents()"""
        return List['Component']._wrap(super(Container, self).getComponents())

    @override
    @overload
    def setDebugGraphicsOptions(self, arg0: int):
        """public void javax.swing.JComponent.setDebugGraphicsOptions(int)"""
        super(_JComponent, self).setDebugGraphicsOptions(_int.valueOf(arg0))

    @override
    @overload
    def isValid(self) -> bool:
        """public boolean java.awt.Component.isValid()"""
        return bool._wrap(super(Component, self).isValid())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def getDefaultLocale() -> 'Locale':
        """public static java.util.Locale javax.swing.JComponent.getDefaultLocale()"""
        return Locale._wrap(_JComponent.getDefaultLocale())

    @override
    @overload
    def getInputVerifier(self) -> 'InputVerifier':
        """public javax.swing.InputVerifier javax.swing.JComponent.getInputVerifier()"""
        return 'InputVerifier'._wrap(super(JComponent, self).getInputVerifier())

    @override
    @overload
    def list(self, arg0: 'PrintStream', arg1: int):
        """public void java.awt.Container.list(java.io.PrintStream,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @override
    @overload
    def setUI(self, arg0: 'PanelUI'):
        """public void javax.swing.JPanel.setUI(javax.swing.plaf.PanelUI)"""
        super(_JPanel, self).setUI(arg0)

    @override
    @overload
    def getFocusTraversalPolicy(self) -> 'FocusTraversalPolicy':
        """public java.awt.FocusTraversalPolicy java.awt.Container.getFocusTraversalPolicy()"""
        return 'FocusTraversalPolicy'._wrap(super(Container, self).getFocusTraversalPolicy())

    @override
    @overload
    def getParent(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getParent()"""
        return 'Container'._wrap(super(Component, self).getParent())

    @override
    @overload
    def paintImmediately(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.paintImmediately(java.awt.Rectangle)"""
        super(_JComponent, self).paintImmediately(arg0)

    @staticmethod
    @overload
    def setDefaultLocale(arg0: 'Locale'):
        """public static void javax.swing.JComponent.setDefaultLocale(java.util.Locale)"""
        _JComponent.setDefaultLocale(arg0)

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,float,float)"""
        super(_Component, self).firePropertyChange(arg0, _float.valueOf(arg1), _float.valueOf(arg2))

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object)"""
        super(_Container, self).add(arg0, arg1)

    @override
    @overload
    def getLocale(self) -> 'Locale':
        """public java.util.Locale java.awt.Component.getLocale()"""
        return 'Locale'._wrap(super(Component, self).getLocale())

    @override
    @overload
    def setInheritsPopupMenu(self, arg0: bool):
        """public void javax.swing.JComponent.setInheritsPopupMenu(boolean)"""
        super(_JComponent, self).setInheritsPopupMenu(_boolean.valueOf(arg0))

    @overload
    def setEmbedded(self):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setEmbedded()"""
        super(EditorPanel, self).setEmbedded()

    @override
    @overload
    def getHierarchyListeners(self) -> List['HierarchyListener']:
        """public synchronized java.awt.event.HierarchyListener[] java.awt.Component.getHierarchyListeners()"""
        return List['HierarchyListener']._wrap(super(Component, self).getHierarchyListeners())

    @override
    @overload
    def nextFocus(self):
        """public void java.awt.Component.nextFocus()"""
        super(Component, self).nextFocus()

    @override
    @overload
    def isPaintingTile(self) -> bool:
        """public boolean javax.swing.JComponent.isPaintingTile()"""
        return bool._wrap(super(JComponent, self).isPaintingTile())

    @override
    @overload
    def isDisplayable(self) -> bool:
        """public boolean java.awt.Component.isDisplayable()"""
        return bool._wrap(super(Component, self).isDisplayable())

    @override
    @overload
    def getBounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.getBounds()"""
        return 'Rectangle'._wrap(super(Component, self).getBounds())

    @override
    @overload
    def removeMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.removeMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).removeMouseMotionListener(arg0)

    @override
    @overload
    def isShowing(self) -> bool:
        """public boolean java.awt.Component.isShowing()"""
        return bool._wrap(super(Component, self).isShowing())

    @override
    @overload
    def getDropTarget(self) -> 'DropTarget':
        """public synchronized java.awt.dnd.DropTarget java.awt.Component.getDropTarget()"""
        return 'DropTarget'._wrap(super(Component, self).getDropTarget())

    @override
    @overload
    def isFontSet(self) -> bool:
        """public boolean java.awt.Component.isFontSet()"""
        return bool._wrap(super(Component, self).isFontSet())

    @overload
    def mouseUp(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseUp(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseUp(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def setIgnoreRepaint(self, arg0: bool):
        """public void java.awt.Component.setIgnoreRepaint(boolean)"""
        super(_Component, self).setIgnoreRepaint(_boolean.valueOf(arg0))

    @override
    @overload
    def getPropertyChangeListeners(self) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners()"""
        return List['PropertyChangeListener']._wrap(super(Component, self).getPropertyChangeListeners())

    @override
    @overload
    def isBackgroundSet(self) -> bool:
        """public boolean java.awt.Component.isBackgroundSet()"""
        return bool._wrap(super(Component, self).isBackgroundSet())

    @override
    @overload
    def getLocation(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocation()"""
        return 'Point'._wrap(super(Component, self).getLocation())

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int._wrap(super(object, self).hashCode())

    @override
    @overload
    def location(self) -> 'Point':
        """public java.awt.Point java.awt.Component.location()"""
        return 'Point'._wrap(super(Component, self).location())

    @override
    @overload
    def getComponentOrientation(self) -> 'ComponentOrientation':
        """public java.awt.ComponentOrientation java.awt.Component.getComponentOrientation()"""
        return 'ComponentOrientation'._wrap(super(Component, self).getComponentOrientation())

    @override
    @overload
    def addHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.addHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).addHierarchyListener(arg0)

    @override
    @overload
    def getInheritsPopupMenu(self) -> bool:
        """public boolean javax.swing.JComponent.getInheritsPopupMenu()"""
        return bool._wrap(super(JComponent, self).getInheritsPopupMenu())

    @override
    @overload
    def setComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Component.setComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Component, self).setComponentOrientation(arg0)

    @override
    @overload
    def getFocusCycleRootAncestor(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getFocusCycleRootAncestor()"""
        return 'Container'._wrap(super(Component, self).getFocusCycleRootAncestor())

    @override
    @overload
    def show(self, arg0: bool):
        """public void java.awt.Component.show(boolean)"""
        super(_Component, self).show(_boolean.valueOf(arg0))

    @staticmethod
    @overload
    def addContent(arg0: 'JPanel', arg1: int, arg2: int, arg3: 'JComponent', arg4: bool, arg5: int, arg6: int, arg7: float, arg8: float):
        """public static void com.badlogic.gdx.tools.flame.EditorPanel.addContent(javax.swing.JPanel,int,int,javax.swing.JComponent,boolean,int,int,float,float)"""
        _EditorPanel.addContent(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3, _boolean.valueOf(arg4), _int.valueOf(arg5), _int.valueOf(arg6), _float.valueOf(arg7), _float.valueOf(arg8))

    @override
    @overload
    def grabFocus(self):
        """public void javax.swing.JComponent.grabFocus()"""
        super(JComponent, self).grabFocus()

    @overload
    def locate(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.locate(int,int)"""
        return 'Component'._wrap(super(_Container, self).locate(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def isPaintingForPrint(self) -> bool:
        """public final boolean javax.swing.JComponent.isPaintingForPrint()"""
        return bool._wrap(super(JComponent, self).isPaintingForPrint())

    @overload
    def keyDown(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyDown(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyDown(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,int,int)"""
        super(_JComponent, self).firePropertyChange(arg0, _int.valueOf(arg1), _int.valueOf(arg2))

    @override
    @overload
    def getLayout(self) -> 'LayoutManager':
        """public java.awt.LayoutManager java.awt.Container.getLayout()"""
        return 'LayoutManager'._wrap(super(Container, self).getLayout())

    @override
    @overload
    def preferredSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.preferredSize()"""
        return 'Dimension'._wrap(super(Container, self).preferredSize())

    @override
    @overload
    def addNotify(self):
        """public void javax.swing.JComponent.addNotify()"""
        super(JComponent, self).addNotify()

    @overload
    def showContent(self, arg0: bool):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.showContent(boolean)"""
        super(_EditorPanel, self).showContent(_boolean.valueOf(arg0))

    @override
    @overload
    def setSize(self, arg0: int, arg1: int):
        """public void java.awt.Component.setSize(int,int)"""
        super(_Component, self).setSize(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.repaint(int,int,int,int)"""
        super(_Component, self).repaint(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @overload
    def requestFocusInWindow(self, arg0: 'Cause') -> bool:
        """public boolean java.awt.Component.requestFocusInWindow(java.awt.event.FocusEvent$Cause)"""
        return bool._wrap(super(_Component, self).requestFocusInWindow(arg0))

    @override
    @overload
    def remove(self, arg0: int):
        """public void java.awt.Container.remove(int)"""
        super(_Container, self).remove(_int.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,long,long)"""
        super(_Component, self).firePropertyChange(arg0, _long.valueOf(arg1), _long.valueOf(arg2))

    @override
    @overload
    def setFocusCycleRoot(self, arg0: bool):
        """public void java.awt.Container.setFocusCycleRoot(boolean)"""
        super(_Container, self).setFocusCycleRoot(_boolean.valueOf(arg0))

    @overload
    def keyUp(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyUp(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyUp(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def setBackground(self, arg0: 'Color'):
        """public void javax.swing.JComponent.setBackground(java.awt.Color)"""
        super(_JComponent, self).setBackground(arg0)

    @override
    @overload
    def doLayout(self):
        """public void java.awt.Container.doLayout()"""
        super(Container, self).doLayout()

    @override
    @overload
    def enable(self):
        """public void javax.swing.JComponent.enable()"""
        super(JComponent, self).enable()

    @override
    @overload
    def getInsets(self) -> 'Insets':
        """public java.awt.Insets javax.swing.JComponent.getInsets()"""
        return 'Insets'._wrap(super(JComponent, self).getInsets())

    @override
    @overload
    def setNextFocusableComponent(self, arg0: 'Component'):
        """public void javax.swing.JComponent.setNextFocusableComponent(java.awt.Component)"""
        super(_JComponent, self).setNextFocusableComponent(arg0)

    @override
    @overload
    def getAlignmentY(self) -> float:
        """public float javax.swing.JComponent.getAlignmentY()"""
        return float._wrap(super(JComponent, self).getAlignmentY())

    @overload
    def checkImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @override
    @overload
    def getFocusTraversalKeysEnabled(self) -> bool:
        """public boolean java.awt.Component.getFocusTraversalKeysEnabled()"""
        return bool._wrap(super(Component, self).getFocusTraversalKeysEnabled())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getRootPane(self) -> 'JRootPane':
        """public javax.swing.JRootPane javax.swing.JComponent.getRootPane()"""
        return 'JRootPane'._wrap(super(JComponent, self).getRootPane())

    @override
    @overload
    def invalidate(self):
        """public void java.awt.Container.invalidate()"""
        super(Container, self).invalidate()

    @override
    @overload
    def resetKeyboardActions(self):
        """public void javax.swing.JComponent.resetKeyboardActions()"""
        super(JComponent, self).resetKeyboardActions()

    @overload
    def getComponent(self, arg0: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponent(int)"""
        return 'Component'._wrap(super(_Container, self).getComponent(_int.valueOf(arg0)))

    @override
    @overload
    def setName(self, arg0: str):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setName(java.lang.String)"""
        super(_EditorPanel, self).setName(arg0)

    @override
    @overload
    def addPropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Container.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Container, self).addPropertyChangeListener(arg0, arg1)

    @override
    @overload
    def setInputMap(self, arg0: int, arg1: 'InputMap'):
        """public final void javax.swing.JComponent.setInputMap(int,javax.swing.InputMap)"""
        super(_JComponent, self).setInputMap(_int.valueOf(arg0), arg1)

    @override
    @overload
    def removePropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0)

    @overload
    def setDescription(self, arg0: str):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setDescription(java.lang.String)"""
        super(_EditorPanel, self).setDescription(arg0)

    @override
    @overload
    def applyComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Container.applyComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Container, self).applyComponentOrientation(arg0)

    @override
    @overload
    def setBorder(self, arg0: 'Border'):
        """public void javax.swing.JComponent.setBorder(javax.swing.border.Border)"""
        super(_JComponent, self).setBorder(arg0)

    @override
    @overload
    def remove(self, arg0: 'MenuComponent'):
        """public void java.awt.Component.remove(java.awt.MenuComponent)"""
        super(_Component, self).remove(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintStream'):
        """public void java.awt.Component.list(java.io.PrintStream)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def removeMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.removeMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).removeMouseListener(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintWriter'):
        """public void java.awt.Component.list(java.io.PrintWriter)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def getKeyListeners(self) -> List['KeyListener']:
        """public synchronized java.awt.event.KeyListener[] java.awt.Component.getKeyListeners()"""
        return List['KeyListener']._wrap(super(Component, self).getKeyListeners())

    @override
    @overload
    def getInputContext(self) -> 'InputContext':
        """public java.awt.im.InputContext java.awt.Component.getInputContext()"""
        return 'InputContext'._wrap(super(Component, self).getInputContext())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,double,double)"""
        super(_Component, self).firePropertyChange(arg0, _double.valueOf(arg1), _double.valueOf(arg2))

    @override
    @overload
    def removeAncestorListener(self, arg0: 'AncestorListener'):
        """public void javax.swing.JComponent.removeAncestorListener(javax.swing.event.AncestorListener)"""
        super(_JComponent, self).removeAncestorListener(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintWriter', arg1: int):
        """public void java.awt.Container.list(java.io.PrintWriter,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @overload
    def __init__(self, arg0: 'FlameMain', arg1: str, arg2: str):
        """public com.badlogic.gdx.tools.flame.EditorPanel(com.badlogic.gdx.tools.flame.FlameMain,java.lang.String,java.lang.String)"""
        val = _EditorPanel(arg0, arg1, arg2)
        self.__wrapper = val

    @overload
    def checkImage(self, arg0: 'Image', arg1: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, arg1))

    @override
    @overload
    def removeFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.removeFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).removeFocusListener(arg0)

    @overload
    def mouseDown(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDown(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDown(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getConditionForKeyStroke(self, arg0: 'KeyStroke') -> int:
        """public int javax.swing.JComponent.getConditionForKeyStroke(javax.swing.KeyStroke)"""
        return int._wrap(super(_JComponent, self).getConditionForKeyStroke(arg0))

    @override
    @overload
    def getTreeLock(self) -> object:
        """public final java.lang.Object java.awt.Component.getTreeLock()"""
        return object._wrap(super(Component, self).getTreeLock())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @override
    @overload
    def addVetoableChangeListener(self, arg0: 'VetoableChangeListener'):
        """public synchronized void javax.swing.JComponent.addVetoableChangeListener(java.beans.VetoableChangeListener)"""
        super(_JComponent, self).addVetoableChangeListener(arg0)

    @overload
    def contains(self, arg0: 'Point') -> bool:
        """public boolean java.awt.Component.contains(java.awt.Point)"""
        return bool._wrap(super(_Component, self).contains(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,short,short)"""
        super(_Component, self).firePropertyChange(arg0, _short.valueOf(arg1), _short.valueOf(arg2))

    @override
    @overload
    def dispatchEvent(self, arg0: 'AWTEvent'):
        """public final void java.awt.Component.dispatchEvent(java.awt.AWTEvent)"""
        super(_Component, self).dispatchEvent(arg0)

    @override
    @overload
    def removeContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.removeContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).removeContainerListener(arg0)

    @override
    @overload
    def getGraphicsConfiguration(self) -> 'GraphicsConfiguration':
        """public java.awt.GraphicsConfiguration java.awt.Component.getGraphicsConfiguration()"""
        return 'GraphicsConfiguration'._wrap(super(Component, self).getGraphicsConfiguration())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: bool, arg2: bool):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,boolean,boolean)"""
        super(_JComponent, self).firePropertyChange(arg0, _boolean.valueOf(arg1), _boolean.valueOf(arg2))

    @override
    @overload
    def registerKeyboardAction(self, arg0: 'ActionListener', arg1: str, arg2: 'KeyStroke', arg3: int):
        """public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,java.lang.String,javax.swing.KeyStroke,int)"""
        super(_JComponent, self).registerKeyboardAction(arg0, arg1, arg2, _int.valueOf(arg3))

    @overload
    def findComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(arg0))

    @override
    @overload
    def resize(self, arg0: int, arg1: int):
        """public void java.awt.Component.resize(int,int)"""
        super(_Component, self).resize(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getHeight(self) -> int:
        """public int javax.swing.JComponent.getHeight()"""
        return int._wrap(super(JComponent, self).getHeight())

    @override
    @overload
    def getTransferHandler(self) -> 'TransferHandler':
        """public javax.swing.TransferHandler javax.swing.JComponent.getTransferHandler()"""
        return 'TransferHandler'._wrap(super(JComponent, self).getTransferHandler())

    @overload
    def imageUpdate(self, arg0: 'Image', arg1: int, arg2: int, arg3: int, arg4: int, arg5: int) -> bool:
        """public boolean java.awt.Component.imageUpdate(java.awt.Image,int,int,int,int,int)"""
        return bool._wrap(super(_Component, self).imageUpdate(arg0, _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4), _int.valueOf(arg5)))

    @override
    @overload
    def getWidth(self) -> int:
        """public int javax.swing.JComponent.getWidth()"""
        return int._wrap(super(JComponent, self).getWidth())

    @override
    @overload
    def transferFocusBackward(self):
        """public void java.awt.Component.transferFocusBackward()"""
        super(Component, self).transferFocusBackward()

    @overload
    def getPropertyChangeListeners(self, arg0: str) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners(java.lang.String)"""
        return List['PropertyChangeListener']._wrap(super(_Component, self).getPropertyChangeListeners(arg0))

    @override
    @overload
    def getName(self) -> str:
        """public java.lang.String com.badlogic.gdx.tools.flame.EditorPanel.getName()"""
        return str._wrap(super(EditorPanel, self).getName())

    @staticmethod
    @overload
    def isLightweightComponent(arg0: 'Component') -> bool:
        """public static boolean javax.swing.JComponent.isLightweightComponent(java.awt.Component)"""
        return bool._wrap(_JComponent.isLightweightComponent(arg0))

    @override
    @overload
    def getBorder(self) -> 'Border':
        """public javax.swing.border.Border javax.swing.JComponent.getBorder()"""
        return 'Border'._wrap(super(JComponent, self).getBorder())

    @overload
    def setIsAlwayShown(self, arg0: bool):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setIsAlwayShown(boolean)"""
        super(_EditorPanel, self).setIsAlwayShown(_boolean.valueOf(arg0))

    @override
    @overload
    def printAll(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.printAll(java.awt.Graphics)"""
        super(_JComponent, self).printAll(arg0)

    @override
    @overload
    def addComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.addComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).addComponentListener(arg0)

    @override
    @overload
    def getBaselineResizeBehavior(self) -> 'BaselineResizeBehavior.Component$BaselineResizeBehavior':
        """public java.awt.Component$BaselineResizeBehavior javax.swing.JComponent.getBaselineResizeBehavior()"""
        return 'BaselineResizeBehavior.Component$BaselineResizeBehavior'._wrap(super(JComponent, self).getBaselineResizeBehavior())

    @override
    @overload
    def print(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.print(java.awt.Graphics)"""
        super(_JComponent, self).print(arg0)

    @override
    @overload
    def setInputVerifier(self, arg0: 'InputVerifier'):
        """public void javax.swing.JComponent.setInputVerifier(javax.swing.InputVerifier)"""
        super(_JComponent, self).setInputVerifier(arg0)

    @override
    @overload
    def addAncestorListener(self, arg0: 'AncestorListener'):
        """public void javax.swing.JComponent.addAncestorListener(javax.swing.event.AncestorListener)"""
        super(_JComponent, self).addAncestorListener(arg0)

    @override
    @overload
    def getFont(self) -> 'Font':
        """public java.awt.Font java.awt.Component.getFont()"""
        return 'Font'._wrap(super(Component, self).getFont())

    @override
    @overload
    def setFont(self, arg0: 'Font'):
        """public void javax.swing.JComponent.setFont(java.awt.Font)"""
        super(_JComponent, self).setFont(arg0)

    @override
    @overload
    def isOptimizedDrawingEnabled(self) -> bool:
        """public boolean javax.swing.JComponent.isOptimizedDrawingEnabled()"""
        return bool._wrap(super(JComponent, self).isOptimizedDrawingEnabled())

    @override
    @overload
    def isValidateRoot(self) -> bool:
        """public boolean javax.swing.JComponent.isValidateRoot()"""
        return bool._wrap(super(JComponent, self).isValidateRoot())

    @overload
    def prepareImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @override
    @overload
    def setForeground(self, arg0: 'Color'):
        """public void javax.swing.JComponent.setForeground(java.awt.Color)"""
        super(_JComponent, self).setForeground(arg0)

    @overload
    def mouseDrag(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDrag(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDrag(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def isOpaque(self) -> bool:
        """public boolean javax.swing.JComponent.isOpaque()"""
        return bool._wrap(super(JComponent, self).isOpaque())

    @overload
    def createVolatileImage(self, arg0: int, arg1: int, arg2: 'ImageCapabilities') -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int,java.awt.ImageCapabilities) throws java.awt.AWTException"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1), arg2))

    @override
    @overload
    def bounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.bounds()"""
        return 'Rectangle'._wrap(super(Component, self).bounds())

    @override
    @overload
    def update(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.update(java.awt.Graphics)"""
        super(_JComponent, self).update(arg0)

    @override
    @overload
    def add(self, arg0: 'PopupMenu'):
        """public void java.awt.Component.add(java.awt.PopupMenu)"""
        super(_Component, self).add(arg0)

    @override
    @overload
    def getToolTipText(self) -> str:
        """public java.lang.String javax.swing.JComponent.getToolTipText()"""
        return str._wrap(super(JComponent, self).getToolTipText())

    @override
    @overload
    def isVisible(self) -> bool:
        """public boolean java.awt.Component.isVisible()"""
        return bool._wrap(super(Component, self).isVisible())

    @override
    @overload
    def setDropTarget(self, arg0: 'DropTarget'):
        """public synchronized void java.awt.Component.setDropTarget(java.awt.dnd.DropTarget)"""
        super(_Component, self).setDropTarget(arg0)

    @override
    @overload
    def getLocationOnScreen(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocationOnScreen()"""
        return 'Point'._wrap(super(Component, self).getLocationOnScreen())

    @override
    @overload
    def getY(self) -> int:
        """public int javax.swing.JComponent.getY()"""
        return int._wrap(super(JComponent, self).getY())

    @overload
    def getComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def isMaximumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMaximumSizeSet()"""
        return bool._wrap(super(Component, self).isMaximumSizeSet())

    @override
    @overload
    def setAlignmentY(self, arg0: float):
        """public void javax.swing.JComponent.setAlignmentY(float)"""
        super(_JComponent, self).setAlignmentY(_float.valueOf(arg0))

    @override
    @overload
    def getRegisteredKeyStrokes(self) -> List['KeyStroke']:
        """public javax.swing.KeyStroke[] javax.swing.JComponent.getRegisteredKeyStrokes()"""
        return List['KeyStroke']._wrap(super(JComponent, self).getRegisteredKeyStrokes())

    @override
    @overload
    def isFocusable(self) -> bool:
        """public boolean java.awt.Component.isFocusable()"""
        return bool._wrap(super(Component, self).isFocusable())

    @override
    @overload
    def isFocusTraversalPolicyProvider(self) -> bool:
        """public final boolean java.awt.Container.isFocusTraversalPolicyProvider()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicyProvider())

    @override
    @overload
    def getMouseListeners(self) -> List['MouseListener']:
        """public synchronized java.awt.event.MouseListener[] java.awt.Component.getMouseListeners()"""
        return List['MouseListener']._wrap(super(Component, self).getMouseListeners())

    @override
    @overload
    def registerKeyboardAction(self, arg0: 'ActionListener', arg1: 'KeyStroke', arg2: int):
        """public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,javax.swing.KeyStroke,int)"""
        super(_JComponent, self).registerKeyboardAction(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def transferFocusUpCycle(self):
        """public void java.awt.Component.transferFocusUpCycle()"""
        super(Component, self).transferFocusUpCycle()

    @override
    @overload
    def removeKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.removeKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).removeKeyListener(arg0)

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: str, arg2: str):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,char,char)"""
        super(_JComponent, self).firePropertyChange(arg0, _char.valueOf(arg1), _char.valueOf(arg2))

    @override
    @overload
    def getMouseMotionListeners(self) -> List['MouseMotionListener']:
        """public synchronized java.awt.event.MouseMotionListener[] java.awt.Component.getMouseMotionListeners()"""
        return List['MouseMotionListener']._wrap(super(Component, self).getMouseMotionListeners())

    @override
    @overload
    def getAutoscrolls(self) -> bool:
        """public boolean javax.swing.JComponent.getAutoscrolls()"""
        return bool._wrap(super(JComponent, self).getAutoscrolls())

    @override
    @overload
    def addContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.addContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).addContainerListener(arg0)

    @override
    @overload
    def isFocusTraversable(self) -> bool:
        """public boolean java.awt.Component.isFocusTraversable()"""
        return bool._wrap(super(Component, self).isFocusTraversable())

    @overload
    def mouseExit(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseExit(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseExit(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def update(self, arg0: 'FlameMain'):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.update(com.badlogic.gdx.tools.flame.FlameMain)"""
        super(_EditorPanel, self).update(arg0)

    @overload
    def getBounds(self, arg0: 'Rectangle') -> 'Rectangle':
        """public java.awt.Rectangle javax.swing.JComponent.getBounds(java.awt.Rectangle)"""
        return 'Rectangle'._wrap(super(_JComponent, self).getBounds(arg0))

    @overload
    def setValue(self, arg0: object):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setValue(T)"""
        super(_EditorPanel, self).setValue(arg0)

    @override
    @overload
    def setToolTipText(self, arg0: str):
        """public void javax.swing.JComponent.setToolTipText(java.lang.String)"""
        super(_JComponent, self).setToolTipText(arg0)

    @override
    @overload
    def setAutoscrolls(self, arg0: bool):
        """public void javax.swing.JComponent.setAutoscrolls(boolean)"""
        super(_JComponent, self).setAutoscrolls(_boolean.valueOf(arg0))

    @override
    @overload
    def setComponentPopupMenu(self, arg0: 'JPopupMenu'):
        """public void javax.swing.JComponent.setComponentPopupMenu(javax.swing.JPopupMenu)"""
        super(_JComponent, self).setComponentPopupMenu(arg0)

    @override
    @overload
    def setMixingCutoutShape(self, arg0: 'Shape'):
        """public void java.awt.Component.setMixingCutoutShape(java.awt.Shape)"""
        super(_Component, self).setMixingCutoutShape(arg0)

    @override
    @overload
    def getVisibleRect(self) -> 'Rectangle':
        """public java.awt.Rectangle javax.swing.JComponent.getVisibleRect()"""
        return 'Rectangle'._wrap(super(JComponent, self).getVisibleRect())

    @override
    @overload
    def requestFocus(self, arg0: 'Cause'):
        """public void java.awt.Component.requestFocus(java.awt.event.FocusEvent$Cause)"""
        super(_Component, self).requestFocus(arg0)

    @overload
    def createImage(self, arg0: int, arg1: int) -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(int,int)"""
        return 'Image'._wrap(super(_Component, self).createImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def putClientProperty(self, arg0: object, arg1: object):
        """public final void javax.swing.JComponent.putClientProperty(java.lang.Object,java.lang.Object)"""
        super(_JComponent, self).putClientProperty(arg0, arg1)

    @override
    @overload
    def getVetoableChangeListeners(self) -> List['VetoableChangeListener']:
        """public synchronized java.beans.VetoableChangeListener[] javax.swing.JComponent.getVetoableChangeListeners()"""
        return List['VetoableChangeListener']._wrap(super(JComponent, self).getVetoableChangeListeners())

    @override
    @overload
    def scrollRectToVisible(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.scrollRectToVisible(java.awt.Rectangle)"""
        super(_JComponent, self).scrollRectToVisible(arg0)

    @override
    @overload
    def getTopLevelAncestor(self) -> 'Container':
        """public java.awt.Container javax.swing.JComponent.getTopLevelAncestor()"""
        return 'Container'._wrap(super(JComponent, self).getTopLevelAncestor())

    @override
    @overload
    def isRequestFocusEnabled(self) -> bool:
        """public boolean javax.swing.JComponent.isRequestFocusEnabled()"""
        return bool._wrap(super(JComponent, self).isRequestFocusEnabled())

    @override
    @overload
    def getFocusListeners(self) -> List['FocusListener']:
        """public synchronized java.awt.event.FocusListener[] java.awt.Component.getFocusListeners()"""
        return List['FocusListener']._wrap(super(Component, self).getFocusListeners())

    @override
    @overload
    def setLayout(self, arg0: 'LayoutManager'):
        """public void java.awt.Container.setLayout(java.awt.LayoutManager)"""
        super(_Container, self).setLayout(arg0)

    @overload
    def add(self, arg0: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0))

    @override
    @overload
    def getMouseWheelListeners(self) -> List['MouseWheelListener']:
        """public synchronized java.awt.event.MouseWheelListener[] java.awt.Component.getMouseWheelListeners()"""
        return List['MouseWheelListener']._wrap(super(Component, self).getMouseWheelListeners())

    @override
    @overload
    def reshape(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void javax.swing.JComponent.reshape(int,int,int,int)"""
        super(_JComponent, self).reshape(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def setTransferHandler(self, arg0: 'TransferHandler'):
        """public void javax.swing.JComponent.setTransferHandler(javax.swing.TransferHandler)"""
        super(_JComponent, self).setTransferHandler(arg0)

    @override
    @overload
    def getPreferredSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getPreferredSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getPreferredSize())

    @override
    @overload
    def setLocation(self, arg0: int, arg1: int):
        """public void java.awt.Component.setLocation(int,int)"""
        super(_Component, self).setLocation(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def removeInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.removeInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).removeInputMethodListener(arg0)

    @override
    @overload
    def setFocusable(self, arg0: bool):
        """public void java.awt.Component.setFocusable(boolean)"""
        super(_Component, self).setFocusable(_boolean.valueOf(arg0))

    @override
    @overload
    def paintComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.paintComponents(java.awt.Graphics)"""
        super(_Container, self).paintComponents(arg0)

    @override
    @overload
    def addFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.addFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).addFocusListener(arg0)

    @overload
    def prepareImage(self, arg0: 'Image', arg1: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, arg1))

    @override
    @overload
    def addKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.addKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).addKeyListener(arg0)

    @override
    @overload
    def resize(self, arg0: 'Dimension'):
        """public void java.awt.Component.resize(java.awt.Dimension)"""
        super(_Component, self).resize(arg0)

    @override
    @overload
    def setComponentZOrder(self, arg0: 'Component', arg1: int):
        """public void java.awt.Container.setComponentZOrder(java.awt.Component,int)"""
        super(_Container, self).setComponentZOrder(arg0, _int.valueOf(arg1))

    @override
    @overload
    def list(self):
        """public void java.awt.Component.list()"""
        super(Component, self).list()

    @overload
    def add(self, arg0: str, arg1: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.lang.String,java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, arg1))

    @override
    @overload
    def paintImmediately(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void javax.swing.JComponent.paintImmediately(int,int,int,int)"""
        super(_JComponent, self).paintImmediately(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def getMinimumSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getMinimumSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getMinimumSize())

    @override
    @overload
    def setEnabled(self, arg0: bool):
        """public void javax.swing.JComponent.setEnabled(boolean)"""
        super(_JComponent, self).setEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def hasFocus(self) -> bool:
        """public boolean java.awt.Component.hasFocus()"""
        return bool._wrap(super(Component, self).hasFocus())

    @overload
    def createVolatileImage(self, arg0: int, arg1: int) -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int)"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.removeHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).removeHierarchyListener(arg0)

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.awt.Component.toString()"""
        return str._wrap(super(Component, self).toString())

    @override
    @overload
    def addMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.addMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).addMouseListener(arg0)

    @override
    @overload
    def isFocusOwner(self) -> bool:
        """public boolean java.awt.Component.isFocusOwner()"""
        return bool._wrap(super(Component, self).isFocusOwner())

    @override
    @overload
    def getAccessibleContext(self) -> 'AccessibleContext':
        """public javax.accessibility.AccessibleContext javax.swing.JPanel.getAccessibleContext()"""
        return 'AccessibleContext'._wrap(super(JPanel, self).getAccessibleContext())

    @overload
    def postEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.postEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).postEvent(arg0))

    @overload
    def getLocation(self, arg0: 'Point') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getLocation(java.awt.Point)"""
        return 'Point'._wrap(super(_JComponent, self).getLocation(arg0))

    @overload
    def getBaseline(self, arg0: int, arg1: int) -> int:
        """public int javax.swing.JComponent.getBaseline(int,int)"""
        return int._wrap(super(_JComponent, self).getBaseline(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def findComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeNotify(self):
        """public void javax.swing.JComponent.removeNotify()"""
        super(JComponent, self).removeNotify()

    @override
    @overload
    def getForeground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getForeground()"""
        return 'Color'._wrap(super(Component, self).getForeground())

    @override
    @overload
    def show(self):
        """public void java.awt.Component.show()"""
        super(Component, self).show()

    @override
    @overload
    def isDoubleBuffered(self) -> bool:
        """public boolean javax.swing.JComponent.isDoubleBuffered()"""
        return bool._wrap(super(JComponent, self).isDoubleBuffered())

    @override
    @overload
    def isFocusCycleRoot(self) -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot()"""
        return bool._wrap(super(Container, self).isFocusCycleRoot())

    @override
    @overload
    def addMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.addMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).addMouseWheelListener(arg0)

    @override
    @overload
    def hide(self):
        """public void javax.swing.JComponent.hide()"""
        super(JComponent, self).hide()

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def revalidate(self):
        """public void javax.swing.JComponent.revalidate()"""
        super(JComponent, self).revalidate()

    @override
    @overload
    def getActionMap(self) -> 'ActionMap':
        """public final javax.swing.ActionMap javax.swing.JComponent.getActionMap()"""
        return 'ActionMap'._wrap(super(JComponent, self).getActionMap())

    @override
    @overload
    def requestFocusInWindow(self) -> bool:
        """public boolean javax.swing.JComponent.requestFocusInWindow()"""
        return bool._wrap(super(JComponent, self).requestFocusInWindow())

    @overload
    def action(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.action(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).action(arg0, arg1))

    @override
    @overload
    def isManagingFocus(self) -> bool:
        """public boolean javax.swing.JComponent.isManagingFocus()"""
        return bool._wrap(super(JComponent, self).isManagingFocus())

    @overload
    def __init__(self, arg0: 'FlameMain', arg1: str, arg2: str, arg3: bool, arg4: bool):
        """public com.badlogic.gdx.tools.flame.EditorPanel(com.badlogic.gdx.tools.flame.FlameMain,java.lang.String,java.lang.String,boolean,boolean)"""
        val = _EditorPanel(arg0, arg1, arg2, _boolean.valueOf(arg3), _boolean.valueOf(arg4))
        self.__wrapper = val

    @overload
    def getContentPanel(self) -> 'JPanel':
        """public javax.swing.JPanel com.badlogic.gdx.tools.flame.EditorPanel.getContentPanel()"""
        return 'JPanel'._wrap(super(EditorPanel, self).getContentPanel())

    @override
    @overload
    def isLightweight(self) -> bool:
        """public boolean java.awt.Component.isLightweight()"""
        return bool._wrap(super(Component, self).isLightweight())

    @override
    @overload
    def setAlignmentX(self, arg0: float):
        """public void javax.swing.JComponent.setAlignmentX(float)"""
        super(_JComponent, self).setAlignmentX(_float.valueOf(arg0))

    @overload
    def getFocusTraversalKeys(self, arg0: int) -> 'Set':
        """public java.util.Set<java.awt.AWTKeyStroke> java.awt.Container.getFocusTraversalKeys(int)"""
        return 'Set'._wrap(super(_Container, self).getFocusTraversalKeys(_int.valueOf(arg0)))

    @override
    @overload
    def setFocusTraversalKeysEnabled(self, arg0: bool):
        """public void java.awt.Component.setFocusTraversalKeysEnabled(boolean)"""
        super(_Component, self).setFocusTraversalKeysEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def remove(self, arg0: 'Component'):
        """public void java.awt.Container.remove(java.awt.Component)"""
        super(_Container, self).remove(arg0)

    @overload
    def getInsets(self, arg0: 'Insets') -> 'Insets':
        """public java.awt.Insets javax.swing.JComponent.getInsets(java.awt.Insets)"""
        return 'Insets'._wrap(super(_JComponent, self).getInsets(arg0))

    @override
    @overload
    def insets(self) -> 'Insets':
        """public java.awt.Insets java.awt.Container.insets()"""
        return 'Insets'._wrap(super(Container, self).insets())

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int):
        """public void javax.swing.JComponent.repaint(long,int,int,int,int)"""
        super(_JComponent, self).repaint(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4))

    @override
    @overload
    def setFocusTraversalPolicy(self, arg0: 'FocusTraversalPolicy'):
        """public void java.awt.Container.setFocusTraversalPolicy(java.awt.FocusTraversalPolicy)"""
        super(_Container, self).setFocusTraversalPolicy(arg0)

    @overload
    def getSize(self, arg0: 'Dimension') -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getSize(java.awt.Dimension)"""
        return 'Dimension'._wrap(super(_JComponent, self).getSize(arg0))

    @override
    @overload
    def enable(self, arg0: bool):
        """public void java.awt.Component.enable(boolean)"""
        super(_Component, self).enable(_boolean.valueOf(arg0))

    @overload
    def getToolTipLocation(self, arg0: 'MouseEvent') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getToolTipLocation(java.awt.event.MouseEvent)"""
        return 'Point'._wrap(super(_JComponent, self).getToolTipLocation(arg0))

    @override
    @overload
    def addPropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Container.addPropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Container, self).addPropertyChangeListener(arg0)

    @overload
    def getComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(arg0))

    @override
    @overload
    def size(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.size()"""
        return 'Dimension'._wrap(super(Component, self).size())

    @override
    @overload
    def getVerifyInputWhenFocusTarget(self) -> bool:
        """public boolean javax.swing.JComponent.getVerifyInputWhenFocusTarget()"""
        return bool._wrap(super(JComponent, self).getVerifyInputWhenFocusTarget())

    @overload
    def mouseMove(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseMove(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseMove(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getActionForKeyStroke(self, arg0: 'KeyStroke') -> 'ActionListener':
        """public java.awt.event.ActionListener javax.swing.JComponent.getActionForKeyStroke(javax.swing.KeyStroke)"""
        return 'ActionListener'._wrap(super(_JComponent, self).getActionForKeyStroke(arg0))

    @overload
    def lostFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.lostFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).lostFocus(arg0, arg1))

    @override
    @overload
    def isMinimumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMinimumSizeSet()"""
        return bool._wrap(super(Component, self).isMinimumSizeSet())

    @override
    @overload
    def isForegroundSet(self) -> bool:
        """public boolean java.awt.Component.isForegroundSet()"""
        return bool._wrap(super(Component, self).isForegroundSet())

    @overload
    def getMousePosition(self, arg0: bool) -> 'Point':
        """public java.awt.Point java.awt.Container.getMousePosition(boolean) throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(_Container, self).getMousePosition(_boolean.valueOf(arg0)))

    @overload
    def setHasAdvanced(self, arg0: bool):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setHasAdvanced(boolean)"""
        super(_EditorPanel, self).setHasAdvanced(_boolean.valueOf(arg0))

    @overload
    def getFontMetrics(self, arg0: 'Font') -> 'FontMetrics':
        """public java.awt.FontMetrics javax.swing.JComponent.getFontMetrics(java.awt.Font)"""
        return 'FontMetrics'._wrap(super(_JComponent, self).getFontMetrics(arg0))

    @overload
    def getListeners(self, arg0: 'Class') -> List['EventListener']:
        """public <T extends java.util.EventListener> T[] javax.swing.JComponent.getListeners(java.lang.Class<T>)"""
        return List['EventListener']._wrap(super(_JComponent, self).getListeners(arg0))

    @override
    @overload
    def getHierarchyBoundsListeners(self) -> List['HierarchyBoundsListener']:
        """public synchronized java.awt.event.HierarchyBoundsListener[] java.awt.Component.getHierarchyBoundsListeners()"""
        return List['HierarchyBoundsListener']._wrap(super(Component, self).getHierarchyBoundsListeners())

    @override
    @overload
    def minimumSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.minimumSize()"""
        return 'Dimension'._wrap(super(Container, self).minimumSize())

    @overload
    def handleEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.handleEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).handleEvent(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def getAdvancedPanel(self) -> 'JPanel':
        """public javax.swing.JPanel com.badlogic.gdx.tools.flame.EditorPanel.getAdvancedPanel()"""
        return 'JPanel'._wrap(super(EditorPanel, self).getAdvancedPanel())

    @override
    @overload
    def getComponentListeners(self) -> List['ComponentListener']:
        """public synchronized java.awt.event.ComponentListener[] java.awt.Component.getComponentListeners()"""
        return List['ComponentListener']._wrap(super(Component, self).getComponentListeners())

    @override
    @overload
    def computeVisibleRect(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.computeVisibleRect(java.awt.Rectangle)"""
        super(_JComponent, self).computeVisibleRect(arg0)

    @override
    @overload
    def deliverEvent(self, arg0: 'Event'):
        """public void java.awt.Container.deliverEvent(java.awt.Event)"""
        super(_Container, self).deliverEvent(arg0)

    @override
    @overload
    def addHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.addHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).addHierarchyBoundsListener(arg0)

    @override
    @overload
    def getAlignmentX(self) -> float:
        """public float javax.swing.JComponent.getAlignmentX()"""
        return float._wrap(super(JComponent, self).getAlignmentX())

    @overload
    def add(self, arg0: 'Component', arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component,int)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def repaint(self):
        """public void java.awt.Component.repaint()"""
        super(Component, self).repaint()

    @overload
    def gotFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.gotFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).gotFocus(arg0, arg1))

    @override
    @overload
    def createToolTip(self) -> 'JToolTip':
        """public javax.swing.JToolTip javax.swing.JComponent.createToolTip()"""
        return 'JToolTip'._wrap(super(JComponent, self).createToolTip())

    @overload
    def getToolTipText(self, arg0: 'MouseEvent') -> str:
        """public java.lang.String javax.swing.JComponent.getToolTipText(java.awt.event.MouseEvent)"""
        return str._wrap(super(_JComponent, self).getToolTipText(arg0))

    @override
    @overload
    def printComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.printComponents(java.awt.Graphics)"""
        super(_Container, self).printComponents(arg0)

    @override
    @overload
    def getColorModel(self) -> 'ColorModel':
        """public java.awt.image.ColorModel java.awt.Component.getColorModel()"""
        return 'ColorModel'._wrap(super(Component, self).getColorModel())

    @override
    @overload
    def setFocusTraversalPolicyProvider(self, arg0: bool):
        """public final void java.awt.Container.setFocusTraversalPolicyProvider(boolean)"""
        super(_Container, self).setFocusTraversalPolicyProvider(_boolean.valueOf(arg0))

    @overload
    def getComponentZOrder(self, arg0: 'Component') -> int:
        """public int java.awt.Container.getComponentZOrder(java.awt.Component)"""
        return int._wrap(super(_Container, self).getComponentZOrder(arg0))

    @override
    @overload
    def getDebugGraphicsOptions(self) -> int:
        """public int javax.swing.JComponent.getDebugGraphicsOptions()"""
        return int._wrap(super(JComponent, self).getDebugGraphicsOptions())

    @overload
    def areFocusTraversalKeysSet(self, arg0: int) -> bool:
        """public boolean java.awt.Container.areFocusTraversalKeysSet(int)"""
        return bool._wrap(super(_Container, self).areFocusTraversalKeysSet(_int.valueOf(arg0)))

    @override
    @overload
    def getSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.getSize()"""
        return 'Dimension'._wrap(super(Component, self).getSize())

    @override
    @overload
    def repaint(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.repaint(java.awt.Rectangle)"""
        super(_JComponent, self).repaint(arg0)

    @overload
    def getClientProperty(self, arg0: object) -> object:
        """public final java.lang.Object javax.swing.JComponent.getClientProperty(java.lang.Object)"""
        return object._wrap(super(_JComponent, self).getClientProperty(arg0))

    @override
    @overload
    def unregisterKeyboardAction(self, arg0: 'KeyStroke'):
        """public void javax.swing.JComponent.unregisterKeyboardAction(javax.swing.KeyStroke)"""
        super(_JComponent, self).unregisterKeyboardAction(arg0)

    @overload
    def requestFocus(self, arg0: bool) -> bool:
        """public boolean javax.swing.JComponent.requestFocus(boolean)"""
        return bool._wrap(super(_JComponent, self).requestFocus(_boolean.valueOf(arg0)))

    @override
    @overload
    def setActionMap(self, arg0: 'ActionMap'):
        """public final void javax.swing.JComponent.setActionMap(javax.swing.ActionMap)"""
        super(_JComponent, self).setActionMap(arg0)

    @override
    @overload
    def getX(self) -> int:
        """public int javax.swing.JComponent.getX()"""
        return int._wrap(super(JComponent, self).getX())

    @overload
    def mouseEnter(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseEnter(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseEnter(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def updateUI(self):
        """public void javax.swing.JPanel.updateUI()"""
        super(JPanel, self).updateUI()

    @override
    @overload
    def getToolkit(self) -> 'Toolkit':
        """public java.awt.Toolkit java.awt.Component.getToolkit()"""
        return 'Toolkit'._wrap(super(Component, self).getToolkit())

    @override
    @overload
    def isCursorSet(self) -> bool:
        """public boolean java.awt.Component.isCursorSet()"""
        return bool._wrap(super(Component, self).isCursorSet())

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object, arg2: int):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object,int)"""
        super(_Container, self).add(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def setPreferredSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setPreferredSize(java.awt.Dimension)"""
        super(_JComponent, self).setPreferredSize(arg0)

    @override
    @overload
    def setBounds(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.setBounds(int,int,int,int)"""
        super(_Component, self).setBounds(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def isFocusTraversalPolicySet(self) -> bool:
        """public boolean java.awt.Container.isFocusTraversalPolicySet()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicySet())

    @override
    @overload
    def requestFocus(self):
        """public void javax.swing.JComponent.requestFocus()"""
        super(JComponent, self).requestFocus()

    @override
    @overload
    def getAncestorListeners(self) -> List['AncestorListener']:
        """public javax.swing.event.AncestorListener[] javax.swing.JComponent.getAncestorListeners()"""
        return List['AncestorListener']._wrap(super(JComponent, self).getAncestorListeners())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool._wrap(super(_object, self).equals(arg0))

    @overload
    def getInputMap(self, arg0: int) -> 'InputMap':
        """public final javax.swing.InputMap javax.swing.JComponent.getInputMap(int)"""
        return 'InputMap'._wrap(super(_JComponent, self).getInputMap(_int.valueOf(arg0)))

    @override
    @overload
    def isEnabled(self) -> bool:
        """public boolean java.awt.Component.isEnabled()"""
        return bool._wrap(super(Component, self).isEnabled())

    @override
    @overload
    def move(self, arg0: int, arg1: int):
        """public void java.awt.Component.move(int,int)"""
        super(_Component, self).move(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def addMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.addMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).addMouseMotionListener(arg0)

    @override
    @overload
    def getIgnoreRepaint(self) -> bool:
        """public boolean java.awt.Component.getIgnoreRepaint()"""
        return bool._wrap(super(Component, self).getIgnoreRepaint())

    @overload
    def isFocusCycleRoot(self, arg0: 'Container') -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot(java.awt.Container)"""
        return bool._wrap(super(_Container, self).isFocusCycleRoot(arg0))

    @override
    @overload
    def getGraphics(self) -> 'Graphics':
        """public java.awt.Graphics javax.swing.JComponent.getGraphics()"""
        return 'Graphics'._wrap(super(JComponent, self).getGraphics())

    @override
    @overload
    def setLocale(self, arg0: 'Locale'):
        """public void java.awt.Component.setLocale(java.util.Locale)"""
        super(_Component, self).setLocale(arg0)

    @override
    @overload
    def paintAll(self, arg0: 'Graphics'):
        """public void java.awt.Component.paintAll(java.awt.Graphics)"""
        super(_Component, self).paintAll(arg0)

    @override
    @overload
    def setDoubleBuffered(self, arg0: bool):
        """public void javax.swing.JComponent.setDoubleBuffered(boolean)"""
        super(_JComponent, self).setDoubleBuffered(_boolean.valueOf(arg0))

    @override
    @overload
    def isPreferredSizeSet(self) -> bool:
        """public boolean java.awt.Component.isPreferredSizeSet()"""
        return bool._wrap(super(Component, self).isPreferredSizeSet())

    @override
    @overload
    def addInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.addInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).addInputMethodListener(arg0)

    @override
    @overload
    def removeMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.removeMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).removeMouseWheelListener(arg0)

    @override
    @overload
    def getInputMap(self) -> 'InputMap':
        """public final javax.swing.InputMap javax.swing.JComponent.getInputMap()"""
        return 'InputMap'._wrap(super(JComponent, self).getInputMap())

    @override
    @overload
    def setVisible(self, arg0: bool):
        """public void javax.swing.JComponent.setVisible(boolean)"""
        super(_JComponent, self).setVisible(_boolean.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,byte,byte)"""
        super(_Component, self).firePropertyChange(arg0, _byte.valueOf(arg1), _byte.valueOf(arg2))

    @override
    @overload
    def getUIClassID(self) -> str:
        """public java.lang.String javax.swing.JPanel.getUIClassID()"""
        return str._wrap(super(JPanel, self).getUIClassID())

    @override
    @overload
    def transferFocusDownCycle(self):
        """public void java.awt.Container.transferFocusDownCycle()"""
        super(Container, self).transferFocusDownCycle()

    @override
    @overload
    def getNextFocusableComponent(self) -> 'Component':
        """public java.awt.Component javax.swing.JComponent.getNextFocusableComponent()"""
        return 'Component'._wrap(super(JComponent, self).getNextFocusableComponent())

    @override
    @overload
    def getUI(self) -> 'PanelUI':
        """public javax.swing.plaf.PanelUI javax.swing.JPanel.getUI()"""
        return 'PanelUI'._wrap(super(JPanel, self).getUI())

    @override
    @overload
    def setBounds(self, arg0: 'Rectangle'):
        """public void java.awt.Component.setBounds(java.awt.Rectangle)"""
        super(_Component, self).setBounds(arg0)

    @override
    @overload
    def repaint(self, arg0: int):
        """public void java.awt.Component.repaint(long)"""
        super(_Component, self).repaint(_long.valueOf(arg0))

    @override
    @overload
    def removeHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.removeHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).removeHierarchyBoundsListener(arg0)

    @override
    @overload
    def getComponentPopupMenu(self) -> 'JPopupMenu':
        """public javax.swing.JPopupMenu javax.swing.JComponent.getComponentPopupMenu()"""
        return 'JPopupMenu'._wrap(super(JComponent, self).getComponentPopupMenu())

    @override
    @overload
    def getMousePosition(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getMousePosition() throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(Component, self).getMousePosition())

    @override
    @overload
    def getComponentCount(self) -> int:
        """public int java.awt.Container.getComponentCount()"""
        return int._wrap(super(Container, self).getComponentCount())

    @override
    @overload
    def getInputMethodRequests(self) -> 'InputMethodRequests':
        """public java.awt.im.InputMethodRequests java.awt.Component.getInputMethodRequests()"""
        return 'InputMethodRequests'._wrap(super(Component, self).getInputMethodRequests())

    @override
    @overload
    def setMaximumSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setMaximumSize(java.awt.Dimension)"""
        super(_JComponent, self).setMaximumSize(arg0)

    @override
    @overload
    def setRequestFocusEnabled(self, arg0: bool):
        """public void javax.swing.JComponent.setRequestFocusEnabled(boolean)"""
        super(_JComponent, self).setRequestFocusEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def setFocusTraversalKeys(self, arg0: int, arg1: 'Set'):
        """public void javax.swing.JComponent.setFocusTraversalKeys(int,java.util.Set<? extends java.awt.AWTKeyStroke>)"""
        super(_JComponent, self).setFocusTraversalKeys(_int.valueOf(arg0), arg1)

    @overload
    def inside(self, arg0: int, arg1: int) -> bool:
        """public boolean java.awt.Component.inside(int,int)"""
        return bool._wrap(super(_Component, self).inside(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def requestDefaultFocus(self) -> bool:
        """public boolean javax.swing.JComponent.requestDefaultFocus()"""
        return bool._wrap(super(JComponent, self).requestDefaultFocus())

    @override
    @overload
    def disable(self):
        """public void javax.swing.JComponent.disable()"""
        super(JComponent, self).disable()

    @override
    @overload
    def enableInputMethods(self, arg0: bool):
        """public void java.awt.Component.enableInputMethods(boolean)"""
        super(_Component, self).enableInputMethods(_boolean.valueOf(arg0))

    @override
    @overload
    def layout(self):
        """public void java.awt.Container.layout()"""
        super(Container, self).layout()

    @override
    @overload
    def getInputMethodListeners(self) -> List['InputMethodListener']:
        """public synchronized java.awt.event.InputMethodListener[] java.awt.Component.getInputMethodListeners()"""
        return List['InputMethodListener']._wrap(super(Component, self).getInputMethodListeners())

    @override
    @overload
    def paint(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.paint(java.awt.Graphics)"""
        super(_JComponent, self).paint(arg0)

    @override
    @overload
    def transferFocus(self):
        """public void java.awt.Component.transferFocus()"""
        super(Component, self).transferFocus()

    @override
    @overload
    def removeComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.removeComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).removeComponentListener(arg0)

    @override
    @overload
    def getCursor(self) -> 'Cursor':
        """public java.awt.Cursor java.awt.Component.getCursor()"""
        return 'Cursor'._wrap(super(Component, self).getCursor())

    @override
    @overload
    def setMinimumSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setMinimumSize(java.awt.Dimension)"""
        super(_JComponent, self).setMinimumSize(arg0)

    @override
    @overload
    def getContainerListeners(self) -> List['ContainerListener']:
        """public synchronized java.awt.event.ContainerListener[] java.awt.Container.getContainerListeners()"""
        return List['ContainerListener']._wrap(super(Container, self).getContainerListeners())

    @override
    @overload
    def setLocation(self, arg0: 'Point'):
        """public void java.awt.Component.setLocation(java.awt.Point)"""
        super(_Component, self).setLocation(arg0)

    @override
    @overload
    def setSize(self, arg0: 'Dimension'):
        """public void java.awt.Component.setSize(java.awt.Dimension)"""
        super(_Component, self).setSize(arg0)

    @override
    @overload
    def removeAll(self):
        """public void java.awt.Container.removeAll()"""
        super(Container, self).removeAll()

    @overload
    def getPopupLocation(self, arg0: 'MouseEvent') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getPopupLocation(java.awt.event.MouseEvent)"""
        return 'Point'._wrap(super(_JComponent, self).getPopupLocation(arg0))

    @overload
    def isAncestorOf(self, arg0: 'Component') -> bool:
        """public boolean java.awt.Container.isAncestorOf(java.awt.Component)"""
        return bool._wrap(super(_Container, self).isAncestorOf(arg0))

    @override
    @overload
    def setOpaque(self, arg0: bool):
        """public void javax.swing.JComponent.setOpaque(boolean)"""
        super(_JComponent, self).setOpaque(_boolean.valueOf(arg0))

    @overload
    def contains(self, arg0: int, arg1: int) -> bool:
        """public boolean javax.swing.JComponent.contains(int,int)"""
        return bool._wrap(super(_JComponent, self).contains(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def setCursor(self, arg0: 'Cursor'):
        """public void java.awt.Component.setCursor(java.awt.Cursor)"""
        super(_Component, self).setCursor(arg0)

    @override
    @overload
    def validate(self):
        """public void java.awt.Container.validate()"""
        super(Container, self).validate()

    @override
    @overload
    def getMaximumSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getMaximumSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getMaximumSize())

    @override
    @overload
    def getBackground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getBackground()"""
        return 'Color'._wrap(super(Component, self).getBackground())

    @overload
    def createImage(self, arg0: 'ImageProducer') -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(java.awt.image.ImageProducer)"""
        return 'Image'._wrap(super(_Component, self).createImage(arg0))

    @override
    @overload
    def setVerifyInputWhenFocusTarget(self, arg0: bool):
        """public void javax.swing.JComponent.setVerifyInputWhenFocusTarget(boolean)"""
        super(_JComponent, self).setVerifyInputWhenFocusTarget(_boolean.valueOf(arg0))

    @override
    @overload
    def removePropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0, arg1)

    @override
    @overload
    def countComponents(self) -> int:
        """public int java.awt.Container.countComponents()"""
        return int._wrap(super(Container, self).countComponents()) 
 
 
# CLASS: com.badlogic.gdx.tools.flame.RegularEmitterPanel
from pyquantum_helper import import_once as _import_once
import javax.accessibility.AccessibleContext as AccessibleContext
import javax.swing.JToolTip as JToolTip
import java.awt.event.HierarchyBoundsListener as HierarchyBoundsListener
import java.awt.event.ActionListener as _ActionListener
_ActionListener = _ActionListener
import java.awt.ComponentOrientation as _ComponentOrientation
_ComponentOrientation = _ComponentOrientation
import java.awt.image.ImageProducer as ImageProducer
import java.awt.GraphicsConfiguration as GraphicsConfiguration
import java.awt.Graphics as _Graphics
_Graphics = _Graphics
import javax.swing.JToolTip as _JToolTip
_JToolTip = _JToolTip
import java.awt.Container as _Container
_Container = _Container
import java.awt.MenuComponent as MenuComponent
import java.awt.im.InputMethodRequests as _InputMethodRequests
_InputMethodRequests = _InputMethodRequests
import java.awt.FocusTraversalPolicy as _FocusTraversalPolicy
_FocusTraversalPolicy = _FocusTraversalPolicy
import java.lang.Byte as _byte
import java.awt.Dimension as Dimension
import java.awt.Font as _Font
_Font = _Font
import javax.swing.plaf.PanelUI as _PanelUI
_PanelUI = _PanelUI
import java.awt.event.ContainerListener as ContainerListener
import javax.swing.event.AncestorListener as AncestorListener
import java.awt.AWTEvent as AWTEvent
import javax.swing.JPanel as JPanel
import java.awt.image.ColorModel as _ColorModel
_ColorModel = _ColorModel
import java.lang.Object as _object
import java.awt.ComponentOrientation as ComponentOrientation
import java.awt.im.InputContext as _InputContext
_InputContext = _InputContext
from builtins import float
import java.awt.event.HierarchyListener as HierarchyListener
import java.awt.event.InputMethodListener as InputMethodListener
from typing import List
import java.awt.event.MouseWheelListener as _MouseWheelListener
_MouseWheelListener = _MouseWheelListener
import java.awt.event.KeyListener as KeyListener
import java.awt.Component as Component
from builtins import int
import java.awt.LayoutManager as LayoutManager
import java.awt.FontMetrics as _FontMetrics
_FontMetrics = _FontMetrics
import java.awt.Container as Container
from builtins import type
import java.awt.image.VolatileImage as _VolatileImage
_VolatileImage = _VolatileImage
import java.awt.Shape as Shape
import com.badlogic.gdx.tools.flame.EditorPanel as _EditorPanel
_EditorPanel = _EditorPanel
import java.awt.Rectangle as Rectangle
import java.awt.event.ContainerListener as _ContainerListener
_ContainerListener = _ContainerListener
import java.awt.event.HierarchyListener as _HierarchyListener
_HierarchyListener = _HierarchyListener
import java.lang.String as _string
import javax.swing.InputVerifier as _InputVerifier
_InputVerifier = _InputVerifier
import java.awt.Insets as _Insets
_Insets = _Insets
import javax.swing.border.Border as _Border
_Border = _Border
import java.awt.event.ComponentListener as _ComponentListener
_ComponentListener = _ComponentListener
import javax.swing.ActionMap as ActionMap
import java.beans.VetoableChangeListener as VetoableChangeListener
import java.awt.event.ComponentListener as ComponentListener
import javax.swing.KeyStroke as KeyStroke
import java.beans.VetoableChangeListener as _VetoableChangeListener
_VetoableChangeListener = _VetoableChangeListener
from builtins import object
import java.awt.event.KeyListener as _KeyListener
_KeyListener = _KeyListener
import java.awt.Component.BaselineResizeBehavior as BaselineResizeBehavior
import java.awt.Component as _Component_BaselineResizeBehavior
_BaselineResizeBehavior = _Component_BaselineResizeBehavior.BaselineResizeBehavior
import java.awt.Cursor as _Cursor
_Cursor = _Cursor
import java.awt.im.InputMethodRequests as InputMethodRequests
import java.lang.Long as _long
import javax.swing.JPanel as _JPanel
_JPanel = _JPanel
import java.awt.event.FocusListener as _FocusListener
_FocusListener = _FocusListener
import java.lang.Character as _char
import javax.swing.TransferHandler as TransferHandler
import java.awt.event.FocusEvent.Cause as Cause
import javax.swing.JComponent as JComponent
import javax.accessibility.AccessibleContext as _AccessibleContext
_AccessibleContext = _AccessibleContext
import java.awt.event.MouseWheelListener as MouseWheelListener
import java.util.Set as _Set
_Set = _Set
import java.awt.image.ColorModel as ColorModel
import java.lang.Boolean as _boolean
import java.awt.event.MouseMotionListener as MouseMotionListener
import java.util.EventListener as EventListener
import java.awt.Insets as Insets
import javax.swing.KeyStroke as _KeyStroke
_KeyStroke = _KeyStroke
import java.awt.GraphicsConfiguration as _GraphicsConfiguration
_GraphicsConfiguration = _GraphicsConfiguration
import java.awt.dnd.DropTarget as _DropTarget
_DropTarget = _DropTarget
from builtins import bool
import java.beans.PropertyChangeListener as _PropertyChangeListener
_PropertyChangeListener = _PropertyChangeListener
import java.awt.LayoutManager as _LayoutManager
_LayoutManager = _LayoutManager
import java.awt.PopupMenu as PopupMenu
import java.util.EventListener as _EventListener
_EventListener = _EventListener
import java.awt.im.InputContext as InputContext
import java.awt.Component as _Component
_Component = _Component
import java.awt.Font as Font
import java.awt.image.VolatileImage as VolatileImage
import java.awt.dnd.DropTarget as DropTarget
import java.lang.String as _String
_String = _String
import java.lang.Float as _float
import java.awt.Cursor as Cursor
import java.awt.event.MouseListener as _MouseListener
_MouseListener = _MouseListener
import java.awt.Toolkit as _Toolkit
_Toolkit = _Toolkit
import java.io.PrintStream as PrintStream
import javax.swing.JRootPane as _JRootPane
_JRootPane = _JRootPane
import java.awt.Dimension as _Dimension
_Dimension = _Dimension
import java.awt.event.ActionListener as ActionListener
import java.awt.event.MouseEvent as MouseEvent
import java.awt.Color as _Color
_Color = _Color
import com.badlogic.gdx.tools.flame.RegularEmitterPanel as _RegularEmitterPanel
_RegularEmitterPanel = _RegularEmitterPanel
import javax.swing.JPopupMenu as _JPopupMenu
_JPopupMenu = _JPopupMenu
import javax.swing.InputMap as _InputMap
_InputMap = _InputMap
import java.awt.event.MouseListener as MouseListener
import java.lang.Class as _Class
_Class = _Class
import java.util.Locale as Locale
import java.lang.Double as _double
import javax.swing.plaf.PanelUI as PanelUI
import java.awt.Point as _Point
_Point = _Point
import java.lang.Object as _Object
_Object = _Object
import java.beans.PropertyChangeListener as PropertyChangeListener
import javax.swing.border.Border as Border
import javax.swing.JComponent as _JComponent
_JComponent = _JComponent
import javax.swing.InputVerifier as InputVerifier
import java.io.PrintWriter as PrintWriter
import java.awt.Point as Point
import javax.swing.event.AncestorListener as _AncestorListener
_AncestorListener = _AncestorListener
import java.lang.Short as _short
import java.awt.Toolkit as Toolkit
import java.awt.event.HierarchyBoundsListener as _HierarchyBoundsListener
_HierarchyBoundsListener = _HierarchyBoundsListener
import javax.swing.TransferHandler as _TransferHandler
_TransferHandler = _TransferHandler
import javax.swing.InputMap as InputMap
import java.awt.Rectangle as _Rectangle
_Rectangle = _Rectangle
import javax.swing.JRootPane as JRootPane
import java.awt.Event as Event
try:
    from pygdx.graphics.g3d.particles import emitters
except ImportError:
    emitters = _import_once("pygdx.graphics.g3d.particles.emitters")

import java.awt.event.FocusListener as FocusListener
import java.awt.image.ImageObserver as ImageObserver
from builtins import str
from pyquantum_helper import override
import javax.swing.ActionMap as _ActionMap
_ActionMap = _ActionMap
import java.awt.FocusTraversalPolicy as FocusTraversalPolicy
import java.awt.event.MouseMotionListener as _MouseMotionListener
_MouseMotionListener = _MouseMotionListener
import java.awt.event.InputMethodListener as _InputMethodListener
_InputMethodListener = _InputMethodListener
import javax.swing.JPopupMenu as JPopupMenu
import java.util.Set as Set
import java.lang.Integer as _int
import java.awt.Image as _Image
_Image = _Image
import java.awt.FontMetrics as FontMetrics
import java.awt.Color as Color
import java.awt.Image as Image
import java.awt.Graphics as Graphics
import java.awt.ImageCapabilities as ImageCapabilities
import java.util.Locale as _Locale
_Locale = _Locale
 
class RegularEmitterPanel():
    """com.badlogic.gdx.tools.flame.RegularEmitterPanel"""
 
    @staticmethod
    def _wrap(java_value: _RegularEmitterPanel) -> 'RegularEmitterPanel':
        return RegularEmitterPanel(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _RegularEmitterPanel):
        """
        Dynamic initializer for RegularEmitterPanel.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_RegularEmitterPanel__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_RegularEmitterPanel__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def removeVetoableChangeListener(self, arg0: 'VetoableChangeListener'):
        """public synchronized void javax.swing.JComponent.removeVetoableChangeListener(java.beans.VetoableChangeListener)"""
        super(_JComponent, self).removeVetoableChangeListener(arg0)

    @override
    @overload
    def getComponents(self) -> List['Component']:
        """public java.awt.Component[] java.awt.Container.getComponents()"""
        return List['Component']._wrap(super(Container, self).getComponents())

    @override
    @overload
    def setDebugGraphicsOptions(self, arg0: int):
        """public void javax.swing.JComponent.setDebugGraphicsOptions(int)"""
        super(_JComponent, self).setDebugGraphicsOptions(_int.valueOf(arg0))

    @override
    @overload
    def isValid(self) -> bool:
        """public boolean java.awt.Component.isValid()"""
        return bool._wrap(super(Component, self).isValid())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def getDefaultLocale() -> 'Locale':
        """public static java.util.Locale javax.swing.JComponent.getDefaultLocale()"""
        return Locale._wrap(_JComponent.getDefaultLocale())

    @override
    @overload
    def getInputVerifier(self) -> 'InputVerifier':
        """public javax.swing.InputVerifier javax.swing.JComponent.getInputVerifier()"""
        return 'InputVerifier'._wrap(super(JComponent, self).getInputVerifier())

    @override
    @overload
    def list(self, arg0: 'PrintStream', arg1: int):
        """public void java.awt.Container.list(java.io.PrintStream,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @override
    @overload
    def setUI(self, arg0: 'PanelUI'):
        """public void javax.swing.JPanel.setUI(javax.swing.plaf.PanelUI)"""
        super(_JPanel, self).setUI(arg0)

    @override
    @overload
    def getFocusTraversalPolicy(self) -> 'FocusTraversalPolicy':
        """public java.awt.FocusTraversalPolicy java.awt.Container.getFocusTraversalPolicy()"""
        return 'FocusTraversalPolicy'._wrap(super(Container, self).getFocusTraversalPolicy())

    @override
    @overload
    def getParent(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getParent()"""
        return 'Container'._wrap(super(Component, self).getParent())

    @override
    @overload
    def paintImmediately(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.paintImmediately(java.awt.Rectangle)"""
        super(_JComponent, self).paintImmediately(arg0)

    @staticmethod
    @overload
    def setDefaultLocale(arg0: 'Locale'):
        """public static void javax.swing.JComponent.setDefaultLocale(java.util.Locale)"""
        _JComponent.setDefaultLocale(arg0)

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,float,float)"""
        super(_Component, self).firePropertyChange(arg0, _float.valueOf(arg1), _float.valueOf(arg2))

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object)"""
        super(_Container, self).add(arg0, arg1)

    @override
    @overload
    def getLocale(self) -> 'Locale':
        """public java.util.Locale java.awt.Component.getLocale()"""
        return 'Locale'._wrap(super(Component, self).getLocale())

    @override
    @overload
    def setInheritsPopupMenu(self, arg0: bool):
        """public void javax.swing.JComponent.setInheritsPopupMenu(boolean)"""
        super(_JComponent, self).setInheritsPopupMenu(_boolean.valueOf(arg0))

    @override
    @overload
    def getHierarchyListeners(self) -> List['HierarchyListener']:
        """public synchronized java.awt.event.HierarchyListener[] java.awt.Component.getHierarchyListeners()"""
        return List['HierarchyListener']._wrap(super(Component, self).getHierarchyListeners())

    @override
    @overload
    def nextFocus(self):
        """public void java.awt.Component.nextFocus()"""
        super(Component, self).nextFocus()

    @override
    @overload
    def isPaintingTile(self) -> bool:
        """public boolean javax.swing.JComponent.isPaintingTile()"""
        return bool._wrap(super(JComponent, self).isPaintingTile())

    @override
    @overload
    def getContentPanel(self) -> 'JPanel':
        """public javax.swing.JPanel com.badlogic.gdx.tools.flame.EditorPanel.getContentPanel()"""
        return 'JPanel'._wrap(super(EditorPanel, self).getContentPanel())

    @override
    @overload
    def isDisplayable(self) -> bool:
        """public boolean java.awt.Component.isDisplayable()"""
        return bool._wrap(super(Component, self).isDisplayable())

    @override
    @overload
    def getBounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.getBounds()"""
        return 'Rectangle'._wrap(super(Component, self).getBounds())

    @override
    @overload
    def removeMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.removeMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).removeMouseMotionListener(arg0)

    @override
    @overload
    def isShowing(self) -> bool:
        """public boolean java.awt.Component.isShowing()"""
        return bool._wrap(super(Component, self).isShowing())

    @override
    @overload
    def getDropTarget(self) -> 'DropTarget':
        """public synchronized java.awt.dnd.DropTarget java.awt.Component.getDropTarget()"""
        return 'DropTarget'._wrap(super(Component, self).getDropTarget())

    @override
    @overload
    def isFontSet(self) -> bool:
        """public boolean java.awt.Component.isFontSet()"""
        return bool._wrap(super(Component, self).isFontSet())

    @overload
    def mouseUp(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseUp(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseUp(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def setIgnoreRepaint(self, arg0: bool):
        """public void java.awt.Component.setIgnoreRepaint(boolean)"""
        super(_Component, self).setIgnoreRepaint(_boolean.valueOf(arg0))

    @override
    @overload
    def getPropertyChangeListeners(self) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners()"""
        return List['PropertyChangeListener']._wrap(super(Component, self).getPropertyChangeListeners())

    @override
    @overload
    def isBackgroundSet(self) -> bool:
        """public boolean java.awt.Component.isBackgroundSet()"""
        return bool._wrap(super(Component, self).isBackgroundSet())

    @override
    @overload
    def getLocation(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocation()"""
        return 'Point'._wrap(super(Component, self).getLocation())

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int._wrap(super(object, self).hashCode())

    @overload
    def __init__(self, arg0: 'FlameMain', arg1: 'RegularEmitter'):
        """public com.badlogic.gdx.tools.flame.RegularEmitterPanel(com.badlogic.gdx.tools.flame.FlameMain,com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter)"""
        val = _RegularEmitterPanel(arg0, arg1)
        self.__wrapper = val

    @override
    @overload
    def location(self) -> 'Point':
        """public java.awt.Point java.awt.Component.location()"""
        return 'Point'._wrap(super(Component, self).location())

    @override
    @overload
    def getComponentOrientation(self) -> 'ComponentOrientation':
        """public java.awt.ComponentOrientation java.awt.Component.getComponentOrientation()"""
        return 'ComponentOrientation'._wrap(super(Component, self).getComponentOrientation())

    @override
    @overload
    def addHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.addHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).addHierarchyListener(arg0)

    @override
    @overload
    def getInheritsPopupMenu(self) -> bool:
        """public boolean javax.swing.JComponent.getInheritsPopupMenu()"""
        return bool._wrap(super(JComponent, self).getInheritsPopupMenu())

    @override
    @overload
    def setComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Component.setComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Component, self).setComponentOrientation(arg0)

    @override
    @overload
    def getFocusCycleRootAncestor(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getFocusCycleRootAncestor()"""
        return 'Container'._wrap(super(Component, self).getFocusCycleRootAncestor())

    @override
    @overload
    def show(self, arg0: bool):
        """public void java.awt.Component.show(boolean)"""
        super(_Component, self).show(_boolean.valueOf(arg0))

    @staticmethod
    @overload
    def addContent(arg0: 'JPanel', arg1: int, arg2: int, arg3: 'JComponent', arg4: bool, arg5: int, arg6: int, arg7: float, arg8: float):
        """public static void com.badlogic.gdx.tools.flame.EditorPanel.addContent(javax.swing.JPanel,int,int,javax.swing.JComponent,boolean,int,int,float,float)"""
        _EditorPanel.addContent(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3, _boolean.valueOf(arg4), _int.valueOf(arg5), _int.valueOf(arg6), _float.valueOf(arg7), _float.valueOf(arg8))

    @override
    @overload
    def grabFocus(self):
        """public void javax.swing.JComponent.grabFocus()"""
        super(JComponent, self).grabFocus()

    @overload
    def locate(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.locate(int,int)"""
        return 'Component'._wrap(super(_Container, self).locate(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def isPaintingForPrint(self) -> bool:
        """public final boolean javax.swing.JComponent.isPaintingForPrint()"""
        return bool._wrap(super(JComponent, self).isPaintingForPrint())

    @overload
    def keyDown(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyDown(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyDown(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,int,int)"""
        super(_JComponent, self).firePropertyChange(arg0, _int.valueOf(arg1), _int.valueOf(arg2))

    @override
    @overload
    def getLayout(self) -> 'LayoutManager':
        """public java.awt.LayoutManager java.awt.Container.getLayout()"""
        return 'LayoutManager'._wrap(super(Container, self).getLayout())

    @override
    @overload
    def preferredSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.preferredSize()"""
        return 'Dimension'._wrap(super(Container, self).preferredSize())

    @override
    @overload
    def addNotify(self):
        """public void javax.swing.JComponent.addNotify()"""
        super(JComponent, self).addNotify()

    @override
    @overload
    def setSize(self, arg0: int, arg1: int):
        """public void java.awt.Component.setSize(int,int)"""
        super(_Component, self).setSize(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.repaint(int,int,int,int)"""
        super(_Component, self).repaint(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @overload
    def requestFocusInWindow(self, arg0: 'Cause') -> bool:
        """public boolean java.awt.Component.requestFocusInWindow(java.awt.event.FocusEvent$Cause)"""
        return bool._wrap(super(_Component, self).requestFocusInWindow(arg0))

    @override
    @overload
    def remove(self, arg0: int):
        """public void java.awt.Container.remove(int)"""
        super(_Container, self).remove(_int.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,long,long)"""
        super(_Component, self).firePropertyChange(arg0, _long.valueOf(arg1), _long.valueOf(arg2))

    @override
    @overload
    def update(self, arg0: 'FlameMain'):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.update(com.badlogic.gdx.tools.flame.FlameMain)"""
        super(_EditorPanel, self).update(arg0)

    @override
    @overload
    def setFocusCycleRoot(self, arg0: bool):
        """public void java.awt.Container.setFocusCycleRoot(boolean)"""
        super(_Container, self).setFocusCycleRoot(_boolean.valueOf(arg0))

    @overload
    def keyUp(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyUp(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyUp(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def setBackground(self, arg0: 'Color'):
        """public void javax.swing.JComponent.setBackground(java.awt.Color)"""
        super(_JComponent, self).setBackground(arg0)

    @override
    @overload
    def doLayout(self):
        """public void java.awt.Container.doLayout()"""
        super(Container, self).doLayout()

    @override
    @overload
    def enable(self):
        """public void javax.swing.JComponent.enable()"""
        super(JComponent, self).enable()

    @override
    @overload
    def getInsets(self) -> 'Insets':
        """public java.awt.Insets javax.swing.JComponent.getInsets()"""
        return 'Insets'._wrap(super(JComponent, self).getInsets())

    @override
    @overload
    def setNextFocusableComponent(self, arg0: 'Component'):
        """public void javax.swing.JComponent.setNextFocusableComponent(java.awt.Component)"""
        super(_JComponent, self).setNextFocusableComponent(arg0)

    @override
    @overload
    def getAlignmentY(self) -> float:
        """public float javax.swing.JComponent.getAlignmentY()"""
        return float._wrap(super(JComponent, self).getAlignmentY())

    @overload
    def checkImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @override
    @overload
    def getFocusTraversalKeysEnabled(self) -> bool:
        """public boolean java.awt.Component.getFocusTraversalKeysEnabled()"""
        return bool._wrap(super(Component, self).getFocusTraversalKeysEnabled())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getRootPane(self) -> 'JRootPane':
        """public javax.swing.JRootPane javax.swing.JComponent.getRootPane()"""
        return 'JRootPane'._wrap(super(JComponent, self).getRootPane())

    @override
    @overload
    def invalidate(self):
        """public void java.awt.Container.invalidate()"""
        super(Container, self).invalidate()

    @override
    @overload
    def resetKeyboardActions(self):
        """public void javax.swing.JComponent.resetKeyboardActions()"""
        super(JComponent, self).resetKeyboardActions()

    @overload
    def getComponent(self, arg0: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponent(int)"""
        return 'Component'._wrap(super(_Container, self).getComponent(_int.valueOf(arg0)))

    @override
    @overload
    def setName(self, arg0: str):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setName(java.lang.String)"""
        super(_EditorPanel, self).setName(arg0)

    @override
    @overload
    def addPropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Container.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Container, self).addPropertyChangeListener(arg0, arg1)

    @override
    @overload
    def setInputMap(self, arg0: int, arg1: 'InputMap'):
        """public final void javax.swing.JComponent.setInputMap(int,javax.swing.InputMap)"""
        super(_JComponent, self).setInputMap(_int.valueOf(arg0), arg1)

    @override
    @overload
    def removePropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0)

    @override
    @overload
    def applyComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Container.applyComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Container, self).applyComponentOrientation(arg0)

    @override
    @overload
    def setBorder(self, arg0: 'Border'):
        """public void javax.swing.JComponent.setBorder(javax.swing.border.Border)"""
        super(_JComponent, self).setBorder(arg0)

    @override
    @overload
    def remove(self, arg0: 'MenuComponent'):
        """public void java.awt.Component.remove(java.awt.MenuComponent)"""
        super(_Component, self).remove(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintStream'):
        """public void java.awt.Component.list(java.io.PrintStream)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def removeMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.removeMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).removeMouseListener(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintWriter'):
        """public void java.awt.Component.list(java.io.PrintWriter)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def getKeyListeners(self) -> List['KeyListener']:
        """public synchronized java.awt.event.KeyListener[] java.awt.Component.getKeyListeners()"""
        return List['KeyListener']._wrap(super(Component, self).getKeyListeners())

    @override
    @overload
    def getInputContext(self) -> 'InputContext':
        """public java.awt.im.InputContext java.awt.Component.getInputContext()"""
        return 'InputContext'._wrap(super(Component, self).getInputContext())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,double,double)"""
        super(_Component, self).firePropertyChange(arg0, _double.valueOf(arg1), _double.valueOf(arg2))

    @override
    @overload
    def removeAncestorListener(self, arg0: 'AncestorListener'):
        """public void javax.swing.JComponent.removeAncestorListener(javax.swing.event.AncestorListener)"""
        super(_JComponent, self).removeAncestorListener(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintWriter', arg1: int):
        """public void java.awt.Container.list(java.io.PrintWriter,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @overload
    def checkImage(self, arg0: 'Image', arg1: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, arg1))

    @override
    @overload
    def removeFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.removeFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).removeFocusListener(arg0)

    @overload
    def mouseDown(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDown(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDown(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def setIsAlwayShown(self, arg0: bool):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setIsAlwayShown(boolean)"""
        super(_EditorPanel, self).setIsAlwayShown(_boolean.valueOf(arg0))

    @overload
    def getConditionForKeyStroke(self, arg0: 'KeyStroke') -> int:
        """public int javax.swing.JComponent.getConditionForKeyStroke(javax.swing.KeyStroke)"""
        return int._wrap(super(_JComponent, self).getConditionForKeyStroke(arg0))

    @override
    @overload
    def getTreeLock(self) -> object:
        """public final java.lang.Object java.awt.Component.getTreeLock()"""
        return object._wrap(super(Component, self).getTreeLock())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @override
    @overload
    def addVetoableChangeListener(self, arg0: 'VetoableChangeListener'):
        """public synchronized void javax.swing.JComponent.addVetoableChangeListener(java.beans.VetoableChangeListener)"""
        super(_JComponent, self).addVetoableChangeListener(arg0)

    @overload
    def contains(self, arg0: 'Point') -> bool:
        """public boolean java.awt.Component.contains(java.awt.Point)"""
        return bool._wrap(super(_Component, self).contains(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,short,short)"""
        super(_Component, self).firePropertyChange(arg0, _short.valueOf(arg1), _short.valueOf(arg2))

    @override
    @overload
    def dispatchEvent(self, arg0: 'AWTEvent'):
        """public final void java.awt.Component.dispatchEvent(java.awt.AWTEvent)"""
        super(_Component, self).dispatchEvent(arg0)

    @override
    @overload
    def removeContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.removeContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).removeContainerListener(arg0)

    @override
    @overload
    def getGraphicsConfiguration(self) -> 'GraphicsConfiguration':
        """public java.awt.GraphicsConfiguration java.awt.Component.getGraphicsConfiguration()"""
        return 'GraphicsConfiguration'._wrap(super(Component, self).getGraphicsConfiguration())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: bool, arg2: bool):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,boolean,boolean)"""
        super(_JComponent, self).firePropertyChange(arg0, _boolean.valueOf(arg1), _boolean.valueOf(arg2))

    @override
    @overload
    def registerKeyboardAction(self, arg0: 'ActionListener', arg1: str, arg2: 'KeyStroke', arg3: int):
        """public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,java.lang.String,javax.swing.KeyStroke,int)"""
        super(_JComponent, self).registerKeyboardAction(arg0, arg1, arg2, _int.valueOf(arg3))

    @overload
    def findComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(arg0))

    @override
    @overload
    def resize(self, arg0: int, arg1: int):
        """public void java.awt.Component.resize(int,int)"""
        super(_Component, self).resize(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getHeight(self) -> int:
        """public int javax.swing.JComponent.getHeight()"""
        return int._wrap(super(JComponent, self).getHeight())

    @override
    @overload
    def getTransferHandler(self) -> 'TransferHandler':
        """public javax.swing.TransferHandler javax.swing.JComponent.getTransferHandler()"""
        return 'TransferHandler'._wrap(super(JComponent, self).getTransferHandler())

    @overload
    def imageUpdate(self, arg0: 'Image', arg1: int, arg2: int, arg3: int, arg4: int, arg5: int) -> bool:
        """public boolean java.awt.Component.imageUpdate(java.awt.Image,int,int,int,int,int)"""
        return bool._wrap(super(_Component, self).imageUpdate(arg0, _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4), _int.valueOf(arg5)))

    @override
    @overload
    def getWidth(self) -> int:
        """public int javax.swing.JComponent.getWidth()"""
        return int._wrap(super(JComponent, self).getWidth())

    @override
    @overload
    def transferFocusBackward(self):
        """public void java.awt.Component.transferFocusBackward()"""
        super(Component, self).transferFocusBackward()

    @overload
    def getPropertyChangeListeners(self, arg0: str) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners(java.lang.String)"""
        return List['PropertyChangeListener']._wrap(super(_Component, self).getPropertyChangeListeners(arg0))

    @override
    @overload
    def getName(self) -> str:
        """public java.lang.String com.badlogic.gdx.tools.flame.EditorPanel.getName()"""
        return str._wrap(super(EditorPanel, self).getName())

    @staticmethod
    @overload
    def isLightweightComponent(arg0: 'Component') -> bool:
        """public static boolean javax.swing.JComponent.isLightweightComponent(java.awt.Component)"""
        return bool._wrap(_JComponent.isLightweightComponent(arg0))

    @override
    @overload
    def getBorder(self) -> 'Border':
        """public javax.swing.border.Border javax.swing.JComponent.getBorder()"""
        return 'Border'._wrap(super(JComponent, self).getBorder())

    @override
    @overload
    def printAll(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.printAll(java.awt.Graphics)"""
        super(_JComponent, self).printAll(arg0)

    @override
    @overload
    def addComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.addComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).addComponentListener(arg0)

    @override
    @overload
    def getBaselineResizeBehavior(self) -> 'BaselineResizeBehavior.Component$BaselineResizeBehavior':
        """public java.awt.Component$BaselineResizeBehavior javax.swing.JComponent.getBaselineResizeBehavior()"""
        return 'BaselineResizeBehavior.Component$BaselineResizeBehavior'._wrap(super(JComponent, self).getBaselineResizeBehavior())

    @override
    @overload
    def print(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.print(java.awt.Graphics)"""
        super(_JComponent, self).print(arg0)

    @override
    @overload
    def setInputVerifier(self, arg0: 'InputVerifier'):
        """public void javax.swing.JComponent.setInputVerifier(javax.swing.InputVerifier)"""
        super(_JComponent, self).setInputVerifier(arg0)

    @override
    @overload
    def addAncestorListener(self, arg0: 'AncestorListener'):
        """public void javax.swing.JComponent.addAncestorListener(javax.swing.event.AncestorListener)"""
        super(_JComponent, self).addAncestorListener(arg0)

    @override
    @overload
    def getFont(self) -> 'Font':
        """public java.awt.Font java.awt.Component.getFont()"""
        return 'Font'._wrap(super(Component, self).getFont())

    @override
    @overload
    def setFont(self, arg0: 'Font'):
        """public void javax.swing.JComponent.setFont(java.awt.Font)"""
        super(_JComponent, self).setFont(arg0)

    @override
    @overload
    def isOptimizedDrawingEnabled(self) -> bool:
        """public boolean javax.swing.JComponent.isOptimizedDrawingEnabled()"""
        return bool._wrap(super(JComponent, self).isOptimizedDrawingEnabled())

    @override
    @overload
    def isValidateRoot(self) -> bool:
        """public boolean javax.swing.JComponent.isValidateRoot()"""
        return bool._wrap(super(JComponent, self).isValidateRoot())

    @overload
    def prepareImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @override
    @overload
    def setHasAdvanced(self, arg0: bool):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setHasAdvanced(boolean)"""
        super(_EditorPanel, self).setHasAdvanced(_boolean.valueOf(arg0))

    @override
    @overload
    def setForeground(self, arg0: 'Color'):
        """public void javax.swing.JComponent.setForeground(java.awt.Color)"""
        super(_JComponent, self).setForeground(arg0)

    @overload
    def mouseDrag(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDrag(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDrag(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def isOpaque(self) -> bool:
        """public boolean javax.swing.JComponent.isOpaque()"""
        return bool._wrap(super(JComponent, self).isOpaque())

    @overload
    def createVolatileImage(self, arg0: int, arg1: int, arg2: 'ImageCapabilities') -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int,java.awt.ImageCapabilities) throws java.awt.AWTException"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1), arg2))

    @override
    @overload
    def bounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.bounds()"""
        return 'Rectangle'._wrap(super(Component, self).bounds())

    @override
    @overload
    def update(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.update(java.awt.Graphics)"""
        super(_JComponent, self).update(arg0)

    @override
    @overload
    def add(self, arg0: 'PopupMenu'):
        """public void java.awt.Component.add(java.awt.PopupMenu)"""
        super(_Component, self).add(arg0)

    @override
    @overload
    def getToolTipText(self) -> str:
        """public java.lang.String javax.swing.JComponent.getToolTipText()"""
        return str._wrap(super(JComponent, self).getToolTipText())

    @override
    @overload
    def isVisible(self) -> bool:
        """public boolean java.awt.Component.isVisible()"""
        return bool._wrap(super(Component, self).isVisible())

    @override
    @overload
    def setDropTarget(self, arg0: 'DropTarget'):
        """public synchronized void java.awt.Component.setDropTarget(java.awt.dnd.DropTarget)"""
        super(_Component, self).setDropTarget(arg0)

    @override
    @overload
    def getLocationOnScreen(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocationOnScreen()"""
        return 'Point'._wrap(super(Component, self).getLocationOnScreen())

    @override
    @overload
    def getY(self) -> int:
        """public int javax.swing.JComponent.getY()"""
        return int._wrap(super(JComponent, self).getY())

    @overload
    def getComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def isMaximumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMaximumSizeSet()"""
        return bool._wrap(super(Component, self).isMaximumSizeSet())

    @override
    @overload
    def setAlignmentY(self, arg0: float):
        """public void javax.swing.JComponent.setAlignmentY(float)"""
        super(_JComponent, self).setAlignmentY(_float.valueOf(arg0))

    @override
    @overload
    def getRegisteredKeyStrokes(self) -> List['KeyStroke']:
        """public javax.swing.KeyStroke[] javax.swing.JComponent.getRegisteredKeyStrokes()"""
        return List['KeyStroke']._wrap(super(JComponent, self).getRegisteredKeyStrokes())

    @override
    @overload
    def isFocusable(self) -> bool:
        """public boolean java.awt.Component.isFocusable()"""
        return bool._wrap(super(Component, self).isFocusable())

    @override
    @overload
    def isFocusTraversalPolicyProvider(self) -> bool:
        """public final boolean java.awt.Container.isFocusTraversalPolicyProvider()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicyProvider())

    @override
    @overload
    def getMouseListeners(self) -> List['MouseListener']:
        """public synchronized java.awt.event.MouseListener[] java.awt.Component.getMouseListeners()"""
        return List['MouseListener']._wrap(super(Component, self).getMouseListeners())

    @override
    @overload
    def setValue(self, arg0: object):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setValue(T)"""
        super(_EditorPanel, self).setValue(arg0)

    @override
    @overload
    def registerKeyboardAction(self, arg0: 'ActionListener', arg1: 'KeyStroke', arg2: int):
        """public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,javax.swing.KeyStroke,int)"""
        super(_JComponent, self).registerKeyboardAction(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def transferFocusUpCycle(self):
        """public void java.awt.Component.transferFocusUpCycle()"""
        super(Component, self).transferFocusUpCycle()

    @override
    @overload
    def removeKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.removeKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).removeKeyListener(arg0)

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: str, arg2: str):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,char,char)"""
        super(_JComponent, self).firePropertyChange(arg0, _char.valueOf(arg1), _char.valueOf(arg2))

    @override
    @overload
    def getMouseMotionListeners(self) -> List['MouseMotionListener']:
        """public synchronized java.awt.event.MouseMotionListener[] java.awt.Component.getMouseMotionListeners()"""
        return List['MouseMotionListener']._wrap(super(Component, self).getMouseMotionListeners())

    @override
    @overload
    def getAutoscrolls(self) -> bool:
        """public boolean javax.swing.JComponent.getAutoscrolls()"""
        return bool._wrap(super(JComponent, self).getAutoscrolls())

    @override
    @overload
    def addContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.addContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).addContainerListener(arg0)

    @override
    @overload
    def isFocusTraversable(self) -> bool:
        """public boolean java.awt.Component.isFocusTraversable()"""
        return bool._wrap(super(Component, self).isFocusTraversable())

    @overload
    def mouseExit(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseExit(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseExit(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getBounds(self, arg0: 'Rectangle') -> 'Rectangle':
        """public java.awt.Rectangle javax.swing.JComponent.getBounds(java.awt.Rectangle)"""
        return 'Rectangle'._wrap(super(_JComponent, self).getBounds(arg0))

    @override
    @overload
    def setToolTipText(self, arg0: str):
        """public void javax.swing.JComponent.setToolTipText(java.lang.String)"""
        super(_JComponent, self).setToolTipText(arg0)

    @override
    @overload
    def setAutoscrolls(self, arg0: bool):
        """public void javax.swing.JComponent.setAutoscrolls(boolean)"""
        super(_JComponent, self).setAutoscrolls(_boolean.valueOf(arg0))

    @override
    @overload
    def setComponentPopupMenu(self, arg0: 'JPopupMenu'):
        """public void javax.swing.JComponent.setComponentPopupMenu(javax.swing.JPopupMenu)"""
        super(_JComponent, self).setComponentPopupMenu(arg0)

    @override
    @overload
    def setMixingCutoutShape(self, arg0: 'Shape'):
        """public void java.awt.Component.setMixingCutoutShape(java.awt.Shape)"""
        super(_Component, self).setMixingCutoutShape(arg0)

    @override
    @overload
    def getVisibleRect(self) -> 'Rectangle':
        """public java.awt.Rectangle javax.swing.JComponent.getVisibleRect()"""
        return 'Rectangle'._wrap(super(JComponent, self).getVisibleRect())

    @override
    @overload
    def requestFocus(self, arg0: 'Cause'):
        """public void java.awt.Component.requestFocus(java.awt.event.FocusEvent$Cause)"""
        super(_Component, self).requestFocus(arg0)

    @overload
    def createImage(self, arg0: int, arg1: int) -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(int,int)"""
        return 'Image'._wrap(super(_Component, self).createImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def putClientProperty(self, arg0: object, arg1: object):
        """public final void javax.swing.JComponent.putClientProperty(java.lang.Object,java.lang.Object)"""
        super(_JComponent, self).putClientProperty(arg0, arg1)

    @override
    @overload
    def getVetoableChangeListeners(self) -> List['VetoableChangeListener']:
        """public synchronized java.beans.VetoableChangeListener[] javax.swing.JComponent.getVetoableChangeListeners()"""
        return List['VetoableChangeListener']._wrap(super(JComponent, self).getVetoableChangeListeners())

    @override
    @overload
    def scrollRectToVisible(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.scrollRectToVisible(java.awt.Rectangle)"""
        super(_JComponent, self).scrollRectToVisible(arg0)

    @override
    @overload
    def getTopLevelAncestor(self) -> 'Container':
        """public java.awt.Container javax.swing.JComponent.getTopLevelAncestor()"""
        return 'Container'._wrap(super(JComponent, self).getTopLevelAncestor())

    @override
    @overload
    def isRequestFocusEnabled(self) -> bool:
        """public boolean javax.swing.JComponent.isRequestFocusEnabled()"""
        return bool._wrap(super(JComponent, self).isRequestFocusEnabled())

    @override
    @overload
    def getFocusListeners(self) -> List['FocusListener']:
        """public synchronized java.awt.event.FocusListener[] java.awt.Component.getFocusListeners()"""
        return List['FocusListener']._wrap(super(Component, self).getFocusListeners())

    @override
    @overload
    def setLayout(self, arg0: 'LayoutManager'):
        """public void java.awt.Container.setLayout(java.awt.LayoutManager)"""
        super(_Container, self).setLayout(arg0)

    @overload
    def add(self, arg0: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0))

    @override
    @overload
    def getMouseWheelListeners(self) -> List['MouseWheelListener']:
        """public synchronized java.awt.event.MouseWheelListener[] java.awt.Component.getMouseWheelListeners()"""
        return List['MouseWheelListener']._wrap(super(Component, self).getMouseWheelListeners())

    @override
    @overload
    def reshape(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void javax.swing.JComponent.reshape(int,int,int,int)"""
        super(_JComponent, self).reshape(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def setTransferHandler(self, arg0: 'TransferHandler'):
        """public void javax.swing.JComponent.setTransferHandler(javax.swing.TransferHandler)"""
        super(_JComponent, self).setTransferHandler(arg0)

    @override
    @overload
    def getPreferredSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getPreferredSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getPreferredSize())

    @override
    @overload
    def setLocation(self, arg0: int, arg1: int):
        """public void java.awt.Component.setLocation(int,int)"""
        super(_Component, self).setLocation(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def removeInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.removeInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).removeInputMethodListener(arg0)

    @override
    @overload
    def setFocusable(self, arg0: bool):
        """public void java.awt.Component.setFocusable(boolean)"""
        super(_Component, self).setFocusable(_boolean.valueOf(arg0))

    @override
    @overload
    def paintComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.paintComponents(java.awt.Graphics)"""
        super(_Container, self).paintComponents(arg0)

    @override
    @overload
    def addFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.addFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).addFocusListener(arg0)

    @overload
    def prepareImage(self, arg0: 'Image', arg1: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, arg1))

    @override
    @overload
    def addKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.addKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).addKeyListener(arg0)

    @override
    @overload
    def resize(self, arg0: 'Dimension'):
        """public void java.awt.Component.resize(java.awt.Dimension)"""
        super(_Component, self).resize(arg0)

    @override
    @overload
    def setComponentZOrder(self, arg0: 'Component', arg1: int):
        """public void java.awt.Container.setComponentZOrder(java.awt.Component,int)"""
        super(_Container, self).setComponentZOrder(arg0, _int.valueOf(arg1))

    @override
    @overload
    def list(self):
        """public void java.awt.Component.list()"""
        super(Component, self).list()

    @overload
    def add(self, arg0: str, arg1: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.lang.String,java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, arg1))

    @override
    @overload
    def paintImmediately(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void javax.swing.JComponent.paintImmediately(int,int,int,int)"""
        super(_JComponent, self).paintImmediately(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def getMinimumSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getMinimumSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getMinimumSize())

    @override
    @overload
    def setEnabled(self, arg0: bool):
        """public void javax.swing.JComponent.setEnabled(boolean)"""
        super(_JComponent, self).setEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def hasFocus(self) -> bool:
        """public boolean java.awt.Component.hasFocus()"""
        return bool._wrap(super(Component, self).hasFocus())

    @overload
    def createVolatileImage(self, arg0: int, arg1: int) -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int)"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.removeHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).removeHierarchyListener(arg0)

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.awt.Component.toString()"""
        return str._wrap(super(Component, self).toString())

    @override
    @overload
    def addMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.addMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).addMouseListener(arg0)

    @override
    @overload
    def isFocusOwner(self) -> bool:
        """public boolean java.awt.Component.isFocusOwner()"""
        return bool._wrap(super(Component, self).isFocusOwner())

    @override
    @overload
    def getAccessibleContext(self) -> 'AccessibleContext':
        """public javax.accessibility.AccessibleContext javax.swing.JPanel.getAccessibleContext()"""
        return 'AccessibleContext'._wrap(super(JPanel, self).getAccessibleContext())

    @overload
    def postEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.postEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).postEvent(arg0))

    @overload
    def getLocation(self, arg0: 'Point') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getLocation(java.awt.Point)"""
        return 'Point'._wrap(super(_JComponent, self).getLocation(arg0))

    @overload
    def getBaseline(self, arg0: int, arg1: int) -> int:
        """public int javax.swing.JComponent.getBaseline(int,int)"""
        return int._wrap(super(_JComponent, self).getBaseline(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def findComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeNotify(self):
        """public void javax.swing.JComponent.removeNotify()"""
        super(JComponent, self).removeNotify()

    @override
    @overload
    def getForeground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getForeground()"""
        return 'Color'._wrap(super(Component, self).getForeground())

    @override
    @overload
    def show(self):
        """public void java.awt.Component.show()"""
        super(Component, self).show()

    @override
    @overload
    def isDoubleBuffered(self) -> bool:
        """public boolean javax.swing.JComponent.isDoubleBuffered()"""
        return bool._wrap(super(JComponent, self).isDoubleBuffered())

    @override
    @overload
    def setDescription(self, arg0: str):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setDescription(java.lang.String)"""
        super(_EditorPanel, self).setDescription(arg0)

    @override
    @overload
    def isFocusCycleRoot(self) -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot()"""
        return bool._wrap(super(Container, self).isFocusCycleRoot())

    @override
    @overload
    def addMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.addMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).addMouseWheelListener(arg0)

    @override
    @overload
    def hide(self):
        """public void javax.swing.JComponent.hide()"""
        super(JComponent, self).hide()

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def revalidate(self):
        """public void javax.swing.JComponent.revalidate()"""
        super(JComponent, self).revalidate()

    @override
    @overload
    def getActionMap(self) -> 'ActionMap':
        """public final javax.swing.ActionMap javax.swing.JComponent.getActionMap()"""
        return 'ActionMap'._wrap(super(JComponent, self).getActionMap())

    @override
    @overload
    def requestFocusInWindow(self) -> bool:
        """public boolean javax.swing.JComponent.requestFocusInWindow()"""
        return bool._wrap(super(JComponent, self).requestFocusInWindow())

    @overload
    def action(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.action(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).action(arg0, arg1))

    @override
    @overload
    def isManagingFocus(self) -> bool:
        """public boolean javax.swing.JComponent.isManagingFocus()"""
        return bool._wrap(super(JComponent, self).isManagingFocus())

    @override
    @overload
    def isLightweight(self) -> bool:
        """public boolean java.awt.Component.isLightweight()"""
        return bool._wrap(super(Component, self).isLightweight())

    @override
    @overload
    def setAlignmentX(self, arg0: float):
        """public void javax.swing.JComponent.setAlignmentX(float)"""
        super(_JComponent, self).setAlignmentX(_float.valueOf(arg0))

    @overload
    def getFocusTraversalKeys(self, arg0: int) -> 'Set':
        """public java.util.Set<java.awt.AWTKeyStroke> java.awt.Container.getFocusTraversalKeys(int)"""
        return 'Set'._wrap(super(_Container, self).getFocusTraversalKeys(_int.valueOf(arg0)))

    @override
    @overload
    def setFocusTraversalKeysEnabled(self, arg0: bool):
        """public void java.awt.Component.setFocusTraversalKeysEnabled(boolean)"""
        super(_Component, self).setFocusTraversalKeysEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def remove(self, arg0: 'Component'):
        """public void java.awt.Container.remove(java.awt.Component)"""
        super(_Container, self).remove(arg0)

    @overload
    def getInsets(self, arg0: 'Insets') -> 'Insets':
        """public java.awt.Insets javax.swing.JComponent.getInsets(java.awt.Insets)"""
        return 'Insets'._wrap(super(_JComponent, self).getInsets(arg0))

    @override
    @overload
    def insets(self) -> 'Insets':
        """public java.awt.Insets java.awt.Container.insets()"""
        return 'Insets'._wrap(super(Container, self).insets())

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int):
        """public void javax.swing.JComponent.repaint(long,int,int,int,int)"""
        super(_JComponent, self).repaint(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4))

    @override
    @overload
    def setFocusTraversalPolicy(self, arg0: 'FocusTraversalPolicy'):
        """public void java.awt.Container.setFocusTraversalPolicy(java.awt.FocusTraversalPolicy)"""
        super(_Container, self).setFocusTraversalPolicy(arg0)

    @overload
    def getSize(self, arg0: 'Dimension') -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getSize(java.awt.Dimension)"""
        return 'Dimension'._wrap(super(_JComponent, self).getSize(arg0))

    @override
    @overload
    def enable(self, arg0: bool):
        """public void java.awt.Component.enable(boolean)"""
        super(_Component, self).enable(_boolean.valueOf(arg0))

    @overload
    def getToolTipLocation(self, arg0: 'MouseEvent') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getToolTipLocation(java.awt.event.MouseEvent)"""
        return 'Point'._wrap(super(_JComponent, self).getToolTipLocation(arg0))

    @override
    @overload
    def addPropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Container.addPropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Container, self).addPropertyChangeListener(arg0)

    @overload
    def getComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(arg0))

    @override
    @overload
    def size(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.size()"""
        return 'Dimension'._wrap(super(Component, self).size())

    @override
    @overload
    def getVerifyInputWhenFocusTarget(self) -> bool:
        """public boolean javax.swing.JComponent.getVerifyInputWhenFocusTarget()"""
        return bool._wrap(super(JComponent, self).getVerifyInputWhenFocusTarget())

    @overload
    def mouseMove(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseMove(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseMove(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getActionForKeyStroke(self, arg0: 'KeyStroke') -> 'ActionListener':
        """public java.awt.event.ActionListener javax.swing.JComponent.getActionForKeyStroke(javax.swing.KeyStroke)"""
        return 'ActionListener'._wrap(super(_JComponent, self).getActionForKeyStroke(arg0))

    @overload
    def lostFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.lostFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).lostFocus(arg0, arg1))

    @override
    @overload
    def isMinimumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMinimumSizeSet()"""
        return bool._wrap(super(Component, self).isMinimumSizeSet())

    @override
    @overload
    def isForegroundSet(self) -> bool:
        """public boolean java.awt.Component.isForegroundSet()"""
        return bool._wrap(super(Component, self).isForegroundSet())

    @overload
    def getMousePosition(self, arg0: bool) -> 'Point':
        """public java.awt.Point java.awt.Container.getMousePosition(boolean) throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(_Container, self).getMousePosition(_boolean.valueOf(arg0)))

    @overload
    def getFontMetrics(self, arg0: 'Font') -> 'FontMetrics':
        """public java.awt.FontMetrics javax.swing.JComponent.getFontMetrics(java.awt.Font)"""
        return 'FontMetrics'._wrap(super(_JComponent, self).getFontMetrics(arg0))

    @overload
    def getListeners(self, arg0: 'Class') -> List['EventListener']:
        """public <T extends java.util.EventListener> T[] javax.swing.JComponent.getListeners(java.lang.Class<T>)"""
        return List['EventListener']._wrap(super(_JComponent, self).getListeners(arg0))

    @override
    @overload
    def getHierarchyBoundsListeners(self) -> List['HierarchyBoundsListener']:
        """public synchronized java.awt.event.HierarchyBoundsListener[] java.awt.Component.getHierarchyBoundsListeners()"""
        return List['HierarchyBoundsListener']._wrap(super(Component, self).getHierarchyBoundsListeners())

    @override
    @overload
    def minimumSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.minimumSize()"""
        return 'Dimension'._wrap(super(Container, self).minimumSize())

    @overload
    def handleEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.handleEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).handleEvent(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @override
    @overload
    def getComponentListeners(self) -> List['ComponentListener']:
        """public synchronized java.awt.event.ComponentListener[] java.awt.Component.getComponentListeners()"""
        return List['ComponentListener']._wrap(super(Component, self).getComponentListeners())

    @override
    @overload
    def computeVisibleRect(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.computeVisibleRect(java.awt.Rectangle)"""
        super(_JComponent, self).computeVisibleRect(arg0)

    @override
    @overload
    def deliverEvent(self, arg0: 'Event'):
        """public void java.awt.Container.deliverEvent(java.awt.Event)"""
        super(_Container, self).deliverEvent(arg0)

    @override
    @overload
    def addHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.addHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).addHierarchyBoundsListener(arg0)

    @override
    @overload
    def getAlignmentX(self) -> float:
        """public float javax.swing.JComponent.getAlignmentX()"""
        return float._wrap(super(JComponent, self).getAlignmentX())

    @overload
    def add(self, arg0: 'Component', arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component,int)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def repaint(self):
        """public void java.awt.Component.repaint()"""
        super(Component, self).repaint()

    @overload
    def gotFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.gotFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).gotFocus(arg0, arg1))

    @override
    @overload
    def createToolTip(self) -> 'JToolTip':
        """public javax.swing.JToolTip javax.swing.JComponent.createToolTip()"""
        return 'JToolTip'._wrap(super(JComponent, self).createToolTip())

    @override
    @overload
    def setEmbedded(self):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setEmbedded()"""
        super(EditorPanel, self).setEmbedded()

    @overload
    def getToolTipText(self, arg0: 'MouseEvent') -> str:
        """public java.lang.String javax.swing.JComponent.getToolTipText(java.awt.event.MouseEvent)"""
        return str._wrap(super(_JComponent, self).getToolTipText(arg0))

    @override
    @overload
    def printComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.printComponents(java.awt.Graphics)"""
        super(_Container, self).printComponents(arg0)

    @override
    @overload
    def getColorModel(self) -> 'ColorModel':
        """public java.awt.image.ColorModel java.awt.Component.getColorModel()"""
        return 'ColorModel'._wrap(super(Component, self).getColorModel())

    @override
    @overload
    def setFocusTraversalPolicyProvider(self, arg0: bool):
        """public final void java.awt.Container.setFocusTraversalPolicyProvider(boolean)"""
        super(_Container, self).setFocusTraversalPolicyProvider(_boolean.valueOf(arg0))

    @overload
    def getComponentZOrder(self, arg0: 'Component') -> int:
        """public int java.awt.Container.getComponentZOrder(java.awt.Component)"""
        return int._wrap(super(_Container, self).getComponentZOrder(arg0))

    @override
    @overload
    def getDebugGraphicsOptions(self) -> int:
        """public int javax.swing.JComponent.getDebugGraphicsOptions()"""
        return int._wrap(super(JComponent, self).getDebugGraphicsOptions())

    @overload
    def areFocusTraversalKeysSet(self, arg0: int) -> bool:
        """public boolean java.awt.Container.areFocusTraversalKeysSet(int)"""
        return bool._wrap(super(_Container, self).areFocusTraversalKeysSet(_int.valueOf(arg0)))

    @override
    @overload
    def getSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.getSize()"""
        return 'Dimension'._wrap(super(Component, self).getSize())

    @override
    @overload
    def repaint(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.repaint(java.awt.Rectangle)"""
        super(_JComponent, self).repaint(arg0)

    @overload
    def getClientProperty(self, arg0: object) -> object:
        """public final java.lang.Object javax.swing.JComponent.getClientProperty(java.lang.Object)"""
        return object._wrap(super(_JComponent, self).getClientProperty(arg0))

    @override
    @overload
    def unregisterKeyboardAction(self, arg0: 'KeyStroke'):
        """public void javax.swing.JComponent.unregisterKeyboardAction(javax.swing.KeyStroke)"""
        super(_JComponent, self).unregisterKeyboardAction(arg0)

    @overload
    def requestFocus(self, arg0: bool) -> bool:
        """public boolean javax.swing.JComponent.requestFocus(boolean)"""
        return bool._wrap(super(_JComponent, self).requestFocus(_boolean.valueOf(arg0)))

    @override
    @overload
    def setActionMap(self, arg0: 'ActionMap'):
        """public final void javax.swing.JComponent.setActionMap(javax.swing.ActionMap)"""
        super(_JComponent, self).setActionMap(arg0)

    @override
    @overload
    def getX(self) -> int:
        """public int javax.swing.JComponent.getX()"""
        return int._wrap(super(JComponent, self).getX())

    @overload
    def mouseEnter(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseEnter(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseEnter(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def updateUI(self):
        """public void javax.swing.JPanel.updateUI()"""
        super(JPanel, self).updateUI()

    @override
    @overload
    def getToolkit(self) -> 'Toolkit':
        """public java.awt.Toolkit java.awt.Component.getToolkit()"""
        return 'Toolkit'._wrap(super(Component, self).getToolkit())

    @override
    @overload
    def isCursorSet(self) -> bool:
        """public boolean java.awt.Component.isCursorSet()"""
        return bool._wrap(super(Component, self).isCursorSet())

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object, arg2: int):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object,int)"""
        super(_Container, self).add(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def setPreferredSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setPreferredSize(java.awt.Dimension)"""
        super(_JComponent, self).setPreferredSize(arg0)

    @override
    @overload
    def setBounds(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.setBounds(int,int,int,int)"""
        super(_Component, self).setBounds(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def isFocusTraversalPolicySet(self) -> bool:
        """public boolean java.awt.Container.isFocusTraversalPolicySet()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicySet())

    @override
    @overload
    def requestFocus(self):
        """public void javax.swing.JComponent.requestFocus()"""
        super(JComponent, self).requestFocus()

    @override
    @overload
    def getAncestorListeners(self) -> List['AncestorListener']:
        """public javax.swing.event.AncestorListener[] javax.swing.JComponent.getAncestorListeners()"""
        return List['AncestorListener']._wrap(super(JComponent, self).getAncestorListeners())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool._wrap(super(_object, self).equals(arg0))

    @overload
    def getInputMap(self, arg0: int) -> 'InputMap':
        """public final javax.swing.InputMap javax.swing.JComponent.getInputMap(int)"""
        return 'InputMap'._wrap(super(_JComponent, self).getInputMap(_int.valueOf(arg0)))

    @override
    @overload
    def isEnabled(self) -> bool:
        """public boolean java.awt.Component.isEnabled()"""
        return bool._wrap(super(Component, self).isEnabled())

    @override
    @overload
    def move(self, arg0: int, arg1: int):
        """public void java.awt.Component.move(int,int)"""
        super(_Component, self).move(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def addMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.addMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).addMouseMotionListener(arg0)

    @override
    @overload
    def getIgnoreRepaint(self) -> bool:
        """public boolean java.awt.Component.getIgnoreRepaint()"""
        return bool._wrap(super(Component, self).getIgnoreRepaint())

    @overload
    def isFocusCycleRoot(self, arg0: 'Container') -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot(java.awt.Container)"""
        return bool._wrap(super(_Container, self).isFocusCycleRoot(arg0))

    @override
    @overload
    def getGraphics(self) -> 'Graphics':
        """public java.awt.Graphics javax.swing.JComponent.getGraphics()"""
        return 'Graphics'._wrap(super(JComponent, self).getGraphics())

    @override
    @overload
    def setLocale(self, arg0: 'Locale'):
        """public void java.awt.Component.setLocale(java.util.Locale)"""
        super(_Component, self).setLocale(arg0)

    @override
    @overload
    def paintAll(self, arg0: 'Graphics'):
        """public void java.awt.Component.paintAll(java.awt.Graphics)"""
        super(_Component, self).paintAll(arg0)

    @override
    @overload
    def setDoubleBuffered(self, arg0: bool):
        """public void javax.swing.JComponent.setDoubleBuffered(boolean)"""
        super(_JComponent, self).setDoubleBuffered(_boolean.valueOf(arg0))

    @override
    @overload
    def isPreferredSizeSet(self) -> bool:
        """public boolean java.awt.Component.isPreferredSizeSet()"""
        return bool._wrap(super(Component, self).isPreferredSizeSet())

    @override
    @overload
    def addInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.addInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).addInputMethodListener(arg0)

    @override
    @overload
    def removeMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.removeMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).removeMouseWheelListener(arg0)

    @override
    @overload
    def getInputMap(self) -> 'InputMap':
        """public final javax.swing.InputMap javax.swing.JComponent.getInputMap()"""
        return 'InputMap'._wrap(super(JComponent, self).getInputMap())

    @override
    @overload
    def setVisible(self, arg0: bool):
        """public void javax.swing.JComponent.setVisible(boolean)"""
        super(_JComponent, self).setVisible(_boolean.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,byte,byte)"""
        super(_Component, self).firePropertyChange(arg0, _byte.valueOf(arg1), _byte.valueOf(arg2))

    @override
    @overload
    def getUIClassID(self) -> str:
        """public java.lang.String javax.swing.JPanel.getUIClassID()"""
        return str._wrap(super(JPanel, self).getUIClassID())

    @override
    @overload
    def transferFocusDownCycle(self):
        """public void java.awt.Container.transferFocusDownCycle()"""
        super(Container, self).transferFocusDownCycle()

    @override
    @overload
    def getNextFocusableComponent(self) -> 'Component':
        """public java.awt.Component javax.swing.JComponent.getNextFocusableComponent()"""
        return 'Component'._wrap(super(JComponent, self).getNextFocusableComponent())

    @override
    @overload
    def getUI(self) -> 'PanelUI':
        """public javax.swing.plaf.PanelUI javax.swing.JPanel.getUI()"""
        return 'PanelUI'._wrap(super(JPanel, self).getUI())

    @override
    @overload
    def setBounds(self, arg0: 'Rectangle'):
        """public void java.awt.Component.setBounds(java.awt.Rectangle)"""
        super(_Component, self).setBounds(arg0)

    @override
    @overload
    def repaint(self, arg0: int):
        """public void java.awt.Component.repaint(long)"""
        super(_Component, self).repaint(_long.valueOf(arg0))

    @override
    @overload
    def removeHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.removeHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).removeHierarchyBoundsListener(arg0)

    @override
    @overload
    def getComponentPopupMenu(self) -> 'JPopupMenu':
        """public javax.swing.JPopupMenu javax.swing.JComponent.getComponentPopupMenu()"""
        return 'JPopupMenu'._wrap(super(JComponent, self).getComponentPopupMenu())

    @override
    @overload
    def getMousePosition(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getMousePosition() throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(Component, self).getMousePosition())

    @override
    @overload
    def getComponentCount(self) -> int:
        """public int java.awt.Container.getComponentCount()"""
        return int._wrap(super(Container, self).getComponentCount())

    @override
    @overload
    def getInputMethodRequests(self) -> 'InputMethodRequests':
        """public java.awt.im.InputMethodRequests java.awt.Component.getInputMethodRequests()"""
        return 'InputMethodRequests'._wrap(super(Component, self).getInputMethodRequests())

    @override
    @overload
    def setMaximumSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setMaximumSize(java.awt.Dimension)"""
        super(_JComponent, self).setMaximumSize(arg0)

    @override
    @overload
    def setRequestFocusEnabled(self, arg0: bool):
        """public void javax.swing.JComponent.setRequestFocusEnabled(boolean)"""
        super(_JComponent, self).setRequestFocusEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def setFocusTraversalKeys(self, arg0: int, arg1: 'Set'):
        """public void javax.swing.JComponent.setFocusTraversalKeys(int,java.util.Set<? extends java.awt.AWTKeyStroke>)"""
        super(_JComponent, self).setFocusTraversalKeys(_int.valueOf(arg0), arg1)

    @overload
    def inside(self, arg0: int, arg1: int) -> bool:
        """public boolean java.awt.Component.inside(int,int)"""
        return bool._wrap(super(_Component, self).inside(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def requestDefaultFocus(self) -> bool:
        """public boolean javax.swing.JComponent.requestDefaultFocus()"""
        return bool._wrap(super(JComponent, self).requestDefaultFocus())

    @override
    @overload
    def disable(self):
        """public void javax.swing.JComponent.disable()"""
        super(JComponent, self).disable()

    @override
    @overload
    def showContent(self, arg0: bool):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.showContent(boolean)"""
        super(_EditorPanel, self).showContent(_boolean.valueOf(arg0))

    @override
    @overload
    def enableInputMethods(self, arg0: bool):
        """public void java.awt.Component.enableInputMethods(boolean)"""
        super(_Component, self).enableInputMethods(_boolean.valueOf(arg0))

    @override
    @overload
    def layout(self):
        """public void java.awt.Container.layout()"""
        super(Container, self).layout()

    @override
    @overload
    def getInputMethodListeners(self) -> List['InputMethodListener']:
        """public synchronized java.awt.event.InputMethodListener[] java.awt.Component.getInputMethodListeners()"""
        return List['InputMethodListener']._wrap(super(Component, self).getInputMethodListeners())

    @override
    @overload
    def paint(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.paint(java.awt.Graphics)"""
        super(_JComponent, self).paint(arg0)

    @override
    @overload
    def transferFocus(self):
        """public void java.awt.Component.transferFocus()"""
        super(Component, self).transferFocus()

    @override
    @overload
    def removeComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.removeComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).removeComponentListener(arg0)

    @override
    @overload
    def getCursor(self) -> 'Cursor':
        """public java.awt.Cursor java.awt.Component.getCursor()"""
        return 'Cursor'._wrap(super(Component, self).getCursor())

    @override
    @overload
    def setMinimumSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setMinimumSize(java.awt.Dimension)"""
        super(_JComponent, self).setMinimumSize(arg0)

    @override
    @overload
    def getAdvancedPanel(self) -> 'JPanel':
        """public javax.swing.JPanel com.badlogic.gdx.tools.flame.EditorPanel.getAdvancedPanel()"""
        return 'JPanel'._wrap(super(EditorPanel, self).getAdvancedPanel())

    @override
    @overload
    def getContainerListeners(self) -> List['ContainerListener']:
        """public synchronized java.awt.event.ContainerListener[] java.awt.Container.getContainerListeners()"""
        return List['ContainerListener']._wrap(super(Container, self).getContainerListeners())

    @override
    @overload
    def setLocation(self, arg0: 'Point'):
        """public void java.awt.Component.setLocation(java.awt.Point)"""
        super(_Component, self).setLocation(arg0)

    @override
    @overload
    def setSize(self, arg0: 'Dimension'):
        """public void java.awt.Component.setSize(java.awt.Dimension)"""
        super(_Component, self).setSize(arg0)

    @override
    @overload
    def removeAll(self):
        """public void java.awt.Container.removeAll()"""
        super(Container, self).removeAll()

    @overload
    def getPopupLocation(self, arg0: 'MouseEvent') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getPopupLocation(java.awt.event.MouseEvent)"""
        return 'Point'._wrap(super(_JComponent, self).getPopupLocation(arg0))

    @overload
    def isAncestorOf(self, arg0: 'Component') -> bool:
        """public boolean java.awt.Container.isAncestorOf(java.awt.Component)"""
        return bool._wrap(super(_Container, self).isAncestorOf(arg0))

    @override
    @overload
    def setOpaque(self, arg0: bool):
        """public void javax.swing.JComponent.setOpaque(boolean)"""
        super(_JComponent, self).setOpaque(_boolean.valueOf(arg0))

    @overload
    def contains(self, arg0: int, arg1: int) -> bool:
        """public boolean javax.swing.JComponent.contains(int,int)"""
        return bool._wrap(super(_JComponent, self).contains(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def setCursor(self, arg0: 'Cursor'):
        """public void java.awt.Component.setCursor(java.awt.Cursor)"""
        super(_Component, self).setCursor(arg0)

    @override
    @overload
    def validate(self):
        """public void java.awt.Container.validate()"""
        super(Container, self).validate()

    @override
    @overload
    def getMaximumSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getMaximumSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getMaximumSize())

    @override
    @overload
    def getBackground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getBackground()"""
        return 'Color'._wrap(super(Component, self).getBackground())

    @overload
    def createImage(self, arg0: 'ImageProducer') -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(java.awt.image.ImageProducer)"""
        return 'Image'._wrap(super(_Component, self).createImage(arg0))

    @override
    @overload
    def setVerifyInputWhenFocusTarget(self, arg0: bool):
        """public void javax.swing.JComponent.setVerifyInputWhenFocusTarget(boolean)"""
        super(_JComponent, self).setVerifyInputWhenFocusTarget(_boolean.valueOf(arg0))

    @override
    @overload
    def removePropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0, arg1)

    @override
    @overload
    def countComponents(self) -> int:
        """public int java.awt.Container.countComponents()"""
        return int._wrap(super(Container, self).countComponents()) 
 
 
# CLASS: com.badlogic.gdx.tools.flame.GradientPanel$GradientEditor
import com.badlogic.gdx.tools.flame.GradientPanel as _GradientPanel_GradientEditor
_GradientEditor = _GradientPanel_GradientEditor.GradientEditor
import javax.accessibility.AccessibleContext as AccessibleContext
import javax.swing.JToolTip as JToolTip
import java.awt.event.HierarchyBoundsListener as HierarchyBoundsListener
import java.awt.event.ActionListener as _ActionListener
_ActionListener = _ActionListener
import java.awt.ComponentOrientation as _ComponentOrientation
_ComponentOrientation = _ComponentOrientation
import java.awt.image.ImageProducer as ImageProducer
import java.awt.GraphicsConfiguration as GraphicsConfiguration
from typing import Any
import java.awt.Graphics as _Graphics
_Graphics = _Graphics
import javax.swing.JToolTip as _JToolTip
_JToolTip = _JToolTip
import java.awt.Container as _Container
_Container = _Container
import java.awt.MenuComponent as MenuComponent
import java.awt.im.InputMethodRequests as _InputMethodRequests
_InputMethodRequests = _InputMethodRequests
import java.awt.FocusTraversalPolicy as _FocusTraversalPolicy
_FocusTraversalPolicy = _FocusTraversalPolicy
import java.lang.Byte as _byte
import java.awt.Dimension as Dimension
import java.awt.Font as _Font
_Font = _Font
import javax.swing.plaf.PanelUI as _PanelUI
_PanelUI = _PanelUI
import java.awt.event.ContainerListener as ContainerListener
import javax.swing.event.AncestorListener as AncestorListener
import java.awt.AWTEvent as AWTEvent
import java.awt.image.ColorModel as _ColorModel
_ColorModel = _ColorModel
import java.lang.Object as _object
import java.awt.ComponentOrientation as ComponentOrientation
import java.awt.im.InputContext as _InputContext
_InputContext = _InputContext
from builtins import float
import java.awt.event.HierarchyListener as HierarchyListener
import java.awt.event.InputMethodListener as InputMethodListener
from typing import List
import java.awt.event.MouseWheelListener as _MouseWheelListener
_MouseWheelListener = _MouseWheelListener
import java.awt.event.KeyListener as KeyListener
import java.awt.Component as Component
from builtins import int
import java.awt.LayoutManager as LayoutManager
import java.awt.FontMetrics as _FontMetrics
_FontMetrics = _FontMetrics
import java.awt.Container as Container
from builtins import type
import java.awt.image.VolatileImage as _VolatileImage
_VolatileImage = _VolatileImage
import java.awt.Shape as Shape
import java.awt.Rectangle as Rectangle
import java.awt.event.ContainerListener as _ContainerListener
_ContainerListener = _ContainerListener
import java.awt.event.HierarchyListener as _HierarchyListener
_HierarchyListener = _HierarchyListener
import java.lang.String as _string
import javax.swing.InputVerifier as _InputVerifier
_InputVerifier = _InputVerifier
import java.awt.Insets as _Insets
_Insets = _Insets
import javax.swing.border.Border as _Border
_Border = _Border
import java.awt.event.ComponentListener as _ComponentListener
_ComponentListener = _ComponentListener
import javax.swing.ActionMap as ActionMap
import java.beans.VetoableChangeListener as VetoableChangeListener
import java.awt.event.ComponentListener as ComponentListener
import javax.swing.KeyStroke as KeyStroke
import java.beans.VetoableChangeListener as _VetoableChangeListener
_VetoableChangeListener = _VetoableChangeListener
from builtins import object
import java.awt.event.KeyListener as _KeyListener
_KeyListener = _KeyListener
import java.awt.Component.BaselineResizeBehavior as BaselineResizeBehavior
import java.awt.Component as _Component_BaselineResizeBehavior
_BaselineResizeBehavior = _Component_BaselineResizeBehavior.BaselineResizeBehavior
import java.awt.Cursor as _Cursor
_Cursor = _Cursor
import java.awt.im.InputMethodRequests as InputMethodRequests
import java.lang.Long as _long
import javax.swing.JPanel as _JPanel
_JPanel = _JPanel
import java.awt.event.FocusListener as _FocusListener
_FocusListener = _FocusListener
import java.lang.Character as _char
import javax.swing.TransferHandler as TransferHandler
import java.awt.event.FocusEvent.Cause as Cause
import javax.accessibility.AccessibleContext as _AccessibleContext
_AccessibleContext = _AccessibleContext
import java.awt.event.MouseWheelListener as MouseWheelListener
import java.util.Set as _Set
_Set = _Set
import java.awt.image.ColorModel as ColorModel
import java.lang.Boolean as _boolean
import java.awt.event.MouseMotionListener as MouseMotionListener
import java.util.EventListener as EventListener
import java.awt.Insets as Insets
import javax.swing.KeyStroke as _KeyStroke
_KeyStroke = _KeyStroke
import java.awt.GraphicsConfiguration as _GraphicsConfiguration
_GraphicsConfiguration = _GraphicsConfiguration
import java.awt.dnd.DropTarget as _DropTarget
_DropTarget = _DropTarget
from builtins import bool
import java.beans.PropertyChangeListener as _PropertyChangeListener
_PropertyChangeListener = _PropertyChangeListener
import java.awt.LayoutManager as _LayoutManager
_LayoutManager = _LayoutManager
import java.awt.PopupMenu as PopupMenu
import java.util.EventListener as _EventListener
_EventListener = _EventListener
import java.awt.im.InputContext as InputContext
import java.awt.Component as _Component
_Component = _Component
import java.awt.Font as Font
import java.awt.image.VolatileImage as VolatileImage
import java.awt.dnd.DropTarget as DropTarget
import java.lang.String as _String
_String = _String
import java.lang.Float as _float
import java.awt.Cursor as Cursor
import java.awt.event.MouseListener as _MouseListener
_MouseListener = _MouseListener
import java.awt.Toolkit as _Toolkit
_Toolkit = _Toolkit
import java.io.PrintStream as PrintStream
import javax.swing.JRootPane as _JRootPane
_JRootPane = _JRootPane
import java.awt.Dimension as _Dimension
_Dimension = _Dimension
import java.awt.event.ActionListener as ActionListener
import java.awt.event.MouseEvent as MouseEvent
import java.awt.Color as _Color
_Color = _Color
import javax.swing.JPopupMenu as _JPopupMenu
_JPopupMenu = _JPopupMenu
import javax.swing.InputMap as _InputMap
_InputMap = _InputMap
import java.awt.event.MouseListener as MouseListener
import java.lang.Class as _Class
_Class = _Class
import java.util.Locale as Locale
import java.lang.Double as _double
import javax.swing.plaf.PanelUI as PanelUI
import java.awt.Point as _Point
_Point = _Point
import java.lang.Object as _Object
_Object = _Object
import java.beans.PropertyChangeListener as PropertyChangeListener
import javax.swing.border.Border as Border
import javax.swing.JComponent as _JComponent
_JComponent = _JComponent
import javax.swing.InputVerifier as InputVerifier
import java.io.PrintWriter as PrintWriter
import java.awt.Point as Point
import javax.swing.event.AncestorListener as _AncestorListener
_AncestorListener = _AncestorListener
import java.lang.Short as _short
import java.awt.Toolkit as Toolkit
import java.awt.event.HierarchyBoundsListener as _HierarchyBoundsListener
_HierarchyBoundsListener = _HierarchyBoundsListener
import javax.swing.TransferHandler as _TransferHandler
_TransferHandler = _TransferHandler
import javax.swing.InputMap as InputMap
import java.awt.Rectangle as _Rectangle
_Rectangle = _Rectangle
import javax.swing.JRootPane as JRootPane
import java.awt.Event as Event
import java.awt.event.FocusListener as FocusListener
import java.awt.image.ImageObserver as ImageObserver
from builtins import str
from pyquantum_helper import override
import javax.swing.ActionMap as _ActionMap
_ActionMap = _ActionMap
import java.awt.FocusTraversalPolicy as FocusTraversalPolicy
import java.awt.event.MouseMotionListener as _MouseMotionListener
_MouseMotionListener = _MouseMotionListener
import java.awt.event.InputMethodListener as _InputMethodListener
_InputMethodListener = _InputMethodListener
import javax.swing.JPopupMenu as JPopupMenu
import java.util.Set as Set
import java.lang.Integer as _int
import java.awt.Image as _Image
_Image = _Image
import java.awt.FontMetrics as FontMetrics
import java.awt.Color as Color
import java.awt.Image as Image
import java.awt.Graphics as Graphics
import java.awt.ImageCapabilities as ImageCapabilities
import java.util.Locale as _Locale
_Locale = _Locale
 
class GradientEditor():
    """com.badlogic.gdx.tools.flame.GradientPanel.GradientEditor"""
 
    @staticmethod
    def _wrap(java_value: _GradientEditor) -> 'GradientEditor':
        return GradientEditor(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _GradientEditor):
        """
        Dynamic initializer for GradientEditor.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_GradientEditor__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_GradientEditor__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def removeVetoableChangeListener(self, arg0: 'VetoableChangeListener'):
        """public synchronized void javax.swing.JComponent.removeVetoableChangeListener(java.beans.VetoableChangeListener)"""
        super(_JComponent, self).removeVetoableChangeListener(arg0)

    @override
    @overload
    def getComponents(self) -> List['Component']:
        """public java.awt.Component[] java.awt.Container.getComponents()"""
        return List['Component']._wrap(super(Container, self).getComponents())

    @override
    @overload
    def setDebugGraphicsOptions(self, arg0: int):
        """public void javax.swing.JComponent.setDebugGraphicsOptions(int)"""
        super(_JComponent, self).setDebugGraphicsOptions(_int.valueOf(arg0))

    @override
    @overload
    def isValid(self) -> bool:
        """public boolean java.awt.Component.isValid()"""
        return bool._wrap(super(Component, self).isValid())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def getDefaultLocale() -> 'Locale':
        """public static java.util.Locale javax.swing.JComponent.getDefaultLocale()"""
        return Locale._wrap(_JComponent.getDefaultLocale())

    @override
    @overload
    def getInputVerifier(self) -> 'InputVerifier':
        """public javax.swing.InputVerifier javax.swing.JComponent.getInputVerifier()"""
        return 'InputVerifier'._wrap(super(JComponent, self).getInputVerifier())

    @override
    @overload
    def list(self, arg0: 'PrintStream', arg1: int):
        """public void java.awt.Container.list(java.io.PrintStream,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @override
    @overload
    def setUI(self, arg0: 'PanelUI'):
        """public void javax.swing.JPanel.setUI(javax.swing.plaf.PanelUI)"""
        super(_JPanel, self).setUI(arg0)

    @override
    @overload
    def getFocusTraversalPolicy(self) -> 'FocusTraversalPolicy':
        """public java.awt.FocusTraversalPolicy java.awt.Container.getFocusTraversalPolicy()"""
        return 'FocusTraversalPolicy'._wrap(super(Container, self).getFocusTraversalPolicy())

    @override
    @overload
    def getParent(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getParent()"""
        return 'Container'._wrap(super(Component, self).getParent())

    @override
    @overload
    def paintImmediately(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.paintImmediately(java.awt.Rectangle)"""
        super(_JComponent, self).paintImmediately(arg0)

    @staticmethod
    @overload
    def setDefaultLocale(arg0: 'Locale'):
        """public static void javax.swing.JComponent.setDefaultLocale(java.util.Locale)"""
        _JComponent.setDefaultLocale(arg0)

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,float,float)"""
        super(_Component, self).firePropertyChange(arg0, _float.valueOf(arg1), _float.valueOf(arg2))

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object)"""
        super(_Container, self).add(arg0, arg1)

    @override
    @overload
    def getLocale(self) -> 'Locale':
        """public java.util.Locale java.awt.Component.getLocale()"""
        return 'Locale'._wrap(super(Component, self).getLocale())

    @override
    @overload
    def setInheritsPopupMenu(self, arg0: bool):
        """public void javax.swing.JComponent.setInheritsPopupMenu(boolean)"""
        super(_JComponent, self).setInheritsPopupMenu(_boolean.valueOf(arg0))

    @override
    @overload
    def getHierarchyListeners(self) -> List['HierarchyListener']:
        """public synchronized java.awt.event.HierarchyListener[] java.awt.Component.getHierarchyListeners()"""
        return List['HierarchyListener']._wrap(super(Component, self).getHierarchyListeners())

    @override
    @overload
    def nextFocus(self):
        """public void java.awt.Component.nextFocus()"""
        super(Component, self).nextFocus()

    @override
    @overload
    def isPaintingTile(self) -> bool:
        """public boolean javax.swing.JComponent.isPaintingTile()"""
        return bool._wrap(super(JComponent, self).isPaintingTile())

    @overload
    def setColor(self, arg0: 'Color'):
        """public void com.badlogic.gdx.tools.flame.GradientPanel$GradientEditor.setColor(java.awt.Color)"""
        super(_GradientEditor, self).setColor(arg0)

    @override
    @overload
    def isDisplayable(self) -> bool:
        """public boolean java.awt.Component.isDisplayable()"""
        return bool._wrap(super(Component, self).isDisplayable())

    @override
    @overload
    def getBounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.getBounds()"""
        return 'Rectangle'._wrap(super(Component, self).getBounds())

    @override
    @overload
    def removeMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.removeMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).removeMouseMotionListener(arg0)

    @override
    @overload
    def isShowing(self) -> bool:
        """public boolean java.awt.Component.isShowing()"""
        return bool._wrap(super(Component, self).isShowing())

    @override
    @overload
    def getDropTarget(self) -> 'DropTarget':
        """public synchronized java.awt.dnd.DropTarget java.awt.Component.getDropTarget()"""
        return 'DropTarget'._wrap(super(Component, self).getDropTarget())

    @override
    @overload
    def isFontSet(self) -> bool:
        """public boolean java.awt.Component.isFontSet()"""
        return bool._wrap(super(Component, self).isFontSet())

    @overload
    def mouseUp(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseUp(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseUp(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def setIgnoreRepaint(self, arg0: bool):
        """public void java.awt.Component.setIgnoreRepaint(boolean)"""
        super(_Component, self).setIgnoreRepaint(_boolean.valueOf(arg0))

    @override
    @overload
    def getPropertyChangeListeners(self) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners()"""
        return List['PropertyChangeListener']._wrap(super(Component, self).getPropertyChangeListeners())

    @override
    @overload
    def isBackgroundSet(self) -> bool:
        """public boolean java.awt.Component.isBackgroundSet()"""
        return bool._wrap(super(Component, self).isBackgroundSet())

    @override
    @overload
    def getLocation(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocation()"""
        return 'Point'._wrap(super(Component, self).getLocation())

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int._wrap(super(object, self).hashCode())

    @override
    @overload
    def location(self) -> 'Point':
        """public java.awt.Point java.awt.Component.location()"""
        return 'Point'._wrap(super(Component, self).location())

    @override
    @overload
    def getComponentOrientation(self) -> 'ComponentOrientation':
        """public java.awt.ComponentOrientation java.awt.Component.getComponentOrientation()"""
        return 'ComponentOrientation'._wrap(super(Component, self).getComponentOrientation())

    @override
    @overload
    def addHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.addHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).addHierarchyListener(arg0)

    @override
    @overload
    def getInheritsPopupMenu(self) -> bool:
        """public boolean javax.swing.JComponent.getInheritsPopupMenu()"""
        return bool._wrap(super(JComponent, self).getInheritsPopupMenu())

    @override
    @overload
    def setComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Component.setComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Component, self).setComponentOrientation(arg0)

    @override
    @overload
    def getFocusCycleRootAncestor(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getFocusCycleRootAncestor()"""
        return 'Container'._wrap(super(Component, self).getFocusCycleRootAncestor())

    @override
    @overload
    def show(self, arg0: bool):
        """public void java.awt.Component.show(boolean)"""
        super(_Component, self).show(_boolean.valueOf(arg0))

    @override
    @overload
    def grabFocus(self):
        """public void javax.swing.JComponent.grabFocus()"""
        super(JComponent, self).grabFocus()

    @overload
    def locate(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.locate(int,int)"""
        return 'Component'._wrap(super(_Container, self).locate(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def isPaintingForPrint(self) -> bool:
        """public final boolean javax.swing.JComponent.isPaintingForPrint()"""
        return bool._wrap(super(JComponent, self).isPaintingForPrint())

    @overload
    def keyDown(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyDown(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyDown(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,int,int)"""
        super(_JComponent, self).firePropertyChange(arg0, _int.valueOf(arg1), _int.valueOf(arg2))

    @override
    @overload
    def getLayout(self) -> 'LayoutManager':
        """public java.awt.LayoutManager java.awt.Container.getLayout()"""
        return 'LayoutManager'._wrap(super(Container, self).getLayout())

    @override
    @overload
    def preferredSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.preferredSize()"""
        return 'Dimension'._wrap(super(Container, self).preferredSize())

    @override
    @overload
    def addNotify(self):
        """public void javax.swing.JComponent.addNotify()"""
        super(JComponent, self).addNotify()

    @override
    @overload
    def setSize(self, arg0: int, arg1: int):
        """public void java.awt.Component.setSize(int,int)"""
        super(_Component, self).setSize(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.repaint(int,int,int,int)"""
        super(_Component, self).repaint(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @overload
    def requestFocusInWindow(self, arg0: 'Cause') -> bool:
        """public boolean java.awt.Component.requestFocusInWindow(java.awt.event.FocusEvent$Cause)"""
        return bool._wrap(super(_Component, self).requestFocusInWindow(arg0))

    @override
    @overload
    def remove(self, arg0: int):
        """public void java.awt.Container.remove(int)"""
        super(_Container, self).remove(_int.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,long,long)"""
        super(_Component, self).firePropertyChange(arg0, _long.valueOf(arg1), _long.valueOf(arg2))

    @override
    @overload
    def setFocusCycleRoot(self, arg0: bool):
        """public void java.awt.Container.setFocusCycleRoot(boolean)"""
        super(_Container, self).setFocusCycleRoot(_boolean.valueOf(arg0))

    @overload
    def keyUp(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyUp(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyUp(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def setBackground(self, arg0: 'Color'):
        """public void javax.swing.JComponent.setBackground(java.awt.Color)"""
        super(_JComponent, self).setBackground(arg0)

    @override
    @overload
    def doLayout(self):
        """public void java.awt.Container.doLayout()"""
        super(Container, self).doLayout()

    @override
    @overload
    def enable(self):
        """public void javax.swing.JComponent.enable()"""
        super(JComponent, self).enable()

    @override
    @overload
    def getInsets(self) -> 'Insets':
        """public java.awt.Insets javax.swing.JComponent.getInsets()"""
        return 'Insets'._wrap(super(JComponent, self).getInsets())

    @override
    @overload
    def setNextFocusableComponent(self, arg0: 'Component'):
        """public void javax.swing.JComponent.setNextFocusableComponent(java.awt.Component)"""
        super(_JComponent, self).setNextFocusableComponent(arg0)

    @override
    @overload
    def getAlignmentY(self) -> float:
        """public float javax.swing.JComponent.getAlignmentY()"""
        return float._wrap(super(JComponent, self).getAlignmentY())

    @overload
    def checkImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @override
    @overload
    def getFocusTraversalKeysEnabled(self) -> bool:
        """public boolean java.awt.Component.getFocusTraversalKeysEnabled()"""
        return bool._wrap(super(Component, self).getFocusTraversalKeysEnabled())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getRootPane(self) -> 'JRootPane':
        """public javax.swing.JRootPane javax.swing.JComponent.getRootPane()"""
        return 'JRootPane'._wrap(super(JComponent, self).getRootPane())

    @override
    @overload
    def invalidate(self):
        """public void java.awt.Container.invalidate()"""
        super(Container, self).invalidate()

    @override
    @overload
    def resetKeyboardActions(self):
        """public void javax.swing.JComponent.resetKeyboardActions()"""
        super(JComponent, self).resetKeyboardActions()

    @overload
    def getComponent(self, arg0: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponent(int)"""
        return 'Component'._wrap(super(_Container, self).getComponent(_int.valueOf(arg0)))

    @override
    @overload
    def addPropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Container.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Container, self).addPropertyChangeListener(arg0, arg1)

    @override
    @overload
    def setInputMap(self, arg0: int, arg1: 'InputMap'):
        """public final void javax.swing.JComponent.setInputMap(int,javax.swing.InputMap)"""
        super(_JComponent, self).setInputMap(_int.valueOf(arg0), arg1)

    @override
    @overload
    def removePropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0)

    @override
    @overload
    def applyComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Container.applyComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Container, self).applyComponentOrientation(arg0)

    @override
    @overload
    def setBorder(self, arg0: 'Border'):
        """public void javax.swing.JComponent.setBorder(javax.swing.border.Border)"""
        super(_JComponent, self).setBorder(arg0)

    @override
    @overload
    def remove(self, arg0: 'MenuComponent'):
        """public void java.awt.Component.remove(java.awt.MenuComponent)"""
        super(_Component, self).remove(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintStream'):
        """public void java.awt.Component.list(java.io.PrintStream)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def removeMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.removeMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).removeMouseListener(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintWriter'):
        """public void java.awt.Component.list(java.io.PrintWriter)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def getKeyListeners(self) -> List['KeyListener']:
        """public synchronized java.awt.event.KeyListener[] java.awt.Component.getKeyListeners()"""
        return List['KeyListener']._wrap(super(Component, self).getKeyListeners())

    @override
    @overload
    def getInputContext(self) -> 'InputContext':
        """public java.awt.im.InputContext java.awt.Component.getInputContext()"""
        return 'InputContext'._wrap(super(Component, self).getInputContext())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,double,double)"""
        super(_Component, self).firePropertyChange(arg0, _double.valueOf(arg1), _double.valueOf(arg2))

    @override
    @overload
    def removeAncestorListener(self, arg0: 'AncestorListener'):
        """public void javax.swing.JComponent.removeAncestorListener(javax.swing.event.AncestorListener)"""
        super(_JComponent, self).removeAncestorListener(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintWriter', arg1: int):
        """public void java.awt.Container.list(java.io.PrintWriter,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @overload
    def checkImage(self, arg0: 'Image', arg1: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, arg1))

    @override
    @overload
    def removeFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.removeFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).removeFocusListener(arg0)

    @overload
    def mouseDown(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDown(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDown(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getConditionForKeyStroke(self, arg0: 'KeyStroke') -> int:
        """public int javax.swing.JComponent.getConditionForKeyStroke(javax.swing.KeyStroke)"""
        return int._wrap(super(_JComponent, self).getConditionForKeyStroke(arg0))

    @override
    @overload
    def getTreeLock(self) -> object:
        """public final java.lang.Object java.awt.Component.getTreeLock()"""
        return object._wrap(super(Component, self).getTreeLock())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @override
    @overload
    def addVetoableChangeListener(self, arg0: 'VetoableChangeListener'):
        """public synchronized void javax.swing.JComponent.addVetoableChangeListener(java.beans.VetoableChangeListener)"""
        super(_JComponent, self).addVetoableChangeListener(arg0)

    @overload
    def contains(self, arg0: 'Point') -> bool:
        """public boolean java.awt.Component.contains(java.awt.Point)"""
        return bool._wrap(super(_Component, self).contains(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,short,short)"""
        super(_Component, self).firePropertyChange(arg0, _short.valueOf(arg1), _short.valueOf(arg2))

    @override
    @overload
    def dispatchEvent(self, arg0: 'AWTEvent'):
        """public final void java.awt.Component.dispatchEvent(java.awt.AWTEvent)"""
        super(_Component, self).dispatchEvent(arg0)

    @override
    @overload
    def removeContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.removeContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).removeContainerListener(arg0)

    @override
    @overload
    def getGraphicsConfiguration(self) -> 'GraphicsConfiguration':
        """public java.awt.GraphicsConfiguration java.awt.Component.getGraphicsConfiguration()"""
        return 'GraphicsConfiguration'._wrap(super(Component, self).getGraphicsConfiguration())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: bool, arg2: bool):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,boolean,boolean)"""
        super(_JComponent, self).firePropertyChange(arg0, _boolean.valueOf(arg1), _boolean.valueOf(arg2))

    @override
    @overload
    def registerKeyboardAction(self, arg0: 'ActionListener', arg1: str, arg2: 'KeyStroke', arg3: int):
        """public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,java.lang.String,javax.swing.KeyStroke,int)"""
        super(_JComponent, self).registerKeyboardAction(arg0, arg1, arg2, _int.valueOf(arg3))

    @overload
    def findComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(arg0))

    @override
    @overload
    def resize(self, arg0: int, arg1: int):
        """public void java.awt.Component.resize(int,int)"""
        super(_Component, self).resize(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getHeight(self) -> int:
        """public int javax.swing.JComponent.getHeight()"""
        return int._wrap(super(JComponent, self).getHeight())

    @override
    @overload
    def getTransferHandler(self) -> 'TransferHandler':
        """public javax.swing.TransferHandler javax.swing.JComponent.getTransferHandler()"""
        return 'TransferHandler'._wrap(super(JComponent, self).getTransferHandler())

    @overload
    def imageUpdate(self, arg0: 'Image', arg1: int, arg2: int, arg3: int, arg4: int, arg5: int) -> bool:
        """public boolean java.awt.Component.imageUpdate(java.awt.Image,int,int,int,int,int)"""
        return bool._wrap(super(_Component, self).imageUpdate(arg0, _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4), _int.valueOf(arg5)))

    @override
    @overload
    def getWidth(self) -> int:
        """public int javax.swing.JComponent.getWidth()"""
        return int._wrap(super(JComponent, self).getWidth())

    @override
    @overload
    def transferFocusBackward(self):
        """public void java.awt.Component.transferFocusBackward()"""
        super(Component, self).transferFocusBackward()

    @overload
    def getPropertyChangeListeners(self, arg0: str) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners(java.lang.String)"""
        return List['PropertyChangeListener']._wrap(super(_Component, self).getPropertyChangeListeners(arg0))

    @staticmethod
    @overload
    def isLightweightComponent(arg0: 'Component') -> bool:
        """public static boolean javax.swing.JComponent.isLightweightComponent(java.awt.Component)"""
        return bool._wrap(_JComponent.isLightweightComponent(arg0))

    @override
    @overload
    def getBorder(self) -> 'Border':
        """public javax.swing.border.Border javax.swing.JComponent.getBorder()"""
        return 'Border'._wrap(super(JComponent, self).getBorder())

    @override
    @overload
    def printAll(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.printAll(java.awt.Graphics)"""
        super(_JComponent, self).printAll(arg0)

    @override
    @overload
    def addComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.addComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).addComponentListener(arg0)

    @override
    @overload
    def getBaselineResizeBehavior(self) -> 'BaselineResizeBehavior.Component$BaselineResizeBehavior':
        """public java.awt.Component$BaselineResizeBehavior javax.swing.JComponent.getBaselineResizeBehavior()"""
        return 'BaselineResizeBehavior.Component$BaselineResizeBehavior'._wrap(super(JComponent, self).getBaselineResizeBehavior())

    @override
    @overload
    def print(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.print(java.awt.Graphics)"""
        super(_JComponent, self).print(arg0)

    @overload
    def __init__(self, arg0: Any):
        """public com.badlogic.gdx.tools.flame.GradientPanel$GradientEditor(com.badlogic.gdx.tools.flame.GradientPanel)"""
        val = _GradientEditor(arg0)
        self.__wrapper = val

    @override
    @overload
    def setInputVerifier(self, arg0: 'InputVerifier'):
        """public void javax.swing.JComponent.setInputVerifier(javax.swing.InputVerifier)"""
        super(_JComponent, self).setInputVerifier(arg0)

    @override
    @overload
    def addAncestorListener(self, arg0: 'AncestorListener'):
        """public void javax.swing.JComponent.addAncestorListener(javax.swing.event.AncestorListener)"""
        super(_JComponent, self).addAncestorListener(arg0)

    @override
    @overload
    def getFont(self) -> 'Font':
        """public java.awt.Font java.awt.Component.getFont()"""
        return 'Font'._wrap(super(Component, self).getFont())

    @override
    @overload
    def setFont(self, arg0: 'Font'):
        """public void javax.swing.JComponent.setFont(java.awt.Font)"""
        super(_JComponent, self).setFont(arg0)

    @override
    @overload
    def isOptimizedDrawingEnabled(self) -> bool:
        """public boolean javax.swing.JComponent.isOptimizedDrawingEnabled()"""
        return bool._wrap(super(JComponent, self).isOptimizedDrawingEnabled())

    @override
    @overload
    def isValidateRoot(self) -> bool:
        """public boolean javax.swing.JComponent.isValidateRoot()"""
        return bool._wrap(super(JComponent, self).isValidateRoot())

    @overload
    def prepareImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @override
    @overload
    def setForeground(self, arg0: 'Color'):
        """public void javax.swing.JComponent.setForeground(java.awt.Color)"""
        super(_JComponent, self).setForeground(arg0)

    @overload
    def mouseDrag(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDrag(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDrag(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def isOpaque(self) -> bool:
        """public boolean javax.swing.JComponent.isOpaque()"""
        return bool._wrap(super(JComponent, self).isOpaque())

    @overload
    def createVolatileImage(self, arg0: int, arg1: int, arg2: 'ImageCapabilities') -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int,java.awt.ImageCapabilities) throws java.awt.AWTException"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1), arg2))

    @override
    @overload
    def bounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.bounds()"""
        return 'Rectangle'._wrap(super(Component, self).bounds())

    @override
    @overload
    def update(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.update(java.awt.Graphics)"""
        super(_JComponent, self).update(arg0)

    @override
    @overload
    def add(self, arg0: 'PopupMenu'):
        """public void java.awt.Component.add(java.awt.PopupMenu)"""
        super(_Component, self).add(arg0)

    @override
    @overload
    def getToolTipText(self) -> str:
        """public java.lang.String javax.swing.JComponent.getToolTipText()"""
        return str._wrap(super(JComponent, self).getToolTipText())

    @override
    @overload
    def isVisible(self) -> bool:
        """public boolean java.awt.Component.isVisible()"""
        return bool._wrap(super(Component, self).isVisible())

    @override
    @overload
    def setDropTarget(self, arg0: 'DropTarget'):
        """public synchronized void java.awt.Component.setDropTarget(java.awt.dnd.DropTarget)"""
        super(_Component, self).setDropTarget(arg0)

    @override
    @overload
    def getLocationOnScreen(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocationOnScreen()"""
        return 'Point'._wrap(super(Component, self).getLocationOnScreen())

    @override
    @overload
    def getY(self) -> int:
        """public int javax.swing.JComponent.getY()"""
        return int._wrap(super(JComponent, self).getY())

    @overload
    def getComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def isMaximumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMaximumSizeSet()"""
        return bool._wrap(super(Component, self).isMaximumSizeSet())

    @override
    @overload
    def setAlignmentY(self, arg0: float):
        """public void javax.swing.JComponent.setAlignmentY(float)"""
        super(_JComponent, self).setAlignmentY(_float.valueOf(arg0))

    @override
    @overload
    def getRegisteredKeyStrokes(self) -> List['KeyStroke']:
        """public javax.swing.KeyStroke[] javax.swing.JComponent.getRegisteredKeyStrokes()"""
        return List['KeyStroke']._wrap(super(JComponent, self).getRegisteredKeyStrokes())

    @override
    @overload
    def isFocusable(self) -> bool:
        """public boolean java.awt.Component.isFocusable()"""
        return bool._wrap(super(Component, self).isFocusable())

    @override
    @overload
    def isFocusTraversalPolicyProvider(self) -> bool:
        """public final boolean java.awt.Container.isFocusTraversalPolicyProvider()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicyProvider())

    @override
    @overload
    def getMouseListeners(self) -> List['MouseListener']:
        """public synchronized java.awt.event.MouseListener[] java.awt.Component.getMouseListeners()"""
        return List['MouseListener']._wrap(super(Component, self).getMouseListeners())

    @override
    @overload
    def registerKeyboardAction(self, arg0: 'ActionListener', arg1: 'KeyStroke', arg2: int):
        """public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,javax.swing.KeyStroke,int)"""
        super(_JComponent, self).registerKeyboardAction(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def transferFocusUpCycle(self):
        """public void java.awt.Component.transferFocusUpCycle()"""
        super(Component, self).transferFocusUpCycle()

    @override
    @overload
    def removeKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.removeKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).removeKeyListener(arg0)

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: str, arg2: str):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,char,char)"""
        super(_JComponent, self).firePropertyChange(arg0, _char.valueOf(arg1), _char.valueOf(arg2))

    @override
    @overload
    def getMouseMotionListeners(self) -> List['MouseMotionListener']:
        """public synchronized java.awt.event.MouseMotionListener[] java.awt.Component.getMouseMotionListeners()"""
        return List['MouseMotionListener']._wrap(super(Component, self).getMouseMotionListeners())

    @override
    @overload
    def getAutoscrolls(self) -> bool:
        """public boolean javax.swing.JComponent.getAutoscrolls()"""
        return bool._wrap(super(JComponent, self).getAutoscrolls())

    @override
    @overload
    def addContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.addContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).addContainerListener(arg0)

    @override
    @overload
    def isFocusTraversable(self) -> bool:
        """public boolean java.awt.Component.isFocusTraversable()"""
        return bool._wrap(super(Component, self).isFocusTraversable())

    @overload
    def mouseExit(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseExit(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseExit(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getBounds(self, arg0: 'Rectangle') -> 'Rectangle':
        """public java.awt.Rectangle javax.swing.JComponent.getBounds(java.awt.Rectangle)"""
        return 'Rectangle'._wrap(super(_JComponent, self).getBounds(arg0))

    @override
    @overload
    def setToolTipText(self, arg0: str):
        """public void javax.swing.JComponent.setToolTipText(java.lang.String)"""
        super(_JComponent, self).setToolTipText(arg0)

    @override
    @overload
    def setAutoscrolls(self, arg0: bool):
        """public void javax.swing.JComponent.setAutoscrolls(boolean)"""
        super(_JComponent, self).setAutoscrolls(_boolean.valueOf(arg0))

    @override
    @overload
    def setComponentPopupMenu(self, arg0: 'JPopupMenu'):
        """public void javax.swing.JComponent.setComponentPopupMenu(javax.swing.JPopupMenu)"""
        super(_JComponent, self).setComponentPopupMenu(arg0)

    @override
    @overload
    def setMixingCutoutShape(self, arg0: 'Shape'):
        """public void java.awt.Component.setMixingCutoutShape(java.awt.Shape)"""
        super(_Component, self).setMixingCutoutShape(arg0)

    @override
    @overload
    def getVisibleRect(self) -> 'Rectangle':
        """public java.awt.Rectangle javax.swing.JComponent.getVisibleRect()"""
        return 'Rectangle'._wrap(super(JComponent, self).getVisibleRect())

    @override
    @overload
    def requestFocus(self, arg0: 'Cause'):
        """public void java.awt.Component.requestFocus(java.awt.event.FocusEvent$Cause)"""
        super(_Component, self).requestFocus(arg0)

    @overload
    def createImage(self, arg0: int, arg1: int) -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(int,int)"""
        return 'Image'._wrap(super(_Component, self).createImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def putClientProperty(self, arg0: object, arg1: object):
        """public final void javax.swing.JComponent.putClientProperty(java.lang.Object,java.lang.Object)"""
        super(_JComponent, self).putClientProperty(arg0, arg1)

    @override
    @overload
    def getVetoableChangeListeners(self) -> List['VetoableChangeListener']:
        """public synchronized java.beans.VetoableChangeListener[] javax.swing.JComponent.getVetoableChangeListeners()"""
        return List['VetoableChangeListener']._wrap(super(JComponent, self).getVetoableChangeListeners())

    @override
    @overload
    def scrollRectToVisible(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.scrollRectToVisible(java.awt.Rectangle)"""
        super(_JComponent, self).scrollRectToVisible(arg0)

    @override
    @overload
    def getTopLevelAncestor(self) -> 'Container':
        """public java.awt.Container javax.swing.JComponent.getTopLevelAncestor()"""
        return 'Container'._wrap(super(JComponent, self).getTopLevelAncestor())

    @override
    @overload
    def isRequestFocusEnabled(self) -> bool:
        """public boolean javax.swing.JComponent.isRequestFocusEnabled()"""
        return bool._wrap(super(JComponent, self).isRequestFocusEnabled())

    @override
    @overload
    def getFocusListeners(self) -> List['FocusListener']:
        """public synchronized java.awt.event.FocusListener[] java.awt.Component.getFocusListeners()"""
        return List['FocusListener']._wrap(super(Component, self).getFocusListeners())

    @override
    @overload
    def setLayout(self, arg0: 'LayoutManager'):
        """public void java.awt.Container.setLayout(java.awt.LayoutManager)"""
        super(_Container, self).setLayout(arg0)

    @overload
    def add(self, arg0: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0))

    @override
    @overload
    def getMouseWheelListeners(self) -> List['MouseWheelListener']:
        """public synchronized java.awt.event.MouseWheelListener[] java.awt.Component.getMouseWheelListeners()"""
        return List['MouseWheelListener']._wrap(super(Component, self).getMouseWheelListeners())

    @override
    @overload
    def reshape(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void javax.swing.JComponent.reshape(int,int,int,int)"""
        super(_JComponent, self).reshape(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def setTransferHandler(self, arg0: 'TransferHandler'):
        """public void javax.swing.JComponent.setTransferHandler(javax.swing.TransferHandler)"""
        super(_JComponent, self).setTransferHandler(arg0)

    @override
    @overload
    def getPreferredSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getPreferredSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getPreferredSize())

    @override
    @overload
    def setLocation(self, arg0: int, arg1: int):
        """public void java.awt.Component.setLocation(int,int)"""
        super(_Component, self).setLocation(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def removeInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.removeInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).removeInputMethodListener(arg0)

    @override
    @overload
    def setFocusable(self, arg0: bool):
        """public void java.awt.Component.setFocusable(boolean)"""
        super(_Component, self).setFocusable(_boolean.valueOf(arg0))

    @override
    @overload
    def paintComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.paintComponents(java.awt.Graphics)"""
        super(_Container, self).paintComponents(arg0)

    @override
    @overload
    def addFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.addFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).addFocusListener(arg0)

    @overload
    def prepareImage(self, arg0: 'Image', arg1: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, arg1))

    @override
    @overload
    def addKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.addKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).addKeyListener(arg0)

    @override
    @overload
    def resize(self, arg0: 'Dimension'):
        """public void java.awt.Component.resize(java.awt.Dimension)"""
        super(_Component, self).resize(arg0)

    @override
    @overload
    def setComponentZOrder(self, arg0: 'Component', arg1: int):
        """public void java.awt.Container.setComponentZOrder(java.awt.Component,int)"""
        super(_Container, self).setComponentZOrder(arg0, _int.valueOf(arg1))

    @override
    @overload
    def list(self):
        """public void java.awt.Component.list()"""
        super(Component, self).list()

    @overload
    def add(self, arg0: str, arg1: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.lang.String,java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, arg1))

    @override
    @overload
    def paintImmediately(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void javax.swing.JComponent.paintImmediately(int,int,int,int)"""
        super(_JComponent, self).paintImmediately(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def getMinimumSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getMinimumSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getMinimumSize())

    @override
    @overload
    def setEnabled(self, arg0: bool):
        """public void javax.swing.JComponent.setEnabled(boolean)"""
        super(_JComponent, self).setEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def hasFocus(self) -> bool:
        """public boolean java.awt.Component.hasFocus()"""
        return bool._wrap(super(Component, self).hasFocus())

    @overload
    def createVolatileImage(self, arg0: int, arg1: int) -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int)"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.removeHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).removeHierarchyListener(arg0)

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.awt.Component.toString()"""
        return str._wrap(super(Component, self).toString())

    @override
    @overload
    def addMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.addMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).addMouseListener(arg0)

    @override
    @overload
    def isFocusOwner(self) -> bool:
        """public boolean java.awt.Component.isFocusOwner()"""
        return bool._wrap(super(Component, self).isFocusOwner())

    @override
    @overload
    def getAccessibleContext(self) -> 'AccessibleContext':
        """public javax.accessibility.AccessibleContext javax.swing.JPanel.getAccessibleContext()"""
        return 'AccessibleContext'._wrap(super(JPanel, self).getAccessibleContext())

    @overload
    def postEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.postEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).postEvent(arg0))

    @overload
    def getLocation(self, arg0: 'Point') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getLocation(java.awt.Point)"""
        return 'Point'._wrap(super(_JComponent, self).getLocation(arg0))

    @overload
    def getBaseline(self, arg0: int, arg1: int) -> int:
        """public int javax.swing.JComponent.getBaseline(int,int)"""
        return int._wrap(super(_JComponent, self).getBaseline(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def findComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeNotify(self):
        """public void javax.swing.JComponent.removeNotify()"""
        super(JComponent, self).removeNotify()

    @override
    @overload
    def getForeground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getForeground()"""
        return 'Color'._wrap(super(Component, self).getForeground())

    @override
    @overload
    def show(self):
        """public void java.awt.Component.show()"""
        super(Component, self).show()

    @override
    @overload
    def isDoubleBuffered(self) -> bool:
        """public boolean javax.swing.JComponent.isDoubleBuffered()"""
        return bool._wrap(super(JComponent, self).isDoubleBuffered())

    @override
    @overload
    def isFocusCycleRoot(self) -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot()"""
        return bool._wrap(super(Container, self).isFocusCycleRoot())

    @override
    @overload
    def addMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.addMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).addMouseWheelListener(arg0)

    @override
    @overload
    def hide(self):
        """public void javax.swing.JComponent.hide()"""
        super(JComponent, self).hide()

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def revalidate(self):
        """public void javax.swing.JComponent.revalidate()"""
        super(JComponent, self).revalidate()

    @override
    @overload
    def getActionMap(self) -> 'ActionMap':
        """public final javax.swing.ActionMap javax.swing.JComponent.getActionMap()"""
        return 'ActionMap'._wrap(super(JComponent, self).getActionMap())

    @override
    @overload
    def requestFocusInWindow(self) -> bool:
        """public boolean javax.swing.JComponent.requestFocusInWindow()"""
        return bool._wrap(super(JComponent, self).requestFocusInWindow())

    @overload
    def action(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.action(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).action(arg0, arg1))

    @override
    @overload
    def isManagingFocus(self) -> bool:
        """public boolean javax.swing.JComponent.isManagingFocus()"""
        return bool._wrap(super(JComponent, self).isManagingFocus())

    @overload
    def handleSelected(self, arg0: 'Color'):
        """public void com.badlogic.gdx.tools.flame.GradientPanel$GradientEditor.handleSelected(java.awt.Color)"""
        super(_GradientEditor, self).handleSelected(arg0)

    @override
    @overload
    def isLightweight(self) -> bool:
        """public boolean java.awt.Component.isLightweight()"""
        return bool._wrap(super(Component, self).isLightweight())

    @override
    @overload
    def setAlignmentX(self, arg0: float):
        """public void javax.swing.JComponent.setAlignmentX(float)"""
        super(_JComponent, self).setAlignmentX(_float.valueOf(arg0))

    @overload
    def getFocusTraversalKeys(self, arg0: int) -> 'Set':
        """public java.util.Set<java.awt.AWTKeyStroke> java.awt.Container.getFocusTraversalKeys(int)"""
        return 'Set'._wrap(super(_Container, self).getFocusTraversalKeys(_int.valueOf(arg0)))

    @override
    @overload
    def setFocusTraversalKeysEnabled(self, arg0: bool):
        """public void java.awt.Component.setFocusTraversalKeysEnabled(boolean)"""
        super(_Component, self).setFocusTraversalKeysEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def remove(self, arg0: 'Component'):
        """public void java.awt.Container.remove(java.awt.Component)"""
        super(_Container, self).remove(arg0)

    @overload
    def getInsets(self, arg0: 'Insets') -> 'Insets':
        """public java.awt.Insets javax.swing.JComponent.getInsets(java.awt.Insets)"""
        return 'Insets'._wrap(super(_JComponent, self).getInsets(arg0))

    @override
    @overload
    def insets(self) -> 'Insets':
        """public java.awt.Insets java.awt.Container.insets()"""
        return 'Insets'._wrap(super(Container, self).insets())

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int):
        """public void javax.swing.JComponent.repaint(long,int,int,int,int)"""
        super(_JComponent, self).repaint(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4))

    @override
    @overload
    def setFocusTraversalPolicy(self, arg0: 'FocusTraversalPolicy'):
        """public void java.awt.Container.setFocusTraversalPolicy(java.awt.FocusTraversalPolicy)"""
        super(_Container, self).setFocusTraversalPolicy(arg0)

    @overload
    def getSize(self, arg0: 'Dimension') -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getSize(java.awt.Dimension)"""
        return 'Dimension'._wrap(super(_JComponent, self).getSize(arg0))

    @override
    @overload
    def enable(self, arg0: bool):
        """public void java.awt.Component.enable(boolean)"""
        super(_Component, self).enable(_boolean.valueOf(arg0))

    @overload
    def getToolTipLocation(self, arg0: 'MouseEvent') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getToolTipLocation(java.awt.event.MouseEvent)"""
        return 'Point'._wrap(super(_JComponent, self).getToolTipLocation(arg0))

    @override
    @overload
    def addPropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Container.addPropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Container, self).addPropertyChangeListener(arg0)

    @overload
    def getComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(arg0))

    @override
    @overload
    def size(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.size()"""
        return 'Dimension'._wrap(super(Component, self).size())

    @override
    @overload
    def getVerifyInputWhenFocusTarget(self) -> bool:
        """public boolean javax.swing.JComponent.getVerifyInputWhenFocusTarget()"""
        return bool._wrap(super(JComponent, self).getVerifyInputWhenFocusTarget())

    @overload
    def mouseMove(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseMove(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseMove(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getActionForKeyStroke(self, arg0: 'KeyStroke') -> 'ActionListener':
        """public java.awt.event.ActionListener javax.swing.JComponent.getActionForKeyStroke(javax.swing.KeyStroke)"""
        return 'ActionListener'._wrap(super(_JComponent, self).getActionForKeyStroke(arg0))

    @overload
    def lostFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.lostFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).lostFocus(arg0, arg1))

    @override
    @overload
    def isMinimumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMinimumSizeSet()"""
        return bool._wrap(super(Component, self).isMinimumSizeSet())

    @override
    @overload
    def isForegroundSet(self) -> bool:
        """public boolean java.awt.Component.isForegroundSet()"""
        return bool._wrap(super(Component, self).isForegroundSet())

    @overload
    def getMousePosition(self, arg0: bool) -> 'Point':
        """public java.awt.Point java.awt.Container.getMousePosition(boolean) throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(_Container, self).getMousePosition(_boolean.valueOf(arg0)))

    @overload
    def getFontMetrics(self, arg0: 'Font') -> 'FontMetrics':
        """public java.awt.FontMetrics javax.swing.JComponent.getFontMetrics(java.awt.Font)"""
        return 'FontMetrics'._wrap(super(_JComponent, self).getFontMetrics(arg0))

    @overload
    def getListeners(self, arg0: 'Class') -> List['EventListener']:
        """public <T extends java.util.EventListener> T[] javax.swing.JComponent.getListeners(java.lang.Class<T>)"""
        return List['EventListener']._wrap(super(_JComponent, self).getListeners(arg0))

    @override
    @overload
    def getHierarchyBoundsListeners(self) -> List['HierarchyBoundsListener']:
        """public synchronized java.awt.event.HierarchyBoundsListener[] java.awt.Component.getHierarchyBoundsListeners()"""
        return List['HierarchyBoundsListener']._wrap(super(Component, self).getHierarchyBoundsListeners())

    @override
    @overload
    def minimumSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.minimumSize()"""
        return 'Dimension'._wrap(super(Container, self).minimumSize())

    @overload
    def handleEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.handleEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).handleEvent(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @override
    @overload
    def getComponentListeners(self) -> List['ComponentListener']:
        """public synchronized java.awt.event.ComponentListener[] java.awt.Component.getComponentListeners()"""
        return List['ComponentListener']._wrap(super(Component, self).getComponentListeners())

    @override
    @overload
    def computeVisibleRect(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.computeVisibleRect(java.awt.Rectangle)"""
        super(_JComponent, self).computeVisibleRect(arg0)

    @override
    @overload
    def deliverEvent(self, arg0: 'Event'):
        """public void java.awt.Container.deliverEvent(java.awt.Event)"""
        super(_Container, self).deliverEvent(arg0)

    @override
    @overload
    def addHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.addHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).addHierarchyBoundsListener(arg0)

    @override
    @overload
    def getAlignmentX(self) -> float:
        """public float javax.swing.JComponent.getAlignmentX()"""
        return float._wrap(super(JComponent, self).getAlignmentX())

    @overload
    def add(self, arg0: 'Component', arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component,int)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def repaint(self):
        """public void java.awt.Component.repaint()"""
        super(Component, self).repaint()

    @overload
    def gotFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.gotFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).gotFocus(arg0, arg1))

    @override
    @overload
    def createToolTip(self) -> 'JToolTip':
        """public javax.swing.JToolTip javax.swing.JComponent.createToolTip()"""
        return 'JToolTip'._wrap(super(JComponent, self).createToolTip())

    @overload
    def getToolTipText(self, arg0: 'MouseEvent') -> str:
        """public java.lang.String javax.swing.JComponent.getToolTipText(java.awt.event.MouseEvent)"""
        return str._wrap(super(_JComponent, self).getToolTipText(arg0))

    @override
    @overload
    def printComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.printComponents(java.awt.Graphics)"""
        super(_Container, self).printComponents(arg0)

    @override
    @overload
    def getColorModel(self) -> 'ColorModel':
        """public java.awt.image.ColorModel java.awt.Component.getColorModel()"""
        return 'ColorModel'._wrap(super(Component, self).getColorModel())

    @override
    @overload
    def setFocusTraversalPolicyProvider(self, arg0: bool):
        """public final void java.awt.Container.setFocusTraversalPolicyProvider(boolean)"""
        super(_Container, self).setFocusTraversalPolicyProvider(_boolean.valueOf(arg0))

    @overload
    def getComponentZOrder(self, arg0: 'Component') -> int:
        """public int java.awt.Container.getComponentZOrder(java.awt.Component)"""
        return int._wrap(super(_Container, self).getComponentZOrder(arg0))

    @override
    @overload
    def getDebugGraphicsOptions(self) -> int:
        """public int javax.swing.JComponent.getDebugGraphicsOptions()"""
        return int._wrap(super(JComponent, self).getDebugGraphicsOptions())

    @overload
    def areFocusTraversalKeysSet(self, arg0: int) -> bool:
        """public boolean java.awt.Container.areFocusTraversalKeysSet(int)"""
        return bool._wrap(super(_Container, self).areFocusTraversalKeysSet(_int.valueOf(arg0)))

    @override
    @overload
    def getSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.getSize()"""
        return 'Dimension'._wrap(super(Component, self).getSize())

    @override
    @overload
    def setName(self, arg0: str):
        """public void java.awt.Component.setName(java.lang.String)"""
        super(_Component, self).setName(arg0)

    @override
    @overload
    def repaint(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.repaint(java.awt.Rectangle)"""
        super(_JComponent, self).repaint(arg0)

    @overload
    def getClientProperty(self, arg0: object) -> object:
        """public final java.lang.Object javax.swing.JComponent.getClientProperty(java.lang.Object)"""
        return object._wrap(super(_JComponent, self).getClientProperty(arg0))

    @override
    @overload
    def unregisterKeyboardAction(self, arg0: 'KeyStroke'):
        """public void javax.swing.JComponent.unregisterKeyboardAction(javax.swing.KeyStroke)"""
        super(_JComponent, self).unregisterKeyboardAction(arg0)

    @overload
    def requestFocus(self, arg0: bool) -> bool:
        """public boolean javax.swing.JComponent.requestFocus(boolean)"""
        return bool._wrap(super(_JComponent, self).requestFocus(_boolean.valueOf(arg0)))

    @override
    @overload
    def setActionMap(self, arg0: 'ActionMap'):
        """public final void javax.swing.JComponent.setActionMap(javax.swing.ActionMap)"""
        super(_JComponent, self).setActionMap(arg0)

    @override
    @overload
    def getX(self) -> int:
        """public int javax.swing.JComponent.getX()"""
        return int._wrap(super(JComponent, self).getX())

    @overload
    def mouseEnter(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseEnter(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseEnter(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def updateUI(self):
        """public void javax.swing.JPanel.updateUI()"""
        super(JPanel, self).updateUI()

    @override
    @overload
    def getToolkit(self) -> 'Toolkit':
        """public java.awt.Toolkit java.awt.Component.getToolkit()"""
        return 'Toolkit'._wrap(super(Component, self).getToolkit())

    @override
    @overload
    def isCursorSet(self) -> bool:
        """public boolean java.awt.Component.isCursorSet()"""
        return bool._wrap(super(Component, self).isCursorSet())

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object, arg2: int):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object,int)"""
        super(_Container, self).add(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def setPreferredSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setPreferredSize(java.awt.Dimension)"""
        super(_JComponent, self).setPreferredSize(arg0)

    @override
    @overload
    def setBounds(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.setBounds(int,int,int,int)"""
        super(_Component, self).setBounds(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def isFocusTraversalPolicySet(self) -> bool:
        """public boolean java.awt.Container.isFocusTraversalPolicySet()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicySet())

    @override
    @overload
    def requestFocus(self):
        """public void javax.swing.JComponent.requestFocus()"""
        super(JComponent, self).requestFocus()

    @override
    @overload
    def getAncestorListeners(self) -> List['AncestorListener']:
        """public javax.swing.event.AncestorListener[] javax.swing.JComponent.getAncestorListeners()"""
        return List['AncestorListener']._wrap(super(JComponent, self).getAncestorListeners())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool._wrap(super(_object, self).equals(arg0))

    @overload
    def getInputMap(self, arg0: int) -> 'InputMap':
        """public final javax.swing.InputMap javax.swing.JComponent.getInputMap(int)"""
        return 'InputMap'._wrap(super(_JComponent, self).getInputMap(_int.valueOf(arg0)))

    @override
    @overload
    def isEnabled(self) -> bool:
        """public boolean java.awt.Component.isEnabled()"""
        return bool._wrap(super(Component, self).isEnabled())

    @override
    @overload
    def move(self, arg0: int, arg1: int):
        """public void java.awt.Component.move(int,int)"""
        super(_Component, self).move(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getName(self) -> str:
        """public java.lang.String java.awt.Component.getName()"""
        return str._wrap(super(Component, self).getName())

    @override
    @overload
    def addMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.addMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).addMouseMotionListener(arg0)

    @override
    @overload
    def getIgnoreRepaint(self) -> bool:
        """public boolean java.awt.Component.getIgnoreRepaint()"""
        return bool._wrap(super(Component, self).getIgnoreRepaint())

    @overload
    def isFocusCycleRoot(self, arg0: 'Container') -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot(java.awt.Container)"""
        return bool._wrap(super(_Container, self).isFocusCycleRoot(arg0))

    @override
    @overload
    def getGraphics(self) -> 'Graphics':
        """public java.awt.Graphics javax.swing.JComponent.getGraphics()"""
        return 'Graphics'._wrap(super(JComponent, self).getGraphics())

    @override
    @overload
    def setLocale(self, arg0: 'Locale'):
        """public void java.awt.Component.setLocale(java.util.Locale)"""
        super(_Component, self).setLocale(arg0)

    @override
    @overload
    def paintAll(self, arg0: 'Graphics'):
        """public void java.awt.Component.paintAll(java.awt.Graphics)"""
        super(_Component, self).paintAll(arg0)

    @override
    @overload
    def setDoubleBuffered(self, arg0: bool):
        """public void javax.swing.JComponent.setDoubleBuffered(boolean)"""
        super(_JComponent, self).setDoubleBuffered(_boolean.valueOf(arg0))

    @override
    @overload
    def isPreferredSizeSet(self) -> bool:
        """public boolean java.awt.Component.isPreferredSizeSet()"""
        return bool._wrap(super(Component, self).isPreferredSizeSet())

    @override
    @overload
    def addInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.addInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).addInputMethodListener(arg0)

    @override
    @overload
    def removeMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.removeMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).removeMouseWheelListener(arg0)

    @override
    @overload
    def getInputMap(self) -> 'InputMap':
        """public final javax.swing.InputMap javax.swing.JComponent.getInputMap()"""
        return 'InputMap'._wrap(super(JComponent, self).getInputMap())

    @override
    @overload
    def setVisible(self, arg0: bool):
        """public void javax.swing.JComponent.setVisible(boolean)"""
        super(_JComponent, self).setVisible(_boolean.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,byte,byte)"""
        super(_Component, self).firePropertyChange(arg0, _byte.valueOf(arg1), _byte.valueOf(arg2))

    @override
    @overload
    def getUIClassID(self) -> str:
        """public java.lang.String javax.swing.JPanel.getUIClassID()"""
        return str._wrap(super(JPanel, self).getUIClassID())

    @override
    @overload
    def transferFocusDownCycle(self):
        """public void java.awt.Container.transferFocusDownCycle()"""
        super(Container, self).transferFocusDownCycle()

    @override
    @overload
    def getNextFocusableComponent(self) -> 'Component':
        """public java.awt.Component javax.swing.JComponent.getNextFocusableComponent()"""
        return 'Component'._wrap(super(JComponent, self).getNextFocusableComponent())

    @override
    @overload
    def getUI(self) -> 'PanelUI':
        """public javax.swing.plaf.PanelUI javax.swing.JPanel.getUI()"""
        return 'PanelUI'._wrap(super(JPanel, self).getUI())

    @override
    @overload
    def setBounds(self, arg0: 'Rectangle'):
        """public void java.awt.Component.setBounds(java.awt.Rectangle)"""
        super(_Component, self).setBounds(arg0)

    @override
    @overload
    def repaint(self, arg0: int):
        """public void java.awt.Component.repaint(long)"""
        super(_Component, self).repaint(_long.valueOf(arg0))

    @override
    @overload
    def removeHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.removeHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).removeHierarchyBoundsListener(arg0)

    @override
    @overload
    def getComponentPopupMenu(self) -> 'JPopupMenu':
        """public javax.swing.JPopupMenu javax.swing.JComponent.getComponentPopupMenu()"""
        return 'JPopupMenu'._wrap(super(JComponent, self).getComponentPopupMenu())

    @override
    @overload
    def getMousePosition(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getMousePosition() throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(Component, self).getMousePosition())

    @override
    @overload
    def getComponentCount(self) -> int:
        """public int java.awt.Container.getComponentCount()"""
        return int._wrap(super(Container, self).getComponentCount())

    @override
    @overload
    def getInputMethodRequests(self) -> 'InputMethodRequests':
        """public java.awt.im.InputMethodRequests java.awt.Component.getInputMethodRequests()"""
        return 'InputMethodRequests'._wrap(super(Component, self).getInputMethodRequests())

    @override
    @overload
    def setMaximumSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setMaximumSize(java.awt.Dimension)"""
        super(_JComponent, self).setMaximumSize(arg0)

    @override
    @overload
    def setRequestFocusEnabled(self, arg0: bool):
        """public void javax.swing.JComponent.setRequestFocusEnabled(boolean)"""
        super(_JComponent, self).setRequestFocusEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def setFocusTraversalKeys(self, arg0: int, arg1: 'Set'):
        """public void javax.swing.JComponent.setFocusTraversalKeys(int,java.util.Set<? extends java.awt.AWTKeyStroke>)"""
        super(_JComponent, self).setFocusTraversalKeys(_int.valueOf(arg0), arg1)

    @overload
    def inside(self, arg0: int, arg1: int) -> bool:
        """public boolean java.awt.Component.inside(int,int)"""
        return bool._wrap(super(_Component, self).inside(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def requestDefaultFocus(self) -> bool:
        """public boolean javax.swing.JComponent.requestDefaultFocus()"""
        return bool._wrap(super(JComponent, self).requestDefaultFocus())

    @override
    @overload
    def disable(self):
        """public void javax.swing.JComponent.disable()"""
        super(JComponent, self).disable()

    @override
    @overload
    def enableInputMethods(self, arg0: bool):
        """public void java.awt.Component.enableInputMethods(boolean)"""
        super(_Component, self).enableInputMethods(_boolean.valueOf(arg0))

    @override
    @overload
    def layout(self):
        """public void java.awt.Container.layout()"""
        super(Container, self).layout()

    @override
    @overload
    def getInputMethodListeners(self) -> List['InputMethodListener']:
        """public synchronized java.awt.event.InputMethodListener[] java.awt.Component.getInputMethodListeners()"""
        return List['InputMethodListener']._wrap(super(Component, self).getInputMethodListeners())

    @override
    @overload
    def paint(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.paint(java.awt.Graphics)"""
        super(_JComponent, self).paint(arg0)

    @override
    @overload
    def transferFocus(self):
        """public void java.awt.Component.transferFocus()"""
        super(Component, self).transferFocus()

    @override
    @overload
    def removeComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.removeComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).removeComponentListener(arg0)

    @override
    @overload
    def getCursor(self) -> 'Cursor':
        """public java.awt.Cursor java.awt.Component.getCursor()"""
        return 'Cursor'._wrap(super(Component, self).getCursor())

    @override
    @overload
    def setMinimumSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setMinimumSize(java.awt.Dimension)"""
        super(_JComponent, self).setMinimumSize(arg0)

    @override
    @overload
    def getContainerListeners(self) -> List['ContainerListener']:
        """public synchronized java.awt.event.ContainerListener[] java.awt.Container.getContainerListeners()"""
        return List['ContainerListener']._wrap(super(Container, self).getContainerListeners())

    @override
    @overload
    def setLocation(self, arg0: 'Point'):
        """public void java.awt.Component.setLocation(java.awt.Point)"""
        super(_Component, self).setLocation(arg0)

    @override
    @overload
    def setSize(self, arg0: 'Dimension'):
        """public void java.awt.Component.setSize(java.awt.Dimension)"""
        super(_Component, self).setSize(arg0)

    @override
    @overload
    def removeAll(self):
        """public void java.awt.Container.removeAll()"""
        super(Container, self).removeAll()

    @overload
    def getPopupLocation(self, arg0: 'MouseEvent') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getPopupLocation(java.awt.event.MouseEvent)"""
        return 'Point'._wrap(super(_JComponent, self).getPopupLocation(arg0))

    @overload
    def isAncestorOf(self, arg0: 'Component') -> bool:
        """public boolean java.awt.Container.isAncestorOf(java.awt.Component)"""
        return bool._wrap(super(_Container, self).isAncestorOf(arg0))

    @override
    @overload
    def setOpaque(self, arg0: bool):
        """public void javax.swing.JComponent.setOpaque(boolean)"""
        super(_JComponent, self).setOpaque(_boolean.valueOf(arg0))

    @overload
    def contains(self, arg0: int, arg1: int) -> bool:
        """public boolean javax.swing.JComponent.contains(int,int)"""
        return bool._wrap(super(_JComponent, self).contains(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def setCursor(self, arg0: 'Cursor'):
        """public void java.awt.Component.setCursor(java.awt.Cursor)"""
        super(_Component, self).setCursor(arg0)

    @override
    @overload
    def validate(self):
        """public void java.awt.Container.validate()"""
        super(Container, self).validate()

    @override
    @overload
    def getMaximumSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getMaximumSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getMaximumSize())

    @override
    @overload
    def getBackground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getBackground()"""
        return 'Color'._wrap(super(Component, self).getBackground())

    @overload
    def createImage(self, arg0: 'ImageProducer') -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(java.awt.image.ImageProducer)"""
        return 'Image'._wrap(super(_Component, self).createImage(arg0))

    @override
    @overload
    def setVerifyInputWhenFocusTarget(self, arg0: bool):
        """public void javax.swing.JComponent.setVerifyInputWhenFocusTarget(boolean)"""
        super(_JComponent, self).setVerifyInputWhenFocusTarget(_boolean.valueOf(arg0))

    @override
    @overload
    def removePropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0, arg1)

    @override
    @overload
    def countComponents(self) -> int:
        """public int java.awt.Container.countComponents()"""
        return int._wrap(super(Container, self).countComponents()) 
 
 
# CLASS: com.badlogic.gdx.tools.flame.ModelInfluencerPanel
from pyquantum_helper import import_once as _import_once
import javax.accessibility.AccessibleContext as AccessibleContext
import javax.swing.JToolTip as JToolTip
import java.awt.event.HierarchyBoundsListener as HierarchyBoundsListener
import java.awt.event.ActionListener as _ActionListener
_ActionListener = _ActionListener
import java.awt.ComponentOrientation as _ComponentOrientation
_ComponentOrientation = _ComponentOrientation
import java.awt.image.ImageProducer as ImageProducer
import java.awt.GraphicsConfiguration as GraphicsConfiguration
import java.awt.Graphics as _Graphics
_Graphics = _Graphics
import javax.swing.JToolTip as _JToolTip
_JToolTip = _JToolTip
import java.awt.Container as _Container
_Container = _Container
import java.awt.MenuComponent as MenuComponent
import java.awt.im.InputMethodRequests as _InputMethodRequests
_InputMethodRequests = _InputMethodRequests
import java.awt.FocusTraversalPolicy as _FocusTraversalPolicy
_FocusTraversalPolicy = _FocusTraversalPolicy
import java.lang.Byte as _byte
import java.awt.Dimension as Dimension
import java.awt.Font as _Font
_Font = _Font
import javax.swing.plaf.PanelUI as _PanelUI
_PanelUI = _PanelUI
import java.awt.event.ContainerListener as ContainerListener
import javax.swing.event.AncestorListener as AncestorListener
import java.awt.AWTEvent as AWTEvent
import javax.swing.JPanel as JPanel
import java.awt.image.ColorModel as _ColorModel
_ColorModel = _ColorModel
import java.lang.Object as _object
try:
    from pygdx.graphics import g3d
except ImportError:
    g3d = _import_once("pygdx.graphics.g3d")

import java.awt.ComponentOrientation as ComponentOrientation
import java.awt.im.InputContext as _InputContext
_InputContext = _InputContext
from builtins import float
import java.awt.event.HierarchyListener as HierarchyListener
import java.awt.event.InputMethodListener as InputMethodListener
from typing import List
import java.awt.event.MouseWheelListener as _MouseWheelListener
_MouseWheelListener = _MouseWheelListener
import java.awt.event.KeyListener as KeyListener
import java.awt.Component as Component
from builtins import int
import java.awt.LayoutManager as LayoutManager
import java.awt.FontMetrics as _FontMetrics
_FontMetrics = _FontMetrics
import java.awt.Container as Container
import com.badlogic.gdx.tools.flame.ModelInfluencerPanel as _ModelInfluencerPanel
_ModelInfluencerPanel = _ModelInfluencerPanel
from builtins import type
import java.awt.image.VolatileImage as _VolatileImage
_VolatileImage = _VolatileImage
import java.awt.Shape as Shape
import com.badlogic.gdx.tools.flame.EditorPanel as _EditorPanel
_EditorPanel = _EditorPanel
import java.awt.Rectangle as Rectangle
import java.awt.event.ContainerListener as _ContainerListener
_ContainerListener = _ContainerListener
import java.awt.event.HierarchyListener as _HierarchyListener
_HierarchyListener = _HierarchyListener
import java.lang.String as _string
import javax.swing.InputVerifier as _InputVerifier
_InputVerifier = _InputVerifier
import java.awt.Insets as _Insets
_Insets = _Insets
import javax.swing.border.Border as _Border
_Border = _Border
import java.awt.event.ComponentListener as _ComponentListener
_ComponentListener = _ComponentListener
import javax.swing.ActionMap as ActionMap
import java.beans.VetoableChangeListener as VetoableChangeListener
import java.awt.event.ComponentListener as ComponentListener
import javax.swing.KeyStroke as KeyStroke
import java.beans.VetoableChangeListener as _VetoableChangeListener
_VetoableChangeListener = _VetoableChangeListener
from builtins import object
try:
    from pygdx.graphics.g3d.particles import influencers
except ImportError:
    influencers = _import_once("pygdx.graphics.g3d.particles.influencers")

import java.awt.event.KeyListener as _KeyListener
_KeyListener = _KeyListener
import java.awt.Component.BaselineResizeBehavior as BaselineResizeBehavior
import java.awt.Component as _Component_BaselineResizeBehavior
_BaselineResizeBehavior = _Component_BaselineResizeBehavior.BaselineResizeBehavior
import java.awt.Cursor as _Cursor
_Cursor = _Cursor
import java.awt.im.InputMethodRequests as InputMethodRequests
import java.lang.Long as _long
import javax.swing.JPanel as _JPanel
_JPanel = _JPanel
import java.awt.event.FocusListener as _FocusListener
_FocusListener = _FocusListener
import java.lang.Character as _char
import javax.swing.TransferHandler as TransferHandler
import java.awt.event.FocusEvent.Cause as Cause
import javax.swing.JComponent as JComponent
import javax.accessibility.AccessibleContext as _AccessibleContext
_AccessibleContext = _AccessibleContext
import java.awt.event.MouseWheelListener as MouseWheelListener
import java.util.Set as _Set
_Set = _Set
import java.awt.image.ColorModel as ColorModel
import java.lang.Boolean as _boolean
import java.awt.event.MouseMotionListener as MouseMotionListener
import java.util.EventListener as EventListener
import java.awt.Insets as Insets
import javax.swing.KeyStroke as _KeyStroke
_KeyStroke = _KeyStroke
import java.awt.GraphicsConfiguration as _GraphicsConfiguration
_GraphicsConfiguration = _GraphicsConfiguration
import java.awt.dnd.DropTarget as _DropTarget
_DropTarget = _DropTarget
from builtins import bool
import java.beans.PropertyChangeListener as _PropertyChangeListener
_PropertyChangeListener = _PropertyChangeListener
import java.awt.LayoutManager as _LayoutManager
_LayoutManager = _LayoutManager
import java.awt.PopupMenu as PopupMenu
import java.util.EventListener as _EventListener
_EventListener = _EventListener
import java.awt.im.InputContext as InputContext
import java.awt.Component as _Component
_Component = _Component
import java.awt.Font as Font
import java.awt.image.VolatileImage as VolatileImage
import java.awt.dnd.DropTarget as DropTarget
import java.lang.String as _String
_String = _String
import java.lang.Float as _float
import java.awt.Cursor as Cursor
import java.awt.event.MouseListener as _MouseListener
_MouseListener = _MouseListener
import java.awt.Toolkit as _Toolkit
_Toolkit = _Toolkit
import java.io.PrintStream as PrintStream
import javax.swing.JRootPane as _JRootPane
_JRootPane = _JRootPane
import java.awt.Dimension as _Dimension
_Dimension = _Dimension
import java.awt.event.ActionListener as ActionListener
import java.awt.event.MouseEvent as MouseEvent
import java.awt.Color as _Color
_Color = _Color
import javax.swing.JPopupMenu as _JPopupMenu
_JPopupMenu = _JPopupMenu
import javax.swing.InputMap as _InputMap
_InputMap = _InputMap
import java.awt.event.MouseListener as MouseListener
import java.lang.Class as _Class
_Class = _Class
import java.util.Locale as Locale
import java.lang.Double as _double
import javax.swing.plaf.PanelUI as PanelUI
import java.awt.Point as _Point
_Point = _Point
import java.lang.Object as _Object
_Object = _Object
import java.beans.PropertyChangeListener as PropertyChangeListener
import javax.swing.border.Border as Border
import javax.swing.JComponent as _JComponent
_JComponent = _JComponent
import javax.swing.InputVerifier as InputVerifier
import java.io.PrintWriter as PrintWriter
import java.awt.Point as Point
import javax.swing.event.AncestorListener as _AncestorListener
_AncestorListener = _AncestorListener
import java.lang.Short as _short
import java.awt.Toolkit as Toolkit
import java.awt.event.HierarchyBoundsListener as _HierarchyBoundsListener
_HierarchyBoundsListener = _HierarchyBoundsListener
import javax.swing.TransferHandler as _TransferHandler
_TransferHandler = _TransferHandler
import javax.swing.InputMap as InputMap
import java.awt.Rectangle as _Rectangle
_Rectangle = _Rectangle
import javax.swing.JRootPane as JRootPane
import java.awt.Event as Event
import java.awt.event.FocusListener as FocusListener
import java.awt.image.ImageObserver as ImageObserver
from builtins import str
from pyquantum_helper import override
import javax.swing.ActionMap as _ActionMap
_ActionMap = _ActionMap
import java.awt.FocusTraversalPolicy as FocusTraversalPolicy
import java.awt.event.MouseMotionListener as _MouseMotionListener
_MouseMotionListener = _MouseMotionListener
import java.awt.event.InputMethodListener as _InputMethodListener
_InputMethodListener = _InputMethodListener
import javax.swing.JPopupMenu as JPopupMenu
import java.util.Set as Set
import java.lang.Integer as _int
import java.awt.Image as _Image
_Image = _Image
import java.awt.FontMetrics as FontMetrics
import java.awt.Color as Color
import java.awt.Image as Image
import java.awt.Graphics as Graphics
import java.awt.ImageCapabilities as ImageCapabilities
import java.util.Locale as _Locale
_Locale = _Locale
 
class ModelInfluencerPanel():
    """com.badlogic.gdx.tools.flame.ModelInfluencerPanel"""
 
    @staticmethod
    def _wrap(java_value: _ModelInfluencerPanel) -> 'ModelInfluencerPanel':
        return ModelInfluencerPanel(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _ModelInfluencerPanel):
        """
        Dynamic initializer for ModelInfluencerPanel.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_ModelInfluencerPanel__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_ModelInfluencerPanel__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def removeVetoableChangeListener(self, arg0: 'VetoableChangeListener'):
        """public synchronized void javax.swing.JComponent.removeVetoableChangeListener(java.beans.VetoableChangeListener)"""
        super(_JComponent, self).removeVetoableChangeListener(arg0)

    @override
    @overload
    def getComponents(self) -> List['Component']:
        """public java.awt.Component[] java.awt.Container.getComponents()"""
        return List['Component']._wrap(super(Container, self).getComponents())

    @override
    @overload
    def setDebugGraphicsOptions(self, arg0: int):
        """public void javax.swing.JComponent.setDebugGraphicsOptions(int)"""
        super(_JComponent, self).setDebugGraphicsOptions(_int.valueOf(arg0))

    @override
    @overload
    def isValid(self) -> bool:
        """public boolean java.awt.Component.isValid()"""
        return bool._wrap(super(Component, self).isValid())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def getDefaultLocale() -> 'Locale':
        """public static java.util.Locale javax.swing.JComponent.getDefaultLocale()"""
        return Locale._wrap(_JComponent.getDefaultLocale())

    @override
    @overload
    def getInputVerifier(self) -> 'InputVerifier':
        """public javax.swing.InputVerifier javax.swing.JComponent.getInputVerifier()"""
        return 'InputVerifier'._wrap(super(JComponent, self).getInputVerifier())

    @override
    @overload
    def list(self, arg0: 'PrintStream', arg1: int):
        """public void java.awt.Container.list(java.io.PrintStream,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @override
    @overload
    def setUI(self, arg0: 'PanelUI'):
        """public void javax.swing.JPanel.setUI(javax.swing.plaf.PanelUI)"""
        super(_JPanel, self).setUI(arg0)

    @override
    @overload
    def getFocusTraversalPolicy(self) -> 'FocusTraversalPolicy':
        """public java.awt.FocusTraversalPolicy java.awt.Container.getFocusTraversalPolicy()"""
        return 'FocusTraversalPolicy'._wrap(super(Container, self).getFocusTraversalPolicy())

    @override
    @overload
    def getParent(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getParent()"""
        return 'Container'._wrap(super(Component, self).getParent())

    @override
    @overload
    def paintImmediately(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.paintImmediately(java.awt.Rectangle)"""
        super(_JComponent, self).paintImmediately(arg0)

    @staticmethod
    @overload
    def setDefaultLocale(arg0: 'Locale'):
        """public static void javax.swing.JComponent.setDefaultLocale(java.util.Locale)"""
        _JComponent.setDefaultLocale(arg0)

    @overload
    def setValue(self, arg0: 'ModelInfluencer'):
        """public void com.badlogic.gdx.tools.flame.ModelInfluencerPanel.setValue(com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer)"""
        super(_ModelInfluencerPanel, self).setValue(arg0)

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,float,float)"""
        super(_Component, self).firePropertyChange(arg0, _float.valueOf(arg1), _float.valueOf(arg2))

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object)"""
        super(_Container, self).add(arg0, arg1)

    @override
    @overload
    def getLocale(self) -> 'Locale':
        """public java.util.Locale java.awt.Component.getLocale()"""
        return 'Locale'._wrap(super(Component, self).getLocale())

    @override
    @overload
    def setInheritsPopupMenu(self, arg0: bool):
        """public void javax.swing.JComponent.setInheritsPopupMenu(boolean)"""
        super(_JComponent, self).setInheritsPopupMenu(_boolean.valueOf(arg0))

    @override
    @overload
    def getHierarchyListeners(self) -> List['HierarchyListener']:
        """public synchronized java.awt.event.HierarchyListener[] java.awt.Component.getHierarchyListeners()"""
        return List['HierarchyListener']._wrap(super(Component, self).getHierarchyListeners())

    @override
    @overload
    def nextFocus(self):
        """public void java.awt.Component.nextFocus()"""
        super(Component, self).nextFocus()

    @override
    @overload
    def isPaintingTile(self) -> bool:
        """public boolean javax.swing.JComponent.isPaintingTile()"""
        return bool._wrap(super(JComponent, self).isPaintingTile())

    @override
    @overload
    def getContentPanel(self) -> 'JPanel':
        """public javax.swing.JPanel com.badlogic.gdx.tools.flame.EditorPanel.getContentPanel()"""
        return 'JPanel'._wrap(super(EditorPanel, self).getContentPanel())

    @override
    @overload
    def isDisplayable(self) -> bool:
        """public boolean java.awt.Component.isDisplayable()"""
        return bool._wrap(super(Component, self).isDisplayable())

    @override
    @overload
    def getBounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.getBounds()"""
        return 'Rectangle'._wrap(super(Component, self).getBounds())

    @override
    @overload
    def removeMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.removeMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).removeMouseMotionListener(arg0)

    @override
    @overload
    def isShowing(self) -> bool:
        """public boolean java.awt.Component.isShowing()"""
        return bool._wrap(super(Component, self).isShowing())

    @override
    @overload
    def getDropTarget(self) -> 'DropTarget':
        """public synchronized java.awt.dnd.DropTarget java.awt.Component.getDropTarget()"""
        return 'DropTarget'._wrap(super(Component, self).getDropTarget())

    @override
    @overload
    def isFontSet(self) -> bool:
        """public boolean java.awt.Component.isFontSet()"""
        return bool._wrap(super(Component, self).isFontSet())

    @overload
    def mouseUp(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseUp(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseUp(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def setIgnoreRepaint(self, arg0: bool):
        """public void java.awt.Component.setIgnoreRepaint(boolean)"""
        super(_Component, self).setIgnoreRepaint(_boolean.valueOf(arg0))

    @override
    @overload
    def getPropertyChangeListeners(self) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners()"""
        return List['PropertyChangeListener']._wrap(super(Component, self).getPropertyChangeListeners())

    @override
    @overload
    def isBackgroundSet(self) -> bool:
        """public boolean java.awt.Component.isBackgroundSet()"""
        return bool._wrap(super(Component, self).isBackgroundSet())

    @override
    @overload
    def getLocation(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocation()"""
        return 'Point'._wrap(super(Component, self).getLocation())

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int._wrap(super(object, self).hashCode())

    @override
    @overload
    def location(self) -> 'Point':
        """public java.awt.Point java.awt.Component.location()"""
        return 'Point'._wrap(super(Component, self).location())

    @override
    @overload
    def getComponentOrientation(self) -> 'ComponentOrientation':
        """public java.awt.ComponentOrientation java.awt.Component.getComponentOrientation()"""
        return 'ComponentOrientation'._wrap(super(Component, self).getComponentOrientation())

    @override
    @overload
    def addHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.addHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).addHierarchyListener(arg0)

    @override
    @overload
    def getInheritsPopupMenu(self) -> bool:
        """public boolean javax.swing.JComponent.getInheritsPopupMenu()"""
        return bool._wrap(super(JComponent, self).getInheritsPopupMenu())

    @override
    @overload
    def setComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Component.setComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Component, self).setComponentOrientation(arg0)

    @override
    @overload
    def getFocusCycleRootAncestor(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getFocusCycleRootAncestor()"""
        return 'Container'._wrap(super(Component, self).getFocusCycleRootAncestor())

    @override
    @overload
    def show(self, arg0: bool):
        """public void java.awt.Component.show(boolean)"""
        super(_Component, self).show(_boolean.valueOf(arg0))

    @staticmethod
    @overload
    def addContent(arg0: 'JPanel', arg1: int, arg2: int, arg3: 'JComponent', arg4: bool, arg5: int, arg6: int, arg7: float, arg8: float):
        """public static void com.badlogic.gdx.tools.flame.EditorPanel.addContent(javax.swing.JPanel,int,int,javax.swing.JComponent,boolean,int,int,float,float)"""
        _EditorPanel.addContent(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3, _boolean.valueOf(arg4), _int.valueOf(arg5), _int.valueOf(arg6), _float.valueOf(arg7), _float.valueOf(arg8))

    @override
    @overload
    def grabFocus(self):
        """public void javax.swing.JComponent.grabFocus()"""
        super(JComponent, self).grabFocus()

    @overload
    def locate(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.locate(int,int)"""
        return 'Component'._wrap(super(_Container, self).locate(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def isPaintingForPrint(self) -> bool:
        """public final boolean javax.swing.JComponent.isPaintingForPrint()"""
        return bool._wrap(super(JComponent, self).isPaintingForPrint())

    @overload
    def keyDown(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyDown(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyDown(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,int,int)"""
        super(_JComponent, self).firePropertyChange(arg0, _int.valueOf(arg1), _int.valueOf(arg2))

    @override
    @overload
    def getLayout(self) -> 'LayoutManager':
        """public java.awt.LayoutManager java.awt.Container.getLayout()"""
        return 'LayoutManager'._wrap(super(Container, self).getLayout())

    @override
    @overload
    def preferredSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.preferredSize()"""
        return 'Dimension'._wrap(super(Container, self).preferredSize())

    @override
    @overload
    def addNotify(self):
        """public void javax.swing.JComponent.addNotify()"""
        super(JComponent, self).addNotify()

    @override
    @overload
    def setSize(self, arg0: int, arg1: int):
        """public void java.awt.Component.setSize(int,int)"""
        super(_Component, self).setSize(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.repaint(int,int,int,int)"""
        super(_Component, self).repaint(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @overload
    def requestFocusInWindow(self, arg0: 'Cause') -> bool:
        """public boolean java.awt.Component.requestFocusInWindow(java.awt.event.FocusEvent$Cause)"""
        return bool._wrap(super(_Component, self).requestFocusInWindow(arg0))

    @override
    @overload
    def remove(self, arg0: int):
        """public void java.awt.Container.remove(int)"""
        super(_Container, self).remove(_int.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,long,long)"""
        super(_Component, self).firePropertyChange(arg0, _long.valueOf(arg1), _long.valueOf(arg2))

    @override
    @overload
    def update(self, arg0: 'FlameMain'):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.update(com.badlogic.gdx.tools.flame.FlameMain)"""
        super(_EditorPanel, self).update(arg0)

    @override
    @overload
    def setFocusCycleRoot(self, arg0: bool):
        """public void java.awt.Container.setFocusCycleRoot(boolean)"""
        super(_Container, self).setFocusCycleRoot(_boolean.valueOf(arg0))

    @overload
    def keyUp(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyUp(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyUp(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def setBackground(self, arg0: 'Color'):
        """public void javax.swing.JComponent.setBackground(java.awt.Color)"""
        super(_JComponent, self).setBackground(arg0)

    @override
    @overload
    def doLayout(self):
        """public void java.awt.Container.doLayout()"""
        super(Container, self).doLayout()

    @override
    @overload
    def enable(self):
        """public void javax.swing.JComponent.enable()"""
        super(JComponent, self).enable()

    @override
    @overload
    def getInsets(self) -> 'Insets':
        """public java.awt.Insets javax.swing.JComponent.getInsets()"""
        return 'Insets'._wrap(super(JComponent, self).getInsets())

    @override
    @overload
    def setNextFocusableComponent(self, arg0: 'Component'):
        """public void javax.swing.JComponent.setNextFocusableComponent(java.awt.Component)"""
        super(_JComponent, self).setNextFocusableComponent(arg0)

    @override
    @overload
    def getAlignmentY(self) -> float:
        """public float javax.swing.JComponent.getAlignmentY()"""
        return float._wrap(super(JComponent, self).getAlignmentY())

    @overload
    def checkImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @override
    @overload
    def getFocusTraversalKeysEnabled(self) -> bool:
        """public boolean java.awt.Component.getFocusTraversalKeysEnabled()"""
        return bool._wrap(super(Component, self).getFocusTraversalKeysEnabled())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getRootPane(self) -> 'JRootPane':
        """public javax.swing.JRootPane javax.swing.JComponent.getRootPane()"""
        return 'JRootPane'._wrap(super(JComponent, self).getRootPane())

    @override
    @overload
    def invalidate(self):
        """public void java.awt.Container.invalidate()"""
        super(Container, self).invalidate()

    @override
    @overload
    def resetKeyboardActions(self):
        """public void javax.swing.JComponent.resetKeyboardActions()"""
        super(JComponent, self).resetKeyboardActions()

    @overload
    def getComponent(self, arg0: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponent(int)"""
        return 'Component'._wrap(super(_Container, self).getComponent(_int.valueOf(arg0)))

    @override
    @overload
    def setName(self, arg0: str):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setName(java.lang.String)"""
        super(_EditorPanel, self).setName(arg0)

    @override
    @overload
    def addPropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Container.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Container, self).addPropertyChangeListener(arg0, arg1)

    @override
    @overload
    def setInputMap(self, arg0: int, arg1: 'InputMap'):
        """public final void javax.swing.JComponent.setInputMap(int,javax.swing.InputMap)"""
        super(_JComponent, self).setInputMap(_int.valueOf(arg0), arg1)

    @override
    @overload
    def removePropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0)

    @override
    @overload
    def applyComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Container.applyComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Container, self).applyComponentOrientation(arg0)

    @override
    @overload
    def setBorder(self, arg0: 'Border'):
        """public void javax.swing.JComponent.setBorder(javax.swing.border.Border)"""
        super(_JComponent, self).setBorder(arg0)

    @override
    @overload
    def remove(self, arg0: 'MenuComponent'):
        """public void java.awt.Component.remove(java.awt.MenuComponent)"""
        super(_Component, self).remove(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintStream'):
        """public void java.awt.Component.list(java.io.PrintStream)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def removeMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.removeMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).removeMouseListener(arg0)

    @overload
    def __init__(self, arg0: 'FlameMain', arg1: 'ModelInfluencer', arg2: bool, arg3: str, arg4: str):
        """public com.badlogic.gdx.tools.flame.ModelInfluencerPanel(com.badlogic.gdx.tools.flame.FlameMain,com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer,boolean,java.lang.String,java.lang.String)"""
        val = _ModelInfluencerPanel(arg0, arg1, _boolean.valueOf(arg2), arg3, arg4)
        self.__wrapper = val

    @override
    @overload
    def list(self, arg0: 'PrintWriter'):
        """public void java.awt.Component.list(java.io.PrintWriter)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def getKeyListeners(self) -> List['KeyListener']:
        """public synchronized java.awt.event.KeyListener[] java.awt.Component.getKeyListeners()"""
        return List['KeyListener']._wrap(super(Component, self).getKeyListeners())

    @override
    @overload
    def getInputContext(self) -> 'InputContext':
        """public java.awt.im.InputContext java.awt.Component.getInputContext()"""
        return 'InputContext'._wrap(super(Component, self).getInputContext())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,double,double)"""
        super(_Component, self).firePropertyChange(arg0, _double.valueOf(arg1), _double.valueOf(arg2))

    @override
    @overload
    def removeAncestorListener(self, arg0: 'AncestorListener'):
        """public void javax.swing.JComponent.removeAncestorListener(javax.swing.event.AncestorListener)"""
        super(_JComponent, self).removeAncestorListener(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintWriter', arg1: int):
        """public void java.awt.Container.list(java.io.PrintWriter,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @overload
    def checkImage(self, arg0: 'Image', arg1: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, arg1))

    @override
    @overload
    def removeFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.removeFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).removeFocusListener(arg0)

    @overload
    def mouseDown(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDown(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDown(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def setIsAlwayShown(self, arg0: bool):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setIsAlwayShown(boolean)"""
        super(_EditorPanel, self).setIsAlwayShown(_boolean.valueOf(arg0))

    @overload
    def getConditionForKeyStroke(self, arg0: 'KeyStroke') -> int:
        """public int javax.swing.JComponent.getConditionForKeyStroke(javax.swing.KeyStroke)"""
        return int._wrap(super(_JComponent, self).getConditionForKeyStroke(arg0))

    @override
    @overload
    def getTreeLock(self) -> object:
        """public final java.lang.Object java.awt.Component.getTreeLock()"""
        return object._wrap(super(Component, self).getTreeLock())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @override
    @overload
    def addVetoableChangeListener(self, arg0: 'VetoableChangeListener'):
        """public synchronized void javax.swing.JComponent.addVetoableChangeListener(java.beans.VetoableChangeListener)"""
        super(_JComponent, self).addVetoableChangeListener(arg0)

    @overload
    def contains(self, arg0: 'Point') -> bool:
        """public boolean java.awt.Component.contains(java.awt.Point)"""
        return bool._wrap(super(_Component, self).contains(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,short,short)"""
        super(_Component, self).firePropertyChange(arg0, _short.valueOf(arg1), _short.valueOf(arg2))

    @override
    @overload
    def dispatchEvent(self, arg0: 'AWTEvent'):
        """public final void java.awt.Component.dispatchEvent(java.awt.AWTEvent)"""
        super(_Component, self).dispatchEvent(arg0)

    @override
    @overload
    def removeContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.removeContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).removeContainerListener(arg0)

    @override
    @overload
    def getGraphicsConfiguration(self) -> 'GraphicsConfiguration':
        """public java.awt.GraphicsConfiguration java.awt.Component.getGraphicsConfiguration()"""
        return 'GraphicsConfiguration'._wrap(super(Component, self).getGraphicsConfiguration())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: bool, arg2: bool):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,boolean,boolean)"""
        super(_JComponent, self).firePropertyChange(arg0, _boolean.valueOf(arg1), _boolean.valueOf(arg2))

    @override
    @overload
    def registerKeyboardAction(self, arg0: 'ActionListener', arg1: str, arg2: 'KeyStroke', arg3: int):
        """public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,java.lang.String,javax.swing.KeyStroke,int)"""
        super(_JComponent, self).registerKeyboardAction(arg0, arg1, arg2, _int.valueOf(arg3))

    @overload
    def findComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(arg0))

    @override
    @overload
    def resize(self, arg0: int, arg1: int):
        """public void java.awt.Component.resize(int,int)"""
        super(_Component, self).resize(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getHeight(self) -> int:
        """public int javax.swing.JComponent.getHeight()"""
        return int._wrap(super(JComponent, self).getHeight())

    @override
    @overload
    def getTransferHandler(self) -> 'TransferHandler':
        """public javax.swing.TransferHandler javax.swing.JComponent.getTransferHandler()"""
        return 'TransferHandler'._wrap(super(JComponent, self).getTransferHandler())

    @overload
    def imageUpdate(self, arg0: 'Image', arg1: int, arg2: int, arg3: int, arg4: int, arg5: int) -> bool:
        """public boolean java.awt.Component.imageUpdate(java.awt.Image,int,int,int,int,int)"""
        return bool._wrap(super(_Component, self).imageUpdate(arg0, _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4), _int.valueOf(arg5)))

    @override
    @overload
    def getWidth(self) -> int:
        """public int javax.swing.JComponent.getWidth()"""
        return int._wrap(super(JComponent, self).getWidth())

    @override
    @overload
    def transferFocusBackward(self):
        """public void java.awt.Component.transferFocusBackward()"""
        super(Component, self).transferFocusBackward()

    @overload
    def getPropertyChangeListeners(self, arg0: str) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners(java.lang.String)"""
        return List['PropertyChangeListener']._wrap(super(_Component, self).getPropertyChangeListeners(arg0))

    @override
    @overload
    def getName(self) -> str:
        """public java.lang.String com.badlogic.gdx.tools.flame.EditorPanel.getName()"""
        return str._wrap(super(EditorPanel, self).getName())

    @staticmethod
    @overload
    def isLightweightComponent(arg0: 'Component') -> bool:
        """public static boolean javax.swing.JComponent.isLightweightComponent(java.awt.Component)"""
        return bool._wrap(_JComponent.isLightweightComponent(arg0))

    @override
    @overload
    def getBorder(self) -> 'Border':
        """public javax.swing.border.Border javax.swing.JComponent.getBorder()"""
        return 'Border'._wrap(super(JComponent, self).getBorder())

    @override
    @overload
    def printAll(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.printAll(java.awt.Graphics)"""
        super(_JComponent, self).printAll(arg0)

    @override
    @overload
    def addComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.addComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).addComponentListener(arg0)

    @override
    @overload
    def getBaselineResizeBehavior(self) -> 'BaselineResizeBehavior.Component$BaselineResizeBehavior':
        """public java.awt.Component$BaselineResizeBehavior javax.swing.JComponent.getBaselineResizeBehavior()"""
        return 'BaselineResizeBehavior.Component$BaselineResizeBehavior'._wrap(super(JComponent, self).getBaselineResizeBehavior())

    @override
    @overload
    def print(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.print(java.awt.Graphics)"""
        super(_JComponent, self).print(arg0)

    @override
    @overload
    def setInputVerifier(self, arg0: 'InputVerifier'):
        """public void javax.swing.JComponent.setInputVerifier(javax.swing.InputVerifier)"""
        super(_JComponent, self).setInputVerifier(arg0)

    @override
    @overload
    def addAncestorListener(self, arg0: 'AncestorListener'):
        """public void javax.swing.JComponent.addAncestorListener(javax.swing.event.AncestorListener)"""
        super(_JComponent, self).addAncestorListener(arg0)

    @override
    @overload
    def getFont(self) -> 'Font':
        """public java.awt.Font java.awt.Component.getFont()"""
        return 'Font'._wrap(super(Component, self).getFont())

    @override
    @overload
    def setFont(self, arg0: 'Font'):
        """public void javax.swing.JComponent.setFont(java.awt.Font)"""
        super(_JComponent, self).setFont(arg0)

    @override
    @overload
    def isOptimizedDrawingEnabled(self) -> bool:
        """public boolean javax.swing.JComponent.isOptimizedDrawingEnabled()"""
        return bool._wrap(super(JComponent, self).isOptimizedDrawingEnabled())

    @override
    @overload
    def isValidateRoot(self) -> bool:
        """public boolean javax.swing.JComponent.isValidateRoot()"""
        return bool._wrap(super(JComponent, self).isValidateRoot())

    @overload
    def prepareImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @override
    @overload
    def setHasAdvanced(self, arg0: bool):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setHasAdvanced(boolean)"""
        super(_EditorPanel, self).setHasAdvanced(_boolean.valueOf(arg0))

    @override
    @overload
    def setForeground(self, arg0: 'Color'):
        """public void javax.swing.JComponent.setForeground(java.awt.Color)"""
        super(_JComponent, self).setForeground(arg0)

    @overload
    def mouseDrag(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDrag(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDrag(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def isOpaque(self) -> bool:
        """public boolean javax.swing.JComponent.isOpaque()"""
        return bool._wrap(super(JComponent, self).isOpaque())

    @overload
    def createVolatileImage(self, arg0: int, arg1: int, arg2: 'ImageCapabilities') -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int,java.awt.ImageCapabilities) throws java.awt.AWTException"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1), arg2))

    @override
    @overload
    def bounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.bounds()"""
        return 'Rectangle'._wrap(super(Component, self).bounds())

    @override
    @overload
    def update(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.update(java.awt.Graphics)"""
        super(_JComponent, self).update(arg0)

    @override
    @overload
    def add(self, arg0: 'PopupMenu'):
        """public void java.awt.Component.add(java.awt.PopupMenu)"""
        super(_Component, self).add(arg0)

    @override
    @overload
    def getToolTipText(self) -> str:
        """public java.lang.String javax.swing.JComponent.getToolTipText()"""
        return str._wrap(super(JComponent, self).getToolTipText())

    @override
    @overload
    def isVisible(self) -> bool:
        """public boolean java.awt.Component.isVisible()"""
        return bool._wrap(super(Component, self).isVisible())

    @override
    @overload
    def setDropTarget(self, arg0: 'DropTarget'):
        """public synchronized void java.awt.Component.setDropTarget(java.awt.dnd.DropTarget)"""
        super(_Component, self).setDropTarget(arg0)

    @override
    @overload
    def getLocationOnScreen(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocationOnScreen()"""
        return 'Point'._wrap(super(Component, self).getLocationOnScreen())

    @override
    @overload
    def getY(self) -> int:
        """public int javax.swing.JComponent.getY()"""
        return int._wrap(super(JComponent, self).getY())

    @overload
    def getComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def isMaximumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMaximumSizeSet()"""
        return bool._wrap(super(Component, self).isMaximumSizeSet())

    @override
    @overload
    def setAlignmentY(self, arg0: float):
        """public void javax.swing.JComponent.setAlignmentY(float)"""
        super(_JComponent, self).setAlignmentY(_float.valueOf(arg0))

    @override
    @overload
    def getRegisteredKeyStrokes(self) -> List['KeyStroke']:
        """public javax.swing.KeyStroke[] javax.swing.JComponent.getRegisteredKeyStrokes()"""
        return List['KeyStroke']._wrap(super(JComponent, self).getRegisteredKeyStrokes())

    @override
    @overload
    def isFocusable(self) -> bool:
        """public boolean java.awt.Component.isFocusable()"""
        return bool._wrap(super(Component, self).isFocusable())

    @override
    @overload
    def isFocusTraversalPolicyProvider(self) -> bool:
        """public final boolean java.awt.Container.isFocusTraversalPolicyProvider()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicyProvider())

    @override
    @overload
    def getMouseListeners(self) -> List['MouseListener']:
        """public synchronized java.awt.event.MouseListener[] java.awt.Component.getMouseListeners()"""
        return List['MouseListener']._wrap(super(Component, self).getMouseListeners())

    @override
    @overload
    def registerKeyboardAction(self, arg0: 'ActionListener', arg1: 'KeyStroke', arg2: int):
        """public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,javax.swing.KeyStroke,int)"""
        super(_JComponent, self).registerKeyboardAction(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def transferFocusUpCycle(self):
        """public void java.awt.Component.transferFocusUpCycle()"""
        super(Component, self).transferFocusUpCycle()

    @override
    @overload
    def removeKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.removeKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).removeKeyListener(arg0)

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: str, arg2: str):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,char,char)"""
        super(_JComponent, self).firePropertyChange(arg0, _char.valueOf(arg1), _char.valueOf(arg2))

    @override
    @overload
    def getMouseMotionListeners(self) -> List['MouseMotionListener']:
        """public synchronized java.awt.event.MouseMotionListener[] java.awt.Component.getMouseMotionListeners()"""
        return List['MouseMotionListener']._wrap(super(Component, self).getMouseMotionListeners())

    @override
    @overload
    def getAutoscrolls(self) -> bool:
        """public boolean javax.swing.JComponent.getAutoscrolls()"""
        return bool._wrap(super(JComponent, self).getAutoscrolls())

    @override
    @overload
    def addContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.addContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).addContainerListener(arg0)

    @override
    @overload
    def isFocusTraversable(self) -> bool:
        """public boolean java.awt.Component.isFocusTraversable()"""
        return bool._wrap(super(Component, self).isFocusTraversable())

    @overload
    def mouseExit(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseExit(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseExit(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getBounds(self, arg0: 'Rectangle') -> 'Rectangle':
        """public java.awt.Rectangle javax.swing.JComponent.getBounds(java.awt.Rectangle)"""
        return 'Rectangle'._wrap(super(_JComponent, self).getBounds(arg0))

    @override
    @overload
    def setToolTipText(self, arg0: str):
        """public void javax.swing.JComponent.setToolTipText(java.lang.String)"""
        super(_JComponent, self).setToolTipText(arg0)

    @override
    @overload
    def setAutoscrolls(self, arg0: bool):
        """public void javax.swing.JComponent.setAutoscrolls(boolean)"""
        super(_JComponent, self).setAutoscrolls(_boolean.valueOf(arg0))

    @override
    @overload
    def setComponentPopupMenu(self, arg0: 'JPopupMenu'):
        """public void javax.swing.JComponent.setComponentPopupMenu(javax.swing.JPopupMenu)"""
        super(_JComponent, self).setComponentPopupMenu(arg0)

    @override
    @overload
    def setMixingCutoutShape(self, arg0: 'Shape'):
        """public void java.awt.Component.setMixingCutoutShape(java.awt.Shape)"""
        super(_Component, self).setMixingCutoutShape(arg0)

    @override
    @overload
    def getVisibleRect(self) -> 'Rectangle':
        """public java.awt.Rectangle javax.swing.JComponent.getVisibleRect()"""
        return 'Rectangle'._wrap(super(JComponent, self).getVisibleRect())

    @override
    @overload
    def requestFocus(self, arg0: 'Cause'):
        """public void java.awt.Component.requestFocus(java.awt.event.FocusEvent$Cause)"""
        super(_Component, self).requestFocus(arg0)

    @overload
    def createImage(self, arg0: int, arg1: int) -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(int,int)"""
        return 'Image'._wrap(super(_Component, self).createImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def putClientProperty(self, arg0: object, arg1: object):
        """public final void javax.swing.JComponent.putClientProperty(java.lang.Object,java.lang.Object)"""
        super(_JComponent, self).putClientProperty(arg0, arg1)

    @override
    @overload
    def getVetoableChangeListeners(self) -> List['VetoableChangeListener']:
        """public synchronized java.beans.VetoableChangeListener[] javax.swing.JComponent.getVetoableChangeListeners()"""
        return List['VetoableChangeListener']._wrap(super(JComponent, self).getVetoableChangeListeners())

    @override
    @overload
    def scrollRectToVisible(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.scrollRectToVisible(java.awt.Rectangle)"""
        super(_JComponent, self).scrollRectToVisible(arg0)

    @override
    @overload
    def getTopLevelAncestor(self) -> 'Container':
        """public java.awt.Container javax.swing.JComponent.getTopLevelAncestor()"""
        return 'Container'._wrap(super(JComponent, self).getTopLevelAncestor())

    @override
    @overload
    def isRequestFocusEnabled(self) -> bool:
        """public boolean javax.swing.JComponent.isRequestFocusEnabled()"""
        return bool._wrap(super(JComponent, self).isRequestFocusEnabled())

    @override
    @overload
    def getFocusListeners(self) -> List['FocusListener']:
        """public synchronized java.awt.event.FocusListener[] java.awt.Component.getFocusListeners()"""
        return List['FocusListener']._wrap(super(Component, self).getFocusListeners())

    @override
    @overload
    def setLayout(self, arg0: 'LayoutManager'):
        """public void java.awt.Container.setLayout(java.awt.LayoutManager)"""
        super(_Container, self).setLayout(arg0)

    @overload
    def add(self, arg0: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0))

    @override
    @overload
    def getMouseWheelListeners(self) -> List['MouseWheelListener']:
        """public synchronized java.awt.event.MouseWheelListener[] java.awt.Component.getMouseWheelListeners()"""
        return List['MouseWheelListener']._wrap(super(Component, self).getMouseWheelListeners())

    @override
    @overload
    def reshape(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void javax.swing.JComponent.reshape(int,int,int,int)"""
        super(_JComponent, self).reshape(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def setTransferHandler(self, arg0: 'TransferHandler'):
        """public void javax.swing.JComponent.setTransferHandler(javax.swing.TransferHandler)"""
        super(_JComponent, self).setTransferHandler(arg0)

    @override
    @overload
    def getPreferredSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getPreferredSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getPreferredSize())

    @override
    @overload
    def setLocation(self, arg0: int, arg1: int):
        """public void java.awt.Component.setLocation(int,int)"""
        super(_Component, self).setLocation(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def removeInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.removeInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).removeInputMethodListener(arg0)

    @override
    @overload
    def setFocusable(self, arg0: bool):
        """public void java.awt.Component.setFocusable(boolean)"""
        super(_Component, self).setFocusable(_boolean.valueOf(arg0))

    @override
    @overload
    def paintComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.paintComponents(java.awt.Graphics)"""
        super(_Container, self).paintComponents(arg0)

    @override
    @overload
    def addFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.addFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).addFocusListener(arg0)

    @overload
    def prepareImage(self, arg0: 'Image', arg1: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, arg1))

    @override
    @overload
    def addKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.addKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).addKeyListener(arg0)

    @override
    @overload
    def resize(self, arg0: 'Dimension'):
        """public void java.awt.Component.resize(java.awt.Dimension)"""
        super(_Component, self).resize(arg0)

    @override
    @overload
    def setComponentZOrder(self, arg0: 'Component', arg1: int):
        """public void java.awt.Container.setComponentZOrder(java.awt.Component,int)"""
        super(_Container, self).setComponentZOrder(arg0, _int.valueOf(arg1))

    @override
    @overload
    def list(self):
        """public void java.awt.Component.list()"""
        super(Component, self).list()

    @overload
    def add(self, arg0: str, arg1: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.lang.String,java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, arg1))

    @override
    @overload
    def paintImmediately(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void javax.swing.JComponent.paintImmediately(int,int,int,int)"""
        super(_JComponent, self).paintImmediately(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def getMinimumSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getMinimumSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getMinimumSize())

    @override
    @overload
    def setEnabled(self, arg0: bool):
        """public void javax.swing.JComponent.setEnabled(boolean)"""
        super(_JComponent, self).setEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def hasFocus(self) -> bool:
        """public boolean java.awt.Component.hasFocus()"""
        return bool._wrap(super(Component, self).hasFocus())

    @overload
    def createVolatileImage(self, arg0: int, arg1: int) -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int)"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.removeHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).removeHierarchyListener(arg0)

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.awt.Component.toString()"""
        return str._wrap(super(Component, self).toString())

    @override
    @overload
    def addMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.addMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).addMouseListener(arg0)

    @override
    @overload
    def isFocusOwner(self) -> bool:
        """public boolean java.awt.Component.isFocusOwner()"""
        return bool._wrap(super(Component, self).isFocusOwner())

    @override
    @overload
    def getAccessibleContext(self) -> 'AccessibleContext':
        """public javax.accessibility.AccessibleContext javax.swing.JPanel.getAccessibleContext()"""
        return 'AccessibleContext'._wrap(super(JPanel, self).getAccessibleContext())

    @overload
    def postEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.postEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).postEvent(arg0))

    @overload
    def getLocation(self, arg0: 'Point') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getLocation(java.awt.Point)"""
        return 'Point'._wrap(super(_JComponent, self).getLocation(arg0))

    @overload
    def getBaseline(self, arg0: int, arg1: int) -> int:
        """public int javax.swing.JComponent.getBaseline(int,int)"""
        return int._wrap(super(_JComponent, self).getBaseline(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def findComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeNotify(self):
        """public void javax.swing.JComponent.removeNotify()"""
        super(JComponent, self).removeNotify()

    @override
    @overload
    def getForeground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getForeground()"""
        return 'Color'._wrap(super(Component, self).getForeground())

    @override
    @overload
    def show(self):
        """public void java.awt.Component.show()"""
        super(Component, self).show()

    @override
    @overload
    def isDoubleBuffered(self) -> bool:
        """public boolean javax.swing.JComponent.isDoubleBuffered()"""
        return bool._wrap(super(JComponent, self).isDoubleBuffered())

    @override
    @overload
    def setDescription(self, arg0: str):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setDescription(java.lang.String)"""
        super(_EditorPanel, self).setDescription(arg0)

    @override
    @overload
    def isFocusCycleRoot(self) -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot()"""
        return bool._wrap(super(Container, self).isFocusCycleRoot())

    @override
    @overload
    def addMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.addMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).addMouseWheelListener(arg0)

    @override
    @overload
    def hide(self):
        """public void javax.swing.JComponent.hide()"""
        super(JComponent, self).hide()

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def revalidate(self):
        """public void javax.swing.JComponent.revalidate()"""
        super(JComponent, self).revalidate()

    @overload
    def onTemplateChecked(self, arg0: 'Model', arg1: bool):
        """public void com.badlogic.gdx.tools.flame.ModelInfluencerPanel.onTemplateChecked(com.badlogic.gdx.graphics.g3d.Model,boolean)"""
        super(_ModelInfluencerPanel, self).onTemplateChecked(arg0, _boolean.valueOf(arg1))

    @override
    @overload
    def getActionMap(self) -> 'ActionMap':
        """public final javax.swing.ActionMap javax.swing.JComponent.getActionMap()"""
        return 'ActionMap'._wrap(super(JComponent, self).getActionMap())

    @override
    @overload
    def requestFocusInWindow(self) -> bool:
        """public boolean javax.swing.JComponent.requestFocusInWindow()"""
        return bool._wrap(super(JComponent, self).requestFocusInWindow())

    @overload
    def action(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.action(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).action(arg0, arg1))

    @override
    @overload
    def isManagingFocus(self) -> bool:
        """public boolean javax.swing.JComponent.isManagingFocus()"""
        return bool._wrap(super(JComponent, self).isManagingFocus())

    @override
    @overload
    def isLightweight(self) -> bool:
        """public boolean java.awt.Component.isLightweight()"""
        return bool._wrap(super(Component, self).isLightweight())

    @override
    @overload
    def setAlignmentX(self, arg0: float):
        """public void javax.swing.JComponent.setAlignmentX(float)"""
        super(_JComponent, self).setAlignmentX(_float.valueOf(arg0))

    @overload
    def getFocusTraversalKeys(self, arg0: int) -> 'Set':
        """public java.util.Set<java.awt.AWTKeyStroke> java.awt.Container.getFocusTraversalKeys(int)"""
        return 'Set'._wrap(super(_Container, self).getFocusTraversalKeys(_int.valueOf(arg0)))

    @override
    @overload
    def setFocusTraversalKeysEnabled(self, arg0: bool):
        """public void java.awt.Component.setFocusTraversalKeysEnabled(boolean)"""
        super(_Component, self).setFocusTraversalKeysEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def remove(self, arg0: 'Component'):
        """public void java.awt.Container.remove(java.awt.Component)"""
        super(_Container, self).remove(arg0)

    @overload
    def getInsets(self, arg0: 'Insets') -> 'Insets':
        """public java.awt.Insets javax.swing.JComponent.getInsets(java.awt.Insets)"""
        return 'Insets'._wrap(super(_JComponent, self).getInsets(arg0))

    @override
    @overload
    def insets(self) -> 'Insets':
        """public java.awt.Insets java.awt.Container.insets()"""
        return 'Insets'._wrap(super(Container, self).insets())

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int):
        """public void javax.swing.JComponent.repaint(long,int,int,int,int)"""
        super(_JComponent, self).repaint(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4))

    @override
    @overload
    def setFocusTraversalPolicy(self, arg0: 'FocusTraversalPolicy'):
        """public void java.awt.Container.setFocusTraversalPolicy(java.awt.FocusTraversalPolicy)"""
        super(_Container, self).setFocusTraversalPolicy(arg0)

    @overload
    def getSize(self, arg0: 'Dimension') -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getSize(java.awt.Dimension)"""
        return 'Dimension'._wrap(super(_JComponent, self).getSize(arg0))

    @override
    @overload
    def enable(self, arg0: bool):
        """public void java.awt.Component.enable(boolean)"""
        super(_Component, self).enable(_boolean.valueOf(arg0))

    @overload
    def getToolTipLocation(self, arg0: 'MouseEvent') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getToolTipLocation(java.awt.event.MouseEvent)"""
        return 'Point'._wrap(super(_JComponent, self).getToolTipLocation(arg0))

    @override
    @overload
    def addPropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Container.addPropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Container, self).addPropertyChangeListener(arg0)

    @overload
    def getComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(arg0))

    @override
    @overload
    def size(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.size()"""
        return 'Dimension'._wrap(super(Component, self).size())

    @override
    @overload
    def getVerifyInputWhenFocusTarget(self) -> bool:
        """public boolean javax.swing.JComponent.getVerifyInputWhenFocusTarget()"""
        return bool._wrap(super(JComponent, self).getVerifyInputWhenFocusTarget())

    @overload
    def mouseMove(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseMove(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseMove(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getActionForKeyStroke(self, arg0: 'KeyStroke') -> 'ActionListener':
        """public java.awt.event.ActionListener javax.swing.JComponent.getActionForKeyStroke(javax.swing.KeyStroke)"""
        return 'ActionListener'._wrap(super(_JComponent, self).getActionForKeyStroke(arg0))

    @overload
    def lostFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.lostFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).lostFocus(arg0, arg1))

    @override
    @overload
    def isMinimumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMinimumSizeSet()"""
        return bool._wrap(super(Component, self).isMinimumSizeSet())

    @override
    @overload
    def isForegroundSet(self) -> bool:
        """public boolean java.awt.Component.isForegroundSet()"""
        return bool._wrap(super(Component, self).isForegroundSet())

    @overload
    def getMousePosition(self, arg0: bool) -> 'Point':
        """public java.awt.Point java.awt.Container.getMousePosition(boolean) throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(_Container, self).getMousePosition(_boolean.valueOf(arg0)))

    @overload
    def getFontMetrics(self, arg0: 'Font') -> 'FontMetrics':
        """public java.awt.FontMetrics javax.swing.JComponent.getFontMetrics(java.awt.Font)"""
        return 'FontMetrics'._wrap(super(_JComponent, self).getFontMetrics(arg0))

    @overload
    def getListeners(self, arg0: 'Class') -> List['EventListener']:
        """public <T extends java.util.EventListener> T[] javax.swing.JComponent.getListeners(java.lang.Class<T>)"""
        return List['EventListener']._wrap(super(_JComponent, self).getListeners(arg0))

    @override
    @overload
    def getHierarchyBoundsListeners(self) -> List['HierarchyBoundsListener']:
        """public synchronized java.awt.event.HierarchyBoundsListener[] java.awt.Component.getHierarchyBoundsListeners()"""
        return List['HierarchyBoundsListener']._wrap(super(Component, self).getHierarchyBoundsListeners())

    @override
    @overload
    def minimumSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.minimumSize()"""
        return 'Dimension'._wrap(super(Container, self).minimumSize())

    @overload
    def handleEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.handleEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).handleEvent(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @override
    @overload
    def getComponentListeners(self) -> List['ComponentListener']:
        """public synchronized java.awt.event.ComponentListener[] java.awt.Component.getComponentListeners()"""
        return List['ComponentListener']._wrap(super(Component, self).getComponentListeners())

    @override
    @overload
    def computeVisibleRect(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.computeVisibleRect(java.awt.Rectangle)"""
        super(_JComponent, self).computeVisibleRect(arg0)

    @override
    @overload
    def deliverEvent(self, arg0: 'Event'):
        """public void java.awt.Container.deliverEvent(java.awt.Event)"""
        super(_Container, self).deliverEvent(arg0)

    @override
    @overload
    def addHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.addHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).addHierarchyBoundsListener(arg0)

    @override
    @overload
    def getAlignmentX(self) -> float:
        """public float javax.swing.JComponent.getAlignmentX()"""
        return float._wrap(super(JComponent, self).getAlignmentX())

    @overload
    def add(self, arg0: 'Component', arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component,int)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def repaint(self):
        """public void java.awt.Component.repaint()"""
        super(Component, self).repaint()

    @overload
    def gotFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.gotFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).gotFocus(arg0, arg1))

    @override
    @overload
    def createToolTip(self) -> 'JToolTip':
        """public javax.swing.JToolTip javax.swing.JComponent.createToolTip()"""
        return 'JToolTip'._wrap(super(JComponent, self).createToolTip())

    @override
    @overload
    def setEmbedded(self):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setEmbedded()"""
        super(EditorPanel, self).setEmbedded()

    @overload
    def getToolTipText(self, arg0: 'MouseEvent') -> str:
        """public java.lang.String javax.swing.JComponent.getToolTipText(java.awt.event.MouseEvent)"""
        return str._wrap(super(_JComponent, self).getToolTipText(arg0))

    @override
    @overload
    def printComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.printComponents(java.awt.Graphics)"""
        super(_Container, self).printComponents(arg0)

    @override
    @overload
    def getColorModel(self) -> 'ColorModel':
        """public java.awt.image.ColorModel java.awt.Component.getColorModel()"""
        return 'ColorModel'._wrap(super(Component, self).getColorModel())

    @override
    @overload
    def setFocusTraversalPolicyProvider(self, arg0: bool):
        """public final void java.awt.Container.setFocusTraversalPolicyProvider(boolean)"""
        super(_Container, self).setFocusTraversalPolicyProvider(_boolean.valueOf(arg0))

    @overload
    def getComponentZOrder(self, arg0: 'Component') -> int:
        """public int java.awt.Container.getComponentZOrder(java.awt.Component)"""
        return int._wrap(super(_Container, self).getComponentZOrder(arg0))

    @override
    @overload
    def getDebugGraphicsOptions(self) -> int:
        """public int javax.swing.JComponent.getDebugGraphicsOptions()"""
        return int._wrap(super(JComponent, self).getDebugGraphicsOptions())

    @overload
    def areFocusTraversalKeysSet(self, arg0: int) -> bool:
        """public boolean java.awt.Container.areFocusTraversalKeysSet(int)"""
        return bool._wrap(super(_Container, self).areFocusTraversalKeysSet(_int.valueOf(arg0)))

    @override
    @overload
    def getSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.getSize()"""
        return 'Dimension'._wrap(super(Component, self).getSize())

    @override
    @overload
    def repaint(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.repaint(java.awt.Rectangle)"""
        super(_JComponent, self).repaint(arg0)

    @overload
    def getClientProperty(self, arg0: object) -> object:
        """public final java.lang.Object javax.swing.JComponent.getClientProperty(java.lang.Object)"""
        return object._wrap(super(_JComponent, self).getClientProperty(arg0))

    @override
    @overload
    def unregisterKeyboardAction(self, arg0: 'KeyStroke'):
        """public void javax.swing.JComponent.unregisterKeyboardAction(javax.swing.KeyStroke)"""
        super(_JComponent, self).unregisterKeyboardAction(arg0)

    @overload
    def requestFocus(self, arg0: bool) -> bool:
        """public boolean javax.swing.JComponent.requestFocus(boolean)"""
        return bool._wrap(super(_JComponent, self).requestFocus(_boolean.valueOf(arg0)))

    @override
    @overload
    def setActionMap(self, arg0: 'ActionMap'):
        """public final void javax.swing.JComponent.setActionMap(javax.swing.ActionMap)"""
        super(_JComponent, self).setActionMap(arg0)

    @override
    @overload
    def getX(self) -> int:
        """public int javax.swing.JComponent.getX()"""
        return int._wrap(super(JComponent, self).getX())

    @overload
    def mouseEnter(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseEnter(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseEnter(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def updateUI(self):
        """public void javax.swing.JPanel.updateUI()"""
        super(JPanel, self).updateUI()

    @override
    @overload
    def getToolkit(self) -> 'Toolkit':
        """public java.awt.Toolkit java.awt.Component.getToolkit()"""
        return 'Toolkit'._wrap(super(Component, self).getToolkit())

    @override
    @overload
    def isCursorSet(self) -> bool:
        """public boolean java.awt.Component.isCursorSet()"""
        return bool._wrap(super(Component, self).isCursorSet())

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object, arg2: int):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object,int)"""
        super(_Container, self).add(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def setPreferredSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setPreferredSize(java.awt.Dimension)"""
        super(_JComponent, self).setPreferredSize(arg0)

    @override
    @overload
    def setBounds(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.setBounds(int,int,int,int)"""
        super(_Component, self).setBounds(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def isFocusTraversalPolicySet(self) -> bool:
        """public boolean java.awt.Container.isFocusTraversalPolicySet()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicySet())

    @override
    @overload
    def requestFocus(self):
        """public void javax.swing.JComponent.requestFocus()"""
        super(JComponent, self).requestFocus()

    @override
    @overload
    def getAncestorListeners(self) -> List['AncestorListener']:
        """public javax.swing.event.AncestorListener[] javax.swing.JComponent.getAncestorListeners()"""
        return List['AncestorListener']._wrap(super(JComponent, self).getAncestorListeners())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool._wrap(super(_object, self).equals(arg0))

    @overload
    def getInputMap(self, arg0: int) -> 'InputMap':
        """public final javax.swing.InputMap javax.swing.JComponent.getInputMap(int)"""
        return 'InputMap'._wrap(super(_JComponent, self).getInputMap(_int.valueOf(arg0)))

    @override
    @overload
    def isEnabled(self) -> bool:
        """public boolean java.awt.Component.isEnabled()"""
        return bool._wrap(super(Component, self).isEnabled())

    @override
    @overload
    def move(self, arg0: int, arg1: int):
        """public void java.awt.Component.move(int,int)"""
        super(_Component, self).move(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def addMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.addMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).addMouseMotionListener(arg0)

    @override
    @overload
    def getIgnoreRepaint(self) -> bool:
        """public boolean java.awt.Component.getIgnoreRepaint()"""
        return bool._wrap(super(Component, self).getIgnoreRepaint())

    @overload
    def isFocusCycleRoot(self, arg0: 'Container') -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot(java.awt.Container)"""
        return bool._wrap(super(_Container, self).isFocusCycleRoot(arg0))

    @override
    @overload
    def getGraphics(self) -> 'Graphics':
        """public java.awt.Graphics javax.swing.JComponent.getGraphics()"""
        return 'Graphics'._wrap(super(JComponent, self).getGraphics())

    @override
    @overload
    def setLocale(self, arg0: 'Locale'):
        """public void java.awt.Component.setLocale(java.util.Locale)"""
        super(_Component, self).setLocale(arg0)

    @override
    @overload
    def paintAll(self, arg0: 'Graphics'):
        """public void java.awt.Component.paintAll(java.awt.Graphics)"""
        super(_Component, self).paintAll(arg0)

    @override
    @overload
    def setDoubleBuffered(self, arg0: bool):
        """public void javax.swing.JComponent.setDoubleBuffered(boolean)"""
        super(_JComponent, self).setDoubleBuffered(_boolean.valueOf(arg0))

    @override
    @overload
    def isPreferredSizeSet(self) -> bool:
        """public boolean java.awt.Component.isPreferredSizeSet()"""
        return bool._wrap(super(Component, self).isPreferredSizeSet())

    @override
    @overload
    def addInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.addInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).addInputMethodListener(arg0)

    @override
    @overload
    def removeMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.removeMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).removeMouseWheelListener(arg0)

    @override
    @overload
    def getInputMap(self) -> 'InputMap':
        """public final javax.swing.InputMap javax.swing.JComponent.getInputMap()"""
        return 'InputMap'._wrap(super(JComponent, self).getInputMap())

    @override
    @overload
    def setVisible(self, arg0: bool):
        """public void javax.swing.JComponent.setVisible(boolean)"""
        super(_JComponent, self).setVisible(_boolean.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,byte,byte)"""
        super(_Component, self).firePropertyChange(arg0, _byte.valueOf(arg1), _byte.valueOf(arg2))

    @override
    @overload
    def getUIClassID(self) -> str:
        """public java.lang.String javax.swing.JPanel.getUIClassID()"""
        return str._wrap(super(JPanel, self).getUIClassID())

    @override
    @overload
    def transferFocusDownCycle(self):
        """public void java.awt.Container.transferFocusDownCycle()"""
        super(Container, self).transferFocusDownCycle()

    @override
    @overload
    def getNextFocusableComponent(self) -> 'Component':
        """public java.awt.Component javax.swing.JComponent.getNextFocusableComponent()"""
        return 'Component'._wrap(super(JComponent, self).getNextFocusableComponent())

    @override
    @overload
    def getUI(self) -> 'PanelUI':
        """public javax.swing.plaf.PanelUI javax.swing.JPanel.getUI()"""
        return 'PanelUI'._wrap(super(JPanel, self).getUI())

    @override
    @overload
    def setBounds(self, arg0: 'Rectangle'):
        """public void java.awt.Component.setBounds(java.awt.Rectangle)"""
        super(_Component, self).setBounds(arg0)

    @override
    @overload
    def repaint(self, arg0: int):
        """public void java.awt.Component.repaint(long)"""
        super(_Component, self).repaint(_long.valueOf(arg0))

    @override
    @overload
    def removeHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.removeHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).removeHierarchyBoundsListener(arg0)

    @override
    @overload
    def getComponentPopupMenu(self) -> 'JPopupMenu':
        """public javax.swing.JPopupMenu javax.swing.JComponent.getComponentPopupMenu()"""
        return 'JPopupMenu'._wrap(super(JComponent, self).getComponentPopupMenu())

    @override
    @overload
    def getMousePosition(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getMousePosition() throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(Component, self).getMousePosition())

    @override
    @overload
    def getComponentCount(self) -> int:
        """public int java.awt.Container.getComponentCount()"""
        return int._wrap(super(Container, self).getComponentCount())

    @override
    @overload
    def getInputMethodRequests(self) -> 'InputMethodRequests':
        """public java.awt.im.InputMethodRequests java.awt.Component.getInputMethodRequests()"""
        return 'InputMethodRequests'._wrap(super(Component, self).getInputMethodRequests())

    @override
    @overload
    def setMaximumSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setMaximumSize(java.awt.Dimension)"""
        super(_JComponent, self).setMaximumSize(arg0)

    @override
    @overload
    def setRequestFocusEnabled(self, arg0: bool):
        """public void javax.swing.JComponent.setRequestFocusEnabled(boolean)"""
        super(_JComponent, self).setRequestFocusEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def setFocusTraversalKeys(self, arg0: int, arg1: 'Set'):
        """public void javax.swing.JComponent.setFocusTraversalKeys(int,java.util.Set<? extends java.awt.AWTKeyStroke>)"""
        super(_JComponent, self).setFocusTraversalKeys(_int.valueOf(arg0), arg1)

    @overload
    def inside(self, arg0: int, arg1: int) -> bool:
        """public boolean java.awt.Component.inside(int,int)"""
        return bool._wrap(super(_Component, self).inside(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def requestDefaultFocus(self) -> bool:
        """public boolean javax.swing.JComponent.requestDefaultFocus()"""
        return bool._wrap(super(JComponent, self).requestDefaultFocus())

    @override
    @overload
    def disable(self):
        """public void javax.swing.JComponent.disable()"""
        super(JComponent, self).disable()

    @override
    @overload
    def showContent(self, arg0: bool):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.showContent(boolean)"""
        super(_EditorPanel, self).showContent(_boolean.valueOf(arg0))

    @override
    @overload
    def enableInputMethods(self, arg0: bool):
        """public void java.awt.Component.enableInputMethods(boolean)"""
        super(_Component, self).enableInputMethods(_boolean.valueOf(arg0))

    @override
    @overload
    def layout(self):
        """public void java.awt.Container.layout()"""
        super(Container, self).layout()

    @override
    @overload
    def getInputMethodListeners(self) -> List['InputMethodListener']:
        """public synchronized java.awt.event.InputMethodListener[] java.awt.Component.getInputMethodListeners()"""
        return List['InputMethodListener']._wrap(super(Component, self).getInputMethodListeners())

    @override
    @overload
    def paint(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.paint(java.awt.Graphics)"""
        super(_JComponent, self).paint(arg0)

    @override
    @overload
    def transferFocus(self):
        """public void java.awt.Component.transferFocus()"""
        super(Component, self).transferFocus()

    @override
    @overload
    def removeComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.removeComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).removeComponentListener(arg0)

    @override
    @overload
    def getCursor(self) -> 'Cursor':
        """public java.awt.Cursor java.awt.Component.getCursor()"""
        return 'Cursor'._wrap(super(Component, self).getCursor())

    @override
    @overload
    def setMinimumSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setMinimumSize(java.awt.Dimension)"""
        super(_JComponent, self).setMinimumSize(arg0)

    @override
    @overload
    def getAdvancedPanel(self) -> 'JPanel':
        """public javax.swing.JPanel com.badlogic.gdx.tools.flame.EditorPanel.getAdvancedPanel()"""
        return 'JPanel'._wrap(super(EditorPanel, self).getAdvancedPanel())

    @override
    @overload
    def getContainerListeners(self) -> List['ContainerListener']:
        """public synchronized java.awt.event.ContainerListener[] java.awt.Container.getContainerListeners()"""
        return List['ContainerListener']._wrap(super(Container, self).getContainerListeners())

    @override
    @overload
    def handle(self, arg0: int, arg1: object):
        """public void com.badlogic.gdx.tools.flame.ModelInfluencerPanel.handle(int,java.lang.Object)"""
        super(_ModelInfluencerPanel, self).handle(_int.valueOf(arg0), arg1)

    @override
    @overload
    def setLocation(self, arg0: 'Point'):
        """public void java.awt.Component.setLocation(java.awt.Point)"""
        super(_Component, self).setLocation(arg0)

    @override
    @overload
    def setSize(self, arg0: 'Dimension'):
        """public void java.awt.Component.setSize(java.awt.Dimension)"""
        super(_Component, self).setSize(arg0)

    @override
    @overload
    def removeAll(self):
        """public void java.awt.Container.removeAll()"""
        super(Container, self).removeAll()

    @overload
    def getPopupLocation(self, arg0: 'MouseEvent') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getPopupLocation(java.awt.event.MouseEvent)"""
        return 'Point'._wrap(super(_JComponent, self).getPopupLocation(arg0))

    @overload
    def isAncestorOf(self, arg0: 'Component') -> bool:
        """public boolean java.awt.Container.isAncestorOf(java.awt.Component)"""
        return bool._wrap(super(_Container, self).isAncestorOf(arg0))

    @override
    @overload
    def setOpaque(self, arg0: bool):
        """public void javax.swing.JComponent.setOpaque(boolean)"""
        super(_JComponent, self).setOpaque(_boolean.valueOf(arg0))

    @overload
    def contains(self, arg0: int, arg1: int) -> bool:
        """public boolean javax.swing.JComponent.contains(int,int)"""
        return bool._wrap(super(_JComponent, self).contains(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def setCursor(self, arg0: 'Cursor'):
        """public void java.awt.Component.setCursor(java.awt.Cursor)"""
        super(_Component, self).setCursor(arg0)

    @override
    @overload
    def validate(self):
        """public void java.awt.Container.validate()"""
        super(Container, self).validate()

    @override
    @overload
    def getMaximumSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getMaximumSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getMaximumSize())

    @override
    @overload
    def getBackground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getBackground()"""
        return 'Color'._wrap(super(Component, self).getBackground())

    @overload
    def createImage(self, arg0: 'ImageProducer') -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(java.awt.image.ImageProducer)"""
        return 'Image'._wrap(super(_Component, self).createImage(arg0))

    @override
    @overload
    def setVerifyInputWhenFocusTarget(self, arg0: bool):
        """public void javax.swing.JComponent.setVerifyInputWhenFocusTarget(boolean)"""
        super(_JComponent, self).setVerifyInputWhenFocusTarget(_boolean.valueOf(arg0))

    @override
    @overload
    def removePropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0, arg1)

    @override
    @overload
    def countComponents(self) -> int:
        """public int java.awt.Container.countComponents()"""
        return int._wrap(super(Container, self).countComponents()) 
 
 
# CLASS: com.badlogic.gdx.tools.flame.TemplatePickerPanel$Listener
import com.badlogic.gdx.tools.flame.TemplatePickerPanel as _TemplatePickerPanel_Listener
_Listener = _TemplatePickerPanel_Listener.Listener
from abc import abstractmethod, ABC
 
class Listener():
    """com.badlogic.gdx.tools.flame.TemplatePickerPanel.Listener"""
 
    @staticmethod
    def _wrap(java_value: _Listener) -> 'Listener':
        return Listener(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Listener):
        """
        Dynamic initializer for Listener.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Listener__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Listener__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @abstractmethod
    def onTemplateChecked(self, arg0: object, arg1: bool):
        """public abstract void com.badlogic.gdx.tools.flame.TemplatePickerPanel$Listener.onTemplateChecked(T,boolean)"""
        pass 
 
 
# CLASS: com.badlogic.gdx.tools.flame.EventManager$Listener
from abc import abstractmethod, ABC
import com.badlogic.gdx.tools.flame.EventManager as _EventManager_Listener
_Listener = _EventManager_Listener.Listener
 
class Listener():
    """com.badlogic.gdx.tools.flame.EventManager.Listener"""
 
    @staticmethod
    def _wrap(java_value: _Listener) -> 'Listener':
        return Listener(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Listener):
        """
        Dynamic initializer for Listener.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Listener__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Listener__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @abstractmethod
    def handle(self, arg0: int, arg1: object):
        """public abstract void com.badlogic.gdx.tools.flame.EventManager$Listener.handle(int,java.lang.Object)"""
        pass 
 
 
# CLASS: com.badlogic.gdx.tools.flame.GradientPanel$ColorSlider$ColorPicker
import javax.accessibility.AccessibleContext as AccessibleContext
import javax.swing.JToolTip as JToolTip
import java.awt.event.HierarchyBoundsListener as HierarchyBoundsListener
import java.awt.event.ActionListener as _ActionListener
_ActionListener = _ActionListener
import java.awt.ComponentOrientation as _ComponentOrientation
_ComponentOrientation = _ComponentOrientation
import java.awt.image.ImageProducer as ImageProducer
import java.awt.GraphicsConfiguration as GraphicsConfiguration
import java.awt.Graphics as _Graphics
_Graphics = _Graphics
import javax.swing.JToolTip as _JToolTip
_JToolTip = _JToolTip
import java.awt.Container as _Container
_Container = _Container
import java.awt.MenuComponent as MenuComponent
import java.awt.im.InputMethodRequests as _InputMethodRequests
_InputMethodRequests = _InputMethodRequests
import java.awt.FocusTraversalPolicy as _FocusTraversalPolicy
_FocusTraversalPolicy = _FocusTraversalPolicy
import java.lang.Byte as _byte
import java.awt.Dimension as Dimension
import java.awt.Font as _Font
_Font = _Font
import javax.swing.plaf.PanelUI as _PanelUI
_PanelUI = _PanelUI
import java.awt.event.ContainerListener as ContainerListener
import javax.swing.event.AncestorListener as AncestorListener
import java.awt.AWTEvent as AWTEvent
import com.badlogic.gdx.tools.flame.GradientPanel as _GradientPanel_ColorSlider_ColorPicker
_ColorPicker = _GradientPanel_ColorSlider_ColorPicker.ColorSlider.ColorPicker
import java.awt.image.ColorModel as _ColorModel
_ColorModel = _ColorModel
import java.lang.Object as _object
import java.awt.ComponentOrientation as ComponentOrientation
import java.awt.im.InputContext as _InputContext
_InputContext = _InputContext
from builtins import float
import java.awt.event.HierarchyListener as HierarchyListener
import java.awt.event.InputMethodListener as InputMethodListener
from typing import List
import java.awt.event.MouseWheelListener as _MouseWheelListener
_MouseWheelListener = _MouseWheelListener
import java.awt.event.KeyListener as KeyListener
import java.awt.Component as Component
from builtins import int
import java.awt.LayoutManager as LayoutManager
import java.awt.FontMetrics as _FontMetrics
_FontMetrics = _FontMetrics
import java.awt.Container as Container
from builtins import type
import java.awt.image.VolatileImage as _VolatileImage
_VolatileImage = _VolatileImage
import java.awt.Shape as Shape
import java.awt.Rectangle as Rectangle
import java.awt.event.ContainerListener as _ContainerListener
_ContainerListener = _ContainerListener
import java.awt.event.HierarchyListener as _HierarchyListener
_HierarchyListener = _HierarchyListener
import java.lang.String as _string
import javax.swing.InputVerifier as _InputVerifier
_InputVerifier = _InputVerifier
import java.awt.Insets as _Insets
_Insets = _Insets
import javax.swing.border.Border as _Border
_Border = _Border
import java.awt.event.ComponentListener as _ComponentListener
_ComponentListener = _ComponentListener
import javax.swing.ActionMap as ActionMap
import java.beans.VetoableChangeListener as VetoableChangeListener
import java.awt.event.ComponentListener as ComponentListener
import javax.swing.KeyStroke as KeyStroke
import java.beans.VetoableChangeListener as _VetoableChangeListener
_VetoableChangeListener = _VetoableChangeListener
from builtins import object
import java.awt.event.KeyListener as _KeyListener
_KeyListener = _KeyListener
import java.awt.Component.BaselineResizeBehavior as BaselineResizeBehavior
import java.awt.Component as _Component_BaselineResizeBehavior
_BaselineResizeBehavior = _Component_BaselineResizeBehavior.BaselineResizeBehavior
import java.awt.Cursor as _Cursor
_Cursor = _Cursor
import java.awt.im.InputMethodRequests as InputMethodRequests
import java.lang.Long as _long
import javax.swing.JPanel as _JPanel
_JPanel = _JPanel
import java.awt.event.FocusListener as _FocusListener
_FocusListener = _FocusListener
import java.lang.Character as _char
import javax.swing.TransferHandler as TransferHandler
import java.awt.event.FocusEvent.Cause as Cause
import javax.accessibility.AccessibleContext as _AccessibleContext
_AccessibleContext = _AccessibleContext
import java.awt.event.MouseWheelListener as MouseWheelListener
import java.util.Set as _Set
_Set = _Set
import java.awt.image.ColorModel as ColorModel
import java.lang.Boolean as _boolean
import java.awt.event.MouseMotionListener as MouseMotionListener
import java.util.EventListener as EventListener
import java.awt.Insets as Insets
import javax.swing.KeyStroke as _KeyStroke
_KeyStroke = _KeyStroke
import java.awt.GraphicsConfiguration as _GraphicsConfiguration
_GraphicsConfiguration = _GraphicsConfiguration
import java.awt.dnd.DropTarget as _DropTarget
_DropTarget = _DropTarget
from builtins import bool
import java.beans.PropertyChangeListener as _PropertyChangeListener
_PropertyChangeListener = _PropertyChangeListener
import java.awt.LayoutManager as _LayoutManager
_LayoutManager = _LayoutManager
import java.awt.PopupMenu as PopupMenu
import java.util.EventListener as _EventListener
_EventListener = _EventListener
import java.awt.im.InputContext as InputContext
import java.awt.Component as _Component
_Component = _Component
import java.awt.Font as Font
import java.awt.image.VolatileImage as VolatileImage
import java.awt.dnd.DropTarget as DropTarget
import java.lang.String as _String
_String = _String
import java.lang.Float as _float
import java.awt.Cursor as Cursor
import java.awt.event.MouseListener as _MouseListener
_MouseListener = _MouseListener
import java.awt.Toolkit as _Toolkit
_Toolkit = _Toolkit
import java.io.PrintStream as PrintStream
import javax.swing.JRootPane as _JRootPane
_JRootPane = _JRootPane
import java.awt.Dimension as _Dimension
_Dimension = _Dimension
import java.awt.event.ActionListener as ActionListener
import java.awt.event.MouseEvent as MouseEvent
import java.awt.Color as _Color
_Color = _Color
import javax.swing.JPopupMenu as _JPopupMenu
_JPopupMenu = _JPopupMenu
import javax.swing.InputMap as _InputMap
_InputMap = _InputMap
import java.awt.event.MouseListener as MouseListener
import java.lang.Class as _Class
_Class = _Class
import java.util.Locale as Locale
import java.lang.Double as _double
import javax.swing.plaf.PanelUI as PanelUI
import java.awt.Point as _Point
_Point = _Point
import java.lang.Object as _Object
_Object = _Object
import java.beans.PropertyChangeListener as PropertyChangeListener
import javax.swing.border.Border as Border
import javax.swing.JComponent as _JComponent
_JComponent = _JComponent
import javax.swing.InputVerifier as InputVerifier
import java.io.PrintWriter as PrintWriter
import java.awt.Point as Point
import javax.swing.event.AncestorListener as _AncestorListener
_AncestorListener = _AncestorListener
import java.lang.Short as _short
import java.awt.Toolkit as Toolkit
import java.awt.event.HierarchyBoundsListener as _HierarchyBoundsListener
_HierarchyBoundsListener = _HierarchyBoundsListener
import javax.swing.TransferHandler as _TransferHandler
_TransferHandler = _TransferHandler
import javax.swing.InputMap as InputMap
import java.awt.Rectangle as _Rectangle
_Rectangle = _Rectangle
import javax.swing.JRootPane as JRootPane
import java.awt.Event as Event
import java.awt.event.FocusListener as FocusListener
import java.awt.image.ImageObserver as ImageObserver
from builtins import str
from pyquantum_helper import override
import javax.swing.ActionMap as _ActionMap
_ActionMap = _ActionMap
import java.awt.FocusTraversalPolicy as FocusTraversalPolicy
import java.awt.event.MouseMotionListener as _MouseMotionListener
_MouseMotionListener = _MouseMotionListener
import java.awt.event.InputMethodListener as _InputMethodListener
_InputMethodListener = _InputMethodListener
import javax.swing.JPopupMenu as JPopupMenu
import java.util.Set as Set
import java.lang.Integer as _int
import java.awt.Image as _Image
_Image = _Image
import java.awt.FontMetrics as FontMetrics
import java.awt.Color as Color
import java.awt.Image as Image
import java.awt.Graphics as Graphics
import java.awt.ImageCapabilities as ImageCapabilities
import java.util.Locale as _Locale
_Locale = _Locale
 
class ColorPicker():
    """com.badlogic.gdx.tools.flame.GradientPanel.ColorSlider.ColorPicker"""
 
    @staticmethod
    def _wrap(java_value: _ColorPicker) -> 'ColorPicker':
        return ColorPicker(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _ColorPicker):
        """
        Dynamic initializer for ColorPicker.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_ColorPicker__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_ColorPicker__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def removeVetoableChangeListener(self, arg0: 'VetoableChangeListener'):
        """public synchronized void javax.swing.JComponent.removeVetoableChangeListener(java.beans.VetoableChangeListener)"""
        super(_JComponent, self).removeVetoableChangeListener(arg0)

    @override
    @overload
    def getComponents(self) -> List['Component']:
        """public java.awt.Component[] java.awt.Container.getComponents()"""
        return List['Component']._wrap(super(Container, self).getComponents())

    @override
    @overload
    def setDebugGraphicsOptions(self, arg0: int):
        """public void javax.swing.JComponent.setDebugGraphicsOptions(int)"""
        super(_JComponent, self).setDebugGraphicsOptions(_int.valueOf(arg0))

    @override
    @overload
    def isValid(self) -> bool:
        """public boolean java.awt.Component.isValid()"""
        return bool._wrap(super(Component, self).isValid())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def getDefaultLocale() -> 'Locale':
        """public static java.util.Locale javax.swing.JComponent.getDefaultLocale()"""
        return Locale._wrap(_JComponent.getDefaultLocale())

    @override
    @overload
    def getInputVerifier(self) -> 'InputVerifier':
        """public javax.swing.InputVerifier javax.swing.JComponent.getInputVerifier()"""
        return 'InputVerifier'._wrap(super(JComponent, self).getInputVerifier())

    @override
    @overload
    def list(self, arg0: 'PrintStream', arg1: int):
        """public void java.awt.Container.list(java.io.PrintStream,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @override
    @overload
    def setUI(self, arg0: 'PanelUI'):
        """public void javax.swing.JPanel.setUI(javax.swing.plaf.PanelUI)"""
        super(_JPanel, self).setUI(arg0)

    @override
    @overload
    def getFocusTraversalPolicy(self) -> 'FocusTraversalPolicy':
        """public java.awt.FocusTraversalPolicy java.awt.Container.getFocusTraversalPolicy()"""
        return 'FocusTraversalPolicy'._wrap(super(Container, self).getFocusTraversalPolicy())

    @override
    @overload
    def getParent(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getParent()"""
        return 'Container'._wrap(super(Component, self).getParent())

    @override
    @overload
    def paintImmediately(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.paintImmediately(java.awt.Rectangle)"""
        super(_JComponent, self).paintImmediately(arg0)

    @staticmethod
    @overload
    def setDefaultLocale(arg0: 'Locale'):
        """public static void javax.swing.JComponent.setDefaultLocale(java.util.Locale)"""
        _JComponent.setDefaultLocale(arg0)

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,float,float)"""
        super(_Component, self).firePropertyChange(arg0, _float.valueOf(arg1), _float.valueOf(arg2))

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object)"""
        super(_Container, self).add(arg0, arg1)

    @override
    @overload
    def getLocale(self) -> 'Locale':
        """public java.util.Locale java.awt.Component.getLocale()"""
        return 'Locale'._wrap(super(Component, self).getLocale())

    @override
    @overload
    def setInheritsPopupMenu(self, arg0: bool):
        """public void javax.swing.JComponent.setInheritsPopupMenu(boolean)"""
        super(_JComponent, self).setInheritsPopupMenu(_boolean.valueOf(arg0))

    @override
    @overload
    def getHierarchyListeners(self) -> List['HierarchyListener']:
        """public synchronized java.awt.event.HierarchyListener[] java.awt.Component.getHierarchyListeners()"""
        return List['HierarchyListener']._wrap(super(Component, self).getHierarchyListeners())

    @override
    @overload
    def nextFocus(self):
        """public void java.awt.Component.nextFocus()"""
        super(Component, self).nextFocus()

    @override
    @overload
    def isPaintingTile(self) -> bool:
        """public boolean javax.swing.JComponent.isPaintingTile()"""
        return bool._wrap(super(JComponent, self).isPaintingTile())

    @override
    @overload
    def isDisplayable(self) -> bool:
        """public boolean java.awt.Component.isDisplayable()"""
        return bool._wrap(super(Component, self).isDisplayable())

    @override
    @overload
    def getBounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.getBounds()"""
        return 'Rectangle'._wrap(super(Component, self).getBounds())

    @override
    @overload
    def removeMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.removeMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).removeMouseMotionListener(arg0)

    @override
    @overload
    def isShowing(self) -> bool:
        """public boolean java.awt.Component.isShowing()"""
        return bool._wrap(super(Component, self).isShowing())

    @override
    @overload
    def getDropTarget(self) -> 'DropTarget':
        """public synchronized java.awt.dnd.DropTarget java.awt.Component.getDropTarget()"""
        return 'DropTarget'._wrap(super(Component, self).getDropTarget())

    @override
    @overload
    def isFontSet(self) -> bool:
        """public boolean java.awt.Component.isFontSet()"""
        return bool._wrap(super(Component, self).isFontSet())

    @overload
    def mouseUp(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseUp(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseUp(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def setIgnoreRepaint(self, arg0: bool):
        """public void java.awt.Component.setIgnoreRepaint(boolean)"""
        super(_Component, self).setIgnoreRepaint(_boolean.valueOf(arg0))

    @override
    @overload
    def getPropertyChangeListeners(self) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners()"""
        return List['PropertyChangeListener']._wrap(super(Component, self).getPropertyChangeListeners())

    @override
    @overload
    def isBackgroundSet(self) -> bool:
        """public boolean java.awt.Component.isBackgroundSet()"""
        return bool._wrap(super(Component, self).isBackgroundSet())

    @override
    @overload
    def getLocation(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocation()"""
        return 'Point'._wrap(super(Component, self).getLocation())

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int._wrap(super(object, self).hashCode())

    @override
    @overload
    def location(self) -> 'Point':
        """public java.awt.Point java.awt.Component.location()"""
        return 'Point'._wrap(super(Component, self).location())

    @override
    @overload
    def getComponentOrientation(self) -> 'ComponentOrientation':
        """public java.awt.ComponentOrientation java.awt.Component.getComponentOrientation()"""
        return 'ComponentOrientation'._wrap(super(Component, self).getComponentOrientation())

    @override
    @overload
    def addHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.addHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).addHierarchyListener(arg0)

    @override
    @overload
    def getInheritsPopupMenu(self) -> bool:
        """public boolean javax.swing.JComponent.getInheritsPopupMenu()"""
        return bool._wrap(super(JComponent, self).getInheritsPopupMenu())

    @override
    @overload
    def setComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Component.setComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Component, self).setComponentOrientation(arg0)

    @override
    @overload
    def getFocusCycleRootAncestor(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getFocusCycleRootAncestor()"""
        return 'Container'._wrap(super(Component, self).getFocusCycleRootAncestor())

    @override
    @overload
    def show(self, arg0: bool):
        """public void java.awt.Component.show(boolean)"""
        super(_Component, self).show(_boolean.valueOf(arg0))

    @override
    @overload
    def grabFocus(self):
        """public void javax.swing.JComponent.grabFocus()"""
        super(JComponent, self).grabFocus()

    @overload
    def locate(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.locate(int,int)"""
        return 'Component'._wrap(super(_Container, self).locate(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def isPaintingForPrint(self) -> bool:
        """public final boolean javax.swing.JComponent.isPaintingForPrint()"""
        return bool._wrap(super(JComponent, self).isPaintingForPrint())

    @overload
    def keyDown(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyDown(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyDown(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,int,int)"""
        super(_JComponent, self).firePropertyChange(arg0, _int.valueOf(arg1), _int.valueOf(arg2))

    @override
    @overload
    def getLayout(self) -> 'LayoutManager':
        """public java.awt.LayoutManager java.awt.Container.getLayout()"""
        return 'LayoutManager'._wrap(super(Container, self).getLayout())

    @override
    @overload
    def preferredSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.preferredSize()"""
        return 'Dimension'._wrap(super(Container, self).preferredSize())

    @override
    @overload
    def addNotify(self):
        """public void javax.swing.JComponent.addNotify()"""
        super(JComponent, self).addNotify()

    @override
    @overload
    def setSize(self, arg0: int, arg1: int):
        """public void java.awt.Component.setSize(int,int)"""
        super(_Component, self).setSize(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.repaint(int,int,int,int)"""
        super(_Component, self).repaint(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @overload
    def requestFocusInWindow(self, arg0: 'Cause') -> bool:
        """public boolean java.awt.Component.requestFocusInWindow(java.awt.event.FocusEvent$Cause)"""
        return bool._wrap(super(_Component, self).requestFocusInWindow(arg0))

    @override
    @overload
    def remove(self, arg0: int):
        """public void java.awt.Container.remove(int)"""
        super(_Container, self).remove(_int.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,long,long)"""
        super(_Component, self).firePropertyChange(arg0, _long.valueOf(arg1), _long.valueOf(arg2))

    @override
    @overload
    def setFocusCycleRoot(self, arg0: bool):
        """public void java.awt.Container.setFocusCycleRoot(boolean)"""
        super(_Container, self).setFocusCycleRoot(_boolean.valueOf(arg0))

    @overload
    def keyUp(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyUp(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyUp(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def setBackground(self, arg0: 'Color'):
        """public void javax.swing.JComponent.setBackground(java.awt.Color)"""
        super(_JComponent, self).setBackground(arg0)

    @override
    @overload
    def doLayout(self):
        """public void java.awt.Container.doLayout()"""
        super(Container, self).doLayout()

    @override
    @overload
    def enable(self):
        """public void javax.swing.JComponent.enable()"""
        super(JComponent, self).enable()

    @override
    @overload
    def getInsets(self) -> 'Insets':
        """public java.awt.Insets javax.swing.JComponent.getInsets()"""
        return 'Insets'._wrap(super(JComponent, self).getInsets())

    @override
    @overload
    def setNextFocusableComponent(self, arg0: 'Component'):
        """public void javax.swing.JComponent.setNextFocusableComponent(java.awt.Component)"""
        super(_JComponent, self).setNextFocusableComponent(arg0)

    @override
    @overload
    def getAlignmentY(self) -> float:
        """public float javax.swing.JComponent.getAlignmentY()"""
        return float._wrap(super(JComponent, self).getAlignmentY())

    @overload
    def checkImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @override
    @overload
    def getFocusTraversalKeysEnabled(self) -> bool:
        """public boolean java.awt.Component.getFocusTraversalKeysEnabled()"""
        return bool._wrap(super(Component, self).getFocusTraversalKeysEnabled())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getRootPane(self) -> 'JRootPane':
        """public javax.swing.JRootPane javax.swing.JComponent.getRootPane()"""
        return 'JRootPane'._wrap(super(JComponent, self).getRootPane())

    @override
    @overload
    def invalidate(self):
        """public void java.awt.Container.invalidate()"""
        super(Container, self).invalidate()

    @override
    @overload
    def resetKeyboardActions(self):
        """public void javax.swing.JComponent.resetKeyboardActions()"""
        super(JComponent, self).resetKeyboardActions()

    @overload
    def getComponent(self, arg0: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponent(int)"""
        return 'Component'._wrap(super(_Container, self).getComponent(_int.valueOf(arg0)))

    @override
    @overload
    def addPropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Container.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Container, self).addPropertyChangeListener(arg0, arg1)

    @override
    @overload
    def setInputMap(self, arg0: int, arg1: 'InputMap'):
        """public final void javax.swing.JComponent.setInputMap(int,javax.swing.InputMap)"""
        super(_JComponent, self).setInputMap(_int.valueOf(arg0), arg1)

    @override
    @overload
    def removePropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0)

    @override
    @overload
    def applyComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Container.applyComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Container, self).applyComponentOrientation(arg0)

    @override
    @overload
    def setBorder(self, arg0: 'Border'):
        """public void javax.swing.JComponent.setBorder(javax.swing.border.Border)"""
        super(_JComponent, self).setBorder(arg0)

    @override
    @overload
    def remove(self, arg0: 'MenuComponent'):
        """public void java.awt.Component.remove(java.awt.MenuComponent)"""
        super(_Component, self).remove(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintStream'):
        """public void java.awt.Component.list(java.io.PrintStream)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def removeMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.removeMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).removeMouseListener(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintWriter'):
        """public void java.awt.Component.list(java.io.PrintWriter)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def getKeyListeners(self) -> List['KeyListener']:
        """public synchronized java.awt.event.KeyListener[] java.awt.Component.getKeyListeners()"""
        return List['KeyListener']._wrap(super(Component, self).getKeyListeners())

    @override
    @overload
    def getInputContext(self) -> 'InputContext':
        """public java.awt.im.InputContext java.awt.Component.getInputContext()"""
        return 'InputContext'._wrap(super(Component, self).getInputContext())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,double,double)"""
        super(_Component, self).firePropertyChange(arg0, _double.valueOf(arg1), _double.valueOf(arg2))

    @override
    @overload
    def removeAncestorListener(self, arg0: 'AncestorListener'):
        """public void javax.swing.JComponent.removeAncestorListener(javax.swing.event.AncestorListener)"""
        super(_JComponent, self).removeAncestorListener(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintWriter', arg1: int):
        """public void java.awt.Container.list(java.io.PrintWriter,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @overload
    def checkImage(self, arg0: 'Image', arg1: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, arg1))

    @override
    @overload
    def removeFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.removeFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).removeFocusListener(arg0)

    @overload
    def mouseDown(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDown(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDown(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getConditionForKeyStroke(self, arg0: 'KeyStroke') -> int:
        """public int javax.swing.JComponent.getConditionForKeyStroke(javax.swing.KeyStroke)"""
        return int._wrap(super(_JComponent, self).getConditionForKeyStroke(arg0))

    @override
    @overload
    def getTreeLock(self) -> object:
        """public final java.lang.Object java.awt.Component.getTreeLock()"""
        return object._wrap(super(Component, self).getTreeLock())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @override
    @overload
    def addVetoableChangeListener(self, arg0: 'VetoableChangeListener'):
        """public synchronized void javax.swing.JComponent.addVetoableChangeListener(java.beans.VetoableChangeListener)"""
        super(_JComponent, self).addVetoableChangeListener(arg0)

    @overload
    def contains(self, arg0: 'Point') -> bool:
        """public boolean java.awt.Component.contains(java.awt.Point)"""
        return bool._wrap(super(_Component, self).contains(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,short,short)"""
        super(_Component, self).firePropertyChange(arg0, _short.valueOf(arg1), _short.valueOf(arg2))

    @override
    @overload
    def dispatchEvent(self, arg0: 'AWTEvent'):
        """public final void java.awt.Component.dispatchEvent(java.awt.AWTEvent)"""
        super(_Component, self).dispatchEvent(arg0)

    @override
    @overload
    def removeContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.removeContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).removeContainerListener(arg0)

    @override
    @overload
    def getGraphicsConfiguration(self) -> 'GraphicsConfiguration':
        """public java.awt.GraphicsConfiguration java.awt.Component.getGraphicsConfiguration()"""
        return 'GraphicsConfiguration'._wrap(super(Component, self).getGraphicsConfiguration())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: bool, arg2: bool):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,boolean,boolean)"""
        super(_JComponent, self).firePropertyChange(arg0, _boolean.valueOf(arg1), _boolean.valueOf(arg2))

    @override
    @overload
    def registerKeyboardAction(self, arg0: 'ActionListener', arg1: str, arg2: 'KeyStroke', arg3: int):
        """public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,java.lang.String,javax.swing.KeyStroke,int)"""
        super(_JComponent, self).registerKeyboardAction(arg0, arg1, arg2, _int.valueOf(arg3))

    @overload
    def findComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(arg0))

    @override
    @overload
    def resize(self, arg0: int, arg1: int):
        """public void java.awt.Component.resize(int,int)"""
        super(_Component, self).resize(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getHeight(self) -> int:
        """public int javax.swing.JComponent.getHeight()"""
        return int._wrap(super(JComponent, self).getHeight())

    @override
    @overload
    def getTransferHandler(self) -> 'TransferHandler':
        """public javax.swing.TransferHandler javax.swing.JComponent.getTransferHandler()"""
        return 'TransferHandler'._wrap(super(JComponent, self).getTransferHandler())

    @overload
    def imageUpdate(self, arg0: 'Image', arg1: int, arg2: int, arg3: int, arg4: int, arg5: int) -> bool:
        """public boolean java.awt.Component.imageUpdate(java.awt.Image,int,int,int,int,int)"""
        return bool._wrap(super(_Component, self).imageUpdate(arg0, _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4), _int.valueOf(arg5)))

    @override
    @overload
    def getWidth(self) -> int:
        """public int javax.swing.JComponent.getWidth()"""
        return int._wrap(super(JComponent, self).getWidth())

    @override
    @overload
    def transferFocusBackward(self):
        """public void java.awt.Component.transferFocusBackward()"""
        super(Component, self).transferFocusBackward()

    @overload
    def getPropertyChangeListeners(self, arg0: str) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners(java.lang.String)"""
        return List['PropertyChangeListener']._wrap(super(_Component, self).getPropertyChangeListeners(arg0))

    @staticmethod
    @overload
    def isLightweightComponent(arg0: 'Component') -> bool:
        """public static boolean javax.swing.JComponent.isLightweightComponent(java.awt.Component)"""
        return bool._wrap(_JComponent.isLightweightComponent(arg0))

    @override
    @overload
    def getBorder(self) -> 'Border':
        """public javax.swing.border.Border javax.swing.JComponent.getBorder()"""
        return 'Border'._wrap(super(JComponent, self).getBorder())

    @override
    @overload
    def printAll(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.printAll(java.awt.Graphics)"""
        super(_JComponent, self).printAll(arg0)

    @override
    @overload
    def addComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.addComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).addComponentListener(arg0)

    @override
    @overload
    def getBaselineResizeBehavior(self) -> 'BaselineResizeBehavior.Component$BaselineResizeBehavior':
        """public java.awt.Component$BaselineResizeBehavior javax.swing.JComponent.getBaselineResizeBehavior()"""
        return 'BaselineResizeBehavior.Component$BaselineResizeBehavior'._wrap(super(JComponent, self).getBaselineResizeBehavior())

    @override
    @overload
    def print(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.print(java.awt.Graphics)"""
        super(_JComponent, self).print(arg0)

    @override
    @overload
    def setInputVerifier(self, arg0: 'InputVerifier'):
        """public void javax.swing.JComponent.setInputVerifier(javax.swing.InputVerifier)"""
        super(_JComponent, self).setInputVerifier(arg0)

    @override
    @overload
    def addAncestorListener(self, arg0: 'AncestorListener'):
        """public void javax.swing.JComponent.addAncestorListener(javax.swing.event.AncestorListener)"""
        super(_JComponent, self).addAncestorListener(arg0)

    @override
    @overload
    def getFont(self) -> 'Font':
        """public java.awt.Font java.awt.Component.getFont()"""
        return 'Font'._wrap(super(Component, self).getFont())

    @override
    @overload
    def setFont(self, arg0: 'Font'):
        """public void javax.swing.JComponent.setFont(java.awt.Font)"""
        super(_JComponent, self).setFont(arg0)

    @override
    @overload
    def isOptimizedDrawingEnabled(self) -> bool:
        """public boolean javax.swing.JComponent.isOptimizedDrawingEnabled()"""
        return bool._wrap(super(JComponent, self).isOptimizedDrawingEnabled())

    @override
    @overload
    def isValidateRoot(self) -> bool:
        """public boolean javax.swing.JComponent.isValidateRoot()"""
        return bool._wrap(super(JComponent, self).isValidateRoot())

    @overload
    def prepareImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @override
    @overload
    def setForeground(self, arg0: 'Color'):
        """public void javax.swing.JComponent.setForeground(java.awt.Color)"""
        super(_JComponent, self).setForeground(arg0)

    @overload
    def mouseDrag(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDrag(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDrag(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def isOpaque(self) -> bool:
        """public boolean javax.swing.JComponent.isOpaque()"""
        return bool._wrap(super(JComponent, self).isOpaque())

    @overload
    def createVolatileImage(self, arg0: int, arg1: int, arg2: 'ImageCapabilities') -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int,java.awt.ImageCapabilities) throws java.awt.AWTException"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1), arg2))

    @override
    @overload
    def bounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.bounds()"""
        return 'Rectangle'._wrap(super(Component, self).bounds())

    @override
    @overload
    def update(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.update(java.awt.Graphics)"""
        super(_JComponent, self).update(arg0)

    @override
    @overload
    def add(self, arg0: 'PopupMenu'):
        """public void java.awt.Component.add(java.awt.PopupMenu)"""
        super(_Component, self).add(arg0)

    @override
    @overload
    def getToolTipText(self) -> str:
        """public java.lang.String javax.swing.JComponent.getToolTipText()"""
        return str._wrap(super(JComponent, self).getToolTipText())

    @override
    @overload
    def isVisible(self) -> bool:
        """public boolean java.awt.Component.isVisible()"""
        return bool._wrap(super(Component, self).isVisible())

    @override
    @overload
    def setDropTarget(self, arg0: 'DropTarget'):
        """public synchronized void java.awt.Component.setDropTarget(java.awt.dnd.DropTarget)"""
        super(_Component, self).setDropTarget(arg0)

    @override
    @overload
    def getLocationOnScreen(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocationOnScreen()"""
        return 'Point'._wrap(super(Component, self).getLocationOnScreen())

    @override
    @overload
    def getY(self) -> int:
        """public int javax.swing.JComponent.getY()"""
        return int._wrap(super(JComponent, self).getY())

    @overload
    def getComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def isMaximumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMaximumSizeSet()"""
        return bool._wrap(super(Component, self).isMaximumSizeSet())

    @override
    @overload
    def setAlignmentY(self, arg0: float):
        """public void javax.swing.JComponent.setAlignmentY(float)"""
        super(_JComponent, self).setAlignmentY(_float.valueOf(arg0))

    @override
    @overload
    def getRegisteredKeyStrokes(self) -> List['KeyStroke']:
        """public javax.swing.KeyStroke[] javax.swing.JComponent.getRegisteredKeyStrokes()"""
        return List['KeyStroke']._wrap(super(JComponent, self).getRegisteredKeyStrokes())

    @override
    @overload
    def isFocusable(self) -> bool:
        """public boolean java.awt.Component.isFocusable()"""
        return bool._wrap(super(Component, self).isFocusable())

    @override
    @overload
    def isFocusTraversalPolicyProvider(self) -> bool:
        """public final boolean java.awt.Container.isFocusTraversalPolicyProvider()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicyProvider())

    @override
    @overload
    def getMouseListeners(self) -> List['MouseListener']:
        """public synchronized java.awt.event.MouseListener[] java.awt.Component.getMouseListeners()"""
        return List['MouseListener']._wrap(super(Component, self).getMouseListeners())

    @override
    @overload
    def registerKeyboardAction(self, arg0: 'ActionListener', arg1: 'KeyStroke', arg2: int):
        """public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,javax.swing.KeyStroke,int)"""
        super(_JComponent, self).registerKeyboardAction(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def transferFocusUpCycle(self):
        """public void java.awt.Component.transferFocusUpCycle()"""
        super(Component, self).transferFocusUpCycle()

    @override
    @overload
    def removeKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.removeKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).removeKeyListener(arg0)

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: str, arg2: str):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,char,char)"""
        super(_JComponent, self).firePropertyChange(arg0, _char.valueOf(arg1), _char.valueOf(arg2))

    @override
    @overload
    def getMouseMotionListeners(self) -> List['MouseMotionListener']:
        """public synchronized java.awt.event.MouseMotionListener[] java.awt.Component.getMouseMotionListeners()"""
        return List['MouseMotionListener']._wrap(super(Component, self).getMouseMotionListeners())

    @override
    @overload
    def getAutoscrolls(self) -> bool:
        """public boolean javax.swing.JComponent.getAutoscrolls()"""
        return bool._wrap(super(JComponent, self).getAutoscrolls())

    @override
    @overload
    def addContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.addContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).addContainerListener(arg0)

    @override
    @overload
    def isFocusTraversable(self) -> bool:
        """public boolean java.awt.Component.isFocusTraversable()"""
        return bool._wrap(super(Component, self).isFocusTraversable())

    @overload
    def mouseExit(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseExit(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseExit(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getBounds(self, arg0: 'Rectangle') -> 'Rectangle':
        """public java.awt.Rectangle javax.swing.JComponent.getBounds(java.awt.Rectangle)"""
        return 'Rectangle'._wrap(super(_JComponent, self).getBounds(arg0))

    @override
    @overload
    def setToolTipText(self, arg0: str):
        """public void javax.swing.JComponent.setToolTipText(java.lang.String)"""
        super(_JComponent, self).setToolTipText(arg0)

    @override
    @overload
    def setAutoscrolls(self, arg0: bool):
        """public void javax.swing.JComponent.setAutoscrolls(boolean)"""
        super(_JComponent, self).setAutoscrolls(_boolean.valueOf(arg0))

    @override
    @overload
    def setComponentPopupMenu(self, arg0: 'JPopupMenu'):
        """public void javax.swing.JComponent.setComponentPopupMenu(javax.swing.JPopupMenu)"""
        super(_JComponent, self).setComponentPopupMenu(arg0)

    @override
    @overload
    def setMixingCutoutShape(self, arg0: 'Shape'):
        """public void java.awt.Component.setMixingCutoutShape(java.awt.Shape)"""
        super(_Component, self).setMixingCutoutShape(arg0)

    @override
    @overload
    def getVisibleRect(self) -> 'Rectangle':
        """public java.awt.Rectangle javax.swing.JComponent.getVisibleRect()"""
        return 'Rectangle'._wrap(super(JComponent, self).getVisibleRect())

    @override
    @overload
    def requestFocus(self, arg0: 'Cause'):
        """public void java.awt.Component.requestFocus(java.awt.event.FocusEvent$Cause)"""
        super(_Component, self).requestFocus(arg0)

    @overload
    def createImage(self, arg0: int, arg1: int) -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(int,int)"""
        return 'Image'._wrap(super(_Component, self).createImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def putClientProperty(self, arg0: object, arg1: object):
        """public final void javax.swing.JComponent.putClientProperty(java.lang.Object,java.lang.Object)"""
        super(_JComponent, self).putClientProperty(arg0, arg1)

    @override
    @overload
    def getVetoableChangeListeners(self) -> List['VetoableChangeListener']:
        """public synchronized java.beans.VetoableChangeListener[] javax.swing.JComponent.getVetoableChangeListeners()"""
        return List['VetoableChangeListener']._wrap(super(JComponent, self).getVetoableChangeListeners())

    @override
    @overload
    def scrollRectToVisible(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.scrollRectToVisible(java.awt.Rectangle)"""
        super(_JComponent, self).scrollRectToVisible(arg0)

    @override
    @overload
    def getTopLevelAncestor(self) -> 'Container':
        """public java.awt.Container javax.swing.JComponent.getTopLevelAncestor()"""
        return 'Container'._wrap(super(JComponent, self).getTopLevelAncestor())

    @override
    @overload
    def isRequestFocusEnabled(self) -> bool:
        """public boolean javax.swing.JComponent.isRequestFocusEnabled()"""
        return bool._wrap(super(JComponent, self).isRequestFocusEnabled())

    @override
    @overload
    def getFocusListeners(self) -> List['FocusListener']:
        """public synchronized java.awt.event.FocusListener[] java.awt.Component.getFocusListeners()"""
        return List['FocusListener']._wrap(super(Component, self).getFocusListeners())

    @override
    @overload
    def setLayout(self, arg0: 'LayoutManager'):
        """public void java.awt.Container.setLayout(java.awt.LayoutManager)"""
        super(_Container, self).setLayout(arg0)

    @overload
    def add(self, arg0: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0))

    @override
    @overload
    def getMouseWheelListeners(self) -> List['MouseWheelListener']:
        """public synchronized java.awt.event.MouseWheelListener[] java.awt.Component.getMouseWheelListeners()"""
        return List['MouseWheelListener']._wrap(super(Component, self).getMouseWheelListeners())

    @override
    @overload
    def reshape(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void javax.swing.JComponent.reshape(int,int,int,int)"""
        super(_JComponent, self).reshape(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def setTransferHandler(self, arg0: 'TransferHandler'):
        """public void javax.swing.JComponent.setTransferHandler(javax.swing.TransferHandler)"""
        super(_JComponent, self).setTransferHandler(arg0)

    @override
    @overload
    def getPreferredSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getPreferredSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getPreferredSize())

    @override
    @overload
    def setLocation(self, arg0: int, arg1: int):
        """public void java.awt.Component.setLocation(int,int)"""
        super(_Component, self).setLocation(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def removeInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.removeInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).removeInputMethodListener(arg0)

    @override
    @overload
    def setFocusable(self, arg0: bool):
        """public void java.awt.Component.setFocusable(boolean)"""
        super(_Component, self).setFocusable(_boolean.valueOf(arg0))

    @override
    @overload
    def paintComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.paintComponents(java.awt.Graphics)"""
        super(_Container, self).paintComponents(arg0)

    @override
    @overload
    def addFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.addFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).addFocusListener(arg0)

    @overload
    def prepareImage(self, arg0: 'Image', arg1: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, arg1))

    @override
    @overload
    def addKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.addKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).addKeyListener(arg0)

    @override
    @overload
    def resize(self, arg0: 'Dimension'):
        """public void java.awt.Component.resize(java.awt.Dimension)"""
        super(_Component, self).resize(arg0)

    @override
    @overload
    def setComponentZOrder(self, arg0: 'Component', arg1: int):
        """public void java.awt.Container.setComponentZOrder(java.awt.Component,int)"""
        super(_Container, self).setComponentZOrder(arg0, _int.valueOf(arg1))

    @override
    @overload
    def list(self):
        """public void java.awt.Component.list()"""
        super(Component, self).list()

    @overload
    def add(self, arg0: str, arg1: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.lang.String,java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, arg1))

    @override
    @overload
    def paintImmediately(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void javax.swing.JComponent.paintImmediately(int,int,int,int)"""
        super(_JComponent, self).paintImmediately(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def getMinimumSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getMinimumSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getMinimumSize())

    @override
    @overload
    def setEnabled(self, arg0: bool):
        """public void javax.swing.JComponent.setEnabled(boolean)"""
        super(_JComponent, self).setEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def hasFocus(self) -> bool:
        """public boolean java.awt.Component.hasFocus()"""
        return bool._wrap(super(Component, self).hasFocus())

    @overload
    def createVolatileImage(self, arg0: int, arg1: int) -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int)"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.removeHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).removeHierarchyListener(arg0)

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.awt.Component.toString()"""
        return str._wrap(super(Component, self).toString())

    @override
    @overload
    def addMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.addMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).addMouseListener(arg0)

    @override
    @overload
    def isFocusOwner(self) -> bool:
        """public boolean java.awt.Component.isFocusOwner()"""
        return bool._wrap(super(Component, self).isFocusOwner())

    @override
    @overload
    def getAccessibleContext(self) -> 'AccessibleContext':
        """public javax.accessibility.AccessibleContext javax.swing.JPanel.getAccessibleContext()"""
        return 'AccessibleContext'._wrap(super(JPanel, self).getAccessibleContext())

    @overload
    def postEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.postEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).postEvent(arg0))

    @overload
    def getLocation(self, arg0: 'Point') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getLocation(java.awt.Point)"""
        return 'Point'._wrap(super(_JComponent, self).getLocation(arg0))

    @overload
    def getBaseline(self, arg0: int, arg1: int) -> int:
        """public int javax.swing.JComponent.getBaseline(int,int)"""
        return int._wrap(super(_JComponent, self).getBaseline(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def findComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeNotify(self):
        """public void javax.swing.JComponent.removeNotify()"""
        super(JComponent, self).removeNotify()

    @override
    @overload
    def getForeground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getForeground()"""
        return 'Color'._wrap(super(Component, self).getForeground())

    @override
    @overload
    def show(self):
        """public void java.awt.Component.show()"""
        super(Component, self).show()

    @override
    @overload
    def isDoubleBuffered(self) -> bool:
        """public boolean javax.swing.JComponent.isDoubleBuffered()"""
        return bool._wrap(super(JComponent, self).isDoubleBuffered())

    @override
    @overload
    def isFocusCycleRoot(self) -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot()"""
        return bool._wrap(super(Container, self).isFocusCycleRoot())

    @override
    @overload
    def addMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.addMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).addMouseWheelListener(arg0)

    @override
    @overload
    def hide(self):
        """public void javax.swing.JComponent.hide()"""
        super(JComponent, self).hide()

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def revalidate(self):
        """public void javax.swing.JComponent.revalidate()"""
        super(JComponent, self).revalidate()

    @override
    @overload
    def getActionMap(self) -> 'ActionMap':
        """public final javax.swing.ActionMap javax.swing.JComponent.getActionMap()"""
        return 'ActionMap'._wrap(super(JComponent, self).getActionMap())

    @override
    @overload
    def requestFocusInWindow(self) -> bool:
        """public boolean javax.swing.JComponent.requestFocusInWindow()"""
        return bool._wrap(super(JComponent, self).requestFocusInWindow())

    @overload
    def action(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.action(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).action(arg0, arg1))

    @override
    @overload
    def isManagingFocus(self) -> bool:
        """public boolean javax.swing.JComponent.isManagingFocus()"""
        return bool._wrap(super(JComponent, self).isManagingFocus())

    @override
    @overload
    def isLightweight(self) -> bool:
        """public boolean java.awt.Component.isLightweight()"""
        return bool._wrap(super(Component, self).isLightweight())

    @override
    @overload
    def setAlignmentX(self, arg0: float):
        """public void javax.swing.JComponent.setAlignmentX(float)"""
        super(_JComponent, self).setAlignmentX(_float.valueOf(arg0))

    @overload
    def getFocusTraversalKeys(self, arg0: int) -> 'Set':
        """public java.util.Set<java.awt.AWTKeyStroke> java.awt.Container.getFocusTraversalKeys(int)"""
        return 'Set'._wrap(super(_Container, self).getFocusTraversalKeys(_int.valueOf(arg0)))

    @override
    @overload
    def setFocusTraversalKeysEnabled(self, arg0: bool):
        """public void java.awt.Component.setFocusTraversalKeysEnabled(boolean)"""
        super(_Component, self).setFocusTraversalKeysEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def remove(self, arg0: 'Component'):
        """public void java.awt.Container.remove(java.awt.Component)"""
        super(_Container, self).remove(arg0)

    @overload
    def getInsets(self, arg0: 'Insets') -> 'Insets':
        """public java.awt.Insets javax.swing.JComponent.getInsets(java.awt.Insets)"""
        return 'Insets'._wrap(super(_JComponent, self).getInsets(arg0))

    @override
    @overload
    def insets(self) -> 'Insets':
        """public java.awt.Insets java.awt.Container.insets()"""
        return 'Insets'._wrap(super(Container, self).insets())

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int):
        """public void javax.swing.JComponent.repaint(long,int,int,int,int)"""
        super(_JComponent, self).repaint(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4))

    @override
    @overload
    def setFocusTraversalPolicy(self, arg0: 'FocusTraversalPolicy'):
        """public void java.awt.Container.setFocusTraversalPolicy(java.awt.FocusTraversalPolicy)"""
        super(_Container, self).setFocusTraversalPolicy(arg0)

    @overload
    def getSize(self, arg0: 'Dimension') -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getSize(java.awt.Dimension)"""
        return 'Dimension'._wrap(super(_JComponent, self).getSize(arg0))

    @override
    @overload
    def enable(self, arg0: bool):
        """public void java.awt.Component.enable(boolean)"""
        super(_Component, self).enable(_boolean.valueOf(arg0))

    @overload
    def getToolTipLocation(self, arg0: 'MouseEvent') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getToolTipLocation(java.awt.event.MouseEvent)"""
        return 'Point'._wrap(super(_JComponent, self).getToolTipLocation(arg0))

    @override
    @overload
    def addPropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Container.addPropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Container, self).addPropertyChangeListener(arg0)

    @overload
    def getComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(arg0))

    @override
    @overload
    def size(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.size()"""
        return 'Dimension'._wrap(super(Component, self).size())

    @override
    @overload
    def getVerifyInputWhenFocusTarget(self) -> bool:
        """public boolean javax.swing.JComponent.getVerifyInputWhenFocusTarget()"""
        return bool._wrap(super(JComponent, self).getVerifyInputWhenFocusTarget())

    @overload
    def mouseMove(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseMove(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseMove(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getActionForKeyStroke(self, arg0: 'KeyStroke') -> 'ActionListener':
        """public java.awt.event.ActionListener javax.swing.JComponent.getActionForKeyStroke(javax.swing.KeyStroke)"""
        return 'ActionListener'._wrap(super(_JComponent, self).getActionForKeyStroke(arg0))

    @overload
    def lostFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.lostFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).lostFocus(arg0, arg1))

    @override
    @overload
    def isMinimumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMinimumSizeSet()"""
        return bool._wrap(super(Component, self).isMinimumSizeSet())

    @override
    @overload
    def isForegroundSet(self) -> bool:
        """public boolean java.awt.Component.isForegroundSet()"""
        return bool._wrap(super(Component, self).isForegroundSet())

    @overload
    def getMousePosition(self, arg0: bool) -> 'Point':
        """public java.awt.Point java.awt.Container.getMousePosition(boolean) throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(_Container, self).getMousePosition(_boolean.valueOf(arg0)))

    @overload
    def getFontMetrics(self, arg0: 'Font') -> 'FontMetrics':
        """public java.awt.FontMetrics javax.swing.JComponent.getFontMetrics(java.awt.Font)"""
        return 'FontMetrics'._wrap(super(_JComponent, self).getFontMetrics(arg0))

    @overload
    def getListeners(self, arg0: 'Class') -> List['EventListener']:
        """public <T extends java.util.EventListener> T[] javax.swing.JComponent.getListeners(java.lang.Class<T>)"""
        return List['EventListener']._wrap(super(_JComponent, self).getListeners(arg0))

    @override
    @overload
    def getHierarchyBoundsListeners(self) -> List['HierarchyBoundsListener']:
        """public synchronized java.awt.event.HierarchyBoundsListener[] java.awt.Component.getHierarchyBoundsListeners()"""
        return List['HierarchyBoundsListener']._wrap(super(Component, self).getHierarchyBoundsListeners())

    @override
    @overload
    def minimumSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.minimumSize()"""
        return 'Dimension'._wrap(super(Container, self).minimumSize())

    @overload
    def handleEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.handleEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).handleEvent(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @override
    @overload
    def getComponentListeners(self) -> List['ComponentListener']:
        """public synchronized java.awt.event.ComponentListener[] java.awt.Component.getComponentListeners()"""
        return List['ComponentListener']._wrap(super(Component, self).getComponentListeners())

    @override
    @overload
    def computeVisibleRect(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.computeVisibleRect(java.awt.Rectangle)"""
        super(_JComponent, self).computeVisibleRect(arg0)

    @override
    @overload
    def deliverEvent(self, arg0: 'Event'):
        """public void java.awt.Container.deliverEvent(java.awt.Event)"""
        super(_Container, self).deliverEvent(arg0)

    @override
    @overload
    def addHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.addHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).addHierarchyBoundsListener(arg0)

    @override
    @overload
    def getAlignmentX(self) -> float:
        """public float javax.swing.JComponent.getAlignmentX()"""
        return float._wrap(super(JComponent, self).getAlignmentX())

    @overload
    def add(self, arg0: 'Component', arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component,int)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def repaint(self):
        """public void java.awt.Component.repaint()"""
        super(Component, self).repaint()

    @overload
    def gotFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.gotFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).gotFocus(arg0, arg1))

    @override
    @overload
    def createToolTip(self) -> 'JToolTip':
        """public javax.swing.JToolTip javax.swing.JComponent.createToolTip()"""
        return 'JToolTip'._wrap(super(JComponent, self).createToolTip())

    @overload
    def getToolTipText(self, arg0: 'MouseEvent') -> str:
        """public java.lang.String javax.swing.JComponent.getToolTipText(java.awt.event.MouseEvent)"""
        return str._wrap(super(_JComponent, self).getToolTipText(arg0))

    @override
    @overload
    def printComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.printComponents(java.awt.Graphics)"""
        super(_Container, self).printComponents(arg0)

    @override
    @overload
    def getColorModel(self) -> 'ColorModel':
        """public java.awt.image.ColorModel java.awt.Component.getColorModel()"""
        return 'ColorModel'._wrap(super(Component, self).getColorModel())

    @override
    @overload
    def setFocusTraversalPolicyProvider(self, arg0: bool):
        """public final void java.awt.Container.setFocusTraversalPolicyProvider(boolean)"""
        super(_Container, self).setFocusTraversalPolicyProvider(_boolean.valueOf(arg0))

    @overload
    def getComponentZOrder(self, arg0: 'Component') -> int:
        """public int java.awt.Container.getComponentZOrder(java.awt.Component)"""
        return int._wrap(super(_Container, self).getComponentZOrder(arg0))

    @override
    @overload
    def getDebugGraphicsOptions(self) -> int:
        """public int javax.swing.JComponent.getDebugGraphicsOptions()"""
        return int._wrap(super(JComponent, self).getDebugGraphicsOptions())

    @overload
    def areFocusTraversalKeysSet(self, arg0: int) -> bool:
        """public boolean java.awt.Container.areFocusTraversalKeysSet(int)"""
        return bool._wrap(super(_Container, self).areFocusTraversalKeysSet(_int.valueOf(arg0)))

    @override
    @overload
    def getSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.getSize()"""
        return 'Dimension'._wrap(super(Component, self).getSize())

    @override
    @overload
    def setName(self, arg0: str):
        """public void java.awt.Component.setName(java.lang.String)"""
        super(_Component, self).setName(arg0)

    @override
    @overload
    def repaint(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.repaint(java.awt.Rectangle)"""
        super(_JComponent, self).repaint(arg0)

    @overload
    def getClientProperty(self, arg0: object) -> object:
        """public final java.lang.Object javax.swing.JComponent.getClientProperty(java.lang.Object)"""
        return object._wrap(super(_JComponent, self).getClientProperty(arg0))

    @override
    @overload
    def unregisterKeyboardAction(self, arg0: 'KeyStroke'):
        """public void javax.swing.JComponent.unregisterKeyboardAction(javax.swing.KeyStroke)"""
        super(_JComponent, self).unregisterKeyboardAction(arg0)

    @overload
    def requestFocus(self, arg0: bool) -> bool:
        """public boolean javax.swing.JComponent.requestFocus(boolean)"""
        return bool._wrap(super(_JComponent, self).requestFocus(_boolean.valueOf(arg0)))

    @override
    @overload
    def setActionMap(self, arg0: 'ActionMap'):
        """public final void javax.swing.JComponent.setActionMap(javax.swing.ActionMap)"""
        super(_JComponent, self).setActionMap(arg0)

    @override
    @overload
    def getX(self) -> int:
        """public int javax.swing.JComponent.getX()"""
        return int._wrap(super(JComponent, self).getX())

    @overload
    def mouseEnter(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseEnter(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseEnter(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def updateUI(self):
        """public void javax.swing.JPanel.updateUI()"""
        super(JPanel, self).updateUI()

    @override
    @overload
    def getToolkit(self) -> 'Toolkit':
        """public java.awt.Toolkit java.awt.Component.getToolkit()"""
        return 'Toolkit'._wrap(super(Component, self).getToolkit())

    @override
    @overload
    def isCursorSet(self) -> bool:
        """public boolean java.awt.Component.isCursorSet()"""
        return bool._wrap(super(Component, self).isCursorSet())

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object, arg2: int):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object,int)"""
        super(_Container, self).add(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def setPreferredSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setPreferredSize(java.awt.Dimension)"""
        super(_JComponent, self).setPreferredSize(arg0)

    @override
    @overload
    def setBounds(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.setBounds(int,int,int,int)"""
        super(_Component, self).setBounds(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def isFocusTraversalPolicySet(self) -> bool:
        """public boolean java.awt.Container.isFocusTraversalPolicySet()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicySet())

    @override
    @overload
    def requestFocus(self):
        """public void javax.swing.JComponent.requestFocus()"""
        super(JComponent, self).requestFocus()

    @override
    @overload
    def getAncestorListeners(self) -> List['AncestorListener']:
        """public javax.swing.event.AncestorListener[] javax.swing.JComponent.getAncestorListeners()"""
        return List['AncestorListener']._wrap(super(JComponent, self).getAncestorListeners())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool._wrap(super(_object, self).equals(arg0))

    @overload
    def getInputMap(self, arg0: int) -> 'InputMap':
        """public final javax.swing.InputMap javax.swing.JComponent.getInputMap(int)"""
        return 'InputMap'._wrap(super(_JComponent, self).getInputMap(_int.valueOf(arg0)))

    @override
    @overload
    def isEnabled(self) -> bool:
        """public boolean java.awt.Component.isEnabled()"""
        return bool._wrap(super(Component, self).isEnabled())

    @override
    @overload
    def move(self, arg0: int, arg1: int):
        """public void java.awt.Component.move(int,int)"""
        super(_Component, self).move(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getName(self) -> str:
        """public java.lang.String java.awt.Component.getName()"""
        return str._wrap(super(Component, self).getName())

    @override
    @overload
    def addMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.addMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).addMouseMotionListener(arg0)

    @override
    @overload
    def getIgnoreRepaint(self) -> bool:
        """public boolean java.awt.Component.getIgnoreRepaint()"""
        return bool._wrap(super(Component, self).getIgnoreRepaint())

    @overload
    def isFocusCycleRoot(self, arg0: 'Container') -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot(java.awt.Container)"""
        return bool._wrap(super(_Container, self).isFocusCycleRoot(arg0))

    @override
    @overload
    def getGraphics(self) -> 'Graphics':
        """public java.awt.Graphics javax.swing.JComponent.getGraphics()"""
        return 'Graphics'._wrap(super(JComponent, self).getGraphics())

    @override
    @overload
    def setLocale(self, arg0: 'Locale'):
        """public void java.awt.Component.setLocale(java.util.Locale)"""
        super(_Component, self).setLocale(arg0)

    @override
    @overload
    def paintAll(self, arg0: 'Graphics'):
        """public void java.awt.Component.paintAll(java.awt.Graphics)"""
        super(_Component, self).paintAll(arg0)

    @override
    @overload
    def setDoubleBuffered(self, arg0: bool):
        """public void javax.swing.JComponent.setDoubleBuffered(boolean)"""
        super(_JComponent, self).setDoubleBuffered(_boolean.valueOf(arg0))

    @override
    @overload
    def isPreferredSizeSet(self) -> bool:
        """public boolean java.awt.Component.isPreferredSizeSet()"""
        return bool._wrap(super(Component, self).isPreferredSizeSet())

    @override
    @overload
    def addInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.addInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).addInputMethodListener(arg0)

    @override
    @overload
    def removeMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.removeMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).removeMouseWheelListener(arg0)

    @override
    @overload
    def getInputMap(self) -> 'InputMap':
        """public final javax.swing.InputMap javax.swing.JComponent.getInputMap()"""
        return 'InputMap'._wrap(super(JComponent, self).getInputMap())

    @override
    @overload
    def setVisible(self, arg0: bool):
        """public void javax.swing.JComponent.setVisible(boolean)"""
        super(_JComponent, self).setVisible(_boolean.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,byte,byte)"""
        super(_Component, self).firePropertyChange(arg0, _byte.valueOf(arg1), _byte.valueOf(arg2))

    @override
    @overload
    def getUIClassID(self) -> str:
        """public java.lang.String javax.swing.JPanel.getUIClassID()"""
        return str._wrap(super(JPanel, self).getUIClassID())

    @override
    @overload
    def transferFocusDownCycle(self):
        """public void java.awt.Container.transferFocusDownCycle()"""
        super(Container, self).transferFocusDownCycle()

    @override
    @overload
    def getNextFocusableComponent(self) -> 'Component':
        """public java.awt.Component javax.swing.JComponent.getNextFocusableComponent()"""
        return 'Component'._wrap(super(JComponent, self).getNextFocusableComponent())

    @override
    @overload
    def getUI(self) -> 'PanelUI':
        """public javax.swing.plaf.PanelUI javax.swing.JPanel.getUI()"""
        return 'PanelUI'._wrap(super(JPanel, self).getUI())

    @override
    @overload
    def setBounds(self, arg0: 'Rectangle'):
        """public void java.awt.Component.setBounds(java.awt.Rectangle)"""
        super(_Component, self).setBounds(arg0)

    @override
    @overload
    def repaint(self, arg0: int):
        """public void java.awt.Component.repaint(long)"""
        super(_Component, self).repaint(_long.valueOf(arg0))

    @override
    @overload
    def removeHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.removeHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).removeHierarchyBoundsListener(arg0)

    @override
    @overload
    def getComponentPopupMenu(self) -> 'JPopupMenu':
        """public javax.swing.JPopupMenu javax.swing.JComponent.getComponentPopupMenu()"""
        return 'JPopupMenu'._wrap(super(JComponent, self).getComponentPopupMenu())

    @override
    @overload
    def getMousePosition(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getMousePosition() throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(Component, self).getMousePosition())

    @override
    @overload
    def getComponentCount(self) -> int:
        """public int java.awt.Container.getComponentCount()"""
        return int._wrap(super(Container, self).getComponentCount())

    @override
    @overload
    def getInputMethodRequests(self) -> 'InputMethodRequests':
        """public java.awt.im.InputMethodRequests java.awt.Component.getInputMethodRequests()"""
        return 'InputMethodRequests'._wrap(super(Component, self).getInputMethodRequests())

    @override
    @overload
    def setMaximumSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setMaximumSize(java.awt.Dimension)"""
        super(_JComponent, self).setMaximumSize(arg0)

    @override
    @overload
    def setRequestFocusEnabled(self, arg0: bool):
        """public void javax.swing.JComponent.setRequestFocusEnabled(boolean)"""
        super(_JComponent, self).setRequestFocusEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def setFocusTraversalKeys(self, arg0: int, arg1: 'Set'):
        """public void javax.swing.JComponent.setFocusTraversalKeys(int,java.util.Set<? extends java.awt.AWTKeyStroke>)"""
        super(_JComponent, self).setFocusTraversalKeys(_int.valueOf(arg0), arg1)

    @overload
    def inside(self, arg0: int, arg1: int) -> bool:
        """public boolean java.awt.Component.inside(int,int)"""
        return bool._wrap(super(_Component, self).inside(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def requestDefaultFocus(self) -> bool:
        """public boolean javax.swing.JComponent.requestDefaultFocus()"""
        return bool._wrap(super(JComponent, self).requestDefaultFocus())

    @override
    @overload
    def disable(self):
        """public void javax.swing.JComponent.disable()"""
        super(JComponent, self).disable()

    @override
    @overload
    def enableInputMethods(self, arg0: bool):
        """public void java.awt.Component.enableInputMethods(boolean)"""
        super(_Component, self).enableInputMethods(_boolean.valueOf(arg0))

    @override
    @overload
    def layout(self):
        """public void java.awt.Container.layout()"""
        super(Container, self).layout()

    @override
    @overload
    def getInputMethodListeners(self) -> List['InputMethodListener']:
        """public synchronized java.awt.event.InputMethodListener[] java.awt.Component.getInputMethodListeners()"""
        return List['InputMethodListener']._wrap(super(Component, self).getInputMethodListeners())

    @override
    @overload
    def paint(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.paint(java.awt.Graphics)"""
        super(_JComponent, self).paint(arg0)

    @override
    @overload
    def transferFocus(self):
        """public void java.awt.Component.transferFocus()"""
        super(Component, self).transferFocus()

    @override
    @overload
    def removeComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.removeComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).removeComponentListener(arg0)

    @override
    @overload
    def getCursor(self) -> 'Cursor':
        """public java.awt.Cursor java.awt.Component.getCursor()"""
        return 'Cursor'._wrap(super(Component, self).getCursor())

    @override
    @overload
    def setMinimumSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setMinimumSize(java.awt.Dimension)"""
        super(_JComponent, self).setMinimumSize(arg0)

    @override
    @overload
    def getContainerListeners(self) -> List['ContainerListener']:
        """public synchronized java.awt.event.ContainerListener[] java.awt.Container.getContainerListeners()"""
        return List['ContainerListener']._wrap(super(Container, self).getContainerListeners())

    @override
    @overload
    def setLocation(self, arg0: 'Point'):
        """public void java.awt.Component.setLocation(java.awt.Point)"""
        super(_Component, self).setLocation(arg0)

    @override
    @overload
    def setSize(self, arg0: 'Dimension'):
        """public void java.awt.Component.setSize(java.awt.Dimension)"""
        super(_Component, self).setSize(arg0)

    @override
    @overload
    def removeAll(self):
        """public void java.awt.Container.removeAll()"""
        super(Container, self).removeAll()

    @overload
    def getPopupLocation(self, arg0: 'MouseEvent') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getPopupLocation(java.awt.event.MouseEvent)"""
        return 'Point'._wrap(super(_JComponent, self).getPopupLocation(arg0))

    @overload
    def isAncestorOf(self, arg0: 'Component') -> bool:
        """public boolean java.awt.Container.isAncestorOf(java.awt.Component)"""
        return bool._wrap(super(_Container, self).isAncestorOf(arg0))

    @override
    @overload
    def setOpaque(self, arg0: bool):
        """public void javax.swing.JComponent.setOpaque(boolean)"""
        super(_JComponent, self).setOpaque(_boolean.valueOf(arg0))

    @overload
    def contains(self, arg0: int, arg1: int) -> bool:
        """public boolean javax.swing.JComponent.contains(int,int)"""
        return bool._wrap(super(_JComponent, self).contains(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def __init__(self, arg0: 'ColorSlider'):
        """public com.badlogic.gdx.tools.flame.GradientPanel$ColorSlider$ColorPicker(com.badlogic.gdx.tools.flame.GradientPanel$ColorSlider)"""
        val = _ColorPicker(arg0)
        self.__wrapper = val

    @override
    @overload
    def setCursor(self, arg0: 'Cursor'):
        """public void java.awt.Component.setCursor(java.awt.Cursor)"""
        super(_Component, self).setCursor(arg0)

    @override
    @overload
    def validate(self):
        """public void java.awt.Container.validate()"""
        super(Container, self).validate()

    @override
    @overload
    def getMaximumSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getMaximumSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getMaximumSize())

    @override
    @overload
    def getBackground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getBackground()"""
        return 'Color'._wrap(super(Component, self).getBackground())

    @overload
    def createImage(self, arg0: 'ImageProducer') -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(java.awt.image.ImageProducer)"""
        return 'Image'._wrap(super(_Component, self).createImage(arg0))

    @override
    @overload
    def setVerifyInputWhenFocusTarget(self, arg0: bool):
        """public void javax.swing.JComponent.setVerifyInputWhenFocusTarget(boolean)"""
        super(_JComponent, self).setVerifyInputWhenFocusTarget(_boolean.valueOf(arg0))

    @override
    @overload
    def removePropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0, arg1)

    @override
    @overload
    def countComponents(self) -> int:
        """public int java.awt.Container.countComponents()"""
        return int._wrap(super(Container, self).countComponents()) 
 
 
# CLASS: com.badlogic.gdx.tools.flame.LoaderButton$ModelLoaderButton
import javax.swing.Action as _Action
_Action = _Action
import javax.accessibility.AccessibleContext as AccessibleContext
import javax.swing.JToolTip as JToolTip
import java.awt.event.HierarchyBoundsListener as HierarchyBoundsListener
import java.awt.event.ActionListener as _ActionListener
_ActionListener = _ActionListener
import java.awt.ComponentOrientation as _ComponentOrientation
_ComponentOrientation = _ComponentOrientation
import java.awt.image.ImageProducer as ImageProducer
import com.badlogic.gdx.tools.flame.LoaderButton as _LoaderButton_ModelLoaderButton
_ModelLoaderButton = _LoaderButton_ModelLoaderButton.ModelLoaderButton
import java.awt.GraphicsConfiguration as GraphicsConfiguration
import java.awt.Graphics as _Graphics
_Graphics = _Graphics
import javax.swing.JToolTip as _JToolTip
_JToolTip = _JToolTip
import java.awt.Container as _Container
_Container = _Container
import java.awt.MenuComponent as MenuComponent
import java.awt.im.InputMethodRequests as _InputMethodRequests
_InputMethodRequests = _InputMethodRequests
import java.awt.FocusTraversalPolicy as _FocusTraversalPolicy
_FocusTraversalPolicy = _FocusTraversalPolicy
import java.lang.Byte as _byte
import java.awt.Dimension as Dimension
import java.awt.Font as _Font
_Font = _Font
import java.awt.event.ContainerListener as ContainerListener
import javax.swing.event.AncestorListener as AncestorListener
import java.awt.AWTEvent as AWTEvent
import java.awt.image.ColorModel as _ColorModel
_ColorModel = _ColorModel
import java.lang.Object as _object
import java.awt.ComponentOrientation as ComponentOrientation
import java.awt.im.InputContext as _InputContext
_InputContext = _InputContext
from builtins import float
import java.awt.event.HierarchyListener as HierarchyListener
import com.badlogic.gdx.tools.flame.LoaderButton as _LoaderButton
_LoaderButton = _LoaderButton
import java.awt.event.InputMethodListener as InputMethodListener
from typing import List
import javax.swing.event.ChangeListener as ChangeListener
import java.awt.event.MouseWheelListener as _MouseWheelListener
_MouseWheelListener = _MouseWheelListener
import javax.swing.JButton as _JButton
_JButton = _JButton
import java.awt.event.KeyListener as KeyListener
import java.awt.Component as Component
from builtins import int
import java.awt.LayoutManager as LayoutManager
import java.awt.FontMetrics as _FontMetrics
_FontMetrics = _FontMetrics
import java.awt.Container as Container
from builtins import type
import java.awt.image.VolatileImage as _VolatileImage
_VolatileImage = _VolatileImage
import java.awt.Shape as Shape
import java.awt.Rectangle as Rectangle
import java.awt.event.ContainerListener as _ContainerListener
_ContainerListener = _ContainerListener
import java.awt.event.HierarchyListener as _HierarchyListener
_HierarchyListener = _HierarchyListener
import java.lang.String as _string
import javax.swing.InputVerifier as _InputVerifier
_InputVerifier = _InputVerifier
import java.awt.Insets as _Insets
_Insets = _Insets
import javax.swing.Icon as Icon
import javax.swing.event.ChangeListener as _ChangeListener
_ChangeListener = _ChangeListener
import javax.swing.border.Border as _Border
_Border = _Border
import java.awt.event.ComponentListener as _ComponentListener
_ComponentListener = _ComponentListener
import javax.swing.ActionMap as ActionMap
import java.beans.VetoableChangeListener as VetoableChangeListener
import javax.swing.Icon as _Icon
_Icon = _Icon
import java.awt.event.ComponentListener as ComponentListener
import javax.swing.KeyStroke as KeyStroke
import java.beans.VetoableChangeListener as _VetoableChangeListener
_VetoableChangeListener = _VetoableChangeListener
from builtins import object
import java.awt.event.KeyListener as _KeyListener
_KeyListener = _KeyListener
import java.awt.Component.BaselineResizeBehavior as BaselineResizeBehavior
import java.awt.Component as _Component_BaselineResizeBehavior
_BaselineResizeBehavior = _Component_BaselineResizeBehavior.BaselineResizeBehavior
import javax.swing.plaf.ButtonUI as _ButtonUI
_ButtonUI = _ButtonUI
import javax.swing.ButtonModel as _ButtonModel
_ButtonModel = _ButtonModel
import java.awt.Cursor as _Cursor
_Cursor = _Cursor
import java.awt.im.InputMethodRequests as InputMethodRequests
import java.lang.Long as _long
import java.awt.event.FocusListener as _FocusListener
_FocusListener = _FocusListener
import java.lang.Character as _char
import javax.swing.TransferHandler as TransferHandler
import java.awt.event.ItemListener as ItemListener
import java.awt.event.FocusEvent.Cause as Cause
import javax.accessibility.AccessibleContext as _AccessibleContext
_AccessibleContext = _AccessibleContext
import java.awt.event.MouseWheelListener as MouseWheelListener
import java.util.Set as _Set
_Set = _Set
import java.awt.image.ColorModel as ColorModel
import java.lang.Boolean as _boolean
import java.awt.event.MouseMotionListener as MouseMotionListener
import java.util.EventListener as EventListener
import java.awt.Insets as Insets
import javax.swing.Action as Action
import javax.swing.KeyStroke as _KeyStroke
_KeyStroke = _KeyStroke
import java.awt.GraphicsConfiguration as _GraphicsConfiguration
_GraphicsConfiguration = _GraphicsConfiguration
import java.awt.dnd.DropTarget as _DropTarget
_DropTarget = _DropTarget
from builtins import bool
import java.beans.PropertyChangeListener as _PropertyChangeListener
_PropertyChangeListener = _PropertyChangeListener
import java.awt.LayoutManager as _LayoutManager
_LayoutManager = _LayoutManager
import java.awt.PopupMenu as PopupMenu
import java.util.EventListener as _EventListener
_EventListener = _EventListener
import java.awt.im.InputContext as InputContext
import java.awt.event.ItemListener as _ItemListener
_ItemListener = _ItemListener
import java.awt.Component as _Component
_Component = _Component
import java.awt.Font as Font
import java.awt.image.VolatileImage as VolatileImage
import javax.swing.plaf.ButtonUI as ButtonUI
import java.awt.dnd.DropTarget as DropTarget
import java.lang.String as _String
_String = _String
import java.lang.Float as _float
import java.awt.Cursor as Cursor
import java.awt.event.MouseListener as _MouseListener
_MouseListener = _MouseListener
import java.awt.Toolkit as _Toolkit
_Toolkit = _Toolkit
import java.io.PrintStream as PrintStream
import javax.swing.JRootPane as _JRootPane
_JRootPane = _JRootPane
import java.awt.event.ActionListener as ActionListener
import java.awt.Dimension as _Dimension
_Dimension = _Dimension
import java.awt.event.MouseEvent as MouseEvent
import java.awt.Color as _Color
_Color = _Color
import javax.swing.JPopupMenu as _JPopupMenu
_JPopupMenu = _JPopupMenu
import javax.swing.InputMap as _InputMap
_InputMap = _InputMap
import java.awt.event.MouseListener as MouseListener
import java.lang.Class as _Class
_Class = _Class
import java.util.Locale as Locale
import java.lang.Double as _double
import java.lang.Object as _Object
_Object = _Object
import java.awt.Point as _Point
_Point = _Point
import java.beans.PropertyChangeListener as PropertyChangeListener
import javax.swing.border.Border as Border
import javax.swing.ButtonModel as ButtonModel
import javax.swing.JComponent as _JComponent
_JComponent = _JComponent
import javax.swing.InputVerifier as InputVerifier
import java.io.PrintWriter as PrintWriter
import java.awt.Point as Point
import javax.swing.event.AncestorListener as _AncestorListener
_AncestorListener = _AncestorListener
import java.lang.Short as _short
import java.awt.Toolkit as Toolkit
import java.awt.event.HierarchyBoundsListener as _HierarchyBoundsListener
_HierarchyBoundsListener = _HierarchyBoundsListener
import javax.swing.TransferHandler as _TransferHandler
_TransferHandler = _TransferHandler
import javax.swing.InputMap as InputMap
import java.awt.Rectangle as _Rectangle
_Rectangle = _Rectangle
import javax.swing.JRootPane as JRootPane
import java.awt.Event as Event
import java.awt.event.FocusListener as FocusListener
import java.awt.image.ImageObserver as ImageObserver
from builtins import str
from pyquantum_helper import override
import javax.swing.ActionMap as _ActionMap
_ActionMap = _ActionMap
import java.awt.FocusTraversalPolicy as FocusTraversalPolicy
import java.awt.event.MouseMotionListener as _MouseMotionListener
_MouseMotionListener = _MouseMotionListener
import java.awt.event.InputMethodListener as _InputMethodListener
_InputMethodListener = _InputMethodListener
import javax.swing.AbstractButton as _AbstractButton
_AbstractButton = _AbstractButton
import javax.swing.JPopupMenu as JPopupMenu
import java.util.Set as Set
import java.lang.Integer as _int
import java.awt.Image as _Image
_Image = _Image
import java.awt.FontMetrics as FontMetrics
import java.awt.Color as Color
import java.awt.Image as Image
import java.awt.Graphics as Graphics
import java.awt.ImageCapabilities as ImageCapabilities
import java.util.Locale as _Locale
_Locale = _Locale
 
class ModelLoaderButton():
    """com.badlogic.gdx.tools.flame.LoaderButton.ModelLoaderButton"""
 
    @staticmethod
    def _wrap(java_value: _ModelLoaderButton) -> 'ModelLoaderButton':
        return ModelLoaderButton(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _ModelLoaderButton):
        """
        Dynamic initializer for ModelLoaderButton.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_ModelLoaderButton__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_ModelLoaderButton__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def isValid(self) -> bool:
        """public boolean java.awt.Component.isValid()"""
        return bool._wrap(super(Component, self).isValid())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def getDefaultLocale() -> 'Locale':
        """public static java.util.Locale javax.swing.JComponent.getDefaultLocale()"""
        return Locale._wrap(_JComponent.getDefaultLocale())

    @override
    @overload
    def getInputVerifier(self) -> 'InputVerifier':
        """public javax.swing.InputVerifier javax.swing.JComponent.getInputVerifier()"""
        return 'InputVerifier'._wrap(super(JComponent, self).getInputVerifier())

    @override
    @overload
    def getParent(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getParent()"""
        return 'Container'._wrap(super(Component, self).getParent())

    @override
    @overload
    def paintImmediately(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.paintImmediately(java.awt.Rectangle)"""
        super(_JComponent, self).paintImmediately(arg0)

    @staticmethod
    @overload
    def setDefaultLocale(arg0: 'Locale'):
        """public static void javax.swing.JComponent.setDefaultLocale(java.util.Locale)"""
        _JComponent.setDefaultLocale(arg0)

    @override
    @overload
    def getLocale(self) -> 'Locale':
        """public java.util.Locale java.awt.Component.getLocale()"""
        return 'Locale'._wrap(super(Component, self).getLocale())

    @override
    @overload
    def setInheritsPopupMenu(self, arg0: bool):
        """public void javax.swing.JComponent.setInheritsPopupMenu(boolean)"""
        super(_JComponent, self).setInheritsPopupMenu(_boolean.valueOf(arg0))

    @override
    @overload
    def getHierarchyListeners(self) -> List['HierarchyListener']:
        """public synchronized java.awt.event.HierarchyListener[] java.awt.Component.getHierarchyListeners()"""
        return List['HierarchyListener']._wrap(super(Component, self).getHierarchyListeners())

    @override
    @overload
    def isPaintingTile(self) -> bool:
        """public boolean javax.swing.JComponent.isPaintingTile()"""
        return bool._wrap(super(JComponent, self).isPaintingTile())

    @override
    @overload
    def isDisplayable(self) -> bool:
        """public boolean java.awt.Component.isDisplayable()"""
        return bool._wrap(super(Component, self).isDisplayable())

    @override
    @overload
    def getHideActionText(self) -> bool:
        """public boolean javax.swing.AbstractButton.getHideActionText()"""
        return bool._wrap(super(AbstractButton, self).getHideActionText())

    @override
    @overload
    def getBounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.getBounds()"""
        return 'Rectangle'._wrap(super(Component, self).getBounds())

    @override
    @overload
    def removeMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.removeMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).removeMouseMotionListener(arg0)

    @override
    @overload
    def isShowing(self) -> bool:
        """public boolean java.awt.Component.isShowing()"""
        return bool._wrap(super(Component, self).isShowing())

    @override
    @overload
    def getDropTarget(self) -> 'DropTarget':
        """public synchronized java.awt.dnd.DropTarget java.awt.Component.getDropTarget()"""
        return 'DropTarget'._wrap(super(Component, self).getDropTarget())

    @override
    @overload
    def isFontSet(self) -> bool:
        """public boolean java.awt.Component.isFontSet()"""
        return bool._wrap(super(Component, self).isFontSet())

    @override
    @overload
    def getDisplayedMnemonicIndex(self) -> int:
        """public int javax.swing.AbstractButton.getDisplayedMnemonicIndex()"""
        return int._wrap(super(AbstractButton, self).getDisplayedMnemonicIndex())

    @override
    @overload
    def setIgnoreRepaint(self, arg0: bool):
        """public void java.awt.Component.setIgnoreRepaint(boolean)"""
        super(_Component, self).setIgnoreRepaint(_boolean.valueOf(arg0))

    @override
    @overload
    def getPropertyChangeListeners(self) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners()"""
        return List['PropertyChangeListener']._wrap(super(Component, self).getPropertyChangeListeners())

    @override
    @overload
    def isBackgroundSet(self) -> bool:
        """public boolean java.awt.Component.isBackgroundSet()"""
        return bool._wrap(super(Component, self).isBackgroundSet())

    @override
    @overload
    def location(self) -> 'Point':
        """public java.awt.Point java.awt.Component.location()"""
        return 'Point'._wrap(super(Component, self).location())

    @override
    @overload
    def getComponentOrientation(self) -> 'ComponentOrientation':
        """public java.awt.ComponentOrientation java.awt.Component.getComponentOrientation()"""
        return 'ComponentOrientation'._wrap(super(Component, self).getComponentOrientation())

    @override
    @overload
    def addHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.addHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).addHierarchyListener(arg0)

    @override
    @overload
    def getInheritsPopupMenu(self) -> bool:
        """public boolean javax.swing.JComponent.getInheritsPopupMenu()"""
        return bool._wrap(super(JComponent, self).getInheritsPopupMenu())

    @override
    @overload
    def getFocusCycleRootAncestor(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getFocusCycleRootAncestor()"""
        return 'Container'._wrap(super(Component, self).getFocusCycleRootAncestor())

    @override
    @overload
    def show(self, arg0: bool):
        """public void java.awt.Component.show(boolean)"""
        super(_Component, self).show(_boolean.valueOf(arg0))

    @overload
    def locate(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.locate(int,int)"""
        return 'Component'._wrap(super(_Container, self).locate(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def isPaintingForPrint(self) -> bool:
        """public final boolean javax.swing.JComponent.isPaintingForPrint()"""
        return bool._wrap(super(JComponent, self).isPaintingForPrint())

    @override
    @overload
    def preferredSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.preferredSize()"""
        return 'Dimension'._wrap(super(Container, self).preferredSize())

    @overload
    def requestFocusInWindow(self, arg0: 'Cause') -> bool:
        """public boolean java.awt.Component.requestFocusInWindow(java.awt.event.FocusEvent$Cause)"""
        return bool._wrap(super(_Component, self).requestFocusInWindow(arg0))

    @override
    @overload
    def remove(self, arg0: int):
        """public void java.awt.Container.remove(int)"""
        super(_Container, self).remove(_int.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,long,long)"""
        super(_Component, self).firePropertyChange(arg0, _long.valueOf(arg1), _long.valueOf(arg2))

    @override
    @overload
    def setFocusCycleRoot(self, arg0: bool):
        """public void java.awt.Container.setFocusCycleRoot(boolean)"""
        super(_Container, self).setFocusCycleRoot(_boolean.valueOf(arg0))

    @override
    @overload
    def enable(self):
        """public void javax.swing.JComponent.enable()"""
        super(JComponent, self).enable()

    @overload
    def __init__(self, arg0: 'FlameMain', arg1: 'Listener'):
        """public com.badlogic.gdx.tools.flame.LoaderButton$ModelLoaderButton(com.badlogic.gdx.tools.flame.FlameMain,com.badlogic.gdx.tools.flame.LoaderButton$Listener<com.badlogic.gdx.graphics.g3d.Model>)"""
        val = _ModelLoaderButton(arg0, arg1)
        self.__wrapper = val

    @overload
    def checkImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @override
    @overload
    def getFocusTraversalKeysEnabled(self) -> bool:
        """public boolean java.awt.Component.getFocusTraversalKeysEnabled()"""
        return bool._wrap(super(Component, self).getFocusTraversalKeysEnabled())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def setDisabledSelectedIcon(self, arg0: 'Icon'):
        """public void javax.swing.AbstractButton.setDisabledSelectedIcon(javax.swing.Icon)"""
        super(_AbstractButton, self).setDisabledSelectedIcon(arg0)

    @override
    @overload
    def getRootPane(self) -> 'JRootPane':
        """public javax.swing.JRootPane javax.swing.JComponent.getRootPane()"""
        return 'JRootPane'._wrap(super(JComponent, self).getRootPane())

    @override
    @overload
    def invalidate(self):
        """public void java.awt.Container.invalidate()"""
        super(Container, self).invalidate()

    @overload
    def getComponent(self, arg0: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponent(int)"""
        return 'Component'._wrap(super(_Container, self).getComponent(_int.valueOf(arg0)))

    @override
    @overload
    def setLayout(self, arg0: 'LayoutManager'):
        """public void javax.swing.AbstractButton.setLayout(java.awt.LayoutManager)"""
        super(_AbstractButton, self).setLayout(arg0)

    @override
    @overload
    def setInputMap(self, arg0: int, arg1: 'InputMap'):
        """public final void javax.swing.JComponent.setInputMap(int,javax.swing.InputMap)"""
        super(_JComponent, self).setInputMap(_int.valueOf(arg0), arg1)

    @override
    @overload
    def removePropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0)

    @override
    @overload
    def setBorder(self, arg0: 'Border'):
        """public void javax.swing.JComponent.setBorder(javax.swing.border.Border)"""
        super(_JComponent, self).setBorder(arg0)

    @override
    @overload
    def remove(self, arg0: 'MenuComponent'):
        """public void java.awt.Component.remove(java.awt.MenuComponent)"""
        super(_Component, self).remove(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintStream'):
        """public void java.awt.Component.list(java.io.PrintStream)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintWriter'):
        """public void java.awt.Component.list(java.io.PrintWriter)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def setEnabled(self, arg0: bool):
        """public void javax.swing.AbstractButton.setEnabled(boolean)"""
        super(_AbstractButton, self).setEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def getKeyListeners(self) -> List['KeyListener']:
        """public synchronized java.awt.event.KeyListener[] java.awt.Component.getKeyListeners()"""
        return List['KeyListener']._wrap(super(Component, self).getKeyListeners())

    @overload
    def mouseDown(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDown(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDown(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def addChangeListener(self, arg0: 'ChangeListener'):
        """public void javax.swing.AbstractButton.addChangeListener(javax.swing.event.ChangeListener)"""
        super(_AbstractButton, self).addChangeListener(arg0)

    @override
    @overload
    def getIconTextGap(self) -> int:
        """public int javax.swing.AbstractButton.getIconTextGap()"""
        return int._wrap(super(AbstractButton, self).getIconTextGap())

    @override
    @overload
    def addVetoableChangeListener(self, arg0: 'VetoableChangeListener'):
        """public synchronized void javax.swing.JComponent.addVetoableChangeListener(java.beans.VetoableChangeListener)"""
        super(_JComponent, self).addVetoableChangeListener(arg0)

    @overload
    def contains(self, arg0: 'Point') -> bool:
        """public boolean java.awt.Component.contains(java.awt.Point)"""
        return bool._wrap(super(_Component, self).contains(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,short,short)"""
        super(_Component, self).firePropertyChange(arg0, _short.valueOf(arg1), _short.valueOf(arg2))

    @override
    @overload
    def dispatchEvent(self, arg0: 'AWTEvent'):
        """public final void java.awt.Component.dispatchEvent(java.awt.AWTEvent)"""
        super(_Component, self).dispatchEvent(arg0)

    @override
    @overload
    def setHorizontalTextPosition(self, arg0: int):
        """public void javax.swing.AbstractButton.setHorizontalTextPosition(int)"""
        super(_AbstractButton, self).setHorizontalTextPosition(_int.valueOf(arg0))

    @override
    @overload
    def getWidth(self) -> int:
        """public int javax.swing.JComponent.getWidth()"""
        return int._wrap(super(JComponent, self).getWidth())

    @override
    @overload
    def setActionCommand(self, arg0: str):
        """public void javax.swing.AbstractButton.setActionCommand(java.lang.String)"""
        super(_AbstractButton, self).setActionCommand(arg0)

    @override
    @overload
    def getBorder(self) -> 'Border':
        """public javax.swing.border.Border javax.swing.JComponent.getBorder()"""
        return 'Border'._wrap(super(JComponent, self).getBorder())

    @override
    @overload
    def setFocusPainted(self, arg0: bool):
        """public void javax.swing.AbstractButton.setFocusPainted(boolean)"""
        super(_AbstractButton, self).setFocusPainted(_boolean.valueOf(arg0))

    @override
    @overload
    def addComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.addComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).addComponentListener(arg0)

    @override
    @overload
    def getBaselineResizeBehavior(self) -> 'BaselineResizeBehavior.Component$BaselineResizeBehavior':
        """public java.awt.Component$BaselineResizeBehavior javax.swing.JComponent.getBaselineResizeBehavior()"""
        return 'BaselineResizeBehavior.Component$BaselineResizeBehavior'._wrap(super(JComponent, self).getBaselineResizeBehavior())

    @override
    @overload
    def addAncestorListener(self, arg0: 'AncestorListener'):
        """public void javax.swing.JComponent.addAncestorListener(javax.swing.event.AncestorListener)"""
        super(_JComponent, self).addAncestorListener(arg0)

    @overload
    def prepareImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @overload
    def mouseDrag(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDrag(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDrag(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def isOpaque(self) -> bool:
        """public boolean javax.swing.JComponent.isOpaque()"""
        return bool._wrap(super(JComponent, self).isOpaque())

    @override
    @overload
    def update(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.update(java.awt.Graphics)"""
        super(_JComponent, self).update(arg0)

    @override
    @overload
    def getToolTipText(self) -> str:
        """public java.lang.String javax.swing.JComponent.getToolTipText()"""
        return str._wrap(super(JComponent, self).getToolTipText())

    @override
    @overload
    def getMnemonic(self) -> int:
        """public int javax.swing.AbstractButton.getMnemonic()"""
        return int._wrap(super(AbstractButton, self).getMnemonic())

    @override
    @overload
    def getLocationOnScreen(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocationOnScreen()"""
        return 'Point'._wrap(super(Component, self).getLocationOnScreen())

    @overload
    def getComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def getVerticalTextPosition(self) -> int:
        """public int javax.swing.AbstractButton.getVerticalTextPosition()"""
        return int._wrap(super(AbstractButton, self).getVerticalTextPosition())

    @override
    @overload
    def isMaximumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMaximumSizeSet()"""
        return bool._wrap(super(Component, self).isMaximumSizeSet())

    @override
    @overload
    def setAlignmentY(self, arg0: float):
        """public void javax.swing.JComponent.setAlignmentY(float)"""
        super(_JComponent, self).setAlignmentY(_float.valueOf(arg0))

    @override
    @overload
    def getRegisteredKeyStrokes(self) -> List['KeyStroke']:
        """public javax.swing.KeyStroke[] javax.swing.JComponent.getRegisteredKeyStrokes()"""
        return List['KeyStroke']._wrap(super(JComponent, self).getRegisteredKeyStrokes())

    @override
    @overload
    def isFocusTraversalPolicyProvider(self) -> bool:
        """public final boolean java.awt.Container.isFocusTraversalPolicyProvider()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicyProvider())

    @override
    @overload
    def getMouseListeners(self) -> List['MouseListener']:
        """public synchronized java.awt.event.MouseListener[] java.awt.Component.getMouseListeners()"""
        return List['MouseListener']._wrap(super(Component, self).getMouseListeners())

    @override
    @overload
    def registerKeyboardAction(self, arg0: 'ActionListener', arg1: 'KeyStroke', arg2: int):
        """public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,javax.swing.KeyStroke,int)"""
        super(_JComponent, self).registerKeyboardAction(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def removeKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.removeKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).removeKeyListener(arg0)

    @override
    @overload
    def getMouseMotionListeners(self) -> List['MouseMotionListener']:
        """public synchronized java.awt.event.MouseMotionListener[] java.awt.Component.getMouseMotionListeners()"""
        return List['MouseMotionListener']._wrap(super(Component, self).getMouseMotionListeners())

    @override
    @overload
    def addContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.addContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).addContainerListener(arg0)

    @override
    @overload
    def isFocusTraversable(self) -> bool:
        """public boolean java.awt.Component.isFocusTraversable()"""
        return bool._wrap(super(Component, self).isFocusTraversable())

    @override
    @overload
    def setVerticalAlignment(self, arg0: int):
        """public void javax.swing.AbstractButton.setVerticalAlignment(int)"""
        super(_AbstractButton, self).setVerticalAlignment(_int.valueOf(arg0))

    @overload
    def mouseExit(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseExit(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseExit(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getBounds(self, arg0: 'Rectangle') -> 'Rectangle':
        """public java.awt.Rectangle javax.swing.JComponent.getBounds(java.awt.Rectangle)"""
        return 'Rectangle'._wrap(super(_JComponent, self).getBounds(arg0))

    @override
    @overload
    def setAutoscrolls(self, arg0: bool):
        """public void javax.swing.JComponent.setAutoscrolls(boolean)"""
        super(_JComponent, self).setAutoscrolls(_boolean.valueOf(arg0))

    @override
    @overload
    def setComponentPopupMenu(self, arg0: 'JPopupMenu'):
        """public void javax.swing.JComponent.setComponentPopupMenu(javax.swing.JPopupMenu)"""
        super(_JComponent, self).setComponentPopupMenu(arg0)

    @override
    @overload
    def getVisibleRect(self) -> 'Rectangle':
        """public java.awt.Rectangle javax.swing.JComponent.getVisibleRect()"""
        return 'Rectangle'._wrap(super(JComponent, self).getVisibleRect())

    @overload
    def createImage(self, arg0: int, arg1: int) -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(int,int)"""
        return 'Image'._wrap(super(_Component, self).createImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeNotify(self):
        """public void javax.swing.JButton.removeNotify()"""
        super(JButton, self).removeNotify()

    @override
    @overload
    def scrollRectToVisible(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.scrollRectToVisible(java.awt.Rectangle)"""
        super(_JComponent, self).scrollRectToVisible(arg0)

    @override
    @overload
    def getRolloverSelectedIcon(self) -> 'Icon':
        """public javax.swing.Icon javax.swing.AbstractButton.getRolloverSelectedIcon()"""
        return 'Icon'._wrap(super(AbstractButton, self).getRolloverSelectedIcon())

    @override
    @overload
    def getMouseWheelListeners(self) -> List['MouseWheelListener']:
        """public synchronized java.awt.event.MouseWheelListener[] java.awt.Component.getMouseWheelListeners()"""
        return List['MouseWheelListener']._wrap(super(Component, self).getMouseWheelListeners())

    @override
    @overload
    def reshape(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void javax.swing.JComponent.reshape(int,int,int,int)"""
        super(_JComponent, self).reshape(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def setTransferHandler(self, arg0: 'TransferHandler'):
        """public void javax.swing.JComponent.setTransferHandler(javax.swing.TransferHandler)"""
        super(_JComponent, self).setTransferHandler(arg0)

    @override
    @overload
    def setSelected(self, arg0: bool):
        """public void javax.swing.AbstractButton.setSelected(boolean)"""
        super(_AbstractButton, self).setSelected(_boolean.valueOf(arg0))

    @override
    @overload
    def getPreferredSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getPreferredSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getPreferredSize())

    @override
    @overload
    def addFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.addFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).addFocusListener(arg0)

    @override
    @overload
    def addKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.addKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).addKeyListener(arg0)

    @override
    @overload
    def resize(self, arg0: 'Dimension'):
        """public void java.awt.Component.resize(java.awt.Dimension)"""
        super(_Component, self).resize(arg0)

    @override
    @overload
    def setComponentZOrder(self, arg0: 'Component', arg1: int):
        """public void java.awt.Container.setComponentZOrder(java.awt.Component,int)"""
        super(_Container, self).setComponentZOrder(arg0, _int.valueOf(arg1))

    @override
    @overload
    def list(self):
        """public void java.awt.Component.list()"""
        super(Component, self).list()

    @override
    @overload
    def getSelectedObjects(self) -> List[object]:
        """public java.lang.Object[] javax.swing.AbstractButton.getSelectedObjects()"""
        return List[object]._wrap(super(AbstractButton, self).getSelectedObjects())

    @override
    @overload
    def updateUI(self):
        """public void javax.swing.JButton.updateUI()"""
        super(JButton, self).updateUI()

    @override
    @overload
    def hasFocus(self) -> bool:
        """public boolean java.awt.Component.hasFocus()"""
        return bool._wrap(super(Component, self).hasFocus())

    @override
    @overload
    def setMargin(self, arg0: 'Insets'):
        """public void javax.swing.AbstractButton.setMargin(java.awt.Insets)"""
        super(_AbstractButton, self).setMargin(arg0)

    @override
    @overload
    def addMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.addMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).addMouseListener(arg0)

    @overload
    def postEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.postEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).postEvent(arg0))

    @overload
    def getLocation(self, arg0: 'Point') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getLocation(java.awt.Point)"""
        return 'Point'._wrap(super(_JComponent, self).getLocation(arg0))

    @overload
    def getBaseline(self, arg0: int, arg1: int) -> int:
        """public int javax.swing.JComponent.getBaseline(int,int)"""
        return int._wrap(super(_JComponent, self).getBaseline(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def findComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def setPressedIcon(self, arg0: 'Icon'):
        """public void javax.swing.AbstractButton.setPressedIcon(javax.swing.Icon)"""
        super(_AbstractButton, self).setPressedIcon(arg0)

    @override
    @overload
    def setListener(self, arg0: 'Listener'):
        """public void com.badlogic.gdx.tools.flame.LoaderButton.setListener(com.badlogic.gdx.tools.flame.LoaderButton$Listener)"""
        super(_LoaderButton, self).setListener(arg0)

    @override
    @overload
    def getForeground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getForeground()"""
        return 'Color'._wrap(super(Component, self).getForeground())

    @override
    @overload
    def show(self):
        """public void java.awt.Component.show()"""
        super(Component, self).show()

    @override
    @overload
    def isDoubleBuffered(self) -> bool:
        """public boolean javax.swing.JComponent.isDoubleBuffered()"""
        return bool._wrap(super(JComponent, self).isDoubleBuffered())

    @override
    @overload
    def addMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.addMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).addMouseWheelListener(arg0)

    @override
    @overload
    def getMargin(self) -> 'Insets':
        """public java.awt.Insets javax.swing.AbstractButton.getMargin()"""
        return 'Insets'._wrap(super(AbstractButton, self).getMargin())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def setRolloverSelectedIcon(self, arg0: 'Icon'):
        """public void javax.swing.AbstractButton.setRolloverSelectedIcon(javax.swing.Icon)"""
        super(_AbstractButton, self).setRolloverSelectedIcon(arg0)

    @override
    @overload
    def setRolloverEnabled(self, arg0: bool):
        """public void javax.swing.AbstractButton.setRolloverEnabled(boolean)"""
        super(_AbstractButton, self).setRolloverEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def isLightweight(self) -> bool:
        """public boolean java.awt.Component.isLightweight()"""
        return bool._wrap(super(Component, self).isLightweight())

    @override
    @overload
    def setAlignmentX(self, arg0: float):
        """public void javax.swing.JComponent.setAlignmentX(float)"""
        super(_JComponent, self).setAlignmentX(_float.valueOf(arg0))

    @override
    @overload
    def setFocusTraversalKeysEnabled(self, arg0: bool):
        """public void java.awt.Component.setFocusTraversalKeysEnabled(boolean)"""
        super(_Component, self).setFocusTraversalKeysEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def getMultiClickThreshhold(self) -> int:
        """public long javax.swing.AbstractButton.getMultiClickThreshhold()"""
        return int._wrap(super(AbstractButton, self).getMultiClickThreshhold())

    @overload
    def getInsets(self, arg0: 'Insets') -> 'Insets':
        """public java.awt.Insets javax.swing.JComponent.getInsets(java.awt.Insets)"""
        return 'Insets'._wrap(super(_JComponent, self).getInsets(arg0))

    @override
    @overload
    def getAction(self) -> 'Action':
        """public javax.swing.Action javax.swing.AbstractButton.getAction()"""
        return 'Action'._wrap(super(AbstractButton, self).getAction())

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int):
        """public void javax.swing.JComponent.repaint(long,int,int,int,int)"""
        super(_JComponent, self).repaint(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4))

    @overload
    def getToolTipLocation(self, arg0: 'MouseEvent') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getToolTipLocation(java.awt.event.MouseEvent)"""
        return 'Point'._wrap(super(_JComponent, self).getToolTipLocation(arg0))

    @override
    @overload
    def getIcon(self) -> 'Icon':
        """public javax.swing.Icon javax.swing.AbstractButton.getIcon()"""
        return 'Icon'._wrap(super(AbstractButton, self).getIcon())

    @override
    @overload
    def setUI(self, arg0: 'ButtonUI'):
        """public void javax.swing.AbstractButton.setUI(javax.swing.plaf.ButtonUI)"""
        super(_AbstractButton, self).setUI(arg0)

    @override
    @overload
    def removeActionListener(self, arg0: 'ActionListener'):
        """public void javax.swing.AbstractButton.removeActionListener(java.awt.event.ActionListener)"""
        super(_AbstractButton, self).removeActionListener(arg0)

    @override
    @overload
    def getVerifyInputWhenFocusTarget(self) -> bool:
        """public boolean javax.swing.JComponent.getVerifyInputWhenFocusTarget()"""
        return bool._wrap(super(JComponent, self).getVerifyInputWhenFocusTarget())

    @overload
    def mouseMove(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseMove(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseMove(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def removeItemListener(self, arg0: 'ItemListener'):
        """public void javax.swing.AbstractButton.removeItemListener(java.awt.event.ItemListener)"""
        super(_AbstractButton, self).removeItemListener(arg0)

    @overload
    def getListeners(self, arg0: 'Class') -> List['EventListener']:
        """public <T extends java.util.EventListener> T[] javax.swing.JComponent.getListeners(java.lang.Class<T>)"""
        return List['EventListener']._wrap(super(_JComponent, self).getListeners(arg0))

    @override
    @overload
    def setSelectedIcon(self, arg0: 'Icon'):
        """public void javax.swing.AbstractButton.setSelectedIcon(javax.swing.Icon)"""
        super(_AbstractButton, self).setSelectedIcon(arg0)

    @override
    @overload
    def addHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.addHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).addHierarchyBoundsListener(arg0)

    @override
    @overload
    def isBorderPainted(self) -> bool:
        """public boolean javax.swing.AbstractButton.isBorderPainted()"""
        return bool._wrap(super(AbstractButton, self).isBorderPainted())

    @overload
    def imageUpdate(self, arg0: 'Image', arg1: int, arg2: int, arg3: int, arg4: int, arg5: int) -> bool:
        """public boolean javax.swing.AbstractButton.imageUpdate(java.awt.Image,int,int,int,int,int)"""
        return bool._wrap(super(_AbstractButton, self).imageUpdate(arg0, _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4), _int.valueOf(arg5)))

    @override
    @overload
    def getHorizontalAlignment(self) -> int:
        """public int javax.swing.AbstractButton.getHorizontalAlignment()"""
        return int._wrap(super(AbstractButton, self).getHorizontalAlignment())

    @overload
    def add(self, arg0: 'Component', arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component,int)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def repaint(self):
        """public void java.awt.Component.repaint()"""
        super(Component, self).repaint()

    @override
    @overload
    def createToolTip(self) -> 'JToolTip':
        """public javax.swing.JToolTip javax.swing.JComponent.createToolTip()"""
        return 'JToolTip'._wrap(super(JComponent, self).createToolTip())

    @overload
    def getToolTipText(self, arg0: 'MouseEvent') -> str:
        """public java.lang.String javax.swing.JComponent.getToolTipText(java.awt.event.MouseEvent)"""
        return str._wrap(super(_JComponent, self).getToolTipText(arg0))

    @override
    @overload
    def setFocusTraversalPolicyProvider(self, arg0: bool):
        """public final void java.awt.Container.setFocusTraversalPolicyProvider(boolean)"""
        super(_Container, self).setFocusTraversalPolicyProvider(_boolean.valueOf(arg0))

    @overload
    def getComponentZOrder(self, arg0: 'Component') -> int:
        """public int java.awt.Container.getComponentZOrder(java.awt.Component)"""
        return int._wrap(super(_Container, self).getComponentZOrder(arg0))

    @override
    @overload
    def getSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.getSize()"""
        return 'Dimension'._wrap(super(Component, self).getSize())

    @override
    @overload
    def setName(self, arg0: str):
        """public void java.awt.Component.setName(java.lang.String)"""
        super(_Component, self).setName(arg0)

    @override
    @overload
    def unregisterKeyboardAction(self, arg0: 'KeyStroke'):
        """public void javax.swing.JComponent.unregisterKeyboardAction(javax.swing.KeyStroke)"""
        super(_JComponent, self).unregisterKeyboardAction(arg0)

    @overload
    def requestFocus(self, arg0: bool) -> bool:
        """public boolean javax.swing.JComponent.requestFocus(boolean)"""
        return bool._wrap(super(_JComponent, self).requestFocus(_boolean.valueOf(arg0)))

    @override
    @overload
    def setActionMap(self, arg0: 'ActionMap'):
        """public final void javax.swing.JComponent.setActionMap(javax.swing.ActionMap)"""
        super(_JComponent, self).setActionMap(arg0)

    @overload
    def mouseEnter(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseEnter(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseEnter(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object, arg2: int):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object,int)"""
        super(_Container, self).add(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def isFocusTraversalPolicySet(self) -> bool:
        """public boolean java.awt.Container.isFocusTraversalPolicySet()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicySet())

    @override
    @overload
    def getItemListeners(self) -> List['ItemListener']:
        """public java.awt.event.ItemListener[] javax.swing.AbstractButton.getItemListeners()"""
        return List['ItemListener']._wrap(super(AbstractButton, self).getItemListeners())

    @override
    @overload
    def getAncestorListeners(self) -> List['AncestorListener']:
        """public javax.swing.event.AncestorListener[] javax.swing.JComponent.getAncestorListeners()"""
        return List['AncestorListener']._wrap(super(JComponent, self).getAncestorListeners())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool._wrap(super(_object, self).equals(arg0))

    @overload
    def getInputMap(self, arg0: int) -> 'InputMap':
        """public final javax.swing.InputMap javax.swing.JComponent.getInputMap(int)"""
        return 'InputMap'._wrap(super(_JComponent, self).getInputMap(_int.valueOf(arg0)))

    @override
    @overload
    def getName(self) -> str:
        """public java.lang.String java.awt.Component.getName()"""
        return str._wrap(super(Component, self).getName())

    @override
    @overload
    def addMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.addMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).addMouseMotionListener(arg0)

    @override
    @overload
    def getActionListeners(self) -> List['ActionListener']:
        """public java.awt.event.ActionListener[] javax.swing.AbstractButton.getActionListeners()"""
        return List['ActionListener']._wrap(super(AbstractButton, self).getActionListeners())

    @override
    @overload
    def setDisabledIcon(self, arg0: 'Icon'):
        """public void javax.swing.AbstractButton.setDisabledIcon(javax.swing.Icon)"""
        super(_AbstractButton, self).setDisabledIcon(arg0)

    @override
    @overload
    def getIgnoreRepaint(self) -> bool:
        """public boolean java.awt.Component.getIgnoreRepaint()"""
        return bool._wrap(super(Component, self).getIgnoreRepaint())

    @override
    @overload
    def setVerticalTextPosition(self, arg0: int):
        """public void javax.swing.AbstractButton.setVerticalTextPosition(int)"""
        super(_AbstractButton, self).setVerticalTextPosition(_int.valueOf(arg0))

    @override
    @overload
    def getGraphics(self) -> 'Graphics':
        """public java.awt.Graphics javax.swing.JComponent.getGraphics()"""
        return 'Graphics'._wrap(super(JComponent, self).getGraphics())

    @override
    @overload
    def getDisabledIcon(self) -> 'Icon':
        """public javax.swing.Icon javax.swing.AbstractButton.getDisabledIcon()"""
        return 'Icon'._wrap(super(AbstractButton, self).getDisabledIcon())

    @override
    @overload
    def setDoubleBuffered(self, arg0: bool):
        """public void javax.swing.JComponent.setDoubleBuffered(boolean)"""
        super(_JComponent, self).setDoubleBuffered(_boolean.valueOf(arg0))

    @override
    @overload
    def isPreferredSizeSet(self) -> bool:
        """public boolean java.awt.Component.isPreferredSizeSet()"""
        return bool._wrap(super(Component, self).isPreferredSizeSet())

    @override
    @overload
    def addInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.addInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).addInputMethodListener(arg0)

    @override
    @overload
    def getInputMap(self) -> 'InputMap':
        """public final javax.swing.InputMap javax.swing.JComponent.getInputMap()"""
        return 'InputMap'._wrap(super(JComponent, self).getInputMap())

    @override
    @overload
    def setVisible(self, arg0: bool):
        """public void javax.swing.JComponent.setVisible(boolean)"""
        super(_JComponent, self).setVisible(_boolean.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,byte,byte)"""
        super(_Component, self).firePropertyChange(arg0, _byte.valueOf(arg1), _byte.valueOf(arg2))

    @override
    @overload
    def setBounds(self, arg0: 'Rectangle'):
        """public void java.awt.Component.setBounds(java.awt.Rectangle)"""
        super(_Component, self).setBounds(arg0)

    @override
    @overload
    def setBorderPainted(self, arg0: bool):
        """public void javax.swing.AbstractButton.setBorderPainted(boolean)"""
        super(_AbstractButton, self).setBorderPainted(_boolean.valueOf(arg0))

    @override
    @overload
    def getActionCommand(self) -> str:
        """public java.lang.String javax.swing.AbstractButton.getActionCommand()"""
        return str._wrap(super(AbstractButton, self).getActionCommand())

    @override
    @overload
    def getInputMethodRequests(self) -> 'InputMethodRequests':
        """public java.awt.im.InputMethodRequests java.awt.Component.getInputMethodRequests()"""
        return 'InputMethodRequests'._wrap(super(Component, self).getInputMethodRequests())

    @override
    @overload
    def getChangeListeners(self) -> List['ChangeListener']:
        """public javax.swing.event.ChangeListener[] javax.swing.AbstractButton.getChangeListeners()"""
        return List['ChangeListener']._wrap(super(AbstractButton, self).getChangeListeners())

    @override
    @overload
    def setRequestFocusEnabled(self, arg0: bool):
        """public void javax.swing.JComponent.setRequestFocusEnabled(boolean)"""
        super(_JComponent, self).setRequestFocusEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def setMultiClickThreshhold(self, arg0: int):
        """public void javax.swing.AbstractButton.setMultiClickThreshhold(long)"""
        super(_AbstractButton, self).setMultiClickThreshhold(_long.valueOf(arg0))

    @override
    @overload
    def setFocusTraversalKeys(self, arg0: int, arg1: 'Set'):
        """public void javax.swing.JComponent.setFocusTraversalKeys(int,java.util.Set<? extends java.awt.AWTKeyStroke>)"""
        super(_JComponent, self).setFocusTraversalKeys(_int.valueOf(arg0), arg1)

    @overload
    def inside(self, arg0: int, arg1: int) -> bool:
        """public boolean java.awt.Component.inside(int,int)"""
        return bool._wrap(super(_Component, self).inside(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def requestDefaultFocus(self) -> bool:
        """public boolean javax.swing.JComponent.requestDefaultFocus()"""
        return bool._wrap(super(JComponent, self).requestDefaultFocus())

    @override
    @overload
    def getRolloverIcon(self) -> 'Icon':
        """public javax.swing.Icon javax.swing.AbstractButton.getRolloverIcon()"""
        return 'Icon'._wrap(super(AbstractButton, self).getRolloverIcon())

    @override
    @overload
    def layout(self):
        """public void java.awt.Container.layout()"""
        super(Container, self).layout()

    @override
    @overload
    def getInputMethodListeners(self) -> List['InputMethodListener']:
        """public synchronized java.awt.event.InputMethodListener[] java.awt.Component.getInputMethodListeners()"""
        return List['InputMethodListener']._wrap(super(Component, self).getInputMethodListeners())

    @override
    @overload
    def paint(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.paint(java.awt.Graphics)"""
        super(_JComponent, self).paint(arg0)

    @override
    @overload
    def transferFocus(self):
        """public void java.awt.Component.transferFocus()"""
        super(Component, self).transferFocus()

    @override
    @overload
    def removeComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.removeComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).removeComponentListener(arg0)

    @override
    @overload
    def isFocusPainted(self) -> bool:
        """public boolean javax.swing.AbstractButton.isFocusPainted()"""
        return bool._wrap(super(AbstractButton, self).isFocusPainted())

    @override
    @overload
    def setMinimumSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setMinimumSize(java.awt.Dimension)"""
        super(_JComponent, self).setMinimumSize(arg0)

    @override
    @overload
    def setLocation(self, arg0: 'Point'):
        """public void java.awt.Component.setLocation(java.awt.Point)"""
        super(_Component, self).setLocation(arg0)

    @override
    @overload
    def getLabel(self) -> str:
        """public java.lang.String javax.swing.AbstractButton.getLabel()"""
        return str._wrap(super(AbstractButton, self).getLabel())

    @override
    @overload
    def setSize(self, arg0: 'Dimension'):
        """public void java.awt.Component.setSize(java.awt.Dimension)"""
        super(_Component, self).setSize(arg0)

    @overload
    def getPopupLocation(self, arg0: 'MouseEvent') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getPopupLocation(java.awt.event.MouseEvent)"""
        return 'Point'._wrap(super(_JComponent, self).getPopupLocation(arg0))

    @overload
    def isAncestorOf(self, arg0: 'Component') -> bool:
        """public boolean java.awt.Container.isAncestorOf(java.awt.Component)"""
        return bool._wrap(super(_Container, self).isAncestorOf(arg0))

    @overload
    def contains(self, arg0: int, arg1: int) -> bool:
        """public boolean javax.swing.JComponent.contains(int,int)"""
        return bool._wrap(super(_JComponent, self).contains(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def validate(self):
        """public void java.awt.Container.validate()"""
        super(Container, self).validate()

    @override
    @overload
    def getMaximumSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getMaximumSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getMaximumSize())

    @override
    @overload
    def setLabel(self, arg0: str):
        """public void javax.swing.AbstractButton.setLabel(java.lang.String)"""
        super(_AbstractButton, self).setLabel(arg0)

    @override
    @overload
    def countComponents(self) -> int:
        """public int java.awt.Container.countComponents()"""
        return int._wrap(super(Container, self).countComponents())

    @override
    @overload
    def isDefaultButton(self) -> bool:
        """public boolean javax.swing.JButton.isDefaultButton()"""
        return bool._wrap(super(JButton, self).isDefaultButton())

    @override
    @overload
    def removeVetoableChangeListener(self, arg0: 'VetoableChangeListener'):
        """public synchronized void javax.swing.JComponent.removeVetoableChangeListener(java.beans.VetoableChangeListener)"""
        super(_JComponent, self).removeVetoableChangeListener(arg0)

    @override
    @overload
    def getComponents(self) -> List['Component']:
        """public java.awt.Component[] java.awt.Container.getComponents()"""
        return List['Component']._wrap(super(Container, self).getComponents())

    @override
    @overload
    def setDebugGraphicsOptions(self, arg0: int):
        """public void javax.swing.JComponent.setDebugGraphicsOptions(int)"""
        super(_JComponent, self).setDebugGraphicsOptions(_int.valueOf(arg0))

    @override
    @overload
    def list(self, arg0: 'PrintStream', arg1: int):
        """public void java.awt.Container.list(java.io.PrintStream,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @override
    @overload
    def getFocusTraversalPolicy(self) -> 'FocusTraversalPolicy':
        """public java.awt.FocusTraversalPolicy java.awt.Container.getFocusTraversalPolicy()"""
        return 'FocusTraversalPolicy'._wrap(super(Container, self).getFocusTraversalPolicy())

    @override
    @overload
    def setHorizontalAlignment(self, arg0: int):
        """public void javax.swing.AbstractButton.setHorizontalAlignment(int)"""
        super(_AbstractButton, self).setHorizontalAlignment(_int.valueOf(arg0))

    @override
    @overload
    def setContentAreaFilled(self, arg0: bool):
        """public void javax.swing.AbstractButton.setContentAreaFilled(boolean)"""
        super(_AbstractButton, self).setContentAreaFilled(_boolean.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,float,float)"""
        super(_Component, self).firePropertyChange(arg0, _float.valueOf(arg1), _float.valueOf(arg2))

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object)"""
        super(_Container, self).add(arg0, arg1)

    @override
    @overload
    def nextFocus(self):
        """public void java.awt.Component.nextFocus()"""
        super(Component, self).nextFocus()

    @override
    @overload
    def doClick(self, arg0: int):
        """public void javax.swing.AbstractButton.doClick(int)"""
        super(_AbstractButton, self).doClick(_int.valueOf(arg0))

    @overload
    def mouseUp(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseUp(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseUp(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def doClick(self):
        """public void javax.swing.AbstractButton.doClick()"""
        super(AbstractButton, self).doClick()

    @override
    @overload
    def getLocation(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocation()"""
        return 'Point'._wrap(super(Component, self).getLocation())

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int._wrap(super(object, self).hashCode())

    @override
    @overload
    def setComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Component.setComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Component, self).setComponentOrientation(arg0)

    @override
    @overload
    def grabFocus(self):
        """public void javax.swing.JComponent.grabFocus()"""
        super(JComponent, self).grabFocus()

    @overload
    def keyDown(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyDown(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyDown(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,int,int)"""
        super(_JComponent, self).firePropertyChange(arg0, _int.valueOf(arg1), _int.valueOf(arg2))

    @override
    @overload
    def getLayout(self) -> 'LayoutManager':
        """public java.awt.LayoutManager java.awt.Container.getLayout()"""
        return 'LayoutManager'._wrap(super(Container, self).getLayout())

    @override
    @overload
    def setText(self, arg0: str):
        """public void javax.swing.AbstractButton.setText(java.lang.String)"""
        super(_AbstractButton, self).setText(arg0)

    @override
    @overload
    def setRolloverIcon(self, arg0: 'Icon'):
        """public void javax.swing.AbstractButton.setRolloverIcon(javax.swing.Icon)"""
        super(_AbstractButton, self).setRolloverIcon(arg0)

    @override
    @overload
    def addNotify(self):
        """public void javax.swing.JComponent.addNotify()"""
        super(JComponent, self).addNotify()

    @override
    @overload
    def setSize(self, arg0: int, arg1: int):
        """public void java.awt.Component.setSize(int,int)"""
        super(_Component, self).setSize(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.repaint(int,int,int,int)"""
        super(_Component, self).repaint(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @overload
    def keyUp(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyUp(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyUp(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def setBackground(self, arg0: 'Color'):
        """public void javax.swing.JComponent.setBackground(java.awt.Color)"""
        super(_JComponent, self).setBackground(arg0)

    @override
    @overload
    def doLayout(self):
        """public void java.awt.Container.doLayout()"""
        super(Container, self).doLayout()

    @override
    @overload
    def getInsets(self) -> 'Insets':
        """public java.awt.Insets javax.swing.JComponent.getInsets()"""
        return 'Insets'._wrap(super(JComponent, self).getInsets())

    @override
    @overload
    def setNextFocusableComponent(self, arg0: 'Component'):
        """public void javax.swing.JComponent.setNextFocusableComponent(java.awt.Component)"""
        super(_JComponent, self).setNextFocusableComponent(arg0)

    @override
    @overload
    def getAlignmentY(self) -> float:
        """public float javax.swing.JComponent.getAlignmentY()"""
        return float._wrap(super(JComponent, self).getAlignmentY())

    @override
    @overload
    def resetKeyboardActions(self):
        """public void javax.swing.JComponent.resetKeyboardActions()"""
        super(JComponent, self).resetKeyboardActions()

    @override
    @overload
    def addPropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Container.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Container, self).addPropertyChangeListener(arg0, arg1)

    @override
    @overload
    def applyComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Container.applyComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Container, self).applyComponentOrientation(arg0)

    @override
    @overload
    def setDefaultCapable(self, arg0: bool):
        """public void javax.swing.JButton.setDefaultCapable(boolean)"""
        super(_JButton, self).setDefaultCapable(_boolean.valueOf(arg0))

    @override
    @overload
    def removeMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.removeMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).removeMouseListener(arg0)

    @override
    @overload
    def getInputContext(self) -> 'InputContext':
        """public java.awt.im.InputContext java.awt.Component.getInputContext()"""
        return 'InputContext'._wrap(super(Component, self).getInputContext())

    @override
    @overload
    def getVerticalAlignment(self) -> int:
        """public int javax.swing.AbstractButton.getVerticalAlignment()"""
        return int._wrap(super(AbstractButton, self).getVerticalAlignment())

    @override
    @overload
    def getPressedIcon(self) -> 'Icon':
        """public javax.swing.Icon javax.swing.AbstractButton.getPressedIcon()"""
        return 'Icon'._wrap(super(AbstractButton, self).getPressedIcon())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,double,double)"""
        super(_Component, self).firePropertyChange(arg0, _double.valueOf(arg1), _double.valueOf(arg2))

    @override
    @overload
    def isSelected(self) -> bool:
        """public boolean javax.swing.AbstractButton.isSelected()"""
        return bool._wrap(super(AbstractButton, self).isSelected())

    @override
    @overload
    def removeAncestorListener(self, arg0: 'AncestorListener'):
        """public void javax.swing.JComponent.removeAncestorListener(javax.swing.event.AncestorListener)"""
        super(_JComponent, self).removeAncestorListener(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintWriter', arg1: int):
        """public void java.awt.Container.list(java.io.PrintWriter,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @overload
    def checkImage(self, arg0: 'Image', arg1: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, arg1))

    @override
    @overload
    def removeFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.removeFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).removeFocusListener(arg0)

    @overload
    def getConditionForKeyStroke(self, arg0: 'KeyStroke') -> int:
        """public int javax.swing.JComponent.getConditionForKeyStroke(javax.swing.KeyStroke)"""
        return int._wrap(super(_JComponent, self).getConditionForKeyStroke(arg0))

    @override
    @overload
    def getTreeLock(self) -> object:
        """public final java.lang.Object java.awt.Component.getTreeLock()"""
        return object._wrap(super(Component, self).getTreeLock())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def removeContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.removeContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).removeContainerListener(arg0)

    @override
    @overload
    def getGraphicsConfiguration(self) -> 'GraphicsConfiguration':
        """public java.awt.GraphicsConfiguration java.awt.Component.getGraphicsConfiguration()"""
        return 'GraphicsConfiguration'._wrap(super(Component, self).getGraphicsConfiguration())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: bool, arg2: bool):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,boolean,boolean)"""
        super(_JComponent, self).firePropertyChange(arg0, _boolean.valueOf(arg1), _boolean.valueOf(arg2))

    @override
    @overload
    def isRolloverEnabled(self) -> bool:
        """public boolean javax.swing.AbstractButton.isRolloverEnabled()"""
        return bool._wrap(super(AbstractButton, self).isRolloverEnabled())

    @override
    @overload
    def registerKeyboardAction(self, arg0: 'ActionListener', arg1: str, arg2: 'KeyStroke', arg3: int):
        """public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,java.lang.String,javax.swing.KeyStroke,int)"""
        super(_JComponent, self).registerKeyboardAction(arg0, arg1, arg2, _int.valueOf(arg3))

    @overload
    def findComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(arg0))

    @override
    @overload
    def resize(self, arg0: int, arg1: int):
        """public void java.awt.Component.resize(int,int)"""
        super(_Component, self).resize(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getHeight(self) -> int:
        """public int javax.swing.JComponent.getHeight()"""
        return int._wrap(super(JComponent, self).getHeight())

    @override
    @overload
    def getTransferHandler(self) -> 'TransferHandler':
        """public javax.swing.TransferHandler javax.swing.JComponent.getTransferHandler()"""
        return 'TransferHandler'._wrap(super(JComponent, self).getTransferHandler())

    @override
    @overload
    def transferFocusBackward(self):
        """public void java.awt.Component.transferFocusBackward()"""
        super(Component, self).transferFocusBackward()

    @overload
    def getPropertyChangeListeners(self, arg0: str) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners(java.lang.String)"""
        return List['PropertyChangeListener']._wrap(super(_Component, self).getPropertyChangeListeners(arg0))

    @staticmethod
    @overload
    def isLightweightComponent(arg0: 'Component') -> bool:
        """public static boolean javax.swing.JComponent.isLightweightComponent(java.awt.Component)"""
        return bool._wrap(_JComponent.isLightweightComponent(arg0))

    @override
    @overload
    def setAction(self, arg0: 'Action'):
        """public void javax.swing.AbstractButton.setAction(javax.swing.Action)"""
        super(_AbstractButton, self).setAction(arg0)

    @override
    @overload
    def printAll(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.printAll(java.awt.Graphics)"""
        super(_JComponent, self).printAll(arg0)

    @override
    @overload
    def print(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.print(java.awt.Graphics)"""
        super(_JComponent, self).print(arg0)

    @override
    @overload
    def setInputVerifier(self, arg0: 'InputVerifier'):
        """public void javax.swing.JComponent.setInputVerifier(javax.swing.InputVerifier)"""
        super(_JComponent, self).setInputVerifier(arg0)

    @override
    @overload
    def getFont(self) -> 'Font':
        """public java.awt.Font java.awt.Component.getFont()"""
        return 'Font'._wrap(super(Component, self).getFont())

    @override
    @overload
    def setFont(self, arg0: 'Font'):
        """public void javax.swing.JComponent.setFont(java.awt.Font)"""
        super(_JComponent, self).setFont(arg0)

    @override
    @overload
    def isOptimizedDrawingEnabled(self) -> bool:
        """public boolean javax.swing.JComponent.isOptimizedDrawingEnabled()"""
        return bool._wrap(super(JComponent, self).isOptimizedDrawingEnabled())

    @override
    @overload
    def setMnemonic(self, arg0: str):
        """public void javax.swing.AbstractButton.setMnemonic(char)"""
        super(_AbstractButton, self).setMnemonic(_char.valueOf(arg0))

    @override
    @overload
    def isValidateRoot(self) -> bool:
        """public boolean javax.swing.JComponent.isValidateRoot()"""
        return bool._wrap(super(JComponent, self).isValidateRoot())

    @override
    @overload
    def setForeground(self, arg0: 'Color'):
        """public void javax.swing.JComponent.setForeground(java.awt.Color)"""
        super(_JComponent, self).setForeground(arg0)

    @overload
    def createVolatileImage(self, arg0: int, arg1: int, arg2: 'ImageCapabilities') -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int,java.awt.ImageCapabilities) throws java.awt.AWTException"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1), arg2))

    @override
    @overload
    def bounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.bounds()"""
        return 'Rectangle'._wrap(super(Component, self).bounds())

    @override
    @overload
    def getSelectedIcon(self) -> 'Icon':
        """public javax.swing.Icon javax.swing.AbstractButton.getSelectedIcon()"""
        return 'Icon'._wrap(super(AbstractButton, self).getSelectedIcon())

    @override
    @overload
    def add(self, arg0: 'PopupMenu'):
        """public void java.awt.Component.add(java.awt.PopupMenu)"""
        super(_Component, self).add(arg0)

    @override
    @overload
    def isVisible(self) -> bool:
        """public boolean java.awt.Component.isVisible()"""
        return bool._wrap(super(Component, self).isVisible())

    @override
    @overload
    def setDropTarget(self, arg0: 'DropTarget'):
        """public synchronized void java.awt.Component.setDropTarget(java.awt.dnd.DropTarget)"""
        super(_Component, self).setDropTarget(arg0)

    @override
    @overload
    def getY(self) -> int:
        """public int javax.swing.JComponent.getY()"""
        return int._wrap(super(JComponent, self).getY())

    @override
    @overload
    def isFocusable(self) -> bool:
        """public boolean java.awt.Component.isFocusable()"""
        return bool._wrap(super(Component, self).isFocusable())

    @override
    @overload
    def getDisabledSelectedIcon(self) -> 'Icon':
        """public javax.swing.Icon javax.swing.AbstractButton.getDisabledSelectedIcon()"""
        return 'Icon'._wrap(super(AbstractButton, self).getDisabledSelectedIcon())

    @override
    @overload
    def transferFocusUpCycle(self):
        """public void java.awt.Component.transferFocusUpCycle()"""
        super(Component, self).transferFocusUpCycle()

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: str, arg2: str):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,char,char)"""
        super(_JComponent, self).firePropertyChange(arg0, _char.valueOf(arg1), _char.valueOf(arg2))

    @override
    @overload
    def getAutoscrolls(self) -> bool:
        """public boolean javax.swing.JComponent.getAutoscrolls()"""
        return bool._wrap(super(JComponent, self).getAutoscrolls())

    @override
    @overload
    def setModel(self, arg0: 'ButtonModel'):
        """public void javax.swing.AbstractButton.setModel(javax.swing.ButtonModel)"""
        super(_AbstractButton, self).setModel(arg0)

    @override
    @overload
    def setHideActionText(self, arg0: bool):
        """public void javax.swing.AbstractButton.setHideActionText(boolean)"""
        super(_AbstractButton, self).setHideActionText(_boolean.valueOf(arg0))

    @override
    @overload
    def setIconTextGap(self, arg0: int):
        """public void javax.swing.AbstractButton.setIconTextGap(int)"""
        super(_AbstractButton, self).setIconTextGap(_int.valueOf(arg0))

    @override
    @overload
    def setToolTipText(self, arg0: str):
        """public void javax.swing.JComponent.setToolTipText(java.lang.String)"""
        super(_JComponent, self).setToolTipText(arg0)

    @override
    @overload
    def setMixingCutoutShape(self, arg0: 'Shape'):
        """public void java.awt.Component.setMixingCutoutShape(java.awt.Shape)"""
        super(_Component, self).setMixingCutoutShape(arg0)

    @override
    @overload
    def requestFocus(self, arg0: 'Cause'):
        """public void java.awt.Component.requestFocus(java.awt.event.FocusEvent$Cause)"""
        super(_Component, self).requestFocus(arg0)

    @override
    @overload
    def putClientProperty(self, arg0: object, arg1: object):
        """public final void javax.swing.JComponent.putClientProperty(java.lang.Object,java.lang.Object)"""
        super(_JComponent, self).putClientProperty(arg0, arg1)

    @override
    @overload
    def getVetoableChangeListeners(self) -> List['VetoableChangeListener']:
        """public synchronized java.beans.VetoableChangeListener[] javax.swing.JComponent.getVetoableChangeListeners()"""
        return List['VetoableChangeListener']._wrap(super(JComponent, self).getVetoableChangeListeners())

    @overload
    def __init__(self, arg0: 'FlameMain'):
        """public com.badlogic.gdx.tools.flame.LoaderButton$ModelLoaderButton(com.badlogic.gdx.tools.flame.FlameMain)"""
        val = _ModelLoaderButton(arg0)
        self.__wrapper = val

    @override
    @overload
    def getTopLevelAncestor(self) -> 'Container':
        """public java.awt.Container javax.swing.JComponent.getTopLevelAncestor()"""
        return 'Container'._wrap(super(JComponent, self).getTopLevelAncestor())

    @override
    @overload
    def isRequestFocusEnabled(self) -> bool:
        """public boolean javax.swing.JComponent.isRequestFocusEnabled()"""
        return bool._wrap(super(JComponent, self).isRequestFocusEnabled())

    @override
    @overload
    def getFocusListeners(self) -> List['FocusListener']:
        """public synchronized java.awt.event.FocusListener[] java.awt.Component.getFocusListeners()"""
        return List['FocusListener']._wrap(super(Component, self).getFocusListeners())

    @overload
    def add(self, arg0: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0))

    @override
    @overload
    def setLocation(self, arg0: int, arg1: int):
        """public void java.awt.Component.setLocation(int,int)"""
        super(_Component, self).setLocation(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def removeInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.removeInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).removeInputMethodListener(arg0)

    @override
    @overload
    def setFocusable(self, arg0: bool):
        """public void java.awt.Component.setFocusable(boolean)"""
        super(_Component, self).setFocusable(_boolean.valueOf(arg0))

    @override
    @overload
    def paintComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.paintComponents(java.awt.Graphics)"""
        super(_Container, self).paintComponents(arg0)

    @overload
    def prepareImage(self, arg0: 'Image', arg1: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, arg1))

    @overload
    def add(self, arg0: str, arg1: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.lang.String,java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, arg1))

    @override
    @overload
    def paintImmediately(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void javax.swing.JComponent.paintImmediately(int,int,int,int)"""
        super(_JComponent, self).paintImmediately(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def getMinimumSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getMinimumSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getMinimumSize())

    @overload
    def createVolatileImage(self, arg0: int, arg1: int) -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int)"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.removeHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).removeHierarchyListener(arg0)

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.awt.Component.toString()"""
        return str._wrap(super(Component, self).toString())

    @override
    @overload
    def isFocusOwner(self) -> bool:
        """public boolean java.awt.Component.isFocusOwner()"""
        return bool._wrap(super(Component, self).isFocusOwner())

    @override
    @overload
    def getUIClassID(self) -> str:
        """public java.lang.String javax.swing.JButton.getUIClassID()"""
        return str._wrap(super(JButton, self).getUIClassID())

    @override
    @overload
    def isDefaultCapable(self) -> bool:
        """public boolean javax.swing.JButton.isDefaultCapable()"""
        return bool._wrap(super(JButton, self).isDefaultCapable())

    @override
    @overload
    def getHorizontalTextPosition(self) -> int:
        """public int javax.swing.AbstractButton.getHorizontalTextPosition()"""
        return int._wrap(super(AbstractButton, self).getHorizontalTextPosition())

    @override
    @overload
    def setIcon(self, arg0: 'Icon'):
        """public void javax.swing.AbstractButton.setIcon(javax.swing.Icon)"""
        super(_AbstractButton, self).setIcon(arg0)

    @override
    @overload
    def isFocusCycleRoot(self) -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot()"""
        return bool._wrap(super(Container, self).isFocusCycleRoot())

    @override
    @overload
    def hide(self):
        """public void javax.swing.JComponent.hide()"""
        super(JComponent, self).hide()

    @override
    @overload
    def revalidate(self):
        """public void javax.swing.JComponent.revalidate()"""
        super(JComponent, self).revalidate()

    @override
    @overload
    def getActionMap(self) -> 'ActionMap':
        """public final javax.swing.ActionMap javax.swing.JComponent.getActionMap()"""
        return 'ActionMap'._wrap(super(JComponent, self).getActionMap())

    @override
    @overload
    def requestFocusInWindow(self) -> bool:
        """public boolean javax.swing.JComponent.requestFocusInWindow()"""
        return bool._wrap(super(JComponent, self).requestFocusInWindow())

    @overload
    def action(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.action(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).action(arg0, arg1))

    @override
    @overload
    def isManagingFocus(self) -> bool:
        """public boolean javax.swing.JComponent.isManagingFocus()"""
        return bool._wrap(super(JComponent, self).isManagingFocus())

    @overload
    def getFocusTraversalKeys(self, arg0: int) -> 'Set':
        """public java.util.Set<java.awt.AWTKeyStroke> java.awt.Container.getFocusTraversalKeys(int)"""
        return 'Set'._wrap(super(_Container, self).getFocusTraversalKeys(_int.valueOf(arg0)))

    @override
    @overload
    def remove(self, arg0: 'Component'):
        """public void java.awt.Container.remove(java.awt.Component)"""
        super(_Container, self).remove(arg0)

    @override
    @overload
    def isContentAreaFilled(self) -> bool:
        """public boolean javax.swing.AbstractButton.isContentAreaFilled()"""
        return bool._wrap(super(AbstractButton, self).isContentAreaFilled())

    @override
    @overload
    def insets(self) -> 'Insets':
        """public java.awt.Insets java.awt.Container.insets()"""
        return 'Insets'._wrap(super(Container, self).insets())

    @override
    @overload
    def setFocusTraversalPolicy(self, arg0: 'FocusTraversalPolicy'):
        """public void java.awt.Container.setFocusTraversalPolicy(java.awt.FocusTraversalPolicy)"""
        super(_Container, self).setFocusTraversalPolicy(arg0)

    @overload
    def getSize(self, arg0: 'Dimension') -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getSize(java.awt.Dimension)"""
        return 'Dimension'._wrap(super(_JComponent, self).getSize(arg0))

    @override
    @overload
    def enable(self, arg0: bool):
        """public void java.awt.Component.enable(boolean)"""
        super(_Component, self).enable(_boolean.valueOf(arg0))

    @override
    @overload
    def addPropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Container.addPropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Container, self).addPropertyChangeListener(arg0)

    @overload
    def getComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(arg0))

    @override
    @overload
    def size(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.size()"""
        return 'Dimension'._wrap(super(Component, self).size())

    @overload
    def getActionForKeyStroke(self, arg0: 'KeyStroke') -> 'ActionListener':
        """public java.awt.event.ActionListener javax.swing.JComponent.getActionForKeyStroke(javax.swing.KeyStroke)"""
        return 'ActionListener'._wrap(super(_JComponent, self).getActionForKeyStroke(arg0))

    @overload
    def lostFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.lostFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).lostFocus(arg0, arg1))

    @override
    @overload
    def setDisplayedMnemonicIndex(self, arg0: int):
        """public void javax.swing.AbstractButton.setDisplayedMnemonicIndex(int) throws java.lang.IllegalArgumentException"""
        super(_AbstractButton, self).setDisplayedMnemonicIndex(_int.valueOf(arg0))

    @override
    @overload
    def isMinimumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMinimumSizeSet()"""
        return bool._wrap(super(Component, self).isMinimumSizeSet())

    @override
    @overload
    def isForegroundSet(self) -> bool:
        """public boolean java.awt.Component.isForegroundSet()"""
        return bool._wrap(super(Component, self).isForegroundSet())

    @overload
    def getMousePosition(self, arg0: bool) -> 'Point':
        """public java.awt.Point java.awt.Container.getMousePosition(boolean) throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(_Container, self).getMousePosition(_boolean.valueOf(arg0)))

    @overload
    def getFontMetrics(self, arg0: 'Font') -> 'FontMetrics':
        """public java.awt.FontMetrics javax.swing.JComponent.getFontMetrics(java.awt.Font)"""
        return 'FontMetrics'._wrap(super(_JComponent, self).getFontMetrics(arg0))

    @override
    @overload
    def getHierarchyBoundsListeners(self) -> List['HierarchyBoundsListener']:
        """public synchronized java.awt.event.HierarchyBoundsListener[] java.awt.Component.getHierarchyBoundsListeners()"""
        return List['HierarchyBoundsListener']._wrap(super(Component, self).getHierarchyBoundsListeners())

    @override
    @overload
    def getModel(self) -> 'ButtonModel':
        """public javax.swing.ButtonModel javax.swing.AbstractButton.getModel()"""
        return 'ButtonModel'._wrap(super(AbstractButton, self).getModel())

    @override
    @overload
    def minimumSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.minimumSize()"""
        return 'Dimension'._wrap(super(Container, self).minimumSize())

    @override
    @overload
    def getUI(self) -> 'ButtonUI':
        """public javax.swing.plaf.ButtonUI javax.swing.AbstractButton.getUI()"""
        return 'ButtonUI'._wrap(super(AbstractButton, self).getUI())

    @overload
    def handleEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.handleEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).handleEvent(arg0))

    @override
    @overload
    def setMnemonic(self, arg0: int):
        """public void javax.swing.AbstractButton.setMnemonic(int)"""
        super(_AbstractButton, self).setMnemonic(_int.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @override
    @overload
    def getComponentListeners(self) -> List['ComponentListener']:
        """public synchronized java.awt.event.ComponentListener[] java.awt.Component.getComponentListeners()"""
        return List['ComponentListener']._wrap(super(Component, self).getComponentListeners())

    @override
    @overload
    def computeVisibleRect(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.computeVisibleRect(java.awt.Rectangle)"""
        super(_JComponent, self).computeVisibleRect(arg0)

    @override
    @overload
    def deliverEvent(self, arg0: 'Event'):
        """public void java.awt.Container.deliverEvent(java.awt.Event)"""
        super(_Container, self).deliverEvent(arg0)

    @override
    @overload
    def getAlignmentX(self) -> float:
        """public float javax.swing.JComponent.getAlignmentX()"""
        return float._wrap(super(JComponent, self).getAlignmentX())

    @overload
    def gotFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.gotFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).gotFocus(arg0, arg1))

    @override
    @overload
    def printComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.printComponents(java.awt.Graphics)"""
        super(_Container, self).printComponents(arg0)

    @override
    @overload
    def getColorModel(self) -> 'ColorModel':
        """public java.awt.image.ColorModel java.awt.Component.getColorModel()"""
        return 'ColorModel'._wrap(super(Component, self).getColorModel())

    @override
    @overload
    def getDebugGraphicsOptions(self) -> int:
        """public int javax.swing.JComponent.getDebugGraphicsOptions()"""
        return int._wrap(super(JComponent, self).getDebugGraphicsOptions())

    @overload
    def areFocusTraversalKeysSet(self, arg0: int) -> bool:
        """public boolean java.awt.Container.areFocusTraversalKeysSet(int)"""
        return bool._wrap(super(_Container, self).areFocusTraversalKeysSet(_int.valueOf(arg0)))

    @override
    @overload
    def repaint(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.repaint(java.awt.Rectangle)"""
        super(_JComponent, self).repaint(arg0)

    @overload
    def getClientProperty(self, arg0: object) -> object:
        """public final java.lang.Object javax.swing.JComponent.getClientProperty(java.lang.Object)"""
        return object._wrap(super(_JComponent, self).getClientProperty(arg0))

    @override
    @overload
    def getX(self) -> int:
        """public int javax.swing.JComponent.getX()"""
        return int._wrap(super(JComponent, self).getX())

    @override
    @overload
    def getToolkit(self) -> 'Toolkit':
        """public java.awt.Toolkit java.awt.Component.getToolkit()"""
        return 'Toolkit'._wrap(super(Component, self).getToolkit())

    @override
    @overload
    def isCursorSet(self) -> bool:
        """public boolean java.awt.Component.isCursorSet()"""
        return bool._wrap(super(Component, self).isCursorSet())

    @override
    @overload
    def setPreferredSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setPreferredSize(java.awt.Dimension)"""
        super(_JComponent, self).setPreferredSize(arg0)

    @override
    @overload
    def setBounds(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.setBounds(int,int,int,int)"""
        super(_Component, self).setBounds(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def requestFocus(self):
        """public void javax.swing.JComponent.requestFocus()"""
        super(JComponent, self).requestFocus()

    @override
    @overload
    def getText(self) -> str:
        """public java.lang.String javax.swing.AbstractButton.getText()"""
        return str._wrap(super(AbstractButton, self).getText())

    @override
    @overload
    def isEnabled(self) -> bool:
        """public boolean java.awt.Component.isEnabled()"""
        return bool._wrap(super(Component, self).isEnabled())

    @override
    @overload
    def move(self, arg0: int, arg1: int):
        """public void java.awt.Component.move(int,int)"""
        super(_Component, self).move(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def addActionListener(self, arg0: 'ActionListener'):
        """public void javax.swing.AbstractButton.addActionListener(java.awt.event.ActionListener)"""
        super(_AbstractButton, self).addActionListener(arg0)

    @override
    @overload
    def getAccessibleContext(self) -> 'AccessibleContext':
        """public javax.accessibility.AccessibleContext javax.swing.JButton.getAccessibleContext()"""
        return 'AccessibleContext'._wrap(super(JButton, self).getAccessibleContext())

    @overload
    def isFocusCycleRoot(self, arg0: 'Container') -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot(java.awt.Container)"""
        return bool._wrap(super(_Container, self).isFocusCycleRoot(arg0))

    @override
    @overload
    def setLocale(self, arg0: 'Locale'):
        """public void java.awt.Component.setLocale(java.util.Locale)"""
        super(_Component, self).setLocale(arg0)

    @override
    @overload
    def paintAll(self, arg0: 'Graphics'):
        """public void java.awt.Component.paintAll(java.awt.Graphics)"""
        super(_Component, self).paintAll(arg0)

    @override
    @overload
    def removeMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.removeMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).removeMouseWheelListener(arg0)

    @override
    @overload
    def transferFocusDownCycle(self):
        """public void java.awt.Container.transferFocusDownCycle()"""
        super(Container, self).transferFocusDownCycle()

    @override
    @overload
    def getNextFocusableComponent(self) -> 'Component':
        """public java.awt.Component javax.swing.JComponent.getNextFocusableComponent()"""
        return 'Component'._wrap(super(JComponent, self).getNextFocusableComponent())

    @override
    @overload
    def removeChangeListener(self, arg0: 'ChangeListener'):
        """public void javax.swing.AbstractButton.removeChangeListener(javax.swing.event.ChangeListener)"""
        super(_AbstractButton, self).removeChangeListener(arg0)

    @override
    @overload
    def repaint(self, arg0: int):
        """public void java.awt.Component.repaint(long)"""
        super(_Component, self).repaint(_long.valueOf(arg0))

    @override
    @overload
    def removeHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.removeHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).removeHierarchyBoundsListener(arg0)

    @override
    @overload
    def getComponentPopupMenu(self) -> 'JPopupMenu':
        """public javax.swing.JPopupMenu javax.swing.JComponent.getComponentPopupMenu()"""
        return 'JPopupMenu'._wrap(super(JComponent, self).getComponentPopupMenu())

    @override
    @overload
    def getMousePosition(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getMousePosition() throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(Component, self).getMousePosition())

    @override
    @overload
    def getComponentCount(self) -> int:
        """public int java.awt.Container.getComponentCount()"""
        return int._wrap(super(Container, self).getComponentCount())

    @override
    @overload
    def setMaximumSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setMaximumSize(java.awt.Dimension)"""
        super(_JComponent, self).setMaximumSize(arg0)

    @override
    @overload
    def addItemListener(self, arg0: 'ItemListener'):
        """public void javax.swing.AbstractButton.addItemListener(java.awt.event.ItemListener)"""
        super(_AbstractButton, self).addItemListener(arg0)

    @override
    @overload
    def disable(self):
        """public void javax.swing.JComponent.disable()"""
        super(JComponent, self).disable()

    @override
    @overload
    def enableInputMethods(self, arg0: bool):
        """public void java.awt.Component.enableInputMethods(boolean)"""
        super(_Component, self).enableInputMethods(_boolean.valueOf(arg0))

    @override
    @overload
    def getCursor(self) -> 'Cursor':
        """public java.awt.Cursor java.awt.Component.getCursor()"""
        return 'Cursor'._wrap(super(Component, self).getCursor())

    @override
    @overload
    def getContainerListeners(self) -> List['ContainerListener']:
        """public synchronized java.awt.event.ContainerListener[] java.awt.Container.getContainerListeners()"""
        return List['ContainerListener']._wrap(super(Container, self).getContainerListeners())

    @override
    @overload
    def removeAll(self):
        """public void java.awt.Container.removeAll()"""
        super(Container, self).removeAll()

    @override
    @overload
    def setOpaque(self, arg0: bool):
        """public void javax.swing.JComponent.setOpaque(boolean)"""
        super(_JComponent, self).setOpaque(_boolean.valueOf(arg0))

    @override
    @overload
    def setCursor(self, arg0: 'Cursor'):
        """public void java.awt.Component.setCursor(java.awt.Cursor)"""
        super(_Component, self).setCursor(arg0)

    @override
    @overload
    def getBackground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getBackground()"""
        return 'Color'._wrap(super(Component, self).getBackground())

    @overload
    def createImage(self, arg0: 'ImageProducer') -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(java.awt.image.ImageProducer)"""
        return 'Image'._wrap(super(_Component, self).createImage(arg0))

    @override
    @overload
    def setVerifyInputWhenFocusTarget(self, arg0: bool):
        """public void javax.swing.JComponent.setVerifyInputWhenFocusTarget(boolean)"""
        super(_JComponent, self).setVerifyInputWhenFocusTarget(_boolean.valueOf(arg0))

    @override
    @overload
    def removePropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0, arg1) 
 
 
# CLASS: com.badlogic.gdx.tools.flame.LoaderButton
import javax.swing.Action as _Action
_Action = _Action
import javax.accessibility.AccessibleContext as AccessibleContext
import javax.swing.JToolTip as JToolTip
import java.awt.event.HierarchyBoundsListener as HierarchyBoundsListener
import java.awt.event.ActionListener as _ActionListener
_ActionListener = _ActionListener
import java.awt.ComponentOrientation as _ComponentOrientation
_ComponentOrientation = _ComponentOrientation
import java.awt.image.ImageProducer as ImageProducer
import java.awt.GraphicsConfiguration as GraphicsConfiguration
import java.awt.Graphics as _Graphics
_Graphics = _Graphics
import javax.swing.JToolTip as _JToolTip
_JToolTip = _JToolTip
import java.awt.Container as _Container
_Container = _Container
import java.awt.MenuComponent as MenuComponent
import java.awt.im.InputMethodRequests as _InputMethodRequests
_InputMethodRequests = _InputMethodRequests
import java.awt.FocusTraversalPolicy as _FocusTraversalPolicy
_FocusTraversalPolicy = _FocusTraversalPolicy
import java.lang.Byte as _byte
import java.awt.Dimension as Dimension
import java.awt.Font as _Font
_Font = _Font
import java.awt.event.ContainerListener as ContainerListener
import javax.swing.event.AncestorListener as AncestorListener
import java.awt.AWTEvent as AWTEvent
import java.awt.image.ColorModel as _ColorModel
_ColorModel = _ColorModel
import java.lang.Object as _object
import java.awt.ComponentOrientation as ComponentOrientation
import java.awt.im.InputContext as _InputContext
_InputContext = _InputContext
from builtins import float
import java.awt.event.HierarchyListener as HierarchyListener
import com.badlogic.gdx.tools.flame.LoaderButton as _LoaderButton
_LoaderButton = _LoaderButton
import java.awt.event.InputMethodListener as InputMethodListener
from typing import List
import javax.swing.event.ChangeListener as ChangeListener
import java.awt.event.MouseWheelListener as _MouseWheelListener
_MouseWheelListener = _MouseWheelListener
import javax.swing.JButton as _JButton
_JButton = _JButton
import java.awt.event.KeyListener as KeyListener
import java.awt.Component as Component
from builtins import int
import java.awt.LayoutManager as LayoutManager
import java.awt.FontMetrics as _FontMetrics
_FontMetrics = _FontMetrics
import java.awt.Container as Container
from builtins import type
import java.awt.image.VolatileImage as _VolatileImage
_VolatileImage = _VolatileImage
import java.awt.Shape as Shape
import java.awt.Rectangle as Rectangle
import java.awt.event.ContainerListener as _ContainerListener
_ContainerListener = _ContainerListener
import java.awt.event.HierarchyListener as _HierarchyListener
_HierarchyListener = _HierarchyListener
import java.lang.String as _string
import javax.swing.InputVerifier as _InputVerifier
_InputVerifier = _InputVerifier
import java.awt.Insets as _Insets
_Insets = _Insets
import javax.swing.Icon as Icon
import javax.swing.event.ChangeListener as _ChangeListener
_ChangeListener = _ChangeListener
import javax.swing.border.Border as _Border
_Border = _Border
import java.awt.event.ComponentListener as _ComponentListener
_ComponentListener = _ComponentListener
import javax.swing.ActionMap as ActionMap
import java.beans.VetoableChangeListener as VetoableChangeListener
import javax.swing.Icon as _Icon
_Icon = _Icon
import java.awt.event.ComponentListener as ComponentListener
import javax.swing.KeyStroke as KeyStroke
import java.beans.VetoableChangeListener as _VetoableChangeListener
_VetoableChangeListener = _VetoableChangeListener
from builtins import object
import java.awt.event.KeyListener as _KeyListener
_KeyListener = _KeyListener
import java.awt.Component.BaselineResizeBehavior as BaselineResizeBehavior
import java.awt.Component as _Component_BaselineResizeBehavior
_BaselineResizeBehavior = _Component_BaselineResizeBehavior.BaselineResizeBehavior
import javax.swing.plaf.ButtonUI as _ButtonUI
_ButtonUI = _ButtonUI
import javax.swing.ButtonModel as _ButtonModel
_ButtonModel = _ButtonModel
import java.awt.Cursor as _Cursor
_Cursor = _Cursor
import java.awt.im.InputMethodRequests as InputMethodRequests
import java.lang.Long as _long
import java.awt.event.FocusListener as _FocusListener
_FocusListener = _FocusListener
import java.lang.Character as _char
import javax.swing.TransferHandler as TransferHandler
import java.awt.event.ItemListener as ItemListener
import java.awt.event.FocusEvent.Cause as Cause
import javax.accessibility.AccessibleContext as _AccessibleContext
_AccessibleContext = _AccessibleContext
import java.awt.event.MouseWheelListener as MouseWheelListener
import java.util.Set as _Set
_Set = _Set
import java.awt.image.ColorModel as ColorModel
import java.lang.Boolean as _boolean
import java.awt.event.MouseMotionListener as MouseMotionListener
import java.util.EventListener as EventListener
import java.awt.Insets as Insets
import javax.swing.Action as Action
import javax.swing.KeyStroke as _KeyStroke
_KeyStroke = _KeyStroke
import java.awt.GraphicsConfiguration as _GraphicsConfiguration
_GraphicsConfiguration = _GraphicsConfiguration
import java.awt.dnd.DropTarget as _DropTarget
_DropTarget = _DropTarget
from builtins import bool
import java.beans.PropertyChangeListener as _PropertyChangeListener
_PropertyChangeListener = _PropertyChangeListener
import java.awt.LayoutManager as _LayoutManager
_LayoutManager = _LayoutManager
import java.awt.PopupMenu as PopupMenu
import java.util.EventListener as _EventListener
_EventListener = _EventListener
import java.awt.im.InputContext as InputContext
import java.awt.event.ItemListener as _ItemListener
_ItemListener = _ItemListener
import java.awt.Component as _Component
_Component = _Component
import java.awt.Font as Font
import java.awt.image.VolatileImage as VolatileImage
import javax.swing.plaf.ButtonUI as ButtonUI
import java.awt.dnd.DropTarget as DropTarget
import java.lang.String as _String
_String = _String
import java.lang.Float as _float
import java.awt.Cursor as Cursor
import java.awt.event.MouseListener as _MouseListener
_MouseListener = _MouseListener
import java.awt.Toolkit as _Toolkit
_Toolkit = _Toolkit
import java.io.PrintStream as PrintStream
import javax.swing.JRootPane as _JRootPane
_JRootPane = _JRootPane
import java.awt.event.ActionListener as ActionListener
import java.awt.Dimension as _Dimension
_Dimension = _Dimension
import java.awt.event.MouseEvent as MouseEvent
import java.awt.Color as _Color
_Color = _Color
import javax.swing.JPopupMenu as _JPopupMenu
_JPopupMenu = _JPopupMenu
import javax.swing.InputMap as _InputMap
_InputMap = _InputMap
import java.awt.event.MouseListener as MouseListener
import java.lang.Class as _Class
_Class = _Class
import java.util.Locale as Locale
import java.lang.Double as _double
import java.lang.Object as _Object
_Object = _Object
import java.awt.Point as _Point
_Point = _Point
import java.beans.PropertyChangeListener as PropertyChangeListener
import javax.swing.border.Border as Border
import javax.swing.ButtonModel as ButtonModel
import javax.swing.JComponent as _JComponent
_JComponent = _JComponent
import javax.swing.InputVerifier as InputVerifier
import java.io.PrintWriter as PrintWriter
import java.awt.Point as Point
import javax.swing.event.AncestorListener as _AncestorListener
_AncestorListener = _AncestorListener
import java.lang.Short as _short
import java.awt.Toolkit as Toolkit
import java.awt.event.HierarchyBoundsListener as _HierarchyBoundsListener
_HierarchyBoundsListener = _HierarchyBoundsListener
import javax.swing.TransferHandler as _TransferHandler
_TransferHandler = _TransferHandler
import javax.swing.InputMap as InputMap
import java.awt.Rectangle as _Rectangle
_Rectangle = _Rectangle
import javax.swing.JRootPane as JRootPane
import java.awt.Event as Event
import java.awt.event.FocusListener as FocusListener
import java.awt.image.ImageObserver as ImageObserver
from builtins import str
from pyquantum_helper import override
import javax.swing.ActionMap as _ActionMap
_ActionMap = _ActionMap
import java.awt.FocusTraversalPolicy as FocusTraversalPolicy
import java.awt.event.MouseMotionListener as _MouseMotionListener
_MouseMotionListener = _MouseMotionListener
import java.awt.event.InputMethodListener as _InputMethodListener
_InputMethodListener = _InputMethodListener
import javax.swing.AbstractButton as _AbstractButton
_AbstractButton = _AbstractButton
import javax.swing.JPopupMenu as JPopupMenu
import java.util.Set as Set
import java.lang.Integer as _int
import java.awt.Image as _Image
_Image = _Image
import java.awt.FontMetrics as FontMetrics
import java.awt.Color as Color
import java.awt.Image as Image
import java.awt.Graphics as Graphics
import java.awt.ImageCapabilities as ImageCapabilities
import java.util.Locale as _Locale
_Locale = _Locale
 
class LoaderButton():
    """com.badlogic.gdx.tools.flame.LoaderButton"""
 
    @staticmethod
    def _wrap(java_value: _LoaderButton) -> 'LoaderButton':
        return LoaderButton(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _LoaderButton):
        """
        Dynamic initializer for LoaderButton.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_LoaderButton__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_LoaderButton__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def isValid(self) -> bool:
        """public boolean java.awt.Component.isValid()"""
        return bool._wrap(super(Component, self).isValid())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def getDefaultLocale() -> 'Locale':
        """public static java.util.Locale javax.swing.JComponent.getDefaultLocale()"""
        return Locale._wrap(_JComponent.getDefaultLocale())

    @override
    @overload
    def getInputVerifier(self) -> 'InputVerifier':
        """public javax.swing.InputVerifier javax.swing.JComponent.getInputVerifier()"""
        return 'InputVerifier'._wrap(super(JComponent, self).getInputVerifier())

    @override
    @overload
    def getParent(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getParent()"""
        return 'Container'._wrap(super(Component, self).getParent())

    @override
    @overload
    def paintImmediately(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.paintImmediately(java.awt.Rectangle)"""
        super(_JComponent, self).paintImmediately(arg0)

    @staticmethod
    @overload
    def setDefaultLocale(arg0: 'Locale'):
        """public static void javax.swing.JComponent.setDefaultLocale(java.util.Locale)"""
        _JComponent.setDefaultLocale(arg0)

    @override
    @overload
    def getLocale(self) -> 'Locale':
        """public java.util.Locale java.awt.Component.getLocale()"""
        return 'Locale'._wrap(super(Component, self).getLocale())

    @override
    @overload
    def setInheritsPopupMenu(self, arg0: bool):
        """public void javax.swing.JComponent.setInheritsPopupMenu(boolean)"""
        super(_JComponent, self).setInheritsPopupMenu(_boolean.valueOf(arg0))

    @override
    @overload
    def getHierarchyListeners(self) -> List['HierarchyListener']:
        """public synchronized java.awt.event.HierarchyListener[] java.awt.Component.getHierarchyListeners()"""
        return List['HierarchyListener']._wrap(super(Component, self).getHierarchyListeners())

    @override
    @overload
    def isPaintingTile(self) -> bool:
        """public boolean javax.swing.JComponent.isPaintingTile()"""
        return bool._wrap(super(JComponent, self).isPaintingTile())

    @override
    @overload
    def isDisplayable(self) -> bool:
        """public boolean java.awt.Component.isDisplayable()"""
        return bool._wrap(super(Component, self).isDisplayable())

    @override
    @overload
    def getHideActionText(self) -> bool:
        """public boolean javax.swing.AbstractButton.getHideActionText()"""
        return bool._wrap(super(AbstractButton, self).getHideActionText())

    @override
    @overload
    def getBounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.getBounds()"""
        return 'Rectangle'._wrap(super(Component, self).getBounds())

    @override
    @overload
    def removeMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.removeMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).removeMouseMotionListener(arg0)

    @override
    @overload
    def isShowing(self) -> bool:
        """public boolean java.awt.Component.isShowing()"""
        return bool._wrap(super(Component, self).isShowing())

    @override
    @overload
    def getDropTarget(self) -> 'DropTarget':
        """public synchronized java.awt.dnd.DropTarget java.awt.Component.getDropTarget()"""
        return 'DropTarget'._wrap(super(Component, self).getDropTarget())

    @override
    @overload
    def isFontSet(self) -> bool:
        """public boolean java.awt.Component.isFontSet()"""
        return bool._wrap(super(Component, self).isFontSet())

    @override
    @overload
    def getDisplayedMnemonicIndex(self) -> int:
        """public int javax.swing.AbstractButton.getDisplayedMnemonicIndex()"""
        return int._wrap(super(AbstractButton, self).getDisplayedMnemonicIndex())

    @override
    @overload
    def setIgnoreRepaint(self, arg0: bool):
        """public void java.awt.Component.setIgnoreRepaint(boolean)"""
        super(_Component, self).setIgnoreRepaint(_boolean.valueOf(arg0))

    @override
    @overload
    def getPropertyChangeListeners(self) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners()"""
        return List['PropertyChangeListener']._wrap(super(Component, self).getPropertyChangeListeners())

    @override
    @overload
    def isBackgroundSet(self) -> bool:
        """public boolean java.awt.Component.isBackgroundSet()"""
        return bool._wrap(super(Component, self).isBackgroundSet())

    @override
    @overload
    def location(self) -> 'Point':
        """public java.awt.Point java.awt.Component.location()"""
        return 'Point'._wrap(super(Component, self).location())

    @override
    @overload
    def getComponentOrientation(self) -> 'ComponentOrientation':
        """public java.awt.ComponentOrientation java.awt.Component.getComponentOrientation()"""
        return 'ComponentOrientation'._wrap(super(Component, self).getComponentOrientation())

    @override
    @overload
    def addHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.addHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).addHierarchyListener(arg0)

    @override
    @overload
    def getInheritsPopupMenu(self) -> bool:
        """public boolean javax.swing.JComponent.getInheritsPopupMenu()"""
        return bool._wrap(super(JComponent, self).getInheritsPopupMenu())

    @override
    @overload
    def getFocusCycleRootAncestor(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getFocusCycleRootAncestor()"""
        return 'Container'._wrap(super(Component, self).getFocusCycleRootAncestor())

    @override
    @overload
    def show(self, arg0: bool):
        """public void java.awt.Component.show(boolean)"""
        super(_Component, self).show(_boolean.valueOf(arg0))

    @overload
    def locate(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.locate(int,int)"""
        return 'Component'._wrap(super(_Container, self).locate(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def isPaintingForPrint(self) -> bool:
        """public final boolean javax.swing.JComponent.isPaintingForPrint()"""
        return bool._wrap(super(JComponent, self).isPaintingForPrint())

    @override
    @overload
    def preferredSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.preferredSize()"""
        return 'Dimension'._wrap(super(Container, self).preferredSize())

    @overload
    def requestFocusInWindow(self, arg0: 'Cause') -> bool:
        """public boolean java.awt.Component.requestFocusInWindow(java.awt.event.FocusEvent$Cause)"""
        return bool._wrap(super(_Component, self).requestFocusInWindow(arg0))

    @override
    @overload
    def remove(self, arg0: int):
        """public void java.awt.Container.remove(int)"""
        super(_Container, self).remove(_int.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,long,long)"""
        super(_Component, self).firePropertyChange(arg0, _long.valueOf(arg1), _long.valueOf(arg2))

    @override
    @overload
    def setFocusCycleRoot(self, arg0: bool):
        """public void java.awt.Container.setFocusCycleRoot(boolean)"""
        super(_Container, self).setFocusCycleRoot(_boolean.valueOf(arg0))

    @override
    @overload
    def enable(self):
        """public void javax.swing.JComponent.enable()"""
        super(JComponent, self).enable()

    @overload
    def checkImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @override
    @overload
    def getFocusTraversalKeysEnabled(self) -> bool:
        """public boolean java.awt.Component.getFocusTraversalKeysEnabled()"""
        return bool._wrap(super(Component, self).getFocusTraversalKeysEnabled())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def setDisabledSelectedIcon(self, arg0: 'Icon'):
        """public void javax.swing.AbstractButton.setDisabledSelectedIcon(javax.swing.Icon)"""
        super(_AbstractButton, self).setDisabledSelectedIcon(arg0)

    @override
    @overload
    def getRootPane(self) -> 'JRootPane':
        """public javax.swing.JRootPane javax.swing.JComponent.getRootPane()"""
        return 'JRootPane'._wrap(super(JComponent, self).getRootPane())

    @override
    @overload
    def invalidate(self):
        """public void java.awt.Container.invalidate()"""
        super(Container, self).invalidate()

    @overload
    def getComponent(self, arg0: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponent(int)"""
        return 'Component'._wrap(super(_Container, self).getComponent(_int.valueOf(arg0)))

    @override
    @overload
    def setLayout(self, arg0: 'LayoutManager'):
        """public void javax.swing.AbstractButton.setLayout(java.awt.LayoutManager)"""
        super(_AbstractButton, self).setLayout(arg0)

    @override
    @overload
    def setInputMap(self, arg0: int, arg1: 'InputMap'):
        """public final void javax.swing.JComponent.setInputMap(int,javax.swing.InputMap)"""
        super(_JComponent, self).setInputMap(_int.valueOf(arg0), arg1)

    @override
    @overload
    def removePropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0)

    @override
    @overload
    def setBorder(self, arg0: 'Border'):
        """public void javax.swing.JComponent.setBorder(javax.swing.border.Border)"""
        super(_JComponent, self).setBorder(arg0)

    @override
    @overload
    def remove(self, arg0: 'MenuComponent'):
        """public void java.awt.Component.remove(java.awt.MenuComponent)"""
        super(_Component, self).remove(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintStream'):
        """public void java.awt.Component.list(java.io.PrintStream)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintWriter'):
        """public void java.awt.Component.list(java.io.PrintWriter)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def setEnabled(self, arg0: bool):
        """public void javax.swing.AbstractButton.setEnabled(boolean)"""
        super(_AbstractButton, self).setEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def getKeyListeners(self) -> List['KeyListener']:
        """public synchronized java.awt.event.KeyListener[] java.awt.Component.getKeyListeners()"""
        return List['KeyListener']._wrap(super(Component, self).getKeyListeners())

    @overload
    def mouseDown(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDown(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDown(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def addChangeListener(self, arg0: 'ChangeListener'):
        """public void javax.swing.AbstractButton.addChangeListener(javax.swing.event.ChangeListener)"""
        super(_AbstractButton, self).addChangeListener(arg0)

    @override
    @overload
    def getIconTextGap(self) -> int:
        """public int javax.swing.AbstractButton.getIconTextGap()"""
        return int._wrap(super(AbstractButton, self).getIconTextGap())

    @override
    @overload
    def addVetoableChangeListener(self, arg0: 'VetoableChangeListener'):
        """public synchronized void javax.swing.JComponent.addVetoableChangeListener(java.beans.VetoableChangeListener)"""
        super(_JComponent, self).addVetoableChangeListener(arg0)

    @overload
    def contains(self, arg0: 'Point') -> bool:
        """public boolean java.awt.Component.contains(java.awt.Point)"""
        return bool._wrap(super(_Component, self).contains(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,short,short)"""
        super(_Component, self).firePropertyChange(arg0, _short.valueOf(arg1), _short.valueOf(arg2))

    @override
    @overload
    def dispatchEvent(self, arg0: 'AWTEvent'):
        """public final void java.awt.Component.dispatchEvent(java.awt.AWTEvent)"""
        super(_Component, self).dispatchEvent(arg0)

    @override
    @overload
    def setHorizontalTextPosition(self, arg0: int):
        """public void javax.swing.AbstractButton.setHorizontalTextPosition(int)"""
        super(_AbstractButton, self).setHorizontalTextPosition(_int.valueOf(arg0))

    @override
    @overload
    def getWidth(self) -> int:
        """public int javax.swing.JComponent.getWidth()"""
        return int._wrap(super(JComponent, self).getWidth())

    @override
    @overload
    def setActionCommand(self, arg0: str):
        """public void javax.swing.AbstractButton.setActionCommand(java.lang.String)"""
        super(_AbstractButton, self).setActionCommand(arg0)

    @override
    @overload
    def getBorder(self) -> 'Border':
        """public javax.swing.border.Border javax.swing.JComponent.getBorder()"""
        return 'Border'._wrap(super(JComponent, self).getBorder())

    @override
    @overload
    def setFocusPainted(self, arg0: bool):
        """public void javax.swing.AbstractButton.setFocusPainted(boolean)"""
        super(_AbstractButton, self).setFocusPainted(_boolean.valueOf(arg0))

    @override
    @overload
    def addComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.addComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).addComponentListener(arg0)

    @override
    @overload
    def getBaselineResizeBehavior(self) -> 'BaselineResizeBehavior.Component$BaselineResizeBehavior':
        """public java.awt.Component$BaselineResizeBehavior javax.swing.JComponent.getBaselineResizeBehavior()"""
        return 'BaselineResizeBehavior.Component$BaselineResizeBehavior'._wrap(super(JComponent, self).getBaselineResizeBehavior())

    @override
    @overload
    def addAncestorListener(self, arg0: 'AncestorListener'):
        """public void javax.swing.JComponent.addAncestorListener(javax.swing.event.AncestorListener)"""
        super(_JComponent, self).addAncestorListener(arg0)

    @overload
    def prepareImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @overload
    def mouseDrag(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDrag(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDrag(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def isOpaque(self) -> bool:
        """public boolean javax.swing.JComponent.isOpaque()"""
        return bool._wrap(super(JComponent, self).isOpaque())

    @override
    @overload
    def update(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.update(java.awt.Graphics)"""
        super(_JComponent, self).update(arg0)

    @override
    @overload
    def getToolTipText(self) -> str:
        """public java.lang.String javax.swing.JComponent.getToolTipText()"""
        return str._wrap(super(JComponent, self).getToolTipText())

    @override
    @overload
    def getMnemonic(self) -> int:
        """public int javax.swing.AbstractButton.getMnemonic()"""
        return int._wrap(super(AbstractButton, self).getMnemonic())

    @override
    @overload
    def getLocationOnScreen(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocationOnScreen()"""
        return 'Point'._wrap(super(Component, self).getLocationOnScreen())

    @overload
    def getComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def getVerticalTextPosition(self) -> int:
        """public int javax.swing.AbstractButton.getVerticalTextPosition()"""
        return int._wrap(super(AbstractButton, self).getVerticalTextPosition())

    @override
    @overload
    def isMaximumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMaximumSizeSet()"""
        return bool._wrap(super(Component, self).isMaximumSizeSet())

    @override
    @overload
    def setAlignmentY(self, arg0: float):
        """public void javax.swing.JComponent.setAlignmentY(float)"""
        super(_JComponent, self).setAlignmentY(_float.valueOf(arg0))

    @override
    @overload
    def getRegisteredKeyStrokes(self) -> List['KeyStroke']:
        """public javax.swing.KeyStroke[] javax.swing.JComponent.getRegisteredKeyStrokes()"""
        return List['KeyStroke']._wrap(super(JComponent, self).getRegisteredKeyStrokes())

    @override
    @overload
    def isFocusTraversalPolicyProvider(self) -> bool:
        """public final boolean java.awt.Container.isFocusTraversalPolicyProvider()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicyProvider())

    @override
    @overload
    def getMouseListeners(self) -> List['MouseListener']:
        """public synchronized java.awt.event.MouseListener[] java.awt.Component.getMouseListeners()"""
        return List['MouseListener']._wrap(super(Component, self).getMouseListeners())

    @override
    @overload
    def registerKeyboardAction(self, arg0: 'ActionListener', arg1: 'KeyStroke', arg2: int):
        """public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,javax.swing.KeyStroke,int)"""
        super(_JComponent, self).registerKeyboardAction(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def removeKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.removeKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).removeKeyListener(arg0)

    @override
    @overload
    def getMouseMotionListeners(self) -> List['MouseMotionListener']:
        """public synchronized java.awt.event.MouseMotionListener[] java.awt.Component.getMouseMotionListeners()"""
        return List['MouseMotionListener']._wrap(super(Component, self).getMouseMotionListeners())

    @override
    @overload
    def addContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.addContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).addContainerListener(arg0)

    @override
    @overload
    def isFocusTraversable(self) -> bool:
        """public boolean java.awt.Component.isFocusTraversable()"""
        return bool._wrap(super(Component, self).isFocusTraversable())

    @override
    @overload
    def setVerticalAlignment(self, arg0: int):
        """public void javax.swing.AbstractButton.setVerticalAlignment(int)"""
        super(_AbstractButton, self).setVerticalAlignment(_int.valueOf(arg0))

    @overload
    def mouseExit(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseExit(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseExit(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getBounds(self, arg0: 'Rectangle') -> 'Rectangle':
        """public java.awt.Rectangle javax.swing.JComponent.getBounds(java.awt.Rectangle)"""
        return 'Rectangle'._wrap(super(_JComponent, self).getBounds(arg0))

    @override
    @overload
    def setAutoscrolls(self, arg0: bool):
        """public void javax.swing.JComponent.setAutoscrolls(boolean)"""
        super(_JComponent, self).setAutoscrolls(_boolean.valueOf(arg0))

    @override
    @overload
    def setComponentPopupMenu(self, arg0: 'JPopupMenu'):
        """public void javax.swing.JComponent.setComponentPopupMenu(javax.swing.JPopupMenu)"""
        super(_JComponent, self).setComponentPopupMenu(arg0)

    @override
    @overload
    def getVisibleRect(self) -> 'Rectangle':
        """public java.awt.Rectangle javax.swing.JComponent.getVisibleRect()"""
        return 'Rectangle'._wrap(super(JComponent, self).getVisibleRect())

    @overload
    def createImage(self, arg0: int, arg1: int) -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(int,int)"""
        return 'Image'._wrap(super(_Component, self).createImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeNotify(self):
        """public void javax.swing.JButton.removeNotify()"""
        super(JButton, self).removeNotify()

    @override
    @overload
    def scrollRectToVisible(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.scrollRectToVisible(java.awt.Rectangle)"""
        super(_JComponent, self).scrollRectToVisible(arg0)

    @override
    @overload
    def getRolloverSelectedIcon(self) -> 'Icon':
        """public javax.swing.Icon javax.swing.AbstractButton.getRolloverSelectedIcon()"""
        return 'Icon'._wrap(super(AbstractButton, self).getRolloverSelectedIcon())

    @override
    @overload
    def getMouseWheelListeners(self) -> List['MouseWheelListener']:
        """public synchronized java.awt.event.MouseWheelListener[] java.awt.Component.getMouseWheelListeners()"""
        return List['MouseWheelListener']._wrap(super(Component, self).getMouseWheelListeners())

    @override
    @overload
    def reshape(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void javax.swing.JComponent.reshape(int,int,int,int)"""
        super(_JComponent, self).reshape(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def setTransferHandler(self, arg0: 'TransferHandler'):
        """public void javax.swing.JComponent.setTransferHandler(javax.swing.TransferHandler)"""
        super(_JComponent, self).setTransferHandler(arg0)

    @override
    @overload
    def setSelected(self, arg0: bool):
        """public void javax.swing.AbstractButton.setSelected(boolean)"""
        super(_AbstractButton, self).setSelected(_boolean.valueOf(arg0))

    @override
    @overload
    def getPreferredSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getPreferredSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getPreferredSize())

    @override
    @overload
    def addFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.addFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).addFocusListener(arg0)

    @override
    @overload
    def addKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.addKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).addKeyListener(arg0)

    @override
    @overload
    def resize(self, arg0: 'Dimension'):
        """public void java.awt.Component.resize(java.awt.Dimension)"""
        super(_Component, self).resize(arg0)

    @override
    @overload
    def setComponentZOrder(self, arg0: 'Component', arg1: int):
        """public void java.awt.Container.setComponentZOrder(java.awt.Component,int)"""
        super(_Container, self).setComponentZOrder(arg0, _int.valueOf(arg1))

    @override
    @overload
    def list(self):
        """public void java.awt.Component.list()"""
        super(Component, self).list()

    @override
    @overload
    def getSelectedObjects(self) -> List[object]:
        """public java.lang.Object[] javax.swing.AbstractButton.getSelectedObjects()"""
        return List[object]._wrap(super(AbstractButton, self).getSelectedObjects())

    @override
    @overload
    def updateUI(self):
        """public void javax.swing.JButton.updateUI()"""
        super(JButton, self).updateUI()

    @override
    @overload
    def hasFocus(self) -> bool:
        """public boolean java.awt.Component.hasFocus()"""
        return bool._wrap(super(Component, self).hasFocus())

    @override
    @overload
    def setMargin(self, arg0: 'Insets'):
        """public void javax.swing.AbstractButton.setMargin(java.awt.Insets)"""
        super(_AbstractButton, self).setMargin(arg0)

    @override
    @overload
    def addMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.addMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).addMouseListener(arg0)

    @overload
    def postEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.postEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).postEvent(arg0))

    @overload
    def getLocation(self, arg0: 'Point') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getLocation(java.awt.Point)"""
        return 'Point'._wrap(super(_JComponent, self).getLocation(arg0))

    @overload
    def getBaseline(self, arg0: int, arg1: int) -> int:
        """public int javax.swing.JComponent.getBaseline(int,int)"""
        return int._wrap(super(_JComponent, self).getBaseline(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def findComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def setPressedIcon(self, arg0: 'Icon'):
        """public void javax.swing.AbstractButton.setPressedIcon(javax.swing.Icon)"""
        super(_AbstractButton, self).setPressedIcon(arg0)

    @override
    @overload
    def getForeground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getForeground()"""
        return 'Color'._wrap(super(Component, self).getForeground())

    @override
    @overload
    def show(self):
        """public void java.awt.Component.show()"""
        super(Component, self).show()

    @override
    @overload
    def isDoubleBuffered(self) -> bool:
        """public boolean javax.swing.JComponent.isDoubleBuffered()"""
        return bool._wrap(super(JComponent, self).isDoubleBuffered())

    @override
    @overload
    def addMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.addMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).addMouseWheelListener(arg0)

    @override
    @overload
    def getMargin(self) -> 'Insets':
        """public java.awt.Insets javax.swing.AbstractButton.getMargin()"""
        return 'Insets'._wrap(super(AbstractButton, self).getMargin())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def setRolloverSelectedIcon(self, arg0: 'Icon'):
        """public void javax.swing.AbstractButton.setRolloverSelectedIcon(javax.swing.Icon)"""
        super(_AbstractButton, self).setRolloverSelectedIcon(arg0)

    @override
    @overload
    def setRolloverEnabled(self, arg0: bool):
        """public void javax.swing.AbstractButton.setRolloverEnabled(boolean)"""
        super(_AbstractButton, self).setRolloverEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def isLightweight(self) -> bool:
        """public boolean java.awt.Component.isLightweight()"""
        return bool._wrap(super(Component, self).isLightweight())

    @override
    @overload
    def setAlignmentX(self, arg0: float):
        """public void javax.swing.JComponent.setAlignmentX(float)"""
        super(_JComponent, self).setAlignmentX(_float.valueOf(arg0))

    @override
    @overload
    def setFocusTraversalKeysEnabled(self, arg0: bool):
        """public void java.awt.Component.setFocusTraversalKeysEnabled(boolean)"""
        super(_Component, self).setFocusTraversalKeysEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def getMultiClickThreshhold(self) -> int:
        """public long javax.swing.AbstractButton.getMultiClickThreshhold()"""
        return int._wrap(super(AbstractButton, self).getMultiClickThreshhold())

    @overload
    def getInsets(self, arg0: 'Insets') -> 'Insets':
        """public java.awt.Insets javax.swing.JComponent.getInsets(java.awt.Insets)"""
        return 'Insets'._wrap(super(_JComponent, self).getInsets(arg0))

    @override
    @overload
    def getAction(self) -> 'Action':
        """public javax.swing.Action javax.swing.AbstractButton.getAction()"""
        return 'Action'._wrap(super(AbstractButton, self).getAction())

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int):
        """public void javax.swing.JComponent.repaint(long,int,int,int,int)"""
        super(_JComponent, self).repaint(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4))

    @overload
    def getToolTipLocation(self, arg0: 'MouseEvent') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getToolTipLocation(java.awt.event.MouseEvent)"""
        return 'Point'._wrap(super(_JComponent, self).getToolTipLocation(arg0))

    @override
    @overload
    def getIcon(self) -> 'Icon':
        """public javax.swing.Icon javax.swing.AbstractButton.getIcon()"""
        return 'Icon'._wrap(super(AbstractButton, self).getIcon())

    @override
    @overload
    def setUI(self, arg0: 'ButtonUI'):
        """public void javax.swing.AbstractButton.setUI(javax.swing.plaf.ButtonUI)"""
        super(_AbstractButton, self).setUI(arg0)

    @override
    @overload
    def removeActionListener(self, arg0: 'ActionListener'):
        """public void javax.swing.AbstractButton.removeActionListener(java.awt.event.ActionListener)"""
        super(_AbstractButton, self).removeActionListener(arg0)

    @override
    @overload
    def getVerifyInputWhenFocusTarget(self) -> bool:
        """public boolean javax.swing.JComponent.getVerifyInputWhenFocusTarget()"""
        return bool._wrap(super(JComponent, self).getVerifyInputWhenFocusTarget())

    @overload
    def mouseMove(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseMove(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseMove(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def removeItemListener(self, arg0: 'ItemListener'):
        """public void javax.swing.AbstractButton.removeItemListener(java.awt.event.ItemListener)"""
        super(_AbstractButton, self).removeItemListener(arg0)

    @overload
    def getListeners(self, arg0: 'Class') -> List['EventListener']:
        """public <T extends java.util.EventListener> T[] javax.swing.JComponent.getListeners(java.lang.Class<T>)"""
        return List['EventListener']._wrap(super(_JComponent, self).getListeners(arg0))

    @override
    @overload
    def setSelectedIcon(self, arg0: 'Icon'):
        """public void javax.swing.AbstractButton.setSelectedIcon(javax.swing.Icon)"""
        super(_AbstractButton, self).setSelectedIcon(arg0)

    @override
    @overload
    def addHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.addHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).addHierarchyBoundsListener(arg0)

    @override
    @overload
    def isBorderPainted(self) -> bool:
        """public boolean javax.swing.AbstractButton.isBorderPainted()"""
        return bool._wrap(super(AbstractButton, self).isBorderPainted())

    @overload
    def imageUpdate(self, arg0: 'Image', arg1: int, arg2: int, arg3: int, arg4: int, arg5: int) -> bool:
        """public boolean javax.swing.AbstractButton.imageUpdate(java.awt.Image,int,int,int,int,int)"""
        return bool._wrap(super(_AbstractButton, self).imageUpdate(arg0, _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4), _int.valueOf(arg5)))

    @override
    @overload
    def getHorizontalAlignment(self) -> int:
        """public int javax.swing.AbstractButton.getHorizontalAlignment()"""
        return int._wrap(super(AbstractButton, self).getHorizontalAlignment())

    @overload
    def add(self, arg0: 'Component', arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component,int)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def repaint(self):
        """public void java.awt.Component.repaint()"""
        super(Component, self).repaint()

    @override
    @overload
    def createToolTip(self) -> 'JToolTip':
        """public javax.swing.JToolTip javax.swing.JComponent.createToolTip()"""
        return 'JToolTip'._wrap(super(JComponent, self).createToolTip())

    @overload
    def getToolTipText(self, arg0: 'MouseEvent') -> str:
        """public java.lang.String javax.swing.JComponent.getToolTipText(java.awt.event.MouseEvent)"""
        return str._wrap(super(_JComponent, self).getToolTipText(arg0))

    @override
    @overload
    def setFocusTraversalPolicyProvider(self, arg0: bool):
        """public final void java.awt.Container.setFocusTraversalPolicyProvider(boolean)"""
        super(_Container, self).setFocusTraversalPolicyProvider(_boolean.valueOf(arg0))

    @overload
    def getComponentZOrder(self, arg0: 'Component') -> int:
        """public int java.awt.Container.getComponentZOrder(java.awt.Component)"""
        return int._wrap(super(_Container, self).getComponentZOrder(arg0))

    @override
    @overload
    def getSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.getSize()"""
        return 'Dimension'._wrap(super(Component, self).getSize())

    @override
    @overload
    def setName(self, arg0: str):
        """public void java.awt.Component.setName(java.lang.String)"""
        super(_Component, self).setName(arg0)

    @override
    @overload
    def unregisterKeyboardAction(self, arg0: 'KeyStroke'):
        """public void javax.swing.JComponent.unregisterKeyboardAction(javax.swing.KeyStroke)"""
        super(_JComponent, self).unregisterKeyboardAction(arg0)

    @overload
    def requestFocus(self, arg0: bool) -> bool:
        """public boolean javax.swing.JComponent.requestFocus(boolean)"""
        return bool._wrap(super(_JComponent, self).requestFocus(_boolean.valueOf(arg0)))

    @override
    @overload
    def setActionMap(self, arg0: 'ActionMap'):
        """public final void javax.swing.JComponent.setActionMap(javax.swing.ActionMap)"""
        super(_JComponent, self).setActionMap(arg0)

    @overload
    def mouseEnter(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseEnter(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseEnter(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object, arg2: int):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object,int)"""
        super(_Container, self).add(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def isFocusTraversalPolicySet(self) -> bool:
        """public boolean java.awt.Container.isFocusTraversalPolicySet()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicySet())

    @override
    @overload
    def getItemListeners(self) -> List['ItemListener']:
        """public java.awt.event.ItemListener[] javax.swing.AbstractButton.getItemListeners()"""
        return List['ItemListener']._wrap(super(AbstractButton, self).getItemListeners())

    @override
    @overload
    def getAncestorListeners(self) -> List['AncestorListener']:
        """public javax.swing.event.AncestorListener[] javax.swing.JComponent.getAncestorListeners()"""
        return List['AncestorListener']._wrap(super(JComponent, self).getAncestorListeners())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool._wrap(super(_object, self).equals(arg0))

    @overload
    def getInputMap(self, arg0: int) -> 'InputMap':
        """public final javax.swing.InputMap javax.swing.JComponent.getInputMap(int)"""
        return 'InputMap'._wrap(super(_JComponent, self).getInputMap(_int.valueOf(arg0)))

    @override
    @overload
    def getName(self) -> str:
        """public java.lang.String java.awt.Component.getName()"""
        return str._wrap(super(Component, self).getName())

    @override
    @overload
    def addMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.addMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).addMouseMotionListener(arg0)

    @override
    @overload
    def getActionListeners(self) -> List['ActionListener']:
        """public java.awt.event.ActionListener[] javax.swing.AbstractButton.getActionListeners()"""
        return List['ActionListener']._wrap(super(AbstractButton, self).getActionListeners())

    @override
    @overload
    def setDisabledIcon(self, arg0: 'Icon'):
        """public void javax.swing.AbstractButton.setDisabledIcon(javax.swing.Icon)"""
        super(_AbstractButton, self).setDisabledIcon(arg0)

    @override
    @overload
    def getIgnoreRepaint(self) -> bool:
        """public boolean java.awt.Component.getIgnoreRepaint()"""
        return bool._wrap(super(Component, self).getIgnoreRepaint())

    @override
    @overload
    def setVerticalTextPosition(self, arg0: int):
        """public void javax.swing.AbstractButton.setVerticalTextPosition(int)"""
        super(_AbstractButton, self).setVerticalTextPosition(_int.valueOf(arg0))

    @override
    @overload
    def getGraphics(self) -> 'Graphics':
        """public java.awt.Graphics javax.swing.JComponent.getGraphics()"""
        return 'Graphics'._wrap(super(JComponent, self).getGraphics())

    @override
    @overload
    def getDisabledIcon(self) -> 'Icon':
        """public javax.swing.Icon javax.swing.AbstractButton.getDisabledIcon()"""
        return 'Icon'._wrap(super(AbstractButton, self).getDisabledIcon())

    @override
    @overload
    def setDoubleBuffered(self, arg0: bool):
        """public void javax.swing.JComponent.setDoubleBuffered(boolean)"""
        super(_JComponent, self).setDoubleBuffered(_boolean.valueOf(arg0))

    @override
    @overload
    def isPreferredSizeSet(self) -> bool:
        """public boolean java.awt.Component.isPreferredSizeSet()"""
        return bool._wrap(super(Component, self).isPreferredSizeSet())

    @override
    @overload
    def addInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.addInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).addInputMethodListener(arg0)

    @override
    @overload
    def getInputMap(self) -> 'InputMap':
        """public final javax.swing.InputMap javax.swing.JComponent.getInputMap()"""
        return 'InputMap'._wrap(super(JComponent, self).getInputMap())

    @override
    @overload
    def setVisible(self, arg0: bool):
        """public void javax.swing.JComponent.setVisible(boolean)"""
        super(_JComponent, self).setVisible(_boolean.valueOf(arg0))

    @overload
    def setListener(self, arg0: 'Listener'):
        """public void com.badlogic.gdx.tools.flame.LoaderButton.setListener(com.badlogic.gdx.tools.flame.LoaderButton$Listener)"""
        super(_LoaderButton, self).setListener(arg0)

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,byte,byte)"""
        super(_Component, self).firePropertyChange(arg0, _byte.valueOf(arg1), _byte.valueOf(arg2))

    @override
    @overload
    def setBounds(self, arg0: 'Rectangle'):
        """public void java.awt.Component.setBounds(java.awt.Rectangle)"""
        super(_Component, self).setBounds(arg0)

    @override
    @overload
    def setBorderPainted(self, arg0: bool):
        """public void javax.swing.AbstractButton.setBorderPainted(boolean)"""
        super(_AbstractButton, self).setBorderPainted(_boolean.valueOf(arg0))

    @override
    @overload
    def getActionCommand(self) -> str:
        """public java.lang.String javax.swing.AbstractButton.getActionCommand()"""
        return str._wrap(super(AbstractButton, self).getActionCommand())

    @override
    @overload
    def getInputMethodRequests(self) -> 'InputMethodRequests':
        """public java.awt.im.InputMethodRequests java.awt.Component.getInputMethodRequests()"""
        return 'InputMethodRequests'._wrap(super(Component, self).getInputMethodRequests())

    @override
    @overload
    def getChangeListeners(self) -> List['ChangeListener']:
        """public javax.swing.event.ChangeListener[] javax.swing.AbstractButton.getChangeListeners()"""
        return List['ChangeListener']._wrap(super(AbstractButton, self).getChangeListeners())

    @override
    @overload
    def setRequestFocusEnabled(self, arg0: bool):
        """public void javax.swing.JComponent.setRequestFocusEnabled(boolean)"""
        super(_JComponent, self).setRequestFocusEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def setMultiClickThreshhold(self, arg0: int):
        """public void javax.swing.AbstractButton.setMultiClickThreshhold(long)"""
        super(_AbstractButton, self).setMultiClickThreshhold(_long.valueOf(arg0))

    @override
    @overload
    def setFocusTraversalKeys(self, arg0: int, arg1: 'Set'):
        """public void javax.swing.JComponent.setFocusTraversalKeys(int,java.util.Set<? extends java.awt.AWTKeyStroke>)"""
        super(_JComponent, self).setFocusTraversalKeys(_int.valueOf(arg0), arg1)

    @overload
    def inside(self, arg0: int, arg1: int) -> bool:
        """public boolean java.awt.Component.inside(int,int)"""
        return bool._wrap(super(_Component, self).inside(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def requestDefaultFocus(self) -> bool:
        """public boolean javax.swing.JComponent.requestDefaultFocus()"""
        return bool._wrap(super(JComponent, self).requestDefaultFocus())

    @override
    @overload
    def getRolloverIcon(self) -> 'Icon':
        """public javax.swing.Icon javax.swing.AbstractButton.getRolloverIcon()"""
        return 'Icon'._wrap(super(AbstractButton, self).getRolloverIcon())

    @override
    @overload
    def layout(self):
        """public void java.awt.Container.layout()"""
        super(Container, self).layout()

    @override
    @overload
    def getInputMethodListeners(self) -> List['InputMethodListener']:
        """public synchronized java.awt.event.InputMethodListener[] java.awt.Component.getInputMethodListeners()"""
        return List['InputMethodListener']._wrap(super(Component, self).getInputMethodListeners())

    @override
    @overload
    def paint(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.paint(java.awt.Graphics)"""
        super(_JComponent, self).paint(arg0)

    @override
    @overload
    def transferFocus(self):
        """public void java.awt.Component.transferFocus()"""
        super(Component, self).transferFocus()

    @override
    @overload
    def removeComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.removeComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).removeComponentListener(arg0)

    @override
    @overload
    def isFocusPainted(self) -> bool:
        """public boolean javax.swing.AbstractButton.isFocusPainted()"""
        return bool._wrap(super(AbstractButton, self).isFocusPainted())

    @override
    @overload
    def setMinimumSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setMinimumSize(java.awt.Dimension)"""
        super(_JComponent, self).setMinimumSize(arg0)

    @override
    @overload
    def setLocation(self, arg0: 'Point'):
        """public void java.awt.Component.setLocation(java.awt.Point)"""
        super(_Component, self).setLocation(arg0)

    @override
    @overload
    def getLabel(self) -> str:
        """public java.lang.String javax.swing.AbstractButton.getLabel()"""
        return str._wrap(super(AbstractButton, self).getLabel())

    @override
    @overload
    def setSize(self, arg0: 'Dimension'):
        """public void java.awt.Component.setSize(java.awt.Dimension)"""
        super(_Component, self).setSize(arg0)

    @overload
    def getPopupLocation(self, arg0: 'MouseEvent') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getPopupLocation(java.awt.event.MouseEvent)"""
        return 'Point'._wrap(super(_JComponent, self).getPopupLocation(arg0))

    @overload
    def isAncestorOf(self, arg0: 'Component') -> bool:
        """public boolean java.awt.Container.isAncestorOf(java.awt.Component)"""
        return bool._wrap(super(_Container, self).isAncestorOf(arg0))

    @overload
    def contains(self, arg0: int, arg1: int) -> bool:
        """public boolean javax.swing.JComponent.contains(int,int)"""
        return bool._wrap(super(_JComponent, self).contains(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def validate(self):
        """public void java.awt.Container.validate()"""
        super(Container, self).validate()

    @override
    @overload
    def getMaximumSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getMaximumSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getMaximumSize())

    @override
    @overload
    def setLabel(self, arg0: str):
        """public void javax.swing.AbstractButton.setLabel(java.lang.String)"""
        super(_AbstractButton, self).setLabel(arg0)

    @override
    @overload
    def countComponents(self) -> int:
        """public int java.awt.Container.countComponents()"""
        return int._wrap(super(Container, self).countComponents())

    @override
    @overload
    def isDefaultButton(self) -> bool:
        """public boolean javax.swing.JButton.isDefaultButton()"""
        return bool._wrap(super(JButton, self).isDefaultButton())

    @override
    @overload
    def removeVetoableChangeListener(self, arg0: 'VetoableChangeListener'):
        """public synchronized void javax.swing.JComponent.removeVetoableChangeListener(java.beans.VetoableChangeListener)"""
        super(_JComponent, self).removeVetoableChangeListener(arg0)

    @override
    @overload
    def getComponents(self) -> List['Component']:
        """public java.awt.Component[] java.awt.Container.getComponents()"""
        return List['Component']._wrap(super(Container, self).getComponents())

    @override
    @overload
    def setDebugGraphicsOptions(self, arg0: int):
        """public void javax.swing.JComponent.setDebugGraphicsOptions(int)"""
        super(_JComponent, self).setDebugGraphicsOptions(_int.valueOf(arg0))

    @override
    @overload
    def list(self, arg0: 'PrintStream', arg1: int):
        """public void java.awt.Container.list(java.io.PrintStream,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @override
    @overload
    def getFocusTraversalPolicy(self) -> 'FocusTraversalPolicy':
        """public java.awt.FocusTraversalPolicy java.awt.Container.getFocusTraversalPolicy()"""
        return 'FocusTraversalPolicy'._wrap(super(Container, self).getFocusTraversalPolicy())

    @override
    @overload
    def setHorizontalAlignment(self, arg0: int):
        """public void javax.swing.AbstractButton.setHorizontalAlignment(int)"""
        super(_AbstractButton, self).setHorizontalAlignment(_int.valueOf(arg0))

    @override
    @overload
    def setContentAreaFilled(self, arg0: bool):
        """public void javax.swing.AbstractButton.setContentAreaFilled(boolean)"""
        super(_AbstractButton, self).setContentAreaFilled(_boolean.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,float,float)"""
        super(_Component, self).firePropertyChange(arg0, _float.valueOf(arg1), _float.valueOf(arg2))

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object)"""
        super(_Container, self).add(arg0, arg1)

    @override
    @overload
    def nextFocus(self):
        """public void java.awt.Component.nextFocus()"""
        super(Component, self).nextFocus()

    @override
    @overload
    def doClick(self, arg0: int):
        """public void javax.swing.AbstractButton.doClick(int)"""
        super(_AbstractButton, self).doClick(_int.valueOf(arg0))

    @overload
    def mouseUp(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseUp(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseUp(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def doClick(self):
        """public void javax.swing.AbstractButton.doClick()"""
        super(AbstractButton, self).doClick()

    @override
    @overload
    def getLocation(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocation()"""
        return 'Point'._wrap(super(Component, self).getLocation())

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int._wrap(super(object, self).hashCode())

    @override
    @overload
    def setComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Component.setComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Component, self).setComponentOrientation(arg0)

    @override
    @overload
    def grabFocus(self):
        """public void javax.swing.JComponent.grabFocus()"""
        super(JComponent, self).grabFocus()

    @overload
    def keyDown(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyDown(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyDown(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,int,int)"""
        super(_JComponent, self).firePropertyChange(arg0, _int.valueOf(arg1), _int.valueOf(arg2))

    @override
    @overload
    def getLayout(self) -> 'LayoutManager':
        """public java.awt.LayoutManager java.awt.Container.getLayout()"""
        return 'LayoutManager'._wrap(super(Container, self).getLayout())

    @override
    @overload
    def setText(self, arg0: str):
        """public void javax.swing.AbstractButton.setText(java.lang.String)"""
        super(_AbstractButton, self).setText(arg0)

    @override
    @overload
    def setRolloverIcon(self, arg0: 'Icon'):
        """public void javax.swing.AbstractButton.setRolloverIcon(javax.swing.Icon)"""
        super(_AbstractButton, self).setRolloverIcon(arg0)

    @override
    @overload
    def addNotify(self):
        """public void javax.swing.JComponent.addNotify()"""
        super(JComponent, self).addNotify()

    @override
    @overload
    def setSize(self, arg0: int, arg1: int):
        """public void java.awt.Component.setSize(int,int)"""
        super(_Component, self).setSize(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.repaint(int,int,int,int)"""
        super(_Component, self).repaint(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @overload
    def keyUp(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyUp(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyUp(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def setBackground(self, arg0: 'Color'):
        """public void javax.swing.JComponent.setBackground(java.awt.Color)"""
        super(_JComponent, self).setBackground(arg0)

    @override
    @overload
    def doLayout(self):
        """public void java.awt.Container.doLayout()"""
        super(Container, self).doLayout()

    @override
    @overload
    def getInsets(self) -> 'Insets':
        """public java.awt.Insets javax.swing.JComponent.getInsets()"""
        return 'Insets'._wrap(super(JComponent, self).getInsets())

    @override
    @overload
    def setNextFocusableComponent(self, arg0: 'Component'):
        """public void javax.swing.JComponent.setNextFocusableComponent(java.awt.Component)"""
        super(_JComponent, self).setNextFocusableComponent(arg0)

    @override
    @overload
    def getAlignmentY(self) -> float:
        """public float javax.swing.JComponent.getAlignmentY()"""
        return float._wrap(super(JComponent, self).getAlignmentY())

    @override
    @overload
    def resetKeyboardActions(self):
        """public void javax.swing.JComponent.resetKeyboardActions()"""
        super(JComponent, self).resetKeyboardActions()

    @override
    @overload
    def addPropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Container.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Container, self).addPropertyChangeListener(arg0, arg1)

    @override
    @overload
    def applyComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Container.applyComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Container, self).applyComponentOrientation(arg0)

    @override
    @overload
    def setDefaultCapable(self, arg0: bool):
        """public void javax.swing.JButton.setDefaultCapable(boolean)"""
        super(_JButton, self).setDefaultCapable(_boolean.valueOf(arg0))

    @override
    @overload
    def removeMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.removeMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).removeMouseListener(arg0)

    @override
    @overload
    def getInputContext(self) -> 'InputContext':
        """public java.awt.im.InputContext java.awt.Component.getInputContext()"""
        return 'InputContext'._wrap(super(Component, self).getInputContext())

    @overload
    def __init__(self, arg0: 'FlameMain', arg1: str, arg2: 'Listener'):
        """public com.badlogic.gdx.tools.flame.LoaderButton(com.badlogic.gdx.tools.flame.FlameMain,java.lang.String,com.badlogic.gdx.tools.flame.LoaderButton$Listener<T>)"""
        val = _LoaderButton(arg0, arg1, arg2)
        self.__wrapper = val

    @override
    @overload
    def getVerticalAlignment(self) -> int:
        """public int javax.swing.AbstractButton.getVerticalAlignment()"""
        return int._wrap(super(AbstractButton, self).getVerticalAlignment())

    @override
    @overload
    def getPressedIcon(self) -> 'Icon':
        """public javax.swing.Icon javax.swing.AbstractButton.getPressedIcon()"""
        return 'Icon'._wrap(super(AbstractButton, self).getPressedIcon())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,double,double)"""
        super(_Component, self).firePropertyChange(arg0, _double.valueOf(arg1), _double.valueOf(arg2))

    @override
    @overload
    def isSelected(self) -> bool:
        """public boolean javax.swing.AbstractButton.isSelected()"""
        return bool._wrap(super(AbstractButton, self).isSelected())

    @override
    @overload
    def removeAncestorListener(self, arg0: 'AncestorListener'):
        """public void javax.swing.JComponent.removeAncestorListener(javax.swing.event.AncestorListener)"""
        super(_JComponent, self).removeAncestorListener(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintWriter', arg1: int):
        """public void java.awt.Container.list(java.io.PrintWriter,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @overload
    def checkImage(self, arg0: 'Image', arg1: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, arg1))

    @override
    @overload
    def removeFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.removeFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).removeFocusListener(arg0)

    @overload
    def getConditionForKeyStroke(self, arg0: 'KeyStroke') -> int:
        """public int javax.swing.JComponent.getConditionForKeyStroke(javax.swing.KeyStroke)"""
        return int._wrap(super(_JComponent, self).getConditionForKeyStroke(arg0))

    @override
    @overload
    def getTreeLock(self) -> object:
        """public final java.lang.Object java.awt.Component.getTreeLock()"""
        return object._wrap(super(Component, self).getTreeLock())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def removeContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.removeContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).removeContainerListener(arg0)

    @override
    @overload
    def getGraphicsConfiguration(self) -> 'GraphicsConfiguration':
        """public java.awt.GraphicsConfiguration java.awt.Component.getGraphicsConfiguration()"""
        return 'GraphicsConfiguration'._wrap(super(Component, self).getGraphicsConfiguration())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: bool, arg2: bool):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,boolean,boolean)"""
        super(_JComponent, self).firePropertyChange(arg0, _boolean.valueOf(arg1), _boolean.valueOf(arg2))

    @override
    @overload
    def isRolloverEnabled(self) -> bool:
        """public boolean javax.swing.AbstractButton.isRolloverEnabled()"""
        return bool._wrap(super(AbstractButton, self).isRolloverEnabled())

    @override
    @overload
    def registerKeyboardAction(self, arg0: 'ActionListener', arg1: str, arg2: 'KeyStroke', arg3: int):
        """public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,java.lang.String,javax.swing.KeyStroke,int)"""
        super(_JComponent, self).registerKeyboardAction(arg0, arg1, arg2, _int.valueOf(arg3))

    @overload
    def findComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(arg0))

    @override
    @overload
    def resize(self, arg0: int, arg1: int):
        """public void java.awt.Component.resize(int,int)"""
        super(_Component, self).resize(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getHeight(self) -> int:
        """public int javax.swing.JComponent.getHeight()"""
        return int._wrap(super(JComponent, self).getHeight())

    @override
    @overload
    def getTransferHandler(self) -> 'TransferHandler':
        """public javax.swing.TransferHandler javax.swing.JComponent.getTransferHandler()"""
        return 'TransferHandler'._wrap(super(JComponent, self).getTransferHandler())

    @override
    @overload
    def transferFocusBackward(self):
        """public void java.awt.Component.transferFocusBackward()"""
        super(Component, self).transferFocusBackward()

    @overload
    def getPropertyChangeListeners(self, arg0: str) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners(java.lang.String)"""
        return List['PropertyChangeListener']._wrap(super(_Component, self).getPropertyChangeListeners(arg0))

    @staticmethod
    @overload
    def isLightweightComponent(arg0: 'Component') -> bool:
        """public static boolean javax.swing.JComponent.isLightweightComponent(java.awt.Component)"""
        return bool._wrap(_JComponent.isLightweightComponent(arg0))

    @override
    @overload
    def setAction(self, arg0: 'Action'):
        """public void javax.swing.AbstractButton.setAction(javax.swing.Action)"""
        super(_AbstractButton, self).setAction(arg0)

    @override
    @overload
    def printAll(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.printAll(java.awt.Graphics)"""
        super(_JComponent, self).printAll(arg0)

    @override
    @overload
    def print(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.print(java.awt.Graphics)"""
        super(_JComponent, self).print(arg0)

    @override
    @overload
    def setInputVerifier(self, arg0: 'InputVerifier'):
        """public void javax.swing.JComponent.setInputVerifier(javax.swing.InputVerifier)"""
        super(_JComponent, self).setInputVerifier(arg0)

    @override
    @overload
    def getFont(self) -> 'Font':
        """public java.awt.Font java.awt.Component.getFont()"""
        return 'Font'._wrap(super(Component, self).getFont())

    @override
    @overload
    def setFont(self, arg0: 'Font'):
        """public void javax.swing.JComponent.setFont(java.awt.Font)"""
        super(_JComponent, self).setFont(arg0)

    @override
    @overload
    def isOptimizedDrawingEnabled(self) -> bool:
        """public boolean javax.swing.JComponent.isOptimizedDrawingEnabled()"""
        return bool._wrap(super(JComponent, self).isOptimizedDrawingEnabled())

    @override
    @overload
    def setMnemonic(self, arg0: str):
        """public void javax.swing.AbstractButton.setMnemonic(char)"""
        super(_AbstractButton, self).setMnemonic(_char.valueOf(arg0))

    @override
    @overload
    def isValidateRoot(self) -> bool:
        """public boolean javax.swing.JComponent.isValidateRoot()"""
        return bool._wrap(super(JComponent, self).isValidateRoot())

    @override
    @overload
    def setForeground(self, arg0: 'Color'):
        """public void javax.swing.JComponent.setForeground(java.awt.Color)"""
        super(_JComponent, self).setForeground(arg0)

    @overload
    def createVolatileImage(self, arg0: int, arg1: int, arg2: 'ImageCapabilities') -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int,java.awt.ImageCapabilities) throws java.awt.AWTException"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1), arg2))

    @override
    @overload
    def bounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.bounds()"""
        return 'Rectangle'._wrap(super(Component, self).bounds())

    @override
    @overload
    def getSelectedIcon(self) -> 'Icon':
        """public javax.swing.Icon javax.swing.AbstractButton.getSelectedIcon()"""
        return 'Icon'._wrap(super(AbstractButton, self).getSelectedIcon())

    @override
    @overload
    def add(self, arg0: 'PopupMenu'):
        """public void java.awt.Component.add(java.awt.PopupMenu)"""
        super(_Component, self).add(arg0)

    @override
    @overload
    def isVisible(self) -> bool:
        """public boolean java.awt.Component.isVisible()"""
        return bool._wrap(super(Component, self).isVisible())

    @override
    @overload
    def setDropTarget(self, arg0: 'DropTarget'):
        """public synchronized void java.awt.Component.setDropTarget(java.awt.dnd.DropTarget)"""
        super(_Component, self).setDropTarget(arg0)

    @override
    @overload
    def getY(self) -> int:
        """public int javax.swing.JComponent.getY()"""
        return int._wrap(super(JComponent, self).getY())

    @override
    @overload
    def isFocusable(self) -> bool:
        """public boolean java.awt.Component.isFocusable()"""
        return bool._wrap(super(Component, self).isFocusable())

    @override
    @overload
    def getDisabledSelectedIcon(self) -> 'Icon':
        """public javax.swing.Icon javax.swing.AbstractButton.getDisabledSelectedIcon()"""
        return 'Icon'._wrap(super(AbstractButton, self).getDisabledSelectedIcon())

    @override
    @overload
    def transferFocusUpCycle(self):
        """public void java.awt.Component.transferFocusUpCycle()"""
        super(Component, self).transferFocusUpCycle()

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: str, arg2: str):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,char,char)"""
        super(_JComponent, self).firePropertyChange(arg0, _char.valueOf(arg1), _char.valueOf(arg2))

    @override
    @overload
    def getAutoscrolls(self) -> bool:
        """public boolean javax.swing.JComponent.getAutoscrolls()"""
        return bool._wrap(super(JComponent, self).getAutoscrolls())

    @override
    @overload
    def setModel(self, arg0: 'ButtonModel'):
        """public void javax.swing.AbstractButton.setModel(javax.swing.ButtonModel)"""
        super(_AbstractButton, self).setModel(arg0)

    @override
    @overload
    def setHideActionText(self, arg0: bool):
        """public void javax.swing.AbstractButton.setHideActionText(boolean)"""
        super(_AbstractButton, self).setHideActionText(_boolean.valueOf(arg0))

    @override
    @overload
    def setIconTextGap(self, arg0: int):
        """public void javax.swing.AbstractButton.setIconTextGap(int)"""
        super(_AbstractButton, self).setIconTextGap(_int.valueOf(arg0))

    @override
    @overload
    def setToolTipText(self, arg0: str):
        """public void javax.swing.JComponent.setToolTipText(java.lang.String)"""
        super(_JComponent, self).setToolTipText(arg0)

    @override
    @overload
    def setMixingCutoutShape(self, arg0: 'Shape'):
        """public void java.awt.Component.setMixingCutoutShape(java.awt.Shape)"""
        super(_Component, self).setMixingCutoutShape(arg0)

    @override
    @overload
    def requestFocus(self, arg0: 'Cause'):
        """public void java.awt.Component.requestFocus(java.awt.event.FocusEvent$Cause)"""
        super(_Component, self).requestFocus(arg0)

    @override
    @overload
    def putClientProperty(self, arg0: object, arg1: object):
        """public final void javax.swing.JComponent.putClientProperty(java.lang.Object,java.lang.Object)"""
        super(_JComponent, self).putClientProperty(arg0, arg1)

    @override
    @overload
    def getVetoableChangeListeners(self) -> List['VetoableChangeListener']:
        """public synchronized java.beans.VetoableChangeListener[] javax.swing.JComponent.getVetoableChangeListeners()"""
        return List['VetoableChangeListener']._wrap(super(JComponent, self).getVetoableChangeListeners())

    @override
    @overload
    def getTopLevelAncestor(self) -> 'Container':
        """public java.awt.Container javax.swing.JComponent.getTopLevelAncestor()"""
        return 'Container'._wrap(super(JComponent, self).getTopLevelAncestor())

    @override
    @overload
    def isRequestFocusEnabled(self) -> bool:
        """public boolean javax.swing.JComponent.isRequestFocusEnabled()"""
        return bool._wrap(super(JComponent, self).isRequestFocusEnabled())

    @override
    @overload
    def getFocusListeners(self) -> List['FocusListener']:
        """public synchronized java.awt.event.FocusListener[] java.awt.Component.getFocusListeners()"""
        return List['FocusListener']._wrap(super(Component, self).getFocusListeners())

    @overload
    def add(self, arg0: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0))

    @override
    @overload
    def setLocation(self, arg0: int, arg1: int):
        """public void java.awt.Component.setLocation(int,int)"""
        super(_Component, self).setLocation(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def removeInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.removeInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).removeInputMethodListener(arg0)

    @override
    @overload
    def setFocusable(self, arg0: bool):
        """public void java.awt.Component.setFocusable(boolean)"""
        super(_Component, self).setFocusable(_boolean.valueOf(arg0))

    @override
    @overload
    def paintComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.paintComponents(java.awt.Graphics)"""
        super(_Container, self).paintComponents(arg0)

    @overload
    def prepareImage(self, arg0: 'Image', arg1: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, arg1))

    @overload
    def add(self, arg0: str, arg1: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.lang.String,java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, arg1))

    @override
    @overload
    def paintImmediately(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void javax.swing.JComponent.paintImmediately(int,int,int,int)"""
        super(_JComponent, self).paintImmediately(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def getMinimumSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getMinimumSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getMinimumSize())

    @overload
    def createVolatileImage(self, arg0: int, arg1: int) -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int)"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.removeHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).removeHierarchyListener(arg0)

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.awt.Component.toString()"""
        return str._wrap(super(Component, self).toString())

    @overload
    def __init__(self, arg0: 'FlameMain', arg1: str):
        """public com.badlogic.gdx.tools.flame.LoaderButton(com.badlogic.gdx.tools.flame.FlameMain,java.lang.String)"""
        val = _LoaderButton(arg0, arg1)
        self.__wrapper = val

    @override
    @overload
    def isFocusOwner(self) -> bool:
        """public boolean java.awt.Component.isFocusOwner()"""
        return bool._wrap(super(Component, self).isFocusOwner())

    @override
    @overload
    def getUIClassID(self) -> str:
        """public java.lang.String javax.swing.JButton.getUIClassID()"""
        return str._wrap(super(JButton, self).getUIClassID())

    @override
    @overload
    def isDefaultCapable(self) -> bool:
        """public boolean javax.swing.JButton.isDefaultCapable()"""
        return bool._wrap(super(JButton, self).isDefaultCapable())

    @override
    @overload
    def getHorizontalTextPosition(self) -> int:
        """public int javax.swing.AbstractButton.getHorizontalTextPosition()"""
        return int._wrap(super(AbstractButton, self).getHorizontalTextPosition())

    @override
    @overload
    def setIcon(self, arg0: 'Icon'):
        """public void javax.swing.AbstractButton.setIcon(javax.swing.Icon)"""
        super(_AbstractButton, self).setIcon(arg0)

    @override
    @overload
    def isFocusCycleRoot(self) -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot()"""
        return bool._wrap(super(Container, self).isFocusCycleRoot())

    @override
    @overload
    def hide(self):
        """public void javax.swing.JComponent.hide()"""
        super(JComponent, self).hide()

    @override
    @overload
    def revalidate(self):
        """public void javax.swing.JComponent.revalidate()"""
        super(JComponent, self).revalidate()

    @override
    @overload
    def getActionMap(self) -> 'ActionMap':
        """public final javax.swing.ActionMap javax.swing.JComponent.getActionMap()"""
        return 'ActionMap'._wrap(super(JComponent, self).getActionMap())

    @override
    @overload
    def requestFocusInWindow(self) -> bool:
        """public boolean javax.swing.JComponent.requestFocusInWindow()"""
        return bool._wrap(super(JComponent, self).requestFocusInWindow())

    @overload
    def action(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.action(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).action(arg0, arg1))

    @override
    @overload
    def isManagingFocus(self) -> bool:
        """public boolean javax.swing.JComponent.isManagingFocus()"""
        return bool._wrap(super(JComponent, self).isManagingFocus())

    @overload
    def getFocusTraversalKeys(self, arg0: int) -> 'Set':
        """public java.util.Set<java.awt.AWTKeyStroke> java.awt.Container.getFocusTraversalKeys(int)"""
        return 'Set'._wrap(super(_Container, self).getFocusTraversalKeys(_int.valueOf(arg0)))

    @override
    @overload
    def remove(self, arg0: 'Component'):
        """public void java.awt.Container.remove(java.awt.Component)"""
        super(_Container, self).remove(arg0)

    @override
    @overload
    def isContentAreaFilled(self) -> bool:
        """public boolean javax.swing.AbstractButton.isContentAreaFilled()"""
        return bool._wrap(super(AbstractButton, self).isContentAreaFilled())

    @override
    @overload
    def insets(self) -> 'Insets':
        """public java.awt.Insets java.awt.Container.insets()"""
        return 'Insets'._wrap(super(Container, self).insets())

    @override
    @overload
    def setFocusTraversalPolicy(self, arg0: 'FocusTraversalPolicy'):
        """public void java.awt.Container.setFocusTraversalPolicy(java.awt.FocusTraversalPolicy)"""
        super(_Container, self).setFocusTraversalPolicy(arg0)

    @overload
    def getSize(self, arg0: 'Dimension') -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getSize(java.awt.Dimension)"""
        return 'Dimension'._wrap(super(_JComponent, self).getSize(arg0))

    @override
    @overload
    def enable(self, arg0: bool):
        """public void java.awt.Component.enable(boolean)"""
        super(_Component, self).enable(_boolean.valueOf(arg0))

    @override
    @overload
    def addPropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Container.addPropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Container, self).addPropertyChangeListener(arg0)

    @overload
    def getComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(arg0))

    @override
    @overload
    def size(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.size()"""
        return 'Dimension'._wrap(super(Component, self).size())

    @overload
    def getActionForKeyStroke(self, arg0: 'KeyStroke') -> 'ActionListener':
        """public java.awt.event.ActionListener javax.swing.JComponent.getActionForKeyStroke(javax.swing.KeyStroke)"""
        return 'ActionListener'._wrap(super(_JComponent, self).getActionForKeyStroke(arg0))

    @overload
    def lostFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.lostFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).lostFocus(arg0, arg1))

    @override
    @overload
    def setDisplayedMnemonicIndex(self, arg0: int):
        """public void javax.swing.AbstractButton.setDisplayedMnemonicIndex(int) throws java.lang.IllegalArgumentException"""
        super(_AbstractButton, self).setDisplayedMnemonicIndex(_int.valueOf(arg0))

    @override
    @overload
    def isMinimumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMinimumSizeSet()"""
        return bool._wrap(super(Component, self).isMinimumSizeSet())

    @override
    @overload
    def isForegroundSet(self) -> bool:
        """public boolean java.awt.Component.isForegroundSet()"""
        return bool._wrap(super(Component, self).isForegroundSet())

    @overload
    def getMousePosition(self, arg0: bool) -> 'Point':
        """public java.awt.Point java.awt.Container.getMousePosition(boolean) throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(_Container, self).getMousePosition(_boolean.valueOf(arg0)))

    @overload
    def getFontMetrics(self, arg0: 'Font') -> 'FontMetrics':
        """public java.awt.FontMetrics javax.swing.JComponent.getFontMetrics(java.awt.Font)"""
        return 'FontMetrics'._wrap(super(_JComponent, self).getFontMetrics(arg0))

    @override
    @overload
    def getHierarchyBoundsListeners(self) -> List['HierarchyBoundsListener']:
        """public synchronized java.awt.event.HierarchyBoundsListener[] java.awt.Component.getHierarchyBoundsListeners()"""
        return List['HierarchyBoundsListener']._wrap(super(Component, self).getHierarchyBoundsListeners())

    @override
    @overload
    def getModel(self) -> 'ButtonModel':
        """public javax.swing.ButtonModel javax.swing.AbstractButton.getModel()"""
        return 'ButtonModel'._wrap(super(AbstractButton, self).getModel())

    @override
    @overload
    def minimumSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.minimumSize()"""
        return 'Dimension'._wrap(super(Container, self).minimumSize())

    @override
    @overload
    def getUI(self) -> 'ButtonUI':
        """public javax.swing.plaf.ButtonUI javax.swing.AbstractButton.getUI()"""
        return 'ButtonUI'._wrap(super(AbstractButton, self).getUI())

    @overload
    def handleEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.handleEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).handleEvent(arg0))

    @override
    @overload
    def setMnemonic(self, arg0: int):
        """public void javax.swing.AbstractButton.setMnemonic(int)"""
        super(_AbstractButton, self).setMnemonic(_int.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @override
    @overload
    def getComponentListeners(self) -> List['ComponentListener']:
        """public synchronized java.awt.event.ComponentListener[] java.awt.Component.getComponentListeners()"""
        return List['ComponentListener']._wrap(super(Component, self).getComponentListeners())

    @override
    @overload
    def computeVisibleRect(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.computeVisibleRect(java.awt.Rectangle)"""
        super(_JComponent, self).computeVisibleRect(arg0)

    @override
    @overload
    def deliverEvent(self, arg0: 'Event'):
        """public void java.awt.Container.deliverEvent(java.awt.Event)"""
        super(_Container, self).deliverEvent(arg0)

    @override
    @overload
    def getAlignmentX(self) -> float:
        """public float javax.swing.JComponent.getAlignmentX()"""
        return float._wrap(super(JComponent, self).getAlignmentX())

    @overload
    def gotFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.gotFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).gotFocus(arg0, arg1))

    @override
    @overload
    def printComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.printComponents(java.awt.Graphics)"""
        super(_Container, self).printComponents(arg0)

    @override
    @overload
    def getColorModel(self) -> 'ColorModel':
        """public java.awt.image.ColorModel java.awt.Component.getColorModel()"""
        return 'ColorModel'._wrap(super(Component, self).getColorModel())

    @override
    @overload
    def getDebugGraphicsOptions(self) -> int:
        """public int javax.swing.JComponent.getDebugGraphicsOptions()"""
        return int._wrap(super(JComponent, self).getDebugGraphicsOptions())

    @overload
    def areFocusTraversalKeysSet(self, arg0: int) -> bool:
        """public boolean java.awt.Container.areFocusTraversalKeysSet(int)"""
        return bool._wrap(super(_Container, self).areFocusTraversalKeysSet(_int.valueOf(arg0)))

    @override
    @overload
    def repaint(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.repaint(java.awt.Rectangle)"""
        super(_JComponent, self).repaint(arg0)

    @overload
    def getClientProperty(self, arg0: object) -> object:
        """public final java.lang.Object javax.swing.JComponent.getClientProperty(java.lang.Object)"""
        return object._wrap(super(_JComponent, self).getClientProperty(arg0))

    @override
    @overload
    def getX(self) -> int:
        """public int javax.swing.JComponent.getX()"""
        return int._wrap(super(JComponent, self).getX())

    @override
    @overload
    def getToolkit(self) -> 'Toolkit':
        """public java.awt.Toolkit java.awt.Component.getToolkit()"""
        return 'Toolkit'._wrap(super(Component, self).getToolkit())

    @override
    @overload
    def isCursorSet(self) -> bool:
        """public boolean java.awt.Component.isCursorSet()"""
        return bool._wrap(super(Component, self).isCursorSet())

    @override
    @overload
    def setPreferredSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setPreferredSize(java.awt.Dimension)"""
        super(_JComponent, self).setPreferredSize(arg0)

    @override
    @overload
    def setBounds(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.setBounds(int,int,int,int)"""
        super(_Component, self).setBounds(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def requestFocus(self):
        """public void javax.swing.JComponent.requestFocus()"""
        super(JComponent, self).requestFocus()

    @override
    @overload
    def getText(self) -> str:
        """public java.lang.String javax.swing.AbstractButton.getText()"""
        return str._wrap(super(AbstractButton, self).getText())

    @override
    @overload
    def isEnabled(self) -> bool:
        """public boolean java.awt.Component.isEnabled()"""
        return bool._wrap(super(Component, self).isEnabled())

    @override
    @overload
    def move(self, arg0: int, arg1: int):
        """public void java.awt.Component.move(int,int)"""
        super(_Component, self).move(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def addActionListener(self, arg0: 'ActionListener'):
        """public void javax.swing.AbstractButton.addActionListener(java.awt.event.ActionListener)"""
        super(_AbstractButton, self).addActionListener(arg0)

    @override
    @overload
    def getAccessibleContext(self) -> 'AccessibleContext':
        """public javax.accessibility.AccessibleContext javax.swing.JButton.getAccessibleContext()"""
        return 'AccessibleContext'._wrap(super(JButton, self).getAccessibleContext())

    @overload
    def isFocusCycleRoot(self, arg0: 'Container') -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot(java.awt.Container)"""
        return bool._wrap(super(_Container, self).isFocusCycleRoot(arg0))

    @override
    @overload
    def setLocale(self, arg0: 'Locale'):
        """public void java.awt.Component.setLocale(java.util.Locale)"""
        super(_Component, self).setLocale(arg0)

    @override
    @overload
    def paintAll(self, arg0: 'Graphics'):
        """public void java.awt.Component.paintAll(java.awt.Graphics)"""
        super(_Component, self).paintAll(arg0)

    @override
    @overload
    def removeMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.removeMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).removeMouseWheelListener(arg0)

    @override
    @overload
    def transferFocusDownCycle(self):
        """public void java.awt.Container.transferFocusDownCycle()"""
        super(Container, self).transferFocusDownCycle()

    @override
    @overload
    def getNextFocusableComponent(self) -> 'Component':
        """public java.awt.Component javax.swing.JComponent.getNextFocusableComponent()"""
        return 'Component'._wrap(super(JComponent, self).getNextFocusableComponent())

    @override
    @overload
    def removeChangeListener(self, arg0: 'ChangeListener'):
        """public void javax.swing.AbstractButton.removeChangeListener(javax.swing.event.ChangeListener)"""
        super(_AbstractButton, self).removeChangeListener(arg0)

    @override
    @overload
    def repaint(self, arg0: int):
        """public void java.awt.Component.repaint(long)"""
        super(_Component, self).repaint(_long.valueOf(arg0))

    @override
    @overload
    def removeHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.removeHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).removeHierarchyBoundsListener(arg0)

    @override
    @overload
    def getComponentPopupMenu(self) -> 'JPopupMenu':
        """public javax.swing.JPopupMenu javax.swing.JComponent.getComponentPopupMenu()"""
        return 'JPopupMenu'._wrap(super(JComponent, self).getComponentPopupMenu())

    @override
    @overload
    def getMousePosition(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getMousePosition() throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(Component, self).getMousePosition())

    @override
    @overload
    def getComponentCount(self) -> int:
        """public int java.awt.Container.getComponentCount()"""
        return int._wrap(super(Container, self).getComponentCount())

    @override
    @overload
    def setMaximumSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setMaximumSize(java.awt.Dimension)"""
        super(_JComponent, self).setMaximumSize(arg0)

    @override
    @overload
    def addItemListener(self, arg0: 'ItemListener'):
        """public void javax.swing.AbstractButton.addItemListener(java.awt.event.ItemListener)"""
        super(_AbstractButton, self).addItemListener(arg0)

    @override
    @overload
    def disable(self):
        """public void javax.swing.JComponent.disable()"""
        super(JComponent, self).disable()

    @override
    @overload
    def enableInputMethods(self, arg0: bool):
        """public void java.awt.Component.enableInputMethods(boolean)"""
        super(_Component, self).enableInputMethods(_boolean.valueOf(arg0))

    @override
    @overload
    def getCursor(self) -> 'Cursor':
        """public java.awt.Cursor java.awt.Component.getCursor()"""
        return 'Cursor'._wrap(super(Component, self).getCursor())

    @override
    @overload
    def getContainerListeners(self) -> List['ContainerListener']:
        """public synchronized java.awt.event.ContainerListener[] java.awt.Container.getContainerListeners()"""
        return List['ContainerListener']._wrap(super(Container, self).getContainerListeners())

    @override
    @overload
    def removeAll(self):
        """public void java.awt.Container.removeAll()"""
        super(Container, self).removeAll()

    @override
    @overload
    def setOpaque(self, arg0: bool):
        """public void javax.swing.JComponent.setOpaque(boolean)"""
        super(_JComponent, self).setOpaque(_boolean.valueOf(arg0))

    @override
    @overload
    def setCursor(self, arg0: 'Cursor'):
        """public void java.awt.Component.setCursor(java.awt.Cursor)"""
        super(_Component, self).setCursor(arg0)

    @override
    @overload
    def getBackground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getBackground()"""
        return 'Color'._wrap(super(Component, self).getBackground())

    @overload
    def createImage(self, arg0: 'ImageProducer') -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(java.awt.image.ImageProducer)"""
        return 'Image'._wrap(super(_Component, self).createImage(arg0))

    @override
    @overload
    def setVerifyInputWhenFocusTarget(self, arg0: bool):
        """public void javax.swing.JComponent.setVerifyInputWhenFocusTarget(boolean)"""
        super(_JComponent, self).setVerifyInputWhenFocusTarget(_boolean.valueOf(arg0))

    @override
    @overload
    def removePropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0, arg1) 
 
 
# CLASS: com.badlogic.gdx.tools.flame.DynamicsInfluencerPanel$VelocityWrapper
from pyquantum_helper import import_once as _import_once
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _Object
_Object = _Object
import java.lang.Object as _object
from builtins import type
import java.lang.String as _String
_String = _String
try:
    from pygdx.graphics.g3d.particles import influencers
except ImportError:
    influencers = _import_once("pygdx.graphics.g3d.particles.influencers")

import com.badlogic.gdx.tools.flame.DynamicsInfluencerPanel as _DynamicsInfluencerPanel_VelocityWrapper
_VelocityWrapper = _DynamicsInfluencerPanel_VelocityWrapper.VelocityWrapper
import java.lang.Boolean as _boolean
import java.lang.Integer as _int
from builtins import bool
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class VelocityWrapper():
    """com.badlogic.gdx.tools.flame.DynamicsInfluencerPanel.VelocityWrapper"""
 
    @staticmethod
    def _wrap(java_value: _VelocityWrapper) -> 'VelocityWrapper':
        return VelocityWrapper(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _VelocityWrapper):
        """
        Dynamic initializer for VelocityWrapper.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_VelocityWrapper__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_VelocityWrapper__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.lang.Object.toString()"""
        return str._wrap(super(object, self).toString())

    @overload
    def __init__(self, arg0: 'DynamicsInfluencerPanel', arg1: 'DynamicsModifier', arg2: bool):
        """public com.badlogic.gdx.tools.flame.DynamicsInfluencerPanel$VelocityWrapper(com.badlogic.gdx.tools.flame.DynamicsInfluencerPanel,com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier,boolean)"""
        val = _VelocityWrapper(arg0, arg1, _boolean.valueOf(arg2))
        self.__wrapper = val

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool._wrap(super(_object, self).equals(arg0))

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int._wrap(super(object, self).hashCode()) 
 
 
# CLASS: com.badlogic.gdx.tools.flame.Slider
import javax.accessibility.AccessibleContext as AccessibleContext
import javax.swing.JToolTip as JToolTip
import java.awt.event.HierarchyBoundsListener as HierarchyBoundsListener
import java.awt.event.ActionListener as _ActionListener
_ActionListener = _ActionListener
import java.awt.ComponentOrientation as _ComponentOrientation
_ComponentOrientation = _ComponentOrientation
import java.awt.image.ImageProducer as ImageProducer
import java.awt.GraphicsConfiguration as GraphicsConfiguration
import java.awt.Graphics as _Graphics
_Graphics = _Graphics
import javax.swing.JToolTip as _JToolTip
_JToolTip = _JToolTip
import java.awt.Container as _Container
_Container = _Container
import java.awt.MenuComponent as MenuComponent
import java.awt.im.InputMethodRequests as _InputMethodRequests
_InputMethodRequests = _InputMethodRequests
import java.awt.FocusTraversalPolicy as _FocusTraversalPolicy
_FocusTraversalPolicy = _FocusTraversalPolicy
import java.lang.Byte as _byte
import java.awt.Dimension as Dimension
import java.awt.Font as _Font
_Font = _Font
import javax.swing.plaf.PanelUI as _PanelUI
_PanelUI = _PanelUI
import java.awt.event.ContainerListener as ContainerListener
import javax.swing.event.AncestorListener as AncestorListener
import java.awt.AWTEvent as AWTEvent
import java.awt.image.ColorModel as _ColorModel
_ColorModel = _ColorModel
import java.lang.Object as _object
import java.awt.ComponentOrientation as ComponentOrientation
import java.awt.im.InputContext as _InputContext
_InputContext = _InputContext
from builtins import float
import java.awt.event.HierarchyListener as HierarchyListener
import java.awt.event.InputMethodListener as InputMethodListener
from typing import List
import javax.swing.event.ChangeListener as ChangeListener
import java.awt.event.MouseWheelListener as _MouseWheelListener
_MouseWheelListener = _MouseWheelListener
import java.awt.event.KeyListener as KeyListener
import java.awt.Component as Component
from builtins import int
import java.awt.LayoutManager as LayoutManager
import java.awt.FontMetrics as _FontMetrics
_FontMetrics = _FontMetrics
import com.badlogic.gdx.tools.flame.Slider as _Slider
_Slider = _Slider
import java.awt.Container as Container
from builtins import type
import java.awt.image.VolatileImage as _VolatileImage
_VolatileImage = _VolatileImage
import java.awt.Shape as Shape
import java.awt.Rectangle as Rectangle
import java.awt.event.ContainerListener as _ContainerListener
_ContainerListener = _ContainerListener
import java.awt.event.HierarchyListener as _HierarchyListener
_HierarchyListener = _HierarchyListener
import java.lang.String as _string
import javax.swing.InputVerifier as _InputVerifier
_InputVerifier = _InputVerifier
import java.awt.Insets as _Insets
_Insets = _Insets
import javax.swing.border.Border as _Border
_Border = _Border
import java.awt.event.ComponentListener as _ComponentListener
_ComponentListener = _ComponentListener
import javax.swing.ActionMap as ActionMap
import java.beans.VetoableChangeListener as VetoableChangeListener
import java.awt.event.ComponentListener as ComponentListener
import javax.swing.KeyStroke as KeyStroke
import java.beans.VetoableChangeListener as _VetoableChangeListener
_VetoableChangeListener = _VetoableChangeListener
from builtins import object
import java.awt.event.KeyListener as _KeyListener
_KeyListener = _KeyListener
import java.awt.Component.BaselineResizeBehavior as BaselineResizeBehavior
import java.awt.Component as _Component_BaselineResizeBehavior
_BaselineResizeBehavior = _Component_BaselineResizeBehavior.BaselineResizeBehavior
import java.awt.Cursor as _Cursor
_Cursor = _Cursor
import java.awt.im.InputMethodRequests as InputMethodRequests
import java.lang.Long as _long
import javax.swing.JPanel as _JPanel
_JPanel = _JPanel
import java.awt.event.FocusListener as _FocusListener
_FocusListener = _FocusListener
import java.lang.Character as _char
import javax.swing.TransferHandler as TransferHandler
import java.awt.event.FocusEvent.Cause as Cause
import javax.accessibility.AccessibleContext as _AccessibleContext
_AccessibleContext = _AccessibleContext
import java.awt.event.MouseWheelListener as MouseWheelListener
import java.util.Set as _Set
_Set = _Set
import java.awt.image.ColorModel as ColorModel
import java.lang.Boolean as _boolean
import java.awt.event.MouseMotionListener as MouseMotionListener
import java.util.EventListener as EventListener
import java.awt.Insets as Insets
import javax.swing.KeyStroke as _KeyStroke
_KeyStroke = _KeyStroke
import java.awt.GraphicsConfiguration as _GraphicsConfiguration
_GraphicsConfiguration = _GraphicsConfiguration
import java.awt.dnd.DropTarget as _DropTarget
_DropTarget = _DropTarget
from builtins import bool
import java.beans.PropertyChangeListener as _PropertyChangeListener
_PropertyChangeListener = _PropertyChangeListener
import java.awt.LayoutManager as _LayoutManager
_LayoutManager = _LayoutManager
import java.awt.PopupMenu as PopupMenu
import java.util.EventListener as _EventListener
_EventListener = _EventListener
import java.awt.im.InputContext as InputContext
import java.awt.Component as _Component
_Component = _Component
import java.awt.Font as Font
import java.awt.image.VolatileImage as VolatileImage
import java.awt.dnd.DropTarget as DropTarget
import java.lang.String as _String
_String = _String
import java.lang.Float as _float
import java.awt.Cursor as Cursor
import java.awt.event.MouseListener as _MouseListener
_MouseListener = _MouseListener
import java.awt.Toolkit as _Toolkit
_Toolkit = _Toolkit
import java.io.PrintStream as PrintStream
import javax.swing.JRootPane as _JRootPane
_JRootPane = _JRootPane
import java.awt.Dimension as _Dimension
_Dimension = _Dimension
import java.awt.event.ActionListener as ActionListener
import java.awt.event.MouseEvent as MouseEvent
import java.awt.Color as _Color
_Color = _Color
import javax.swing.JPopupMenu as _JPopupMenu
_JPopupMenu = _JPopupMenu
import javax.swing.InputMap as _InputMap
_InputMap = _InputMap
import java.awt.event.MouseListener as MouseListener
import java.lang.Class as _Class
_Class = _Class
import java.util.Locale as Locale
import java.lang.Double as _double
import javax.swing.plaf.PanelUI as PanelUI
import java.awt.Point as _Point
_Point = _Point
import java.lang.Object as _Object
_Object = _Object
import java.beans.PropertyChangeListener as PropertyChangeListener
import javax.swing.border.Border as Border
import javax.swing.JComponent as _JComponent
_JComponent = _JComponent
import javax.swing.InputVerifier as InputVerifier
import java.io.PrintWriter as PrintWriter
import java.awt.Point as Point
import javax.swing.event.AncestorListener as _AncestorListener
_AncestorListener = _AncestorListener
import java.lang.Short as _short
import java.awt.Toolkit as Toolkit
import java.awt.event.HierarchyBoundsListener as _HierarchyBoundsListener
_HierarchyBoundsListener = _HierarchyBoundsListener
import javax.swing.TransferHandler as _TransferHandler
_TransferHandler = _TransferHandler
import javax.swing.InputMap as InputMap
import java.awt.Rectangle as _Rectangle
_Rectangle = _Rectangle
import javax.swing.JRootPane as JRootPane
import java.awt.Event as Event
import java.awt.event.FocusListener as FocusListener
import java.awt.image.ImageObserver as ImageObserver
from builtins import str
from pyquantum_helper import override
import javax.swing.ActionMap as _ActionMap
_ActionMap = _ActionMap
import java.awt.FocusTraversalPolicy as FocusTraversalPolicy
import java.awt.event.MouseMotionListener as _MouseMotionListener
_MouseMotionListener = _MouseMotionListener
import java.awt.event.InputMethodListener as _InputMethodListener
_InputMethodListener = _InputMethodListener
import javax.swing.JPopupMenu as JPopupMenu
import java.util.Set as Set
import java.lang.Integer as _int
import java.awt.Image as _Image
_Image = _Image
import java.awt.FontMetrics as FontMetrics
import java.awt.Color as Color
import java.awt.Image as Image
import java.awt.Graphics as Graphics
import java.awt.ImageCapabilities as ImageCapabilities
import java.util.Locale as _Locale
_Locale = _Locale
 
class Slider():
    """com.badlogic.gdx.tools.flame.Slider"""
 
    @staticmethod
    def _wrap(java_value: _Slider) -> 'Slider':
        return Slider(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Slider):
        """
        Dynamic initializer for Slider.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Slider__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Slider__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def removeVetoableChangeListener(self, arg0: 'VetoableChangeListener'):
        """public synchronized void javax.swing.JComponent.removeVetoableChangeListener(java.beans.VetoableChangeListener)"""
        super(_JComponent, self).removeVetoableChangeListener(arg0)

    @override
    @overload
    def getComponents(self) -> List['Component']:
        """public java.awt.Component[] java.awt.Container.getComponents()"""
        return List['Component']._wrap(super(Container, self).getComponents())

    @override
    @overload
    def setDebugGraphicsOptions(self, arg0: int):
        """public void javax.swing.JComponent.setDebugGraphicsOptions(int)"""
        super(_JComponent, self).setDebugGraphicsOptions(_int.valueOf(arg0))

    @override
    @overload
    def isValid(self) -> bool:
        """public boolean java.awt.Component.isValid()"""
        return bool._wrap(super(Component, self).isValid())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def getDefaultLocale() -> 'Locale':
        """public static java.util.Locale javax.swing.JComponent.getDefaultLocale()"""
        return Locale._wrap(_JComponent.getDefaultLocale())

    @override
    @overload
    def getInputVerifier(self) -> 'InputVerifier':
        """public javax.swing.InputVerifier javax.swing.JComponent.getInputVerifier()"""
        return 'InputVerifier'._wrap(super(JComponent, self).getInputVerifier())

    @override
    @overload
    def list(self, arg0: 'PrintStream', arg1: int):
        """public void java.awt.Container.list(java.io.PrintStream,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @override
    @overload
    def setUI(self, arg0: 'PanelUI'):
        """public void javax.swing.JPanel.setUI(javax.swing.plaf.PanelUI)"""
        super(_JPanel, self).setUI(arg0)

    @override
    @overload
    def getFocusTraversalPolicy(self) -> 'FocusTraversalPolicy':
        """public java.awt.FocusTraversalPolicy java.awt.Container.getFocusTraversalPolicy()"""
        return 'FocusTraversalPolicy'._wrap(super(Container, self).getFocusTraversalPolicy())

    @override
    @overload
    def getParent(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getParent()"""
        return 'Container'._wrap(super(Component, self).getParent())

    @override
    @overload
    def paintImmediately(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.paintImmediately(java.awt.Rectangle)"""
        super(_JComponent, self).paintImmediately(arg0)

    @staticmethod
    @overload
    def setDefaultLocale(arg0: 'Locale'):
        """public static void javax.swing.JComponent.setDefaultLocale(java.util.Locale)"""
        _JComponent.setDefaultLocale(arg0)

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,float,float)"""
        super(_Component, self).firePropertyChange(arg0, _float.valueOf(arg1), _float.valueOf(arg2))

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object)"""
        super(_Container, self).add(arg0, arg1)

    @override
    @overload
    def getLocale(self) -> 'Locale':
        """public java.util.Locale java.awt.Component.getLocale()"""
        return 'Locale'._wrap(super(Component, self).getLocale())

    @override
    @overload
    def setInheritsPopupMenu(self, arg0: bool):
        """public void javax.swing.JComponent.setInheritsPopupMenu(boolean)"""
        super(_JComponent, self).setInheritsPopupMenu(_boolean.valueOf(arg0))

    @override
    @overload
    def getHierarchyListeners(self) -> List['HierarchyListener']:
        """public synchronized java.awt.event.HierarchyListener[] java.awt.Component.getHierarchyListeners()"""
        return List['HierarchyListener']._wrap(super(Component, self).getHierarchyListeners())

    @override
    @overload
    def nextFocus(self):
        """public void java.awt.Component.nextFocus()"""
        super(Component, self).nextFocus()

    @override
    @overload
    def isPaintingTile(self) -> bool:
        """public boolean javax.swing.JComponent.isPaintingTile()"""
        return bool._wrap(super(JComponent, self).isPaintingTile())

    @override
    @overload
    def isDisplayable(self) -> bool:
        """public boolean java.awt.Component.isDisplayable()"""
        return bool._wrap(super(Component, self).isDisplayable())

    @override
    @overload
    def getBounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.getBounds()"""
        return 'Rectangle'._wrap(super(Component, self).getBounds())

    @override
    @overload
    def removeMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.removeMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).removeMouseMotionListener(arg0)

    @override
    @overload
    def isShowing(self) -> bool:
        """public boolean java.awt.Component.isShowing()"""
        return bool._wrap(super(Component, self).isShowing())

    @override
    @overload
    def getDropTarget(self) -> 'DropTarget':
        """public synchronized java.awt.dnd.DropTarget java.awt.Component.getDropTarget()"""
        return 'DropTarget'._wrap(super(Component, self).getDropTarget())

    @override
    @overload
    def isFontSet(self) -> bool:
        """public boolean java.awt.Component.isFontSet()"""
        return bool._wrap(super(Component, self).isFontSet())

    @overload
    def mouseUp(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseUp(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseUp(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def setIgnoreRepaint(self, arg0: bool):
        """public void java.awt.Component.setIgnoreRepaint(boolean)"""
        super(_Component, self).setIgnoreRepaint(_boolean.valueOf(arg0))

    @override
    @overload
    def getPropertyChangeListeners(self) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners()"""
        return List['PropertyChangeListener']._wrap(super(Component, self).getPropertyChangeListeners())

    @override
    @overload
    def isBackgroundSet(self) -> bool:
        """public boolean java.awt.Component.isBackgroundSet()"""
        return bool._wrap(super(Component, self).isBackgroundSet())

    @override
    @overload
    def getLocation(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocation()"""
        return 'Point'._wrap(super(Component, self).getLocation())

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int._wrap(super(object, self).hashCode())

    @override
    @overload
    def location(self) -> 'Point':
        """public java.awt.Point java.awt.Component.location()"""
        return 'Point'._wrap(super(Component, self).location())

    @override
    @overload
    def getComponentOrientation(self) -> 'ComponentOrientation':
        """public java.awt.ComponentOrientation java.awt.Component.getComponentOrientation()"""
        return 'ComponentOrientation'._wrap(super(Component, self).getComponentOrientation())

    @override
    @overload
    def addHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.addHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).addHierarchyListener(arg0)

    @override
    @overload
    def getInheritsPopupMenu(self) -> bool:
        """public boolean javax.swing.JComponent.getInheritsPopupMenu()"""
        return bool._wrap(super(JComponent, self).getInheritsPopupMenu())

    @override
    @overload
    def setComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Component.setComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Component, self).setComponentOrientation(arg0)

    @override
    @overload
    def getFocusCycleRootAncestor(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getFocusCycleRootAncestor()"""
        return 'Container'._wrap(super(Component, self).getFocusCycleRootAncestor())

    @override
    @overload
    def show(self, arg0: bool):
        """public void java.awt.Component.show(boolean)"""
        super(_Component, self).show(_boolean.valueOf(arg0))

    @override
    @overload
    def grabFocus(self):
        """public void javax.swing.JComponent.grabFocus()"""
        super(JComponent, self).grabFocus()

    @override
    @overload
    def getPreferredSize(self) -> 'Dimension':
        """public java.awt.Dimension com.badlogic.gdx.tools.flame.Slider.getPreferredSize()"""
        return 'Dimension'._wrap(super(Slider, self).getPreferredSize())

    @overload
    def locate(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.locate(int,int)"""
        return 'Component'._wrap(super(_Container, self).locate(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def isPaintingForPrint(self) -> bool:
        """public final boolean javax.swing.JComponent.isPaintingForPrint()"""
        return bool._wrap(super(JComponent, self).isPaintingForPrint())

    @overload
    def keyDown(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyDown(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyDown(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,int,int)"""
        super(_JComponent, self).firePropertyChange(arg0, _int.valueOf(arg1), _int.valueOf(arg2))

    @override
    @overload
    def getLayout(self) -> 'LayoutManager':
        """public java.awt.LayoutManager java.awt.Container.getLayout()"""
        return 'LayoutManager'._wrap(super(Container, self).getLayout())

    @override
    @overload
    def preferredSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.preferredSize()"""
        return 'Dimension'._wrap(super(Container, self).preferredSize())

    @override
    @overload
    def addNotify(self):
        """public void javax.swing.JComponent.addNotify()"""
        super(JComponent, self).addNotify()

    @override
    @overload
    def setSize(self, arg0: int, arg1: int):
        """public void java.awt.Component.setSize(int,int)"""
        super(_Component, self).setSize(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.repaint(int,int,int,int)"""
        super(_Component, self).repaint(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @overload
    def requestFocusInWindow(self, arg0: 'Cause') -> bool:
        """public boolean java.awt.Component.requestFocusInWindow(java.awt.event.FocusEvent$Cause)"""
        return bool._wrap(super(_Component, self).requestFocusInWindow(arg0))

    @override
    @overload
    def remove(self, arg0: int):
        """public void java.awt.Container.remove(int)"""
        super(_Container, self).remove(_int.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,long,long)"""
        super(_Component, self).firePropertyChange(arg0, _long.valueOf(arg1), _long.valueOf(arg2))

    @override
    @overload
    def setFocusCycleRoot(self, arg0: bool):
        """public void java.awt.Container.setFocusCycleRoot(boolean)"""
        super(_Container, self).setFocusCycleRoot(_boolean.valueOf(arg0))

    @overload
    def keyUp(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyUp(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyUp(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def setBackground(self, arg0: 'Color'):
        """public void javax.swing.JComponent.setBackground(java.awt.Color)"""
        super(_JComponent, self).setBackground(arg0)

    @override
    @overload
    def doLayout(self):
        """public void java.awt.Container.doLayout()"""
        super(Container, self).doLayout()

    @override
    @overload
    def enable(self):
        """public void javax.swing.JComponent.enable()"""
        super(JComponent, self).enable()

    @override
    @overload
    def getInsets(self) -> 'Insets':
        """public java.awt.Insets javax.swing.JComponent.getInsets()"""
        return 'Insets'._wrap(super(JComponent, self).getInsets())

    @override
    @overload
    def setNextFocusableComponent(self, arg0: 'Component'):
        """public void javax.swing.JComponent.setNextFocusableComponent(java.awt.Component)"""
        super(_JComponent, self).setNextFocusableComponent(arg0)

    @override
    @overload
    def getAlignmentY(self) -> float:
        """public float javax.swing.JComponent.getAlignmentY()"""
        return float._wrap(super(JComponent, self).getAlignmentY())

    @overload
    def checkImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @override
    @overload
    def getFocusTraversalKeysEnabled(self) -> bool:
        """public boolean java.awt.Component.getFocusTraversalKeysEnabled()"""
        return bool._wrap(super(Component, self).getFocusTraversalKeysEnabled())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getRootPane(self) -> 'JRootPane':
        """public javax.swing.JRootPane javax.swing.JComponent.getRootPane()"""
        return 'JRootPane'._wrap(super(JComponent, self).getRootPane())

    @override
    @overload
    def invalidate(self):
        """public void java.awt.Container.invalidate()"""
        super(Container, self).invalidate()

    @override
    @overload
    def resetKeyboardActions(self):
        """public void javax.swing.JComponent.resetKeyboardActions()"""
        super(JComponent, self).resetKeyboardActions()

    @overload
    def getComponent(self, arg0: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponent(int)"""
        return 'Component'._wrap(super(_Container, self).getComponent(_int.valueOf(arg0)))

    @override
    @overload
    def addPropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Container.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Container, self).addPropertyChangeListener(arg0, arg1)

    @override
    @overload
    def setInputMap(self, arg0: int, arg1: 'InputMap'):
        """public final void javax.swing.JComponent.setInputMap(int,javax.swing.InputMap)"""
        super(_JComponent, self).setInputMap(_int.valueOf(arg0), arg1)

    @override
    @overload
    def removePropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0)

    @override
    @overload
    def applyComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Container.applyComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Container, self).applyComponentOrientation(arg0)

    @override
    @overload
    def setBorder(self, arg0: 'Border'):
        """public void javax.swing.JComponent.setBorder(javax.swing.border.Border)"""
        super(_JComponent, self).setBorder(arg0)

    @override
    @overload
    def remove(self, arg0: 'MenuComponent'):
        """public void java.awt.Component.remove(java.awt.MenuComponent)"""
        super(_Component, self).remove(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintStream'):
        """public void java.awt.Component.list(java.io.PrintStream)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def removeMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.removeMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).removeMouseListener(arg0)

    @overload
    def __init__(self, arg0: float, arg1: float, arg2: float, arg3: float):
        """public com.badlogic.gdx.tools.flame.Slider(float,float,float,float)"""
        val = _Slider(_float.valueOf(arg0), _float.valueOf(arg1), _float.valueOf(arg2), _float.valueOf(arg3))
        self.__wrapper = val

    @override
    @overload
    def list(self, arg0: 'PrintWriter'):
        """public void java.awt.Component.list(java.io.PrintWriter)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def getKeyListeners(self) -> List['KeyListener']:
        """public synchronized java.awt.event.KeyListener[] java.awt.Component.getKeyListeners()"""
        return List['KeyListener']._wrap(super(Component, self).getKeyListeners())

    @override
    @overload
    def getInputContext(self) -> 'InputContext':
        """public java.awt.im.InputContext java.awt.Component.getInputContext()"""
        return 'InputContext'._wrap(super(Component, self).getInputContext())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,double,double)"""
        super(_Component, self).firePropertyChange(arg0, _double.valueOf(arg1), _double.valueOf(arg2))

    @override
    @overload
    def removeAncestorListener(self, arg0: 'AncestorListener'):
        """public void javax.swing.JComponent.removeAncestorListener(javax.swing.event.AncestorListener)"""
        super(_JComponent, self).removeAncestorListener(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintWriter', arg1: int):
        """public void java.awt.Container.list(java.io.PrintWriter,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @overload
    def checkImage(self, arg0: 'Image', arg1: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, arg1))

    @override
    @overload
    def removeFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.removeFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).removeFocusListener(arg0)

    @overload
    def mouseDown(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDown(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDown(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getConditionForKeyStroke(self, arg0: 'KeyStroke') -> int:
        """public int javax.swing.JComponent.getConditionForKeyStroke(javax.swing.KeyStroke)"""
        return int._wrap(super(_JComponent, self).getConditionForKeyStroke(arg0))

    @override
    @overload
    def getTreeLock(self) -> object:
        """public final java.lang.Object java.awt.Component.getTreeLock()"""
        return object._wrap(super(Component, self).getTreeLock())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def addChangeListener(self, arg0: 'ChangeListener'):
        """public void com.badlogic.gdx.tools.flame.Slider.addChangeListener(javax.swing.event.ChangeListener)"""
        super(_Slider, self).addChangeListener(arg0)

    @override
    @overload
    def addVetoableChangeListener(self, arg0: 'VetoableChangeListener'):
        """public synchronized void javax.swing.JComponent.addVetoableChangeListener(java.beans.VetoableChangeListener)"""
        super(_JComponent, self).addVetoableChangeListener(arg0)

    @overload
    def contains(self, arg0: 'Point') -> bool:
        """public boolean java.awt.Component.contains(java.awt.Point)"""
        return bool._wrap(super(_Component, self).contains(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,short,short)"""
        super(_Component, self).firePropertyChange(arg0, _short.valueOf(arg1), _short.valueOf(arg2))

    @override
    @overload
    def dispatchEvent(self, arg0: 'AWTEvent'):
        """public final void java.awt.Component.dispatchEvent(java.awt.AWTEvent)"""
        super(_Component, self).dispatchEvent(arg0)

    @override
    @overload
    def removeContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.removeContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).removeContainerListener(arg0)

    @override
    @overload
    def getGraphicsConfiguration(self) -> 'GraphicsConfiguration':
        """public java.awt.GraphicsConfiguration java.awt.Component.getGraphicsConfiguration()"""
        return 'GraphicsConfiguration'._wrap(super(Component, self).getGraphicsConfiguration())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: bool, arg2: bool):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,boolean,boolean)"""
        super(_JComponent, self).firePropertyChange(arg0, _boolean.valueOf(arg1), _boolean.valueOf(arg2))

    @override
    @overload
    def registerKeyboardAction(self, arg0: 'ActionListener', arg1: str, arg2: 'KeyStroke', arg3: int):
        """public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,java.lang.String,javax.swing.KeyStroke,int)"""
        super(_JComponent, self).registerKeyboardAction(arg0, arg1, arg2, _int.valueOf(arg3))

    @overload
    def findComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(arg0))

    @override
    @overload
    def resize(self, arg0: int, arg1: int):
        """public void java.awt.Component.resize(int,int)"""
        super(_Component, self).resize(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getHeight(self) -> int:
        """public int javax.swing.JComponent.getHeight()"""
        return int._wrap(super(JComponent, self).getHeight())

    @override
    @overload
    def getTransferHandler(self) -> 'TransferHandler':
        """public javax.swing.TransferHandler javax.swing.JComponent.getTransferHandler()"""
        return 'TransferHandler'._wrap(super(JComponent, self).getTransferHandler())

    @overload
    def imageUpdate(self, arg0: 'Image', arg1: int, arg2: int, arg3: int, arg4: int, arg5: int) -> bool:
        """public boolean java.awt.Component.imageUpdate(java.awt.Image,int,int,int,int,int)"""
        return bool._wrap(super(_Component, self).imageUpdate(arg0, _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4), _int.valueOf(arg5)))

    @override
    @overload
    def getWidth(self) -> int:
        """public int javax.swing.JComponent.getWidth()"""
        return int._wrap(super(JComponent, self).getWidth())

    @override
    @overload
    def transferFocusBackward(self):
        """public void java.awt.Component.transferFocusBackward()"""
        super(Component, self).transferFocusBackward()

    @overload
    def getPropertyChangeListeners(self, arg0: str) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners(java.lang.String)"""
        return List['PropertyChangeListener']._wrap(super(_Component, self).getPropertyChangeListeners(arg0))

    @staticmethod
    @overload
    def isLightweightComponent(arg0: 'Component') -> bool:
        """public static boolean javax.swing.JComponent.isLightweightComponent(java.awt.Component)"""
        return bool._wrap(_JComponent.isLightweightComponent(arg0))

    @override
    @overload
    def getBorder(self) -> 'Border':
        """public javax.swing.border.Border javax.swing.JComponent.getBorder()"""
        return 'Border'._wrap(super(JComponent, self).getBorder())

    @override
    @overload
    def printAll(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.printAll(java.awt.Graphics)"""
        super(_JComponent, self).printAll(arg0)

    @override
    @overload
    def addComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.addComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).addComponentListener(arg0)

    @override
    @overload
    def getBaselineResizeBehavior(self) -> 'BaselineResizeBehavior.Component$BaselineResizeBehavior':
        """public java.awt.Component$BaselineResizeBehavior javax.swing.JComponent.getBaselineResizeBehavior()"""
        return 'BaselineResizeBehavior.Component$BaselineResizeBehavior'._wrap(super(JComponent, self).getBaselineResizeBehavior())

    @override
    @overload
    def print(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.print(java.awt.Graphics)"""
        super(_JComponent, self).print(arg0)

    @override
    @overload
    def setInputVerifier(self, arg0: 'InputVerifier'):
        """public void javax.swing.JComponent.setInputVerifier(javax.swing.InputVerifier)"""
        super(_JComponent, self).setInputVerifier(arg0)

    @override
    @overload
    def addAncestorListener(self, arg0: 'AncestorListener'):
        """public void javax.swing.JComponent.addAncestorListener(javax.swing.event.AncestorListener)"""
        super(_JComponent, self).addAncestorListener(arg0)

    @override
    @overload
    def getFont(self) -> 'Font':
        """public java.awt.Font java.awt.Component.getFont()"""
        return 'Font'._wrap(super(Component, self).getFont())

    @override
    @overload
    def setFont(self, arg0: 'Font'):
        """public void javax.swing.JComponent.setFont(java.awt.Font)"""
        super(_JComponent, self).setFont(arg0)

    @override
    @overload
    def isOptimizedDrawingEnabled(self) -> bool:
        """public boolean javax.swing.JComponent.isOptimizedDrawingEnabled()"""
        return bool._wrap(super(JComponent, self).isOptimizedDrawingEnabled())

    @override
    @overload
    def isValidateRoot(self) -> bool:
        """public boolean javax.swing.JComponent.isValidateRoot()"""
        return bool._wrap(super(JComponent, self).isValidateRoot())

    @overload
    def prepareImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @override
    @overload
    def setForeground(self, arg0: 'Color'):
        """public void javax.swing.JComponent.setForeground(java.awt.Color)"""
        super(_JComponent, self).setForeground(arg0)

    @overload
    def mouseDrag(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDrag(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDrag(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def isOpaque(self) -> bool:
        """public boolean javax.swing.JComponent.isOpaque()"""
        return bool._wrap(super(JComponent, self).isOpaque())

    @overload
    def createVolatileImage(self, arg0: int, arg1: int, arg2: 'ImageCapabilities') -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int,java.awt.ImageCapabilities) throws java.awt.AWTException"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1), arg2))

    @override
    @overload
    def bounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.bounds()"""
        return 'Rectangle'._wrap(super(Component, self).bounds())

    @override
    @overload
    def update(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.update(java.awt.Graphics)"""
        super(_JComponent, self).update(arg0)

    @override
    @overload
    def add(self, arg0: 'PopupMenu'):
        """public void java.awt.Component.add(java.awt.PopupMenu)"""
        super(_Component, self).add(arg0)

    @override
    @overload
    def getToolTipText(self) -> str:
        """public java.lang.String javax.swing.JComponent.getToolTipText()"""
        return str._wrap(super(JComponent, self).getToolTipText())

    @override
    @overload
    def isVisible(self) -> bool:
        """public boolean java.awt.Component.isVisible()"""
        return bool._wrap(super(Component, self).isVisible())

    @override
    @overload
    def setDropTarget(self, arg0: 'DropTarget'):
        """public synchronized void java.awt.Component.setDropTarget(java.awt.dnd.DropTarget)"""
        super(_Component, self).setDropTarget(arg0)

    @override
    @overload
    def getLocationOnScreen(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocationOnScreen()"""
        return 'Point'._wrap(super(Component, self).getLocationOnScreen())

    @override
    @overload
    def getY(self) -> int:
        """public int javax.swing.JComponent.getY()"""
        return int._wrap(super(JComponent, self).getY())

    @overload
    def getComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def isMaximumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMaximumSizeSet()"""
        return bool._wrap(super(Component, self).isMaximumSizeSet())

    @override
    @overload
    def setAlignmentY(self, arg0: float):
        """public void javax.swing.JComponent.setAlignmentY(float)"""
        super(_JComponent, self).setAlignmentY(_float.valueOf(arg0))

    @override
    @overload
    def getRegisteredKeyStrokes(self) -> List['KeyStroke']:
        """public javax.swing.KeyStroke[] javax.swing.JComponent.getRegisteredKeyStrokes()"""
        return List['KeyStroke']._wrap(super(JComponent, self).getRegisteredKeyStrokes())

    @override
    @overload
    def isFocusable(self) -> bool:
        """public boolean java.awt.Component.isFocusable()"""
        return bool._wrap(super(Component, self).isFocusable())

    @override
    @overload
    def isFocusTraversalPolicyProvider(self) -> bool:
        """public final boolean java.awt.Container.isFocusTraversalPolicyProvider()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicyProvider())

    @override
    @overload
    def getMouseListeners(self) -> List['MouseListener']:
        """public synchronized java.awt.event.MouseListener[] java.awt.Component.getMouseListeners()"""
        return List['MouseListener']._wrap(super(Component, self).getMouseListeners())

    @override
    @overload
    def registerKeyboardAction(self, arg0: 'ActionListener', arg1: 'KeyStroke', arg2: int):
        """public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,javax.swing.KeyStroke,int)"""
        super(_JComponent, self).registerKeyboardAction(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def transferFocusUpCycle(self):
        """public void java.awt.Component.transferFocusUpCycle()"""
        super(Component, self).transferFocusUpCycle()

    @override
    @overload
    def removeKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.removeKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).removeKeyListener(arg0)

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: str, arg2: str):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,char,char)"""
        super(_JComponent, self).firePropertyChange(arg0, _char.valueOf(arg1), _char.valueOf(arg2))

    @override
    @overload
    def getMouseMotionListeners(self) -> List['MouseMotionListener']:
        """public synchronized java.awt.event.MouseMotionListener[] java.awt.Component.getMouseMotionListeners()"""
        return List['MouseMotionListener']._wrap(super(Component, self).getMouseMotionListeners())

    @override
    @overload
    def getAutoscrolls(self) -> bool:
        """public boolean javax.swing.JComponent.getAutoscrolls()"""
        return bool._wrap(super(JComponent, self).getAutoscrolls())

    @override
    @overload
    def addContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.addContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).addContainerListener(arg0)

    @override
    @overload
    def isFocusTraversable(self) -> bool:
        """public boolean java.awt.Component.isFocusTraversable()"""
        return bool._wrap(super(Component, self).isFocusTraversable())

    @overload
    def mouseExit(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseExit(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseExit(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getBounds(self, arg0: 'Rectangle') -> 'Rectangle':
        """public java.awt.Rectangle javax.swing.JComponent.getBounds(java.awt.Rectangle)"""
        return 'Rectangle'._wrap(super(_JComponent, self).getBounds(arg0))

    @override
    @overload
    def setToolTipText(self, arg0: str):
        """public void javax.swing.JComponent.setToolTipText(java.lang.String)"""
        super(_JComponent, self).setToolTipText(arg0)

    @override
    @overload
    def setAutoscrolls(self, arg0: bool):
        """public void javax.swing.JComponent.setAutoscrolls(boolean)"""
        super(_JComponent, self).setAutoscrolls(_boolean.valueOf(arg0))

    @override
    @overload
    def setComponentPopupMenu(self, arg0: 'JPopupMenu'):
        """public void javax.swing.JComponent.setComponentPopupMenu(javax.swing.JPopupMenu)"""
        super(_JComponent, self).setComponentPopupMenu(arg0)

    @override
    @overload
    def setMixingCutoutShape(self, arg0: 'Shape'):
        """public void java.awt.Component.setMixingCutoutShape(java.awt.Shape)"""
        super(_Component, self).setMixingCutoutShape(arg0)

    @override
    @overload
    def getVisibleRect(self) -> 'Rectangle':
        """public java.awt.Rectangle javax.swing.JComponent.getVisibleRect()"""
        return 'Rectangle'._wrap(super(JComponent, self).getVisibleRect())

    @override
    @overload
    def requestFocus(self, arg0: 'Cause'):
        """public void java.awt.Component.requestFocus(java.awt.event.FocusEvent$Cause)"""
        super(_Component, self).requestFocus(arg0)

    @overload
    def createImage(self, arg0: int, arg1: int) -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(int,int)"""
        return 'Image'._wrap(super(_Component, self).createImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def putClientProperty(self, arg0: object, arg1: object):
        """public final void javax.swing.JComponent.putClientProperty(java.lang.Object,java.lang.Object)"""
        super(_JComponent, self).putClientProperty(arg0, arg1)

    @override
    @overload
    def getVetoableChangeListeners(self) -> List['VetoableChangeListener']:
        """public synchronized java.beans.VetoableChangeListener[] javax.swing.JComponent.getVetoableChangeListeners()"""
        return List['VetoableChangeListener']._wrap(super(JComponent, self).getVetoableChangeListeners())

    @override
    @overload
    def scrollRectToVisible(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.scrollRectToVisible(java.awt.Rectangle)"""
        super(_JComponent, self).scrollRectToVisible(arg0)

    @override
    @overload
    def getTopLevelAncestor(self) -> 'Container':
        """public java.awt.Container javax.swing.JComponent.getTopLevelAncestor()"""
        return 'Container'._wrap(super(JComponent, self).getTopLevelAncestor())

    @override
    @overload
    def isRequestFocusEnabled(self) -> bool:
        """public boolean javax.swing.JComponent.isRequestFocusEnabled()"""
        return bool._wrap(super(JComponent, self).isRequestFocusEnabled())

    @override
    @overload
    def getFocusListeners(self) -> List['FocusListener']:
        """public synchronized java.awt.event.FocusListener[] java.awt.Component.getFocusListeners()"""
        return List['FocusListener']._wrap(super(Component, self).getFocusListeners())

    @override
    @overload
    def setLayout(self, arg0: 'LayoutManager'):
        """public void java.awt.Container.setLayout(java.awt.LayoutManager)"""
        super(_Container, self).setLayout(arg0)

    @overload
    def add(self, arg0: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0))

    @override
    @overload
    def getMouseWheelListeners(self) -> List['MouseWheelListener']:
        """public synchronized java.awt.event.MouseWheelListener[] java.awt.Component.getMouseWheelListeners()"""
        return List['MouseWheelListener']._wrap(super(Component, self).getMouseWheelListeners())

    @override
    @overload
    def reshape(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void javax.swing.JComponent.reshape(int,int,int,int)"""
        super(_JComponent, self).reshape(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def setTransferHandler(self, arg0: 'TransferHandler'):
        """public void javax.swing.JComponent.setTransferHandler(javax.swing.TransferHandler)"""
        super(_JComponent, self).setTransferHandler(arg0)

    @override
    @overload
    def setLocation(self, arg0: int, arg1: int):
        """public void java.awt.Component.setLocation(int,int)"""
        super(_Component, self).setLocation(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def removeInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.removeInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).removeInputMethodListener(arg0)

    @override
    @overload
    def setFocusable(self, arg0: bool):
        """public void java.awt.Component.setFocusable(boolean)"""
        super(_Component, self).setFocusable(_boolean.valueOf(arg0))

    @override
    @overload
    def paintComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.paintComponents(java.awt.Graphics)"""
        super(_Container, self).paintComponents(arg0)

    @override
    @overload
    def addFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.addFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).addFocusListener(arg0)

    @overload
    def prepareImage(self, arg0: 'Image', arg1: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, arg1))

    @override
    @overload
    def addKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.addKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).addKeyListener(arg0)

    @override
    @overload
    def resize(self, arg0: 'Dimension'):
        """public void java.awt.Component.resize(java.awt.Dimension)"""
        super(_Component, self).resize(arg0)

    @override
    @overload
    def setComponentZOrder(self, arg0: 'Component', arg1: int):
        """public void java.awt.Container.setComponentZOrder(java.awt.Component,int)"""
        super(_Container, self).setComponentZOrder(arg0, _int.valueOf(arg1))

    @override
    @overload
    def list(self):
        """public void java.awt.Component.list()"""
        super(Component, self).list()

    @overload
    def add(self, arg0: str, arg1: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.lang.String,java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, arg1))

    @override
    @overload
    def paintImmediately(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void javax.swing.JComponent.paintImmediately(int,int,int,int)"""
        super(_JComponent, self).paintImmediately(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def getMinimumSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getMinimumSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getMinimumSize())

    @overload
    def setValue(self, arg0: float):
        """public void com.badlogic.gdx.tools.flame.Slider.setValue(float)"""
        super(_Slider, self).setValue(_float.valueOf(arg0))

    @override
    @overload
    def setEnabled(self, arg0: bool):
        """public void javax.swing.JComponent.setEnabled(boolean)"""
        super(_JComponent, self).setEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def hasFocus(self) -> bool:
        """public boolean java.awt.Component.hasFocus()"""
        return bool._wrap(super(Component, self).hasFocus())

    @overload
    def createVolatileImage(self, arg0: int, arg1: int) -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int)"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.removeHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).removeHierarchyListener(arg0)

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.awt.Component.toString()"""
        return str._wrap(super(Component, self).toString())

    @override
    @overload
    def addMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.addMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).addMouseListener(arg0)

    @override
    @overload
    def isFocusOwner(self) -> bool:
        """public boolean java.awt.Component.isFocusOwner()"""
        return bool._wrap(super(Component, self).isFocusOwner())

    @override
    @overload
    def getAccessibleContext(self) -> 'AccessibleContext':
        """public javax.accessibility.AccessibleContext javax.swing.JPanel.getAccessibleContext()"""
        return 'AccessibleContext'._wrap(super(JPanel, self).getAccessibleContext())

    @overload
    def postEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.postEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).postEvent(arg0))

    @overload
    def getLocation(self, arg0: 'Point') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getLocation(java.awt.Point)"""
        return 'Point'._wrap(super(_JComponent, self).getLocation(arg0))

    @overload
    def getBaseline(self, arg0: int, arg1: int) -> int:
        """public int javax.swing.JComponent.getBaseline(int,int)"""
        return int._wrap(super(_JComponent, self).getBaseline(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def findComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeNotify(self):
        """public void javax.swing.JComponent.removeNotify()"""
        super(JComponent, self).removeNotify()

    @override
    @overload
    def getForeground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getForeground()"""
        return 'Color'._wrap(super(Component, self).getForeground())

    @override
    @overload
    def show(self):
        """public void java.awt.Component.show()"""
        super(Component, self).show()

    @override
    @overload
    def isDoubleBuffered(self) -> bool:
        """public boolean javax.swing.JComponent.isDoubleBuffered()"""
        return bool._wrap(super(JComponent, self).isDoubleBuffered())

    @override
    @overload
    def isFocusCycleRoot(self) -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot()"""
        return bool._wrap(super(Container, self).isFocusCycleRoot())

    @override
    @overload
    def addMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.addMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).addMouseWheelListener(arg0)

    @override
    @overload
    def hide(self):
        """public void javax.swing.JComponent.hide()"""
        super(JComponent, self).hide()

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def revalidate(self):
        """public void javax.swing.JComponent.revalidate()"""
        super(JComponent, self).revalidate()

    @override
    @overload
    def getActionMap(self) -> 'ActionMap':
        """public final javax.swing.ActionMap javax.swing.JComponent.getActionMap()"""
        return 'ActionMap'._wrap(super(JComponent, self).getActionMap())

    @override
    @overload
    def requestFocusInWindow(self) -> bool:
        """public boolean javax.swing.JComponent.requestFocusInWindow()"""
        return bool._wrap(super(JComponent, self).requestFocusInWindow())

    @overload
    def action(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.action(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).action(arg0, arg1))

    @override
    @overload
    def isManagingFocus(self) -> bool:
        """public boolean javax.swing.JComponent.isManagingFocus()"""
        return bool._wrap(super(JComponent, self).isManagingFocus())

    @override
    @overload
    def isLightweight(self) -> bool:
        """public boolean java.awt.Component.isLightweight()"""
        return bool._wrap(super(Component, self).isLightweight())

    @override
    @overload
    def setAlignmentX(self, arg0: float):
        """public void javax.swing.JComponent.setAlignmentX(float)"""
        super(_JComponent, self).setAlignmentX(_float.valueOf(arg0))

    @overload
    def getFocusTraversalKeys(self, arg0: int) -> 'Set':
        """public java.util.Set<java.awt.AWTKeyStroke> java.awt.Container.getFocusTraversalKeys(int)"""
        return 'Set'._wrap(super(_Container, self).getFocusTraversalKeys(_int.valueOf(arg0)))

    @override
    @overload
    def setFocusTraversalKeysEnabled(self, arg0: bool):
        """public void java.awt.Component.setFocusTraversalKeysEnabled(boolean)"""
        super(_Component, self).setFocusTraversalKeysEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def remove(self, arg0: 'Component'):
        """public void java.awt.Container.remove(java.awt.Component)"""
        super(_Container, self).remove(arg0)

    @overload
    def getInsets(self, arg0: 'Insets') -> 'Insets':
        """public java.awt.Insets javax.swing.JComponent.getInsets(java.awt.Insets)"""
        return 'Insets'._wrap(super(_JComponent, self).getInsets(arg0))

    @override
    @overload
    def insets(self) -> 'Insets':
        """public java.awt.Insets java.awt.Container.insets()"""
        return 'Insets'._wrap(super(Container, self).insets())

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int):
        """public void javax.swing.JComponent.repaint(long,int,int,int,int)"""
        super(_JComponent, self).repaint(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4))

    @override
    @overload
    def setFocusTraversalPolicy(self, arg0: 'FocusTraversalPolicy'):
        """public void java.awt.Container.setFocusTraversalPolicy(java.awt.FocusTraversalPolicy)"""
        super(_Container, self).setFocusTraversalPolicy(arg0)

    @overload
    def getSize(self, arg0: 'Dimension') -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getSize(java.awt.Dimension)"""
        return 'Dimension'._wrap(super(_JComponent, self).getSize(arg0))

    @override
    @overload
    def enable(self, arg0: bool):
        """public void java.awt.Component.enable(boolean)"""
        super(_Component, self).enable(_boolean.valueOf(arg0))

    @overload
    def getToolTipLocation(self, arg0: 'MouseEvent') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getToolTipLocation(java.awt.event.MouseEvent)"""
        return 'Point'._wrap(super(_JComponent, self).getToolTipLocation(arg0))

    @override
    @overload
    def addPropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Container.addPropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Container, self).addPropertyChangeListener(arg0)

    @overload
    def getComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(arg0))

    @override
    @overload
    def size(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.size()"""
        return 'Dimension'._wrap(super(Component, self).size())

    @override
    @overload
    def getVerifyInputWhenFocusTarget(self) -> bool:
        """public boolean javax.swing.JComponent.getVerifyInputWhenFocusTarget()"""
        return bool._wrap(super(JComponent, self).getVerifyInputWhenFocusTarget())

    @overload
    def mouseMove(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseMove(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseMove(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getActionForKeyStroke(self, arg0: 'KeyStroke') -> 'ActionListener':
        """public java.awt.event.ActionListener javax.swing.JComponent.getActionForKeyStroke(javax.swing.KeyStroke)"""
        return 'ActionListener'._wrap(super(_JComponent, self).getActionForKeyStroke(arg0))

    @overload
    def lostFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.lostFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).lostFocus(arg0, arg1))

    @override
    @overload
    def isMinimumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMinimumSizeSet()"""
        return bool._wrap(super(Component, self).isMinimumSizeSet())

    @override
    @overload
    def isForegroundSet(self) -> bool:
        """public boolean java.awt.Component.isForegroundSet()"""
        return bool._wrap(super(Component, self).isForegroundSet())

    @overload
    def getMousePosition(self, arg0: bool) -> 'Point':
        """public java.awt.Point java.awt.Container.getMousePosition(boolean) throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(_Container, self).getMousePosition(_boolean.valueOf(arg0)))

    @overload
    def getFontMetrics(self, arg0: 'Font') -> 'FontMetrics':
        """public java.awt.FontMetrics javax.swing.JComponent.getFontMetrics(java.awt.Font)"""
        return 'FontMetrics'._wrap(super(_JComponent, self).getFontMetrics(arg0))

    @overload
    def getListeners(self, arg0: 'Class') -> List['EventListener']:
        """public <T extends java.util.EventListener> T[] javax.swing.JComponent.getListeners(java.lang.Class<T>)"""
        return List['EventListener']._wrap(super(_JComponent, self).getListeners(arg0))

    @override
    @overload
    def getHierarchyBoundsListeners(self) -> List['HierarchyBoundsListener']:
        """public synchronized java.awt.event.HierarchyBoundsListener[] java.awt.Component.getHierarchyBoundsListeners()"""
        return List['HierarchyBoundsListener']._wrap(super(Component, self).getHierarchyBoundsListeners())

    @override
    @overload
    def minimumSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.minimumSize()"""
        return 'Dimension'._wrap(super(Container, self).minimumSize())

    @overload
    def handleEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.handleEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).handleEvent(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @override
    @overload
    def getComponentListeners(self) -> List['ComponentListener']:
        """public synchronized java.awt.event.ComponentListener[] java.awt.Component.getComponentListeners()"""
        return List['ComponentListener']._wrap(super(Component, self).getComponentListeners())

    @override
    @overload
    def computeVisibleRect(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.computeVisibleRect(java.awt.Rectangle)"""
        super(_JComponent, self).computeVisibleRect(arg0)

    @override
    @overload
    def deliverEvent(self, arg0: 'Event'):
        """public void java.awt.Container.deliverEvent(java.awt.Event)"""
        super(_Container, self).deliverEvent(arg0)

    @override
    @overload
    def addHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.addHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).addHierarchyBoundsListener(arg0)

    @override
    @overload
    def getAlignmentX(self) -> float:
        """public float javax.swing.JComponent.getAlignmentX()"""
        return float._wrap(super(JComponent, self).getAlignmentX())

    @overload
    def add(self, arg0: 'Component', arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component,int)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def repaint(self):
        """public void java.awt.Component.repaint()"""
        super(Component, self).repaint()

    @overload
    def gotFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.gotFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).gotFocus(arg0, arg1))

    @override
    @overload
    def createToolTip(self) -> 'JToolTip':
        """public javax.swing.JToolTip javax.swing.JComponent.createToolTip()"""
        return 'JToolTip'._wrap(super(JComponent, self).createToolTip())

    @overload
    def getToolTipText(self, arg0: 'MouseEvent') -> str:
        """public java.lang.String javax.swing.JComponent.getToolTipText(java.awt.event.MouseEvent)"""
        return str._wrap(super(_JComponent, self).getToolTipText(arg0))

    @override
    @overload
    def printComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.printComponents(java.awt.Graphics)"""
        super(_Container, self).printComponents(arg0)

    @override
    @overload
    def getColorModel(self) -> 'ColorModel':
        """public java.awt.image.ColorModel java.awt.Component.getColorModel()"""
        return 'ColorModel'._wrap(super(Component, self).getColorModel())

    @override
    @overload
    def setFocusTraversalPolicyProvider(self, arg0: bool):
        """public final void java.awt.Container.setFocusTraversalPolicyProvider(boolean)"""
        super(_Container, self).setFocusTraversalPolicyProvider(_boolean.valueOf(arg0))

    @overload
    def getComponentZOrder(self, arg0: 'Component') -> int:
        """public int java.awt.Container.getComponentZOrder(java.awt.Component)"""
        return int._wrap(super(_Container, self).getComponentZOrder(arg0))

    @override
    @overload
    def getDebugGraphicsOptions(self) -> int:
        """public int javax.swing.JComponent.getDebugGraphicsOptions()"""
        return int._wrap(super(JComponent, self).getDebugGraphicsOptions())

    @overload
    def areFocusTraversalKeysSet(self, arg0: int) -> bool:
        """public boolean java.awt.Container.areFocusTraversalKeysSet(int)"""
        return bool._wrap(super(_Container, self).areFocusTraversalKeysSet(_int.valueOf(arg0)))

    @override
    @overload
    def getSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.getSize()"""
        return 'Dimension'._wrap(super(Component, self).getSize())

    @override
    @overload
    def setName(self, arg0: str):
        """public void java.awt.Component.setName(java.lang.String)"""
        super(_Component, self).setName(arg0)

    @override
    @overload
    def repaint(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.repaint(java.awt.Rectangle)"""
        super(_JComponent, self).repaint(arg0)

    @overload
    def getClientProperty(self, arg0: object) -> object:
        """public final java.lang.Object javax.swing.JComponent.getClientProperty(java.lang.Object)"""
        return object._wrap(super(_JComponent, self).getClientProperty(arg0))

    @override
    @overload
    def unregisterKeyboardAction(self, arg0: 'KeyStroke'):
        """public void javax.swing.JComponent.unregisterKeyboardAction(javax.swing.KeyStroke)"""
        super(_JComponent, self).unregisterKeyboardAction(arg0)

    @overload
    def requestFocus(self, arg0: bool) -> bool:
        """public boolean javax.swing.JComponent.requestFocus(boolean)"""
        return bool._wrap(super(_JComponent, self).requestFocus(_boolean.valueOf(arg0)))

    @override
    @overload
    def setActionMap(self, arg0: 'ActionMap'):
        """public final void javax.swing.JComponent.setActionMap(javax.swing.ActionMap)"""
        super(_JComponent, self).setActionMap(arg0)

    @override
    @overload
    def getX(self) -> int:
        """public int javax.swing.JComponent.getX()"""
        return int._wrap(super(JComponent, self).getX())

    @overload
    def mouseEnter(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseEnter(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseEnter(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def updateUI(self):
        """public void javax.swing.JPanel.updateUI()"""
        super(JPanel, self).updateUI()

    @override
    @overload
    def getToolkit(self) -> 'Toolkit':
        """public java.awt.Toolkit java.awt.Component.getToolkit()"""
        return 'Toolkit'._wrap(super(Component, self).getToolkit())

    @override
    @overload
    def isCursorSet(self) -> bool:
        """public boolean java.awt.Component.isCursorSet()"""
        return bool._wrap(super(Component, self).isCursorSet())

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object, arg2: int):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object,int)"""
        super(_Container, self).add(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def setPreferredSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setPreferredSize(java.awt.Dimension)"""
        super(_JComponent, self).setPreferredSize(arg0)

    @override
    @overload
    def setBounds(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.setBounds(int,int,int,int)"""
        super(_Component, self).setBounds(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def isFocusTraversalPolicySet(self) -> bool:
        """public boolean java.awt.Container.isFocusTraversalPolicySet()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicySet())

    @override
    @overload
    def requestFocus(self):
        """public void javax.swing.JComponent.requestFocus()"""
        super(JComponent, self).requestFocus()

    @override
    @overload
    def getAncestorListeners(self) -> List['AncestorListener']:
        """public javax.swing.event.AncestorListener[] javax.swing.JComponent.getAncestorListeners()"""
        return List['AncestorListener']._wrap(super(JComponent, self).getAncestorListeners())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool._wrap(super(_object, self).equals(arg0))

    @overload
    def getInputMap(self, arg0: int) -> 'InputMap':
        """public final javax.swing.InputMap javax.swing.JComponent.getInputMap(int)"""
        return 'InputMap'._wrap(super(_JComponent, self).getInputMap(_int.valueOf(arg0)))

    @override
    @overload
    def isEnabled(self) -> bool:
        """public boolean java.awt.Component.isEnabled()"""
        return bool._wrap(super(Component, self).isEnabled())

    @override
    @overload
    def move(self, arg0: int, arg1: int):
        """public void java.awt.Component.move(int,int)"""
        super(_Component, self).move(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getName(self) -> str:
        """public java.lang.String java.awt.Component.getName()"""
        return str._wrap(super(Component, self).getName())

    @override
    @overload
    def addMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.addMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).addMouseMotionListener(arg0)

    @override
    @overload
    def getIgnoreRepaint(self) -> bool:
        """public boolean java.awt.Component.getIgnoreRepaint()"""
        return bool._wrap(super(Component, self).getIgnoreRepaint())

    @overload
    def isFocusCycleRoot(self, arg0: 'Container') -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot(java.awt.Container)"""
        return bool._wrap(super(_Container, self).isFocusCycleRoot(arg0))

    @override
    @overload
    def getGraphics(self) -> 'Graphics':
        """public java.awt.Graphics javax.swing.JComponent.getGraphics()"""
        return 'Graphics'._wrap(super(JComponent, self).getGraphics())

    @override
    @overload
    def setLocale(self, arg0: 'Locale'):
        """public void java.awt.Component.setLocale(java.util.Locale)"""
        super(_Component, self).setLocale(arg0)

    @override
    @overload
    def paintAll(self, arg0: 'Graphics'):
        """public void java.awt.Component.paintAll(java.awt.Graphics)"""
        super(_Component, self).paintAll(arg0)

    @override
    @overload
    def setDoubleBuffered(self, arg0: bool):
        """public void javax.swing.JComponent.setDoubleBuffered(boolean)"""
        super(_JComponent, self).setDoubleBuffered(_boolean.valueOf(arg0))

    @override
    @overload
    def isPreferredSizeSet(self) -> bool:
        """public boolean java.awt.Component.isPreferredSizeSet()"""
        return bool._wrap(super(Component, self).isPreferredSizeSet())

    @override
    @overload
    def addInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.addInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).addInputMethodListener(arg0)

    @override
    @overload
    def removeMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.removeMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).removeMouseWheelListener(arg0)

    @override
    @overload
    def getInputMap(self) -> 'InputMap':
        """public final javax.swing.InputMap javax.swing.JComponent.getInputMap()"""
        return 'InputMap'._wrap(super(JComponent, self).getInputMap())

    @override
    @overload
    def setVisible(self, arg0: bool):
        """public void javax.swing.JComponent.setVisible(boolean)"""
        super(_JComponent, self).setVisible(_boolean.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,byte,byte)"""
        super(_Component, self).firePropertyChange(arg0, _byte.valueOf(arg1), _byte.valueOf(arg2))

    @override
    @overload
    def getUIClassID(self) -> str:
        """public java.lang.String javax.swing.JPanel.getUIClassID()"""
        return str._wrap(super(JPanel, self).getUIClassID())

    @override
    @overload
    def transferFocusDownCycle(self):
        """public void java.awt.Container.transferFocusDownCycle()"""
        super(Container, self).transferFocusDownCycle()

    @override
    @overload
    def getNextFocusableComponent(self) -> 'Component':
        """public java.awt.Component javax.swing.JComponent.getNextFocusableComponent()"""
        return 'Component'._wrap(super(JComponent, self).getNextFocusableComponent())

    @override
    @overload
    def getUI(self) -> 'PanelUI':
        """public javax.swing.plaf.PanelUI javax.swing.JPanel.getUI()"""
        return 'PanelUI'._wrap(super(JPanel, self).getUI())

    @override
    @overload
    def setBounds(self, arg0: 'Rectangle'):
        """public void java.awt.Component.setBounds(java.awt.Rectangle)"""
        super(_Component, self).setBounds(arg0)

    @override
    @overload
    def repaint(self, arg0: int):
        """public void java.awt.Component.repaint(long)"""
        super(_Component, self).repaint(_long.valueOf(arg0))

    @override
    @overload
    def removeHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.removeHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).removeHierarchyBoundsListener(arg0)

    @override
    @overload
    def getComponentPopupMenu(self) -> 'JPopupMenu':
        """public javax.swing.JPopupMenu javax.swing.JComponent.getComponentPopupMenu()"""
        return 'JPopupMenu'._wrap(super(JComponent, self).getComponentPopupMenu())

    @override
    @overload
    def getMousePosition(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getMousePosition() throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(Component, self).getMousePosition())

    @override
    @overload
    def getComponentCount(self) -> int:
        """public int java.awt.Container.getComponentCount()"""
        return int._wrap(super(Container, self).getComponentCount())

    @override
    @overload
    def getInputMethodRequests(self) -> 'InputMethodRequests':
        """public java.awt.im.InputMethodRequests java.awt.Component.getInputMethodRequests()"""
        return 'InputMethodRequests'._wrap(super(Component, self).getInputMethodRequests())

    @override
    @overload
    def setMaximumSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setMaximumSize(java.awt.Dimension)"""
        super(_JComponent, self).setMaximumSize(arg0)

    @override
    @overload
    def setRequestFocusEnabled(self, arg0: bool):
        """public void javax.swing.JComponent.setRequestFocusEnabled(boolean)"""
        super(_JComponent, self).setRequestFocusEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def setFocusTraversalKeys(self, arg0: int, arg1: 'Set'):
        """public void javax.swing.JComponent.setFocusTraversalKeys(int,java.util.Set<? extends java.awt.AWTKeyStroke>)"""
        super(_JComponent, self).setFocusTraversalKeys(_int.valueOf(arg0), arg1)

    @overload
    def inside(self, arg0: int, arg1: int) -> bool:
        """public boolean java.awt.Component.inside(int,int)"""
        return bool._wrap(super(_Component, self).inside(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def requestDefaultFocus(self) -> bool:
        """public boolean javax.swing.JComponent.requestDefaultFocus()"""
        return bool._wrap(super(JComponent, self).requestDefaultFocus())

    @override
    @overload
    def disable(self):
        """public void javax.swing.JComponent.disable()"""
        super(JComponent, self).disable()

    @override
    @overload
    def enableInputMethods(self, arg0: bool):
        """public void java.awt.Component.enableInputMethods(boolean)"""
        super(_Component, self).enableInputMethods(_boolean.valueOf(arg0))

    @override
    @overload
    def layout(self):
        """public void java.awt.Container.layout()"""
        super(Container, self).layout()

    @override
    @overload
    def getInputMethodListeners(self) -> List['InputMethodListener']:
        """public synchronized java.awt.event.InputMethodListener[] java.awt.Component.getInputMethodListeners()"""
        return List['InputMethodListener']._wrap(super(Component, self).getInputMethodListeners())

    @override
    @overload
    def paint(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.paint(java.awt.Graphics)"""
        super(_JComponent, self).paint(arg0)

    @override
    @overload
    def transferFocus(self):
        """public void java.awt.Component.transferFocus()"""
        super(Component, self).transferFocus()

    @override
    @overload
    def removeComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.removeComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).removeComponentListener(arg0)

    @override
    @overload
    def getCursor(self) -> 'Cursor':
        """public java.awt.Cursor java.awt.Component.getCursor()"""
        return 'Cursor'._wrap(super(Component, self).getCursor())

    @override
    @overload
    def setMinimumSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setMinimumSize(java.awt.Dimension)"""
        super(_JComponent, self).setMinimumSize(arg0)

    @override
    @overload
    def getContainerListeners(self) -> List['ContainerListener']:
        """public synchronized java.awt.event.ContainerListener[] java.awt.Container.getContainerListeners()"""
        return List['ContainerListener']._wrap(super(Container, self).getContainerListeners())

    @override
    @overload
    def setLocation(self, arg0: 'Point'):
        """public void java.awt.Component.setLocation(java.awt.Point)"""
        super(_Component, self).setLocation(arg0)

    @override
    @overload
    def setSize(self, arg0: 'Dimension'):
        """public void java.awt.Component.setSize(java.awt.Dimension)"""
        super(_Component, self).setSize(arg0)

    @overload
    def getValue(self) -> float:
        """public float com.badlogic.gdx.tools.flame.Slider.getValue()"""
        return float._wrap(super(Slider, self).getValue())

    @override
    @overload
    def removeAll(self):
        """public void java.awt.Container.removeAll()"""
        super(Container, self).removeAll()

    @overload
    def getPopupLocation(self, arg0: 'MouseEvent') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getPopupLocation(java.awt.event.MouseEvent)"""
        return 'Point'._wrap(super(_JComponent, self).getPopupLocation(arg0))

    @overload
    def isAncestorOf(self, arg0: 'Component') -> bool:
        """public boolean java.awt.Container.isAncestorOf(java.awt.Component)"""
        return bool._wrap(super(_Container, self).isAncestorOf(arg0))

    @override
    @overload
    def setOpaque(self, arg0: bool):
        """public void javax.swing.JComponent.setOpaque(boolean)"""
        super(_JComponent, self).setOpaque(_boolean.valueOf(arg0))

    @overload
    def contains(self, arg0: int, arg1: int) -> bool:
        """public boolean javax.swing.JComponent.contains(int,int)"""
        return bool._wrap(super(_JComponent, self).contains(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def setCursor(self, arg0: 'Cursor'):
        """public void java.awt.Component.setCursor(java.awt.Cursor)"""
        super(_Component, self).setCursor(arg0)

    @override
    @overload
    def validate(self):
        """public void java.awt.Container.validate()"""
        super(Container, self).validate()

    @override
    @overload
    def getMaximumSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getMaximumSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getMaximumSize())

    @override
    @overload
    def getBackground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getBackground()"""
        return 'Color'._wrap(super(Component, self).getBackground())

    @overload
    def createImage(self, arg0: 'ImageProducer') -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(java.awt.image.ImageProducer)"""
        return 'Image'._wrap(super(_Component, self).createImage(arg0))

    @override
    @overload
    def setVerifyInputWhenFocusTarget(self, arg0: bool):
        """public void javax.swing.JComponent.setVerifyInputWhenFocusTarget(boolean)"""
        super(_JComponent, self).setVerifyInputWhenFocusTarget(_boolean.valueOf(arg0))

    @override
    @overload
    def removePropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0, arg1)

    @override
    @overload
    def countComponents(self) -> int:
        """public int java.awt.Container.countComponents()"""
        return int._wrap(super(Container, self).countComponents()) 
 
 
# CLASS: com.badlogic.gdx.tools.flame.ColorInfluencerPanel
from pyquantum_helper import import_once as _import_once
import javax.accessibility.AccessibleContext as AccessibleContext
import javax.swing.JToolTip as JToolTip
import java.awt.event.HierarchyBoundsListener as HierarchyBoundsListener
import java.awt.event.ActionListener as _ActionListener
_ActionListener = _ActionListener
import java.awt.ComponentOrientation as _ComponentOrientation
_ComponentOrientation = _ComponentOrientation
import java.awt.image.ImageProducer as ImageProducer
import java.awt.GraphicsConfiguration as GraphicsConfiguration
import java.awt.Graphics as _Graphics
_Graphics = _Graphics
import javax.swing.JToolTip as _JToolTip
_JToolTip = _JToolTip
import java.awt.Container as _Container
_Container = _Container
import java.awt.MenuComponent as MenuComponent
import java.awt.im.InputMethodRequests as _InputMethodRequests
_InputMethodRequests = _InputMethodRequests
import java.awt.FocusTraversalPolicy as _FocusTraversalPolicy
_FocusTraversalPolicy = _FocusTraversalPolicy
import java.lang.Byte as _byte
import java.awt.Dimension as Dimension
import java.awt.Font as _Font
_Font = _Font
import javax.swing.plaf.PanelUI as _PanelUI
_PanelUI = _PanelUI
import java.awt.event.ContainerListener as ContainerListener
import javax.swing.event.AncestorListener as AncestorListener
import java.awt.AWTEvent as AWTEvent
import javax.swing.JPanel as JPanel
import java.awt.image.ColorModel as _ColorModel
_ColorModel = _ColorModel
import java.lang.Object as _object
import java.awt.ComponentOrientation as ComponentOrientation
import java.awt.im.InputContext as _InputContext
_InputContext = _InputContext
from builtins import float
import java.awt.event.HierarchyListener as HierarchyListener
import java.awt.event.InputMethodListener as InputMethodListener
from typing import List
import java.awt.event.MouseWheelListener as _MouseWheelListener
_MouseWheelListener = _MouseWheelListener
import java.awt.event.KeyListener as KeyListener
import java.awt.Component as Component
from builtins import int
import java.awt.LayoutManager as LayoutManager
import java.awt.FontMetrics as _FontMetrics
_FontMetrics = _FontMetrics
import java.awt.Container as Container
from builtins import type
import java.awt.image.VolatileImage as _VolatileImage
_VolatileImage = _VolatileImage
import java.awt.Shape as Shape
import com.badlogic.gdx.tools.flame.EditorPanel as _EditorPanel
_EditorPanel = _EditorPanel
import java.awt.Rectangle as Rectangle
import java.awt.event.ContainerListener as _ContainerListener
_ContainerListener = _ContainerListener
import java.awt.event.HierarchyListener as _HierarchyListener
_HierarchyListener = _HierarchyListener
import java.lang.String as _string
import javax.swing.InputVerifier as _InputVerifier
_InputVerifier = _InputVerifier
import java.awt.Insets as _Insets
_Insets = _Insets
import javax.swing.border.Border as _Border
_Border = _Border
import java.awt.event.ComponentListener as _ComponentListener
_ComponentListener = _ComponentListener
import javax.swing.ActionMap as ActionMap
import java.beans.VetoableChangeListener as VetoableChangeListener
import java.awt.event.ComponentListener as ComponentListener
import javax.swing.KeyStroke as KeyStroke
import java.beans.VetoableChangeListener as _VetoableChangeListener
_VetoableChangeListener = _VetoableChangeListener
from builtins import object
try:
    from pygdx.graphics.g3d.particles import influencers
except ImportError:
    influencers = _import_once("pygdx.graphics.g3d.particles.influencers")

import java.awt.event.KeyListener as _KeyListener
_KeyListener = _KeyListener
import java.awt.Component.BaselineResizeBehavior as BaselineResizeBehavior
import java.awt.Component as _Component_BaselineResizeBehavior
_BaselineResizeBehavior = _Component_BaselineResizeBehavior.BaselineResizeBehavior
import java.awt.Cursor as _Cursor
_Cursor = _Cursor
import java.awt.im.InputMethodRequests as InputMethodRequests
import java.lang.Long as _long
import javax.swing.JPanel as _JPanel
_JPanel = _JPanel
import java.awt.event.FocusListener as _FocusListener
_FocusListener = _FocusListener
import java.lang.Character as _char
import javax.swing.TransferHandler as TransferHandler
import java.awt.event.FocusEvent.Cause as Cause
import javax.swing.JComponent as JComponent
import javax.accessibility.AccessibleContext as _AccessibleContext
_AccessibleContext = _AccessibleContext
import java.awt.event.MouseWheelListener as MouseWheelListener
import java.util.Set as _Set
_Set = _Set
import java.awt.image.ColorModel as ColorModel
import java.lang.Boolean as _boolean
import java.awt.event.MouseMotionListener as MouseMotionListener
import java.util.EventListener as EventListener
import java.awt.Insets as Insets
import javax.swing.KeyStroke as _KeyStroke
_KeyStroke = _KeyStroke
import java.awt.GraphicsConfiguration as _GraphicsConfiguration
_GraphicsConfiguration = _GraphicsConfiguration
import java.awt.dnd.DropTarget as _DropTarget
_DropTarget = _DropTarget
from builtins import bool
import java.beans.PropertyChangeListener as _PropertyChangeListener
_PropertyChangeListener = _PropertyChangeListener
import java.awt.LayoutManager as _LayoutManager
_LayoutManager = _LayoutManager
import java.awt.PopupMenu as PopupMenu
import java.util.EventListener as _EventListener
_EventListener = _EventListener
import java.awt.im.InputContext as InputContext
import java.awt.Component as _Component
_Component = _Component
import java.awt.Font as Font
import java.awt.image.VolatileImage as VolatileImage
import java.awt.dnd.DropTarget as DropTarget
import java.lang.String as _String
_String = _String
import java.lang.Float as _float
import java.awt.Cursor as Cursor
import java.awt.event.MouseListener as _MouseListener
_MouseListener = _MouseListener
import java.awt.Toolkit as _Toolkit
_Toolkit = _Toolkit
import java.io.PrintStream as PrintStream
import javax.swing.JRootPane as _JRootPane
_JRootPane = _JRootPane
import java.awt.Dimension as _Dimension
_Dimension = _Dimension
import java.awt.event.ActionListener as ActionListener
import java.awt.event.MouseEvent as MouseEvent
import java.awt.Color as _Color
_Color = _Color
import javax.swing.JPopupMenu as _JPopupMenu
_JPopupMenu = _JPopupMenu
import javax.swing.InputMap as _InputMap
_InputMap = _InputMap
import java.awt.event.MouseListener as MouseListener
import java.lang.Class as _Class
_Class = _Class
import java.util.Locale as Locale
import java.lang.Double as _double
import javax.swing.plaf.PanelUI as PanelUI
import java.awt.Point as _Point
_Point = _Point
import java.lang.Object as _Object
_Object = _Object
import java.beans.PropertyChangeListener as PropertyChangeListener
import javax.swing.border.Border as Border
import javax.swing.JComponent as _JComponent
_JComponent = _JComponent
import javax.swing.InputVerifier as InputVerifier
import java.io.PrintWriter as PrintWriter
import com.badlogic.gdx.tools.flame.ColorInfluencerPanel as _ColorInfluencerPanel
_ColorInfluencerPanel = _ColorInfluencerPanel
import java.awt.Point as Point
import javax.swing.event.AncestorListener as _AncestorListener
_AncestorListener = _AncestorListener
import java.lang.Short as _short
import java.awt.Toolkit as Toolkit
import java.awt.event.HierarchyBoundsListener as _HierarchyBoundsListener
_HierarchyBoundsListener = _HierarchyBoundsListener
import javax.swing.TransferHandler as _TransferHandler
_TransferHandler = _TransferHandler
import javax.swing.InputMap as InputMap
import java.awt.Rectangle as _Rectangle
_Rectangle = _Rectangle
import javax.swing.JRootPane as JRootPane
import java.awt.Event as Event
import java.awt.event.FocusListener as FocusListener
import java.awt.image.ImageObserver as ImageObserver
from builtins import str
from pyquantum_helper import override
import javax.swing.ActionMap as _ActionMap
_ActionMap = _ActionMap
import java.awt.FocusTraversalPolicy as FocusTraversalPolicy
import java.awt.event.MouseMotionListener as _MouseMotionListener
_MouseMotionListener = _MouseMotionListener
import java.awt.event.InputMethodListener as _InputMethodListener
_InputMethodListener = _InputMethodListener
import javax.swing.JPopupMenu as JPopupMenu
import java.util.Set as Set
import java.lang.Integer as _int
import java.awt.Image as _Image
_Image = _Image
import java.awt.FontMetrics as FontMetrics
import java.awt.Color as Color
import java.awt.Image as Image
import java.awt.Graphics as Graphics
import java.awt.ImageCapabilities as ImageCapabilities
import java.util.Locale as _Locale
_Locale = _Locale
 
class ColorInfluencerPanel():
    """com.badlogic.gdx.tools.flame.ColorInfluencerPanel"""
 
    @staticmethod
    def _wrap(java_value: _ColorInfluencerPanel) -> 'ColorInfluencerPanel':
        return ColorInfluencerPanel(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _ColorInfluencerPanel):
        """
        Dynamic initializer for ColorInfluencerPanel.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_ColorInfluencerPanel__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_ColorInfluencerPanel__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def removeVetoableChangeListener(self, arg0: 'VetoableChangeListener'):
        """public synchronized void javax.swing.JComponent.removeVetoableChangeListener(java.beans.VetoableChangeListener)"""
        super(_JComponent, self).removeVetoableChangeListener(arg0)

    @override
    @overload
    def getComponents(self) -> List['Component']:
        """public java.awt.Component[] java.awt.Container.getComponents()"""
        return List['Component']._wrap(super(Container, self).getComponents())

    @override
    @overload
    def setDebugGraphicsOptions(self, arg0: int):
        """public void javax.swing.JComponent.setDebugGraphicsOptions(int)"""
        super(_JComponent, self).setDebugGraphicsOptions(_int.valueOf(arg0))

    @override
    @overload
    def isValid(self) -> bool:
        """public boolean java.awt.Component.isValid()"""
        return bool._wrap(super(Component, self).isValid())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def getDefaultLocale() -> 'Locale':
        """public static java.util.Locale javax.swing.JComponent.getDefaultLocale()"""
        return Locale._wrap(_JComponent.getDefaultLocale())

    @override
    @overload
    def getInputVerifier(self) -> 'InputVerifier':
        """public javax.swing.InputVerifier javax.swing.JComponent.getInputVerifier()"""
        return 'InputVerifier'._wrap(super(JComponent, self).getInputVerifier())

    @override
    @overload
    def list(self, arg0: 'PrintStream', arg1: int):
        """public void java.awt.Container.list(java.io.PrintStream,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @override
    @overload
    def setUI(self, arg0: 'PanelUI'):
        """public void javax.swing.JPanel.setUI(javax.swing.plaf.PanelUI)"""
        super(_JPanel, self).setUI(arg0)

    @override
    @overload
    def getFocusTraversalPolicy(self) -> 'FocusTraversalPolicy':
        """public java.awt.FocusTraversalPolicy java.awt.Container.getFocusTraversalPolicy()"""
        return 'FocusTraversalPolicy'._wrap(super(Container, self).getFocusTraversalPolicy())

    @override
    @overload
    def getParent(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getParent()"""
        return 'Container'._wrap(super(Component, self).getParent())

    @override
    @overload
    def paintImmediately(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.paintImmediately(java.awt.Rectangle)"""
        super(_JComponent, self).paintImmediately(arg0)

    @staticmethod
    @overload
    def setDefaultLocale(arg0: 'Locale'):
        """public static void javax.swing.JComponent.setDefaultLocale(java.util.Locale)"""
        _JComponent.setDefaultLocale(arg0)

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,float,float)"""
        super(_Component, self).firePropertyChange(arg0, _float.valueOf(arg1), _float.valueOf(arg2))

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object)"""
        super(_Container, self).add(arg0, arg1)

    @override
    @overload
    def getLocale(self) -> 'Locale':
        """public java.util.Locale java.awt.Component.getLocale()"""
        return 'Locale'._wrap(super(Component, self).getLocale())

    @override
    @overload
    def setInheritsPopupMenu(self, arg0: bool):
        """public void javax.swing.JComponent.setInheritsPopupMenu(boolean)"""
        super(_JComponent, self).setInheritsPopupMenu(_boolean.valueOf(arg0))

    @override
    @overload
    def getHierarchyListeners(self) -> List['HierarchyListener']:
        """public synchronized java.awt.event.HierarchyListener[] java.awt.Component.getHierarchyListeners()"""
        return List['HierarchyListener']._wrap(super(Component, self).getHierarchyListeners())

    @override
    @overload
    def nextFocus(self):
        """public void java.awt.Component.nextFocus()"""
        super(Component, self).nextFocus()

    @override
    @overload
    def isPaintingTile(self) -> bool:
        """public boolean javax.swing.JComponent.isPaintingTile()"""
        return bool._wrap(super(JComponent, self).isPaintingTile())

    @override
    @overload
    def getContentPanel(self) -> 'JPanel':
        """public javax.swing.JPanel com.badlogic.gdx.tools.flame.EditorPanel.getContentPanel()"""
        return 'JPanel'._wrap(super(EditorPanel, self).getContentPanel())

    @override
    @overload
    def isDisplayable(self) -> bool:
        """public boolean java.awt.Component.isDisplayable()"""
        return bool._wrap(super(Component, self).isDisplayable())

    @override
    @overload
    def getBounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.getBounds()"""
        return 'Rectangle'._wrap(super(Component, self).getBounds())

    @override
    @overload
    def removeMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.removeMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).removeMouseMotionListener(arg0)

    @override
    @overload
    def isShowing(self) -> bool:
        """public boolean java.awt.Component.isShowing()"""
        return bool._wrap(super(Component, self).isShowing())

    @override
    @overload
    def getDropTarget(self) -> 'DropTarget':
        """public synchronized java.awt.dnd.DropTarget java.awt.Component.getDropTarget()"""
        return 'DropTarget'._wrap(super(Component, self).getDropTarget())

    @override
    @overload
    def isFontSet(self) -> bool:
        """public boolean java.awt.Component.isFontSet()"""
        return bool._wrap(super(Component, self).isFontSet())

    @overload
    def mouseUp(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseUp(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseUp(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def setIgnoreRepaint(self, arg0: bool):
        """public void java.awt.Component.setIgnoreRepaint(boolean)"""
        super(_Component, self).setIgnoreRepaint(_boolean.valueOf(arg0))

    @override
    @overload
    def getPropertyChangeListeners(self) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners()"""
        return List['PropertyChangeListener']._wrap(super(Component, self).getPropertyChangeListeners())

    @override
    @overload
    def isBackgroundSet(self) -> bool:
        """public boolean java.awt.Component.isBackgroundSet()"""
        return bool._wrap(super(Component, self).isBackgroundSet())

    @override
    @overload
    def getLocation(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocation()"""
        return 'Point'._wrap(super(Component, self).getLocation())

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int._wrap(super(object, self).hashCode())

    @override
    @overload
    def location(self) -> 'Point':
        """public java.awt.Point java.awt.Component.location()"""
        return 'Point'._wrap(super(Component, self).location())

    @override
    @overload
    def getComponentOrientation(self) -> 'ComponentOrientation':
        """public java.awt.ComponentOrientation java.awt.Component.getComponentOrientation()"""
        return 'ComponentOrientation'._wrap(super(Component, self).getComponentOrientation())

    @override
    @overload
    def addHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.addHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).addHierarchyListener(arg0)

    @override
    @overload
    def getInheritsPopupMenu(self) -> bool:
        """public boolean javax.swing.JComponent.getInheritsPopupMenu()"""
        return bool._wrap(super(JComponent, self).getInheritsPopupMenu())

    @override
    @overload
    def setComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Component.setComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Component, self).setComponentOrientation(arg0)

    @override
    @overload
    def getFocusCycleRootAncestor(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getFocusCycleRootAncestor()"""
        return 'Container'._wrap(super(Component, self).getFocusCycleRootAncestor())

    @override
    @overload
    def show(self, arg0: bool):
        """public void java.awt.Component.show(boolean)"""
        super(_Component, self).show(_boolean.valueOf(arg0))

    @staticmethod
    @overload
    def addContent(arg0: 'JPanel', arg1: int, arg2: int, arg3: 'JComponent', arg4: bool, arg5: int, arg6: int, arg7: float, arg8: float):
        """public static void com.badlogic.gdx.tools.flame.EditorPanel.addContent(javax.swing.JPanel,int,int,javax.swing.JComponent,boolean,int,int,float,float)"""
        _EditorPanel.addContent(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3, _boolean.valueOf(arg4), _int.valueOf(arg5), _int.valueOf(arg6), _float.valueOf(arg7), _float.valueOf(arg8))

    @override
    @overload
    def grabFocus(self):
        """public void javax.swing.JComponent.grabFocus()"""
        super(JComponent, self).grabFocus()

    @overload
    def locate(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.locate(int,int)"""
        return 'Component'._wrap(super(_Container, self).locate(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def isPaintingForPrint(self) -> bool:
        """public final boolean javax.swing.JComponent.isPaintingForPrint()"""
        return bool._wrap(super(JComponent, self).isPaintingForPrint())

    @overload
    def keyDown(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyDown(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyDown(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,int,int)"""
        super(_JComponent, self).firePropertyChange(arg0, _int.valueOf(arg1), _int.valueOf(arg2))

    @override
    @overload
    def getLayout(self) -> 'LayoutManager':
        """public java.awt.LayoutManager java.awt.Container.getLayout()"""
        return 'LayoutManager'._wrap(super(Container, self).getLayout())

    @override
    @overload
    def preferredSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.preferredSize()"""
        return 'Dimension'._wrap(super(Container, self).preferredSize())

    @override
    @overload
    def addNotify(self):
        """public void javax.swing.JComponent.addNotify()"""
        super(JComponent, self).addNotify()

    @override
    @overload
    def setSize(self, arg0: int, arg1: int):
        """public void java.awt.Component.setSize(int,int)"""
        super(_Component, self).setSize(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.repaint(int,int,int,int)"""
        super(_Component, self).repaint(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @overload
    def requestFocusInWindow(self, arg0: 'Cause') -> bool:
        """public boolean java.awt.Component.requestFocusInWindow(java.awt.event.FocusEvent$Cause)"""
        return bool._wrap(super(_Component, self).requestFocusInWindow(arg0))

    @override
    @overload
    def remove(self, arg0: int):
        """public void java.awt.Container.remove(int)"""
        super(_Container, self).remove(_int.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,long,long)"""
        super(_Component, self).firePropertyChange(arg0, _long.valueOf(arg1), _long.valueOf(arg2))

    @override
    @overload
    def update(self, arg0: 'FlameMain'):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.update(com.badlogic.gdx.tools.flame.FlameMain)"""
        super(_EditorPanel, self).update(arg0)

    @override
    @overload
    def setFocusCycleRoot(self, arg0: bool):
        """public void java.awt.Container.setFocusCycleRoot(boolean)"""
        super(_Container, self).setFocusCycleRoot(_boolean.valueOf(arg0))

    @overload
    def keyUp(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyUp(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyUp(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def setBackground(self, arg0: 'Color'):
        """public void javax.swing.JComponent.setBackground(java.awt.Color)"""
        super(_JComponent, self).setBackground(arg0)

    @override
    @overload
    def doLayout(self):
        """public void java.awt.Container.doLayout()"""
        super(Container, self).doLayout()

    @override
    @overload
    def enable(self):
        """public void javax.swing.JComponent.enable()"""
        super(JComponent, self).enable()

    @override
    @overload
    def getInsets(self) -> 'Insets':
        """public java.awt.Insets javax.swing.JComponent.getInsets()"""
        return 'Insets'._wrap(super(JComponent, self).getInsets())

    @override
    @overload
    def setNextFocusableComponent(self, arg0: 'Component'):
        """public void javax.swing.JComponent.setNextFocusableComponent(java.awt.Component)"""
        super(_JComponent, self).setNextFocusableComponent(arg0)

    @override
    @overload
    def getAlignmentY(self) -> float:
        """public float javax.swing.JComponent.getAlignmentY()"""
        return float._wrap(super(JComponent, self).getAlignmentY())

    @overload
    def checkImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @override
    @overload
    def getFocusTraversalKeysEnabled(self) -> bool:
        """public boolean java.awt.Component.getFocusTraversalKeysEnabled()"""
        return bool._wrap(super(Component, self).getFocusTraversalKeysEnabled())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getRootPane(self) -> 'JRootPane':
        """public javax.swing.JRootPane javax.swing.JComponent.getRootPane()"""
        return 'JRootPane'._wrap(super(JComponent, self).getRootPane())

    @override
    @overload
    def invalidate(self):
        """public void java.awt.Container.invalidate()"""
        super(Container, self).invalidate()

    @override
    @overload
    def resetKeyboardActions(self):
        """public void javax.swing.JComponent.resetKeyboardActions()"""
        super(JComponent, self).resetKeyboardActions()

    @overload
    def getComponent(self, arg0: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponent(int)"""
        return 'Component'._wrap(super(_Container, self).getComponent(_int.valueOf(arg0)))

    @override
    @overload
    def setName(self, arg0: str):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setName(java.lang.String)"""
        super(_EditorPanel, self).setName(arg0)

    @override
    @overload
    def addPropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Container.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Container, self).addPropertyChangeListener(arg0, arg1)

    @override
    @overload
    def setInputMap(self, arg0: int, arg1: 'InputMap'):
        """public final void javax.swing.JComponent.setInputMap(int,javax.swing.InputMap)"""
        super(_JComponent, self).setInputMap(_int.valueOf(arg0), arg1)

    @override
    @overload
    def removePropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0)

    @override
    @overload
    def applyComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Container.applyComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Container, self).applyComponentOrientation(arg0)

    @override
    @overload
    def setBorder(self, arg0: 'Border'):
        """public void javax.swing.JComponent.setBorder(javax.swing.border.Border)"""
        super(_JComponent, self).setBorder(arg0)

    @override
    @overload
    def remove(self, arg0: 'MenuComponent'):
        """public void java.awt.Component.remove(java.awt.MenuComponent)"""
        super(_Component, self).remove(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintStream'):
        """public void java.awt.Component.list(java.io.PrintStream)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def removeMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.removeMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).removeMouseListener(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintWriter'):
        """public void java.awt.Component.list(java.io.PrintWriter)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def getKeyListeners(self) -> List['KeyListener']:
        """public synchronized java.awt.event.KeyListener[] java.awt.Component.getKeyListeners()"""
        return List['KeyListener']._wrap(super(Component, self).getKeyListeners())

    @override
    @overload
    def getInputContext(self) -> 'InputContext':
        """public java.awt.im.InputContext java.awt.Component.getInputContext()"""
        return 'InputContext'._wrap(super(Component, self).getInputContext())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,double,double)"""
        super(_Component, self).firePropertyChange(arg0, _double.valueOf(arg1), _double.valueOf(arg2))

    @override
    @overload
    def removeAncestorListener(self, arg0: 'AncestorListener'):
        """public void javax.swing.JComponent.removeAncestorListener(javax.swing.event.AncestorListener)"""
        super(_JComponent, self).removeAncestorListener(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintWriter', arg1: int):
        """public void java.awt.Container.list(java.io.PrintWriter,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @overload
    def checkImage(self, arg0: 'Image', arg1: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, arg1))

    @override
    @overload
    def removeFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.removeFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).removeFocusListener(arg0)

    @overload
    def mouseDown(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDown(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDown(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def setIsAlwayShown(self, arg0: bool):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setIsAlwayShown(boolean)"""
        super(_EditorPanel, self).setIsAlwayShown(_boolean.valueOf(arg0))

    @overload
    def getConditionForKeyStroke(self, arg0: 'KeyStroke') -> int:
        """public int javax.swing.JComponent.getConditionForKeyStroke(javax.swing.KeyStroke)"""
        return int._wrap(super(_JComponent, self).getConditionForKeyStroke(arg0))

    @override
    @overload
    def getTreeLock(self) -> object:
        """public final java.lang.Object java.awt.Component.getTreeLock()"""
        return object._wrap(super(Component, self).getTreeLock())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @override
    @overload
    def addVetoableChangeListener(self, arg0: 'VetoableChangeListener'):
        """public synchronized void javax.swing.JComponent.addVetoableChangeListener(java.beans.VetoableChangeListener)"""
        super(_JComponent, self).addVetoableChangeListener(arg0)

    @overload
    def contains(self, arg0: 'Point') -> bool:
        """public boolean java.awt.Component.contains(java.awt.Point)"""
        return bool._wrap(super(_Component, self).contains(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,short,short)"""
        super(_Component, self).firePropertyChange(arg0, _short.valueOf(arg1), _short.valueOf(arg2))

    @override
    @overload
    def dispatchEvent(self, arg0: 'AWTEvent'):
        """public final void java.awt.Component.dispatchEvent(java.awt.AWTEvent)"""
        super(_Component, self).dispatchEvent(arg0)

    @override
    @overload
    def removeContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.removeContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).removeContainerListener(arg0)

    @override
    @overload
    def getGraphicsConfiguration(self) -> 'GraphicsConfiguration':
        """public java.awt.GraphicsConfiguration java.awt.Component.getGraphicsConfiguration()"""
        return 'GraphicsConfiguration'._wrap(super(Component, self).getGraphicsConfiguration())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: bool, arg2: bool):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,boolean,boolean)"""
        super(_JComponent, self).firePropertyChange(arg0, _boolean.valueOf(arg1), _boolean.valueOf(arg2))

    @override
    @overload
    def registerKeyboardAction(self, arg0: 'ActionListener', arg1: str, arg2: 'KeyStroke', arg3: int):
        """public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,java.lang.String,javax.swing.KeyStroke,int)"""
        super(_JComponent, self).registerKeyboardAction(arg0, arg1, arg2, _int.valueOf(arg3))

    @overload
    def findComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(arg0))

    @override
    @overload
    def resize(self, arg0: int, arg1: int):
        """public void java.awt.Component.resize(int,int)"""
        super(_Component, self).resize(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getHeight(self) -> int:
        """public int javax.swing.JComponent.getHeight()"""
        return int._wrap(super(JComponent, self).getHeight())

    @override
    @overload
    def getTransferHandler(self) -> 'TransferHandler':
        """public javax.swing.TransferHandler javax.swing.JComponent.getTransferHandler()"""
        return 'TransferHandler'._wrap(super(JComponent, self).getTransferHandler())

    @overload
    def imageUpdate(self, arg0: 'Image', arg1: int, arg2: int, arg3: int, arg4: int, arg5: int) -> bool:
        """public boolean java.awt.Component.imageUpdate(java.awt.Image,int,int,int,int,int)"""
        return bool._wrap(super(_Component, self).imageUpdate(arg0, _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4), _int.valueOf(arg5)))

    @override
    @overload
    def getWidth(self) -> int:
        """public int javax.swing.JComponent.getWidth()"""
        return int._wrap(super(JComponent, self).getWidth())

    @override
    @overload
    def transferFocusBackward(self):
        """public void java.awt.Component.transferFocusBackward()"""
        super(Component, self).transferFocusBackward()

    @overload
    def getPropertyChangeListeners(self, arg0: str) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners(java.lang.String)"""
        return List['PropertyChangeListener']._wrap(super(_Component, self).getPropertyChangeListeners(arg0))

    @override
    @overload
    def getName(self) -> str:
        """public java.lang.String com.badlogic.gdx.tools.flame.EditorPanel.getName()"""
        return str._wrap(super(EditorPanel, self).getName())

    @staticmethod
    @overload
    def isLightweightComponent(arg0: 'Component') -> bool:
        """public static boolean javax.swing.JComponent.isLightweightComponent(java.awt.Component)"""
        return bool._wrap(_JComponent.isLightweightComponent(arg0))

    @override
    @overload
    def getBorder(self) -> 'Border':
        """public javax.swing.border.Border javax.swing.JComponent.getBorder()"""
        return 'Border'._wrap(super(JComponent, self).getBorder())

    @override
    @overload
    def printAll(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.printAll(java.awt.Graphics)"""
        super(_JComponent, self).printAll(arg0)

    @override
    @overload
    def addComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.addComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).addComponentListener(arg0)

    @override
    @overload
    def getBaselineResizeBehavior(self) -> 'BaselineResizeBehavior.Component$BaselineResizeBehavior':
        """public java.awt.Component$BaselineResizeBehavior javax.swing.JComponent.getBaselineResizeBehavior()"""
        return 'BaselineResizeBehavior.Component$BaselineResizeBehavior'._wrap(super(JComponent, self).getBaselineResizeBehavior())

    @override
    @overload
    def print(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.print(java.awt.Graphics)"""
        super(_JComponent, self).print(arg0)

    @overload
    def __init__(self, arg0: 'FlameMain', arg1: 'Single'):
        """public com.badlogic.gdx.tools.flame.ColorInfluencerPanel(com.badlogic.gdx.tools.flame.FlameMain,com.badlogic.gdx.graphics.g3d.particles.influencers.ColorInfluencer$Single)"""
        val = _ColorInfluencerPanel(arg0, arg1)
        self.__wrapper = val

    @override
    @overload
    def setInputVerifier(self, arg0: 'InputVerifier'):
        """public void javax.swing.JComponent.setInputVerifier(javax.swing.InputVerifier)"""
        super(_JComponent, self).setInputVerifier(arg0)

    @override
    @overload
    def addAncestorListener(self, arg0: 'AncestorListener'):
        """public void javax.swing.JComponent.addAncestorListener(javax.swing.event.AncestorListener)"""
        super(_JComponent, self).addAncestorListener(arg0)

    @override
    @overload
    def getFont(self) -> 'Font':
        """public java.awt.Font java.awt.Component.getFont()"""
        return 'Font'._wrap(super(Component, self).getFont())

    @override
    @overload
    def setFont(self, arg0: 'Font'):
        """public void javax.swing.JComponent.setFont(java.awt.Font)"""
        super(_JComponent, self).setFont(arg0)

    @override
    @overload
    def isOptimizedDrawingEnabled(self) -> bool:
        """public boolean javax.swing.JComponent.isOptimizedDrawingEnabled()"""
        return bool._wrap(super(JComponent, self).isOptimizedDrawingEnabled())

    @override
    @overload
    def isValidateRoot(self) -> bool:
        """public boolean javax.swing.JComponent.isValidateRoot()"""
        return bool._wrap(super(JComponent, self).isValidateRoot())

    @overload
    def prepareImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @override
    @overload
    def setHasAdvanced(self, arg0: bool):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setHasAdvanced(boolean)"""
        super(_EditorPanel, self).setHasAdvanced(_boolean.valueOf(arg0))

    @override
    @overload
    def setForeground(self, arg0: 'Color'):
        """public void javax.swing.JComponent.setForeground(java.awt.Color)"""
        super(_JComponent, self).setForeground(arg0)

    @overload
    def mouseDrag(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDrag(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDrag(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def isOpaque(self) -> bool:
        """public boolean javax.swing.JComponent.isOpaque()"""
        return bool._wrap(super(JComponent, self).isOpaque())

    @overload
    def createVolatileImage(self, arg0: int, arg1: int, arg2: 'ImageCapabilities') -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int,java.awt.ImageCapabilities) throws java.awt.AWTException"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1), arg2))

    @override
    @overload
    def bounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.bounds()"""
        return 'Rectangle'._wrap(super(Component, self).bounds())

    @override
    @overload
    def update(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.update(java.awt.Graphics)"""
        super(_JComponent, self).update(arg0)

    @override
    @overload
    def add(self, arg0: 'PopupMenu'):
        """public void java.awt.Component.add(java.awt.PopupMenu)"""
        super(_Component, self).add(arg0)

    @override
    @overload
    def getToolTipText(self) -> str:
        """public java.lang.String javax.swing.JComponent.getToolTipText()"""
        return str._wrap(super(JComponent, self).getToolTipText())

    @override
    @overload
    def isVisible(self) -> bool:
        """public boolean java.awt.Component.isVisible()"""
        return bool._wrap(super(Component, self).isVisible())

    @override
    @overload
    def setDropTarget(self, arg0: 'DropTarget'):
        """public synchronized void java.awt.Component.setDropTarget(java.awt.dnd.DropTarget)"""
        super(_Component, self).setDropTarget(arg0)

    @override
    @overload
    def getLocationOnScreen(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocationOnScreen()"""
        return 'Point'._wrap(super(Component, self).getLocationOnScreen())

    @override
    @overload
    def getY(self) -> int:
        """public int javax.swing.JComponent.getY()"""
        return int._wrap(super(JComponent, self).getY())

    @overload
    def getComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def isMaximumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMaximumSizeSet()"""
        return bool._wrap(super(Component, self).isMaximumSizeSet())

    @override
    @overload
    def setAlignmentY(self, arg0: float):
        """public void javax.swing.JComponent.setAlignmentY(float)"""
        super(_JComponent, self).setAlignmentY(_float.valueOf(arg0))

    @override
    @overload
    def getRegisteredKeyStrokes(self) -> List['KeyStroke']:
        """public javax.swing.KeyStroke[] javax.swing.JComponent.getRegisteredKeyStrokes()"""
        return List['KeyStroke']._wrap(super(JComponent, self).getRegisteredKeyStrokes())

    @override
    @overload
    def isFocusable(self) -> bool:
        """public boolean java.awt.Component.isFocusable()"""
        return bool._wrap(super(Component, self).isFocusable())

    @override
    @overload
    def isFocusTraversalPolicyProvider(self) -> bool:
        """public final boolean java.awt.Container.isFocusTraversalPolicyProvider()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicyProvider())

    @override
    @overload
    def getMouseListeners(self) -> List['MouseListener']:
        """public synchronized java.awt.event.MouseListener[] java.awt.Component.getMouseListeners()"""
        return List['MouseListener']._wrap(super(Component, self).getMouseListeners())

    @override
    @overload
    def setValue(self, arg0: object):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setValue(T)"""
        super(_EditorPanel, self).setValue(arg0)

    @override
    @overload
    def registerKeyboardAction(self, arg0: 'ActionListener', arg1: 'KeyStroke', arg2: int):
        """public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,javax.swing.KeyStroke,int)"""
        super(_JComponent, self).registerKeyboardAction(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def transferFocusUpCycle(self):
        """public void java.awt.Component.transferFocusUpCycle()"""
        super(Component, self).transferFocusUpCycle()

    @override
    @overload
    def removeKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.removeKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).removeKeyListener(arg0)

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: str, arg2: str):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,char,char)"""
        super(_JComponent, self).firePropertyChange(arg0, _char.valueOf(arg1), _char.valueOf(arg2))

    @override
    @overload
    def getMouseMotionListeners(self) -> List['MouseMotionListener']:
        """public synchronized java.awt.event.MouseMotionListener[] java.awt.Component.getMouseMotionListeners()"""
        return List['MouseMotionListener']._wrap(super(Component, self).getMouseMotionListeners())

    @override
    @overload
    def getAutoscrolls(self) -> bool:
        """public boolean javax.swing.JComponent.getAutoscrolls()"""
        return bool._wrap(super(JComponent, self).getAutoscrolls())

    @override
    @overload
    def addContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.addContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).addContainerListener(arg0)

    @override
    @overload
    def isFocusTraversable(self) -> bool:
        """public boolean java.awt.Component.isFocusTraversable()"""
        return bool._wrap(super(Component, self).isFocusTraversable())

    @overload
    def mouseExit(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseExit(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseExit(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getBounds(self, arg0: 'Rectangle') -> 'Rectangle':
        """public java.awt.Rectangle javax.swing.JComponent.getBounds(java.awt.Rectangle)"""
        return 'Rectangle'._wrap(super(_JComponent, self).getBounds(arg0))

    @override
    @overload
    def setToolTipText(self, arg0: str):
        """public void javax.swing.JComponent.setToolTipText(java.lang.String)"""
        super(_JComponent, self).setToolTipText(arg0)

    @override
    @overload
    def setAutoscrolls(self, arg0: bool):
        """public void javax.swing.JComponent.setAutoscrolls(boolean)"""
        super(_JComponent, self).setAutoscrolls(_boolean.valueOf(arg0))

    @override
    @overload
    def setComponentPopupMenu(self, arg0: 'JPopupMenu'):
        """public void javax.swing.JComponent.setComponentPopupMenu(javax.swing.JPopupMenu)"""
        super(_JComponent, self).setComponentPopupMenu(arg0)

    @override
    @overload
    def setMixingCutoutShape(self, arg0: 'Shape'):
        """public void java.awt.Component.setMixingCutoutShape(java.awt.Shape)"""
        super(_Component, self).setMixingCutoutShape(arg0)

    @override
    @overload
    def getVisibleRect(self) -> 'Rectangle':
        """public java.awt.Rectangle javax.swing.JComponent.getVisibleRect()"""
        return 'Rectangle'._wrap(super(JComponent, self).getVisibleRect())

    @override
    @overload
    def requestFocus(self, arg0: 'Cause'):
        """public void java.awt.Component.requestFocus(java.awt.event.FocusEvent$Cause)"""
        super(_Component, self).requestFocus(arg0)

    @overload
    def createImage(self, arg0: int, arg1: int) -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(int,int)"""
        return 'Image'._wrap(super(_Component, self).createImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def putClientProperty(self, arg0: object, arg1: object):
        """public final void javax.swing.JComponent.putClientProperty(java.lang.Object,java.lang.Object)"""
        super(_JComponent, self).putClientProperty(arg0, arg1)

    @override
    @overload
    def getVetoableChangeListeners(self) -> List['VetoableChangeListener']:
        """public synchronized java.beans.VetoableChangeListener[] javax.swing.JComponent.getVetoableChangeListeners()"""
        return List['VetoableChangeListener']._wrap(super(JComponent, self).getVetoableChangeListeners())

    @override
    @overload
    def scrollRectToVisible(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.scrollRectToVisible(java.awt.Rectangle)"""
        super(_JComponent, self).scrollRectToVisible(arg0)

    @override
    @overload
    def getTopLevelAncestor(self) -> 'Container':
        """public java.awt.Container javax.swing.JComponent.getTopLevelAncestor()"""
        return 'Container'._wrap(super(JComponent, self).getTopLevelAncestor())

    @override
    @overload
    def isRequestFocusEnabled(self) -> bool:
        """public boolean javax.swing.JComponent.isRequestFocusEnabled()"""
        return bool._wrap(super(JComponent, self).isRequestFocusEnabled())

    @override
    @overload
    def getFocusListeners(self) -> List['FocusListener']:
        """public synchronized java.awt.event.FocusListener[] java.awt.Component.getFocusListeners()"""
        return List['FocusListener']._wrap(super(Component, self).getFocusListeners())

    @override
    @overload
    def setLayout(self, arg0: 'LayoutManager'):
        """public void java.awt.Container.setLayout(java.awt.LayoutManager)"""
        super(_Container, self).setLayout(arg0)

    @overload
    def add(self, arg0: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0))

    @override
    @overload
    def getMouseWheelListeners(self) -> List['MouseWheelListener']:
        """public synchronized java.awt.event.MouseWheelListener[] java.awt.Component.getMouseWheelListeners()"""
        return List['MouseWheelListener']._wrap(super(Component, self).getMouseWheelListeners())

    @override
    @overload
    def reshape(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void javax.swing.JComponent.reshape(int,int,int,int)"""
        super(_JComponent, self).reshape(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def setTransferHandler(self, arg0: 'TransferHandler'):
        """public void javax.swing.JComponent.setTransferHandler(javax.swing.TransferHandler)"""
        super(_JComponent, self).setTransferHandler(arg0)

    @override
    @overload
    def getPreferredSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getPreferredSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getPreferredSize())

    @override
    @overload
    def setLocation(self, arg0: int, arg1: int):
        """public void java.awt.Component.setLocation(int,int)"""
        super(_Component, self).setLocation(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def removeInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.removeInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).removeInputMethodListener(arg0)

    @override
    @overload
    def setFocusable(self, arg0: bool):
        """public void java.awt.Component.setFocusable(boolean)"""
        super(_Component, self).setFocusable(_boolean.valueOf(arg0))

    @override
    @overload
    def paintComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.paintComponents(java.awt.Graphics)"""
        super(_Container, self).paintComponents(arg0)

    @override
    @overload
    def addFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.addFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).addFocusListener(arg0)

    @overload
    def prepareImage(self, arg0: 'Image', arg1: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, arg1))

    @override
    @overload
    def addKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.addKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).addKeyListener(arg0)

    @override
    @overload
    def resize(self, arg0: 'Dimension'):
        """public void java.awt.Component.resize(java.awt.Dimension)"""
        super(_Component, self).resize(arg0)

    @override
    @overload
    def setComponentZOrder(self, arg0: 'Component', arg1: int):
        """public void java.awt.Container.setComponentZOrder(java.awt.Component,int)"""
        super(_Container, self).setComponentZOrder(arg0, _int.valueOf(arg1))

    @override
    @overload
    def list(self):
        """public void java.awt.Component.list()"""
        super(Component, self).list()

    @overload
    def add(self, arg0: str, arg1: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.lang.String,java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, arg1))

    @override
    @overload
    def paintImmediately(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void javax.swing.JComponent.paintImmediately(int,int,int,int)"""
        super(_JComponent, self).paintImmediately(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def getMinimumSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getMinimumSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getMinimumSize())

    @override
    @overload
    def setEnabled(self, arg0: bool):
        """public void javax.swing.JComponent.setEnabled(boolean)"""
        super(_JComponent, self).setEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def hasFocus(self) -> bool:
        """public boolean java.awt.Component.hasFocus()"""
        return bool._wrap(super(Component, self).hasFocus())

    @overload
    def createVolatileImage(self, arg0: int, arg1: int) -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int)"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.removeHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).removeHierarchyListener(arg0)

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.awt.Component.toString()"""
        return str._wrap(super(Component, self).toString())

    @override
    @overload
    def addMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.addMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).addMouseListener(arg0)

    @override
    @overload
    def isFocusOwner(self) -> bool:
        """public boolean java.awt.Component.isFocusOwner()"""
        return bool._wrap(super(Component, self).isFocusOwner())

    @override
    @overload
    def getAccessibleContext(self) -> 'AccessibleContext':
        """public javax.accessibility.AccessibleContext javax.swing.JPanel.getAccessibleContext()"""
        return 'AccessibleContext'._wrap(super(JPanel, self).getAccessibleContext())

    @overload
    def postEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.postEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).postEvent(arg0))

    @overload
    def getLocation(self, arg0: 'Point') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getLocation(java.awt.Point)"""
        return 'Point'._wrap(super(_JComponent, self).getLocation(arg0))

    @overload
    def getBaseline(self, arg0: int, arg1: int) -> int:
        """public int javax.swing.JComponent.getBaseline(int,int)"""
        return int._wrap(super(_JComponent, self).getBaseline(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def findComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeNotify(self):
        """public void javax.swing.JComponent.removeNotify()"""
        super(JComponent, self).removeNotify()

    @override
    @overload
    def getForeground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getForeground()"""
        return 'Color'._wrap(super(Component, self).getForeground())

    @override
    @overload
    def show(self):
        """public void java.awt.Component.show()"""
        super(Component, self).show()

    @override
    @overload
    def isDoubleBuffered(self) -> bool:
        """public boolean javax.swing.JComponent.isDoubleBuffered()"""
        return bool._wrap(super(JComponent, self).isDoubleBuffered())

    @override
    @overload
    def setDescription(self, arg0: str):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setDescription(java.lang.String)"""
        super(_EditorPanel, self).setDescription(arg0)

    @override
    @overload
    def isFocusCycleRoot(self) -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot()"""
        return bool._wrap(super(Container, self).isFocusCycleRoot())

    @override
    @overload
    def addMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.addMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).addMouseWheelListener(arg0)

    @override
    @overload
    def hide(self):
        """public void javax.swing.JComponent.hide()"""
        super(JComponent, self).hide()

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def revalidate(self):
        """public void javax.swing.JComponent.revalidate()"""
        super(JComponent, self).revalidate()

    @override
    @overload
    def getActionMap(self) -> 'ActionMap':
        """public final javax.swing.ActionMap javax.swing.JComponent.getActionMap()"""
        return 'ActionMap'._wrap(super(JComponent, self).getActionMap())

    @override
    @overload
    def requestFocusInWindow(self) -> bool:
        """public boolean javax.swing.JComponent.requestFocusInWindow()"""
        return bool._wrap(super(JComponent, self).requestFocusInWindow())

    @overload
    def action(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.action(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).action(arg0, arg1))

    @override
    @overload
    def isManagingFocus(self) -> bool:
        """public boolean javax.swing.JComponent.isManagingFocus()"""
        return bool._wrap(super(JComponent, self).isManagingFocus())

    @override
    @overload
    def isLightweight(self) -> bool:
        """public boolean java.awt.Component.isLightweight()"""
        return bool._wrap(super(Component, self).isLightweight())

    @override
    @overload
    def setAlignmentX(self, arg0: float):
        """public void javax.swing.JComponent.setAlignmentX(float)"""
        super(_JComponent, self).setAlignmentX(_float.valueOf(arg0))

    @overload
    def getFocusTraversalKeys(self, arg0: int) -> 'Set':
        """public java.util.Set<java.awt.AWTKeyStroke> java.awt.Container.getFocusTraversalKeys(int)"""
        return 'Set'._wrap(super(_Container, self).getFocusTraversalKeys(_int.valueOf(arg0)))

    @override
    @overload
    def setFocusTraversalKeysEnabled(self, arg0: bool):
        """public void java.awt.Component.setFocusTraversalKeysEnabled(boolean)"""
        super(_Component, self).setFocusTraversalKeysEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def remove(self, arg0: 'Component'):
        """public void java.awt.Container.remove(java.awt.Component)"""
        super(_Container, self).remove(arg0)

    @overload
    def getInsets(self, arg0: 'Insets') -> 'Insets':
        """public java.awt.Insets javax.swing.JComponent.getInsets(java.awt.Insets)"""
        return 'Insets'._wrap(super(_JComponent, self).getInsets(arg0))

    @override
    @overload
    def insets(self) -> 'Insets':
        """public java.awt.Insets java.awt.Container.insets()"""
        return 'Insets'._wrap(super(Container, self).insets())

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int):
        """public void javax.swing.JComponent.repaint(long,int,int,int,int)"""
        super(_JComponent, self).repaint(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4))

    @override
    @overload
    def setFocusTraversalPolicy(self, arg0: 'FocusTraversalPolicy'):
        """public void java.awt.Container.setFocusTraversalPolicy(java.awt.FocusTraversalPolicy)"""
        super(_Container, self).setFocusTraversalPolicy(arg0)

    @overload
    def getSize(self, arg0: 'Dimension') -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getSize(java.awt.Dimension)"""
        return 'Dimension'._wrap(super(_JComponent, self).getSize(arg0))

    @override
    @overload
    def enable(self, arg0: bool):
        """public void java.awt.Component.enable(boolean)"""
        super(_Component, self).enable(_boolean.valueOf(arg0))

    @overload
    def getToolTipLocation(self, arg0: 'MouseEvent') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getToolTipLocation(java.awt.event.MouseEvent)"""
        return 'Point'._wrap(super(_JComponent, self).getToolTipLocation(arg0))

    @override
    @overload
    def addPropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Container.addPropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Container, self).addPropertyChangeListener(arg0)

    @overload
    def getComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(arg0))

    @override
    @overload
    def size(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.size()"""
        return 'Dimension'._wrap(super(Component, self).size())

    @override
    @overload
    def getVerifyInputWhenFocusTarget(self) -> bool:
        """public boolean javax.swing.JComponent.getVerifyInputWhenFocusTarget()"""
        return bool._wrap(super(JComponent, self).getVerifyInputWhenFocusTarget())

    @overload
    def mouseMove(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseMove(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseMove(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getActionForKeyStroke(self, arg0: 'KeyStroke') -> 'ActionListener':
        """public java.awt.event.ActionListener javax.swing.JComponent.getActionForKeyStroke(javax.swing.KeyStroke)"""
        return 'ActionListener'._wrap(super(_JComponent, self).getActionForKeyStroke(arg0))

    @overload
    def lostFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.lostFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).lostFocus(arg0, arg1))

    @override
    @overload
    def isMinimumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMinimumSizeSet()"""
        return bool._wrap(super(Component, self).isMinimumSizeSet())

    @override
    @overload
    def isForegroundSet(self) -> bool:
        """public boolean java.awt.Component.isForegroundSet()"""
        return bool._wrap(super(Component, self).isForegroundSet())

    @overload
    def getMousePosition(self, arg0: bool) -> 'Point':
        """public java.awt.Point java.awt.Container.getMousePosition(boolean) throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(_Container, self).getMousePosition(_boolean.valueOf(arg0)))

    @overload
    def getFontMetrics(self, arg0: 'Font') -> 'FontMetrics':
        """public java.awt.FontMetrics javax.swing.JComponent.getFontMetrics(java.awt.Font)"""
        return 'FontMetrics'._wrap(super(_JComponent, self).getFontMetrics(arg0))

    @overload
    def getListeners(self, arg0: 'Class') -> List['EventListener']:
        """public <T extends java.util.EventListener> T[] javax.swing.JComponent.getListeners(java.lang.Class<T>)"""
        return List['EventListener']._wrap(super(_JComponent, self).getListeners(arg0))

    @override
    @overload
    def getHierarchyBoundsListeners(self) -> List['HierarchyBoundsListener']:
        """public synchronized java.awt.event.HierarchyBoundsListener[] java.awt.Component.getHierarchyBoundsListeners()"""
        return List['HierarchyBoundsListener']._wrap(super(Component, self).getHierarchyBoundsListeners())

    @override
    @overload
    def minimumSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.minimumSize()"""
        return 'Dimension'._wrap(super(Container, self).minimumSize())

    @overload
    def handleEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.handleEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).handleEvent(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @override
    @overload
    def getComponentListeners(self) -> List['ComponentListener']:
        """public synchronized java.awt.event.ComponentListener[] java.awt.Component.getComponentListeners()"""
        return List['ComponentListener']._wrap(super(Component, self).getComponentListeners())

    @override
    @overload
    def computeVisibleRect(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.computeVisibleRect(java.awt.Rectangle)"""
        super(_JComponent, self).computeVisibleRect(arg0)

    @override
    @overload
    def deliverEvent(self, arg0: 'Event'):
        """public void java.awt.Container.deliverEvent(java.awt.Event)"""
        super(_Container, self).deliverEvent(arg0)

    @override
    @overload
    def addHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.addHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).addHierarchyBoundsListener(arg0)

    @override
    @overload
    def getAlignmentX(self) -> float:
        """public float javax.swing.JComponent.getAlignmentX()"""
        return float._wrap(super(JComponent, self).getAlignmentX())

    @overload
    def add(self, arg0: 'Component', arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component,int)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def repaint(self):
        """public void java.awt.Component.repaint()"""
        super(Component, self).repaint()

    @overload
    def gotFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.gotFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).gotFocus(arg0, arg1))

    @override
    @overload
    def createToolTip(self) -> 'JToolTip':
        """public javax.swing.JToolTip javax.swing.JComponent.createToolTip()"""
        return 'JToolTip'._wrap(super(JComponent, self).createToolTip())

    @override
    @overload
    def setEmbedded(self):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setEmbedded()"""
        super(EditorPanel, self).setEmbedded()

    @overload
    def getToolTipText(self, arg0: 'MouseEvent') -> str:
        """public java.lang.String javax.swing.JComponent.getToolTipText(java.awt.event.MouseEvent)"""
        return str._wrap(super(_JComponent, self).getToolTipText(arg0))

    @override
    @overload
    def printComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.printComponents(java.awt.Graphics)"""
        super(_Container, self).printComponents(arg0)

    @override
    @overload
    def getColorModel(self) -> 'ColorModel':
        """public java.awt.image.ColorModel java.awt.Component.getColorModel()"""
        return 'ColorModel'._wrap(super(Component, self).getColorModel())

    @override
    @overload
    def setFocusTraversalPolicyProvider(self, arg0: bool):
        """public final void java.awt.Container.setFocusTraversalPolicyProvider(boolean)"""
        super(_Container, self).setFocusTraversalPolicyProvider(_boolean.valueOf(arg0))

    @overload
    def getComponentZOrder(self, arg0: 'Component') -> int:
        """public int java.awt.Container.getComponentZOrder(java.awt.Component)"""
        return int._wrap(super(_Container, self).getComponentZOrder(arg0))

    @override
    @overload
    def getDebugGraphicsOptions(self) -> int:
        """public int javax.swing.JComponent.getDebugGraphicsOptions()"""
        return int._wrap(super(JComponent, self).getDebugGraphicsOptions())

    @overload
    def areFocusTraversalKeysSet(self, arg0: int) -> bool:
        """public boolean java.awt.Container.areFocusTraversalKeysSet(int)"""
        return bool._wrap(super(_Container, self).areFocusTraversalKeysSet(_int.valueOf(arg0)))

    @override
    @overload
    def getSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.getSize()"""
        return 'Dimension'._wrap(super(Component, self).getSize())

    @override
    @overload
    def repaint(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.repaint(java.awt.Rectangle)"""
        super(_JComponent, self).repaint(arg0)

    @overload
    def getClientProperty(self, arg0: object) -> object:
        """public final java.lang.Object javax.swing.JComponent.getClientProperty(java.lang.Object)"""
        return object._wrap(super(_JComponent, self).getClientProperty(arg0))

    @override
    @overload
    def unregisterKeyboardAction(self, arg0: 'KeyStroke'):
        """public void javax.swing.JComponent.unregisterKeyboardAction(javax.swing.KeyStroke)"""
        super(_JComponent, self).unregisterKeyboardAction(arg0)

    @overload
    def requestFocus(self, arg0: bool) -> bool:
        """public boolean javax.swing.JComponent.requestFocus(boolean)"""
        return bool._wrap(super(_JComponent, self).requestFocus(_boolean.valueOf(arg0)))

    @override
    @overload
    def setActionMap(self, arg0: 'ActionMap'):
        """public final void javax.swing.JComponent.setActionMap(javax.swing.ActionMap)"""
        super(_JComponent, self).setActionMap(arg0)

    @override
    @overload
    def getX(self) -> int:
        """public int javax.swing.JComponent.getX()"""
        return int._wrap(super(JComponent, self).getX())

    @overload
    def mouseEnter(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseEnter(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseEnter(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def updateUI(self):
        """public void javax.swing.JPanel.updateUI()"""
        super(JPanel, self).updateUI()

    @override
    @overload
    def getToolkit(self) -> 'Toolkit':
        """public java.awt.Toolkit java.awt.Component.getToolkit()"""
        return 'Toolkit'._wrap(super(Component, self).getToolkit())

    @override
    @overload
    def isCursorSet(self) -> bool:
        """public boolean java.awt.Component.isCursorSet()"""
        return bool._wrap(super(Component, self).isCursorSet())

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object, arg2: int):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object,int)"""
        super(_Container, self).add(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def setPreferredSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setPreferredSize(java.awt.Dimension)"""
        super(_JComponent, self).setPreferredSize(arg0)

    @override
    @overload
    def setBounds(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.setBounds(int,int,int,int)"""
        super(_Component, self).setBounds(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def isFocusTraversalPolicySet(self) -> bool:
        """public boolean java.awt.Container.isFocusTraversalPolicySet()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicySet())

    @override
    @overload
    def requestFocus(self):
        """public void javax.swing.JComponent.requestFocus()"""
        super(JComponent, self).requestFocus()

    @override
    @overload
    def getAncestorListeners(self) -> List['AncestorListener']:
        """public javax.swing.event.AncestorListener[] javax.swing.JComponent.getAncestorListeners()"""
        return List['AncestorListener']._wrap(super(JComponent, self).getAncestorListeners())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool._wrap(super(_object, self).equals(arg0))

    @overload
    def getInputMap(self, arg0: int) -> 'InputMap':
        """public final javax.swing.InputMap javax.swing.JComponent.getInputMap(int)"""
        return 'InputMap'._wrap(super(_JComponent, self).getInputMap(_int.valueOf(arg0)))

    @override
    @overload
    def isEnabled(self) -> bool:
        """public boolean java.awt.Component.isEnabled()"""
        return bool._wrap(super(Component, self).isEnabled())

    @override
    @overload
    def move(self, arg0: int, arg1: int):
        """public void java.awt.Component.move(int,int)"""
        super(_Component, self).move(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def addMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.addMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).addMouseMotionListener(arg0)

    @override
    @overload
    def getIgnoreRepaint(self) -> bool:
        """public boolean java.awt.Component.getIgnoreRepaint()"""
        return bool._wrap(super(Component, self).getIgnoreRepaint())

    @overload
    def isFocusCycleRoot(self, arg0: 'Container') -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot(java.awt.Container)"""
        return bool._wrap(super(_Container, self).isFocusCycleRoot(arg0))

    @override
    @overload
    def getGraphics(self) -> 'Graphics':
        """public java.awt.Graphics javax.swing.JComponent.getGraphics()"""
        return 'Graphics'._wrap(super(JComponent, self).getGraphics())

    @override
    @overload
    def setLocale(self, arg0: 'Locale'):
        """public void java.awt.Component.setLocale(java.util.Locale)"""
        super(_Component, self).setLocale(arg0)

    @override
    @overload
    def paintAll(self, arg0: 'Graphics'):
        """public void java.awt.Component.paintAll(java.awt.Graphics)"""
        super(_Component, self).paintAll(arg0)

    @override
    @overload
    def setDoubleBuffered(self, arg0: bool):
        """public void javax.swing.JComponent.setDoubleBuffered(boolean)"""
        super(_JComponent, self).setDoubleBuffered(_boolean.valueOf(arg0))

    @override
    @overload
    def isPreferredSizeSet(self) -> bool:
        """public boolean java.awt.Component.isPreferredSizeSet()"""
        return bool._wrap(super(Component, self).isPreferredSizeSet())

    @override
    @overload
    def addInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.addInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).addInputMethodListener(arg0)

    @override
    @overload
    def removeMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.removeMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).removeMouseWheelListener(arg0)

    @override
    @overload
    def getInputMap(self) -> 'InputMap':
        """public final javax.swing.InputMap javax.swing.JComponent.getInputMap()"""
        return 'InputMap'._wrap(super(JComponent, self).getInputMap())

    @override
    @overload
    def setVisible(self, arg0: bool):
        """public void javax.swing.JComponent.setVisible(boolean)"""
        super(_JComponent, self).setVisible(_boolean.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,byte,byte)"""
        super(_Component, self).firePropertyChange(arg0, _byte.valueOf(arg1), _byte.valueOf(arg2))

    @override
    @overload
    def getUIClassID(self) -> str:
        """public java.lang.String javax.swing.JPanel.getUIClassID()"""
        return str._wrap(super(JPanel, self).getUIClassID())

    @override
    @overload
    def transferFocusDownCycle(self):
        """public void java.awt.Container.transferFocusDownCycle()"""
        super(Container, self).transferFocusDownCycle()

    @override
    @overload
    def getNextFocusableComponent(self) -> 'Component':
        """public java.awt.Component javax.swing.JComponent.getNextFocusableComponent()"""
        return 'Component'._wrap(super(JComponent, self).getNextFocusableComponent())

    @override
    @overload
    def getUI(self) -> 'PanelUI':
        """public javax.swing.plaf.PanelUI javax.swing.JPanel.getUI()"""
        return 'PanelUI'._wrap(super(JPanel, self).getUI())

    @override
    @overload
    def setBounds(self, arg0: 'Rectangle'):
        """public void java.awt.Component.setBounds(java.awt.Rectangle)"""
        super(_Component, self).setBounds(arg0)

    @override
    @overload
    def repaint(self, arg0: int):
        """public void java.awt.Component.repaint(long)"""
        super(_Component, self).repaint(_long.valueOf(arg0))

    @override
    @overload
    def removeHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.removeHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).removeHierarchyBoundsListener(arg0)

    @override
    @overload
    def getComponentPopupMenu(self) -> 'JPopupMenu':
        """public javax.swing.JPopupMenu javax.swing.JComponent.getComponentPopupMenu()"""
        return 'JPopupMenu'._wrap(super(JComponent, self).getComponentPopupMenu())

    @override
    @overload
    def getMousePosition(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getMousePosition() throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(Component, self).getMousePosition())

    @override
    @overload
    def getComponentCount(self) -> int:
        """public int java.awt.Container.getComponentCount()"""
        return int._wrap(super(Container, self).getComponentCount())

    @override
    @overload
    def getInputMethodRequests(self) -> 'InputMethodRequests':
        """public java.awt.im.InputMethodRequests java.awt.Component.getInputMethodRequests()"""
        return 'InputMethodRequests'._wrap(super(Component, self).getInputMethodRequests())

    @override
    @overload
    def setMaximumSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setMaximumSize(java.awt.Dimension)"""
        super(_JComponent, self).setMaximumSize(arg0)

    @override
    @overload
    def setRequestFocusEnabled(self, arg0: bool):
        """public void javax.swing.JComponent.setRequestFocusEnabled(boolean)"""
        super(_JComponent, self).setRequestFocusEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def setFocusTraversalKeys(self, arg0: int, arg1: 'Set'):
        """public void javax.swing.JComponent.setFocusTraversalKeys(int,java.util.Set<? extends java.awt.AWTKeyStroke>)"""
        super(_JComponent, self).setFocusTraversalKeys(_int.valueOf(arg0), arg1)

    @overload
    def inside(self, arg0: int, arg1: int) -> bool:
        """public boolean java.awt.Component.inside(int,int)"""
        return bool._wrap(super(_Component, self).inside(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def requestDefaultFocus(self) -> bool:
        """public boolean javax.swing.JComponent.requestDefaultFocus()"""
        return bool._wrap(super(JComponent, self).requestDefaultFocus())

    @override
    @overload
    def disable(self):
        """public void javax.swing.JComponent.disable()"""
        super(JComponent, self).disable()

    @override
    @overload
    def showContent(self, arg0: bool):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.showContent(boolean)"""
        super(_EditorPanel, self).showContent(_boolean.valueOf(arg0))

    @override
    @overload
    def enableInputMethods(self, arg0: bool):
        """public void java.awt.Component.enableInputMethods(boolean)"""
        super(_Component, self).enableInputMethods(_boolean.valueOf(arg0))

    @override
    @overload
    def layout(self):
        """public void java.awt.Container.layout()"""
        super(Container, self).layout()

    @override
    @overload
    def getInputMethodListeners(self) -> List['InputMethodListener']:
        """public synchronized java.awt.event.InputMethodListener[] java.awt.Component.getInputMethodListeners()"""
        return List['InputMethodListener']._wrap(super(Component, self).getInputMethodListeners())

    @override
    @overload
    def paint(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.paint(java.awt.Graphics)"""
        super(_JComponent, self).paint(arg0)

    @override
    @overload
    def transferFocus(self):
        """public void java.awt.Component.transferFocus()"""
        super(Component, self).transferFocus()

    @override
    @overload
    def removeComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.removeComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).removeComponentListener(arg0)

    @override
    @overload
    def getCursor(self) -> 'Cursor':
        """public java.awt.Cursor java.awt.Component.getCursor()"""
        return 'Cursor'._wrap(super(Component, self).getCursor())

    @override
    @overload
    def setMinimumSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setMinimumSize(java.awt.Dimension)"""
        super(_JComponent, self).setMinimumSize(arg0)

    @override
    @overload
    def getAdvancedPanel(self) -> 'JPanel':
        """public javax.swing.JPanel com.badlogic.gdx.tools.flame.EditorPanel.getAdvancedPanel()"""
        return 'JPanel'._wrap(super(EditorPanel, self).getAdvancedPanel())

    @override
    @overload
    def getContainerListeners(self) -> List['ContainerListener']:
        """public synchronized java.awt.event.ContainerListener[] java.awt.Container.getContainerListeners()"""
        return List['ContainerListener']._wrap(super(Container, self).getContainerListeners())

    @override
    @overload
    def setLocation(self, arg0: 'Point'):
        """public void java.awt.Component.setLocation(java.awt.Point)"""
        super(_Component, self).setLocation(arg0)

    @override
    @overload
    def setSize(self, arg0: 'Dimension'):
        """public void java.awt.Component.setSize(java.awt.Dimension)"""
        super(_Component, self).setSize(arg0)

    @override
    @overload
    def removeAll(self):
        """public void java.awt.Container.removeAll()"""
        super(Container, self).removeAll()

    @overload
    def getPopupLocation(self, arg0: 'MouseEvent') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getPopupLocation(java.awt.event.MouseEvent)"""
        return 'Point'._wrap(super(_JComponent, self).getPopupLocation(arg0))

    @overload
    def isAncestorOf(self, arg0: 'Component') -> bool:
        """public boolean java.awt.Container.isAncestorOf(java.awt.Component)"""
        return bool._wrap(super(_Container, self).isAncestorOf(arg0))

    @override
    @overload
    def setOpaque(self, arg0: bool):
        """public void javax.swing.JComponent.setOpaque(boolean)"""
        super(_JComponent, self).setOpaque(_boolean.valueOf(arg0))

    @overload
    def contains(self, arg0: int, arg1: int) -> bool:
        """public boolean javax.swing.JComponent.contains(int,int)"""
        return bool._wrap(super(_JComponent, self).contains(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def setCursor(self, arg0: 'Cursor'):
        """public void java.awt.Component.setCursor(java.awt.Cursor)"""
        super(_Component, self).setCursor(arg0)

    @override
    @overload
    def validate(self):
        """public void java.awt.Container.validate()"""
        super(Container, self).validate()

    @override
    @overload
    def getMaximumSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getMaximumSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getMaximumSize())

    @override
    @overload
    def getBackground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getBackground()"""
        return 'Color'._wrap(super(Component, self).getBackground())

    @overload
    def createImage(self, arg0: 'ImageProducer') -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(java.awt.image.ImageProducer)"""
        return 'Image'._wrap(super(_Component, self).createImage(arg0))

    @override
    @overload
    def setVerifyInputWhenFocusTarget(self, arg0: bool):
        """public void javax.swing.JComponent.setVerifyInputWhenFocusTarget(boolean)"""
        super(_JComponent, self).setVerifyInputWhenFocusTarget(_boolean.valueOf(arg0))

    @override
    @overload
    def removePropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0, arg1)

    @override
    @overload
    def countComponents(self) -> int:
        """public int java.awt.Container.countComponents()"""
        return int._wrap(super(Container, self).countComponents()) 
 
 
# CLASS: com.badlogic.gdx.tools.flame.LoaderButton$Listener
import com.badlogic.gdx.tools.flame.LoaderButton as _LoaderButton_Listener
_Listener = _LoaderButton_Listener.Listener
from abc import abstractmethod, ABC
 
class Listener():
    """com.badlogic.gdx.tools.flame.LoaderButton.Listener"""
 
    @staticmethod
    def _wrap(java_value: _Listener) -> 'Listener':
        return Listener(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Listener):
        """
        Dynamic initializer for Listener.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Listener__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Listener__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @abstractmethod
    def onResourceLoaded(self, arg0: object):
        """public abstract void com.badlogic.gdx.tools.flame.LoaderButton$Listener.onResourceLoaded(T)"""
        pass 
 
 
# CLASS: com.badlogic.gdx.tools.flame.EmptyPanel
import javax.accessibility.AccessibleContext as AccessibleContext
import javax.swing.JToolTip as JToolTip
import java.awt.event.HierarchyBoundsListener as HierarchyBoundsListener
import java.awt.event.ActionListener as _ActionListener
_ActionListener = _ActionListener
import java.awt.ComponentOrientation as _ComponentOrientation
_ComponentOrientation = _ComponentOrientation
import java.awt.image.ImageProducer as ImageProducer
import java.awt.GraphicsConfiguration as GraphicsConfiguration
import java.awt.Graphics as _Graphics
_Graphics = _Graphics
import javax.swing.JToolTip as _JToolTip
_JToolTip = _JToolTip
import java.awt.Container as _Container
_Container = _Container
import java.awt.MenuComponent as MenuComponent
import java.awt.im.InputMethodRequests as _InputMethodRequests
_InputMethodRequests = _InputMethodRequests
import java.awt.FocusTraversalPolicy as _FocusTraversalPolicy
_FocusTraversalPolicy = _FocusTraversalPolicy
import java.lang.Byte as _byte
import java.awt.Dimension as Dimension
import java.awt.Font as _Font
_Font = _Font
import javax.swing.plaf.PanelUI as _PanelUI
_PanelUI = _PanelUI
import java.awt.event.ContainerListener as ContainerListener
import javax.swing.event.AncestorListener as AncestorListener
import java.awt.AWTEvent as AWTEvent
import javax.swing.JPanel as JPanel
import java.awt.image.ColorModel as _ColorModel
_ColorModel = _ColorModel
import java.lang.Object as _object
import java.awt.ComponentOrientation as ComponentOrientation
import java.awt.im.InputContext as _InputContext
_InputContext = _InputContext
from builtins import float
import java.awt.event.HierarchyListener as HierarchyListener
import java.awt.event.InputMethodListener as InputMethodListener
from typing import List
import java.awt.event.MouseWheelListener as _MouseWheelListener
_MouseWheelListener = _MouseWheelListener
import java.awt.event.KeyListener as KeyListener
import java.awt.Component as Component
from builtins import int
import java.awt.LayoutManager as LayoutManager
import java.awt.FontMetrics as _FontMetrics
_FontMetrics = _FontMetrics
import java.awt.Container as Container
from builtins import type
import java.awt.image.VolatileImage as _VolatileImage
_VolatileImage = _VolatileImage
import java.awt.Shape as Shape
import com.badlogic.gdx.tools.flame.EditorPanel as _EditorPanel
_EditorPanel = _EditorPanel
import java.awt.Rectangle as Rectangle
import java.awt.event.ContainerListener as _ContainerListener
_ContainerListener = _ContainerListener
import java.awt.event.HierarchyListener as _HierarchyListener
_HierarchyListener = _HierarchyListener
import java.lang.String as _string
import javax.swing.InputVerifier as _InputVerifier
_InputVerifier = _InputVerifier
import java.awt.Insets as _Insets
_Insets = _Insets
import javax.swing.border.Border as _Border
_Border = _Border
import java.awt.event.ComponentListener as _ComponentListener
_ComponentListener = _ComponentListener
import javax.swing.ActionMap as ActionMap
import java.beans.VetoableChangeListener as VetoableChangeListener
import java.awt.event.ComponentListener as ComponentListener
import javax.swing.KeyStroke as KeyStroke
import java.beans.VetoableChangeListener as _VetoableChangeListener
_VetoableChangeListener = _VetoableChangeListener
from builtins import object
import java.awt.event.KeyListener as _KeyListener
_KeyListener = _KeyListener
import java.awt.Component.BaselineResizeBehavior as BaselineResizeBehavior
import java.awt.Component as _Component_BaselineResizeBehavior
_BaselineResizeBehavior = _Component_BaselineResizeBehavior.BaselineResizeBehavior
import java.awt.Cursor as _Cursor
_Cursor = _Cursor
import java.awt.im.InputMethodRequests as InputMethodRequests
import java.lang.Long as _long
import javax.swing.JPanel as _JPanel
_JPanel = _JPanel
import java.awt.event.FocusListener as _FocusListener
_FocusListener = _FocusListener
import java.lang.Character as _char
import javax.swing.TransferHandler as TransferHandler
import java.awt.event.FocusEvent.Cause as Cause
import javax.swing.JComponent as JComponent
import javax.accessibility.AccessibleContext as _AccessibleContext
_AccessibleContext = _AccessibleContext
import java.awt.event.MouseWheelListener as MouseWheelListener
import java.util.Set as _Set
_Set = _Set
import java.awt.image.ColorModel as ColorModel
import java.lang.Boolean as _boolean
import java.awt.event.MouseMotionListener as MouseMotionListener
import java.util.EventListener as EventListener
import java.awt.Insets as Insets
import javax.swing.KeyStroke as _KeyStroke
_KeyStroke = _KeyStroke
import java.awt.GraphicsConfiguration as _GraphicsConfiguration
_GraphicsConfiguration = _GraphicsConfiguration
import java.awt.dnd.DropTarget as _DropTarget
_DropTarget = _DropTarget
from builtins import bool
import java.beans.PropertyChangeListener as _PropertyChangeListener
_PropertyChangeListener = _PropertyChangeListener
import java.awt.LayoutManager as _LayoutManager
_LayoutManager = _LayoutManager
import java.awt.PopupMenu as PopupMenu
import java.util.EventListener as _EventListener
_EventListener = _EventListener
import java.awt.im.InputContext as InputContext
import java.awt.Component as _Component
_Component = _Component
import java.awt.Font as Font
import java.awt.image.VolatileImage as VolatileImage
import java.awt.dnd.DropTarget as DropTarget
import java.lang.String as _String
_String = _String
import java.lang.Float as _float
import java.awt.Cursor as Cursor
import java.awt.event.MouseListener as _MouseListener
_MouseListener = _MouseListener
import java.awt.Toolkit as _Toolkit
_Toolkit = _Toolkit
import java.io.PrintStream as PrintStream
import javax.swing.JRootPane as _JRootPane
_JRootPane = _JRootPane
import java.awt.Dimension as _Dimension
_Dimension = _Dimension
import java.awt.event.ActionListener as ActionListener
import java.awt.event.MouseEvent as MouseEvent
import java.awt.Color as _Color
_Color = _Color
import javax.swing.JPopupMenu as _JPopupMenu
_JPopupMenu = _JPopupMenu
import javax.swing.InputMap as _InputMap
_InputMap = _InputMap
import java.awt.event.MouseListener as MouseListener
import java.lang.Class as _Class
_Class = _Class
import java.util.Locale as Locale
import java.lang.Double as _double
import javax.swing.plaf.PanelUI as PanelUI
import java.awt.Point as _Point
_Point = _Point
import java.lang.Object as _Object
_Object = _Object
import java.beans.PropertyChangeListener as PropertyChangeListener
import javax.swing.border.Border as Border
import javax.swing.JComponent as _JComponent
_JComponent = _JComponent
import javax.swing.InputVerifier as InputVerifier
import java.io.PrintWriter as PrintWriter
import java.awt.Point as Point
import javax.swing.event.AncestorListener as _AncestorListener
_AncestorListener = _AncestorListener
import java.lang.Short as _short
import java.awt.Toolkit as Toolkit
import java.awt.event.HierarchyBoundsListener as _HierarchyBoundsListener
_HierarchyBoundsListener = _HierarchyBoundsListener
import javax.swing.TransferHandler as _TransferHandler
_TransferHandler = _TransferHandler
import javax.swing.InputMap as InputMap
import java.awt.Rectangle as _Rectangle
_Rectangle = _Rectangle
import javax.swing.JRootPane as JRootPane
import java.awt.Event as Event
import java.awt.event.FocusListener as FocusListener
import java.awt.image.ImageObserver as ImageObserver
from builtins import str
from pyquantum_helper import override
import javax.swing.ActionMap as _ActionMap
_ActionMap = _ActionMap
import com.badlogic.gdx.tools.flame.EmptyPanel as _EmptyPanel
_EmptyPanel = _EmptyPanel
import java.awt.FocusTraversalPolicy as FocusTraversalPolicy
import java.awt.event.MouseMotionListener as _MouseMotionListener
_MouseMotionListener = _MouseMotionListener
import java.awt.event.InputMethodListener as _InputMethodListener
_InputMethodListener = _InputMethodListener
import javax.swing.JPopupMenu as JPopupMenu
import java.util.Set as Set
import java.lang.Integer as _int
import java.awt.Image as _Image
_Image = _Image
import java.awt.FontMetrics as FontMetrics
import java.awt.Color as Color
import java.awt.Image as Image
import java.awt.Graphics as Graphics
import java.awt.ImageCapabilities as ImageCapabilities
import java.util.Locale as _Locale
_Locale = _Locale
 
class EmptyPanel():
    """com.badlogic.gdx.tools.flame.EmptyPanel"""
 
    @staticmethod
    def _wrap(java_value: _EmptyPanel) -> 'EmptyPanel':
        return EmptyPanel(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _EmptyPanel):
        """
        Dynamic initializer for EmptyPanel.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_EmptyPanel__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_EmptyPanel__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def removeVetoableChangeListener(self, arg0: 'VetoableChangeListener'):
        """public synchronized void javax.swing.JComponent.removeVetoableChangeListener(java.beans.VetoableChangeListener)"""
        super(_JComponent, self).removeVetoableChangeListener(arg0)

    @override
    @overload
    def getComponents(self) -> List['Component']:
        """public java.awt.Component[] java.awt.Container.getComponents()"""
        return List['Component']._wrap(super(Container, self).getComponents())

    @override
    @overload
    def setDebugGraphicsOptions(self, arg0: int):
        """public void javax.swing.JComponent.setDebugGraphicsOptions(int)"""
        super(_JComponent, self).setDebugGraphicsOptions(_int.valueOf(arg0))

    @override
    @overload
    def isValid(self) -> bool:
        """public boolean java.awt.Component.isValid()"""
        return bool._wrap(super(Component, self).isValid())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def getDefaultLocale() -> 'Locale':
        """public static java.util.Locale javax.swing.JComponent.getDefaultLocale()"""
        return Locale._wrap(_JComponent.getDefaultLocale())

    @override
    @overload
    def getInputVerifier(self) -> 'InputVerifier':
        """public javax.swing.InputVerifier javax.swing.JComponent.getInputVerifier()"""
        return 'InputVerifier'._wrap(super(JComponent, self).getInputVerifier())

    @override
    @overload
    def list(self, arg0: 'PrintStream', arg1: int):
        """public void java.awt.Container.list(java.io.PrintStream,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @override
    @overload
    def setUI(self, arg0: 'PanelUI'):
        """public void javax.swing.JPanel.setUI(javax.swing.plaf.PanelUI)"""
        super(_JPanel, self).setUI(arg0)

    @override
    @overload
    def getFocusTraversalPolicy(self) -> 'FocusTraversalPolicy':
        """public java.awt.FocusTraversalPolicy java.awt.Container.getFocusTraversalPolicy()"""
        return 'FocusTraversalPolicy'._wrap(super(Container, self).getFocusTraversalPolicy())

    @override
    @overload
    def getParent(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getParent()"""
        return 'Container'._wrap(super(Component, self).getParent())

    @override
    @overload
    def paintImmediately(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.paintImmediately(java.awt.Rectangle)"""
        super(_JComponent, self).paintImmediately(arg0)

    @staticmethod
    @overload
    def setDefaultLocale(arg0: 'Locale'):
        """public static void javax.swing.JComponent.setDefaultLocale(java.util.Locale)"""
        _JComponent.setDefaultLocale(arg0)

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,float,float)"""
        super(_Component, self).firePropertyChange(arg0, _float.valueOf(arg1), _float.valueOf(arg2))

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object)"""
        super(_Container, self).add(arg0, arg1)

    @override
    @overload
    def getLocale(self) -> 'Locale':
        """public java.util.Locale java.awt.Component.getLocale()"""
        return 'Locale'._wrap(super(Component, self).getLocale())

    @override
    @overload
    def setInheritsPopupMenu(self, arg0: bool):
        """public void javax.swing.JComponent.setInheritsPopupMenu(boolean)"""
        super(_JComponent, self).setInheritsPopupMenu(_boolean.valueOf(arg0))

    @override
    @overload
    def getHierarchyListeners(self) -> List['HierarchyListener']:
        """public synchronized java.awt.event.HierarchyListener[] java.awt.Component.getHierarchyListeners()"""
        return List['HierarchyListener']._wrap(super(Component, self).getHierarchyListeners())

    @override
    @overload
    def nextFocus(self):
        """public void java.awt.Component.nextFocus()"""
        super(Component, self).nextFocus()

    @override
    @overload
    def isPaintingTile(self) -> bool:
        """public boolean javax.swing.JComponent.isPaintingTile()"""
        return bool._wrap(super(JComponent, self).isPaintingTile())

    @override
    @overload
    def getContentPanel(self) -> 'JPanel':
        """public javax.swing.JPanel com.badlogic.gdx.tools.flame.EditorPanel.getContentPanel()"""
        return 'JPanel'._wrap(super(EditorPanel, self).getContentPanel())

    @override
    @overload
    def isDisplayable(self) -> bool:
        """public boolean java.awt.Component.isDisplayable()"""
        return bool._wrap(super(Component, self).isDisplayable())

    @override
    @overload
    def getBounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.getBounds()"""
        return 'Rectangle'._wrap(super(Component, self).getBounds())

    @override
    @overload
    def removeMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.removeMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).removeMouseMotionListener(arg0)

    @override
    @overload
    def isShowing(self) -> bool:
        """public boolean java.awt.Component.isShowing()"""
        return bool._wrap(super(Component, self).isShowing())

    @override
    @overload
    def getDropTarget(self) -> 'DropTarget':
        """public synchronized java.awt.dnd.DropTarget java.awt.Component.getDropTarget()"""
        return 'DropTarget'._wrap(super(Component, self).getDropTarget())

    @override
    @overload
    def isFontSet(self) -> bool:
        """public boolean java.awt.Component.isFontSet()"""
        return bool._wrap(super(Component, self).isFontSet())

    @overload
    def mouseUp(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseUp(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseUp(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def setIgnoreRepaint(self, arg0: bool):
        """public void java.awt.Component.setIgnoreRepaint(boolean)"""
        super(_Component, self).setIgnoreRepaint(_boolean.valueOf(arg0))

    @override
    @overload
    def getPropertyChangeListeners(self) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners()"""
        return List['PropertyChangeListener']._wrap(super(Component, self).getPropertyChangeListeners())

    @override
    @overload
    def isBackgroundSet(self) -> bool:
        """public boolean java.awt.Component.isBackgroundSet()"""
        return bool._wrap(super(Component, self).isBackgroundSet())

    @override
    @overload
    def getLocation(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocation()"""
        return 'Point'._wrap(super(Component, self).getLocation())

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int._wrap(super(object, self).hashCode())

    @override
    @overload
    def location(self) -> 'Point':
        """public java.awt.Point java.awt.Component.location()"""
        return 'Point'._wrap(super(Component, self).location())

    @override
    @overload
    def getComponentOrientation(self) -> 'ComponentOrientation':
        """public java.awt.ComponentOrientation java.awt.Component.getComponentOrientation()"""
        return 'ComponentOrientation'._wrap(super(Component, self).getComponentOrientation())

    @override
    @overload
    def addHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.addHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).addHierarchyListener(arg0)

    @override
    @overload
    def getInheritsPopupMenu(self) -> bool:
        """public boolean javax.swing.JComponent.getInheritsPopupMenu()"""
        return bool._wrap(super(JComponent, self).getInheritsPopupMenu())

    @override
    @overload
    def setComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Component.setComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Component, self).setComponentOrientation(arg0)

    @override
    @overload
    def getFocusCycleRootAncestor(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getFocusCycleRootAncestor()"""
        return 'Container'._wrap(super(Component, self).getFocusCycleRootAncestor())

    @override
    @overload
    def show(self, arg0: bool):
        """public void java.awt.Component.show(boolean)"""
        super(_Component, self).show(_boolean.valueOf(arg0))

    @staticmethod
    @overload
    def addContent(arg0: 'JPanel', arg1: int, arg2: int, arg3: 'JComponent', arg4: bool, arg5: int, arg6: int, arg7: float, arg8: float):
        """public static void com.badlogic.gdx.tools.flame.EditorPanel.addContent(javax.swing.JPanel,int,int,javax.swing.JComponent,boolean,int,int,float,float)"""
        _EditorPanel.addContent(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3, _boolean.valueOf(arg4), _int.valueOf(arg5), _int.valueOf(arg6), _float.valueOf(arg7), _float.valueOf(arg8))

    @override
    @overload
    def grabFocus(self):
        """public void javax.swing.JComponent.grabFocus()"""
        super(JComponent, self).grabFocus()

    @overload
    def locate(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.locate(int,int)"""
        return 'Component'._wrap(super(_Container, self).locate(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def isPaintingForPrint(self) -> bool:
        """public final boolean javax.swing.JComponent.isPaintingForPrint()"""
        return bool._wrap(super(JComponent, self).isPaintingForPrint())

    @overload
    def keyDown(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyDown(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyDown(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,int,int)"""
        super(_JComponent, self).firePropertyChange(arg0, _int.valueOf(arg1), _int.valueOf(arg2))

    @override
    @overload
    def getLayout(self) -> 'LayoutManager':
        """public java.awt.LayoutManager java.awt.Container.getLayout()"""
        return 'LayoutManager'._wrap(super(Container, self).getLayout())

    @override
    @overload
    def preferredSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.preferredSize()"""
        return 'Dimension'._wrap(super(Container, self).preferredSize())

    @override
    @overload
    def addNotify(self):
        """public void javax.swing.JComponent.addNotify()"""
        super(JComponent, self).addNotify()

    @override
    @overload
    def setSize(self, arg0: int, arg1: int):
        """public void java.awt.Component.setSize(int,int)"""
        super(_Component, self).setSize(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.repaint(int,int,int,int)"""
        super(_Component, self).repaint(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @overload
    def requestFocusInWindow(self, arg0: 'Cause') -> bool:
        """public boolean java.awt.Component.requestFocusInWindow(java.awt.event.FocusEvent$Cause)"""
        return bool._wrap(super(_Component, self).requestFocusInWindow(arg0))

    @override
    @overload
    def remove(self, arg0: int):
        """public void java.awt.Container.remove(int)"""
        super(_Container, self).remove(_int.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,long,long)"""
        super(_Component, self).firePropertyChange(arg0, _long.valueOf(arg1), _long.valueOf(arg2))

    @override
    @overload
    def update(self, arg0: 'FlameMain'):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.update(com.badlogic.gdx.tools.flame.FlameMain)"""
        super(_EditorPanel, self).update(arg0)

    @override
    @overload
    def setFocusCycleRoot(self, arg0: bool):
        """public void java.awt.Container.setFocusCycleRoot(boolean)"""
        super(_Container, self).setFocusCycleRoot(_boolean.valueOf(arg0))

    @overload
    def keyUp(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyUp(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyUp(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def setBackground(self, arg0: 'Color'):
        """public void javax.swing.JComponent.setBackground(java.awt.Color)"""
        super(_JComponent, self).setBackground(arg0)

    @override
    @overload
    def doLayout(self):
        """public void java.awt.Container.doLayout()"""
        super(Container, self).doLayout()

    @override
    @overload
    def enable(self):
        """public void javax.swing.JComponent.enable()"""
        super(JComponent, self).enable()

    @override
    @overload
    def getInsets(self) -> 'Insets':
        """public java.awt.Insets javax.swing.JComponent.getInsets()"""
        return 'Insets'._wrap(super(JComponent, self).getInsets())

    @override
    @overload
    def setNextFocusableComponent(self, arg0: 'Component'):
        """public void javax.swing.JComponent.setNextFocusableComponent(java.awt.Component)"""
        super(_JComponent, self).setNextFocusableComponent(arg0)

    @override
    @overload
    def getAlignmentY(self) -> float:
        """public float javax.swing.JComponent.getAlignmentY()"""
        return float._wrap(super(JComponent, self).getAlignmentY())

    @overload
    def checkImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @override
    @overload
    def getFocusTraversalKeysEnabled(self) -> bool:
        """public boolean java.awt.Component.getFocusTraversalKeysEnabled()"""
        return bool._wrap(super(Component, self).getFocusTraversalKeysEnabled())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getRootPane(self) -> 'JRootPane':
        """public javax.swing.JRootPane javax.swing.JComponent.getRootPane()"""
        return 'JRootPane'._wrap(super(JComponent, self).getRootPane())

    @override
    @overload
    def invalidate(self):
        """public void java.awt.Container.invalidate()"""
        super(Container, self).invalidate()

    @override
    @overload
    def resetKeyboardActions(self):
        """public void javax.swing.JComponent.resetKeyboardActions()"""
        super(JComponent, self).resetKeyboardActions()

    @overload
    def getComponent(self, arg0: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponent(int)"""
        return 'Component'._wrap(super(_Container, self).getComponent(_int.valueOf(arg0)))

    @override
    @overload
    def setName(self, arg0: str):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setName(java.lang.String)"""
        super(_EditorPanel, self).setName(arg0)

    @override
    @overload
    def addPropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Container.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Container, self).addPropertyChangeListener(arg0, arg1)

    @override
    @overload
    def setInputMap(self, arg0: int, arg1: 'InputMap'):
        """public final void javax.swing.JComponent.setInputMap(int,javax.swing.InputMap)"""
        super(_JComponent, self).setInputMap(_int.valueOf(arg0), arg1)

    @override
    @overload
    def removePropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0)

    @override
    @overload
    def applyComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Container.applyComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Container, self).applyComponentOrientation(arg0)

    @override
    @overload
    def setBorder(self, arg0: 'Border'):
        """public void javax.swing.JComponent.setBorder(javax.swing.border.Border)"""
        super(_JComponent, self).setBorder(arg0)

    @override
    @overload
    def remove(self, arg0: 'MenuComponent'):
        """public void java.awt.Component.remove(java.awt.MenuComponent)"""
        super(_Component, self).remove(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintStream'):
        """public void java.awt.Component.list(java.io.PrintStream)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def removeMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.removeMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).removeMouseListener(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintWriter'):
        """public void java.awt.Component.list(java.io.PrintWriter)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def getKeyListeners(self) -> List['KeyListener']:
        """public synchronized java.awt.event.KeyListener[] java.awt.Component.getKeyListeners()"""
        return List['KeyListener']._wrap(super(Component, self).getKeyListeners())

    @override
    @overload
    def getInputContext(self) -> 'InputContext':
        """public java.awt.im.InputContext java.awt.Component.getInputContext()"""
        return 'InputContext'._wrap(super(Component, self).getInputContext())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,double,double)"""
        super(_Component, self).firePropertyChange(arg0, _double.valueOf(arg1), _double.valueOf(arg2))

    @override
    @overload
    def removeAncestorListener(self, arg0: 'AncestorListener'):
        """public void javax.swing.JComponent.removeAncestorListener(javax.swing.event.AncestorListener)"""
        super(_JComponent, self).removeAncestorListener(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintWriter', arg1: int):
        """public void java.awt.Container.list(java.io.PrintWriter,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @overload
    def checkImage(self, arg0: 'Image', arg1: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, arg1))

    @override
    @overload
    def removeFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.removeFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).removeFocusListener(arg0)

    @overload
    def mouseDown(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDown(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDown(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def setIsAlwayShown(self, arg0: bool):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setIsAlwayShown(boolean)"""
        super(_EditorPanel, self).setIsAlwayShown(_boolean.valueOf(arg0))

    @overload
    def getConditionForKeyStroke(self, arg0: 'KeyStroke') -> int:
        """public int javax.swing.JComponent.getConditionForKeyStroke(javax.swing.KeyStroke)"""
        return int._wrap(super(_JComponent, self).getConditionForKeyStroke(arg0))

    @override
    @overload
    def getTreeLock(self) -> object:
        """public final java.lang.Object java.awt.Component.getTreeLock()"""
        return object._wrap(super(Component, self).getTreeLock())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @override
    @overload
    def addVetoableChangeListener(self, arg0: 'VetoableChangeListener'):
        """public synchronized void javax.swing.JComponent.addVetoableChangeListener(java.beans.VetoableChangeListener)"""
        super(_JComponent, self).addVetoableChangeListener(arg0)

    @overload
    def contains(self, arg0: 'Point') -> bool:
        """public boolean java.awt.Component.contains(java.awt.Point)"""
        return bool._wrap(super(_Component, self).contains(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,short,short)"""
        super(_Component, self).firePropertyChange(arg0, _short.valueOf(arg1), _short.valueOf(arg2))

    @override
    @overload
    def dispatchEvent(self, arg0: 'AWTEvent'):
        """public final void java.awt.Component.dispatchEvent(java.awt.AWTEvent)"""
        super(_Component, self).dispatchEvent(arg0)

    @override
    @overload
    def removeContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.removeContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).removeContainerListener(arg0)

    @override
    @overload
    def getGraphicsConfiguration(self) -> 'GraphicsConfiguration':
        """public java.awt.GraphicsConfiguration java.awt.Component.getGraphicsConfiguration()"""
        return 'GraphicsConfiguration'._wrap(super(Component, self).getGraphicsConfiguration())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: bool, arg2: bool):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,boolean,boolean)"""
        super(_JComponent, self).firePropertyChange(arg0, _boolean.valueOf(arg1), _boolean.valueOf(arg2))

    @override
    @overload
    def registerKeyboardAction(self, arg0: 'ActionListener', arg1: str, arg2: 'KeyStroke', arg3: int):
        """public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,java.lang.String,javax.swing.KeyStroke,int)"""
        super(_JComponent, self).registerKeyboardAction(arg0, arg1, arg2, _int.valueOf(arg3))

    @overload
    def findComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(arg0))

    @override
    @overload
    def resize(self, arg0: int, arg1: int):
        """public void java.awt.Component.resize(int,int)"""
        super(_Component, self).resize(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getHeight(self) -> int:
        """public int javax.swing.JComponent.getHeight()"""
        return int._wrap(super(JComponent, self).getHeight())

    @override
    @overload
    def getTransferHandler(self) -> 'TransferHandler':
        """public javax.swing.TransferHandler javax.swing.JComponent.getTransferHandler()"""
        return 'TransferHandler'._wrap(super(JComponent, self).getTransferHandler())

    @overload
    def imageUpdate(self, arg0: 'Image', arg1: int, arg2: int, arg3: int, arg4: int, arg5: int) -> bool:
        """public boolean java.awt.Component.imageUpdate(java.awt.Image,int,int,int,int,int)"""
        return bool._wrap(super(_Component, self).imageUpdate(arg0, _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4), _int.valueOf(arg5)))

    @override
    @overload
    def getWidth(self) -> int:
        """public int javax.swing.JComponent.getWidth()"""
        return int._wrap(super(JComponent, self).getWidth())

    @override
    @overload
    def transferFocusBackward(self):
        """public void java.awt.Component.transferFocusBackward()"""
        super(Component, self).transferFocusBackward()

    @overload
    def getPropertyChangeListeners(self, arg0: str) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners(java.lang.String)"""
        return List['PropertyChangeListener']._wrap(super(_Component, self).getPropertyChangeListeners(arg0))

    @override
    @overload
    def getName(self) -> str:
        """public java.lang.String com.badlogic.gdx.tools.flame.EditorPanel.getName()"""
        return str._wrap(super(EditorPanel, self).getName())

    @staticmethod
    @overload
    def isLightweightComponent(arg0: 'Component') -> bool:
        """public static boolean javax.swing.JComponent.isLightweightComponent(java.awt.Component)"""
        return bool._wrap(_JComponent.isLightweightComponent(arg0))

    @override
    @overload
    def getBorder(self) -> 'Border':
        """public javax.swing.border.Border javax.swing.JComponent.getBorder()"""
        return 'Border'._wrap(super(JComponent, self).getBorder())

    @override
    @overload
    def printAll(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.printAll(java.awt.Graphics)"""
        super(_JComponent, self).printAll(arg0)

    @override
    @overload
    def addComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.addComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).addComponentListener(arg0)

    @override
    @overload
    def getBaselineResizeBehavior(self) -> 'BaselineResizeBehavior.Component$BaselineResizeBehavior':
        """public java.awt.Component$BaselineResizeBehavior javax.swing.JComponent.getBaselineResizeBehavior()"""
        return 'BaselineResizeBehavior.Component$BaselineResizeBehavior'._wrap(super(JComponent, self).getBaselineResizeBehavior())

    @override
    @overload
    def print(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.print(java.awt.Graphics)"""
        super(_JComponent, self).print(arg0)

    @override
    @overload
    def setInputVerifier(self, arg0: 'InputVerifier'):
        """public void javax.swing.JComponent.setInputVerifier(javax.swing.InputVerifier)"""
        super(_JComponent, self).setInputVerifier(arg0)

    @override
    @overload
    def addAncestorListener(self, arg0: 'AncestorListener'):
        """public void javax.swing.JComponent.addAncestorListener(javax.swing.event.AncestorListener)"""
        super(_JComponent, self).addAncestorListener(arg0)

    @override
    @overload
    def getFont(self) -> 'Font':
        """public java.awt.Font java.awt.Component.getFont()"""
        return 'Font'._wrap(super(Component, self).getFont())

    @override
    @overload
    def setFont(self, arg0: 'Font'):
        """public void javax.swing.JComponent.setFont(java.awt.Font)"""
        super(_JComponent, self).setFont(arg0)

    @override
    @overload
    def isOptimizedDrawingEnabled(self) -> bool:
        """public boolean javax.swing.JComponent.isOptimizedDrawingEnabled()"""
        return bool._wrap(super(JComponent, self).isOptimizedDrawingEnabled())

    @override
    @overload
    def isValidateRoot(self) -> bool:
        """public boolean javax.swing.JComponent.isValidateRoot()"""
        return bool._wrap(super(JComponent, self).isValidateRoot())

    @overload
    def prepareImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @override
    @overload
    def setHasAdvanced(self, arg0: bool):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setHasAdvanced(boolean)"""
        super(_EditorPanel, self).setHasAdvanced(_boolean.valueOf(arg0))

    @override
    @overload
    def setForeground(self, arg0: 'Color'):
        """public void javax.swing.JComponent.setForeground(java.awt.Color)"""
        super(_JComponent, self).setForeground(arg0)

    @overload
    def mouseDrag(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDrag(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDrag(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def isOpaque(self) -> bool:
        """public boolean javax.swing.JComponent.isOpaque()"""
        return bool._wrap(super(JComponent, self).isOpaque())

    @overload
    def createVolatileImage(self, arg0: int, arg1: int, arg2: 'ImageCapabilities') -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int,java.awt.ImageCapabilities) throws java.awt.AWTException"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1), arg2))

    @override
    @overload
    def bounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.bounds()"""
        return 'Rectangle'._wrap(super(Component, self).bounds())

    @override
    @overload
    def update(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.update(java.awt.Graphics)"""
        super(_JComponent, self).update(arg0)

    @override
    @overload
    def add(self, arg0: 'PopupMenu'):
        """public void java.awt.Component.add(java.awt.PopupMenu)"""
        super(_Component, self).add(arg0)

    @override
    @overload
    def getToolTipText(self) -> str:
        """public java.lang.String javax.swing.JComponent.getToolTipText()"""
        return str._wrap(super(JComponent, self).getToolTipText())

    @override
    @overload
    def isVisible(self) -> bool:
        """public boolean java.awt.Component.isVisible()"""
        return bool._wrap(super(Component, self).isVisible())

    @override
    @overload
    def setDropTarget(self, arg0: 'DropTarget'):
        """public synchronized void java.awt.Component.setDropTarget(java.awt.dnd.DropTarget)"""
        super(_Component, self).setDropTarget(arg0)

    @override
    @overload
    def getLocationOnScreen(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocationOnScreen()"""
        return 'Point'._wrap(super(Component, self).getLocationOnScreen())

    @override
    @overload
    def getY(self) -> int:
        """public int javax.swing.JComponent.getY()"""
        return int._wrap(super(JComponent, self).getY())

    @overload
    def getComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def isMaximumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMaximumSizeSet()"""
        return bool._wrap(super(Component, self).isMaximumSizeSet())

    @override
    @overload
    def setAlignmentY(self, arg0: float):
        """public void javax.swing.JComponent.setAlignmentY(float)"""
        super(_JComponent, self).setAlignmentY(_float.valueOf(arg0))

    @override
    @overload
    def getRegisteredKeyStrokes(self) -> List['KeyStroke']:
        """public javax.swing.KeyStroke[] javax.swing.JComponent.getRegisteredKeyStrokes()"""
        return List['KeyStroke']._wrap(super(JComponent, self).getRegisteredKeyStrokes())

    @override
    @overload
    def isFocusable(self) -> bool:
        """public boolean java.awt.Component.isFocusable()"""
        return bool._wrap(super(Component, self).isFocusable())

    @override
    @overload
    def isFocusTraversalPolicyProvider(self) -> bool:
        """public final boolean java.awt.Container.isFocusTraversalPolicyProvider()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicyProvider())

    @override
    @overload
    def getMouseListeners(self) -> List['MouseListener']:
        """public synchronized java.awt.event.MouseListener[] java.awt.Component.getMouseListeners()"""
        return List['MouseListener']._wrap(super(Component, self).getMouseListeners())

    @override
    @overload
    def setValue(self, arg0: object):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setValue(T)"""
        super(_EditorPanel, self).setValue(arg0)

    @override
    @overload
    def registerKeyboardAction(self, arg0: 'ActionListener', arg1: 'KeyStroke', arg2: int):
        """public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,javax.swing.KeyStroke,int)"""
        super(_JComponent, self).registerKeyboardAction(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def transferFocusUpCycle(self):
        """public void java.awt.Component.transferFocusUpCycle()"""
        super(Component, self).transferFocusUpCycle()

    @override
    @overload
    def removeKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.removeKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).removeKeyListener(arg0)

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: str, arg2: str):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,char,char)"""
        super(_JComponent, self).firePropertyChange(arg0, _char.valueOf(arg1), _char.valueOf(arg2))

    @override
    @overload
    def getMouseMotionListeners(self) -> List['MouseMotionListener']:
        """public synchronized java.awt.event.MouseMotionListener[] java.awt.Component.getMouseMotionListeners()"""
        return List['MouseMotionListener']._wrap(super(Component, self).getMouseMotionListeners())

    @override
    @overload
    def getAutoscrolls(self) -> bool:
        """public boolean javax.swing.JComponent.getAutoscrolls()"""
        return bool._wrap(super(JComponent, self).getAutoscrolls())

    @override
    @overload
    def addContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.addContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).addContainerListener(arg0)

    @override
    @overload
    def isFocusTraversable(self) -> bool:
        """public boolean java.awt.Component.isFocusTraversable()"""
        return bool._wrap(super(Component, self).isFocusTraversable())

    @overload
    def mouseExit(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseExit(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseExit(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getBounds(self, arg0: 'Rectangle') -> 'Rectangle':
        """public java.awt.Rectangle javax.swing.JComponent.getBounds(java.awt.Rectangle)"""
        return 'Rectangle'._wrap(super(_JComponent, self).getBounds(arg0))

    @override
    @overload
    def setToolTipText(self, arg0: str):
        """public void javax.swing.JComponent.setToolTipText(java.lang.String)"""
        super(_JComponent, self).setToolTipText(arg0)

    @override
    @overload
    def setAutoscrolls(self, arg0: bool):
        """public void javax.swing.JComponent.setAutoscrolls(boolean)"""
        super(_JComponent, self).setAutoscrolls(_boolean.valueOf(arg0))

    @override
    @overload
    def setComponentPopupMenu(self, arg0: 'JPopupMenu'):
        """public void javax.swing.JComponent.setComponentPopupMenu(javax.swing.JPopupMenu)"""
        super(_JComponent, self).setComponentPopupMenu(arg0)

    @override
    @overload
    def setMixingCutoutShape(self, arg0: 'Shape'):
        """public void java.awt.Component.setMixingCutoutShape(java.awt.Shape)"""
        super(_Component, self).setMixingCutoutShape(arg0)

    @override
    @overload
    def getVisibleRect(self) -> 'Rectangle':
        """public java.awt.Rectangle javax.swing.JComponent.getVisibleRect()"""
        return 'Rectangle'._wrap(super(JComponent, self).getVisibleRect())

    @override
    @overload
    def requestFocus(self, arg0: 'Cause'):
        """public void java.awt.Component.requestFocus(java.awt.event.FocusEvent$Cause)"""
        super(_Component, self).requestFocus(arg0)

    @overload
    def createImage(self, arg0: int, arg1: int) -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(int,int)"""
        return 'Image'._wrap(super(_Component, self).createImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def putClientProperty(self, arg0: object, arg1: object):
        """public final void javax.swing.JComponent.putClientProperty(java.lang.Object,java.lang.Object)"""
        super(_JComponent, self).putClientProperty(arg0, arg1)

    @override
    @overload
    def getVetoableChangeListeners(self) -> List['VetoableChangeListener']:
        """public synchronized java.beans.VetoableChangeListener[] javax.swing.JComponent.getVetoableChangeListeners()"""
        return List['VetoableChangeListener']._wrap(super(JComponent, self).getVetoableChangeListeners())

    @override
    @overload
    def scrollRectToVisible(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.scrollRectToVisible(java.awt.Rectangle)"""
        super(_JComponent, self).scrollRectToVisible(arg0)

    @override
    @overload
    def getTopLevelAncestor(self) -> 'Container':
        """public java.awt.Container javax.swing.JComponent.getTopLevelAncestor()"""
        return 'Container'._wrap(super(JComponent, self).getTopLevelAncestor())

    @override
    @overload
    def isRequestFocusEnabled(self) -> bool:
        """public boolean javax.swing.JComponent.isRequestFocusEnabled()"""
        return bool._wrap(super(JComponent, self).isRequestFocusEnabled())

    @override
    @overload
    def getFocusListeners(self) -> List['FocusListener']:
        """public synchronized java.awt.event.FocusListener[] java.awt.Component.getFocusListeners()"""
        return List['FocusListener']._wrap(super(Component, self).getFocusListeners())

    @override
    @overload
    def setLayout(self, arg0: 'LayoutManager'):
        """public void java.awt.Container.setLayout(java.awt.LayoutManager)"""
        super(_Container, self).setLayout(arg0)

    @overload
    def add(self, arg0: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0))

    @override
    @overload
    def getMouseWheelListeners(self) -> List['MouseWheelListener']:
        """public synchronized java.awt.event.MouseWheelListener[] java.awt.Component.getMouseWheelListeners()"""
        return List['MouseWheelListener']._wrap(super(Component, self).getMouseWheelListeners())

    @override
    @overload
    def reshape(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void javax.swing.JComponent.reshape(int,int,int,int)"""
        super(_JComponent, self).reshape(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def setTransferHandler(self, arg0: 'TransferHandler'):
        """public void javax.swing.JComponent.setTransferHandler(javax.swing.TransferHandler)"""
        super(_JComponent, self).setTransferHandler(arg0)

    @override
    @overload
    def getPreferredSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getPreferredSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getPreferredSize())

    @override
    @overload
    def setLocation(self, arg0: int, arg1: int):
        """public void java.awt.Component.setLocation(int,int)"""
        super(_Component, self).setLocation(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def removeInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.removeInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).removeInputMethodListener(arg0)

    @override
    @overload
    def setFocusable(self, arg0: bool):
        """public void java.awt.Component.setFocusable(boolean)"""
        super(_Component, self).setFocusable(_boolean.valueOf(arg0))

    @override
    @overload
    def paintComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.paintComponents(java.awt.Graphics)"""
        super(_Container, self).paintComponents(arg0)

    @override
    @overload
    def addFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.addFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).addFocusListener(arg0)

    @overload
    def prepareImage(self, arg0: 'Image', arg1: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, arg1))

    @override
    @overload
    def addKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.addKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).addKeyListener(arg0)

    @override
    @overload
    def resize(self, arg0: 'Dimension'):
        """public void java.awt.Component.resize(java.awt.Dimension)"""
        super(_Component, self).resize(arg0)

    @override
    @overload
    def setComponentZOrder(self, arg0: 'Component', arg1: int):
        """public void java.awt.Container.setComponentZOrder(java.awt.Component,int)"""
        super(_Container, self).setComponentZOrder(arg0, _int.valueOf(arg1))

    @override
    @overload
    def list(self):
        """public void java.awt.Component.list()"""
        super(Component, self).list()

    @overload
    def add(self, arg0: str, arg1: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.lang.String,java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, arg1))

    @override
    @overload
    def paintImmediately(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void javax.swing.JComponent.paintImmediately(int,int,int,int)"""
        super(_JComponent, self).paintImmediately(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def getMinimumSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getMinimumSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getMinimumSize())

    @override
    @overload
    def setEnabled(self, arg0: bool):
        """public void javax.swing.JComponent.setEnabled(boolean)"""
        super(_JComponent, self).setEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def hasFocus(self) -> bool:
        """public boolean java.awt.Component.hasFocus()"""
        return bool._wrap(super(Component, self).hasFocus())

    @overload
    def createVolatileImage(self, arg0: int, arg1: int) -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int)"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.removeHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).removeHierarchyListener(arg0)

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.awt.Component.toString()"""
        return str._wrap(super(Component, self).toString())

    @override
    @overload
    def addMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.addMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).addMouseListener(arg0)

    @override
    @overload
    def isFocusOwner(self) -> bool:
        """public boolean java.awt.Component.isFocusOwner()"""
        return bool._wrap(super(Component, self).isFocusOwner())

    @override
    @overload
    def getAccessibleContext(self) -> 'AccessibleContext':
        """public javax.accessibility.AccessibleContext javax.swing.JPanel.getAccessibleContext()"""
        return 'AccessibleContext'._wrap(super(JPanel, self).getAccessibleContext())

    @overload
    def postEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.postEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).postEvent(arg0))

    @overload
    def getLocation(self, arg0: 'Point') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getLocation(java.awt.Point)"""
        return 'Point'._wrap(super(_JComponent, self).getLocation(arg0))

    @overload
    def getBaseline(self, arg0: int, arg1: int) -> int:
        """public int javax.swing.JComponent.getBaseline(int,int)"""
        return int._wrap(super(_JComponent, self).getBaseline(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def findComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeNotify(self):
        """public void javax.swing.JComponent.removeNotify()"""
        super(JComponent, self).removeNotify()

    @override
    @overload
    def getForeground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getForeground()"""
        return 'Color'._wrap(super(Component, self).getForeground())

    @override
    @overload
    def show(self):
        """public void java.awt.Component.show()"""
        super(Component, self).show()

    @override
    @overload
    def isDoubleBuffered(self) -> bool:
        """public boolean javax.swing.JComponent.isDoubleBuffered()"""
        return bool._wrap(super(JComponent, self).isDoubleBuffered())

    @override
    @overload
    def setDescription(self, arg0: str):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setDescription(java.lang.String)"""
        super(_EditorPanel, self).setDescription(arg0)

    @override
    @overload
    def isFocusCycleRoot(self) -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot()"""
        return bool._wrap(super(Container, self).isFocusCycleRoot())

    @override
    @overload
    def addMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.addMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).addMouseWheelListener(arg0)

    @override
    @overload
    def hide(self):
        """public void javax.swing.JComponent.hide()"""
        super(JComponent, self).hide()

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def revalidate(self):
        """public void javax.swing.JComponent.revalidate()"""
        super(JComponent, self).revalidate()

    @override
    @overload
    def getActionMap(self) -> 'ActionMap':
        """public final javax.swing.ActionMap javax.swing.JComponent.getActionMap()"""
        return 'ActionMap'._wrap(super(JComponent, self).getActionMap())

    @override
    @overload
    def requestFocusInWindow(self) -> bool:
        """public boolean javax.swing.JComponent.requestFocusInWindow()"""
        return bool._wrap(super(JComponent, self).requestFocusInWindow())

    @overload
    def action(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.action(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).action(arg0, arg1))

    @override
    @overload
    def isManagingFocus(self) -> bool:
        """public boolean javax.swing.JComponent.isManagingFocus()"""
        return bool._wrap(super(JComponent, self).isManagingFocus())

    @override
    @overload
    def isLightweight(self) -> bool:
        """public boolean java.awt.Component.isLightweight()"""
        return bool._wrap(super(Component, self).isLightweight())

    @override
    @overload
    def setAlignmentX(self, arg0: float):
        """public void javax.swing.JComponent.setAlignmentX(float)"""
        super(_JComponent, self).setAlignmentX(_float.valueOf(arg0))

    @overload
    def getFocusTraversalKeys(self, arg0: int) -> 'Set':
        """public java.util.Set<java.awt.AWTKeyStroke> java.awt.Container.getFocusTraversalKeys(int)"""
        return 'Set'._wrap(super(_Container, self).getFocusTraversalKeys(_int.valueOf(arg0)))

    @override
    @overload
    def setFocusTraversalKeysEnabled(self, arg0: bool):
        """public void java.awt.Component.setFocusTraversalKeysEnabled(boolean)"""
        super(_Component, self).setFocusTraversalKeysEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def remove(self, arg0: 'Component'):
        """public void java.awt.Container.remove(java.awt.Component)"""
        super(_Container, self).remove(arg0)

    @overload
    def getInsets(self, arg0: 'Insets') -> 'Insets':
        """public java.awt.Insets javax.swing.JComponent.getInsets(java.awt.Insets)"""
        return 'Insets'._wrap(super(_JComponent, self).getInsets(arg0))

    @override
    @overload
    def insets(self) -> 'Insets':
        """public java.awt.Insets java.awt.Container.insets()"""
        return 'Insets'._wrap(super(Container, self).insets())

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int):
        """public void javax.swing.JComponent.repaint(long,int,int,int,int)"""
        super(_JComponent, self).repaint(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4))

    @override
    @overload
    def setFocusTraversalPolicy(self, arg0: 'FocusTraversalPolicy'):
        """public void java.awt.Container.setFocusTraversalPolicy(java.awt.FocusTraversalPolicy)"""
        super(_Container, self).setFocusTraversalPolicy(arg0)

    @overload
    def getSize(self, arg0: 'Dimension') -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getSize(java.awt.Dimension)"""
        return 'Dimension'._wrap(super(_JComponent, self).getSize(arg0))

    @override
    @overload
    def enable(self, arg0: bool):
        """public void java.awt.Component.enable(boolean)"""
        super(_Component, self).enable(_boolean.valueOf(arg0))

    @overload
    def getToolTipLocation(self, arg0: 'MouseEvent') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getToolTipLocation(java.awt.event.MouseEvent)"""
        return 'Point'._wrap(super(_JComponent, self).getToolTipLocation(arg0))

    @override
    @overload
    def addPropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Container.addPropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Container, self).addPropertyChangeListener(arg0)

    @overload
    def getComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(arg0))

    @override
    @overload
    def size(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.size()"""
        return 'Dimension'._wrap(super(Component, self).size())

    @override
    @overload
    def getVerifyInputWhenFocusTarget(self) -> bool:
        """public boolean javax.swing.JComponent.getVerifyInputWhenFocusTarget()"""
        return bool._wrap(super(JComponent, self).getVerifyInputWhenFocusTarget())

    @overload
    def mouseMove(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseMove(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseMove(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getActionForKeyStroke(self, arg0: 'KeyStroke') -> 'ActionListener':
        """public java.awt.event.ActionListener javax.swing.JComponent.getActionForKeyStroke(javax.swing.KeyStroke)"""
        return 'ActionListener'._wrap(super(_JComponent, self).getActionForKeyStroke(arg0))

    @overload
    def lostFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.lostFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).lostFocus(arg0, arg1))

    @override
    @overload
    def isMinimumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMinimumSizeSet()"""
        return bool._wrap(super(Component, self).isMinimumSizeSet())

    @override
    @overload
    def isForegroundSet(self) -> bool:
        """public boolean java.awt.Component.isForegroundSet()"""
        return bool._wrap(super(Component, self).isForegroundSet())

    @overload
    def getMousePosition(self, arg0: bool) -> 'Point':
        """public java.awt.Point java.awt.Container.getMousePosition(boolean) throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(_Container, self).getMousePosition(_boolean.valueOf(arg0)))

    @overload
    def __init__(self, arg0: 'FlameMain', arg1: str, arg2: str):
        """public com.badlogic.gdx.tools.flame.EmptyPanel(com.badlogic.gdx.tools.flame.FlameMain,java.lang.String,java.lang.String)"""
        val = _EmptyPanel(arg0, arg1, arg2)
        self.__wrapper = val

    @overload
    def getFontMetrics(self, arg0: 'Font') -> 'FontMetrics':
        """public java.awt.FontMetrics javax.swing.JComponent.getFontMetrics(java.awt.Font)"""
        return 'FontMetrics'._wrap(super(_JComponent, self).getFontMetrics(arg0))

    @overload
    def getListeners(self, arg0: 'Class') -> List['EventListener']:
        """public <T extends java.util.EventListener> T[] javax.swing.JComponent.getListeners(java.lang.Class<T>)"""
        return List['EventListener']._wrap(super(_JComponent, self).getListeners(arg0))

    @override
    @overload
    def getHierarchyBoundsListeners(self) -> List['HierarchyBoundsListener']:
        """public synchronized java.awt.event.HierarchyBoundsListener[] java.awt.Component.getHierarchyBoundsListeners()"""
        return List['HierarchyBoundsListener']._wrap(super(Component, self).getHierarchyBoundsListeners())

    @override
    @overload
    def minimumSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.minimumSize()"""
        return 'Dimension'._wrap(super(Container, self).minimumSize())

    @overload
    def handleEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.handleEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).handleEvent(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @override
    @overload
    def getComponentListeners(self) -> List['ComponentListener']:
        """public synchronized java.awt.event.ComponentListener[] java.awt.Component.getComponentListeners()"""
        return List['ComponentListener']._wrap(super(Component, self).getComponentListeners())

    @override
    @overload
    def computeVisibleRect(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.computeVisibleRect(java.awt.Rectangle)"""
        super(_JComponent, self).computeVisibleRect(arg0)

    @override
    @overload
    def deliverEvent(self, arg0: 'Event'):
        """public void java.awt.Container.deliverEvent(java.awt.Event)"""
        super(_Container, self).deliverEvent(arg0)

    @override
    @overload
    def addHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.addHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).addHierarchyBoundsListener(arg0)

    @override
    @overload
    def getAlignmentX(self) -> float:
        """public float javax.swing.JComponent.getAlignmentX()"""
        return float._wrap(super(JComponent, self).getAlignmentX())

    @overload
    def add(self, arg0: 'Component', arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component,int)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def repaint(self):
        """public void java.awt.Component.repaint()"""
        super(Component, self).repaint()

    @overload
    def gotFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.gotFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).gotFocus(arg0, arg1))

    @override
    @overload
    def createToolTip(self) -> 'JToolTip':
        """public javax.swing.JToolTip javax.swing.JComponent.createToolTip()"""
        return 'JToolTip'._wrap(super(JComponent, self).createToolTip())

    @override
    @overload
    def setEmbedded(self):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setEmbedded()"""
        super(EditorPanel, self).setEmbedded()

    @overload
    def getToolTipText(self, arg0: 'MouseEvent') -> str:
        """public java.lang.String javax.swing.JComponent.getToolTipText(java.awt.event.MouseEvent)"""
        return str._wrap(super(_JComponent, self).getToolTipText(arg0))

    @override
    @overload
    def printComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.printComponents(java.awt.Graphics)"""
        super(_Container, self).printComponents(arg0)

    @override
    @overload
    def getColorModel(self) -> 'ColorModel':
        """public java.awt.image.ColorModel java.awt.Component.getColorModel()"""
        return 'ColorModel'._wrap(super(Component, self).getColorModel())

    @override
    @overload
    def setFocusTraversalPolicyProvider(self, arg0: bool):
        """public final void java.awt.Container.setFocusTraversalPolicyProvider(boolean)"""
        super(_Container, self).setFocusTraversalPolicyProvider(_boolean.valueOf(arg0))

    @overload
    def getComponentZOrder(self, arg0: 'Component') -> int:
        """public int java.awt.Container.getComponentZOrder(java.awt.Component)"""
        return int._wrap(super(_Container, self).getComponentZOrder(arg0))

    @override
    @overload
    def getDebugGraphicsOptions(self) -> int:
        """public int javax.swing.JComponent.getDebugGraphicsOptions()"""
        return int._wrap(super(JComponent, self).getDebugGraphicsOptions())

    @overload
    def areFocusTraversalKeysSet(self, arg0: int) -> bool:
        """public boolean java.awt.Container.areFocusTraversalKeysSet(int)"""
        return bool._wrap(super(_Container, self).areFocusTraversalKeysSet(_int.valueOf(arg0)))

    @override
    @overload
    def getSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.getSize()"""
        return 'Dimension'._wrap(super(Component, self).getSize())

    @override
    @overload
    def repaint(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.repaint(java.awt.Rectangle)"""
        super(_JComponent, self).repaint(arg0)

    @overload
    def getClientProperty(self, arg0: object) -> object:
        """public final java.lang.Object javax.swing.JComponent.getClientProperty(java.lang.Object)"""
        return object._wrap(super(_JComponent, self).getClientProperty(arg0))

    @override
    @overload
    def unregisterKeyboardAction(self, arg0: 'KeyStroke'):
        """public void javax.swing.JComponent.unregisterKeyboardAction(javax.swing.KeyStroke)"""
        super(_JComponent, self).unregisterKeyboardAction(arg0)

    @overload
    def requestFocus(self, arg0: bool) -> bool:
        """public boolean javax.swing.JComponent.requestFocus(boolean)"""
        return bool._wrap(super(_JComponent, self).requestFocus(_boolean.valueOf(arg0)))

    @override
    @overload
    def setActionMap(self, arg0: 'ActionMap'):
        """public final void javax.swing.JComponent.setActionMap(javax.swing.ActionMap)"""
        super(_JComponent, self).setActionMap(arg0)

    @override
    @overload
    def getX(self) -> int:
        """public int javax.swing.JComponent.getX()"""
        return int._wrap(super(JComponent, self).getX())

    @overload
    def mouseEnter(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseEnter(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseEnter(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def updateUI(self):
        """public void javax.swing.JPanel.updateUI()"""
        super(JPanel, self).updateUI()

    @override
    @overload
    def getToolkit(self) -> 'Toolkit':
        """public java.awt.Toolkit java.awt.Component.getToolkit()"""
        return 'Toolkit'._wrap(super(Component, self).getToolkit())

    @override
    @overload
    def isCursorSet(self) -> bool:
        """public boolean java.awt.Component.isCursorSet()"""
        return bool._wrap(super(Component, self).isCursorSet())

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object, arg2: int):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object,int)"""
        super(_Container, self).add(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def setPreferredSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setPreferredSize(java.awt.Dimension)"""
        super(_JComponent, self).setPreferredSize(arg0)

    @override
    @overload
    def setBounds(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.setBounds(int,int,int,int)"""
        super(_Component, self).setBounds(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def isFocusTraversalPolicySet(self) -> bool:
        """public boolean java.awt.Container.isFocusTraversalPolicySet()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicySet())

    @override
    @overload
    def requestFocus(self):
        """public void javax.swing.JComponent.requestFocus()"""
        super(JComponent, self).requestFocus()

    @override
    @overload
    def getAncestorListeners(self) -> List['AncestorListener']:
        """public javax.swing.event.AncestorListener[] javax.swing.JComponent.getAncestorListeners()"""
        return List['AncestorListener']._wrap(super(JComponent, self).getAncestorListeners())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool._wrap(super(_object, self).equals(arg0))

    @overload
    def getInputMap(self, arg0: int) -> 'InputMap':
        """public final javax.swing.InputMap javax.swing.JComponent.getInputMap(int)"""
        return 'InputMap'._wrap(super(_JComponent, self).getInputMap(_int.valueOf(arg0)))

    @override
    @overload
    def isEnabled(self) -> bool:
        """public boolean java.awt.Component.isEnabled()"""
        return bool._wrap(super(Component, self).isEnabled())

    @override
    @overload
    def move(self, arg0: int, arg1: int):
        """public void java.awt.Component.move(int,int)"""
        super(_Component, self).move(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def addMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.addMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).addMouseMotionListener(arg0)

    @override
    @overload
    def getIgnoreRepaint(self) -> bool:
        """public boolean java.awt.Component.getIgnoreRepaint()"""
        return bool._wrap(super(Component, self).getIgnoreRepaint())

    @overload
    def isFocusCycleRoot(self, arg0: 'Container') -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot(java.awt.Container)"""
        return bool._wrap(super(_Container, self).isFocusCycleRoot(arg0))

    @override
    @overload
    def getGraphics(self) -> 'Graphics':
        """public java.awt.Graphics javax.swing.JComponent.getGraphics()"""
        return 'Graphics'._wrap(super(JComponent, self).getGraphics())

    @override
    @overload
    def setLocale(self, arg0: 'Locale'):
        """public void java.awt.Component.setLocale(java.util.Locale)"""
        super(_Component, self).setLocale(arg0)

    @override
    @overload
    def paintAll(self, arg0: 'Graphics'):
        """public void java.awt.Component.paintAll(java.awt.Graphics)"""
        super(_Component, self).paintAll(arg0)

    @override
    @overload
    def setDoubleBuffered(self, arg0: bool):
        """public void javax.swing.JComponent.setDoubleBuffered(boolean)"""
        super(_JComponent, self).setDoubleBuffered(_boolean.valueOf(arg0))

    @override
    @overload
    def isPreferredSizeSet(self) -> bool:
        """public boolean java.awt.Component.isPreferredSizeSet()"""
        return bool._wrap(super(Component, self).isPreferredSizeSet())

    @override
    @overload
    def addInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.addInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).addInputMethodListener(arg0)

    @override
    @overload
    def removeMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.removeMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).removeMouseWheelListener(arg0)

    @override
    @overload
    def getInputMap(self) -> 'InputMap':
        """public final javax.swing.InputMap javax.swing.JComponent.getInputMap()"""
        return 'InputMap'._wrap(super(JComponent, self).getInputMap())

    @override
    @overload
    def setVisible(self, arg0: bool):
        """public void javax.swing.JComponent.setVisible(boolean)"""
        super(_JComponent, self).setVisible(_boolean.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,byte,byte)"""
        super(_Component, self).firePropertyChange(arg0, _byte.valueOf(arg1), _byte.valueOf(arg2))

    @override
    @overload
    def getUIClassID(self) -> str:
        """public java.lang.String javax.swing.JPanel.getUIClassID()"""
        return str._wrap(super(JPanel, self).getUIClassID())

    @override
    @overload
    def transferFocusDownCycle(self):
        """public void java.awt.Container.transferFocusDownCycle()"""
        super(Container, self).transferFocusDownCycle()

    @override
    @overload
    def getNextFocusableComponent(self) -> 'Component':
        """public java.awt.Component javax.swing.JComponent.getNextFocusableComponent()"""
        return 'Component'._wrap(super(JComponent, self).getNextFocusableComponent())

    @override
    @overload
    def getUI(self) -> 'PanelUI':
        """public javax.swing.plaf.PanelUI javax.swing.JPanel.getUI()"""
        return 'PanelUI'._wrap(super(JPanel, self).getUI())

    @override
    @overload
    def setBounds(self, arg0: 'Rectangle'):
        """public void java.awt.Component.setBounds(java.awt.Rectangle)"""
        super(_Component, self).setBounds(arg0)

    @override
    @overload
    def repaint(self, arg0: int):
        """public void java.awt.Component.repaint(long)"""
        super(_Component, self).repaint(_long.valueOf(arg0))

    @override
    @overload
    def removeHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.removeHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).removeHierarchyBoundsListener(arg0)

    @override
    @overload
    def getComponentPopupMenu(self) -> 'JPopupMenu':
        """public javax.swing.JPopupMenu javax.swing.JComponent.getComponentPopupMenu()"""
        return 'JPopupMenu'._wrap(super(JComponent, self).getComponentPopupMenu())

    @override
    @overload
    def getMousePosition(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getMousePosition() throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(Component, self).getMousePosition())

    @override
    @overload
    def getComponentCount(self) -> int:
        """public int java.awt.Container.getComponentCount()"""
        return int._wrap(super(Container, self).getComponentCount())

    @override
    @overload
    def getInputMethodRequests(self) -> 'InputMethodRequests':
        """public java.awt.im.InputMethodRequests java.awt.Component.getInputMethodRequests()"""
        return 'InputMethodRequests'._wrap(super(Component, self).getInputMethodRequests())

    @override
    @overload
    def setMaximumSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setMaximumSize(java.awt.Dimension)"""
        super(_JComponent, self).setMaximumSize(arg0)

    @override
    @overload
    def setRequestFocusEnabled(self, arg0: bool):
        """public void javax.swing.JComponent.setRequestFocusEnabled(boolean)"""
        super(_JComponent, self).setRequestFocusEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def setFocusTraversalKeys(self, arg0: int, arg1: 'Set'):
        """public void javax.swing.JComponent.setFocusTraversalKeys(int,java.util.Set<? extends java.awt.AWTKeyStroke>)"""
        super(_JComponent, self).setFocusTraversalKeys(_int.valueOf(arg0), arg1)

    @overload
    def inside(self, arg0: int, arg1: int) -> bool:
        """public boolean java.awt.Component.inside(int,int)"""
        return bool._wrap(super(_Component, self).inside(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def requestDefaultFocus(self) -> bool:
        """public boolean javax.swing.JComponent.requestDefaultFocus()"""
        return bool._wrap(super(JComponent, self).requestDefaultFocus())

    @override
    @overload
    def disable(self):
        """public void javax.swing.JComponent.disable()"""
        super(JComponent, self).disable()

    @override
    @overload
    def showContent(self, arg0: bool):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.showContent(boolean)"""
        super(_EditorPanel, self).showContent(_boolean.valueOf(arg0))

    @override
    @overload
    def enableInputMethods(self, arg0: bool):
        """public void java.awt.Component.enableInputMethods(boolean)"""
        super(_Component, self).enableInputMethods(_boolean.valueOf(arg0))

    @override
    @overload
    def layout(self):
        """public void java.awt.Container.layout()"""
        super(Container, self).layout()

    @override
    @overload
    def getInputMethodListeners(self) -> List['InputMethodListener']:
        """public synchronized java.awt.event.InputMethodListener[] java.awt.Component.getInputMethodListeners()"""
        return List['InputMethodListener']._wrap(super(Component, self).getInputMethodListeners())

    @override
    @overload
    def paint(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.paint(java.awt.Graphics)"""
        super(_JComponent, self).paint(arg0)

    @override
    @overload
    def transferFocus(self):
        """public void java.awt.Component.transferFocus()"""
        super(Component, self).transferFocus()

    @override
    @overload
    def removeComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.removeComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).removeComponentListener(arg0)

    @override
    @overload
    def getCursor(self) -> 'Cursor':
        """public java.awt.Cursor java.awt.Component.getCursor()"""
        return 'Cursor'._wrap(super(Component, self).getCursor())

    @override
    @overload
    def setMinimumSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setMinimumSize(java.awt.Dimension)"""
        super(_JComponent, self).setMinimumSize(arg0)

    @override
    @overload
    def getAdvancedPanel(self) -> 'JPanel':
        """public javax.swing.JPanel com.badlogic.gdx.tools.flame.EditorPanel.getAdvancedPanel()"""
        return 'JPanel'._wrap(super(EditorPanel, self).getAdvancedPanel())

    @override
    @overload
    def getContainerListeners(self) -> List['ContainerListener']:
        """public synchronized java.awt.event.ContainerListener[] java.awt.Container.getContainerListeners()"""
        return List['ContainerListener']._wrap(super(Container, self).getContainerListeners())

    @override
    @overload
    def setLocation(self, arg0: 'Point'):
        """public void java.awt.Component.setLocation(java.awt.Point)"""
        super(_Component, self).setLocation(arg0)

    @override
    @overload
    def setSize(self, arg0: 'Dimension'):
        """public void java.awt.Component.setSize(java.awt.Dimension)"""
        super(_Component, self).setSize(arg0)

    @override
    @overload
    def removeAll(self):
        """public void java.awt.Container.removeAll()"""
        super(Container, self).removeAll()

    @overload
    def getPopupLocation(self, arg0: 'MouseEvent') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getPopupLocation(java.awt.event.MouseEvent)"""
        return 'Point'._wrap(super(_JComponent, self).getPopupLocation(arg0))

    @overload
    def isAncestorOf(self, arg0: 'Component') -> bool:
        """public boolean java.awt.Container.isAncestorOf(java.awt.Component)"""
        return bool._wrap(super(_Container, self).isAncestorOf(arg0))

    @override
    @overload
    def setOpaque(self, arg0: bool):
        """public void javax.swing.JComponent.setOpaque(boolean)"""
        super(_JComponent, self).setOpaque(_boolean.valueOf(arg0))

    @overload
    def contains(self, arg0: int, arg1: int) -> bool:
        """public boolean javax.swing.JComponent.contains(int,int)"""
        return bool._wrap(super(_JComponent, self).contains(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def setCursor(self, arg0: 'Cursor'):
        """public void java.awt.Component.setCursor(java.awt.Cursor)"""
        super(_Component, self).setCursor(arg0)

    @override
    @overload
    def validate(self):
        """public void java.awt.Container.validate()"""
        super(Container, self).validate()

    @override
    @overload
    def getMaximumSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getMaximumSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getMaximumSize())

    @override
    @overload
    def getBackground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getBackground()"""
        return 'Color'._wrap(super(Component, self).getBackground())

    @overload
    def createImage(self, arg0: 'ImageProducer') -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(java.awt.image.ImageProducer)"""
        return 'Image'._wrap(super(_Component, self).createImage(arg0))

    @override
    @overload
    def setVerifyInputWhenFocusTarget(self, arg0: bool):
        """public void javax.swing.JComponent.setVerifyInputWhenFocusTarget(boolean)"""
        super(_JComponent, self).setVerifyInputWhenFocusTarget(_boolean.valueOf(arg0))

    @override
    @overload
    def removePropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0, arg1)

    @override
    @overload
    def countComponents(self) -> int:
        """public int java.awt.Container.countComponents()"""
        return int._wrap(super(Container, self).countComponents()) 
 
 
# CLASS: com.badlogic.gdx.tools.flame.DynamicsInfluencerPanel
from pyquantum_helper import import_once as _import_once
import javax.accessibility.AccessibleContext as AccessibleContext
import javax.swing.JToolTip as JToolTip
import java.awt.event.HierarchyBoundsListener as HierarchyBoundsListener
import java.awt.event.ActionListener as _ActionListener
_ActionListener = _ActionListener
import java.awt.ComponentOrientation as _ComponentOrientation
_ComponentOrientation = _ComponentOrientation
import java.awt.image.ImageProducer as ImageProducer
import java.awt.GraphicsConfiguration as GraphicsConfiguration
import java.awt.Graphics as _Graphics
_Graphics = _Graphics
import javax.swing.JToolTip as _JToolTip
_JToolTip = _JToolTip
import java.awt.Container as _Container
_Container = _Container
import java.awt.MenuComponent as MenuComponent
import java.awt.im.InputMethodRequests as _InputMethodRequests
_InputMethodRequests = _InputMethodRequests
import java.awt.FocusTraversalPolicy as _FocusTraversalPolicy
_FocusTraversalPolicy = _FocusTraversalPolicy
import java.lang.Byte as _byte
import java.awt.Dimension as Dimension
import java.awt.Font as _Font
_Font = _Font
import javax.swing.plaf.PanelUI as _PanelUI
_PanelUI = _PanelUI
import java.awt.event.ContainerListener as ContainerListener
import javax.swing.event.AncestorListener as AncestorListener
import java.awt.AWTEvent as AWTEvent
import javax.swing.JPanel as JPanel
import java.awt.image.ColorModel as _ColorModel
_ColorModel = _ColorModel
import java.lang.Object as _object
import java.awt.ComponentOrientation as ComponentOrientation
import java.awt.im.InputContext as _InputContext
_InputContext = _InputContext
from builtins import float
import java.awt.event.HierarchyListener as HierarchyListener
import java.awt.event.InputMethodListener as InputMethodListener
from typing import List
import java.awt.event.MouseWheelListener as _MouseWheelListener
_MouseWheelListener = _MouseWheelListener
import java.awt.event.KeyListener as KeyListener
import java.awt.Component as Component
from builtins import int
import java.awt.LayoutManager as LayoutManager
import java.awt.FontMetrics as _FontMetrics
_FontMetrics = _FontMetrics
import java.awt.Container as Container
from builtins import type
import java.awt.image.VolatileImage as _VolatileImage
_VolatileImage = _VolatileImage
import java.awt.Shape as Shape
import com.badlogic.gdx.tools.flame.EditorPanel as _EditorPanel
_EditorPanel = _EditorPanel
import java.awt.Rectangle as Rectangle
import java.awt.event.ContainerListener as _ContainerListener
_ContainerListener = _ContainerListener
import java.awt.event.HierarchyListener as _HierarchyListener
_HierarchyListener = _HierarchyListener
import java.lang.String as _string
import javax.swing.InputVerifier as _InputVerifier
_InputVerifier = _InputVerifier
import java.awt.Insets as _Insets
_Insets = _Insets
import javax.swing.border.Border as _Border
_Border = _Border
import java.awt.event.ComponentListener as _ComponentListener
_ComponentListener = _ComponentListener
import javax.swing.ActionMap as ActionMap
import java.beans.VetoableChangeListener as VetoableChangeListener
import java.awt.event.ComponentListener as ComponentListener
import javax.swing.KeyStroke as KeyStroke
import java.beans.VetoableChangeListener as _VetoableChangeListener
_VetoableChangeListener = _VetoableChangeListener
from builtins import object
try:
    from pygdx.graphics.g3d.particles import influencers
except ImportError:
    influencers = _import_once("pygdx.graphics.g3d.particles.influencers")

import java.awt.event.KeyListener as _KeyListener
_KeyListener = _KeyListener
import java.awt.Component.BaselineResizeBehavior as BaselineResizeBehavior
import java.awt.Component as _Component_BaselineResizeBehavior
_BaselineResizeBehavior = _Component_BaselineResizeBehavior.BaselineResizeBehavior
import java.awt.Cursor as _Cursor
_Cursor = _Cursor
import java.awt.im.InputMethodRequests as InputMethodRequests
import java.lang.Long as _long
import javax.swing.JPanel as _JPanel
_JPanel = _JPanel
import java.awt.event.FocusListener as _FocusListener
_FocusListener = _FocusListener
import java.lang.Character as _char
import javax.swing.TransferHandler as TransferHandler
import java.awt.event.FocusEvent.Cause as Cause
import javax.swing.JComponent as JComponent
import javax.accessibility.AccessibleContext as _AccessibleContext
_AccessibleContext = _AccessibleContext
import java.awt.event.MouseWheelListener as MouseWheelListener
import java.util.Set as _Set
_Set = _Set
import java.awt.image.ColorModel as ColorModel
import java.lang.Boolean as _boolean
import java.awt.event.MouseMotionListener as MouseMotionListener
import java.util.EventListener as EventListener
import java.awt.Insets as Insets
import javax.swing.KeyStroke as _KeyStroke
_KeyStroke = _KeyStroke
import java.awt.GraphicsConfiguration as _GraphicsConfiguration
_GraphicsConfiguration = _GraphicsConfiguration
import com.badlogic.gdx.tools.flame.DynamicsInfluencerPanel as _DynamicsInfluencerPanel
_DynamicsInfluencerPanel = _DynamicsInfluencerPanel
import java.awt.dnd.DropTarget as _DropTarget
_DropTarget = _DropTarget
from builtins import bool
import java.beans.PropertyChangeListener as _PropertyChangeListener
_PropertyChangeListener = _PropertyChangeListener
import java.awt.LayoutManager as _LayoutManager
_LayoutManager = _LayoutManager
import java.awt.PopupMenu as PopupMenu
import java.util.EventListener as _EventListener
_EventListener = _EventListener
import java.awt.im.InputContext as InputContext
import java.awt.Component as _Component
_Component = _Component
import java.awt.Font as Font
import java.awt.image.VolatileImage as VolatileImage
import java.awt.dnd.DropTarget as DropTarget
import java.lang.String as _String
_String = _String
import java.lang.Float as _float
import java.awt.Cursor as Cursor
import java.awt.event.MouseListener as _MouseListener
_MouseListener = _MouseListener
import java.awt.Toolkit as _Toolkit
_Toolkit = _Toolkit
import java.io.PrintStream as PrintStream
import javax.swing.JRootPane as _JRootPane
_JRootPane = _JRootPane
import java.awt.Dimension as _Dimension
_Dimension = _Dimension
import java.awt.event.ActionListener as ActionListener
import java.awt.event.MouseEvent as MouseEvent
import java.awt.Color as _Color
_Color = _Color
import javax.swing.JPopupMenu as _JPopupMenu
_JPopupMenu = _JPopupMenu
import javax.swing.InputMap as _InputMap
_InputMap = _InputMap
import java.awt.event.MouseListener as MouseListener
import java.lang.Class as _Class
_Class = _Class
import java.util.Locale as Locale
import java.lang.Double as _double
import javax.swing.plaf.PanelUI as PanelUI
import java.awt.Point as _Point
_Point = _Point
import java.lang.Object as _Object
_Object = _Object
import java.beans.PropertyChangeListener as PropertyChangeListener
import javax.swing.border.Border as Border
import javax.swing.JComponent as _JComponent
_JComponent = _JComponent
import javax.swing.InputVerifier as InputVerifier
import java.io.PrintWriter as PrintWriter
import java.awt.Point as Point
import javax.swing.event.AncestorListener as _AncestorListener
_AncestorListener = _AncestorListener
import java.lang.Short as _short
import java.awt.Toolkit as Toolkit
import java.awt.event.HierarchyBoundsListener as _HierarchyBoundsListener
_HierarchyBoundsListener = _HierarchyBoundsListener
import javax.swing.TransferHandler as _TransferHandler
_TransferHandler = _TransferHandler
import javax.swing.InputMap as InputMap
import java.awt.Rectangle as _Rectangle
_Rectangle = _Rectangle
import javax.swing.JRootPane as JRootPane
import java.awt.Event as Event
import java.awt.event.FocusListener as FocusListener
import java.awt.image.ImageObserver as ImageObserver
from builtins import str
from pyquantum_helper import override
import javax.swing.ActionMap as _ActionMap
_ActionMap = _ActionMap
import java.awt.FocusTraversalPolicy as FocusTraversalPolicy
import java.awt.event.MouseMotionListener as _MouseMotionListener
_MouseMotionListener = _MouseMotionListener
import java.awt.event.InputMethodListener as _InputMethodListener
_InputMethodListener = _InputMethodListener
import javax.swing.JPopupMenu as JPopupMenu
import java.util.Set as Set
import java.lang.Integer as _int
import java.awt.Image as _Image
_Image = _Image
import java.awt.FontMetrics as FontMetrics
import java.awt.Color as Color
import java.awt.Image as Image
import java.awt.Graphics as Graphics
import java.awt.ImageCapabilities as ImageCapabilities
import java.util.Locale as _Locale
_Locale = _Locale
 
class DynamicsInfluencerPanel():
    """com.badlogic.gdx.tools.flame.DynamicsInfluencerPanel"""
 
    @staticmethod
    def _wrap(java_value: _DynamicsInfluencerPanel) -> 'DynamicsInfluencerPanel':
        return DynamicsInfluencerPanel(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _DynamicsInfluencerPanel):
        """
        Dynamic initializer for DynamicsInfluencerPanel.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_DynamicsInfluencerPanel__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_DynamicsInfluencerPanel__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def removeVetoableChangeListener(self, arg0: 'VetoableChangeListener'):
        """public synchronized void javax.swing.JComponent.removeVetoableChangeListener(java.beans.VetoableChangeListener)"""
        super(_JComponent, self).removeVetoableChangeListener(arg0)

    @override
    @overload
    def getComponents(self) -> List['Component']:
        """public java.awt.Component[] java.awt.Container.getComponents()"""
        return List['Component']._wrap(super(Container, self).getComponents())

    @override
    @overload
    def setDebugGraphicsOptions(self, arg0: int):
        """public void javax.swing.JComponent.setDebugGraphicsOptions(int)"""
        super(_JComponent, self).setDebugGraphicsOptions(_int.valueOf(arg0))

    @override
    @overload
    def isValid(self) -> bool:
        """public boolean java.awt.Component.isValid()"""
        return bool._wrap(super(Component, self).isValid())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def getDefaultLocale() -> 'Locale':
        """public static java.util.Locale javax.swing.JComponent.getDefaultLocale()"""
        return Locale._wrap(_JComponent.getDefaultLocale())

    @override
    @overload
    def getInputVerifier(self) -> 'InputVerifier':
        """public javax.swing.InputVerifier javax.swing.JComponent.getInputVerifier()"""
        return 'InputVerifier'._wrap(super(JComponent, self).getInputVerifier())

    @override
    @overload
    def list(self, arg0: 'PrintStream', arg1: int):
        """public void java.awt.Container.list(java.io.PrintStream,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @override
    @overload
    def setUI(self, arg0: 'PanelUI'):
        """public void javax.swing.JPanel.setUI(javax.swing.plaf.PanelUI)"""
        super(_JPanel, self).setUI(arg0)

    @override
    @overload
    def getFocusTraversalPolicy(self) -> 'FocusTraversalPolicy':
        """public java.awt.FocusTraversalPolicy java.awt.Container.getFocusTraversalPolicy()"""
        return 'FocusTraversalPolicy'._wrap(super(Container, self).getFocusTraversalPolicy())

    @override
    @overload
    def getParent(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getParent()"""
        return 'Container'._wrap(super(Component, self).getParent())

    @override
    @overload
    def paintImmediately(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.paintImmediately(java.awt.Rectangle)"""
        super(_JComponent, self).paintImmediately(arg0)

    @staticmethod
    @overload
    def setDefaultLocale(arg0: 'Locale'):
        """public static void javax.swing.JComponent.setDefaultLocale(java.util.Locale)"""
        _JComponent.setDefaultLocale(arg0)

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,float,float)"""
        super(_Component, self).firePropertyChange(arg0, _float.valueOf(arg1), _float.valueOf(arg2))

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object)"""
        super(_Container, self).add(arg0, arg1)

    @override
    @overload
    def getLocale(self) -> 'Locale':
        """public java.util.Locale java.awt.Component.getLocale()"""
        return 'Locale'._wrap(super(Component, self).getLocale())

    @override
    @overload
    def setInheritsPopupMenu(self, arg0: bool):
        """public void javax.swing.JComponent.setInheritsPopupMenu(boolean)"""
        super(_JComponent, self).setInheritsPopupMenu(_boolean.valueOf(arg0))

    @override
    @overload
    def getHierarchyListeners(self) -> List['HierarchyListener']:
        """public synchronized java.awt.event.HierarchyListener[] java.awt.Component.getHierarchyListeners()"""
        return List['HierarchyListener']._wrap(super(Component, self).getHierarchyListeners())

    @override
    @overload
    def nextFocus(self):
        """public void java.awt.Component.nextFocus()"""
        super(Component, self).nextFocus()

    @override
    @overload
    def isPaintingTile(self) -> bool:
        """public boolean javax.swing.JComponent.isPaintingTile()"""
        return bool._wrap(super(JComponent, self).isPaintingTile())

    @override
    @overload
    def getContentPanel(self) -> 'JPanel':
        """public javax.swing.JPanel com.badlogic.gdx.tools.flame.EditorPanel.getContentPanel()"""
        return 'JPanel'._wrap(super(EditorPanel, self).getContentPanel())

    @override
    @overload
    def isDisplayable(self) -> bool:
        """public boolean java.awt.Component.isDisplayable()"""
        return bool._wrap(super(Component, self).isDisplayable())

    @override
    @overload
    def getBounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.getBounds()"""
        return 'Rectangle'._wrap(super(Component, self).getBounds())

    @override
    @overload
    def removeMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.removeMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).removeMouseMotionListener(arg0)

    @override
    @overload
    def isShowing(self) -> bool:
        """public boolean java.awt.Component.isShowing()"""
        return bool._wrap(super(Component, self).isShowing())

    @override
    @overload
    def getDropTarget(self) -> 'DropTarget':
        """public synchronized java.awt.dnd.DropTarget java.awt.Component.getDropTarget()"""
        return 'DropTarget'._wrap(super(Component, self).getDropTarget())

    @override
    @overload
    def isFontSet(self) -> bool:
        """public boolean java.awt.Component.isFontSet()"""
        return bool._wrap(super(Component, self).isFontSet())

    @overload
    def mouseUp(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseUp(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseUp(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def setIgnoreRepaint(self, arg0: bool):
        """public void java.awt.Component.setIgnoreRepaint(boolean)"""
        super(_Component, self).setIgnoreRepaint(_boolean.valueOf(arg0))

    @override
    @overload
    def getPropertyChangeListeners(self) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners()"""
        return List['PropertyChangeListener']._wrap(super(Component, self).getPropertyChangeListeners())

    @override
    @overload
    def isBackgroundSet(self) -> bool:
        """public boolean java.awt.Component.isBackgroundSet()"""
        return bool._wrap(super(Component, self).isBackgroundSet())

    @override
    @overload
    def getLocation(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocation()"""
        return 'Point'._wrap(super(Component, self).getLocation())

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int._wrap(super(object, self).hashCode())

    @override
    @overload
    def location(self) -> 'Point':
        """public java.awt.Point java.awt.Component.location()"""
        return 'Point'._wrap(super(Component, self).location())

    @override
    @overload
    def getComponentOrientation(self) -> 'ComponentOrientation':
        """public java.awt.ComponentOrientation java.awt.Component.getComponentOrientation()"""
        return 'ComponentOrientation'._wrap(super(Component, self).getComponentOrientation())

    @override
    @overload
    def addHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.addHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).addHierarchyListener(arg0)

    @override
    @overload
    def getInheritsPopupMenu(self) -> bool:
        """public boolean javax.swing.JComponent.getInheritsPopupMenu()"""
        return bool._wrap(super(JComponent, self).getInheritsPopupMenu())

    @override
    @overload
    def setComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Component.setComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Component, self).setComponentOrientation(arg0)

    @override
    @overload
    def getFocusCycleRootAncestor(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getFocusCycleRootAncestor()"""
        return 'Container'._wrap(super(Component, self).getFocusCycleRootAncestor())

    @override
    @overload
    def show(self, arg0: bool):
        """public void java.awt.Component.show(boolean)"""
        super(_Component, self).show(_boolean.valueOf(arg0))

    @staticmethod
    @overload
    def addContent(arg0: 'JPanel', arg1: int, arg2: int, arg3: 'JComponent', arg4: bool, arg5: int, arg6: int, arg7: float, arg8: float):
        """public static void com.badlogic.gdx.tools.flame.EditorPanel.addContent(javax.swing.JPanel,int,int,javax.swing.JComponent,boolean,int,int,float,float)"""
        _EditorPanel.addContent(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3, _boolean.valueOf(arg4), _int.valueOf(arg5), _int.valueOf(arg6), _float.valueOf(arg7), _float.valueOf(arg8))

    @override
    @overload
    def grabFocus(self):
        """public void javax.swing.JComponent.grabFocus()"""
        super(JComponent, self).grabFocus()

    @overload
    def locate(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.locate(int,int)"""
        return 'Component'._wrap(super(_Container, self).locate(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def isPaintingForPrint(self) -> bool:
        """public final boolean javax.swing.JComponent.isPaintingForPrint()"""
        return bool._wrap(super(JComponent, self).isPaintingForPrint())

    @overload
    def keyDown(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyDown(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyDown(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,int,int)"""
        super(_JComponent, self).firePropertyChange(arg0, _int.valueOf(arg1), _int.valueOf(arg2))

    @override
    @overload
    def getLayout(self) -> 'LayoutManager':
        """public java.awt.LayoutManager java.awt.Container.getLayout()"""
        return 'LayoutManager'._wrap(super(Container, self).getLayout())

    @override
    @overload
    def preferredSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.preferredSize()"""
        return 'Dimension'._wrap(super(Container, self).preferredSize())

    @override
    @overload
    def addNotify(self):
        """public void javax.swing.JComponent.addNotify()"""
        super(JComponent, self).addNotify()

    @override
    @overload
    def setSize(self, arg0: int, arg1: int):
        """public void java.awt.Component.setSize(int,int)"""
        super(_Component, self).setSize(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.repaint(int,int,int,int)"""
        super(_Component, self).repaint(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @overload
    def requestFocusInWindow(self, arg0: 'Cause') -> bool:
        """public boolean java.awt.Component.requestFocusInWindow(java.awt.event.FocusEvent$Cause)"""
        return bool._wrap(super(_Component, self).requestFocusInWindow(arg0))

    @override
    @overload
    def remove(self, arg0: int):
        """public void java.awt.Container.remove(int)"""
        super(_Container, self).remove(_int.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,long,long)"""
        super(_Component, self).firePropertyChange(arg0, _long.valueOf(arg1), _long.valueOf(arg2))

    @override
    @overload
    def update(self, arg0: 'FlameMain'):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.update(com.badlogic.gdx.tools.flame.FlameMain)"""
        super(_EditorPanel, self).update(arg0)

    @override
    @overload
    def setFocusCycleRoot(self, arg0: bool):
        """public void java.awt.Container.setFocusCycleRoot(boolean)"""
        super(_Container, self).setFocusCycleRoot(_boolean.valueOf(arg0))

    @overload
    def keyUp(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyUp(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyUp(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def setBackground(self, arg0: 'Color'):
        """public void javax.swing.JComponent.setBackground(java.awt.Color)"""
        super(_JComponent, self).setBackground(arg0)

    @override
    @overload
    def doLayout(self):
        """public void java.awt.Container.doLayout()"""
        super(Container, self).doLayout()

    @override
    @overload
    def enable(self):
        """public void javax.swing.JComponent.enable()"""
        super(JComponent, self).enable()

    @override
    @overload
    def getInsets(self) -> 'Insets':
        """public java.awt.Insets javax.swing.JComponent.getInsets()"""
        return 'Insets'._wrap(super(JComponent, self).getInsets())

    @override
    @overload
    def setNextFocusableComponent(self, arg0: 'Component'):
        """public void javax.swing.JComponent.setNextFocusableComponent(java.awt.Component)"""
        super(_JComponent, self).setNextFocusableComponent(arg0)

    @override
    @overload
    def getAlignmentY(self) -> float:
        """public float javax.swing.JComponent.getAlignmentY()"""
        return float._wrap(super(JComponent, self).getAlignmentY())

    @overload
    def checkImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @override
    @overload
    def getFocusTraversalKeysEnabled(self) -> bool:
        """public boolean java.awt.Component.getFocusTraversalKeysEnabled()"""
        return bool._wrap(super(Component, self).getFocusTraversalKeysEnabled())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getRootPane(self) -> 'JRootPane':
        """public javax.swing.JRootPane javax.swing.JComponent.getRootPane()"""
        return 'JRootPane'._wrap(super(JComponent, self).getRootPane())

    @override
    @overload
    def invalidate(self):
        """public void java.awt.Container.invalidate()"""
        super(Container, self).invalidate()

    @override
    @overload
    def resetKeyboardActions(self):
        """public void javax.swing.JComponent.resetKeyboardActions()"""
        super(JComponent, self).resetKeyboardActions()

    @overload
    def getComponent(self, arg0: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponent(int)"""
        return 'Component'._wrap(super(_Container, self).getComponent(_int.valueOf(arg0)))

    @override
    @overload
    def setName(self, arg0: str):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setName(java.lang.String)"""
        super(_EditorPanel, self).setName(arg0)

    @override
    @overload
    def addPropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Container.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Container, self).addPropertyChangeListener(arg0, arg1)

    @override
    @overload
    def setInputMap(self, arg0: int, arg1: 'InputMap'):
        """public final void javax.swing.JComponent.setInputMap(int,javax.swing.InputMap)"""
        super(_JComponent, self).setInputMap(_int.valueOf(arg0), arg1)

    @override
    @overload
    def removePropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0)

    @override
    @overload
    def applyComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Container.applyComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Container, self).applyComponentOrientation(arg0)

    @override
    @overload
    def setBorder(self, arg0: 'Border'):
        """public void javax.swing.JComponent.setBorder(javax.swing.border.Border)"""
        super(_JComponent, self).setBorder(arg0)

    @override
    @overload
    def remove(self, arg0: 'MenuComponent'):
        """public void java.awt.Component.remove(java.awt.MenuComponent)"""
        super(_Component, self).remove(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintStream'):
        """public void java.awt.Component.list(java.io.PrintStream)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def removeMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.removeMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).removeMouseListener(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintWriter'):
        """public void java.awt.Component.list(java.io.PrintWriter)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def getKeyListeners(self) -> List['KeyListener']:
        """public synchronized java.awt.event.KeyListener[] java.awt.Component.getKeyListeners()"""
        return List['KeyListener']._wrap(super(Component, self).getKeyListeners())

    @override
    @overload
    def getInputContext(self) -> 'InputContext':
        """public java.awt.im.InputContext java.awt.Component.getInputContext()"""
        return 'InputContext'._wrap(super(Component, self).getInputContext())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,double,double)"""
        super(_Component, self).firePropertyChange(arg0, _double.valueOf(arg1), _double.valueOf(arg2))

    @override
    @overload
    def removeAncestorListener(self, arg0: 'AncestorListener'):
        """public void javax.swing.JComponent.removeAncestorListener(javax.swing.event.AncestorListener)"""
        super(_JComponent, self).removeAncestorListener(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintWriter', arg1: int):
        """public void java.awt.Container.list(java.io.PrintWriter,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @overload
    def checkImage(self, arg0: 'Image', arg1: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, arg1))

    @override
    @overload
    def removeFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.removeFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).removeFocusListener(arg0)

    @overload
    def mouseDown(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDown(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDown(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def setIsAlwayShown(self, arg0: bool):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setIsAlwayShown(boolean)"""
        super(_EditorPanel, self).setIsAlwayShown(_boolean.valueOf(arg0))

    @overload
    def getConditionForKeyStroke(self, arg0: 'KeyStroke') -> int:
        """public int javax.swing.JComponent.getConditionForKeyStroke(javax.swing.KeyStroke)"""
        return int._wrap(super(_JComponent, self).getConditionForKeyStroke(arg0))

    @override
    @overload
    def getTreeLock(self) -> object:
        """public final java.lang.Object java.awt.Component.getTreeLock()"""
        return object._wrap(super(Component, self).getTreeLock())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @override
    @overload
    def addVetoableChangeListener(self, arg0: 'VetoableChangeListener'):
        """public synchronized void javax.swing.JComponent.addVetoableChangeListener(java.beans.VetoableChangeListener)"""
        super(_JComponent, self).addVetoableChangeListener(arg0)

    @overload
    def contains(self, arg0: 'Point') -> bool:
        """public boolean java.awt.Component.contains(java.awt.Point)"""
        return bool._wrap(super(_Component, self).contains(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,short,short)"""
        super(_Component, self).firePropertyChange(arg0, _short.valueOf(arg1), _short.valueOf(arg2))

    @override
    @overload
    def dispatchEvent(self, arg0: 'AWTEvent'):
        """public final void java.awt.Component.dispatchEvent(java.awt.AWTEvent)"""
        super(_Component, self).dispatchEvent(arg0)

    @override
    @overload
    def removeContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.removeContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).removeContainerListener(arg0)

    @override
    @overload
    def getGraphicsConfiguration(self) -> 'GraphicsConfiguration':
        """public java.awt.GraphicsConfiguration java.awt.Component.getGraphicsConfiguration()"""
        return 'GraphicsConfiguration'._wrap(super(Component, self).getGraphicsConfiguration())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: bool, arg2: bool):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,boolean,boolean)"""
        super(_JComponent, self).firePropertyChange(arg0, _boolean.valueOf(arg1), _boolean.valueOf(arg2))

    @override
    @overload
    def registerKeyboardAction(self, arg0: 'ActionListener', arg1: str, arg2: 'KeyStroke', arg3: int):
        """public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,java.lang.String,javax.swing.KeyStroke,int)"""
        super(_JComponent, self).registerKeyboardAction(arg0, arg1, arg2, _int.valueOf(arg3))

    @overload
    def findComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(arg0))

    @override
    @overload
    def resize(self, arg0: int, arg1: int):
        """public void java.awt.Component.resize(int,int)"""
        super(_Component, self).resize(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getHeight(self) -> int:
        """public int javax.swing.JComponent.getHeight()"""
        return int._wrap(super(JComponent, self).getHeight())

    @override
    @overload
    def getTransferHandler(self) -> 'TransferHandler':
        """public javax.swing.TransferHandler javax.swing.JComponent.getTransferHandler()"""
        return 'TransferHandler'._wrap(super(JComponent, self).getTransferHandler())

    @overload
    def imageUpdate(self, arg0: 'Image', arg1: int, arg2: int, arg3: int, arg4: int, arg5: int) -> bool:
        """public boolean java.awt.Component.imageUpdate(java.awt.Image,int,int,int,int,int)"""
        return bool._wrap(super(_Component, self).imageUpdate(arg0, _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4), _int.valueOf(arg5)))

    @override
    @overload
    def getWidth(self) -> int:
        """public int javax.swing.JComponent.getWidth()"""
        return int._wrap(super(JComponent, self).getWidth())

    @override
    @overload
    def transferFocusBackward(self):
        """public void java.awt.Component.transferFocusBackward()"""
        super(Component, self).transferFocusBackward()

    @overload
    def getPropertyChangeListeners(self, arg0: str) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners(java.lang.String)"""
        return List['PropertyChangeListener']._wrap(super(_Component, self).getPropertyChangeListeners(arg0))

    @override
    @overload
    def getName(self) -> str:
        """public java.lang.String com.badlogic.gdx.tools.flame.EditorPanel.getName()"""
        return str._wrap(super(EditorPanel, self).getName())

    @staticmethod
    @overload
    def isLightweightComponent(arg0: 'Component') -> bool:
        """public static boolean javax.swing.JComponent.isLightweightComponent(java.awt.Component)"""
        return bool._wrap(_JComponent.isLightweightComponent(arg0))

    @override
    @overload
    def getBorder(self) -> 'Border':
        """public javax.swing.border.Border javax.swing.JComponent.getBorder()"""
        return 'Border'._wrap(super(JComponent, self).getBorder())

    @override
    @overload
    def printAll(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.printAll(java.awt.Graphics)"""
        super(_JComponent, self).printAll(arg0)

    @override
    @overload
    def addComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.addComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).addComponentListener(arg0)

    @override
    @overload
    def getBaselineResizeBehavior(self) -> 'BaselineResizeBehavior.Component$BaselineResizeBehavior':
        """public java.awt.Component$BaselineResizeBehavior javax.swing.JComponent.getBaselineResizeBehavior()"""
        return 'BaselineResizeBehavior.Component$BaselineResizeBehavior'._wrap(super(JComponent, self).getBaselineResizeBehavior())

    @override
    @overload
    def print(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.print(java.awt.Graphics)"""
        super(_JComponent, self).print(arg0)

    @override
    @overload
    def setInputVerifier(self, arg0: 'InputVerifier'):
        """public void javax.swing.JComponent.setInputVerifier(javax.swing.InputVerifier)"""
        super(_JComponent, self).setInputVerifier(arg0)

    @override
    @overload
    def addAncestorListener(self, arg0: 'AncestorListener'):
        """public void javax.swing.JComponent.addAncestorListener(javax.swing.event.AncestorListener)"""
        super(_JComponent, self).addAncestorListener(arg0)

    @override
    @overload
    def getFont(self) -> 'Font':
        """public java.awt.Font java.awt.Component.getFont()"""
        return 'Font'._wrap(super(Component, self).getFont())

    @override
    @overload
    def setFont(self, arg0: 'Font'):
        """public void javax.swing.JComponent.setFont(java.awt.Font)"""
        super(_JComponent, self).setFont(arg0)

    @override
    @overload
    def isOptimizedDrawingEnabled(self) -> bool:
        """public boolean javax.swing.JComponent.isOptimizedDrawingEnabled()"""
        return bool._wrap(super(JComponent, self).isOptimizedDrawingEnabled())

    @override
    @overload
    def isValidateRoot(self) -> bool:
        """public boolean javax.swing.JComponent.isValidateRoot()"""
        return bool._wrap(super(JComponent, self).isValidateRoot())

    @overload
    def prepareImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @override
    @overload
    def setHasAdvanced(self, arg0: bool):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setHasAdvanced(boolean)"""
        super(_EditorPanel, self).setHasAdvanced(_boolean.valueOf(arg0))

    @override
    @overload
    def setForeground(self, arg0: 'Color'):
        """public void javax.swing.JComponent.setForeground(java.awt.Color)"""
        super(_JComponent, self).setForeground(arg0)

    @overload
    def mouseDrag(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDrag(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDrag(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def isOpaque(self) -> bool:
        """public boolean javax.swing.JComponent.isOpaque()"""
        return bool._wrap(super(JComponent, self).isOpaque())

    @overload
    def createVolatileImage(self, arg0: int, arg1: int, arg2: 'ImageCapabilities') -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int,java.awt.ImageCapabilities) throws java.awt.AWTException"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1), arg2))

    @override
    @overload
    def bounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.bounds()"""
        return 'Rectangle'._wrap(super(Component, self).bounds())

    @override
    @overload
    def update(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.update(java.awt.Graphics)"""
        super(_JComponent, self).update(arg0)

    @override
    @overload
    def add(self, arg0: 'PopupMenu'):
        """public void java.awt.Component.add(java.awt.PopupMenu)"""
        super(_Component, self).add(arg0)

    @override
    @overload
    def getToolTipText(self) -> str:
        """public java.lang.String javax.swing.JComponent.getToolTipText()"""
        return str._wrap(super(JComponent, self).getToolTipText())

    @override
    @overload
    def isVisible(self) -> bool:
        """public boolean java.awt.Component.isVisible()"""
        return bool._wrap(super(Component, self).isVisible())

    @override
    @overload
    def setDropTarget(self, arg0: 'DropTarget'):
        """public synchronized void java.awt.Component.setDropTarget(java.awt.dnd.DropTarget)"""
        super(_Component, self).setDropTarget(arg0)

    @override
    @overload
    def getLocationOnScreen(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocationOnScreen()"""
        return 'Point'._wrap(super(Component, self).getLocationOnScreen())

    @override
    @overload
    def getY(self) -> int:
        """public int javax.swing.JComponent.getY()"""
        return int._wrap(super(JComponent, self).getY())

    @overload
    def getComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def isMaximumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMaximumSizeSet()"""
        return bool._wrap(super(Component, self).isMaximumSizeSet())

    @override
    @overload
    def setAlignmentY(self, arg0: float):
        """public void javax.swing.JComponent.setAlignmentY(float)"""
        super(_JComponent, self).setAlignmentY(_float.valueOf(arg0))

    @override
    @overload
    def getRegisteredKeyStrokes(self) -> List['KeyStroke']:
        """public javax.swing.KeyStroke[] javax.swing.JComponent.getRegisteredKeyStrokes()"""
        return List['KeyStroke']._wrap(super(JComponent, self).getRegisteredKeyStrokes())

    @override
    @overload
    def isFocusable(self) -> bool:
        """public boolean java.awt.Component.isFocusable()"""
        return bool._wrap(super(Component, self).isFocusable())

    @override
    @overload
    def isFocusTraversalPolicyProvider(self) -> bool:
        """public final boolean java.awt.Container.isFocusTraversalPolicyProvider()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicyProvider())

    @override
    @overload
    def getMouseListeners(self) -> List['MouseListener']:
        """public synchronized java.awt.event.MouseListener[] java.awt.Component.getMouseListeners()"""
        return List['MouseListener']._wrap(super(Component, self).getMouseListeners())

    @override
    @overload
    def setValue(self, arg0: object):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setValue(T)"""
        super(_EditorPanel, self).setValue(arg0)

    @override
    @overload
    def registerKeyboardAction(self, arg0: 'ActionListener', arg1: 'KeyStroke', arg2: int):
        """public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,javax.swing.KeyStroke,int)"""
        super(_JComponent, self).registerKeyboardAction(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def transferFocusUpCycle(self):
        """public void java.awt.Component.transferFocusUpCycle()"""
        super(Component, self).transferFocusUpCycle()

    @override
    @overload
    def removeKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.removeKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).removeKeyListener(arg0)

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: str, arg2: str):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,char,char)"""
        super(_JComponent, self).firePropertyChange(arg0, _char.valueOf(arg1), _char.valueOf(arg2))

    @override
    @overload
    def getMouseMotionListeners(self) -> List['MouseMotionListener']:
        """public synchronized java.awt.event.MouseMotionListener[] java.awt.Component.getMouseMotionListeners()"""
        return List['MouseMotionListener']._wrap(super(Component, self).getMouseMotionListeners())

    @override
    @overload
    def getAutoscrolls(self) -> bool:
        """public boolean javax.swing.JComponent.getAutoscrolls()"""
        return bool._wrap(super(JComponent, self).getAutoscrolls())

    @override
    @overload
    def addContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.addContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).addContainerListener(arg0)

    @override
    @overload
    def isFocusTraversable(self) -> bool:
        """public boolean java.awt.Component.isFocusTraversable()"""
        return bool._wrap(super(Component, self).isFocusTraversable())

    @overload
    def mouseExit(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseExit(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseExit(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getBounds(self, arg0: 'Rectangle') -> 'Rectangle':
        """public java.awt.Rectangle javax.swing.JComponent.getBounds(java.awt.Rectangle)"""
        return 'Rectangle'._wrap(super(_JComponent, self).getBounds(arg0))

    @override
    @overload
    def setToolTipText(self, arg0: str):
        """public void javax.swing.JComponent.setToolTipText(java.lang.String)"""
        super(_JComponent, self).setToolTipText(arg0)

    @override
    @overload
    def setAutoscrolls(self, arg0: bool):
        """public void javax.swing.JComponent.setAutoscrolls(boolean)"""
        super(_JComponent, self).setAutoscrolls(_boolean.valueOf(arg0))

    @override
    @overload
    def setComponentPopupMenu(self, arg0: 'JPopupMenu'):
        """public void javax.swing.JComponent.setComponentPopupMenu(javax.swing.JPopupMenu)"""
        super(_JComponent, self).setComponentPopupMenu(arg0)

    @override
    @overload
    def setMixingCutoutShape(self, arg0: 'Shape'):
        """public void java.awt.Component.setMixingCutoutShape(java.awt.Shape)"""
        super(_Component, self).setMixingCutoutShape(arg0)

    @override
    @overload
    def getVisibleRect(self) -> 'Rectangle':
        """public java.awt.Rectangle javax.swing.JComponent.getVisibleRect()"""
        return 'Rectangle'._wrap(super(JComponent, self).getVisibleRect())

    @override
    @overload
    def requestFocus(self, arg0: 'Cause'):
        """public void java.awt.Component.requestFocus(java.awt.event.FocusEvent$Cause)"""
        super(_Component, self).requestFocus(arg0)

    @overload
    def createImage(self, arg0: int, arg1: int) -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(int,int)"""
        return 'Image'._wrap(super(_Component, self).createImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def putClientProperty(self, arg0: object, arg1: object):
        """public final void javax.swing.JComponent.putClientProperty(java.lang.Object,java.lang.Object)"""
        super(_JComponent, self).putClientProperty(arg0, arg1)

    @override
    @overload
    def getVetoableChangeListeners(self) -> List['VetoableChangeListener']:
        """public synchronized java.beans.VetoableChangeListener[] javax.swing.JComponent.getVetoableChangeListeners()"""
        return List['VetoableChangeListener']._wrap(super(JComponent, self).getVetoableChangeListeners())

    @override
    @overload
    def scrollRectToVisible(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.scrollRectToVisible(java.awt.Rectangle)"""
        super(_JComponent, self).scrollRectToVisible(arg0)

    @override
    @overload
    def getTopLevelAncestor(self) -> 'Container':
        """public java.awt.Container javax.swing.JComponent.getTopLevelAncestor()"""
        return 'Container'._wrap(super(JComponent, self).getTopLevelAncestor())

    @override
    @overload
    def isRequestFocusEnabled(self) -> bool:
        """public boolean javax.swing.JComponent.isRequestFocusEnabled()"""
        return bool._wrap(super(JComponent, self).isRequestFocusEnabled())

    @override
    @overload
    def getFocusListeners(self) -> List['FocusListener']:
        """public synchronized java.awt.event.FocusListener[] java.awt.Component.getFocusListeners()"""
        return List['FocusListener']._wrap(super(Component, self).getFocusListeners())

    @override
    @overload
    def setLayout(self, arg0: 'LayoutManager'):
        """public void java.awt.Container.setLayout(java.awt.LayoutManager)"""
        super(_Container, self).setLayout(arg0)

    @overload
    def add(self, arg0: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0))

    @override
    @overload
    def getMouseWheelListeners(self) -> List['MouseWheelListener']:
        """public synchronized java.awt.event.MouseWheelListener[] java.awt.Component.getMouseWheelListeners()"""
        return List['MouseWheelListener']._wrap(super(Component, self).getMouseWheelListeners())

    @override
    @overload
    def reshape(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void javax.swing.JComponent.reshape(int,int,int,int)"""
        super(_JComponent, self).reshape(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def setTransferHandler(self, arg0: 'TransferHandler'):
        """public void javax.swing.JComponent.setTransferHandler(javax.swing.TransferHandler)"""
        super(_JComponent, self).setTransferHandler(arg0)

    @override
    @overload
    def getPreferredSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getPreferredSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getPreferredSize())

    @override
    @overload
    def setLocation(self, arg0: int, arg1: int):
        """public void java.awt.Component.setLocation(int,int)"""
        super(_Component, self).setLocation(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def removeInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.removeInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).removeInputMethodListener(arg0)

    @override
    @overload
    def setFocusable(self, arg0: bool):
        """public void java.awt.Component.setFocusable(boolean)"""
        super(_Component, self).setFocusable(_boolean.valueOf(arg0))

    @override
    @overload
    def paintComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.paintComponents(java.awt.Graphics)"""
        super(_Container, self).paintComponents(arg0)

    @override
    @overload
    def addFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.addFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).addFocusListener(arg0)

    @overload
    def prepareImage(self, arg0: 'Image', arg1: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, arg1))

    @override
    @overload
    def addKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.addKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).addKeyListener(arg0)

    @override
    @overload
    def resize(self, arg0: 'Dimension'):
        """public void java.awt.Component.resize(java.awt.Dimension)"""
        super(_Component, self).resize(arg0)

    @override
    @overload
    def setComponentZOrder(self, arg0: 'Component', arg1: int):
        """public void java.awt.Container.setComponentZOrder(java.awt.Component,int)"""
        super(_Container, self).setComponentZOrder(arg0, _int.valueOf(arg1))

    @override
    @overload
    def list(self):
        """public void java.awt.Component.list()"""
        super(Component, self).list()

    @overload
    def add(self, arg0: str, arg1: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.lang.String,java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, arg1))

    @override
    @overload
    def paintImmediately(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void javax.swing.JComponent.paintImmediately(int,int,int,int)"""
        super(_JComponent, self).paintImmediately(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def getMinimumSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getMinimumSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getMinimumSize())

    @override
    @overload
    def setEnabled(self, arg0: bool):
        """public void javax.swing.JComponent.setEnabled(boolean)"""
        super(_JComponent, self).setEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def hasFocus(self) -> bool:
        """public boolean java.awt.Component.hasFocus()"""
        return bool._wrap(super(Component, self).hasFocus())

    @overload
    def createVolatileImage(self, arg0: int, arg1: int) -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int)"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.removeHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).removeHierarchyListener(arg0)

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.awt.Component.toString()"""
        return str._wrap(super(Component, self).toString())

    @override
    @overload
    def addMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.addMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).addMouseListener(arg0)

    @override
    @overload
    def isFocusOwner(self) -> bool:
        """public boolean java.awt.Component.isFocusOwner()"""
        return bool._wrap(super(Component, self).isFocusOwner())

    @override
    @overload
    def getAccessibleContext(self) -> 'AccessibleContext':
        """public javax.accessibility.AccessibleContext javax.swing.JPanel.getAccessibleContext()"""
        return 'AccessibleContext'._wrap(super(JPanel, self).getAccessibleContext())

    @overload
    def postEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.postEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).postEvent(arg0))

    @overload
    def getLocation(self, arg0: 'Point') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getLocation(java.awt.Point)"""
        return 'Point'._wrap(super(_JComponent, self).getLocation(arg0))

    @overload
    def getBaseline(self, arg0: int, arg1: int) -> int:
        """public int javax.swing.JComponent.getBaseline(int,int)"""
        return int._wrap(super(_JComponent, self).getBaseline(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def findComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeNotify(self):
        """public void javax.swing.JComponent.removeNotify()"""
        super(JComponent, self).removeNotify()

    @override
    @overload
    def getForeground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getForeground()"""
        return 'Color'._wrap(super(Component, self).getForeground())

    @override
    @overload
    def show(self):
        """public void java.awt.Component.show()"""
        super(Component, self).show()

    @override
    @overload
    def isDoubleBuffered(self) -> bool:
        """public boolean javax.swing.JComponent.isDoubleBuffered()"""
        return bool._wrap(super(JComponent, self).isDoubleBuffered())

    @override
    @overload
    def setDescription(self, arg0: str):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setDescription(java.lang.String)"""
        super(_EditorPanel, self).setDescription(arg0)

    @override
    @overload
    def isFocusCycleRoot(self) -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot()"""
        return bool._wrap(super(Container, self).isFocusCycleRoot())

    @override
    @overload
    def addMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.addMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).addMouseWheelListener(arg0)

    @override
    @overload
    def hide(self):
        """public void javax.swing.JComponent.hide()"""
        super(JComponent, self).hide()

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def revalidate(self):
        """public void javax.swing.JComponent.revalidate()"""
        super(JComponent, self).revalidate()

    @override
    @overload
    def getActionMap(self) -> 'ActionMap':
        """public final javax.swing.ActionMap javax.swing.JComponent.getActionMap()"""
        return 'ActionMap'._wrap(super(JComponent, self).getActionMap())

    @override
    @overload
    def requestFocusInWindow(self) -> bool:
        """public boolean javax.swing.JComponent.requestFocusInWindow()"""
        return bool._wrap(super(JComponent, self).requestFocusInWindow())

    @overload
    def action(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.action(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).action(arg0, arg1))

    @override
    @overload
    def isManagingFocus(self) -> bool:
        """public boolean javax.swing.JComponent.isManagingFocus()"""
        return bool._wrap(super(JComponent, self).isManagingFocus())

    @override
    @overload
    def isLightweight(self) -> bool:
        """public boolean java.awt.Component.isLightweight()"""
        return bool._wrap(super(Component, self).isLightweight())

    @override
    @overload
    def setAlignmentX(self, arg0: float):
        """public void javax.swing.JComponent.setAlignmentX(float)"""
        super(_JComponent, self).setAlignmentX(_float.valueOf(arg0))

    @overload
    def getFocusTraversalKeys(self, arg0: int) -> 'Set':
        """public java.util.Set<java.awt.AWTKeyStroke> java.awt.Container.getFocusTraversalKeys(int)"""
        return 'Set'._wrap(super(_Container, self).getFocusTraversalKeys(_int.valueOf(arg0)))

    @override
    @overload
    def setFocusTraversalKeysEnabled(self, arg0: bool):
        """public void java.awt.Component.setFocusTraversalKeysEnabled(boolean)"""
        super(_Component, self).setFocusTraversalKeysEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def remove(self, arg0: 'Component'):
        """public void java.awt.Container.remove(java.awt.Component)"""
        super(_Container, self).remove(arg0)

    @overload
    def __init__(self, arg0: 'FlameMain', arg1: 'DynamicsInfluencer'):
        """public com.badlogic.gdx.tools.flame.DynamicsInfluencerPanel(com.badlogic.gdx.tools.flame.FlameMain,com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsInfluencer)"""
        val = _DynamicsInfluencerPanel(arg0, arg1)
        self.__wrapper = val

    @overload
    def getInsets(self, arg0: 'Insets') -> 'Insets':
        """public java.awt.Insets javax.swing.JComponent.getInsets(java.awt.Insets)"""
        return 'Insets'._wrap(super(_JComponent, self).getInsets(arg0))

    @override
    @overload
    def insets(self) -> 'Insets':
        """public java.awt.Insets java.awt.Container.insets()"""
        return 'Insets'._wrap(super(Container, self).insets())

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int):
        """public void javax.swing.JComponent.repaint(long,int,int,int,int)"""
        super(_JComponent, self).repaint(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4))

    @override
    @overload
    def setFocusTraversalPolicy(self, arg0: 'FocusTraversalPolicy'):
        """public void java.awt.Container.setFocusTraversalPolicy(java.awt.FocusTraversalPolicy)"""
        super(_Container, self).setFocusTraversalPolicy(arg0)

    @overload
    def getSize(self, arg0: 'Dimension') -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getSize(java.awt.Dimension)"""
        return 'Dimension'._wrap(super(_JComponent, self).getSize(arg0))

    @override
    @overload
    def enable(self, arg0: bool):
        """public void java.awt.Component.enable(boolean)"""
        super(_Component, self).enable(_boolean.valueOf(arg0))

    @overload
    def getToolTipLocation(self, arg0: 'MouseEvent') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getToolTipLocation(java.awt.event.MouseEvent)"""
        return 'Point'._wrap(super(_JComponent, self).getToolTipLocation(arg0))

    @override
    @overload
    def addPropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Container.addPropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Container, self).addPropertyChangeListener(arg0)

    @overload
    def getComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(arg0))

    @override
    @overload
    def size(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.size()"""
        return 'Dimension'._wrap(super(Component, self).size())

    @override
    @overload
    def getVerifyInputWhenFocusTarget(self) -> bool:
        """public boolean javax.swing.JComponent.getVerifyInputWhenFocusTarget()"""
        return bool._wrap(super(JComponent, self).getVerifyInputWhenFocusTarget())

    @overload
    def mouseMove(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseMove(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseMove(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getActionForKeyStroke(self, arg0: 'KeyStroke') -> 'ActionListener':
        """public java.awt.event.ActionListener javax.swing.JComponent.getActionForKeyStroke(javax.swing.KeyStroke)"""
        return 'ActionListener'._wrap(super(_JComponent, self).getActionForKeyStroke(arg0))

    @overload
    def lostFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.lostFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).lostFocus(arg0, arg1))

    @override
    @overload
    def isMinimumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMinimumSizeSet()"""
        return bool._wrap(super(Component, self).isMinimumSizeSet())

    @override
    @overload
    def isForegroundSet(self) -> bool:
        """public boolean java.awt.Component.isForegroundSet()"""
        return bool._wrap(super(Component, self).isForegroundSet())

    @overload
    def getMousePosition(self, arg0: bool) -> 'Point':
        """public java.awt.Point java.awt.Container.getMousePosition(boolean) throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(_Container, self).getMousePosition(_boolean.valueOf(arg0)))

    @overload
    def getFontMetrics(self, arg0: 'Font') -> 'FontMetrics':
        """public java.awt.FontMetrics javax.swing.JComponent.getFontMetrics(java.awt.Font)"""
        return 'FontMetrics'._wrap(super(_JComponent, self).getFontMetrics(arg0))

    @overload
    def getListeners(self, arg0: 'Class') -> List['EventListener']:
        """public <T extends java.util.EventListener> T[] javax.swing.JComponent.getListeners(java.lang.Class<T>)"""
        return List['EventListener']._wrap(super(_JComponent, self).getListeners(arg0))

    @override
    @overload
    def getHierarchyBoundsListeners(self) -> List['HierarchyBoundsListener']:
        """public synchronized java.awt.event.HierarchyBoundsListener[] java.awt.Component.getHierarchyBoundsListeners()"""
        return List['HierarchyBoundsListener']._wrap(super(Component, self).getHierarchyBoundsListeners())

    @override
    @overload
    def minimumSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.minimumSize()"""
        return 'Dimension'._wrap(super(Container, self).minimumSize())

    @overload
    def handleEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.handleEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).handleEvent(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @override
    @overload
    def getComponentListeners(self) -> List['ComponentListener']:
        """public synchronized java.awt.event.ComponentListener[] java.awt.Component.getComponentListeners()"""
        return List['ComponentListener']._wrap(super(Component, self).getComponentListeners())

    @override
    @overload
    def computeVisibleRect(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.computeVisibleRect(java.awt.Rectangle)"""
        super(_JComponent, self).computeVisibleRect(arg0)

    @override
    @overload
    def deliverEvent(self, arg0: 'Event'):
        """public void java.awt.Container.deliverEvent(java.awt.Event)"""
        super(_Container, self).deliverEvent(arg0)

    @override
    @overload
    def addHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.addHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).addHierarchyBoundsListener(arg0)

    @override
    @overload
    def getAlignmentX(self) -> float:
        """public float javax.swing.JComponent.getAlignmentX()"""
        return float._wrap(super(JComponent, self).getAlignmentX())

    @overload
    def add(self, arg0: 'Component', arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component,int)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def repaint(self):
        """public void java.awt.Component.repaint()"""
        super(Component, self).repaint()

    @overload
    def gotFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.gotFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).gotFocus(arg0, arg1))

    @override
    @overload
    def createToolTip(self) -> 'JToolTip':
        """public javax.swing.JToolTip javax.swing.JComponent.createToolTip()"""
        return 'JToolTip'._wrap(super(JComponent, self).createToolTip())

    @override
    @overload
    def setEmbedded(self):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setEmbedded()"""
        super(EditorPanel, self).setEmbedded()

    @overload
    def getToolTipText(self, arg0: 'MouseEvent') -> str:
        """public java.lang.String javax.swing.JComponent.getToolTipText(java.awt.event.MouseEvent)"""
        return str._wrap(super(_JComponent, self).getToolTipText(arg0))

    @override
    @overload
    def printComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.printComponents(java.awt.Graphics)"""
        super(_Container, self).printComponents(arg0)

    @override
    @overload
    def getColorModel(self) -> 'ColorModel':
        """public java.awt.image.ColorModel java.awt.Component.getColorModel()"""
        return 'ColorModel'._wrap(super(Component, self).getColorModel())

    @override
    @overload
    def setFocusTraversalPolicyProvider(self, arg0: bool):
        """public final void java.awt.Container.setFocusTraversalPolicyProvider(boolean)"""
        super(_Container, self).setFocusTraversalPolicyProvider(_boolean.valueOf(arg0))

    @overload
    def getComponentZOrder(self, arg0: 'Component') -> int:
        """public int java.awt.Container.getComponentZOrder(java.awt.Component)"""
        return int._wrap(super(_Container, self).getComponentZOrder(arg0))

    @override
    @overload
    def getDebugGraphicsOptions(self) -> int:
        """public int javax.swing.JComponent.getDebugGraphicsOptions()"""
        return int._wrap(super(JComponent, self).getDebugGraphicsOptions())

    @overload
    def areFocusTraversalKeysSet(self, arg0: int) -> bool:
        """public boolean java.awt.Container.areFocusTraversalKeysSet(int)"""
        return bool._wrap(super(_Container, self).areFocusTraversalKeysSet(_int.valueOf(arg0)))

    @override
    @overload
    def getSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.getSize()"""
        return 'Dimension'._wrap(super(Component, self).getSize())

    @override
    @overload
    def repaint(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.repaint(java.awt.Rectangle)"""
        super(_JComponent, self).repaint(arg0)

    @overload
    def getClientProperty(self, arg0: object) -> object:
        """public final java.lang.Object javax.swing.JComponent.getClientProperty(java.lang.Object)"""
        return object._wrap(super(_JComponent, self).getClientProperty(arg0))

    @override
    @overload
    def unregisterKeyboardAction(self, arg0: 'KeyStroke'):
        """public void javax.swing.JComponent.unregisterKeyboardAction(javax.swing.KeyStroke)"""
        super(_JComponent, self).unregisterKeyboardAction(arg0)

    @overload
    def requestFocus(self, arg0: bool) -> bool:
        """public boolean javax.swing.JComponent.requestFocus(boolean)"""
        return bool._wrap(super(_JComponent, self).requestFocus(_boolean.valueOf(arg0)))

    @override
    @overload
    def setActionMap(self, arg0: 'ActionMap'):
        """public final void javax.swing.JComponent.setActionMap(javax.swing.ActionMap)"""
        super(_JComponent, self).setActionMap(arg0)

    @override
    @overload
    def getX(self) -> int:
        """public int javax.swing.JComponent.getX()"""
        return int._wrap(super(JComponent, self).getX())

    @overload
    def mouseEnter(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseEnter(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseEnter(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def updateUI(self):
        """public void javax.swing.JPanel.updateUI()"""
        super(JPanel, self).updateUI()

    @override
    @overload
    def getToolkit(self) -> 'Toolkit':
        """public java.awt.Toolkit java.awt.Component.getToolkit()"""
        return 'Toolkit'._wrap(super(Component, self).getToolkit())

    @override
    @overload
    def isCursorSet(self) -> bool:
        """public boolean java.awt.Component.isCursorSet()"""
        return bool._wrap(super(Component, self).isCursorSet())

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object, arg2: int):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object,int)"""
        super(_Container, self).add(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def setPreferredSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setPreferredSize(java.awt.Dimension)"""
        super(_JComponent, self).setPreferredSize(arg0)

    @override
    @overload
    def setBounds(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.setBounds(int,int,int,int)"""
        super(_Component, self).setBounds(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def isFocusTraversalPolicySet(self) -> bool:
        """public boolean java.awt.Container.isFocusTraversalPolicySet()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicySet())

    @override
    @overload
    def requestFocus(self):
        """public void javax.swing.JComponent.requestFocus()"""
        super(JComponent, self).requestFocus()

    @override
    @overload
    def getAncestorListeners(self) -> List['AncestorListener']:
        """public javax.swing.event.AncestorListener[] javax.swing.JComponent.getAncestorListeners()"""
        return List['AncestorListener']._wrap(super(JComponent, self).getAncestorListeners())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool._wrap(super(_object, self).equals(arg0))

    @overload
    def getInputMap(self, arg0: int) -> 'InputMap':
        """public final javax.swing.InputMap javax.swing.JComponent.getInputMap(int)"""
        return 'InputMap'._wrap(super(_JComponent, self).getInputMap(_int.valueOf(arg0)))

    @override
    @overload
    def isEnabled(self) -> bool:
        """public boolean java.awt.Component.isEnabled()"""
        return bool._wrap(super(Component, self).isEnabled())

    @override
    @overload
    def move(self, arg0: int, arg1: int):
        """public void java.awt.Component.move(int,int)"""
        super(_Component, self).move(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def addMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.addMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).addMouseMotionListener(arg0)

    @override
    @overload
    def getIgnoreRepaint(self) -> bool:
        """public boolean java.awt.Component.getIgnoreRepaint()"""
        return bool._wrap(super(Component, self).getIgnoreRepaint())

    @overload
    def isFocusCycleRoot(self, arg0: 'Container') -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot(java.awt.Container)"""
        return bool._wrap(super(_Container, self).isFocusCycleRoot(arg0))

    @override
    @overload
    def getGraphics(self) -> 'Graphics':
        """public java.awt.Graphics javax.swing.JComponent.getGraphics()"""
        return 'Graphics'._wrap(super(JComponent, self).getGraphics())

    @override
    @overload
    def setLocale(self, arg0: 'Locale'):
        """public void java.awt.Component.setLocale(java.util.Locale)"""
        super(_Component, self).setLocale(arg0)

    @override
    @overload
    def paintAll(self, arg0: 'Graphics'):
        """public void java.awt.Component.paintAll(java.awt.Graphics)"""
        super(_Component, self).paintAll(arg0)

    @override
    @overload
    def setDoubleBuffered(self, arg0: bool):
        """public void javax.swing.JComponent.setDoubleBuffered(boolean)"""
        super(_JComponent, self).setDoubleBuffered(_boolean.valueOf(arg0))

    @override
    @overload
    def isPreferredSizeSet(self) -> bool:
        """public boolean java.awt.Component.isPreferredSizeSet()"""
        return bool._wrap(super(Component, self).isPreferredSizeSet())

    @override
    @overload
    def addInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.addInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).addInputMethodListener(arg0)

    @override
    @overload
    def removeMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.removeMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).removeMouseWheelListener(arg0)

    @override
    @overload
    def getInputMap(self) -> 'InputMap':
        """public final javax.swing.InputMap javax.swing.JComponent.getInputMap()"""
        return 'InputMap'._wrap(super(JComponent, self).getInputMap())

    @override
    @overload
    def setVisible(self, arg0: bool):
        """public void javax.swing.JComponent.setVisible(boolean)"""
        super(_JComponent, self).setVisible(_boolean.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,byte,byte)"""
        super(_Component, self).firePropertyChange(arg0, _byte.valueOf(arg1), _byte.valueOf(arg2))

    @override
    @overload
    def getUIClassID(self) -> str:
        """public java.lang.String javax.swing.JPanel.getUIClassID()"""
        return str._wrap(super(JPanel, self).getUIClassID())

    @override
    @overload
    def transferFocusDownCycle(self):
        """public void java.awt.Container.transferFocusDownCycle()"""
        super(Container, self).transferFocusDownCycle()

    @override
    @overload
    def getNextFocusableComponent(self) -> 'Component':
        """public java.awt.Component javax.swing.JComponent.getNextFocusableComponent()"""
        return 'Component'._wrap(super(JComponent, self).getNextFocusableComponent())

    @override
    @overload
    def getUI(self) -> 'PanelUI':
        """public javax.swing.plaf.PanelUI javax.swing.JPanel.getUI()"""
        return 'PanelUI'._wrap(super(JPanel, self).getUI())

    @override
    @overload
    def setBounds(self, arg0: 'Rectangle'):
        """public void java.awt.Component.setBounds(java.awt.Rectangle)"""
        super(_Component, self).setBounds(arg0)

    @override
    @overload
    def repaint(self, arg0: int):
        """public void java.awt.Component.repaint(long)"""
        super(_Component, self).repaint(_long.valueOf(arg0))

    @override
    @overload
    def removeHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.removeHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).removeHierarchyBoundsListener(arg0)

    @override
    @overload
    def getComponentPopupMenu(self) -> 'JPopupMenu':
        """public javax.swing.JPopupMenu javax.swing.JComponent.getComponentPopupMenu()"""
        return 'JPopupMenu'._wrap(super(JComponent, self).getComponentPopupMenu())

    @override
    @overload
    def getMousePosition(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getMousePosition() throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(Component, self).getMousePosition())

    @override
    @overload
    def getComponentCount(self) -> int:
        """public int java.awt.Container.getComponentCount()"""
        return int._wrap(super(Container, self).getComponentCount())

    @override
    @overload
    def getInputMethodRequests(self) -> 'InputMethodRequests':
        """public java.awt.im.InputMethodRequests java.awt.Component.getInputMethodRequests()"""
        return 'InputMethodRequests'._wrap(super(Component, self).getInputMethodRequests())

    @override
    @overload
    def setMaximumSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setMaximumSize(java.awt.Dimension)"""
        super(_JComponent, self).setMaximumSize(arg0)

    @override
    @overload
    def setRequestFocusEnabled(self, arg0: bool):
        """public void javax.swing.JComponent.setRequestFocusEnabled(boolean)"""
        super(_JComponent, self).setRequestFocusEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def setFocusTraversalKeys(self, arg0: int, arg1: 'Set'):
        """public void javax.swing.JComponent.setFocusTraversalKeys(int,java.util.Set<? extends java.awt.AWTKeyStroke>)"""
        super(_JComponent, self).setFocusTraversalKeys(_int.valueOf(arg0), arg1)

    @overload
    def inside(self, arg0: int, arg1: int) -> bool:
        """public boolean java.awt.Component.inside(int,int)"""
        return bool._wrap(super(_Component, self).inside(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def requestDefaultFocus(self) -> bool:
        """public boolean javax.swing.JComponent.requestDefaultFocus()"""
        return bool._wrap(super(JComponent, self).requestDefaultFocus())

    @override
    @overload
    def disable(self):
        """public void javax.swing.JComponent.disable()"""
        super(JComponent, self).disable()

    @override
    @overload
    def showContent(self, arg0: bool):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.showContent(boolean)"""
        super(_EditorPanel, self).showContent(_boolean.valueOf(arg0))

    @override
    @overload
    def enableInputMethods(self, arg0: bool):
        """public void java.awt.Component.enableInputMethods(boolean)"""
        super(_Component, self).enableInputMethods(_boolean.valueOf(arg0))

    @override
    @overload
    def layout(self):
        """public void java.awt.Container.layout()"""
        super(Container, self).layout()

    @override
    @overload
    def getInputMethodListeners(self) -> List['InputMethodListener']:
        """public synchronized java.awt.event.InputMethodListener[] java.awt.Component.getInputMethodListeners()"""
        return List['InputMethodListener']._wrap(super(Component, self).getInputMethodListeners())

    @override
    @overload
    def paint(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.paint(java.awt.Graphics)"""
        super(_JComponent, self).paint(arg0)

    @override
    @overload
    def transferFocus(self):
        """public void java.awt.Component.transferFocus()"""
        super(Component, self).transferFocus()

    @override
    @overload
    def removeComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.removeComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).removeComponentListener(arg0)

    @override
    @overload
    def getCursor(self) -> 'Cursor':
        """public java.awt.Cursor java.awt.Component.getCursor()"""
        return 'Cursor'._wrap(super(Component, self).getCursor())

    @override
    @overload
    def setMinimumSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setMinimumSize(java.awt.Dimension)"""
        super(_JComponent, self).setMinimumSize(arg0)

    @override
    @overload
    def getAdvancedPanel(self) -> 'JPanel':
        """public javax.swing.JPanel com.badlogic.gdx.tools.flame.EditorPanel.getAdvancedPanel()"""
        return 'JPanel'._wrap(super(EditorPanel, self).getAdvancedPanel())

    @override
    @overload
    def getContainerListeners(self) -> List['ContainerListener']:
        """public synchronized java.awt.event.ContainerListener[] java.awt.Container.getContainerListeners()"""
        return List['ContainerListener']._wrap(super(Container, self).getContainerListeners())

    @override
    @overload
    def setLocation(self, arg0: 'Point'):
        """public void java.awt.Component.setLocation(java.awt.Point)"""
        super(_Component, self).setLocation(arg0)

    @override
    @overload
    def setSize(self, arg0: 'Dimension'):
        """public void java.awt.Component.setSize(java.awt.Dimension)"""
        super(_Component, self).setSize(arg0)

    @override
    @overload
    def removeAll(self):
        """public void java.awt.Container.removeAll()"""
        super(Container, self).removeAll()

    @overload
    def getPopupLocation(self, arg0: 'MouseEvent') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getPopupLocation(java.awt.event.MouseEvent)"""
        return 'Point'._wrap(super(_JComponent, self).getPopupLocation(arg0))

    @overload
    def isAncestorOf(self, arg0: 'Component') -> bool:
        """public boolean java.awt.Container.isAncestorOf(java.awt.Component)"""
        return bool._wrap(super(_Container, self).isAncestorOf(arg0))

    @override
    @overload
    def setOpaque(self, arg0: bool):
        """public void javax.swing.JComponent.setOpaque(boolean)"""
        super(_JComponent, self).setOpaque(_boolean.valueOf(arg0))

    @overload
    def contains(self, arg0: int, arg1: int) -> bool:
        """public boolean javax.swing.JComponent.contains(int,int)"""
        return bool._wrap(super(_JComponent, self).contains(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def setCursor(self, arg0: 'Cursor'):
        """public void java.awt.Component.setCursor(java.awt.Cursor)"""
        super(_Component, self).setCursor(arg0)

    @override
    @overload
    def validate(self):
        """public void java.awt.Container.validate()"""
        super(Container, self).validate()

    @override
    @overload
    def getMaximumSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getMaximumSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getMaximumSize())

    @override
    @overload
    def getBackground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getBackground()"""
        return 'Color'._wrap(super(Component, self).getBackground())

    @overload
    def createImage(self, arg0: 'ImageProducer') -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(java.awt.image.ImageProducer)"""
        return 'Image'._wrap(super(_Component, self).createImage(arg0))

    @override
    @overload
    def setVerifyInputWhenFocusTarget(self, arg0: bool):
        """public void javax.swing.JComponent.setVerifyInputWhenFocusTarget(boolean)"""
        super(_JComponent, self).setVerifyInputWhenFocusTarget(_boolean.valueOf(arg0))

    @override
    @overload
    def removePropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0, arg1)

    @override
    @overload
    def countComponents(self) -> int:
        """public int java.awt.Container.countComponents()"""
        return int._wrap(super(Container, self).countComponents()) 
 
 
# CLASS: com.badlogic.gdx.tools.flame.ParticleValuePanel
from pyquantum_helper import import_once as _import_once
import javax.accessibility.AccessibleContext as AccessibleContext
import javax.swing.JToolTip as JToolTip
import java.awt.event.HierarchyBoundsListener as HierarchyBoundsListener
import java.awt.event.ActionListener as _ActionListener
_ActionListener = _ActionListener
import java.awt.ComponentOrientation as _ComponentOrientation
_ComponentOrientation = _ComponentOrientation
import java.awt.image.ImageProducer as ImageProducer
try:
    from pygdx.graphics.g3d.particles import values
except ImportError:
    values = _import_once("pygdx.graphics.g3d.particles.values")

import java.awt.GraphicsConfiguration as GraphicsConfiguration
import java.awt.Graphics as _Graphics
_Graphics = _Graphics
import javax.swing.JToolTip as _JToolTip
_JToolTip = _JToolTip
import java.awt.Container as _Container
_Container = _Container
import java.awt.MenuComponent as MenuComponent
import java.awt.im.InputMethodRequests as _InputMethodRequests
_InputMethodRequests = _InputMethodRequests
import java.awt.FocusTraversalPolicy as _FocusTraversalPolicy
_FocusTraversalPolicy = _FocusTraversalPolicy
import java.lang.Byte as _byte
import java.awt.Dimension as Dimension
import java.awt.Font as _Font
_Font = _Font
import javax.swing.plaf.PanelUI as _PanelUI
_PanelUI = _PanelUI
import java.awt.event.ContainerListener as ContainerListener
import javax.swing.event.AncestorListener as AncestorListener
import java.awt.AWTEvent as AWTEvent
import javax.swing.JPanel as JPanel
import java.awt.image.ColorModel as _ColorModel
_ColorModel = _ColorModel
import java.lang.Object as _object
import java.awt.ComponentOrientation as ComponentOrientation
import java.awt.im.InputContext as _InputContext
_InputContext = _InputContext
from builtins import float
import java.awt.event.HierarchyListener as HierarchyListener
import java.awt.event.InputMethodListener as InputMethodListener
from typing import List
import com.badlogic.gdx.tools.flame.ParticleValuePanel as _ParticleValuePanel
_ParticleValuePanel = _ParticleValuePanel
import java.awt.event.MouseWheelListener as _MouseWheelListener
_MouseWheelListener = _MouseWheelListener
import java.awt.event.KeyListener as KeyListener
import java.awt.Component as Component
from builtins import int
import java.awt.LayoutManager as LayoutManager
import java.awt.FontMetrics as _FontMetrics
_FontMetrics = _FontMetrics
import java.awt.Container as Container
from builtins import type
import java.awt.image.VolatileImage as _VolatileImage
_VolatileImage = _VolatileImage
import java.awt.Shape as Shape
import com.badlogic.gdx.tools.flame.EditorPanel as _EditorPanel
_EditorPanel = _EditorPanel
import java.awt.Rectangle as Rectangle
import java.awt.event.ContainerListener as _ContainerListener
_ContainerListener = _ContainerListener
import java.awt.event.HierarchyListener as _HierarchyListener
_HierarchyListener = _HierarchyListener
import java.lang.String as _string
import javax.swing.InputVerifier as _InputVerifier
_InputVerifier = _InputVerifier
import java.awt.Insets as _Insets
_Insets = _Insets
import javax.swing.border.Border as _Border
_Border = _Border
import java.awt.event.ComponentListener as _ComponentListener
_ComponentListener = _ComponentListener
import javax.swing.ActionMap as ActionMap
import java.beans.VetoableChangeListener as VetoableChangeListener
import java.awt.event.ComponentListener as ComponentListener
import javax.swing.KeyStroke as KeyStroke
import java.beans.VetoableChangeListener as _VetoableChangeListener
_VetoableChangeListener = _VetoableChangeListener
from builtins import object
import java.awt.event.KeyListener as _KeyListener
_KeyListener = _KeyListener
import java.awt.Component.BaselineResizeBehavior as BaselineResizeBehavior
import java.awt.Component as _Component_BaselineResizeBehavior
_BaselineResizeBehavior = _Component_BaselineResizeBehavior.BaselineResizeBehavior
import java.awt.Cursor as _Cursor
_Cursor = _Cursor
import java.awt.im.InputMethodRequests as InputMethodRequests
import java.lang.Long as _long
import javax.swing.JPanel as _JPanel
_JPanel = _JPanel
import java.awt.event.FocusListener as _FocusListener
_FocusListener = _FocusListener
import java.lang.Character as _char
import javax.swing.TransferHandler as TransferHandler
import java.awt.event.FocusEvent.Cause as Cause
import javax.swing.JComponent as JComponent
import javax.accessibility.AccessibleContext as _AccessibleContext
_AccessibleContext = _AccessibleContext
import java.awt.event.MouseWheelListener as MouseWheelListener
import java.util.Set as _Set
_Set = _Set
import java.awt.image.ColorModel as ColorModel
import java.lang.Boolean as _boolean
import java.awt.event.MouseMotionListener as MouseMotionListener
import java.util.EventListener as EventListener
import java.awt.Insets as Insets
import javax.swing.KeyStroke as _KeyStroke
_KeyStroke = _KeyStroke
import java.awt.GraphicsConfiguration as _GraphicsConfiguration
_GraphicsConfiguration = _GraphicsConfiguration
import java.awt.dnd.DropTarget as _DropTarget
_DropTarget = _DropTarget
from builtins import bool
import java.beans.PropertyChangeListener as _PropertyChangeListener
_PropertyChangeListener = _PropertyChangeListener
import java.awt.LayoutManager as _LayoutManager
_LayoutManager = _LayoutManager
import java.awt.PopupMenu as PopupMenu
import java.util.EventListener as _EventListener
_EventListener = _EventListener
import java.awt.im.InputContext as InputContext
import java.awt.Component as _Component
_Component = _Component
import java.awt.Font as Font
import java.awt.image.VolatileImage as VolatileImage
import java.awt.dnd.DropTarget as DropTarget
import java.lang.String as _String
_String = _String
import java.lang.Float as _float
import java.awt.Cursor as Cursor
import java.awt.event.MouseListener as _MouseListener
_MouseListener = _MouseListener
import java.awt.Toolkit as _Toolkit
_Toolkit = _Toolkit
import java.io.PrintStream as PrintStream
import javax.swing.JRootPane as _JRootPane
_JRootPane = _JRootPane
import java.awt.Dimension as _Dimension
_Dimension = _Dimension
import java.awt.event.ActionListener as ActionListener
import java.awt.event.MouseEvent as MouseEvent
import java.awt.Color as _Color
_Color = _Color
import javax.swing.JPopupMenu as _JPopupMenu
_JPopupMenu = _JPopupMenu
import javax.swing.InputMap as _InputMap
_InputMap = _InputMap
import java.awt.event.MouseListener as MouseListener
import java.lang.Class as _Class
_Class = _Class
import java.util.Locale as Locale
import java.lang.Double as _double
import javax.swing.plaf.PanelUI as PanelUI
import java.awt.Point as _Point
_Point = _Point
import java.lang.Object as _Object
_Object = _Object
import java.beans.PropertyChangeListener as PropertyChangeListener
import javax.swing.border.Border as Border
import javax.swing.JComponent as _JComponent
_JComponent = _JComponent
import javax.swing.InputVerifier as InputVerifier
import java.io.PrintWriter as PrintWriter
import java.awt.Point as Point
import javax.swing.event.AncestorListener as _AncestorListener
_AncestorListener = _AncestorListener
import java.lang.Short as _short
import java.awt.Toolkit as Toolkit
import java.awt.event.HierarchyBoundsListener as _HierarchyBoundsListener
_HierarchyBoundsListener = _HierarchyBoundsListener
import javax.swing.TransferHandler as _TransferHandler
_TransferHandler = _TransferHandler
import javax.swing.InputMap as InputMap
import java.awt.Rectangle as _Rectangle
_Rectangle = _Rectangle
import javax.swing.JRootPane as JRootPane
import java.awt.Event as Event
import java.awt.event.FocusListener as FocusListener
import java.awt.image.ImageObserver as ImageObserver
from builtins import str
from pyquantum_helper import override
import javax.swing.ActionMap as _ActionMap
_ActionMap = _ActionMap
import java.awt.FocusTraversalPolicy as FocusTraversalPolicy
import java.awt.event.MouseMotionListener as _MouseMotionListener
_MouseMotionListener = _MouseMotionListener
import java.awt.event.InputMethodListener as _InputMethodListener
_InputMethodListener = _InputMethodListener
import javax.swing.JPopupMenu as JPopupMenu
import java.util.Set as Set
import java.lang.Integer as _int
import java.awt.Image as _Image
_Image = _Image
import java.awt.FontMetrics as FontMetrics
import java.awt.Color as Color
import java.awt.Image as Image
import java.awt.Graphics as Graphics
import java.awt.ImageCapabilities as ImageCapabilities
import java.util.Locale as _Locale
_Locale = _Locale
 
class ParticleValuePanel():
    """com.badlogic.gdx.tools.flame.ParticleValuePanel"""
 
    @staticmethod
    def _wrap(java_value: _ParticleValuePanel) -> 'ParticleValuePanel':
        return ParticleValuePanel(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _ParticleValuePanel):
        """
        Dynamic initializer for ParticleValuePanel.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_ParticleValuePanel__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_ParticleValuePanel__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def removeVetoableChangeListener(self, arg0: 'VetoableChangeListener'):
        """public synchronized void javax.swing.JComponent.removeVetoableChangeListener(java.beans.VetoableChangeListener)"""
        super(_JComponent, self).removeVetoableChangeListener(arg0)

    @override
    @overload
    def getComponents(self) -> List['Component']:
        """public java.awt.Component[] java.awt.Container.getComponents()"""
        return List['Component']._wrap(super(Container, self).getComponents())

    @override
    @overload
    def setDebugGraphicsOptions(self, arg0: int):
        """public void javax.swing.JComponent.setDebugGraphicsOptions(int)"""
        super(_JComponent, self).setDebugGraphicsOptions(_int.valueOf(arg0))

    @override
    @overload
    def isValid(self) -> bool:
        """public boolean java.awt.Component.isValid()"""
        return bool._wrap(super(Component, self).isValid())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def getDefaultLocale() -> 'Locale':
        """public static java.util.Locale javax.swing.JComponent.getDefaultLocale()"""
        return Locale._wrap(_JComponent.getDefaultLocale())

    @override
    @overload
    def getInputVerifier(self) -> 'InputVerifier':
        """public javax.swing.InputVerifier javax.swing.JComponent.getInputVerifier()"""
        return 'InputVerifier'._wrap(super(JComponent, self).getInputVerifier())

    @override
    @overload
    def list(self, arg0: 'PrintStream', arg1: int):
        """public void java.awt.Container.list(java.io.PrintStream,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @override
    @overload
    def setUI(self, arg0: 'PanelUI'):
        """public void javax.swing.JPanel.setUI(javax.swing.plaf.PanelUI)"""
        super(_JPanel, self).setUI(arg0)

    @override
    @overload
    def getFocusTraversalPolicy(self) -> 'FocusTraversalPolicy':
        """public java.awt.FocusTraversalPolicy java.awt.Container.getFocusTraversalPolicy()"""
        return 'FocusTraversalPolicy'._wrap(super(Container, self).getFocusTraversalPolicy())

    @override
    @overload
    def getParent(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getParent()"""
        return 'Container'._wrap(super(Component, self).getParent())

    @override
    @overload
    def paintImmediately(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.paintImmediately(java.awt.Rectangle)"""
        super(_JComponent, self).paintImmediately(arg0)

    @staticmethod
    @overload
    def setDefaultLocale(arg0: 'Locale'):
        """public static void javax.swing.JComponent.setDefaultLocale(java.util.Locale)"""
        _JComponent.setDefaultLocale(arg0)

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,float,float)"""
        super(_Component, self).firePropertyChange(arg0, _float.valueOf(arg1), _float.valueOf(arg2))

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object)"""
        super(_Container, self).add(arg0, arg1)

    @override
    @overload
    def getLocale(self) -> 'Locale':
        """public java.util.Locale java.awt.Component.getLocale()"""
        return 'Locale'._wrap(super(Component, self).getLocale())

    @override
    @overload
    def setInheritsPopupMenu(self, arg0: bool):
        """public void javax.swing.JComponent.setInheritsPopupMenu(boolean)"""
        super(_JComponent, self).setInheritsPopupMenu(_boolean.valueOf(arg0))

    @override
    @overload
    def getHierarchyListeners(self) -> List['HierarchyListener']:
        """public synchronized java.awt.event.HierarchyListener[] java.awt.Component.getHierarchyListeners()"""
        return List['HierarchyListener']._wrap(super(Component, self).getHierarchyListeners())

    @override
    @overload
    def nextFocus(self):
        """public void java.awt.Component.nextFocus()"""
        super(Component, self).nextFocus()

    @override
    @overload
    def isPaintingTile(self) -> bool:
        """public boolean javax.swing.JComponent.isPaintingTile()"""
        return bool._wrap(super(JComponent, self).isPaintingTile())

    @override
    @overload
    def getContentPanel(self) -> 'JPanel':
        """public javax.swing.JPanel com.badlogic.gdx.tools.flame.EditorPanel.getContentPanel()"""
        return 'JPanel'._wrap(super(EditorPanel, self).getContentPanel())

    @override
    @overload
    def isDisplayable(self) -> bool:
        """public boolean java.awt.Component.isDisplayable()"""
        return bool._wrap(super(Component, self).isDisplayable())

    @override
    @overload
    def getBounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.getBounds()"""
        return 'Rectangle'._wrap(super(Component, self).getBounds())

    @override
    @overload
    def removeMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.removeMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).removeMouseMotionListener(arg0)

    @override
    @overload
    def isShowing(self) -> bool:
        """public boolean java.awt.Component.isShowing()"""
        return bool._wrap(super(Component, self).isShowing())

    @override
    @overload
    def getDropTarget(self) -> 'DropTarget':
        """public synchronized java.awt.dnd.DropTarget java.awt.Component.getDropTarget()"""
        return 'DropTarget'._wrap(super(Component, self).getDropTarget())

    @override
    @overload
    def isFontSet(self) -> bool:
        """public boolean java.awt.Component.isFontSet()"""
        return bool._wrap(super(Component, self).isFontSet())

    @overload
    def mouseUp(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseUp(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseUp(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def setIgnoreRepaint(self, arg0: bool):
        """public void java.awt.Component.setIgnoreRepaint(boolean)"""
        super(_Component, self).setIgnoreRepaint(_boolean.valueOf(arg0))

    @override
    @overload
    def getPropertyChangeListeners(self) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners()"""
        return List['PropertyChangeListener']._wrap(super(Component, self).getPropertyChangeListeners())

    @override
    @overload
    def isBackgroundSet(self) -> bool:
        """public boolean java.awt.Component.isBackgroundSet()"""
        return bool._wrap(super(Component, self).isBackgroundSet())

    @override
    @overload
    def getLocation(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocation()"""
        return 'Point'._wrap(super(Component, self).getLocation())

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int._wrap(super(object, self).hashCode())

    @override
    @overload
    def location(self) -> 'Point':
        """public java.awt.Point java.awt.Component.location()"""
        return 'Point'._wrap(super(Component, self).location())

    @override
    @overload
    def getComponentOrientation(self) -> 'ComponentOrientation':
        """public java.awt.ComponentOrientation java.awt.Component.getComponentOrientation()"""
        return 'ComponentOrientation'._wrap(super(Component, self).getComponentOrientation())

    @override
    @overload
    def addHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.addHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).addHierarchyListener(arg0)

    @override
    @overload
    def getInheritsPopupMenu(self) -> bool:
        """public boolean javax.swing.JComponent.getInheritsPopupMenu()"""
        return bool._wrap(super(JComponent, self).getInheritsPopupMenu())

    @override
    @overload
    def setComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Component.setComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Component, self).setComponentOrientation(arg0)

    @override
    @overload
    def getFocusCycleRootAncestor(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getFocusCycleRootAncestor()"""
        return 'Container'._wrap(super(Component, self).getFocusCycleRootAncestor())

    @override
    @overload
    def show(self, arg0: bool):
        """public void java.awt.Component.show(boolean)"""
        super(_Component, self).show(_boolean.valueOf(arg0))

    @staticmethod
    @overload
    def addContent(arg0: 'JPanel', arg1: int, arg2: int, arg3: 'JComponent', arg4: bool, arg5: int, arg6: int, arg7: float, arg8: float):
        """public static void com.badlogic.gdx.tools.flame.EditorPanel.addContent(javax.swing.JPanel,int,int,javax.swing.JComponent,boolean,int,int,float,float)"""
        _EditorPanel.addContent(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3, _boolean.valueOf(arg4), _int.valueOf(arg5), _int.valueOf(arg6), _float.valueOf(arg7), _float.valueOf(arg8))

    @override
    @overload
    def grabFocus(self):
        """public void javax.swing.JComponent.grabFocus()"""
        super(JComponent, self).grabFocus()

    @overload
    def locate(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.locate(int,int)"""
        return 'Component'._wrap(super(_Container, self).locate(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def isPaintingForPrint(self) -> bool:
        """public final boolean javax.swing.JComponent.isPaintingForPrint()"""
        return bool._wrap(super(JComponent, self).isPaintingForPrint())

    @overload
    def keyDown(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyDown(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyDown(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,int,int)"""
        super(_JComponent, self).firePropertyChange(arg0, _int.valueOf(arg1), _int.valueOf(arg2))

    @override
    @overload
    def getLayout(self) -> 'LayoutManager':
        """public java.awt.LayoutManager java.awt.Container.getLayout()"""
        return 'LayoutManager'._wrap(super(Container, self).getLayout())

    @override
    @overload
    def preferredSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.preferredSize()"""
        return 'Dimension'._wrap(super(Container, self).preferredSize())

    @override
    @overload
    def addNotify(self):
        """public void javax.swing.JComponent.addNotify()"""
        super(JComponent, self).addNotify()

    @override
    @overload
    def setSize(self, arg0: int, arg1: int):
        """public void java.awt.Component.setSize(int,int)"""
        super(_Component, self).setSize(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.repaint(int,int,int,int)"""
        super(_Component, self).repaint(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @overload
    def requestFocusInWindow(self, arg0: 'Cause') -> bool:
        """public boolean java.awt.Component.requestFocusInWindow(java.awt.event.FocusEvent$Cause)"""
        return bool._wrap(super(_Component, self).requestFocusInWindow(arg0))

    @override
    @overload
    def remove(self, arg0: int):
        """public void java.awt.Container.remove(int)"""
        super(_Container, self).remove(_int.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,long,long)"""
        super(_Component, self).firePropertyChange(arg0, _long.valueOf(arg1), _long.valueOf(arg2))

    @override
    @overload
    def update(self, arg0: 'FlameMain'):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.update(com.badlogic.gdx.tools.flame.FlameMain)"""
        super(_EditorPanel, self).update(arg0)

    @override
    @overload
    def setFocusCycleRoot(self, arg0: bool):
        """public void java.awt.Container.setFocusCycleRoot(boolean)"""
        super(_Container, self).setFocusCycleRoot(_boolean.valueOf(arg0))

    @overload
    def keyUp(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyUp(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyUp(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def setBackground(self, arg0: 'Color'):
        """public void javax.swing.JComponent.setBackground(java.awt.Color)"""
        super(_JComponent, self).setBackground(arg0)

    @override
    @overload
    def doLayout(self):
        """public void java.awt.Container.doLayout()"""
        super(Container, self).doLayout()

    @override
    @overload
    def enable(self):
        """public void javax.swing.JComponent.enable()"""
        super(JComponent, self).enable()

    @override
    @overload
    def getInsets(self) -> 'Insets':
        """public java.awt.Insets javax.swing.JComponent.getInsets()"""
        return 'Insets'._wrap(super(JComponent, self).getInsets())

    @override
    @overload
    def setNextFocusableComponent(self, arg0: 'Component'):
        """public void javax.swing.JComponent.setNextFocusableComponent(java.awt.Component)"""
        super(_JComponent, self).setNextFocusableComponent(arg0)

    @override
    @overload
    def getAlignmentY(self) -> float:
        """public float javax.swing.JComponent.getAlignmentY()"""
        return float._wrap(super(JComponent, self).getAlignmentY())

    @overload
    def checkImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @override
    @overload
    def getFocusTraversalKeysEnabled(self) -> bool:
        """public boolean java.awt.Component.getFocusTraversalKeysEnabled()"""
        return bool._wrap(super(Component, self).getFocusTraversalKeysEnabled())

    @overload
    def __init__(self, arg0: 'FlameMain', arg1: str, arg2: str, arg3: bool, arg4: bool):
        """public com.badlogic.gdx.tools.flame.ParticleValuePanel(com.badlogic.gdx.tools.flame.FlameMain,java.lang.String,java.lang.String,boolean,boolean)"""
        val = _ParticleValuePanel(arg0, arg1, arg2, _boolean.valueOf(arg3), _boolean.valueOf(arg4))
        self.__wrapper = val

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getRootPane(self) -> 'JRootPane':
        """public javax.swing.JRootPane javax.swing.JComponent.getRootPane()"""
        return 'JRootPane'._wrap(super(JComponent, self).getRootPane())

    @override
    @overload
    def invalidate(self):
        """public void java.awt.Container.invalidate()"""
        super(Container, self).invalidate()

    @override
    @overload
    def resetKeyboardActions(self):
        """public void javax.swing.JComponent.resetKeyboardActions()"""
        super(JComponent, self).resetKeyboardActions()

    @overload
    def getComponent(self, arg0: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponent(int)"""
        return 'Component'._wrap(super(_Container, self).getComponent(_int.valueOf(arg0)))

    @override
    @overload
    def setName(self, arg0: str):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setName(java.lang.String)"""
        super(_EditorPanel, self).setName(arg0)

    @override
    @overload
    def addPropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Container.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Container, self).addPropertyChangeListener(arg0, arg1)

    @override
    @overload
    def setInputMap(self, arg0: int, arg1: 'InputMap'):
        """public final void javax.swing.JComponent.setInputMap(int,javax.swing.InputMap)"""
        super(_JComponent, self).setInputMap(_int.valueOf(arg0), arg1)

    @override
    @overload
    def removePropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0)

    @override
    @overload
    def applyComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Container.applyComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Container, self).applyComponentOrientation(arg0)

    @override
    @overload
    def setBorder(self, arg0: 'Border'):
        """public void javax.swing.JComponent.setBorder(javax.swing.border.Border)"""
        super(_JComponent, self).setBorder(arg0)

    @override
    @overload
    def remove(self, arg0: 'MenuComponent'):
        """public void java.awt.Component.remove(java.awt.MenuComponent)"""
        super(_Component, self).remove(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintStream'):
        """public void java.awt.Component.list(java.io.PrintStream)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def removeMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.removeMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).removeMouseListener(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintWriter'):
        """public void java.awt.Component.list(java.io.PrintWriter)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def getKeyListeners(self) -> List['KeyListener']:
        """public synchronized java.awt.event.KeyListener[] java.awt.Component.getKeyListeners()"""
        return List['KeyListener']._wrap(super(Component, self).getKeyListeners())

    @override
    @overload
    def getInputContext(self) -> 'InputContext':
        """public java.awt.im.InputContext java.awt.Component.getInputContext()"""
        return 'InputContext'._wrap(super(Component, self).getInputContext())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,double,double)"""
        super(_Component, self).firePropertyChange(arg0, _double.valueOf(arg1), _double.valueOf(arg2))

    @override
    @overload
    def removeAncestorListener(self, arg0: 'AncestorListener'):
        """public void javax.swing.JComponent.removeAncestorListener(javax.swing.event.AncestorListener)"""
        super(_JComponent, self).removeAncestorListener(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintWriter', arg1: int):
        """public void java.awt.Container.list(java.io.PrintWriter,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @overload
    def checkImage(self, arg0: 'Image', arg1: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, arg1))

    @override
    @overload
    def removeFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.removeFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).removeFocusListener(arg0)

    @overload
    def mouseDown(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDown(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDown(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def setIsAlwayShown(self, arg0: bool):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setIsAlwayShown(boolean)"""
        super(_EditorPanel, self).setIsAlwayShown(_boolean.valueOf(arg0))

    @overload
    def getConditionForKeyStroke(self, arg0: 'KeyStroke') -> int:
        """public int javax.swing.JComponent.getConditionForKeyStroke(javax.swing.KeyStroke)"""
        return int._wrap(super(_JComponent, self).getConditionForKeyStroke(arg0))

    @override
    @overload
    def getTreeLock(self) -> object:
        """public final java.lang.Object java.awt.Component.getTreeLock()"""
        return object._wrap(super(Component, self).getTreeLock())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @override
    @overload
    def addVetoableChangeListener(self, arg0: 'VetoableChangeListener'):
        """public synchronized void javax.swing.JComponent.addVetoableChangeListener(java.beans.VetoableChangeListener)"""
        super(_JComponent, self).addVetoableChangeListener(arg0)

    @overload
    def contains(self, arg0: 'Point') -> bool:
        """public boolean java.awt.Component.contains(java.awt.Point)"""
        return bool._wrap(super(_Component, self).contains(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,short,short)"""
        super(_Component, self).firePropertyChange(arg0, _short.valueOf(arg1), _short.valueOf(arg2))

    @override
    @overload
    def dispatchEvent(self, arg0: 'AWTEvent'):
        """public final void java.awt.Component.dispatchEvent(java.awt.AWTEvent)"""
        super(_Component, self).dispatchEvent(arg0)

    @override
    @overload
    def removeContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.removeContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).removeContainerListener(arg0)

    @override
    @overload
    def getGraphicsConfiguration(self) -> 'GraphicsConfiguration':
        """public java.awt.GraphicsConfiguration java.awt.Component.getGraphicsConfiguration()"""
        return 'GraphicsConfiguration'._wrap(super(Component, self).getGraphicsConfiguration())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: bool, arg2: bool):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,boolean,boolean)"""
        super(_JComponent, self).firePropertyChange(arg0, _boolean.valueOf(arg1), _boolean.valueOf(arg2))

    @override
    @overload
    def registerKeyboardAction(self, arg0: 'ActionListener', arg1: str, arg2: 'KeyStroke', arg3: int):
        """public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,java.lang.String,javax.swing.KeyStroke,int)"""
        super(_JComponent, self).registerKeyboardAction(arg0, arg1, arg2, _int.valueOf(arg3))

    @overload
    def findComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(arg0))

    @override
    @overload
    def resize(self, arg0: int, arg1: int):
        """public void java.awt.Component.resize(int,int)"""
        super(_Component, self).resize(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getHeight(self) -> int:
        """public int javax.swing.JComponent.getHeight()"""
        return int._wrap(super(JComponent, self).getHeight())

    @override
    @overload
    def getTransferHandler(self) -> 'TransferHandler':
        """public javax.swing.TransferHandler javax.swing.JComponent.getTransferHandler()"""
        return 'TransferHandler'._wrap(super(JComponent, self).getTransferHandler())

    @overload
    def imageUpdate(self, arg0: 'Image', arg1: int, arg2: int, arg3: int, arg4: int, arg5: int) -> bool:
        """public boolean java.awt.Component.imageUpdate(java.awt.Image,int,int,int,int,int)"""
        return bool._wrap(super(_Component, self).imageUpdate(arg0, _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4), _int.valueOf(arg5)))

    @override
    @overload
    def getWidth(self) -> int:
        """public int javax.swing.JComponent.getWidth()"""
        return int._wrap(super(JComponent, self).getWidth())

    @override
    @overload
    def transferFocusBackward(self):
        """public void java.awt.Component.transferFocusBackward()"""
        super(Component, self).transferFocusBackward()

    @overload
    def getPropertyChangeListeners(self, arg0: str) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners(java.lang.String)"""
        return List['PropertyChangeListener']._wrap(super(_Component, self).getPropertyChangeListeners(arg0))

    @override
    @overload
    def getName(self) -> str:
        """public java.lang.String com.badlogic.gdx.tools.flame.EditorPanel.getName()"""
        return str._wrap(super(EditorPanel, self).getName())

    @staticmethod
    @overload
    def isLightweightComponent(arg0: 'Component') -> bool:
        """public static boolean javax.swing.JComponent.isLightweightComponent(java.awt.Component)"""
        return bool._wrap(_JComponent.isLightweightComponent(arg0))

    @override
    @overload
    def getBorder(self) -> 'Border':
        """public javax.swing.border.Border javax.swing.JComponent.getBorder()"""
        return 'Border'._wrap(super(JComponent, self).getBorder())

    @override
    @overload
    def printAll(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.printAll(java.awt.Graphics)"""
        super(_JComponent, self).printAll(arg0)

    @override
    @overload
    def addComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.addComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).addComponentListener(arg0)

    @override
    @overload
    def getBaselineResizeBehavior(self) -> 'BaselineResizeBehavior.Component$BaselineResizeBehavior':
        """public java.awt.Component$BaselineResizeBehavior javax.swing.JComponent.getBaselineResizeBehavior()"""
        return 'BaselineResizeBehavior.Component$BaselineResizeBehavior'._wrap(super(JComponent, self).getBaselineResizeBehavior())

    @override
    @overload
    def print(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.print(java.awt.Graphics)"""
        super(_JComponent, self).print(arg0)

    @override
    @overload
    def setInputVerifier(self, arg0: 'InputVerifier'):
        """public void javax.swing.JComponent.setInputVerifier(javax.swing.InputVerifier)"""
        super(_JComponent, self).setInputVerifier(arg0)

    @override
    @overload
    def addAncestorListener(self, arg0: 'AncestorListener'):
        """public void javax.swing.JComponent.addAncestorListener(javax.swing.event.AncestorListener)"""
        super(_JComponent, self).addAncestorListener(arg0)

    @override
    @overload
    def getFont(self) -> 'Font':
        """public java.awt.Font java.awt.Component.getFont()"""
        return 'Font'._wrap(super(Component, self).getFont())

    @override
    @overload
    def setFont(self, arg0: 'Font'):
        """public void javax.swing.JComponent.setFont(java.awt.Font)"""
        super(_JComponent, self).setFont(arg0)

    @override
    @overload
    def isOptimizedDrawingEnabled(self) -> bool:
        """public boolean javax.swing.JComponent.isOptimizedDrawingEnabled()"""
        return bool._wrap(super(JComponent, self).isOptimizedDrawingEnabled())

    @override
    @overload
    def isValidateRoot(self) -> bool:
        """public boolean javax.swing.JComponent.isValidateRoot()"""
        return bool._wrap(super(JComponent, self).isValidateRoot())

    @overload
    def prepareImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @override
    @overload
    def setForeground(self, arg0: 'Color'):
        """public void javax.swing.JComponent.setForeground(java.awt.Color)"""
        super(_JComponent, self).setForeground(arg0)

    @overload
    def mouseDrag(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDrag(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDrag(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def isOpaque(self) -> bool:
        """public boolean javax.swing.JComponent.isOpaque()"""
        return bool._wrap(super(JComponent, self).isOpaque())

    @overload
    def createVolatileImage(self, arg0: int, arg1: int, arg2: 'ImageCapabilities') -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int,java.awt.ImageCapabilities) throws java.awt.AWTException"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1), arg2))

    @override
    @overload
    def bounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.bounds()"""
        return 'Rectangle'._wrap(super(Component, self).bounds())

    @overload
    def __init__(self, arg0: 'FlameMain', arg1: str, arg2: str, arg3: bool):
        """public com.badlogic.gdx.tools.flame.ParticleValuePanel(com.badlogic.gdx.tools.flame.FlameMain,java.lang.String,java.lang.String,boolean)"""
        val = _ParticleValuePanel(arg0, arg1, arg2, _boolean.valueOf(arg3))
        self.__wrapper = val

    @override
    @overload
    def update(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.update(java.awt.Graphics)"""
        super(_JComponent, self).update(arg0)

    @override
    @overload
    def add(self, arg0: 'PopupMenu'):
        """public void java.awt.Component.add(java.awt.PopupMenu)"""
        super(_Component, self).add(arg0)

    @override
    @overload
    def getToolTipText(self) -> str:
        """public java.lang.String javax.swing.JComponent.getToolTipText()"""
        return str._wrap(super(JComponent, self).getToolTipText())

    @override
    @overload
    def isVisible(self) -> bool:
        """public boolean java.awt.Component.isVisible()"""
        return bool._wrap(super(Component, self).isVisible())

    @override
    @overload
    def setDropTarget(self, arg0: 'DropTarget'):
        """public synchronized void java.awt.Component.setDropTarget(java.awt.dnd.DropTarget)"""
        super(_Component, self).setDropTarget(arg0)

    @override
    @overload
    def getLocationOnScreen(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocationOnScreen()"""
        return 'Point'._wrap(super(Component, self).getLocationOnScreen())

    @override
    @overload
    def getY(self) -> int:
        """public int javax.swing.JComponent.getY()"""
        return int._wrap(super(JComponent, self).getY())

    @overload
    def getComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def isMaximumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMaximumSizeSet()"""
        return bool._wrap(super(Component, self).isMaximumSizeSet())

    @override
    @overload
    def setAlignmentY(self, arg0: float):
        """public void javax.swing.JComponent.setAlignmentY(float)"""
        super(_JComponent, self).setAlignmentY(_float.valueOf(arg0))

    @override
    @overload
    def getRegisteredKeyStrokes(self) -> List['KeyStroke']:
        """public javax.swing.KeyStroke[] javax.swing.JComponent.getRegisteredKeyStrokes()"""
        return List['KeyStroke']._wrap(super(JComponent, self).getRegisteredKeyStrokes())

    @override
    @overload
    def isFocusable(self) -> bool:
        """public boolean java.awt.Component.isFocusable()"""
        return bool._wrap(super(Component, self).isFocusable())

    @override
    @overload
    def isFocusTraversalPolicyProvider(self) -> bool:
        """public final boolean java.awt.Container.isFocusTraversalPolicyProvider()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicyProvider())

    @override
    @overload
    def getMouseListeners(self) -> List['MouseListener']:
        """public synchronized java.awt.event.MouseListener[] java.awt.Component.getMouseListeners()"""
        return List['MouseListener']._wrap(super(Component, self).getMouseListeners())

    @override
    @overload
    def registerKeyboardAction(self, arg0: 'ActionListener', arg1: 'KeyStroke', arg2: int):
        """public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,javax.swing.KeyStroke,int)"""
        super(_JComponent, self).registerKeyboardAction(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def transferFocusUpCycle(self):
        """public void java.awt.Component.transferFocusUpCycle()"""
        super(Component, self).transferFocusUpCycle()

    @override
    @overload
    def removeKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.removeKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).removeKeyListener(arg0)

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: str, arg2: str):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,char,char)"""
        super(_JComponent, self).firePropertyChange(arg0, _char.valueOf(arg1), _char.valueOf(arg2))

    @override
    @overload
    def getMouseMotionListeners(self) -> List['MouseMotionListener']:
        """public synchronized java.awt.event.MouseMotionListener[] java.awt.Component.getMouseMotionListeners()"""
        return List['MouseMotionListener']._wrap(super(Component, self).getMouseMotionListeners())

    @override
    @overload
    def getAutoscrolls(self) -> bool:
        """public boolean javax.swing.JComponent.getAutoscrolls()"""
        return bool._wrap(super(JComponent, self).getAutoscrolls())

    @override
    @overload
    def addContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.addContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).addContainerListener(arg0)

    @override
    @overload
    def isFocusTraversable(self) -> bool:
        """public boolean java.awt.Component.isFocusTraversable()"""
        return bool._wrap(super(Component, self).isFocusTraversable())

    @overload
    def mouseExit(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseExit(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseExit(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getBounds(self, arg0: 'Rectangle') -> 'Rectangle':
        """public java.awt.Rectangle javax.swing.JComponent.getBounds(java.awt.Rectangle)"""
        return 'Rectangle'._wrap(super(_JComponent, self).getBounds(arg0))

    @override
    @overload
    def setToolTipText(self, arg0: str):
        """public void javax.swing.JComponent.setToolTipText(java.lang.String)"""
        super(_JComponent, self).setToolTipText(arg0)

    @override
    @overload
    def setAutoscrolls(self, arg0: bool):
        """public void javax.swing.JComponent.setAutoscrolls(boolean)"""
        super(_JComponent, self).setAutoscrolls(_boolean.valueOf(arg0))

    @override
    @overload
    def setComponentPopupMenu(self, arg0: 'JPopupMenu'):
        """public void javax.swing.JComponent.setComponentPopupMenu(javax.swing.JPopupMenu)"""
        super(_JComponent, self).setComponentPopupMenu(arg0)

    @override
    @overload
    def setMixingCutoutShape(self, arg0: 'Shape'):
        """public void java.awt.Component.setMixingCutoutShape(java.awt.Shape)"""
        super(_Component, self).setMixingCutoutShape(arg0)

    @override
    @overload
    def getVisibleRect(self) -> 'Rectangle':
        """public java.awt.Rectangle javax.swing.JComponent.getVisibleRect()"""
        return 'Rectangle'._wrap(super(JComponent, self).getVisibleRect())

    @override
    @overload
    def requestFocus(self, arg0: 'Cause'):
        """public void java.awt.Component.requestFocus(java.awt.event.FocusEvent$Cause)"""
        super(_Component, self).requestFocus(arg0)

    @overload
    def createImage(self, arg0: int, arg1: int) -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(int,int)"""
        return 'Image'._wrap(super(_Component, self).createImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def putClientProperty(self, arg0: object, arg1: object):
        """public final void javax.swing.JComponent.putClientProperty(java.lang.Object,java.lang.Object)"""
        super(_JComponent, self).putClientProperty(arg0, arg1)

    @override
    @overload
    def getVetoableChangeListeners(self) -> List['VetoableChangeListener']:
        """public synchronized java.beans.VetoableChangeListener[] javax.swing.JComponent.getVetoableChangeListeners()"""
        return List['VetoableChangeListener']._wrap(super(JComponent, self).getVetoableChangeListeners())

    @override
    @overload
    def scrollRectToVisible(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.scrollRectToVisible(java.awt.Rectangle)"""
        super(_JComponent, self).scrollRectToVisible(arg0)

    @override
    @overload
    def getTopLevelAncestor(self) -> 'Container':
        """public java.awt.Container javax.swing.JComponent.getTopLevelAncestor()"""
        return 'Container'._wrap(super(JComponent, self).getTopLevelAncestor())

    @override
    @overload
    def isRequestFocusEnabled(self) -> bool:
        """public boolean javax.swing.JComponent.isRequestFocusEnabled()"""
        return bool._wrap(super(JComponent, self).isRequestFocusEnabled())

    @override
    @overload
    def getFocusListeners(self) -> List['FocusListener']:
        """public synchronized java.awt.event.FocusListener[] java.awt.Component.getFocusListeners()"""
        return List['FocusListener']._wrap(super(Component, self).getFocusListeners())

    @override
    @overload
    def setLayout(self, arg0: 'LayoutManager'):
        """public void java.awt.Container.setLayout(java.awt.LayoutManager)"""
        super(_Container, self).setLayout(arg0)

    @overload
    def add(self, arg0: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0))

    @override
    @overload
    def getMouseWheelListeners(self) -> List['MouseWheelListener']:
        """public synchronized java.awt.event.MouseWheelListener[] java.awt.Component.getMouseWheelListeners()"""
        return List['MouseWheelListener']._wrap(super(Component, self).getMouseWheelListeners())

    @override
    @overload
    def reshape(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void javax.swing.JComponent.reshape(int,int,int,int)"""
        super(_JComponent, self).reshape(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def setTransferHandler(self, arg0: 'TransferHandler'):
        """public void javax.swing.JComponent.setTransferHandler(javax.swing.TransferHandler)"""
        super(_JComponent, self).setTransferHandler(arg0)

    @override
    @overload
    def getPreferredSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getPreferredSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getPreferredSize())

    @override
    @overload
    def setLocation(self, arg0: int, arg1: int):
        """public void java.awt.Component.setLocation(int,int)"""
        super(_Component, self).setLocation(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def removeInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.removeInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).removeInputMethodListener(arg0)

    @override
    @overload
    def setFocusable(self, arg0: bool):
        """public void java.awt.Component.setFocusable(boolean)"""
        super(_Component, self).setFocusable(_boolean.valueOf(arg0))

    @override
    @overload
    def paintComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.paintComponents(java.awt.Graphics)"""
        super(_Container, self).paintComponents(arg0)

    @override
    @overload
    def addFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.addFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).addFocusListener(arg0)

    @overload
    def prepareImage(self, arg0: 'Image', arg1: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, arg1))

    @override
    @overload
    def addKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.addKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).addKeyListener(arg0)

    @override
    @overload
    def resize(self, arg0: 'Dimension'):
        """public void java.awt.Component.resize(java.awt.Dimension)"""
        super(_Component, self).resize(arg0)

    @override
    @overload
    def setComponentZOrder(self, arg0: 'Component', arg1: int):
        """public void java.awt.Container.setComponentZOrder(java.awt.Component,int)"""
        super(_Container, self).setComponentZOrder(arg0, _int.valueOf(arg1))

    @override
    @overload
    def list(self):
        """public void java.awt.Component.list()"""
        super(Component, self).list()

    @overload
    def add(self, arg0: str, arg1: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.lang.String,java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, arg1))

    @override
    @overload
    def paintImmediately(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void javax.swing.JComponent.paintImmediately(int,int,int,int)"""
        super(_JComponent, self).paintImmediately(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def getMinimumSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getMinimumSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getMinimumSize())

    @override
    @overload
    def setEnabled(self, arg0: bool):
        """public void javax.swing.JComponent.setEnabled(boolean)"""
        super(_JComponent, self).setEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def hasFocus(self) -> bool:
        """public boolean java.awt.Component.hasFocus()"""
        return bool._wrap(super(Component, self).hasFocus())

    @overload
    def createVolatileImage(self, arg0: int, arg1: int) -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int)"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.removeHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).removeHierarchyListener(arg0)

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.awt.Component.toString()"""
        return str._wrap(super(Component, self).toString())

    @override
    @overload
    def addMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.addMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).addMouseListener(arg0)

    @override
    @overload
    def isFocusOwner(self) -> bool:
        """public boolean java.awt.Component.isFocusOwner()"""
        return bool._wrap(super(Component, self).isFocusOwner())

    @override
    @overload
    def getAccessibleContext(self) -> 'AccessibleContext':
        """public javax.accessibility.AccessibleContext javax.swing.JPanel.getAccessibleContext()"""
        return 'AccessibleContext'._wrap(super(JPanel, self).getAccessibleContext())

    @overload
    def postEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.postEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).postEvent(arg0))

    @overload
    def getLocation(self, arg0: 'Point') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getLocation(java.awt.Point)"""
        return 'Point'._wrap(super(_JComponent, self).getLocation(arg0))

    @overload
    def getBaseline(self, arg0: int, arg1: int) -> int:
        """public int javax.swing.JComponent.getBaseline(int,int)"""
        return int._wrap(super(_JComponent, self).getBaseline(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def findComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeNotify(self):
        """public void javax.swing.JComponent.removeNotify()"""
        super(JComponent, self).removeNotify()

    @override
    @overload
    def getForeground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getForeground()"""
        return 'Color'._wrap(super(Component, self).getForeground())

    @override
    @overload
    def show(self):
        """public void java.awt.Component.show()"""
        super(Component, self).show()

    @override
    @overload
    def isDoubleBuffered(self) -> bool:
        """public boolean javax.swing.JComponent.isDoubleBuffered()"""
        return bool._wrap(super(JComponent, self).isDoubleBuffered())

    @override
    @overload
    def setDescription(self, arg0: str):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setDescription(java.lang.String)"""
        super(_EditorPanel, self).setDescription(arg0)

    @override
    @overload
    def isFocusCycleRoot(self) -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot()"""
        return bool._wrap(super(Container, self).isFocusCycleRoot())

    @override
    @overload
    def addMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.addMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).addMouseWheelListener(arg0)

    @override
    @overload
    def hide(self):
        """public void javax.swing.JComponent.hide()"""
        super(JComponent, self).hide()

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def setHasAdvanced(self, arg0: bool):
        """public void com.badlogic.gdx.tools.flame.ParticleValuePanel.setHasAdvanced(boolean)"""
        super(_ParticleValuePanel, self).setHasAdvanced(_boolean.valueOf(arg0))

    @override
    @overload
    def revalidate(self):
        """public void javax.swing.JComponent.revalidate()"""
        super(JComponent, self).revalidate()

    @override
    @overload
    def getActionMap(self) -> 'ActionMap':
        """public final javax.swing.ActionMap javax.swing.JComponent.getActionMap()"""
        return 'ActionMap'._wrap(super(JComponent, self).getActionMap())

    @override
    @overload
    def requestFocusInWindow(self) -> bool:
        """public boolean javax.swing.JComponent.requestFocusInWindow()"""
        return bool._wrap(super(JComponent, self).requestFocusInWindow())

    @overload
    def action(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.action(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).action(arg0, arg1))

    @override
    @overload
    def isManagingFocus(self) -> bool:
        """public boolean javax.swing.JComponent.isManagingFocus()"""
        return bool._wrap(super(JComponent, self).isManagingFocus())

    @override
    @overload
    def isLightweight(self) -> bool:
        """public boolean java.awt.Component.isLightweight()"""
        return bool._wrap(super(Component, self).isLightweight())

    @override
    @overload
    def setAlignmentX(self, arg0: float):
        """public void javax.swing.JComponent.setAlignmentX(float)"""
        super(_JComponent, self).setAlignmentX(_float.valueOf(arg0))

    @overload
    def getFocusTraversalKeys(self, arg0: int) -> 'Set':
        """public java.util.Set<java.awt.AWTKeyStroke> java.awt.Container.getFocusTraversalKeys(int)"""
        return 'Set'._wrap(super(_Container, self).getFocusTraversalKeys(_int.valueOf(arg0)))

    @override
    @overload
    def setFocusTraversalKeysEnabled(self, arg0: bool):
        """public void java.awt.Component.setFocusTraversalKeysEnabled(boolean)"""
        super(_Component, self).setFocusTraversalKeysEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def remove(self, arg0: 'Component'):
        """public void java.awt.Container.remove(java.awt.Component)"""
        super(_Container, self).remove(arg0)

    @overload
    def getInsets(self, arg0: 'Insets') -> 'Insets':
        """public java.awt.Insets javax.swing.JComponent.getInsets(java.awt.Insets)"""
        return 'Insets'._wrap(super(_JComponent, self).getInsets(arg0))

    @override
    @overload
    def insets(self) -> 'Insets':
        """public java.awt.Insets java.awt.Container.insets()"""
        return 'Insets'._wrap(super(Container, self).insets())

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int):
        """public void javax.swing.JComponent.repaint(long,int,int,int,int)"""
        super(_JComponent, self).repaint(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4))

    @override
    @overload
    def setFocusTraversalPolicy(self, arg0: 'FocusTraversalPolicy'):
        """public void java.awt.Container.setFocusTraversalPolicy(java.awt.FocusTraversalPolicy)"""
        super(_Container, self).setFocusTraversalPolicy(arg0)

    @overload
    def getSize(self, arg0: 'Dimension') -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getSize(java.awt.Dimension)"""
        return 'Dimension'._wrap(super(_JComponent, self).getSize(arg0))

    @override
    @overload
    def enable(self, arg0: bool):
        """public void java.awt.Component.enable(boolean)"""
        super(_Component, self).enable(_boolean.valueOf(arg0))

    @overload
    def getToolTipLocation(self, arg0: 'MouseEvent') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getToolTipLocation(java.awt.event.MouseEvent)"""
        return 'Point'._wrap(super(_JComponent, self).getToolTipLocation(arg0))

    @override
    @overload
    def addPropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Container.addPropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Container, self).addPropertyChangeListener(arg0)

    @overload
    def getComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(arg0))

    @override
    @overload
    def size(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.size()"""
        return 'Dimension'._wrap(super(Component, self).size())

    @override
    @overload
    def getVerifyInputWhenFocusTarget(self) -> bool:
        """public boolean javax.swing.JComponent.getVerifyInputWhenFocusTarget()"""
        return bool._wrap(super(JComponent, self).getVerifyInputWhenFocusTarget())

    @overload
    def mouseMove(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseMove(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseMove(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getActionForKeyStroke(self, arg0: 'KeyStroke') -> 'ActionListener':
        """public java.awt.event.ActionListener javax.swing.JComponent.getActionForKeyStroke(javax.swing.KeyStroke)"""
        return 'ActionListener'._wrap(super(_JComponent, self).getActionForKeyStroke(arg0))

    @overload
    def lostFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.lostFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).lostFocus(arg0, arg1))

    @override
    @overload
    def isMinimumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMinimumSizeSet()"""
        return bool._wrap(super(Component, self).isMinimumSizeSet())

    @override
    @overload
    def isForegroundSet(self) -> bool:
        """public boolean java.awt.Component.isForegroundSet()"""
        return bool._wrap(super(Component, self).isForegroundSet())

    @overload
    def getMousePosition(self, arg0: bool) -> 'Point':
        """public java.awt.Point java.awt.Container.getMousePosition(boolean) throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(_Container, self).getMousePosition(_boolean.valueOf(arg0)))

    @overload
    def getFontMetrics(self, arg0: 'Font') -> 'FontMetrics':
        """public java.awt.FontMetrics javax.swing.JComponent.getFontMetrics(java.awt.Font)"""
        return 'FontMetrics'._wrap(super(_JComponent, self).getFontMetrics(arg0))

    @overload
    def getListeners(self, arg0: 'Class') -> List['EventListener']:
        """public <T extends java.util.EventListener> T[] javax.swing.JComponent.getListeners(java.lang.Class<T>)"""
        return List['EventListener']._wrap(super(_JComponent, self).getListeners(arg0))

    @override
    @overload
    def getHierarchyBoundsListeners(self) -> List['HierarchyBoundsListener']:
        """public synchronized java.awt.event.HierarchyBoundsListener[] java.awt.Component.getHierarchyBoundsListeners()"""
        return List['HierarchyBoundsListener']._wrap(super(Component, self).getHierarchyBoundsListeners())

    @override
    @overload
    def minimumSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.minimumSize()"""
        return 'Dimension'._wrap(super(Container, self).minimumSize())

    @overload
    def handleEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.handleEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).handleEvent(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @override
    @overload
    def getComponentListeners(self) -> List['ComponentListener']:
        """public synchronized java.awt.event.ComponentListener[] java.awt.Component.getComponentListeners()"""
        return List['ComponentListener']._wrap(super(Component, self).getComponentListeners())

    @override
    @overload
    def computeVisibleRect(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.computeVisibleRect(java.awt.Rectangle)"""
        super(_JComponent, self).computeVisibleRect(arg0)

    @override
    @overload
    def deliverEvent(self, arg0: 'Event'):
        """public void java.awt.Container.deliverEvent(java.awt.Event)"""
        super(_Container, self).deliverEvent(arg0)

    @override
    @overload
    def addHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.addHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).addHierarchyBoundsListener(arg0)

    @override
    @overload
    def getAlignmentX(self) -> float:
        """public float javax.swing.JComponent.getAlignmentX()"""
        return float._wrap(super(JComponent, self).getAlignmentX())

    @overload
    def add(self, arg0: 'Component', arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component,int)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, _int.valueOf(arg1)))

    @overload
    def __init__(self, arg0: 'FlameMain', arg1: str, arg2: str):
        """public com.badlogic.gdx.tools.flame.ParticleValuePanel(com.badlogic.gdx.tools.flame.FlameMain,java.lang.String,java.lang.String)"""
        val = _ParticleValuePanel(arg0, arg1, arg2)
        self.__wrapper = val

    @override
    @overload
    def repaint(self):
        """public void java.awt.Component.repaint()"""
        super(Component, self).repaint()

    @overload
    def gotFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.gotFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).gotFocus(arg0, arg1))

    @override
    @overload
    def createToolTip(self) -> 'JToolTip':
        """public javax.swing.JToolTip javax.swing.JComponent.createToolTip()"""
        return 'JToolTip'._wrap(super(JComponent, self).createToolTip())

    @override
    @overload
    def setEmbedded(self):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setEmbedded()"""
        super(EditorPanel, self).setEmbedded()

    @overload
    def getToolTipText(self, arg0: 'MouseEvent') -> str:
        """public java.lang.String javax.swing.JComponent.getToolTipText(java.awt.event.MouseEvent)"""
        return str._wrap(super(_JComponent, self).getToolTipText(arg0))

    @override
    @overload
    def printComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.printComponents(java.awt.Graphics)"""
        super(_Container, self).printComponents(arg0)

    @override
    @overload
    def getColorModel(self) -> 'ColorModel':
        """public java.awt.image.ColorModel java.awt.Component.getColorModel()"""
        return 'ColorModel'._wrap(super(Component, self).getColorModel())

    @override
    @overload
    def setFocusTraversalPolicyProvider(self, arg0: bool):
        """public final void java.awt.Container.setFocusTraversalPolicyProvider(boolean)"""
        super(_Container, self).setFocusTraversalPolicyProvider(_boolean.valueOf(arg0))

    @overload
    def getComponentZOrder(self, arg0: 'Component') -> int:
        """public int java.awt.Container.getComponentZOrder(java.awt.Component)"""
        return int._wrap(super(_Container, self).getComponentZOrder(arg0))

    @override
    @overload
    def getDebugGraphicsOptions(self) -> int:
        """public int javax.swing.JComponent.getDebugGraphicsOptions()"""
        return int._wrap(super(JComponent, self).getDebugGraphicsOptions())

    @overload
    def areFocusTraversalKeysSet(self, arg0: int) -> bool:
        """public boolean java.awt.Container.areFocusTraversalKeysSet(int)"""
        return bool._wrap(super(_Container, self).areFocusTraversalKeysSet(_int.valueOf(arg0)))

    @override
    @overload
    def getSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.getSize()"""
        return 'Dimension'._wrap(super(Component, self).getSize())

    @override
    @overload
    def repaint(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.repaint(java.awt.Rectangle)"""
        super(_JComponent, self).repaint(arg0)

    @overload
    def getClientProperty(self, arg0: object) -> object:
        """public final java.lang.Object javax.swing.JComponent.getClientProperty(java.lang.Object)"""
        return object._wrap(super(_JComponent, self).getClientProperty(arg0))

    @override
    @overload
    def unregisterKeyboardAction(self, arg0: 'KeyStroke'):
        """public void javax.swing.JComponent.unregisterKeyboardAction(javax.swing.KeyStroke)"""
        super(_JComponent, self).unregisterKeyboardAction(arg0)

    @overload
    def requestFocus(self, arg0: bool) -> bool:
        """public boolean javax.swing.JComponent.requestFocus(boolean)"""
        return bool._wrap(super(_JComponent, self).requestFocus(_boolean.valueOf(arg0)))

    @override
    @overload
    def setActionMap(self, arg0: 'ActionMap'):
        """public final void javax.swing.JComponent.setActionMap(javax.swing.ActionMap)"""
        super(_JComponent, self).setActionMap(arg0)

    @override
    @overload
    def getX(self) -> int:
        """public int javax.swing.JComponent.getX()"""
        return int._wrap(super(JComponent, self).getX())

    @overload
    def mouseEnter(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseEnter(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseEnter(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def updateUI(self):
        """public void javax.swing.JPanel.updateUI()"""
        super(JPanel, self).updateUI()

    @override
    @overload
    def getToolkit(self) -> 'Toolkit':
        """public java.awt.Toolkit java.awt.Component.getToolkit()"""
        return 'Toolkit'._wrap(super(Component, self).getToolkit())

    @override
    @overload
    def isCursorSet(self) -> bool:
        """public boolean java.awt.Component.isCursorSet()"""
        return bool._wrap(super(Component, self).isCursorSet())

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object, arg2: int):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object,int)"""
        super(_Container, self).add(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def setPreferredSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setPreferredSize(java.awt.Dimension)"""
        super(_JComponent, self).setPreferredSize(arg0)

    @override
    @overload
    def setBounds(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.setBounds(int,int,int,int)"""
        super(_Component, self).setBounds(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def isFocusTraversalPolicySet(self) -> bool:
        """public boolean java.awt.Container.isFocusTraversalPolicySet()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicySet())

    @override
    @overload
    def requestFocus(self):
        """public void javax.swing.JComponent.requestFocus()"""
        super(JComponent, self).requestFocus()

    @override
    @overload
    def getAncestorListeners(self) -> List['AncestorListener']:
        """public javax.swing.event.AncestorListener[] javax.swing.JComponent.getAncestorListeners()"""
        return List['AncestorListener']._wrap(super(JComponent, self).getAncestorListeners())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool._wrap(super(_object, self).equals(arg0))

    @overload
    def getInputMap(self, arg0: int) -> 'InputMap':
        """public final javax.swing.InputMap javax.swing.JComponent.getInputMap(int)"""
        return 'InputMap'._wrap(super(_JComponent, self).getInputMap(_int.valueOf(arg0)))

    @override
    @overload
    def isEnabled(self) -> bool:
        """public boolean java.awt.Component.isEnabled()"""
        return bool._wrap(super(Component, self).isEnabled())

    @override
    @overload
    def move(self, arg0: int, arg1: int):
        """public void java.awt.Component.move(int,int)"""
        super(_Component, self).move(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def addMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.addMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).addMouseMotionListener(arg0)

    @override
    @overload
    def getIgnoreRepaint(self) -> bool:
        """public boolean java.awt.Component.getIgnoreRepaint()"""
        return bool._wrap(super(Component, self).getIgnoreRepaint())

    @overload
    def isFocusCycleRoot(self, arg0: 'Container') -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot(java.awt.Container)"""
        return bool._wrap(super(_Container, self).isFocusCycleRoot(arg0))

    @override
    @overload
    def getGraphics(self) -> 'Graphics':
        """public java.awt.Graphics javax.swing.JComponent.getGraphics()"""
        return 'Graphics'._wrap(super(JComponent, self).getGraphics())

    @override
    @overload
    def setLocale(self, arg0: 'Locale'):
        """public void java.awt.Component.setLocale(java.util.Locale)"""
        super(_Component, self).setLocale(arg0)

    @override
    @overload
    def paintAll(self, arg0: 'Graphics'):
        """public void java.awt.Component.paintAll(java.awt.Graphics)"""
        super(_Component, self).paintAll(arg0)

    @override
    @overload
    def setDoubleBuffered(self, arg0: bool):
        """public void javax.swing.JComponent.setDoubleBuffered(boolean)"""
        super(_JComponent, self).setDoubleBuffered(_boolean.valueOf(arg0))

    @override
    @overload
    def isPreferredSizeSet(self) -> bool:
        """public boolean java.awt.Component.isPreferredSizeSet()"""
        return bool._wrap(super(Component, self).isPreferredSizeSet())

    @override
    @overload
    def addInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.addInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).addInputMethodListener(arg0)

    @override
    @overload
    def removeMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.removeMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).removeMouseWheelListener(arg0)

    @override
    @overload
    def getInputMap(self) -> 'InputMap':
        """public final javax.swing.InputMap javax.swing.JComponent.getInputMap()"""
        return 'InputMap'._wrap(super(JComponent, self).getInputMap())

    @override
    @overload
    def setVisible(self, arg0: bool):
        """public void javax.swing.JComponent.setVisible(boolean)"""
        super(_JComponent, self).setVisible(_boolean.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,byte,byte)"""
        super(_Component, self).firePropertyChange(arg0, _byte.valueOf(arg1), _byte.valueOf(arg2))

    @override
    @overload
    def getUIClassID(self) -> str:
        """public java.lang.String javax.swing.JPanel.getUIClassID()"""
        return str._wrap(super(JPanel, self).getUIClassID())

    @override
    @overload
    def transferFocusDownCycle(self):
        """public void java.awt.Container.transferFocusDownCycle()"""
        super(Container, self).transferFocusDownCycle()

    @override
    @overload
    def getNextFocusableComponent(self) -> 'Component':
        """public java.awt.Component javax.swing.JComponent.getNextFocusableComponent()"""
        return 'Component'._wrap(super(JComponent, self).getNextFocusableComponent())

    @override
    @overload
    def getUI(self) -> 'PanelUI':
        """public javax.swing.plaf.PanelUI javax.swing.JPanel.getUI()"""
        return 'PanelUI'._wrap(super(JPanel, self).getUI())

    @override
    @overload
    def setBounds(self, arg0: 'Rectangle'):
        """public void java.awt.Component.setBounds(java.awt.Rectangle)"""
        super(_Component, self).setBounds(arg0)

    @override
    @overload
    def repaint(self, arg0: int):
        """public void java.awt.Component.repaint(long)"""
        super(_Component, self).repaint(_long.valueOf(arg0))

    @override
    @overload
    def removeHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.removeHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).removeHierarchyBoundsListener(arg0)

    @override
    @overload
    def getComponentPopupMenu(self) -> 'JPopupMenu':
        """public javax.swing.JPopupMenu javax.swing.JComponent.getComponentPopupMenu()"""
        return 'JPopupMenu'._wrap(super(JComponent, self).getComponentPopupMenu())

    @override
    @overload
    def getMousePosition(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getMousePosition() throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(Component, self).getMousePosition())

    @override
    @overload
    def getComponentCount(self) -> int:
        """public int java.awt.Container.getComponentCount()"""
        return int._wrap(super(Container, self).getComponentCount())

    @override
    @overload
    def getInputMethodRequests(self) -> 'InputMethodRequests':
        """public java.awt.im.InputMethodRequests java.awt.Component.getInputMethodRequests()"""
        return 'InputMethodRequests'._wrap(super(Component, self).getInputMethodRequests())

    @override
    @overload
    def setMaximumSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setMaximumSize(java.awt.Dimension)"""
        super(_JComponent, self).setMaximumSize(arg0)

    @override
    @overload
    def setRequestFocusEnabled(self, arg0: bool):
        """public void javax.swing.JComponent.setRequestFocusEnabled(boolean)"""
        super(_JComponent, self).setRequestFocusEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def setFocusTraversalKeys(self, arg0: int, arg1: 'Set'):
        """public void javax.swing.JComponent.setFocusTraversalKeys(int,java.util.Set<? extends java.awt.AWTKeyStroke>)"""
        super(_JComponent, self).setFocusTraversalKeys(_int.valueOf(arg0), arg1)

    @overload
    def inside(self, arg0: int, arg1: int) -> bool:
        """public boolean java.awt.Component.inside(int,int)"""
        return bool._wrap(super(_Component, self).inside(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def requestDefaultFocus(self) -> bool:
        """public boolean javax.swing.JComponent.requestDefaultFocus()"""
        return bool._wrap(super(JComponent, self).requestDefaultFocus())

    @override
    @overload
    def disable(self):
        """public void javax.swing.JComponent.disable()"""
        super(JComponent, self).disable()

    @override
    @overload
    def showContent(self, arg0: bool):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.showContent(boolean)"""
        super(_EditorPanel, self).showContent(_boolean.valueOf(arg0))

    @override
    @overload
    def enableInputMethods(self, arg0: bool):
        """public void java.awt.Component.enableInputMethods(boolean)"""
        super(_Component, self).enableInputMethods(_boolean.valueOf(arg0))

    @override
    @overload
    def layout(self):
        """public void java.awt.Container.layout()"""
        super(Container, self).layout()

    @override
    @overload
    def getInputMethodListeners(self) -> List['InputMethodListener']:
        """public synchronized java.awt.event.InputMethodListener[] java.awt.Component.getInputMethodListeners()"""
        return List['InputMethodListener']._wrap(super(Component, self).getInputMethodListeners())

    @override
    @overload
    def paint(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.paint(java.awt.Graphics)"""
        super(_JComponent, self).paint(arg0)

    @override
    @overload
    def transferFocus(self):
        """public void java.awt.Component.transferFocus()"""
        super(Component, self).transferFocus()

    @override
    @overload
    def removeComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.removeComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).removeComponentListener(arg0)

    @override
    @overload
    def getCursor(self) -> 'Cursor':
        """public java.awt.Cursor java.awt.Component.getCursor()"""
        return 'Cursor'._wrap(super(Component, self).getCursor())

    @overload
    def setValue(self, arg0: 'ParticleValue'):
        """public void com.badlogic.gdx.tools.flame.ParticleValuePanel.setValue(T)"""
        super(_ParticleValuePanel, self).setValue(arg0)

    @override
    @overload
    def setMinimumSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setMinimumSize(java.awt.Dimension)"""
        super(_JComponent, self).setMinimumSize(arg0)

    @override
    @overload
    def getAdvancedPanel(self) -> 'JPanel':
        """public javax.swing.JPanel com.badlogic.gdx.tools.flame.EditorPanel.getAdvancedPanel()"""
        return 'JPanel'._wrap(super(EditorPanel, self).getAdvancedPanel())

    @override
    @overload
    def getContainerListeners(self) -> List['ContainerListener']:
        """public synchronized java.awt.event.ContainerListener[] java.awt.Container.getContainerListeners()"""
        return List['ContainerListener']._wrap(super(Container, self).getContainerListeners())

    @override
    @overload
    def setLocation(self, arg0: 'Point'):
        """public void java.awt.Component.setLocation(java.awt.Point)"""
        super(_Component, self).setLocation(arg0)

    @override
    @overload
    def setSize(self, arg0: 'Dimension'):
        """public void java.awt.Component.setSize(java.awt.Dimension)"""
        super(_Component, self).setSize(arg0)

    @override
    @overload
    def removeAll(self):
        """public void java.awt.Container.removeAll()"""
        super(Container, self).removeAll()

    @overload
    def getPopupLocation(self, arg0: 'MouseEvent') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getPopupLocation(java.awt.event.MouseEvent)"""
        return 'Point'._wrap(super(_JComponent, self).getPopupLocation(arg0))

    @overload
    def isAncestorOf(self, arg0: 'Component') -> bool:
        """public boolean java.awt.Container.isAncestorOf(java.awt.Component)"""
        return bool._wrap(super(_Container, self).isAncestorOf(arg0))

    @override
    @overload
    def setOpaque(self, arg0: bool):
        """public void javax.swing.JComponent.setOpaque(boolean)"""
        super(_JComponent, self).setOpaque(_boolean.valueOf(arg0))

    @overload
    def contains(self, arg0: int, arg1: int) -> bool:
        """public boolean javax.swing.JComponent.contains(int,int)"""
        return bool._wrap(super(_JComponent, self).contains(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def setCursor(self, arg0: 'Cursor'):
        """public void java.awt.Component.setCursor(java.awt.Cursor)"""
        super(_Component, self).setCursor(arg0)

    @override
    @overload
    def validate(self):
        """public void java.awt.Container.validate()"""
        super(Container, self).validate()

    @override
    @overload
    def getMaximumSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getMaximumSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getMaximumSize())

    @override
    @overload
    def getBackground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getBackground()"""
        return 'Color'._wrap(super(Component, self).getBackground())

    @overload
    def createImage(self, arg0: 'ImageProducer') -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(java.awt.image.ImageProducer)"""
        return 'Image'._wrap(super(_Component, self).createImage(arg0))

    @override
    @overload
    def setVerifyInputWhenFocusTarget(self, arg0: bool):
        """public void javax.swing.JComponent.setVerifyInputWhenFocusTarget(boolean)"""
        super(_JComponent, self).setVerifyInputWhenFocusTarget(_boolean.valueOf(arg0))

    @override
    @overload
    def removePropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0, arg1)

    @override
    @overload
    def countComponents(self) -> int:
        """public int java.awt.Container.countComponents()"""
        return int._wrap(super(Container, self).countComponents()) 
 
 
# CLASS: com.badlogic.gdx.tools.flame.DrawPanel
import javax.accessibility.AccessibleContext as AccessibleContext
import javax.swing.JToolTip as JToolTip
import java.awt.event.HierarchyBoundsListener as HierarchyBoundsListener
import java.awt.event.ActionListener as _ActionListener
_ActionListener = _ActionListener
import java.awt.ComponentOrientation as _ComponentOrientation
_ComponentOrientation = _ComponentOrientation
import java.awt.image.ImageProducer as ImageProducer
import java.awt.GraphicsConfiguration as GraphicsConfiguration
import java.awt.Graphics as _Graphics
_Graphics = _Graphics
import javax.swing.JToolTip as _JToolTip
_JToolTip = _JToolTip
import java.awt.Container as _Container
_Container = _Container
import java.awt.MenuComponent as MenuComponent
import java.awt.im.InputMethodRequests as _InputMethodRequests
_InputMethodRequests = _InputMethodRequests
import java.awt.FocusTraversalPolicy as _FocusTraversalPolicy
_FocusTraversalPolicy = _FocusTraversalPolicy
import java.lang.Byte as _byte
import java.awt.Dimension as Dimension
import java.awt.Font as _Font
_Font = _Font
import javax.swing.plaf.PanelUI as _PanelUI
_PanelUI = _PanelUI
import java.awt.event.ContainerListener as ContainerListener
import javax.swing.event.AncestorListener as AncestorListener
import java.awt.AWTEvent as AWTEvent
import javax.swing.JPanel as JPanel
import java.awt.image.ColorModel as _ColorModel
_ColorModel = _ColorModel
import java.lang.Object as _object
import java.awt.ComponentOrientation as ComponentOrientation
import java.awt.im.InputContext as _InputContext
_InputContext = _InputContext
from builtins import float
import java.awt.event.HierarchyListener as HierarchyListener
import java.awt.event.InputMethodListener as InputMethodListener
from typing import List
import java.awt.event.MouseWheelListener as _MouseWheelListener
_MouseWheelListener = _MouseWheelListener
import java.awt.event.KeyListener as KeyListener
import java.awt.Component as Component
from builtins import int
import java.awt.LayoutManager as LayoutManager
import java.awt.FontMetrics as _FontMetrics
_FontMetrics = _FontMetrics
import java.awt.Container as Container
from builtins import type
import java.awt.image.VolatileImage as _VolatileImage
_VolatileImage = _VolatileImage
import java.awt.Shape as Shape
import com.badlogic.gdx.tools.flame.EditorPanel as _EditorPanel
_EditorPanel = _EditorPanel
import java.awt.Rectangle as Rectangle
import java.awt.event.ContainerListener as _ContainerListener
_ContainerListener = _ContainerListener
import java.awt.event.HierarchyListener as _HierarchyListener
_HierarchyListener = _HierarchyListener
import java.lang.String as _string
import javax.swing.InputVerifier as _InputVerifier
_InputVerifier = _InputVerifier
import java.awt.Insets as _Insets
_Insets = _Insets
import javax.swing.border.Border as _Border
_Border = _Border
import java.awt.event.ComponentListener as _ComponentListener
_ComponentListener = _ComponentListener
import javax.swing.ActionMap as ActionMap
import java.beans.VetoableChangeListener as VetoableChangeListener
import java.awt.event.ComponentListener as ComponentListener
import javax.swing.KeyStroke as KeyStroke
import java.beans.VetoableChangeListener as _VetoableChangeListener
_VetoableChangeListener = _VetoableChangeListener
from builtins import object
import java.awt.event.KeyListener as _KeyListener
_KeyListener = _KeyListener
import java.awt.Component.BaselineResizeBehavior as BaselineResizeBehavior
import java.awt.Component as _Component_BaselineResizeBehavior
_BaselineResizeBehavior = _Component_BaselineResizeBehavior.BaselineResizeBehavior
import java.awt.Cursor as _Cursor
_Cursor = _Cursor
import java.awt.im.InputMethodRequests as InputMethodRequests
import java.lang.Long as _long
import javax.swing.JPanel as _JPanel
_JPanel = _JPanel
import java.awt.event.FocusListener as _FocusListener
_FocusListener = _FocusListener
import java.lang.Character as _char
import javax.swing.TransferHandler as TransferHandler
import java.awt.event.FocusEvent.Cause as Cause
import javax.swing.JComponent as JComponent
import javax.accessibility.AccessibleContext as _AccessibleContext
_AccessibleContext = _AccessibleContext
import java.awt.event.MouseWheelListener as MouseWheelListener
import java.util.Set as _Set
_Set = _Set
import java.awt.image.ColorModel as ColorModel
import java.lang.Boolean as _boolean
import java.awt.event.MouseMotionListener as MouseMotionListener
import java.util.EventListener as EventListener
import java.awt.Insets as Insets
import javax.swing.KeyStroke as _KeyStroke
_KeyStroke = _KeyStroke
import java.awt.GraphicsConfiguration as _GraphicsConfiguration
_GraphicsConfiguration = _GraphicsConfiguration
import java.awt.dnd.DropTarget as _DropTarget
_DropTarget = _DropTarget
from builtins import bool
import java.beans.PropertyChangeListener as _PropertyChangeListener
_PropertyChangeListener = _PropertyChangeListener
import java.awt.LayoutManager as _LayoutManager
_LayoutManager = _LayoutManager
import java.awt.PopupMenu as PopupMenu
import java.util.EventListener as _EventListener
_EventListener = _EventListener
import java.awt.im.InputContext as InputContext
import java.awt.Component as _Component
_Component = _Component
import java.awt.Font as Font
import java.awt.image.VolatileImage as VolatileImage
import java.awt.dnd.DropTarget as DropTarget
import java.lang.String as _String
_String = _String
import java.lang.Float as _float
import java.awt.Cursor as Cursor
import java.awt.event.MouseListener as _MouseListener
_MouseListener = _MouseListener
import java.awt.Toolkit as _Toolkit
_Toolkit = _Toolkit
import java.io.PrintStream as PrintStream
import javax.swing.JRootPane as _JRootPane
_JRootPane = _JRootPane
import java.awt.Dimension as _Dimension
_Dimension = _Dimension
import java.awt.event.ActionListener as ActionListener
import java.awt.event.MouseEvent as MouseEvent
import java.awt.Color as _Color
_Color = _Color
import javax.swing.JPopupMenu as _JPopupMenu
_JPopupMenu = _JPopupMenu
import javax.swing.InputMap as _InputMap
_InputMap = _InputMap
import java.awt.event.MouseListener as MouseListener
import java.lang.Class as _Class
_Class = _Class
import java.util.Locale as Locale
import java.lang.Double as _double
import javax.swing.plaf.PanelUI as PanelUI
import java.awt.Point as _Point
_Point = _Point
import java.lang.Object as _Object
_Object = _Object
import java.beans.PropertyChangeListener as PropertyChangeListener
import javax.swing.border.Border as Border
import javax.swing.JComponent as _JComponent
_JComponent = _JComponent
import javax.swing.InputVerifier as InputVerifier
import java.io.PrintWriter as PrintWriter
import java.awt.Point as Point
import javax.swing.event.AncestorListener as _AncestorListener
_AncestorListener = _AncestorListener
import java.lang.Short as _short
import java.awt.Toolkit as Toolkit
import java.awt.event.HierarchyBoundsListener as _HierarchyBoundsListener
_HierarchyBoundsListener = _HierarchyBoundsListener
import com.badlogic.gdx.tools.flame.DrawPanel as _DrawPanel
_DrawPanel = _DrawPanel
import javax.swing.TransferHandler as _TransferHandler
_TransferHandler = _TransferHandler
import javax.swing.InputMap as InputMap
import java.awt.Rectangle as _Rectangle
_Rectangle = _Rectangle
import javax.swing.JRootPane as JRootPane
import java.awt.Event as Event
import java.awt.event.FocusListener as FocusListener
import java.awt.image.ImageObserver as ImageObserver
from builtins import str
from pyquantum_helper import override
import javax.swing.ActionMap as _ActionMap
_ActionMap = _ActionMap
import java.awt.FocusTraversalPolicy as FocusTraversalPolicy
import java.awt.event.MouseMotionListener as _MouseMotionListener
_MouseMotionListener = _MouseMotionListener
import java.awt.event.InputMethodListener as _InputMethodListener
_InputMethodListener = _InputMethodListener
import javax.swing.JPopupMenu as JPopupMenu
import java.util.Set as Set
import java.lang.Integer as _int
import java.awt.Image as _Image
_Image = _Image
import java.awt.FontMetrics as FontMetrics
import java.awt.Color as Color
import java.awt.Image as Image
import java.awt.Graphics as Graphics
import java.awt.ImageCapabilities as ImageCapabilities
import java.util.Locale as _Locale
_Locale = _Locale
 
class DrawPanel():
    """com.badlogic.gdx.tools.flame.DrawPanel"""
 
    @staticmethod
    def _wrap(java_value: _DrawPanel) -> 'DrawPanel':
        return DrawPanel(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _DrawPanel):
        """
        Dynamic initializer for DrawPanel.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_DrawPanel__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_DrawPanel__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def removeVetoableChangeListener(self, arg0: 'VetoableChangeListener'):
        """public synchronized void javax.swing.JComponent.removeVetoableChangeListener(java.beans.VetoableChangeListener)"""
        super(_JComponent, self).removeVetoableChangeListener(arg0)

    @override
    @overload
    def getComponents(self) -> List['Component']:
        """public java.awt.Component[] java.awt.Container.getComponents()"""
        return List['Component']._wrap(super(Container, self).getComponents())

    @override
    @overload
    def setDebugGraphicsOptions(self, arg0: int):
        """public void javax.swing.JComponent.setDebugGraphicsOptions(int)"""
        super(_JComponent, self).setDebugGraphicsOptions(_int.valueOf(arg0))

    @override
    @overload
    def isValid(self) -> bool:
        """public boolean java.awt.Component.isValid()"""
        return bool._wrap(super(Component, self).isValid())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def getDefaultLocale() -> 'Locale':
        """public static java.util.Locale javax.swing.JComponent.getDefaultLocale()"""
        return Locale._wrap(_JComponent.getDefaultLocale())

    @override
    @overload
    def getInputVerifier(self) -> 'InputVerifier':
        """public javax.swing.InputVerifier javax.swing.JComponent.getInputVerifier()"""
        return 'InputVerifier'._wrap(super(JComponent, self).getInputVerifier())

    @override
    @overload
    def list(self, arg0: 'PrintStream', arg1: int):
        """public void java.awt.Container.list(java.io.PrintStream,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @override
    @overload
    def setUI(self, arg0: 'PanelUI'):
        """public void javax.swing.JPanel.setUI(javax.swing.plaf.PanelUI)"""
        super(_JPanel, self).setUI(arg0)

    @override
    @overload
    def getFocusTraversalPolicy(self) -> 'FocusTraversalPolicy':
        """public java.awt.FocusTraversalPolicy java.awt.Container.getFocusTraversalPolicy()"""
        return 'FocusTraversalPolicy'._wrap(super(Container, self).getFocusTraversalPolicy())

    @override
    @overload
    def getParent(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getParent()"""
        return 'Container'._wrap(super(Component, self).getParent())

    @override
    @overload
    def paintImmediately(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.paintImmediately(java.awt.Rectangle)"""
        super(_JComponent, self).paintImmediately(arg0)

    @staticmethod
    @overload
    def setDefaultLocale(arg0: 'Locale'):
        """public static void javax.swing.JComponent.setDefaultLocale(java.util.Locale)"""
        _JComponent.setDefaultLocale(arg0)

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,float,float)"""
        super(_Component, self).firePropertyChange(arg0, _float.valueOf(arg1), _float.valueOf(arg2))

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object)"""
        super(_Container, self).add(arg0, arg1)

    @override
    @overload
    def getLocale(self) -> 'Locale':
        """public java.util.Locale java.awt.Component.getLocale()"""
        return 'Locale'._wrap(super(Component, self).getLocale())

    @override
    @overload
    def setInheritsPopupMenu(self, arg0: bool):
        """public void javax.swing.JComponent.setInheritsPopupMenu(boolean)"""
        super(_JComponent, self).setInheritsPopupMenu(_boolean.valueOf(arg0))

    @override
    @overload
    def getHierarchyListeners(self) -> List['HierarchyListener']:
        """public synchronized java.awt.event.HierarchyListener[] java.awt.Component.getHierarchyListeners()"""
        return List['HierarchyListener']._wrap(super(Component, self).getHierarchyListeners())

    @override
    @overload
    def nextFocus(self):
        """public void java.awt.Component.nextFocus()"""
        super(Component, self).nextFocus()

    @override
    @overload
    def isPaintingTile(self) -> bool:
        """public boolean javax.swing.JComponent.isPaintingTile()"""
        return bool._wrap(super(JComponent, self).isPaintingTile())

    @override
    @overload
    def getContentPanel(self) -> 'JPanel':
        """public javax.swing.JPanel com.badlogic.gdx.tools.flame.EditorPanel.getContentPanel()"""
        return 'JPanel'._wrap(super(EditorPanel, self).getContentPanel())

    @override
    @overload
    def isDisplayable(self) -> bool:
        """public boolean java.awt.Component.isDisplayable()"""
        return bool._wrap(super(Component, self).isDisplayable())

    @override
    @overload
    def getBounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.getBounds()"""
        return 'Rectangle'._wrap(super(Component, self).getBounds())

    @override
    @overload
    def removeMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.removeMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).removeMouseMotionListener(arg0)

    @override
    @overload
    def isShowing(self) -> bool:
        """public boolean java.awt.Component.isShowing()"""
        return bool._wrap(super(Component, self).isShowing())

    @override
    @overload
    def getDropTarget(self) -> 'DropTarget':
        """public synchronized java.awt.dnd.DropTarget java.awt.Component.getDropTarget()"""
        return 'DropTarget'._wrap(super(Component, self).getDropTarget())

    @override
    @overload
    def isFontSet(self) -> bool:
        """public boolean java.awt.Component.isFontSet()"""
        return bool._wrap(super(Component, self).isFontSet())

    @overload
    def mouseUp(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseUp(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseUp(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def setIgnoreRepaint(self, arg0: bool):
        """public void java.awt.Component.setIgnoreRepaint(boolean)"""
        super(_Component, self).setIgnoreRepaint(_boolean.valueOf(arg0))

    @override
    @overload
    def getPropertyChangeListeners(self) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners()"""
        return List['PropertyChangeListener']._wrap(super(Component, self).getPropertyChangeListeners())

    @override
    @overload
    def isBackgroundSet(self) -> bool:
        """public boolean java.awt.Component.isBackgroundSet()"""
        return bool._wrap(super(Component, self).isBackgroundSet())

    @override
    @overload
    def getLocation(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocation()"""
        return 'Point'._wrap(super(Component, self).getLocation())

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int._wrap(super(object, self).hashCode())

    @override
    @overload
    def location(self) -> 'Point':
        """public java.awt.Point java.awt.Component.location()"""
        return 'Point'._wrap(super(Component, self).location())

    @override
    @overload
    def getComponentOrientation(self) -> 'ComponentOrientation':
        """public java.awt.ComponentOrientation java.awt.Component.getComponentOrientation()"""
        return 'ComponentOrientation'._wrap(super(Component, self).getComponentOrientation())

    @override
    @overload
    def addHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.addHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).addHierarchyListener(arg0)

    @override
    @overload
    def getInheritsPopupMenu(self) -> bool:
        """public boolean javax.swing.JComponent.getInheritsPopupMenu()"""
        return bool._wrap(super(JComponent, self).getInheritsPopupMenu())

    @override
    @overload
    def setComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Component.setComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Component, self).setComponentOrientation(arg0)

    @override
    @overload
    def getFocusCycleRootAncestor(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getFocusCycleRootAncestor()"""
        return 'Container'._wrap(super(Component, self).getFocusCycleRootAncestor())

    @override
    @overload
    def show(self, arg0: bool):
        """public void java.awt.Component.show(boolean)"""
        super(_Component, self).show(_boolean.valueOf(arg0))

    @staticmethod
    @overload
    def addContent(arg0: 'JPanel', arg1: int, arg2: int, arg3: 'JComponent', arg4: bool, arg5: int, arg6: int, arg7: float, arg8: float):
        """public static void com.badlogic.gdx.tools.flame.EditorPanel.addContent(javax.swing.JPanel,int,int,javax.swing.JComponent,boolean,int,int,float,float)"""
        _EditorPanel.addContent(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3, _boolean.valueOf(arg4), _int.valueOf(arg5), _int.valueOf(arg6), _float.valueOf(arg7), _float.valueOf(arg8))

    @override
    @overload
    def grabFocus(self):
        """public void javax.swing.JComponent.grabFocus()"""
        super(JComponent, self).grabFocus()

    @overload
    def locate(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.locate(int,int)"""
        return 'Component'._wrap(super(_Container, self).locate(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def isPaintingForPrint(self) -> bool:
        """public final boolean javax.swing.JComponent.isPaintingForPrint()"""
        return bool._wrap(super(JComponent, self).isPaintingForPrint())

    @overload
    def keyDown(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyDown(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyDown(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,int,int)"""
        super(_JComponent, self).firePropertyChange(arg0, _int.valueOf(arg1), _int.valueOf(arg2))

    @override
    @overload
    def getLayout(self) -> 'LayoutManager':
        """public java.awt.LayoutManager java.awt.Container.getLayout()"""
        return 'LayoutManager'._wrap(super(Container, self).getLayout())

    @override
    @overload
    def preferredSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.preferredSize()"""
        return 'Dimension'._wrap(super(Container, self).preferredSize())

    @override
    @overload
    def addNotify(self):
        """public void javax.swing.JComponent.addNotify()"""
        super(JComponent, self).addNotify()

    @override
    @overload
    def setSize(self, arg0: int, arg1: int):
        """public void java.awt.Component.setSize(int,int)"""
        super(_Component, self).setSize(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.repaint(int,int,int,int)"""
        super(_Component, self).repaint(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @overload
    def requestFocusInWindow(self, arg0: 'Cause') -> bool:
        """public boolean java.awt.Component.requestFocusInWindow(java.awt.event.FocusEvent$Cause)"""
        return bool._wrap(super(_Component, self).requestFocusInWindow(arg0))

    @override
    @overload
    def remove(self, arg0: int):
        """public void java.awt.Container.remove(int)"""
        super(_Container, self).remove(_int.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,long,long)"""
        super(_Component, self).firePropertyChange(arg0, _long.valueOf(arg1), _long.valueOf(arg2))

    @override
    @overload
    def update(self, arg0: 'FlameMain'):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.update(com.badlogic.gdx.tools.flame.FlameMain)"""
        super(_EditorPanel, self).update(arg0)

    @override
    @overload
    def setFocusCycleRoot(self, arg0: bool):
        """public void java.awt.Container.setFocusCycleRoot(boolean)"""
        super(_Container, self).setFocusCycleRoot(_boolean.valueOf(arg0))

    @overload
    def keyUp(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyUp(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyUp(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def setBackground(self, arg0: 'Color'):
        """public void javax.swing.JComponent.setBackground(java.awt.Color)"""
        super(_JComponent, self).setBackground(arg0)

    @override
    @overload
    def doLayout(self):
        """public void java.awt.Container.doLayout()"""
        super(Container, self).doLayout()

    @override
    @overload
    def enable(self):
        """public void javax.swing.JComponent.enable()"""
        super(JComponent, self).enable()

    @override
    @overload
    def getInsets(self) -> 'Insets':
        """public java.awt.Insets javax.swing.JComponent.getInsets()"""
        return 'Insets'._wrap(super(JComponent, self).getInsets())

    @override
    @overload
    def setNextFocusableComponent(self, arg0: 'Component'):
        """public void javax.swing.JComponent.setNextFocusableComponent(java.awt.Component)"""
        super(_JComponent, self).setNextFocusableComponent(arg0)

    @override
    @overload
    def getAlignmentY(self) -> float:
        """public float javax.swing.JComponent.getAlignmentY()"""
        return float._wrap(super(JComponent, self).getAlignmentY())

    @overload
    def checkImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @override
    @overload
    def getFocusTraversalKeysEnabled(self) -> bool:
        """public boolean java.awt.Component.getFocusTraversalKeysEnabled()"""
        return bool._wrap(super(Component, self).getFocusTraversalKeysEnabled())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getRootPane(self) -> 'JRootPane':
        """public javax.swing.JRootPane javax.swing.JComponent.getRootPane()"""
        return 'JRootPane'._wrap(super(JComponent, self).getRootPane())

    @override
    @overload
    def invalidate(self):
        """public void java.awt.Container.invalidate()"""
        super(Container, self).invalidate()

    @override
    @overload
    def resetKeyboardActions(self):
        """public void javax.swing.JComponent.resetKeyboardActions()"""
        super(JComponent, self).resetKeyboardActions()

    @overload
    def getComponent(self, arg0: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponent(int)"""
        return 'Component'._wrap(super(_Container, self).getComponent(_int.valueOf(arg0)))

    @override
    @overload
    def setName(self, arg0: str):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setName(java.lang.String)"""
        super(_EditorPanel, self).setName(arg0)

    @override
    @overload
    def addPropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Container.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Container, self).addPropertyChangeListener(arg0, arg1)

    @override
    @overload
    def setInputMap(self, arg0: int, arg1: 'InputMap'):
        """public final void javax.swing.JComponent.setInputMap(int,javax.swing.InputMap)"""
        super(_JComponent, self).setInputMap(_int.valueOf(arg0), arg1)

    @override
    @overload
    def removePropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0)

    @override
    @overload
    def applyComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Container.applyComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Container, self).applyComponentOrientation(arg0)

    @override
    @overload
    def setBorder(self, arg0: 'Border'):
        """public void javax.swing.JComponent.setBorder(javax.swing.border.Border)"""
        super(_JComponent, self).setBorder(arg0)

    @override
    @overload
    def remove(self, arg0: 'MenuComponent'):
        """public void java.awt.Component.remove(java.awt.MenuComponent)"""
        super(_Component, self).remove(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintStream'):
        """public void java.awt.Component.list(java.io.PrintStream)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def removeMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.removeMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).removeMouseListener(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintWriter'):
        """public void java.awt.Component.list(java.io.PrintWriter)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def getKeyListeners(self) -> List['KeyListener']:
        """public synchronized java.awt.event.KeyListener[] java.awt.Component.getKeyListeners()"""
        return List['KeyListener']._wrap(super(Component, self).getKeyListeners())

    @override
    @overload
    def getInputContext(self) -> 'InputContext':
        """public java.awt.im.InputContext java.awt.Component.getInputContext()"""
        return 'InputContext'._wrap(super(Component, self).getInputContext())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,double,double)"""
        super(_Component, self).firePropertyChange(arg0, _double.valueOf(arg1), _double.valueOf(arg2))

    @override
    @overload
    def removeAncestorListener(self, arg0: 'AncestorListener'):
        """public void javax.swing.JComponent.removeAncestorListener(javax.swing.event.AncestorListener)"""
        super(_JComponent, self).removeAncestorListener(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintWriter', arg1: int):
        """public void java.awt.Container.list(java.io.PrintWriter,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @overload
    def checkImage(self, arg0: 'Image', arg1: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, arg1))

    @override
    @overload
    def removeFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.removeFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).removeFocusListener(arg0)

    @overload
    def mouseDown(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDown(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDown(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def setIsAlwayShown(self, arg0: bool):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setIsAlwayShown(boolean)"""
        super(_EditorPanel, self).setIsAlwayShown(_boolean.valueOf(arg0))

    @overload
    def getConditionForKeyStroke(self, arg0: 'KeyStroke') -> int:
        """public int javax.swing.JComponent.getConditionForKeyStroke(javax.swing.KeyStroke)"""
        return int._wrap(super(_JComponent, self).getConditionForKeyStroke(arg0))

    @override
    @overload
    def getTreeLock(self) -> object:
        """public final java.lang.Object java.awt.Component.getTreeLock()"""
        return object._wrap(super(Component, self).getTreeLock())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @override
    @overload
    def addVetoableChangeListener(self, arg0: 'VetoableChangeListener'):
        """public synchronized void javax.swing.JComponent.addVetoableChangeListener(java.beans.VetoableChangeListener)"""
        super(_JComponent, self).addVetoableChangeListener(arg0)

    @overload
    def contains(self, arg0: 'Point') -> bool:
        """public boolean java.awt.Component.contains(java.awt.Point)"""
        return bool._wrap(super(_Component, self).contains(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,short,short)"""
        super(_Component, self).firePropertyChange(arg0, _short.valueOf(arg1), _short.valueOf(arg2))

    @override
    @overload
    def dispatchEvent(self, arg0: 'AWTEvent'):
        """public final void java.awt.Component.dispatchEvent(java.awt.AWTEvent)"""
        super(_Component, self).dispatchEvent(arg0)

    @override
    @overload
    def removeContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.removeContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).removeContainerListener(arg0)

    @override
    @overload
    def getGraphicsConfiguration(self) -> 'GraphicsConfiguration':
        """public java.awt.GraphicsConfiguration java.awt.Component.getGraphicsConfiguration()"""
        return 'GraphicsConfiguration'._wrap(super(Component, self).getGraphicsConfiguration())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: bool, arg2: bool):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,boolean,boolean)"""
        super(_JComponent, self).firePropertyChange(arg0, _boolean.valueOf(arg1), _boolean.valueOf(arg2))

    @override
    @overload
    def registerKeyboardAction(self, arg0: 'ActionListener', arg1: str, arg2: 'KeyStroke', arg3: int):
        """public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,java.lang.String,javax.swing.KeyStroke,int)"""
        super(_JComponent, self).registerKeyboardAction(arg0, arg1, arg2, _int.valueOf(arg3))

    @overload
    def findComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(arg0))

    @override
    @overload
    def resize(self, arg0: int, arg1: int):
        """public void java.awt.Component.resize(int,int)"""
        super(_Component, self).resize(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getHeight(self) -> int:
        """public int javax.swing.JComponent.getHeight()"""
        return int._wrap(super(JComponent, self).getHeight())

    @override
    @overload
    def getTransferHandler(self) -> 'TransferHandler':
        """public javax.swing.TransferHandler javax.swing.JComponent.getTransferHandler()"""
        return 'TransferHandler'._wrap(super(JComponent, self).getTransferHandler())

    @overload
    def imageUpdate(self, arg0: 'Image', arg1: int, arg2: int, arg3: int, arg4: int, arg5: int) -> bool:
        """public boolean java.awt.Component.imageUpdate(java.awt.Image,int,int,int,int,int)"""
        return bool._wrap(super(_Component, self).imageUpdate(arg0, _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4), _int.valueOf(arg5)))

    @override
    @overload
    def getWidth(self) -> int:
        """public int javax.swing.JComponent.getWidth()"""
        return int._wrap(super(JComponent, self).getWidth())

    @override
    @overload
    def transferFocusBackward(self):
        """public void java.awt.Component.transferFocusBackward()"""
        super(Component, self).transferFocusBackward()

    @overload
    def getPropertyChangeListeners(self, arg0: str) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners(java.lang.String)"""
        return List['PropertyChangeListener']._wrap(super(_Component, self).getPropertyChangeListeners(arg0))

    @override
    @overload
    def getName(self) -> str:
        """public java.lang.String com.badlogic.gdx.tools.flame.EditorPanel.getName()"""
        return str._wrap(super(EditorPanel, self).getName())

    @staticmethod
    @overload
    def isLightweightComponent(arg0: 'Component') -> bool:
        """public static boolean javax.swing.JComponent.isLightweightComponent(java.awt.Component)"""
        return bool._wrap(_JComponent.isLightweightComponent(arg0))

    @override
    @overload
    def getBorder(self) -> 'Border':
        """public javax.swing.border.Border javax.swing.JComponent.getBorder()"""
        return 'Border'._wrap(super(JComponent, self).getBorder())

    @override
    @overload
    def printAll(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.printAll(java.awt.Graphics)"""
        super(_JComponent, self).printAll(arg0)

    @override
    @overload
    def addComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.addComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).addComponentListener(arg0)

    @override
    @overload
    def getBaselineResizeBehavior(self) -> 'BaselineResizeBehavior.Component$BaselineResizeBehavior':
        """public java.awt.Component$BaselineResizeBehavior javax.swing.JComponent.getBaselineResizeBehavior()"""
        return 'BaselineResizeBehavior.Component$BaselineResizeBehavior'._wrap(super(JComponent, self).getBaselineResizeBehavior())

    @override
    @overload
    def print(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.print(java.awt.Graphics)"""
        super(_JComponent, self).print(arg0)

    @override
    @overload
    def setInputVerifier(self, arg0: 'InputVerifier'):
        """public void javax.swing.JComponent.setInputVerifier(javax.swing.InputVerifier)"""
        super(_JComponent, self).setInputVerifier(arg0)

    @override
    @overload
    def addAncestorListener(self, arg0: 'AncestorListener'):
        """public void javax.swing.JComponent.addAncestorListener(javax.swing.event.AncestorListener)"""
        super(_JComponent, self).addAncestorListener(arg0)

    @override
    @overload
    def getFont(self) -> 'Font':
        """public java.awt.Font java.awt.Component.getFont()"""
        return 'Font'._wrap(super(Component, self).getFont())

    @override
    @overload
    def setFont(self, arg0: 'Font'):
        """public void javax.swing.JComponent.setFont(java.awt.Font)"""
        super(_JComponent, self).setFont(arg0)

    @override
    @overload
    def isOptimizedDrawingEnabled(self) -> bool:
        """public boolean javax.swing.JComponent.isOptimizedDrawingEnabled()"""
        return bool._wrap(super(JComponent, self).isOptimizedDrawingEnabled())

    @override
    @overload
    def isValidateRoot(self) -> bool:
        """public boolean javax.swing.JComponent.isValidateRoot()"""
        return bool._wrap(super(JComponent, self).isValidateRoot())

    @overload
    def prepareImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @override
    @overload
    def setHasAdvanced(self, arg0: bool):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setHasAdvanced(boolean)"""
        super(_EditorPanel, self).setHasAdvanced(_boolean.valueOf(arg0))

    @override
    @overload
    def setForeground(self, arg0: 'Color'):
        """public void javax.swing.JComponent.setForeground(java.awt.Color)"""
        super(_JComponent, self).setForeground(arg0)

    @overload
    def mouseDrag(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDrag(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDrag(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def isOpaque(self) -> bool:
        """public boolean javax.swing.JComponent.isOpaque()"""
        return bool._wrap(super(JComponent, self).isOpaque())

    @overload
    def createVolatileImage(self, arg0: int, arg1: int, arg2: 'ImageCapabilities') -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int,java.awt.ImageCapabilities) throws java.awt.AWTException"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1), arg2))

    @override
    @overload
    def bounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.bounds()"""
        return 'Rectangle'._wrap(super(Component, self).bounds())

    @override
    @overload
    def update(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.update(java.awt.Graphics)"""
        super(_JComponent, self).update(arg0)

    @override
    @overload
    def add(self, arg0: 'PopupMenu'):
        """public void java.awt.Component.add(java.awt.PopupMenu)"""
        super(_Component, self).add(arg0)

    @override
    @overload
    def getToolTipText(self) -> str:
        """public java.lang.String javax.swing.JComponent.getToolTipText()"""
        return str._wrap(super(JComponent, self).getToolTipText())

    @override
    @overload
    def isVisible(self) -> bool:
        """public boolean java.awt.Component.isVisible()"""
        return bool._wrap(super(Component, self).isVisible())

    @override
    @overload
    def setDropTarget(self, arg0: 'DropTarget'):
        """public synchronized void java.awt.Component.setDropTarget(java.awt.dnd.DropTarget)"""
        super(_Component, self).setDropTarget(arg0)

    @override
    @overload
    def getLocationOnScreen(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocationOnScreen()"""
        return 'Point'._wrap(super(Component, self).getLocationOnScreen())

    @override
    @overload
    def getY(self) -> int:
        """public int javax.swing.JComponent.getY()"""
        return int._wrap(super(JComponent, self).getY())

    @overload
    def getComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def isMaximumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMaximumSizeSet()"""
        return bool._wrap(super(Component, self).isMaximumSizeSet())

    @override
    @overload
    def setAlignmentY(self, arg0: float):
        """public void javax.swing.JComponent.setAlignmentY(float)"""
        super(_JComponent, self).setAlignmentY(_float.valueOf(arg0))

    @override
    @overload
    def getRegisteredKeyStrokes(self) -> List['KeyStroke']:
        """public javax.swing.KeyStroke[] javax.swing.JComponent.getRegisteredKeyStrokes()"""
        return List['KeyStroke']._wrap(super(JComponent, self).getRegisteredKeyStrokes())

    @override
    @overload
    def isFocusable(self) -> bool:
        """public boolean java.awt.Component.isFocusable()"""
        return bool._wrap(super(Component, self).isFocusable())

    @override
    @overload
    def isFocusTraversalPolicyProvider(self) -> bool:
        """public final boolean java.awt.Container.isFocusTraversalPolicyProvider()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicyProvider())

    @override
    @overload
    def getMouseListeners(self) -> List['MouseListener']:
        """public synchronized java.awt.event.MouseListener[] java.awt.Component.getMouseListeners()"""
        return List['MouseListener']._wrap(super(Component, self).getMouseListeners())

    @override
    @overload
    def setValue(self, arg0: object):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setValue(T)"""
        super(_EditorPanel, self).setValue(arg0)

    @override
    @overload
    def registerKeyboardAction(self, arg0: 'ActionListener', arg1: 'KeyStroke', arg2: int):
        """public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,javax.swing.KeyStroke,int)"""
        super(_JComponent, self).registerKeyboardAction(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def transferFocusUpCycle(self):
        """public void java.awt.Component.transferFocusUpCycle()"""
        super(Component, self).transferFocusUpCycle()

    @override
    @overload
    def removeKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.removeKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).removeKeyListener(arg0)

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: str, arg2: str):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,char,char)"""
        super(_JComponent, self).firePropertyChange(arg0, _char.valueOf(arg1), _char.valueOf(arg2))

    @override
    @overload
    def getMouseMotionListeners(self) -> List['MouseMotionListener']:
        """public synchronized java.awt.event.MouseMotionListener[] java.awt.Component.getMouseMotionListeners()"""
        return List['MouseMotionListener']._wrap(super(Component, self).getMouseMotionListeners())

    @override
    @overload
    def getAutoscrolls(self) -> bool:
        """public boolean javax.swing.JComponent.getAutoscrolls()"""
        return bool._wrap(super(JComponent, self).getAutoscrolls())

    @override
    @overload
    def addContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.addContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).addContainerListener(arg0)

    @override
    @overload
    def isFocusTraversable(self) -> bool:
        """public boolean java.awt.Component.isFocusTraversable()"""
        return bool._wrap(super(Component, self).isFocusTraversable())

    @overload
    def __init__(self, arg0: 'FlameMain', arg1: str, arg2: str):
        """public com.badlogic.gdx.tools.flame.DrawPanel(com.badlogic.gdx.tools.flame.FlameMain,java.lang.String,java.lang.String)"""
        val = _DrawPanel(arg0, arg1, arg2)
        self.__wrapper = val

    @overload
    def mouseExit(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseExit(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseExit(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getBounds(self, arg0: 'Rectangle') -> 'Rectangle':
        """public java.awt.Rectangle javax.swing.JComponent.getBounds(java.awt.Rectangle)"""
        return 'Rectangle'._wrap(super(_JComponent, self).getBounds(arg0))

    @override
    @overload
    def setToolTipText(self, arg0: str):
        """public void javax.swing.JComponent.setToolTipText(java.lang.String)"""
        super(_JComponent, self).setToolTipText(arg0)

    @override
    @overload
    def setAutoscrolls(self, arg0: bool):
        """public void javax.swing.JComponent.setAutoscrolls(boolean)"""
        super(_JComponent, self).setAutoscrolls(_boolean.valueOf(arg0))

    @override
    @overload
    def setComponentPopupMenu(self, arg0: 'JPopupMenu'):
        """public void javax.swing.JComponent.setComponentPopupMenu(javax.swing.JPopupMenu)"""
        super(_JComponent, self).setComponentPopupMenu(arg0)

    @override
    @overload
    def setMixingCutoutShape(self, arg0: 'Shape'):
        """public void java.awt.Component.setMixingCutoutShape(java.awt.Shape)"""
        super(_Component, self).setMixingCutoutShape(arg0)

    @override
    @overload
    def getVisibleRect(self) -> 'Rectangle':
        """public java.awt.Rectangle javax.swing.JComponent.getVisibleRect()"""
        return 'Rectangle'._wrap(super(JComponent, self).getVisibleRect())

    @override
    @overload
    def requestFocus(self, arg0: 'Cause'):
        """public void java.awt.Component.requestFocus(java.awt.event.FocusEvent$Cause)"""
        super(_Component, self).requestFocus(arg0)

    @overload
    def createImage(self, arg0: int, arg1: int) -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(int,int)"""
        return 'Image'._wrap(super(_Component, self).createImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def putClientProperty(self, arg0: object, arg1: object):
        """public final void javax.swing.JComponent.putClientProperty(java.lang.Object,java.lang.Object)"""
        super(_JComponent, self).putClientProperty(arg0, arg1)

    @override
    @overload
    def getVetoableChangeListeners(self) -> List['VetoableChangeListener']:
        """public synchronized java.beans.VetoableChangeListener[] javax.swing.JComponent.getVetoableChangeListeners()"""
        return List['VetoableChangeListener']._wrap(super(JComponent, self).getVetoableChangeListeners())

    @override
    @overload
    def scrollRectToVisible(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.scrollRectToVisible(java.awt.Rectangle)"""
        super(_JComponent, self).scrollRectToVisible(arg0)

    @override
    @overload
    def getTopLevelAncestor(self) -> 'Container':
        """public java.awt.Container javax.swing.JComponent.getTopLevelAncestor()"""
        return 'Container'._wrap(super(JComponent, self).getTopLevelAncestor())

    @override
    @overload
    def isRequestFocusEnabled(self) -> bool:
        """public boolean javax.swing.JComponent.isRequestFocusEnabled()"""
        return bool._wrap(super(JComponent, self).isRequestFocusEnabled())

    @override
    @overload
    def getFocusListeners(self) -> List['FocusListener']:
        """public synchronized java.awt.event.FocusListener[] java.awt.Component.getFocusListeners()"""
        return List['FocusListener']._wrap(super(Component, self).getFocusListeners())

    @override
    @overload
    def setLayout(self, arg0: 'LayoutManager'):
        """public void java.awt.Container.setLayout(java.awt.LayoutManager)"""
        super(_Container, self).setLayout(arg0)

    @overload
    def add(self, arg0: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0))

    @override
    @overload
    def getMouseWheelListeners(self) -> List['MouseWheelListener']:
        """public synchronized java.awt.event.MouseWheelListener[] java.awt.Component.getMouseWheelListeners()"""
        return List['MouseWheelListener']._wrap(super(Component, self).getMouseWheelListeners())

    @override
    @overload
    def reshape(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void javax.swing.JComponent.reshape(int,int,int,int)"""
        super(_JComponent, self).reshape(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def setTransferHandler(self, arg0: 'TransferHandler'):
        """public void javax.swing.JComponent.setTransferHandler(javax.swing.TransferHandler)"""
        super(_JComponent, self).setTransferHandler(arg0)

    @override
    @overload
    def getPreferredSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getPreferredSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getPreferredSize())

    @override
    @overload
    def setLocation(self, arg0: int, arg1: int):
        """public void java.awt.Component.setLocation(int,int)"""
        super(_Component, self).setLocation(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def removeInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.removeInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).removeInputMethodListener(arg0)

    @override
    @overload
    def setFocusable(self, arg0: bool):
        """public void java.awt.Component.setFocusable(boolean)"""
        super(_Component, self).setFocusable(_boolean.valueOf(arg0))

    @override
    @overload
    def paintComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.paintComponents(java.awt.Graphics)"""
        super(_Container, self).paintComponents(arg0)

    @override
    @overload
    def addFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.addFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).addFocusListener(arg0)

    @overload
    def prepareImage(self, arg0: 'Image', arg1: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, arg1))

    @override
    @overload
    def addKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.addKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).addKeyListener(arg0)

    @override
    @overload
    def resize(self, arg0: 'Dimension'):
        """public void java.awt.Component.resize(java.awt.Dimension)"""
        super(_Component, self).resize(arg0)

    @override
    @overload
    def setComponentZOrder(self, arg0: 'Component', arg1: int):
        """public void java.awt.Container.setComponentZOrder(java.awt.Component,int)"""
        super(_Container, self).setComponentZOrder(arg0, _int.valueOf(arg1))

    @override
    @overload
    def list(self):
        """public void java.awt.Component.list()"""
        super(Component, self).list()

    @overload
    def add(self, arg0: str, arg1: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.lang.String,java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, arg1))

    @override
    @overload
    def paintImmediately(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void javax.swing.JComponent.paintImmediately(int,int,int,int)"""
        super(_JComponent, self).paintImmediately(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def getMinimumSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getMinimumSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getMinimumSize())

    @override
    @overload
    def setEnabled(self, arg0: bool):
        """public void javax.swing.JComponent.setEnabled(boolean)"""
        super(_JComponent, self).setEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def hasFocus(self) -> bool:
        """public boolean java.awt.Component.hasFocus()"""
        return bool._wrap(super(Component, self).hasFocus())

    @overload
    def createVolatileImage(self, arg0: int, arg1: int) -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int)"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.removeHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).removeHierarchyListener(arg0)

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.awt.Component.toString()"""
        return str._wrap(super(Component, self).toString())

    @override
    @overload
    def addMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.addMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).addMouseListener(arg0)

    @override
    @overload
    def isFocusOwner(self) -> bool:
        """public boolean java.awt.Component.isFocusOwner()"""
        return bool._wrap(super(Component, self).isFocusOwner())

    @override
    @overload
    def getAccessibleContext(self) -> 'AccessibleContext':
        """public javax.accessibility.AccessibleContext javax.swing.JPanel.getAccessibleContext()"""
        return 'AccessibleContext'._wrap(super(JPanel, self).getAccessibleContext())

    @overload
    def postEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.postEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).postEvent(arg0))

    @overload
    def getLocation(self, arg0: 'Point') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getLocation(java.awt.Point)"""
        return 'Point'._wrap(super(_JComponent, self).getLocation(arg0))

    @overload
    def getBaseline(self, arg0: int, arg1: int) -> int:
        """public int javax.swing.JComponent.getBaseline(int,int)"""
        return int._wrap(super(_JComponent, self).getBaseline(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def findComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeNotify(self):
        """public void javax.swing.JComponent.removeNotify()"""
        super(JComponent, self).removeNotify()

    @override
    @overload
    def getForeground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getForeground()"""
        return 'Color'._wrap(super(Component, self).getForeground())

    @override
    @overload
    def show(self):
        """public void java.awt.Component.show()"""
        super(Component, self).show()

    @override
    @overload
    def isDoubleBuffered(self) -> bool:
        """public boolean javax.swing.JComponent.isDoubleBuffered()"""
        return bool._wrap(super(JComponent, self).isDoubleBuffered())

    @override
    @overload
    def setDescription(self, arg0: str):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setDescription(java.lang.String)"""
        super(_EditorPanel, self).setDescription(arg0)

    @override
    @overload
    def isFocusCycleRoot(self) -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot()"""
        return bool._wrap(super(Container, self).isFocusCycleRoot())

    @override
    @overload
    def addMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.addMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).addMouseWheelListener(arg0)

    @override
    @overload
    def hide(self):
        """public void javax.swing.JComponent.hide()"""
        super(JComponent, self).hide()

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def revalidate(self):
        """public void javax.swing.JComponent.revalidate()"""
        super(JComponent, self).revalidate()

    @override
    @overload
    def getActionMap(self) -> 'ActionMap':
        """public final javax.swing.ActionMap javax.swing.JComponent.getActionMap()"""
        return 'ActionMap'._wrap(super(JComponent, self).getActionMap())

    @override
    @overload
    def requestFocusInWindow(self) -> bool:
        """public boolean javax.swing.JComponent.requestFocusInWindow()"""
        return bool._wrap(super(JComponent, self).requestFocusInWindow())

    @overload
    def action(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.action(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).action(arg0, arg1))

    @override
    @overload
    def isManagingFocus(self) -> bool:
        """public boolean javax.swing.JComponent.isManagingFocus()"""
        return bool._wrap(super(JComponent, self).isManagingFocus())

    @override
    @overload
    def isLightweight(self) -> bool:
        """public boolean java.awt.Component.isLightweight()"""
        return bool._wrap(super(Component, self).isLightweight())

    @override
    @overload
    def setAlignmentX(self, arg0: float):
        """public void javax.swing.JComponent.setAlignmentX(float)"""
        super(_JComponent, self).setAlignmentX(_float.valueOf(arg0))

    @overload
    def getFocusTraversalKeys(self, arg0: int) -> 'Set':
        """public java.util.Set<java.awt.AWTKeyStroke> java.awt.Container.getFocusTraversalKeys(int)"""
        return 'Set'._wrap(super(_Container, self).getFocusTraversalKeys(_int.valueOf(arg0)))

    @override
    @overload
    def setFocusTraversalKeysEnabled(self, arg0: bool):
        """public void java.awt.Component.setFocusTraversalKeysEnabled(boolean)"""
        super(_Component, self).setFocusTraversalKeysEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def remove(self, arg0: 'Component'):
        """public void java.awt.Container.remove(java.awt.Component)"""
        super(_Container, self).remove(arg0)

    @overload
    def getInsets(self, arg0: 'Insets') -> 'Insets':
        """public java.awt.Insets javax.swing.JComponent.getInsets(java.awt.Insets)"""
        return 'Insets'._wrap(super(_JComponent, self).getInsets(arg0))

    @override
    @overload
    def insets(self) -> 'Insets':
        """public java.awt.Insets java.awt.Container.insets()"""
        return 'Insets'._wrap(super(Container, self).insets())

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int):
        """public void javax.swing.JComponent.repaint(long,int,int,int,int)"""
        super(_JComponent, self).repaint(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4))

    @override
    @overload
    def setFocusTraversalPolicy(self, arg0: 'FocusTraversalPolicy'):
        """public void java.awt.Container.setFocusTraversalPolicy(java.awt.FocusTraversalPolicy)"""
        super(_Container, self).setFocusTraversalPolicy(arg0)

    @overload
    def getSize(self, arg0: 'Dimension') -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getSize(java.awt.Dimension)"""
        return 'Dimension'._wrap(super(_JComponent, self).getSize(arg0))

    @override
    @overload
    def enable(self, arg0: bool):
        """public void java.awt.Component.enable(boolean)"""
        super(_Component, self).enable(_boolean.valueOf(arg0))

    @overload
    def getToolTipLocation(self, arg0: 'MouseEvent') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getToolTipLocation(java.awt.event.MouseEvent)"""
        return 'Point'._wrap(super(_JComponent, self).getToolTipLocation(arg0))

    @override
    @overload
    def addPropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Container.addPropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Container, self).addPropertyChangeListener(arg0)

    @overload
    def getComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(arg0))

    @override
    @overload
    def size(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.size()"""
        return 'Dimension'._wrap(super(Component, self).size())

    @override
    @overload
    def getVerifyInputWhenFocusTarget(self) -> bool:
        """public boolean javax.swing.JComponent.getVerifyInputWhenFocusTarget()"""
        return bool._wrap(super(JComponent, self).getVerifyInputWhenFocusTarget())

    @overload
    def mouseMove(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseMove(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseMove(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getActionForKeyStroke(self, arg0: 'KeyStroke') -> 'ActionListener':
        """public java.awt.event.ActionListener javax.swing.JComponent.getActionForKeyStroke(javax.swing.KeyStroke)"""
        return 'ActionListener'._wrap(super(_JComponent, self).getActionForKeyStroke(arg0))

    @overload
    def lostFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.lostFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).lostFocus(arg0, arg1))

    @override
    @overload
    def isMinimumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMinimumSizeSet()"""
        return bool._wrap(super(Component, self).isMinimumSizeSet())

    @override
    @overload
    def isForegroundSet(self) -> bool:
        """public boolean java.awt.Component.isForegroundSet()"""
        return bool._wrap(super(Component, self).isForegroundSet())

    @overload
    def getMousePosition(self, arg0: bool) -> 'Point':
        """public java.awt.Point java.awt.Container.getMousePosition(boolean) throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(_Container, self).getMousePosition(_boolean.valueOf(arg0)))

    @overload
    def getFontMetrics(self, arg0: 'Font') -> 'FontMetrics':
        """public java.awt.FontMetrics javax.swing.JComponent.getFontMetrics(java.awt.Font)"""
        return 'FontMetrics'._wrap(super(_JComponent, self).getFontMetrics(arg0))

    @overload
    def getListeners(self, arg0: 'Class') -> List['EventListener']:
        """public <T extends java.util.EventListener> T[] javax.swing.JComponent.getListeners(java.lang.Class<T>)"""
        return List['EventListener']._wrap(super(_JComponent, self).getListeners(arg0))

    @override
    @overload
    def getHierarchyBoundsListeners(self) -> List['HierarchyBoundsListener']:
        """public synchronized java.awt.event.HierarchyBoundsListener[] java.awt.Component.getHierarchyBoundsListeners()"""
        return List['HierarchyBoundsListener']._wrap(super(Component, self).getHierarchyBoundsListeners())

    @override
    @overload
    def minimumSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.minimumSize()"""
        return 'Dimension'._wrap(super(Container, self).minimumSize())

    @overload
    def handleEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.handleEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).handleEvent(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @override
    @overload
    def getComponentListeners(self) -> List['ComponentListener']:
        """public synchronized java.awt.event.ComponentListener[] java.awt.Component.getComponentListeners()"""
        return List['ComponentListener']._wrap(super(Component, self).getComponentListeners())

    @override
    @overload
    def computeVisibleRect(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.computeVisibleRect(java.awt.Rectangle)"""
        super(_JComponent, self).computeVisibleRect(arg0)

    @override
    @overload
    def deliverEvent(self, arg0: 'Event'):
        """public void java.awt.Container.deliverEvent(java.awt.Event)"""
        super(_Container, self).deliverEvent(arg0)

    @override
    @overload
    def addHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.addHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).addHierarchyBoundsListener(arg0)

    @override
    @overload
    def getAlignmentX(self) -> float:
        """public float javax.swing.JComponent.getAlignmentX()"""
        return float._wrap(super(JComponent, self).getAlignmentX())

    @overload
    def add(self, arg0: 'Component', arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component,int)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def repaint(self):
        """public void java.awt.Component.repaint()"""
        super(Component, self).repaint()

    @overload
    def gotFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.gotFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).gotFocus(arg0, arg1))

    @override
    @overload
    def createToolTip(self) -> 'JToolTip':
        """public javax.swing.JToolTip javax.swing.JComponent.createToolTip()"""
        return 'JToolTip'._wrap(super(JComponent, self).createToolTip())

    @override
    @overload
    def setEmbedded(self):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setEmbedded()"""
        super(EditorPanel, self).setEmbedded()

    @overload
    def getToolTipText(self, arg0: 'MouseEvent') -> str:
        """public java.lang.String javax.swing.JComponent.getToolTipText(java.awt.event.MouseEvent)"""
        return str._wrap(super(_JComponent, self).getToolTipText(arg0))

    @override
    @overload
    def printComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.printComponents(java.awt.Graphics)"""
        super(_Container, self).printComponents(arg0)

    @override
    @overload
    def getColorModel(self) -> 'ColorModel':
        """public java.awt.image.ColorModel java.awt.Component.getColorModel()"""
        return 'ColorModel'._wrap(super(Component, self).getColorModel())

    @override
    @overload
    def setFocusTraversalPolicyProvider(self, arg0: bool):
        """public final void java.awt.Container.setFocusTraversalPolicyProvider(boolean)"""
        super(_Container, self).setFocusTraversalPolicyProvider(_boolean.valueOf(arg0))

    @overload
    def getComponentZOrder(self, arg0: 'Component') -> int:
        """public int java.awt.Container.getComponentZOrder(java.awt.Component)"""
        return int._wrap(super(_Container, self).getComponentZOrder(arg0))

    @override
    @overload
    def getDebugGraphicsOptions(self) -> int:
        """public int javax.swing.JComponent.getDebugGraphicsOptions()"""
        return int._wrap(super(JComponent, self).getDebugGraphicsOptions())

    @overload
    def areFocusTraversalKeysSet(self, arg0: int) -> bool:
        """public boolean java.awt.Container.areFocusTraversalKeysSet(int)"""
        return bool._wrap(super(_Container, self).areFocusTraversalKeysSet(_int.valueOf(arg0)))

    @override
    @overload
    def getSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.getSize()"""
        return 'Dimension'._wrap(super(Component, self).getSize())

    @override
    @overload
    def repaint(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.repaint(java.awt.Rectangle)"""
        super(_JComponent, self).repaint(arg0)

    @overload
    def getClientProperty(self, arg0: object) -> object:
        """public final java.lang.Object javax.swing.JComponent.getClientProperty(java.lang.Object)"""
        return object._wrap(super(_JComponent, self).getClientProperty(arg0))

    @override
    @overload
    def unregisterKeyboardAction(self, arg0: 'KeyStroke'):
        """public void javax.swing.JComponent.unregisterKeyboardAction(javax.swing.KeyStroke)"""
        super(_JComponent, self).unregisterKeyboardAction(arg0)

    @overload
    def requestFocus(self, arg0: bool) -> bool:
        """public boolean javax.swing.JComponent.requestFocus(boolean)"""
        return bool._wrap(super(_JComponent, self).requestFocus(_boolean.valueOf(arg0)))

    @override
    @overload
    def setActionMap(self, arg0: 'ActionMap'):
        """public final void javax.swing.JComponent.setActionMap(javax.swing.ActionMap)"""
        super(_JComponent, self).setActionMap(arg0)

    @override
    @overload
    def getX(self) -> int:
        """public int javax.swing.JComponent.getX()"""
        return int._wrap(super(JComponent, self).getX())

    @overload
    def mouseEnter(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseEnter(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseEnter(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def updateUI(self):
        """public void javax.swing.JPanel.updateUI()"""
        super(JPanel, self).updateUI()

    @override
    @overload
    def getToolkit(self) -> 'Toolkit':
        """public java.awt.Toolkit java.awt.Component.getToolkit()"""
        return 'Toolkit'._wrap(super(Component, self).getToolkit())

    @override
    @overload
    def isCursorSet(self) -> bool:
        """public boolean java.awt.Component.isCursorSet()"""
        return bool._wrap(super(Component, self).isCursorSet())

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object, arg2: int):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object,int)"""
        super(_Container, self).add(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def setPreferredSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setPreferredSize(java.awt.Dimension)"""
        super(_JComponent, self).setPreferredSize(arg0)

    @override
    @overload
    def setBounds(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.setBounds(int,int,int,int)"""
        super(_Component, self).setBounds(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def isFocusTraversalPolicySet(self) -> bool:
        """public boolean java.awt.Container.isFocusTraversalPolicySet()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicySet())

    @override
    @overload
    def requestFocus(self):
        """public void javax.swing.JComponent.requestFocus()"""
        super(JComponent, self).requestFocus()

    @override
    @overload
    def getAncestorListeners(self) -> List['AncestorListener']:
        """public javax.swing.event.AncestorListener[] javax.swing.JComponent.getAncestorListeners()"""
        return List['AncestorListener']._wrap(super(JComponent, self).getAncestorListeners())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool._wrap(super(_object, self).equals(arg0))

    @overload
    def getInputMap(self, arg0: int) -> 'InputMap':
        """public final javax.swing.InputMap javax.swing.JComponent.getInputMap(int)"""
        return 'InputMap'._wrap(super(_JComponent, self).getInputMap(_int.valueOf(arg0)))

    @override
    @overload
    def isEnabled(self) -> bool:
        """public boolean java.awt.Component.isEnabled()"""
        return bool._wrap(super(Component, self).isEnabled())

    @override
    @overload
    def move(self, arg0: int, arg1: int):
        """public void java.awt.Component.move(int,int)"""
        super(_Component, self).move(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def addMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.addMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).addMouseMotionListener(arg0)

    @override
    @overload
    def getIgnoreRepaint(self) -> bool:
        """public boolean java.awt.Component.getIgnoreRepaint()"""
        return bool._wrap(super(Component, self).getIgnoreRepaint())

    @overload
    def isFocusCycleRoot(self, arg0: 'Container') -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot(java.awt.Container)"""
        return bool._wrap(super(_Container, self).isFocusCycleRoot(arg0))

    @override
    @overload
    def getGraphics(self) -> 'Graphics':
        """public java.awt.Graphics javax.swing.JComponent.getGraphics()"""
        return 'Graphics'._wrap(super(JComponent, self).getGraphics())

    @override
    @overload
    def setLocale(self, arg0: 'Locale'):
        """public void java.awt.Component.setLocale(java.util.Locale)"""
        super(_Component, self).setLocale(arg0)

    @override
    @overload
    def paintAll(self, arg0: 'Graphics'):
        """public void java.awt.Component.paintAll(java.awt.Graphics)"""
        super(_Component, self).paintAll(arg0)

    @override
    @overload
    def setDoubleBuffered(self, arg0: bool):
        """public void javax.swing.JComponent.setDoubleBuffered(boolean)"""
        super(_JComponent, self).setDoubleBuffered(_boolean.valueOf(arg0))

    @override
    @overload
    def isPreferredSizeSet(self) -> bool:
        """public boolean java.awt.Component.isPreferredSizeSet()"""
        return bool._wrap(super(Component, self).isPreferredSizeSet())

    @override
    @overload
    def addInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.addInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).addInputMethodListener(arg0)

    @override
    @overload
    def removeMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.removeMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).removeMouseWheelListener(arg0)

    @override
    @overload
    def getInputMap(self) -> 'InputMap':
        """public final javax.swing.InputMap javax.swing.JComponent.getInputMap()"""
        return 'InputMap'._wrap(super(JComponent, self).getInputMap())

    @override
    @overload
    def setVisible(self, arg0: bool):
        """public void javax.swing.JComponent.setVisible(boolean)"""
        super(_JComponent, self).setVisible(_boolean.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,byte,byte)"""
        super(_Component, self).firePropertyChange(arg0, _byte.valueOf(arg1), _byte.valueOf(arg2))

    @override
    @overload
    def getUIClassID(self) -> str:
        """public java.lang.String javax.swing.JPanel.getUIClassID()"""
        return str._wrap(super(JPanel, self).getUIClassID())

    @override
    @overload
    def transferFocusDownCycle(self):
        """public void java.awt.Container.transferFocusDownCycle()"""
        super(Container, self).transferFocusDownCycle()

    @override
    @overload
    def getNextFocusableComponent(self) -> 'Component':
        """public java.awt.Component javax.swing.JComponent.getNextFocusableComponent()"""
        return 'Component'._wrap(super(JComponent, self).getNextFocusableComponent())

    @override
    @overload
    def getUI(self) -> 'PanelUI':
        """public javax.swing.plaf.PanelUI javax.swing.JPanel.getUI()"""
        return 'PanelUI'._wrap(super(JPanel, self).getUI())

    @override
    @overload
    def setBounds(self, arg0: 'Rectangle'):
        """public void java.awt.Component.setBounds(java.awt.Rectangle)"""
        super(_Component, self).setBounds(arg0)

    @override
    @overload
    def repaint(self, arg0: int):
        """public void java.awt.Component.repaint(long)"""
        super(_Component, self).repaint(_long.valueOf(arg0))

    @override
    @overload
    def removeHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.removeHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).removeHierarchyBoundsListener(arg0)

    @override
    @overload
    def getComponentPopupMenu(self) -> 'JPopupMenu':
        """public javax.swing.JPopupMenu javax.swing.JComponent.getComponentPopupMenu()"""
        return 'JPopupMenu'._wrap(super(JComponent, self).getComponentPopupMenu())

    @override
    @overload
    def getMousePosition(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getMousePosition() throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(Component, self).getMousePosition())

    @override
    @overload
    def getComponentCount(self) -> int:
        """public int java.awt.Container.getComponentCount()"""
        return int._wrap(super(Container, self).getComponentCount())

    @override
    @overload
    def getInputMethodRequests(self) -> 'InputMethodRequests':
        """public java.awt.im.InputMethodRequests java.awt.Component.getInputMethodRequests()"""
        return 'InputMethodRequests'._wrap(super(Component, self).getInputMethodRequests())

    @override
    @overload
    def setMaximumSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setMaximumSize(java.awt.Dimension)"""
        super(_JComponent, self).setMaximumSize(arg0)

    @override
    @overload
    def setRequestFocusEnabled(self, arg0: bool):
        """public void javax.swing.JComponent.setRequestFocusEnabled(boolean)"""
        super(_JComponent, self).setRequestFocusEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def setFocusTraversalKeys(self, arg0: int, arg1: 'Set'):
        """public void javax.swing.JComponent.setFocusTraversalKeys(int,java.util.Set<? extends java.awt.AWTKeyStroke>)"""
        super(_JComponent, self).setFocusTraversalKeys(_int.valueOf(arg0), arg1)

    @overload
    def inside(self, arg0: int, arg1: int) -> bool:
        """public boolean java.awt.Component.inside(int,int)"""
        return bool._wrap(super(_Component, self).inside(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def requestDefaultFocus(self) -> bool:
        """public boolean javax.swing.JComponent.requestDefaultFocus()"""
        return bool._wrap(super(JComponent, self).requestDefaultFocus())

    @override
    @overload
    def disable(self):
        """public void javax.swing.JComponent.disable()"""
        super(JComponent, self).disable()

    @override
    @overload
    def showContent(self, arg0: bool):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.showContent(boolean)"""
        super(_EditorPanel, self).showContent(_boolean.valueOf(arg0))

    @override
    @overload
    def enableInputMethods(self, arg0: bool):
        """public void java.awt.Component.enableInputMethods(boolean)"""
        super(_Component, self).enableInputMethods(_boolean.valueOf(arg0))

    @override
    @overload
    def layout(self):
        """public void java.awt.Container.layout()"""
        super(Container, self).layout()

    @override
    @overload
    def getInputMethodListeners(self) -> List['InputMethodListener']:
        """public synchronized java.awt.event.InputMethodListener[] java.awt.Component.getInputMethodListeners()"""
        return List['InputMethodListener']._wrap(super(Component, self).getInputMethodListeners())

    @override
    @overload
    def paint(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.paint(java.awt.Graphics)"""
        super(_JComponent, self).paint(arg0)

    @override
    @overload
    def transferFocus(self):
        """public void java.awt.Component.transferFocus()"""
        super(Component, self).transferFocus()

    @override
    @overload
    def removeComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.removeComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).removeComponentListener(arg0)

    @override
    @overload
    def getCursor(self) -> 'Cursor':
        """public java.awt.Cursor java.awt.Component.getCursor()"""
        return 'Cursor'._wrap(super(Component, self).getCursor())

    @override
    @overload
    def setMinimumSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setMinimumSize(java.awt.Dimension)"""
        super(_JComponent, self).setMinimumSize(arg0)

    @override
    @overload
    def getAdvancedPanel(self) -> 'JPanel':
        """public javax.swing.JPanel com.badlogic.gdx.tools.flame.EditorPanel.getAdvancedPanel()"""
        return 'JPanel'._wrap(super(EditorPanel, self).getAdvancedPanel())

    @override
    @overload
    def getContainerListeners(self) -> List['ContainerListener']:
        """public synchronized java.awt.event.ContainerListener[] java.awt.Container.getContainerListeners()"""
        return List['ContainerListener']._wrap(super(Container, self).getContainerListeners())

    @override
    @overload
    def setLocation(self, arg0: 'Point'):
        """public void java.awt.Component.setLocation(java.awt.Point)"""
        super(_Component, self).setLocation(arg0)

    @override
    @overload
    def setSize(self, arg0: 'Dimension'):
        """public void java.awt.Component.setSize(java.awt.Dimension)"""
        super(_Component, self).setSize(arg0)

    @override
    @overload
    def removeAll(self):
        """public void java.awt.Container.removeAll()"""
        super(Container, self).removeAll()

    @overload
    def getPopupLocation(self, arg0: 'MouseEvent') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getPopupLocation(java.awt.event.MouseEvent)"""
        return 'Point'._wrap(super(_JComponent, self).getPopupLocation(arg0))

    @overload
    def isAncestorOf(self, arg0: 'Component') -> bool:
        """public boolean java.awt.Container.isAncestorOf(java.awt.Component)"""
        return bool._wrap(super(_Container, self).isAncestorOf(arg0))

    @override
    @overload
    def setOpaque(self, arg0: bool):
        """public void javax.swing.JComponent.setOpaque(boolean)"""
        super(_JComponent, self).setOpaque(_boolean.valueOf(arg0))

    @overload
    def contains(self, arg0: int, arg1: int) -> bool:
        """public boolean javax.swing.JComponent.contains(int,int)"""
        return bool._wrap(super(_JComponent, self).contains(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def setCursor(self, arg0: 'Cursor'):
        """public void java.awt.Component.setCursor(java.awt.Cursor)"""
        super(_Component, self).setCursor(arg0)

    @override
    @overload
    def validate(self):
        """public void java.awt.Container.validate()"""
        super(Container, self).validate()

    @override
    @overload
    def getMaximumSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getMaximumSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getMaximumSize())

    @override
    @overload
    def getBackground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getBackground()"""
        return 'Color'._wrap(super(Component, self).getBackground())

    @overload
    def createImage(self, arg0: 'ImageProducer') -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(java.awt.image.ImageProducer)"""
        return 'Image'._wrap(super(_Component, self).createImage(arg0))

    @override
    @overload
    def setVerifyInputWhenFocusTarget(self, arg0: bool):
        """public void javax.swing.JComponent.setVerifyInputWhenFocusTarget(boolean)"""
        super(_JComponent, self).setVerifyInputWhenFocusTarget(_boolean.valueOf(arg0))

    @override
    @overload
    def removePropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0, arg1)

    @override
    @overload
    def countComponents(self) -> int:
        """public int java.awt.Container.countComponents()"""
        return int._wrap(super(Container, self).countComponents()) 
 
 
# CLASS: com.badlogic.gdx.tools.flame.ImagePanel
import javax.accessibility.AccessibleContext as AccessibleContext
import javax.swing.JToolTip as JToolTip
import java.awt.event.HierarchyBoundsListener as HierarchyBoundsListener
import java.awt.event.ActionListener as _ActionListener
_ActionListener = _ActionListener
import java.awt.ComponentOrientation as _ComponentOrientation
_ComponentOrientation = _ComponentOrientation
import java.awt.image.ImageProducer as ImageProducer
import java.awt.GraphicsConfiguration as GraphicsConfiguration
import java.awt.Graphics as _Graphics
_Graphics = _Graphics
import javax.swing.JToolTip as _JToolTip
_JToolTip = _JToolTip
import java.awt.Container as _Container
_Container = _Container
import java.awt.MenuComponent as MenuComponent
import java.awt.im.InputMethodRequests as _InputMethodRequests
_InputMethodRequests = _InputMethodRequests
import java.awt.FocusTraversalPolicy as _FocusTraversalPolicy
_FocusTraversalPolicy = _FocusTraversalPolicy
import java.lang.Byte as _byte
import java.awt.Dimension as Dimension
import java.awt.Font as _Font
_Font = _Font
import javax.swing.plaf.PanelUI as _PanelUI
_PanelUI = _PanelUI
import java.awt.event.ContainerListener as ContainerListener
import javax.swing.event.AncestorListener as AncestorListener
import com.badlogic.gdx.tools.flame.ImagePanel as _ImagePanel
_ImagePanel = _ImagePanel
import java.awt.AWTEvent as AWTEvent
import java.awt.image.ColorModel as _ColorModel
_ColorModel = _ColorModel
import java.lang.Object as _object
import java.awt.ComponentOrientation as ComponentOrientation
import java.awt.im.InputContext as _InputContext
_InputContext = _InputContext
from builtins import float
import java.awt.event.HierarchyListener as HierarchyListener
import java.awt.event.InputMethodListener as InputMethodListener
from typing import List
import java.awt.event.MouseWheelListener as _MouseWheelListener
_MouseWheelListener = _MouseWheelListener
import java.awt.event.KeyListener as KeyListener
import java.awt.Component as Component
from builtins import int
import java.awt.LayoutManager as LayoutManager
import java.awt.FontMetrics as _FontMetrics
_FontMetrics = _FontMetrics
import java.awt.Container as Container
from builtins import type
import java.awt.image.VolatileImage as _VolatileImage
_VolatileImage = _VolatileImage
import java.awt.Shape as Shape
import java.awt.Rectangle as Rectangle
import java.awt.event.ContainerListener as _ContainerListener
_ContainerListener = _ContainerListener
import java.awt.event.HierarchyListener as _HierarchyListener
_HierarchyListener = _HierarchyListener
import java.lang.String as _string
import javax.swing.InputVerifier as _InputVerifier
_InputVerifier = _InputVerifier
import java.awt.Insets as _Insets
_Insets = _Insets
import javax.swing.border.Border as _Border
_Border = _Border
import java.awt.event.ComponentListener as _ComponentListener
_ComponentListener = _ComponentListener
import javax.swing.ActionMap as ActionMap
import java.beans.VetoableChangeListener as VetoableChangeListener
import java.awt.event.ComponentListener as ComponentListener
import javax.swing.KeyStroke as KeyStroke
import java.beans.VetoableChangeListener as _VetoableChangeListener
_VetoableChangeListener = _VetoableChangeListener
from builtins import object
import java.awt.event.KeyListener as _KeyListener
_KeyListener = _KeyListener
import java.awt.Component.BaselineResizeBehavior as BaselineResizeBehavior
import java.awt.Component as _Component_BaselineResizeBehavior
_BaselineResizeBehavior = _Component_BaselineResizeBehavior.BaselineResizeBehavior
import java.awt.Cursor as _Cursor
_Cursor = _Cursor
import java.awt.im.InputMethodRequests as InputMethodRequests
import java.lang.Long as _long
import javax.swing.JPanel as _JPanel
_JPanel = _JPanel
import java.awt.event.FocusListener as _FocusListener
_FocusListener = _FocusListener
import java.lang.Character as _char
import javax.swing.TransferHandler as TransferHandler
import java.awt.event.FocusEvent.Cause as Cause
import javax.accessibility.AccessibleContext as _AccessibleContext
_AccessibleContext = _AccessibleContext
import java.awt.event.MouseWheelListener as MouseWheelListener
import java.util.Set as _Set
_Set = _Set
import java.awt.image.ColorModel as ColorModel
import java.lang.Boolean as _boolean
import java.awt.event.MouseMotionListener as MouseMotionListener
import java.util.EventListener as EventListener
import java.awt.Insets as Insets
import javax.swing.KeyStroke as _KeyStroke
_KeyStroke = _KeyStroke
import java.awt.GraphicsConfiguration as _GraphicsConfiguration
_GraphicsConfiguration = _GraphicsConfiguration
import java.awt.dnd.DropTarget as _DropTarget
_DropTarget = _DropTarget
from builtins import bool
import java.beans.PropertyChangeListener as _PropertyChangeListener
_PropertyChangeListener = _PropertyChangeListener
import java.awt.LayoutManager as _LayoutManager
_LayoutManager = _LayoutManager
import java.awt.PopupMenu as PopupMenu
import java.util.EventListener as _EventListener
_EventListener = _EventListener
import java.awt.im.InputContext as InputContext
import java.awt.Component as _Component
_Component = _Component
import java.awt.Font as Font
import java.awt.image.VolatileImage as VolatileImage
import java.awt.dnd.DropTarget as DropTarget
import java.lang.String as _String
_String = _String
import java.lang.Float as _float
import java.awt.Cursor as Cursor
import java.awt.event.MouseListener as _MouseListener
_MouseListener = _MouseListener
import java.awt.Toolkit as _Toolkit
_Toolkit = _Toolkit
import java.io.PrintStream as PrintStream
import javax.swing.JRootPane as _JRootPane
_JRootPane = _JRootPane
import java.awt.Dimension as _Dimension
_Dimension = _Dimension
import java.awt.event.ActionListener as ActionListener
import java.awt.event.MouseEvent as MouseEvent
import java.awt.Color as _Color
_Color = _Color
import javax.swing.JPopupMenu as _JPopupMenu
_JPopupMenu = _JPopupMenu
import javax.swing.InputMap as _InputMap
_InputMap = _InputMap
import java.awt.event.MouseListener as MouseListener
import java.lang.Class as _Class
_Class = _Class
import java.util.Locale as Locale
import java.lang.Double as _double
import javax.swing.plaf.PanelUI as PanelUI
import java.awt.Point as _Point
_Point = _Point
import java.lang.Object as _Object
_Object = _Object
import java.beans.PropertyChangeListener as PropertyChangeListener
import javax.swing.border.Border as Border
import javax.swing.JComponent as _JComponent
_JComponent = _JComponent
import javax.swing.InputVerifier as InputVerifier
import java.io.PrintWriter as PrintWriter
import java.awt.Point as Point
import javax.swing.event.AncestorListener as _AncestorListener
_AncestorListener = _AncestorListener
import java.lang.Short as _short
import java.awt.Toolkit as Toolkit
import java.awt.event.HierarchyBoundsListener as _HierarchyBoundsListener
_HierarchyBoundsListener = _HierarchyBoundsListener
import javax.swing.TransferHandler as _TransferHandler
_TransferHandler = _TransferHandler
import javax.swing.InputMap as InputMap
import java.awt.Rectangle as _Rectangle
_Rectangle = _Rectangle
import javax.swing.JRootPane as JRootPane
import java.awt.Event as Event
import java.awt.event.FocusListener as FocusListener
import java.awt.image.ImageObserver as ImageObserver
from builtins import str
from pyquantum_helper import override
import javax.swing.ActionMap as _ActionMap
_ActionMap = _ActionMap
import java.awt.FocusTraversalPolicy as FocusTraversalPolicy
import java.awt.event.MouseMotionListener as _MouseMotionListener
_MouseMotionListener = _MouseMotionListener
import java.awt.event.InputMethodListener as _InputMethodListener
_InputMethodListener = _InputMethodListener
import javax.swing.JPopupMenu as JPopupMenu
import java.util.Set as Set
import java.lang.Integer as _int
import java.awt.Image as _Image
_Image = _Image
import java.awt.FontMetrics as FontMetrics
import java.awt.Color as Color
import java.awt.image.BufferedImage as BufferedImage
import java.awt.Image as Image
import java.awt.Graphics as Graphics
import java.awt.ImageCapabilities as ImageCapabilities
import java.util.Locale as _Locale
_Locale = _Locale
 
class ImagePanel():
    """com.badlogic.gdx.tools.flame.ImagePanel"""
 
    @staticmethod
    def _wrap(java_value: _ImagePanel) -> 'ImagePanel':
        return ImagePanel(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _ImagePanel):
        """
        Dynamic initializer for ImagePanel.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_ImagePanel__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_ImagePanel__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def removeVetoableChangeListener(self, arg0: 'VetoableChangeListener'):
        """public synchronized void javax.swing.JComponent.removeVetoableChangeListener(java.beans.VetoableChangeListener)"""
        super(_JComponent, self).removeVetoableChangeListener(arg0)

    @override
    @overload
    def getComponents(self) -> List['Component']:
        """public java.awt.Component[] java.awt.Container.getComponents()"""
        return List['Component']._wrap(super(Container, self).getComponents())

    @override
    @overload
    def setDebugGraphicsOptions(self, arg0: int):
        """public void javax.swing.JComponent.setDebugGraphicsOptions(int)"""
        super(_JComponent, self).setDebugGraphicsOptions(_int.valueOf(arg0))

    @override
    @overload
    def isValid(self) -> bool:
        """public boolean java.awt.Component.isValid()"""
        return bool._wrap(super(Component, self).isValid())

    @overload
    def __init__(self):
        """public com.badlogic.gdx.tools.flame.ImagePanel()"""
        val = _ImagePanel()
        self.__wrapper = val

    @overload
    def setImage(self, arg0: 'BufferedImage'):
        """public void com.badlogic.gdx.tools.flame.ImagePanel.setImage(java.awt.image.BufferedImage)"""
        super(_ImagePanel, self).setImage(arg0)

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def getDefaultLocale() -> 'Locale':
        """public static java.util.Locale javax.swing.JComponent.getDefaultLocale()"""
        return Locale._wrap(_JComponent.getDefaultLocale())

    @override
    @overload
    def getInputVerifier(self) -> 'InputVerifier':
        """public javax.swing.InputVerifier javax.swing.JComponent.getInputVerifier()"""
        return 'InputVerifier'._wrap(super(JComponent, self).getInputVerifier())

    @override
    @overload
    def list(self, arg0: 'PrintStream', arg1: int):
        """public void java.awt.Container.list(java.io.PrintStream,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @override
    @overload
    def setUI(self, arg0: 'PanelUI'):
        """public void javax.swing.JPanel.setUI(javax.swing.plaf.PanelUI)"""
        super(_JPanel, self).setUI(arg0)

    @override
    @overload
    def getFocusTraversalPolicy(self) -> 'FocusTraversalPolicy':
        """public java.awt.FocusTraversalPolicy java.awt.Container.getFocusTraversalPolicy()"""
        return 'FocusTraversalPolicy'._wrap(super(Container, self).getFocusTraversalPolicy())

    @override
    @overload
    def getParent(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getParent()"""
        return 'Container'._wrap(super(Component, self).getParent())

    @override
    @overload
    def paintImmediately(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.paintImmediately(java.awt.Rectangle)"""
        super(_JComponent, self).paintImmediately(arg0)

    @overload
    def __init__(self, ):
        """public com.badlogic.gdx.tools.flame.ImagePanel()"""
        val = _ImagePanel()
        self.__wrapper = val

    @staticmethod
    @overload
    def setDefaultLocale(arg0: 'Locale'):
        """public static void javax.swing.JComponent.setDefaultLocale(java.util.Locale)"""
        _JComponent.setDefaultLocale(arg0)

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,float,float)"""
        super(_Component, self).firePropertyChange(arg0, _float.valueOf(arg1), _float.valueOf(arg2))

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object)"""
        super(_Container, self).add(arg0, arg1)

    @override
    @overload
    def getLocale(self) -> 'Locale':
        """public java.util.Locale java.awt.Component.getLocale()"""
        return 'Locale'._wrap(super(Component, self).getLocale())

    @override
    @overload
    def setInheritsPopupMenu(self, arg0: bool):
        """public void javax.swing.JComponent.setInheritsPopupMenu(boolean)"""
        super(_JComponent, self).setInheritsPopupMenu(_boolean.valueOf(arg0))

    @override
    @overload
    def getHierarchyListeners(self) -> List['HierarchyListener']:
        """public synchronized java.awt.event.HierarchyListener[] java.awt.Component.getHierarchyListeners()"""
        return List['HierarchyListener']._wrap(super(Component, self).getHierarchyListeners())

    @override
    @overload
    def nextFocus(self):
        """public void java.awt.Component.nextFocus()"""
        super(Component, self).nextFocus()

    @override
    @overload
    def isPaintingTile(self) -> bool:
        """public boolean javax.swing.JComponent.isPaintingTile()"""
        return bool._wrap(super(JComponent, self).isPaintingTile())

    @override
    @overload
    def isDisplayable(self) -> bool:
        """public boolean java.awt.Component.isDisplayable()"""
        return bool._wrap(super(Component, self).isDisplayable())

    @override
    @overload
    def getBounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.getBounds()"""
        return 'Rectangle'._wrap(super(Component, self).getBounds())

    @override
    @overload
    def removeMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.removeMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).removeMouseMotionListener(arg0)

    @override
    @overload
    def isShowing(self) -> bool:
        """public boolean java.awt.Component.isShowing()"""
        return bool._wrap(super(Component, self).isShowing())

    @override
    @overload
    def getDropTarget(self) -> 'DropTarget':
        """public synchronized java.awt.dnd.DropTarget java.awt.Component.getDropTarget()"""
        return 'DropTarget'._wrap(super(Component, self).getDropTarget())

    @override
    @overload
    def isFontSet(self) -> bool:
        """public boolean java.awt.Component.isFontSet()"""
        return bool._wrap(super(Component, self).isFontSet())

    @overload
    def mouseUp(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseUp(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseUp(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def setIgnoreRepaint(self, arg0: bool):
        """public void java.awt.Component.setIgnoreRepaint(boolean)"""
        super(_Component, self).setIgnoreRepaint(_boolean.valueOf(arg0))

    @override
    @overload
    def getPropertyChangeListeners(self) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners()"""
        return List['PropertyChangeListener']._wrap(super(Component, self).getPropertyChangeListeners())

    @override
    @overload
    def isBackgroundSet(self) -> bool:
        """public boolean java.awt.Component.isBackgroundSet()"""
        return bool._wrap(super(Component, self).isBackgroundSet())

    @override
    @overload
    def getLocation(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocation()"""
        return 'Point'._wrap(super(Component, self).getLocation())

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int._wrap(super(object, self).hashCode())

    @override
    @overload
    def location(self) -> 'Point':
        """public java.awt.Point java.awt.Component.location()"""
        return 'Point'._wrap(super(Component, self).location())

    @override
    @overload
    def getComponentOrientation(self) -> 'ComponentOrientation':
        """public java.awt.ComponentOrientation java.awt.Component.getComponentOrientation()"""
        return 'ComponentOrientation'._wrap(super(Component, self).getComponentOrientation())

    @override
    @overload
    def addHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.addHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).addHierarchyListener(arg0)

    @override
    @overload
    def getInheritsPopupMenu(self) -> bool:
        """public boolean javax.swing.JComponent.getInheritsPopupMenu()"""
        return bool._wrap(super(JComponent, self).getInheritsPopupMenu())

    @override
    @overload
    def setComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Component.setComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Component, self).setComponentOrientation(arg0)

    @override
    @overload
    def getFocusCycleRootAncestor(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getFocusCycleRootAncestor()"""
        return 'Container'._wrap(super(Component, self).getFocusCycleRootAncestor())

    @override
    @overload
    def show(self, arg0: bool):
        """public void java.awt.Component.show(boolean)"""
        super(_Component, self).show(_boolean.valueOf(arg0))

    @override
    @overload
    def grabFocus(self):
        """public void javax.swing.JComponent.grabFocus()"""
        super(JComponent, self).grabFocus()

    @overload
    def locate(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.locate(int,int)"""
        return 'Component'._wrap(super(_Container, self).locate(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def isPaintingForPrint(self) -> bool:
        """public final boolean javax.swing.JComponent.isPaintingForPrint()"""
        return bool._wrap(super(JComponent, self).isPaintingForPrint())

    @overload
    def keyDown(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyDown(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyDown(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,int,int)"""
        super(_JComponent, self).firePropertyChange(arg0, _int.valueOf(arg1), _int.valueOf(arg2))

    @override
    @overload
    def getLayout(self) -> 'LayoutManager':
        """public java.awt.LayoutManager java.awt.Container.getLayout()"""
        return 'LayoutManager'._wrap(super(Container, self).getLayout())

    @override
    @overload
    def preferredSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.preferredSize()"""
        return 'Dimension'._wrap(super(Container, self).preferredSize())

    @override
    @overload
    def addNotify(self):
        """public void javax.swing.JComponent.addNotify()"""
        super(JComponent, self).addNotify()

    @override
    @overload
    def setSize(self, arg0: int, arg1: int):
        """public void java.awt.Component.setSize(int,int)"""
        super(_Component, self).setSize(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.repaint(int,int,int,int)"""
        super(_Component, self).repaint(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @overload
    def requestFocusInWindow(self, arg0: 'Cause') -> bool:
        """public boolean java.awt.Component.requestFocusInWindow(java.awt.event.FocusEvent$Cause)"""
        return bool._wrap(super(_Component, self).requestFocusInWindow(arg0))

    @override
    @overload
    def remove(self, arg0: int):
        """public void java.awt.Container.remove(int)"""
        super(_Container, self).remove(_int.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,long,long)"""
        super(_Component, self).firePropertyChange(arg0, _long.valueOf(arg1), _long.valueOf(arg2))

    @override
    @overload
    def setFocusCycleRoot(self, arg0: bool):
        """public void java.awt.Container.setFocusCycleRoot(boolean)"""
        super(_Container, self).setFocusCycleRoot(_boolean.valueOf(arg0))

    @overload
    def keyUp(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyUp(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyUp(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def setBackground(self, arg0: 'Color'):
        """public void javax.swing.JComponent.setBackground(java.awt.Color)"""
        super(_JComponent, self).setBackground(arg0)

    @override
    @overload
    def doLayout(self):
        """public void java.awt.Container.doLayout()"""
        super(Container, self).doLayout()

    @override
    @overload
    def enable(self):
        """public void javax.swing.JComponent.enable()"""
        super(JComponent, self).enable()

    @override
    @overload
    def getInsets(self) -> 'Insets':
        """public java.awt.Insets javax.swing.JComponent.getInsets()"""
        return 'Insets'._wrap(super(JComponent, self).getInsets())

    @override
    @overload
    def setNextFocusableComponent(self, arg0: 'Component'):
        """public void javax.swing.JComponent.setNextFocusableComponent(java.awt.Component)"""
        super(_JComponent, self).setNextFocusableComponent(arg0)

    @override
    @overload
    def getAlignmentY(self) -> float:
        """public float javax.swing.JComponent.getAlignmentY()"""
        return float._wrap(super(JComponent, self).getAlignmentY())

    @overload
    def checkImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @override
    @overload
    def getFocusTraversalKeysEnabled(self) -> bool:
        """public boolean java.awt.Component.getFocusTraversalKeysEnabled()"""
        return bool._wrap(super(Component, self).getFocusTraversalKeysEnabled())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getRootPane(self) -> 'JRootPane':
        """public javax.swing.JRootPane javax.swing.JComponent.getRootPane()"""
        return 'JRootPane'._wrap(super(JComponent, self).getRootPane())

    @override
    @overload
    def invalidate(self):
        """public void java.awt.Container.invalidate()"""
        super(Container, self).invalidate()

    @override
    @overload
    def resetKeyboardActions(self):
        """public void javax.swing.JComponent.resetKeyboardActions()"""
        super(JComponent, self).resetKeyboardActions()

    @overload
    def getComponent(self, arg0: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponent(int)"""
        return 'Component'._wrap(super(_Container, self).getComponent(_int.valueOf(arg0)))

    @override
    @overload
    def addPropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Container.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Container, self).addPropertyChangeListener(arg0, arg1)

    @override
    @overload
    def setInputMap(self, arg0: int, arg1: 'InputMap'):
        """public final void javax.swing.JComponent.setInputMap(int,javax.swing.InputMap)"""
        super(_JComponent, self).setInputMap(_int.valueOf(arg0), arg1)

    @override
    @overload
    def removePropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0)

    @override
    @overload
    def applyComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Container.applyComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Container, self).applyComponentOrientation(arg0)

    @override
    @overload
    def setBorder(self, arg0: 'Border'):
        """public void javax.swing.JComponent.setBorder(javax.swing.border.Border)"""
        super(_JComponent, self).setBorder(arg0)

    @override
    @overload
    def remove(self, arg0: 'MenuComponent'):
        """public void java.awt.Component.remove(java.awt.MenuComponent)"""
        super(_Component, self).remove(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintStream'):
        """public void java.awt.Component.list(java.io.PrintStream)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def removeMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.removeMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).removeMouseListener(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintWriter'):
        """public void java.awt.Component.list(java.io.PrintWriter)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def getKeyListeners(self) -> List['KeyListener']:
        """public synchronized java.awt.event.KeyListener[] java.awt.Component.getKeyListeners()"""
        return List['KeyListener']._wrap(super(Component, self).getKeyListeners())

    @override
    @overload
    def getInputContext(self) -> 'InputContext':
        """public java.awt.im.InputContext java.awt.Component.getInputContext()"""
        return 'InputContext'._wrap(super(Component, self).getInputContext())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,double,double)"""
        super(_Component, self).firePropertyChange(arg0, _double.valueOf(arg1), _double.valueOf(arg2))

    @override
    @overload
    def removeAncestorListener(self, arg0: 'AncestorListener'):
        """public void javax.swing.JComponent.removeAncestorListener(javax.swing.event.AncestorListener)"""
        super(_JComponent, self).removeAncestorListener(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintWriter', arg1: int):
        """public void java.awt.Container.list(java.io.PrintWriter,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @overload
    def checkImage(self, arg0: 'Image', arg1: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, arg1))

    @override
    @overload
    def removeFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.removeFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).removeFocusListener(arg0)

    @overload
    def mouseDown(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDown(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDown(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getConditionForKeyStroke(self, arg0: 'KeyStroke') -> int:
        """public int javax.swing.JComponent.getConditionForKeyStroke(javax.swing.KeyStroke)"""
        return int._wrap(super(_JComponent, self).getConditionForKeyStroke(arg0))

    @override
    @overload
    def getTreeLock(self) -> object:
        """public final java.lang.Object java.awt.Component.getTreeLock()"""
        return object._wrap(super(Component, self).getTreeLock())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @override
    @overload
    def addVetoableChangeListener(self, arg0: 'VetoableChangeListener'):
        """public synchronized void javax.swing.JComponent.addVetoableChangeListener(java.beans.VetoableChangeListener)"""
        super(_JComponent, self).addVetoableChangeListener(arg0)

    @overload
    def contains(self, arg0: 'Point') -> bool:
        """public boolean java.awt.Component.contains(java.awt.Point)"""
        return bool._wrap(super(_Component, self).contains(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,short,short)"""
        super(_Component, self).firePropertyChange(arg0, _short.valueOf(arg1), _short.valueOf(arg2))

    @override
    @overload
    def dispatchEvent(self, arg0: 'AWTEvent'):
        """public final void java.awt.Component.dispatchEvent(java.awt.AWTEvent)"""
        super(_Component, self).dispatchEvent(arg0)

    @override
    @overload
    def removeContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.removeContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).removeContainerListener(arg0)

    @override
    @overload
    def getGraphicsConfiguration(self) -> 'GraphicsConfiguration':
        """public java.awt.GraphicsConfiguration java.awt.Component.getGraphicsConfiguration()"""
        return 'GraphicsConfiguration'._wrap(super(Component, self).getGraphicsConfiguration())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: bool, arg2: bool):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,boolean,boolean)"""
        super(_JComponent, self).firePropertyChange(arg0, _boolean.valueOf(arg1), _boolean.valueOf(arg2))

    @override
    @overload
    def registerKeyboardAction(self, arg0: 'ActionListener', arg1: str, arg2: 'KeyStroke', arg3: int):
        """public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,java.lang.String,javax.swing.KeyStroke,int)"""
        super(_JComponent, self).registerKeyboardAction(arg0, arg1, arg2, _int.valueOf(arg3))

    @overload
    def findComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(arg0))

    @override
    @overload
    def resize(self, arg0: int, arg1: int):
        """public void java.awt.Component.resize(int,int)"""
        super(_Component, self).resize(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getHeight(self) -> int:
        """public int javax.swing.JComponent.getHeight()"""
        return int._wrap(super(JComponent, self).getHeight())

    @override
    @overload
    def getTransferHandler(self) -> 'TransferHandler':
        """public javax.swing.TransferHandler javax.swing.JComponent.getTransferHandler()"""
        return 'TransferHandler'._wrap(super(JComponent, self).getTransferHandler())

    @overload
    def imageUpdate(self, arg0: 'Image', arg1: int, arg2: int, arg3: int, arg4: int, arg5: int) -> bool:
        """public boolean java.awt.Component.imageUpdate(java.awt.Image,int,int,int,int,int)"""
        return bool._wrap(super(_Component, self).imageUpdate(arg0, _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4), _int.valueOf(arg5)))

    @override
    @overload
    def getWidth(self) -> int:
        """public int javax.swing.JComponent.getWidth()"""
        return int._wrap(super(JComponent, self).getWidth())

    @override
    @overload
    def transferFocusBackward(self):
        """public void java.awt.Component.transferFocusBackward()"""
        super(Component, self).transferFocusBackward()

    @overload
    def getPropertyChangeListeners(self, arg0: str) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners(java.lang.String)"""
        return List['PropertyChangeListener']._wrap(super(_Component, self).getPropertyChangeListeners(arg0))

    @staticmethod
    @overload
    def isLightweightComponent(arg0: 'Component') -> bool:
        """public static boolean javax.swing.JComponent.isLightweightComponent(java.awt.Component)"""
        return bool._wrap(_JComponent.isLightweightComponent(arg0))

    @override
    @overload
    def getBorder(self) -> 'Border':
        """public javax.swing.border.Border javax.swing.JComponent.getBorder()"""
        return 'Border'._wrap(super(JComponent, self).getBorder())

    @override
    @overload
    def printAll(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.printAll(java.awt.Graphics)"""
        super(_JComponent, self).printAll(arg0)

    @override
    @overload
    def addComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.addComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).addComponentListener(arg0)

    @override
    @overload
    def getBaselineResizeBehavior(self) -> 'BaselineResizeBehavior.Component$BaselineResizeBehavior':
        """public java.awt.Component$BaselineResizeBehavior javax.swing.JComponent.getBaselineResizeBehavior()"""
        return 'BaselineResizeBehavior.Component$BaselineResizeBehavior'._wrap(super(JComponent, self).getBaselineResizeBehavior())

    @override
    @overload
    def print(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.print(java.awt.Graphics)"""
        super(_JComponent, self).print(arg0)

    @override
    @overload
    def setInputVerifier(self, arg0: 'InputVerifier'):
        """public void javax.swing.JComponent.setInputVerifier(javax.swing.InputVerifier)"""
        super(_JComponent, self).setInputVerifier(arg0)

    @override
    @overload
    def addAncestorListener(self, arg0: 'AncestorListener'):
        """public void javax.swing.JComponent.addAncestorListener(javax.swing.event.AncestorListener)"""
        super(_JComponent, self).addAncestorListener(arg0)

    @override
    @overload
    def getFont(self) -> 'Font':
        """public java.awt.Font java.awt.Component.getFont()"""
        return 'Font'._wrap(super(Component, self).getFont())

    @override
    @overload
    def setFont(self, arg0: 'Font'):
        """public void javax.swing.JComponent.setFont(java.awt.Font)"""
        super(_JComponent, self).setFont(arg0)

    @override
    @overload
    def isOptimizedDrawingEnabled(self) -> bool:
        """public boolean javax.swing.JComponent.isOptimizedDrawingEnabled()"""
        return bool._wrap(super(JComponent, self).isOptimizedDrawingEnabled())

    @override
    @overload
    def isValidateRoot(self) -> bool:
        """public boolean javax.swing.JComponent.isValidateRoot()"""
        return bool._wrap(super(JComponent, self).isValidateRoot())

    @overload
    def prepareImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @override
    @overload
    def setForeground(self, arg0: 'Color'):
        """public void javax.swing.JComponent.setForeground(java.awt.Color)"""
        super(_JComponent, self).setForeground(arg0)

    @overload
    def mouseDrag(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDrag(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDrag(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def isOpaque(self) -> bool:
        """public boolean javax.swing.JComponent.isOpaque()"""
        return bool._wrap(super(JComponent, self).isOpaque())

    @overload
    def createVolatileImage(self, arg0: int, arg1: int, arg2: 'ImageCapabilities') -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int,java.awt.ImageCapabilities) throws java.awt.AWTException"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1), arg2))

    @override
    @overload
    def bounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.bounds()"""
        return 'Rectangle'._wrap(super(Component, self).bounds())

    @override
    @overload
    def update(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.update(java.awt.Graphics)"""
        super(_JComponent, self).update(arg0)

    @override
    @overload
    def add(self, arg0: 'PopupMenu'):
        """public void java.awt.Component.add(java.awt.PopupMenu)"""
        super(_Component, self).add(arg0)

    @override
    @overload
    def getToolTipText(self) -> str:
        """public java.lang.String javax.swing.JComponent.getToolTipText()"""
        return str._wrap(super(JComponent, self).getToolTipText())

    @override
    @overload
    def isVisible(self) -> bool:
        """public boolean java.awt.Component.isVisible()"""
        return bool._wrap(super(Component, self).isVisible())

    @override
    @overload
    def setDropTarget(self, arg0: 'DropTarget'):
        """public synchronized void java.awt.Component.setDropTarget(java.awt.dnd.DropTarget)"""
        super(_Component, self).setDropTarget(arg0)

    @override
    @overload
    def getLocationOnScreen(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocationOnScreen()"""
        return 'Point'._wrap(super(Component, self).getLocationOnScreen())

    @override
    @overload
    def getY(self) -> int:
        """public int javax.swing.JComponent.getY()"""
        return int._wrap(super(JComponent, self).getY())

    @overload
    def getComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def isMaximumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMaximumSizeSet()"""
        return bool._wrap(super(Component, self).isMaximumSizeSet())

    @override
    @overload
    def setAlignmentY(self, arg0: float):
        """public void javax.swing.JComponent.setAlignmentY(float)"""
        super(_JComponent, self).setAlignmentY(_float.valueOf(arg0))

    @override
    @overload
    def getRegisteredKeyStrokes(self) -> List['KeyStroke']:
        """public javax.swing.KeyStroke[] javax.swing.JComponent.getRegisteredKeyStrokes()"""
        return List['KeyStroke']._wrap(super(JComponent, self).getRegisteredKeyStrokes())

    @override
    @overload
    def isFocusable(self) -> bool:
        """public boolean java.awt.Component.isFocusable()"""
        return bool._wrap(super(Component, self).isFocusable())

    @override
    @overload
    def isFocusTraversalPolicyProvider(self) -> bool:
        """public final boolean java.awt.Container.isFocusTraversalPolicyProvider()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicyProvider())

    @override
    @overload
    def getMouseListeners(self) -> List['MouseListener']:
        """public synchronized java.awt.event.MouseListener[] java.awt.Component.getMouseListeners()"""
        return List['MouseListener']._wrap(super(Component, self).getMouseListeners())

    @override
    @overload
    def registerKeyboardAction(self, arg0: 'ActionListener', arg1: 'KeyStroke', arg2: int):
        """public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,javax.swing.KeyStroke,int)"""
        super(_JComponent, self).registerKeyboardAction(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def transferFocusUpCycle(self):
        """public void java.awt.Component.transferFocusUpCycle()"""
        super(Component, self).transferFocusUpCycle()

    @override
    @overload
    def removeKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.removeKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).removeKeyListener(arg0)

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: str, arg2: str):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,char,char)"""
        super(_JComponent, self).firePropertyChange(arg0, _char.valueOf(arg1), _char.valueOf(arg2))

    @override
    @overload
    def getMouseMotionListeners(self) -> List['MouseMotionListener']:
        """public synchronized java.awt.event.MouseMotionListener[] java.awt.Component.getMouseMotionListeners()"""
        return List['MouseMotionListener']._wrap(super(Component, self).getMouseMotionListeners())

    @override
    @overload
    def getAutoscrolls(self) -> bool:
        """public boolean javax.swing.JComponent.getAutoscrolls()"""
        return bool._wrap(super(JComponent, self).getAutoscrolls())

    @override
    @overload
    def addContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.addContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).addContainerListener(arg0)

    @override
    @overload
    def isFocusTraversable(self) -> bool:
        """public boolean java.awt.Component.isFocusTraversable()"""
        return bool._wrap(super(Component, self).isFocusTraversable())

    @overload
    def mouseExit(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseExit(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseExit(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getBounds(self, arg0: 'Rectangle') -> 'Rectangle':
        """public java.awt.Rectangle javax.swing.JComponent.getBounds(java.awt.Rectangle)"""
        return 'Rectangle'._wrap(super(_JComponent, self).getBounds(arg0))

    @override
    @overload
    def setToolTipText(self, arg0: str):
        """public void javax.swing.JComponent.setToolTipText(java.lang.String)"""
        super(_JComponent, self).setToolTipText(arg0)

    @override
    @overload
    def setAutoscrolls(self, arg0: bool):
        """public void javax.swing.JComponent.setAutoscrolls(boolean)"""
        super(_JComponent, self).setAutoscrolls(_boolean.valueOf(arg0))

    @override
    @overload
    def setComponentPopupMenu(self, arg0: 'JPopupMenu'):
        """public void javax.swing.JComponent.setComponentPopupMenu(javax.swing.JPopupMenu)"""
        super(_JComponent, self).setComponentPopupMenu(arg0)

    @override
    @overload
    def setMixingCutoutShape(self, arg0: 'Shape'):
        """public void java.awt.Component.setMixingCutoutShape(java.awt.Shape)"""
        super(_Component, self).setMixingCutoutShape(arg0)

    @override
    @overload
    def getVisibleRect(self) -> 'Rectangle':
        """public java.awt.Rectangle javax.swing.JComponent.getVisibleRect()"""
        return 'Rectangle'._wrap(super(JComponent, self).getVisibleRect())

    @override
    @overload
    def requestFocus(self, arg0: 'Cause'):
        """public void java.awt.Component.requestFocus(java.awt.event.FocusEvent$Cause)"""
        super(_Component, self).requestFocus(arg0)

    @overload
    def createImage(self, arg0: int, arg1: int) -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(int,int)"""
        return 'Image'._wrap(super(_Component, self).createImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def putClientProperty(self, arg0: object, arg1: object):
        """public final void javax.swing.JComponent.putClientProperty(java.lang.Object,java.lang.Object)"""
        super(_JComponent, self).putClientProperty(arg0, arg1)

    @override
    @overload
    def getVetoableChangeListeners(self) -> List['VetoableChangeListener']:
        """public synchronized java.beans.VetoableChangeListener[] javax.swing.JComponent.getVetoableChangeListeners()"""
        return List['VetoableChangeListener']._wrap(super(JComponent, self).getVetoableChangeListeners())

    @override
    @overload
    def scrollRectToVisible(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.scrollRectToVisible(java.awt.Rectangle)"""
        super(_JComponent, self).scrollRectToVisible(arg0)

    @override
    @overload
    def getTopLevelAncestor(self) -> 'Container':
        """public java.awt.Container javax.swing.JComponent.getTopLevelAncestor()"""
        return 'Container'._wrap(super(JComponent, self).getTopLevelAncestor())

    @override
    @overload
    def isRequestFocusEnabled(self) -> bool:
        """public boolean javax.swing.JComponent.isRequestFocusEnabled()"""
        return bool._wrap(super(JComponent, self).isRequestFocusEnabled())

    @override
    @overload
    def getFocusListeners(self) -> List['FocusListener']:
        """public synchronized java.awt.event.FocusListener[] java.awt.Component.getFocusListeners()"""
        return List['FocusListener']._wrap(super(Component, self).getFocusListeners())

    @override
    @overload
    def setLayout(self, arg0: 'LayoutManager'):
        """public void java.awt.Container.setLayout(java.awt.LayoutManager)"""
        super(_Container, self).setLayout(arg0)

    @overload
    def add(self, arg0: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0))

    @override
    @overload
    def getMouseWheelListeners(self) -> List['MouseWheelListener']:
        """public synchronized java.awt.event.MouseWheelListener[] java.awt.Component.getMouseWheelListeners()"""
        return List['MouseWheelListener']._wrap(super(Component, self).getMouseWheelListeners())

    @override
    @overload
    def reshape(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void javax.swing.JComponent.reshape(int,int,int,int)"""
        super(_JComponent, self).reshape(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def setTransferHandler(self, arg0: 'TransferHandler'):
        """public void javax.swing.JComponent.setTransferHandler(javax.swing.TransferHandler)"""
        super(_JComponent, self).setTransferHandler(arg0)

    @override
    @overload
    def setLocation(self, arg0: int, arg1: int):
        """public void java.awt.Component.setLocation(int,int)"""
        super(_Component, self).setLocation(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def removeInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.removeInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).removeInputMethodListener(arg0)

    @override
    @overload
    def setFocusable(self, arg0: bool):
        """public void java.awt.Component.setFocusable(boolean)"""
        super(_Component, self).setFocusable(_boolean.valueOf(arg0))

    @override
    @overload
    def paintComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.paintComponents(java.awt.Graphics)"""
        super(_Container, self).paintComponents(arg0)

    @override
    @overload
    def addFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.addFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).addFocusListener(arg0)

    @overload
    def prepareImage(self, arg0: 'Image', arg1: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, arg1))

    @override
    @overload
    def addKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.addKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).addKeyListener(arg0)

    @override
    @overload
    def resize(self, arg0: 'Dimension'):
        """public void java.awt.Component.resize(java.awt.Dimension)"""
        super(_Component, self).resize(arg0)

    @override
    @overload
    def setComponentZOrder(self, arg0: 'Component', arg1: int):
        """public void java.awt.Container.setComponentZOrder(java.awt.Component,int)"""
        super(_Container, self).setComponentZOrder(arg0, _int.valueOf(arg1))

    @override
    @overload
    def list(self):
        """public void java.awt.Component.list()"""
        super(Component, self).list()

    @overload
    def add(self, arg0: str, arg1: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.lang.String,java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, arg1))

    @override
    @overload
    def paintImmediately(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void javax.swing.JComponent.paintImmediately(int,int,int,int)"""
        super(_JComponent, self).paintImmediately(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def getMinimumSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getMinimumSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getMinimumSize())

    @override
    @overload
    def setEnabled(self, arg0: bool):
        """public void javax.swing.JComponent.setEnabled(boolean)"""
        super(_JComponent, self).setEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def hasFocus(self) -> bool:
        """public boolean java.awt.Component.hasFocus()"""
        return bool._wrap(super(Component, self).hasFocus())

    @overload
    def createVolatileImage(self, arg0: int, arg1: int) -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int)"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.removeHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).removeHierarchyListener(arg0)

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.awt.Component.toString()"""
        return str._wrap(super(Component, self).toString())

    @override
    @overload
    def addMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.addMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).addMouseListener(arg0)

    @override
    @overload
    def isFocusOwner(self) -> bool:
        """public boolean java.awt.Component.isFocusOwner()"""
        return bool._wrap(super(Component, self).isFocusOwner())

    @override
    @overload
    def getAccessibleContext(self) -> 'AccessibleContext':
        """public javax.accessibility.AccessibleContext javax.swing.JPanel.getAccessibleContext()"""
        return 'AccessibleContext'._wrap(super(JPanel, self).getAccessibleContext())

    @overload
    def postEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.postEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).postEvent(arg0))

    @overload
    def getLocation(self, arg0: 'Point') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getLocation(java.awt.Point)"""
        return 'Point'._wrap(super(_JComponent, self).getLocation(arg0))

    @overload
    def getBaseline(self, arg0: int, arg1: int) -> int:
        """public int javax.swing.JComponent.getBaseline(int,int)"""
        return int._wrap(super(_JComponent, self).getBaseline(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def findComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeNotify(self):
        """public void javax.swing.JComponent.removeNotify()"""
        super(JComponent, self).removeNotify()

    @override
    @overload
    def getForeground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getForeground()"""
        return 'Color'._wrap(super(Component, self).getForeground())

    @override
    @overload
    def show(self):
        """public void java.awt.Component.show()"""
        super(Component, self).show()

    @override
    @overload
    def isDoubleBuffered(self) -> bool:
        """public boolean javax.swing.JComponent.isDoubleBuffered()"""
        return bool._wrap(super(JComponent, self).isDoubleBuffered())

    @override
    @overload
    def isFocusCycleRoot(self) -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot()"""
        return bool._wrap(super(Container, self).isFocusCycleRoot())

    @override
    @overload
    def addMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.addMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).addMouseWheelListener(arg0)

    @override
    @overload
    def hide(self):
        """public void javax.swing.JComponent.hide()"""
        super(JComponent, self).hide()

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def revalidate(self):
        """public void javax.swing.JComponent.revalidate()"""
        super(JComponent, self).revalidate()

    @override
    @overload
    def getActionMap(self) -> 'ActionMap':
        """public final javax.swing.ActionMap javax.swing.JComponent.getActionMap()"""
        return 'ActionMap'._wrap(super(JComponent, self).getActionMap())

    @override
    @overload
    def requestFocusInWindow(self) -> bool:
        """public boolean javax.swing.JComponent.requestFocusInWindow()"""
        return bool._wrap(super(JComponent, self).requestFocusInWindow())

    @overload
    def action(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.action(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).action(arg0, arg1))

    @override
    @overload
    def isManagingFocus(self) -> bool:
        """public boolean javax.swing.JComponent.isManagingFocus()"""
        return bool._wrap(super(JComponent, self).isManagingFocus())

    @override
    @overload
    def isLightweight(self) -> bool:
        """public boolean java.awt.Component.isLightweight()"""
        return bool._wrap(super(Component, self).isLightweight())

    @override
    @overload
    def setAlignmentX(self, arg0: float):
        """public void javax.swing.JComponent.setAlignmentX(float)"""
        super(_JComponent, self).setAlignmentX(_float.valueOf(arg0))

    @overload
    def getFocusTraversalKeys(self, arg0: int) -> 'Set':
        """public java.util.Set<java.awt.AWTKeyStroke> java.awt.Container.getFocusTraversalKeys(int)"""
        return 'Set'._wrap(super(_Container, self).getFocusTraversalKeys(_int.valueOf(arg0)))

    @override
    @overload
    def setFocusTraversalKeysEnabled(self, arg0: bool):
        """public void java.awt.Component.setFocusTraversalKeysEnabled(boolean)"""
        super(_Component, self).setFocusTraversalKeysEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def remove(self, arg0: 'Component'):
        """public void java.awt.Container.remove(java.awt.Component)"""
        super(_Container, self).remove(arg0)

    @overload
    def getInsets(self, arg0: 'Insets') -> 'Insets':
        """public java.awt.Insets javax.swing.JComponent.getInsets(java.awt.Insets)"""
        return 'Insets'._wrap(super(_JComponent, self).getInsets(arg0))

    @override
    @overload
    def insets(self) -> 'Insets':
        """public java.awt.Insets java.awt.Container.insets()"""
        return 'Insets'._wrap(super(Container, self).insets())

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int):
        """public void javax.swing.JComponent.repaint(long,int,int,int,int)"""
        super(_JComponent, self).repaint(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4))

    @override
    @overload
    def setFocusTraversalPolicy(self, arg0: 'FocusTraversalPolicy'):
        """public void java.awt.Container.setFocusTraversalPolicy(java.awt.FocusTraversalPolicy)"""
        super(_Container, self).setFocusTraversalPolicy(arg0)

    @overload
    def getSize(self, arg0: 'Dimension') -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getSize(java.awt.Dimension)"""
        return 'Dimension'._wrap(super(_JComponent, self).getSize(arg0))

    @override
    @overload
    def enable(self, arg0: bool):
        """public void java.awt.Component.enable(boolean)"""
        super(_Component, self).enable(_boolean.valueOf(arg0))

    @overload
    def getToolTipLocation(self, arg0: 'MouseEvent') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getToolTipLocation(java.awt.event.MouseEvent)"""
        return 'Point'._wrap(super(_JComponent, self).getToolTipLocation(arg0))

    @override
    @overload
    def addPropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Container.addPropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Container, self).addPropertyChangeListener(arg0)

    @overload
    def getComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(arg0))

    @override
    @overload
    def size(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.size()"""
        return 'Dimension'._wrap(super(Component, self).size())

    @override
    @overload
    def getVerifyInputWhenFocusTarget(self) -> bool:
        """public boolean javax.swing.JComponent.getVerifyInputWhenFocusTarget()"""
        return bool._wrap(super(JComponent, self).getVerifyInputWhenFocusTarget())

    @overload
    def mouseMove(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseMove(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseMove(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getActionForKeyStroke(self, arg0: 'KeyStroke') -> 'ActionListener':
        """public java.awt.event.ActionListener javax.swing.JComponent.getActionForKeyStroke(javax.swing.KeyStroke)"""
        return 'ActionListener'._wrap(super(_JComponent, self).getActionForKeyStroke(arg0))

    @overload
    def lostFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.lostFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).lostFocus(arg0, arg1))

    @override
    @overload
    def isMinimumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMinimumSizeSet()"""
        return bool._wrap(super(Component, self).isMinimumSizeSet())

    @override
    @overload
    def isForegroundSet(self) -> bool:
        """public boolean java.awt.Component.isForegroundSet()"""
        return bool._wrap(super(Component, self).isForegroundSet())

    @overload
    def getMousePosition(self, arg0: bool) -> 'Point':
        """public java.awt.Point java.awt.Container.getMousePosition(boolean) throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(_Container, self).getMousePosition(_boolean.valueOf(arg0)))

    @overload
    def getFontMetrics(self, arg0: 'Font') -> 'FontMetrics':
        """public java.awt.FontMetrics javax.swing.JComponent.getFontMetrics(java.awt.Font)"""
        return 'FontMetrics'._wrap(super(_JComponent, self).getFontMetrics(arg0))

    @overload
    def getListeners(self, arg0: 'Class') -> List['EventListener']:
        """public <T extends java.util.EventListener> T[] javax.swing.JComponent.getListeners(java.lang.Class<T>)"""
        return List['EventListener']._wrap(super(_JComponent, self).getListeners(arg0))

    @override
    @overload
    def getHierarchyBoundsListeners(self) -> List['HierarchyBoundsListener']:
        """public synchronized java.awt.event.HierarchyBoundsListener[] java.awt.Component.getHierarchyBoundsListeners()"""
        return List['HierarchyBoundsListener']._wrap(super(Component, self).getHierarchyBoundsListeners())

    @override
    @overload
    def minimumSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.minimumSize()"""
        return 'Dimension'._wrap(super(Container, self).minimumSize())

    @overload
    def handleEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.handleEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).handleEvent(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @override
    @overload
    def getComponentListeners(self) -> List['ComponentListener']:
        """public synchronized java.awt.event.ComponentListener[] java.awt.Component.getComponentListeners()"""
        return List['ComponentListener']._wrap(super(Component, self).getComponentListeners())

    @override
    @overload
    def computeVisibleRect(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.computeVisibleRect(java.awt.Rectangle)"""
        super(_JComponent, self).computeVisibleRect(arg0)

    @override
    @overload
    def deliverEvent(self, arg0: 'Event'):
        """public void java.awt.Container.deliverEvent(java.awt.Event)"""
        super(_Container, self).deliverEvent(arg0)

    @override
    @overload
    def addHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.addHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).addHierarchyBoundsListener(arg0)

    @override
    @overload
    def getAlignmentX(self) -> float:
        """public float javax.swing.JComponent.getAlignmentX()"""
        return float._wrap(super(JComponent, self).getAlignmentX())

    @overload
    def setImage(self, arg0: str):
        """public void com.badlogic.gdx.tools.flame.ImagePanel.setImage(java.lang.String)"""
        super(_ImagePanel, self).setImage(arg0)

    @overload
    def add(self, arg0: 'Component', arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component,int)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def repaint(self):
        """public void java.awt.Component.repaint()"""
        super(Component, self).repaint()

    @overload
    def gotFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.gotFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).gotFocus(arg0, arg1))

    @override
    @overload
    def createToolTip(self) -> 'JToolTip':
        """public javax.swing.JToolTip javax.swing.JComponent.createToolTip()"""
        return 'JToolTip'._wrap(super(JComponent, self).createToolTip())

    @overload
    def getToolTipText(self, arg0: 'MouseEvent') -> str:
        """public java.lang.String javax.swing.JComponent.getToolTipText(java.awt.event.MouseEvent)"""
        return str._wrap(super(_JComponent, self).getToolTipText(arg0))

    @override
    @overload
    def printComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.printComponents(java.awt.Graphics)"""
        super(_Container, self).printComponents(arg0)

    @override
    @overload
    def getColorModel(self) -> 'ColorModel':
        """public java.awt.image.ColorModel java.awt.Component.getColorModel()"""
        return 'ColorModel'._wrap(super(Component, self).getColorModel())

    @override
    @overload
    def setFocusTraversalPolicyProvider(self, arg0: bool):
        """public final void java.awt.Container.setFocusTraversalPolicyProvider(boolean)"""
        super(_Container, self).setFocusTraversalPolicyProvider(_boolean.valueOf(arg0))

    @overload
    def getComponentZOrder(self, arg0: 'Component') -> int:
        """public int java.awt.Container.getComponentZOrder(java.awt.Component)"""
        return int._wrap(super(_Container, self).getComponentZOrder(arg0))

    @override
    @overload
    def getDebugGraphicsOptions(self) -> int:
        """public int javax.swing.JComponent.getDebugGraphicsOptions()"""
        return int._wrap(super(JComponent, self).getDebugGraphicsOptions())

    @overload
    def areFocusTraversalKeysSet(self, arg0: int) -> bool:
        """public boolean java.awt.Container.areFocusTraversalKeysSet(int)"""
        return bool._wrap(super(_Container, self).areFocusTraversalKeysSet(_int.valueOf(arg0)))

    @override
    @overload
    def getSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.getSize()"""
        return 'Dimension'._wrap(super(Component, self).getSize())

    @override
    @overload
    def setName(self, arg0: str):
        """public void java.awt.Component.setName(java.lang.String)"""
        super(_Component, self).setName(arg0)

    @override
    @overload
    def repaint(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.repaint(java.awt.Rectangle)"""
        super(_JComponent, self).repaint(arg0)

    @overload
    def getClientProperty(self, arg0: object) -> object:
        """public final java.lang.Object javax.swing.JComponent.getClientProperty(java.lang.Object)"""
        return object._wrap(super(_JComponent, self).getClientProperty(arg0))

    @override
    @overload
    def unregisterKeyboardAction(self, arg0: 'KeyStroke'):
        """public void javax.swing.JComponent.unregisterKeyboardAction(javax.swing.KeyStroke)"""
        super(_JComponent, self).unregisterKeyboardAction(arg0)

    @overload
    def requestFocus(self, arg0: bool) -> bool:
        """public boolean javax.swing.JComponent.requestFocus(boolean)"""
        return bool._wrap(super(_JComponent, self).requestFocus(_boolean.valueOf(arg0)))

    @override
    @overload
    def setActionMap(self, arg0: 'ActionMap'):
        """public final void javax.swing.JComponent.setActionMap(javax.swing.ActionMap)"""
        super(_JComponent, self).setActionMap(arg0)

    @override
    @overload
    def getX(self) -> int:
        """public int javax.swing.JComponent.getX()"""
        return int._wrap(super(JComponent, self).getX())

    @overload
    def mouseEnter(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseEnter(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseEnter(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def updateUI(self):
        """public void javax.swing.JPanel.updateUI()"""
        super(JPanel, self).updateUI()

    @override
    @overload
    def getToolkit(self) -> 'Toolkit':
        """public java.awt.Toolkit java.awt.Component.getToolkit()"""
        return 'Toolkit'._wrap(super(Component, self).getToolkit())

    @override
    @overload
    def isCursorSet(self) -> bool:
        """public boolean java.awt.Component.isCursorSet()"""
        return bool._wrap(super(Component, self).isCursorSet())

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object, arg2: int):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object,int)"""
        super(_Container, self).add(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def setPreferredSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setPreferredSize(java.awt.Dimension)"""
        super(_JComponent, self).setPreferredSize(arg0)

    @override
    @overload
    def setBounds(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.setBounds(int,int,int,int)"""
        super(_Component, self).setBounds(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def isFocusTraversalPolicySet(self) -> bool:
        """public boolean java.awt.Container.isFocusTraversalPolicySet()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicySet())

    @override
    @overload
    def requestFocus(self):
        """public void javax.swing.JComponent.requestFocus()"""
        super(JComponent, self).requestFocus()

    @override
    @overload
    def getAncestorListeners(self) -> List['AncestorListener']:
        """public javax.swing.event.AncestorListener[] javax.swing.JComponent.getAncestorListeners()"""
        return List['AncestorListener']._wrap(super(JComponent, self).getAncestorListeners())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool._wrap(super(_object, self).equals(arg0))

    @overload
    def getInputMap(self, arg0: int) -> 'InputMap':
        """public final javax.swing.InputMap javax.swing.JComponent.getInputMap(int)"""
        return 'InputMap'._wrap(super(_JComponent, self).getInputMap(_int.valueOf(arg0)))

    @override
    @overload
    def isEnabled(self) -> bool:
        """public boolean java.awt.Component.isEnabled()"""
        return bool._wrap(super(Component, self).isEnabled())

    @override
    @overload
    def move(self, arg0: int, arg1: int):
        """public void java.awt.Component.move(int,int)"""
        super(_Component, self).move(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getName(self) -> str:
        """public java.lang.String java.awt.Component.getName()"""
        return str._wrap(super(Component, self).getName())

    @override
    @overload
    def addMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.addMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).addMouseMotionListener(arg0)

    @override
    @overload
    def getIgnoreRepaint(self) -> bool:
        """public boolean java.awt.Component.getIgnoreRepaint()"""
        return bool._wrap(super(Component, self).getIgnoreRepaint())

    @overload
    def isFocusCycleRoot(self, arg0: 'Container') -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot(java.awt.Container)"""
        return bool._wrap(super(_Container, self).isFocusCycleRoot(arg0))

    @override
    @overload
    def getGraphics(self) -> 'Graphics':
        """public java.awt.Graphics javax.swing.JComponent.getGraphics()"""
        return 'Graphics'._wrap(super(JComponent, self).getGraphics())

    @override
    @overload
    def getPreferredSize(self) -> 'Dimension':
        """public java.awt.Dimension com.badlogic.gdx.tools.flame.ImagePanel.getPreferredSize()"""
        return 'Dimension'._wrap(super(ImagePanel, self).getPreferredSize())

    @override
    @overload
    def setLocale(self, arg0: 'Locale'):
        """public void java.awt.Component.setLocale(java.util.Locale)"""
        super(_Component, self).setLocale(arg0)

    @override
    @overload
    def paintAll(self, arg0: 'Graphics'):
        """public void java.awt.Component.paintAll(java.awt.Graphics)"""
        super(_Component, self).paintAll(arg0)

    @override
    @overload
    def setDoubleBuffered(self, arg0: bool):
        """public void javax.swing.JComponent.setDoubleBuffered(boolean)"""
        super(_JComponent, self).setDoubleBuffered(_boolean.valueOf(arg0))

    @override
    @overload
    def isPreferredSizeSet(self) -> bool:
        """public boolean java.awt.Component.isPreferredSizeSet()"""
        return bool._wrap(super(Component, self).isPreferredSizeSet())

    @override
    @overload
    def addInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.addInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).addInputMethodListener(arg0)

    @override
    @overload
    def removeMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.removeMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).removeMouseWheelListener(arg0)

    @override
    @overload
    def getInputMap(self) -> 'InputMap':
        """public final javax.swing.InputMap javax.swing.JComponent.getInputMap()"""
        return 'InputMap'._wrap(super(JComponent, self).getInputMap())

    @override
    @overload
    def setVisible(self, arg0: bool):
        """public void javax.swing.JComponent.setVisible(boolean)"""
        super(_JComponent, self).setVisible(_boolean.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,byte,byte)"""
        super(_Component, self).firePropertyChange(arg0, _byte.valueOf(arg1), _byte.valueOf(arg2))

    @override
    @overload
    def getUIClassID(self) -> str:
        """public java.lang.String javax.swing.JPanel.getUIClassID()"""
        return str._wrap(super(JPanel, self).getUIClassID())

    @override
    @overload
    def transferFocusDownCycle(self):
        """public void java.awt.Container.transferFocusDownCycle()"""
        super(Container, self).transferFocusDownCycle()

    @override
    @overload
    def getNextFocusableComponent(self) -> 'Component':
        """public java.awt.Component javax.swing.JComponent.getNextFocusableComponent()"""
        return 'Component'._wrap(super(JComponent, self).getNextFocusableComponent())

    @override
    @overload
    def getUI(self) -> 'PanelUI':
        """public javax.swing.plaf.PanelUI javax.swing.JPanel.getUI()"""
        return 'PanelUI'._wrap(super(JPanel, self).getUI())

    @override
    @overload
    def setBounds(self, arg0: 'Rectangle'):
        """public void java.awt.Component.setBounds(java.awt.Rectangle)"""
        super(_Component, self).setBounds(arg0)

    @override
    @overload
    def repaint(self, arg0: int):
        """public void java.awt.Component.repaint(long)"""
        super(_Component, self).repaint(_long.valueOf(arg0))

    @override
    @overload
    def removeHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.removeHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).removeHierarchyBoundsListener(arg0)

    @override
    @overload
    def getComponentPopupMenu(self) -> 'JPopupMenu':
        """public javax.swing.JPopupMenu javax.swing.JComponent.getComponentPopupMenu()"""
        return 'JPopupMenu'._wrap(super(JComponent, self).getComponentPopupMenu())

    @override
    @overload
    def getMousePosition(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getMousePosition() throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(Component, self).getMousePosition())

    @override
    @overload
    def getComponentCount(self) -> int:
        """public int java.awt.Container.getComponentCount()"""
        return int._wrap(super(Container, self).getComponentCount())

    @override
    @overload
    def getInputMethodRequests(self) -> 'InputMethodRequests':
        """public java.awt.im.InputMethodRequests java.awt.Component.getInputMethodRequests()"""
        return 'InputMethodRequests'._wrap(super(Component, self).getInputMethodRequests())

    @override
    @overload
    def setMaximumSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setMaximumSize(java.awt.Dimension)"""
        super(_JComponent, self).setMaximumSize(arg0)

    @override
    @overload
    def setRequestFocusEnabled(self, arg0: bool):
        """public void javax.swing.JComponent.setRequestFocusEnabled(boolean)"""
        super(_JComponent, self).setRequestFocusEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def setFocusTraversalKeys(self, arg0: int, arg1: 'Set'):
        """public void javax.swing.JComponent.setFocusTraversalKeys(int,java.util.Set<? extends java.awt.AWTKeyStroke>)"""
        super(_JComponent, self).setFocusTraversalKeys(_int.valueOf(arg0), arg1)

    @overload
    def inside(self, arg0: int, arg1: int) -> bool:
        """public boolean java.awt.Component.inside(int,int)"""
        return bool._wrap(super(_Component, self).inside(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def requestDefaultFocus(self) -> bool:
        """public boolean javax.swing.JComponent.requestDefaultFocus()"""
        return bool._wrap(super(JComponent, self).requestDefaultFocus())

    @override
    @overload
    def disable(self):
        """public void javax.swing.JComponent.disable()"""
        super(JComponent, self).disable()

    @override
    @overload
    def enableInputMethods(self, arg0: bool):
        """public void java.awt.Component.enableInputMethods(boolean)"""
        super(_Component, self).enableInputMethods(_boolean.valueOf(arg0))

    @override
    @overload
    def layout(self):
        """public void java.awt.Container.layout()"""
        super(Container, self).layout()

    @override
    @overload
    def getInputMethodListeners(self) -> List['InputMethodListener']:
        """public synchronized java.awt.event.InputMethodListener[] java.awt.Component.getInputMethodListeners()"""
        return List['InputMethodListener']._wrap(super(Component, self).getInputMethodListeners())

    @override
    @overload
    def paint(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.paint(java.awt.Graphics)"""
        super(_JComponent, self).paint(arg0)

    @override
    @overload
    def transferFocus(self):
        """public void java.awt.Component.transferFocus()"""
        super(Component, self).transferFocus()

    @override
    @overload
    def removeComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.removeComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).removeComponentListener(arg0)

    @override
    @overload
    def getCursor(self) -> 'Cursor':
        """public java.awt.Cursor java.awt.Component.getCursor()"""
        return 'Cursor'._wrap(super(Component, self).getCursor())

    @override
    @overload
    def setMinimumSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setMinimumSize(java.awt.Dimension)"""
        super(_JComponent, self).setMinimumSize(arg0)

    @override
    @overload
    def getContainerListeners(self) -> List['ContainerListener']:
        """public synchronized java.awt.event.ContainerListener[] java.awt.Container.getContainerListeners()"""
        return List['ContainerListener']._wrap(super(Container, self).getContainerListeners())

    @override
    @overload
    def setLocation(self, arg0: 'Point'):
        """public void java.awt.Component.setLocation(java.awt.Point)"""
        super(_Component, self).setLocation(arg0)

    @override
    @overload
    def setSize(self, arg0: 'Dimension'):
        """public void java.awt.Component.setSize(java.awt.Dimension)"""
        super(_Component, self).setSize(arg0)

    @override
    @overload
    def removeAll(self):
        """public void java.awt.Container.removeAll()"""
        super(Container, self).removeAll()

    @overload
    def getPopupLocation(self, arg0: 'MouseEvent') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getPopupLocation(java.awt.event.MouseEvent)"""
        return 'Point'._wrap(super(_JComponent, self).getPopupLocation(arg0))

    @overload
    def isAncestorOf(self, arg0: 'Component') -> bool:
        """public boolean java.awt.Container.isAncestorOf(java.awt.Component)"""
        return bool._wrap(super(_Container, self).isAncestorOf(arg0))

    @override
    @overload
    def setOpaque(self, arg0: bool):
        """public void javax.swing.JComponent.setOpaque(boolean)"""
        super(_JComponent, self).setOpaque(_boolean.valueOf(arg0))

    @overload
    def contains(self, arg0: int, arg1: int) -> bool:
        """public boolean javax.swing.JComponent.contains(int,int)"""
        return bool._wrap(super(_JComponent, self).contains(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def setCursor(self, arg0: 'Cursor'):
        """public void java.awt.Component.setCursor(java.awt.Cursor)"""
        super(_Component, self).setCursor(arg0)

    @override
    @overload
    def validate(self):
        """public void java.awt.Container.validate()"""
        super(Container, self).validate()

    @override
    @overload
    def getMaximumSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getMaximumSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getMaximumSize())

    @override
    @overload
    def getBackground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getBackground()"""
        return 'Color'._wrap(super(Component, self).getBackground())

    @overload
    def createImage(self, arg0: 'ImageProducer') -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(java.awt.image.ImageProducer)"""
        return 'Image'._wrap(super(_Component, self).createImage(arg0))

    @override
    @overload
    def setVerifyInputWhenFocusTarget(self, arg0: bool):
        """public void javax.swing.JComponent.setVerifyInputWhenFocusTarget(boolean)"""
        super(_JComponent, self).setVerifyInputWhenFocusTarget(_boolean.valueOf(arg0))

    @override
    @overload
    def removePropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0, arg1)

    @override
    @overload
    def countComponents(self) -> int:
        """public int java.awt.Container.countComponents()"""
        return int._wrap(super(Container, self).countComponents()) 
 
 
# CLASS: com.badlogic.gdx.tools.flame.EventManager
from builtins import str
from pyquantum_helper import override
import java.lang.Integer as _int
import java.lang.Object as _Object
_Object = _Object
import java.lang.Object as _object
from builtins import type
import java.lang.String as _String
_String = _String
import com.badlogic.gdx.tools.flame.EventManager as _EventManager
_EventManager = _EventManager
from builtins import bool
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class EventManager():
    """com.badlogic.gdx.tools.flame.EventManager"""
 
    @staticmethod
    def _wrap(java_value: _EventManager) -> 'EventManager':
        return EventManager(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _EventManager):
        """
        Dynamic initializer for EventManager.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_EventManager__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_EventManager__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def clear(self):
        """public void com.badlogic.gdx.tools.flame.EventManager.clear()"""
        super(EventManager, self).clear()

    @overload
    def detach(self, arg0: int, arg1: 'Listener'):
        """public void com.badlogic.gdx.tools.flame.EventManager.detach(int,com.badlogic.gdx.tools.flame.EventManager$Listener)"""
        super(_EventManager, self).detach(_int.valueOf(arg0), arg1)

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def fire(self, arg0: int, arg1: object):
        """public void com.badlogic.gdx.tools.flame.EventManager.fire(int,java.lang.Object)"""
        super(_EventManager, self).fire(_int.valueOf(arg0), arg1)

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.lang.Object.toString()"""
        return str._wrap(super(object, self).toString())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def attach(self, arg0: int, arg1: 'Listener'):
        """public void com.badlogic.gdx.tools.flame.EventManager.attach(int,com.badlogic.gdx.tools.flame.EventManager$Listener)"""
        super(_EventManager, self).attach(_int.valueOf(arg0), arg1)

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def get() -> 'EventManager':
        """public static com.badlogic.gdx.tools.flame.EventManager com.badlogic.gdx.tools.flame.EventManager.get()"""
        return EventManager._wrap(_EventManager.get())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool._wrap(super(_object, self).equals(arg0))

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int._wrap(super(object, self).hashCode()) 
 
 
# CLASS: com.badlogic.gdx.tools.flame.AngularVelocityPanel
from pyquantum_helper import import_once as _import_once
import javax.accessibility.AccessibleContext as AccessibleContext
import javax.swing.JToolTip as JToolTip
import java.awt.event.HierarchyBoundsListener as HierarchyBoundsListener
import java.awt.event.ActionListener as _ActionListener
_ActionListener = _ActionListener
import java.awt.ComponentOrientation as _ComponentOrientation
_ComponentOrientation = _ComponentOrientation
import java.awt.image.ImageProducer as ImageProducer
import java.awt.GraphicsConfiguration as GraphicsConfiguration
import java.awt.Graphics as _Graphics
_Graphics = _Graphics
import javax.swing.JToolTip as _JToolTip
_JToolTip = _JToolTip
import java.awt.Container as _Container
_Container = _Container
import java.awt.MenuComponent as MenuComponent
import java.awt.im.InputMethodRequests as _InputMethodRequests
_InputMethodRequests = _InputMethodRequests
import java.awt.FocusTraversalPolicy as _FocusTraversalPolicy
_FocusTraversalPolicy = _FocusTraversalPolicy
import java.lang.Byte as _byte
import java.awt.Dimension as Dimension
import java.awt.Font as _Font
_Font = _Font
import javax.swing.plaf.PanelUI as _PanelUI
_PanelUI = _PanelUI
import java.awt.event.ContainerListener as ContainerListener
import javax.swing.event.AncestorListener as AncestorListener
import java.awt.AWTEvent as AWTEvent
import javax.swing.JPanel as JPanel
import java.awt.image.ColorModel as _ColorModel
_ColorModel = _ColorModel
import java.lang.Object as _object
import java.awt.ComponentOrientation as ComponentOrientation
import java.awt.im.InputContext as _InputContext
_InputContext = _InputContext
from builtins import float
import java.awt.event.HierarchyListener as HierarchyListener
import java.awt.event.InputMethodListener as InputMethodListener
from typing import List
import java.awt.event.MouseWheelListener as _MouseWheelListener
_MouseWheelListener = _MouseWheelListener
import java.awt.event.KeyListener as KeyListener
import java.awt.Component as Component
from builtins import int
import java.awt.LayoutManager as LayoutManager
import java.awt.FontMetrics as _FontMetrics
_FontMetrics = _FontMetrics
import java.awt.Container as Container
from builtins import type
import java.awt.image.VolatileImage as _VolatileImage
_VolatileImage = _VolatileImage
import java.awt.Shape as Shape
import com.badlogic.gdx.tools.flame.EditorPanel as _EditorPanel
_EditorPanel = _EditorPanel
import java.awt.Rectangle as Rectangle
import java.awt.event.ContainerListener as _ContainerListener
_ContainerListener = _ContainerListener
import java.awt.event.HierarchyListener as _HierarchyListener
_HierarchyListener = _HierarchyListener
import java.lang.String as _string
import javax.swing.InputVerifier as _InputVerifier
_InputVerifier = _InputVerifier
import java.awt.Insets as _Insets
_Insets = _Insets
import javax.swing.border.Border as _Border
_Border = _Border
import java.awt.event.ComponentListener as _ComponentListener
_ComponentListener = _ComponentListener
import javax.swing.ActionMap as ActionMap
import java.beans.VetoableChangeListener as VetoableChangeListener
import java.awt.event.ComponentListener as ComponentListener
import javax.swing.KeyStroke as KeyStroke
import com.badlogic.gdx.tools.flame.AngularVelocityPanel as _AngularVelocityPanel
_AngularVelocityPanel = _AngularVelocityPanel
import java.beans.VetoableChangeListener as _VetoableChangeListener
_VetoableChangeListener = _VetoableChangeListener
from builtins import object
try:
    from pygdx.graphics.g3d.particles import influencers
except ImportError:
    influencers = _import_once("pygdx.graphics.g3d.particles.influencers")

import java.awt.event.KeyListener as _KeyListener
_KeyListener = _KeyListener
import java.awt.Component.BaselineResizeBehavior as BaselineResizeBehavior
import java.awt.Component as _Component_BaselineResizeBehavior
_BaselineResizeBehavior = _Component_BaselineResizeBehavior.BaselineResizeBehavior
import java.awt.Cursor as _Cursor
_Cursor = _Cursor
import java.awt.im.InputMethodRequests as InputMethodRequests
import java.lang.Long as _long
import javax.swing.JPanel as _JPanel
_JPanel = _JPanel
import java.awt.event.FocusListener as _FocusListener
_FocusListener = _FocusListener
import java.lang.Character as _char
import javax.swing.TransferHandler as TransferHandler
import java.awt.event.FocusEvent.Cause as Cause
import javax.swing.JComponent as JComponent
import javax.accessibility.AccessibleContext as _AccessibleContext
_AccessibleContext = _AccessibleContext
import java.awt.event.MouseWheelListener as MouseWheelListener
import java.util.Set as _Set
_Set = _Set
import java.awt.image.ColorModel as ColorModel
import java.lang.Boolean as _boolean
import java.awt.event.MouseMotionListener as MouseMotionListener
import java.util.EventListener as EventListener
import java.awt.Insets as Insets
import javax.swing.KeyStroke as _KeyStroke
_KeyStroke = _KeyStroke
import java.awt.GraphicsConfiguration as _GraphicsConfiguration
_GraphicsConfiguration = _GraphicsConfiguration
import java.awt.dnd.DropTarget as _DropTarget
_DropTarget = _DropTarget
from builtins import bool
import java.beans.PropertyChangeListener as _PropertyChangeListener
_PropertyChangeListener = _PropertyChangeListener
import java.awt.LayoutManager as _LayoutManager
_LayoutManager = _LayoutManager
import java.awt.PopupMenu as PopupMenu
import java.util.EventListener as _EventListener
_EventListener = _EventListener
import java.awt.im.InputContext as InputContext
import java.awt.Component as _Component
_Component = _Component
import java.awt.Font as Font
import java.awt.image.VolatileImage as VolatileImage
import java.awt.dnd.DropTarget as DropTarget
import java.lang.String as _String
_String = _String
import java.lang.Float as _float
import java.awt.Cursor as Cursor
import java.awt.event.MouseListener as _MouseListener
_MouseListener = _MouseListener
import java.awt.Toolkit as _Toolkit
_Toolkit = _Toolkit
import java.io.PrintStream as PrintStream
import javax.swing.JRootPane as _JRootPane
_JRootPane = _JRootPane
import java.awt.Dimension as _Dimension
_Dimension = _Dimension
import java.awt.event.ActionListener as ActionListener
import java.awt.event.MouseEvent as MouseEvent
import java.awt.Color as _Color
_Color = _Color
import javax.swing.JPopupMenu as _JPopupMenu
_JPopupMenu = _JPopupMenu
import javax.swing.InputMap as _InputMap
_InputMap = _InputMap
import java.awt.event.MouseListener as MouseListener
import java.lang.Class as _Class
_Class = _Class
import java.util.Locale as Locale
import java.lang.Double as _double
import javax.swing.plaf.PanelUI as PanelUI
import java.awt.Point as _Point
_Point = _Point
import java.lang.Object as _Object
_Object = _Object
import java.beans.PropertyChangeListener as PropertyChangeListener
import javax.swing.border.Border as Border
import javax.swing.JComponent as _JComponent
_JComponent = _JComponent
import javax.swing.InputVerifier as InputVerifier
import java.io.PrintWriter as PrintWriter
import java.awt.Point as Point
import javax.swing.event.AncestorListener as _AncestorListener
_AncestorListener = _AncestorListener
import java.lang.Short as _short
import java.awt.Toolkit as Toolkit
import java.awt.event.HierarchyBoundsListener as _HierarchyBoundsListener
_HierarchyBoundsListener = _HierarchyBoundsListener
import javax.swing.TransferHandler as _TransferHandler
_TransferHandler = _TransferHandler
import javax.swing.InputMap as InputMap
import java.awt.Rectangle as _Rectangle
_Rectangle = _Rectangle
import javax.swing.JRootPane as JRootPane
import java.awt.Event as Event
import java.awt.event.FocusListener as FocusListener
import java.awt.image.ImageObserver as ImageObserver
from builtins import str
from pyquantum_helper import override
import javax.swing.ActionMap as _ActionMap
_ActionMap = _ActionMap
import java.awt.FocusTraversalPolicy as FocusTraversalPolicy
import com.badlogic.gdx.tools.flame.ScaledNumericPanel as _ScaledNumericPanel
_ScaledNumericPanel = _ScaledNumericPanel
import java.awt.event.MouseMotionListener as _MouseMotionListener
_MouseMotionListener = _MouseMotionListener
import java.awt.event.InputMethodListener as _InputMethodListener
_InputMethodListener = _InputMethodListener
import javax.swing.JPopupMenu as JPopupMenu
import java.util.Set as Set
import java.lang.Integer as _int
import java.awt.Image as _Image
_Image = _Image
import java.awt.FontMetrics as FontMetrics
import java.awt.Color as Color
import java.awt.Image as Image
import java.awt.Graphics as Graphics
import java.awt.ImageCapabilities as ImageCapabilities
import java.util.Locale as _Locale
_Locale = _Locale
 
class AngularVelocityPanel():
    """com.badlogic.gdx.tools.flame.AngularVelocityPanel"""
 
    @staticmethod
    def _wrap(java_value: _AngularVelocityPanel) -> 'AngularVelocityPanel':
        return AngularVelocityPanel(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _AngularVelocityPanel):
        """
        Dynamic initializer for AngularVelocityPanel.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_AngularVelocityPanel__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_AngularVelocityPanel__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def removeVetoableChangeListener(self, arg0: 'VetoableChangeListener'):
        """public synchronized void javax.swing.JComponent.removeVetoableChangeListener(java.beans.VetoableChangeListener)"""
        super(_JComponent, self).removeVetoableChangeListener(arg0)

    @override
    @overload
    def getComponents(self) -> List['Component']:
        """public java.awt.Component[] java.awt.Container.getComponents()"""
        return List['Component']._wrap(super(Container, self).getComponents())

    @override
    @overload
    def setDebugGraphicsOptions(self, arg0: int):
        """public void javax.swing.JComponent.setDebugGraphicsOptions(int)"""
        super(_JComponent, self).setDebugGraphicsOptions(_int.valueOf(arg0))

    @override
    @overload
    def isValid(self) -> bool:
        """public boolean java.awt.Component.isValid()"""
        return bool._wrap(super(Component, self).isValid())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def getDefaultLocale() -> 'Locale':
        """public static java.util.Locale javax.swing.JComponent.getDefaultLocale()"""
        return Locale._wrap(_JComponent.getDefaultLocale())

    @override
    @overload
    def getInputVerifier(self) -> 'InputVerifier':
        """public javax.swing.InputVerifier javax.swing.JComponent.getInputVerifier()"""
        return 'InputVerifier'._wrap(super(JComponent, self).getInputVerifier())

    @override
    @overload
    def list(self, arg0: 'PrintStream', arg1: int):
        """public void java.awt.Container.list(java.io.PrintStream,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @override
    @overload
    def setUI(self, arg0: 'PanelUI'):
        """public void javax.swing.JPanel.setUI(javax.swing.plaf.PanelUI)"""
        super(_JPanel, self).setUI(arg0)

    @override
    @overload
    def getFocusTraversalPolicy(self) -> 'FocusTraversalPolicy':
        """public java.awt.FocusTraversalPolicy java.awt.Container.getFocusTraversalPolicy()"""
        return 'FocusTraversalPolicy'._wrap(super(Container, self).getFocusTraversalPolicy())

    @override
    @overload
    def getParent(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getParent()"""
        return 'Container'._wrap(super(Component, self).getParent())

    @override
    @overload
    def paintImmediately(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.paintImmediately(java.awt.Rectangle)"""
        super(_JComponent, self).paintImmediately(arg0)

    @staticmethod
    @overload
    def setDefaultLocale(arg0: 'Locale'):
        """public static void javax.swing.JComponent.setDefaultLocale(java.util.Locale)"""
        _JComponent.setDefaultLocale(arg0)

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,float,float)"""
        super(_Component, self).firePropertyChange(arg0, _float.valueOf(arg1), _float.valueOf(arg2))

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object)"""
        super(_Container, self).add(arg0, arg1)

    @override
    @overload
    def getLocale(self) -> 'Locale':
        """public java.util.Locale java.awt.Component.getLocale()"""
        return 'Locale'._wrap(super(Component, self).getLocale())

    @override
    @overload
    def setInheritsPopupMenu(self, arg0: bool):
        """public void javax.swing.JComponent.setInheritsPopupMenu(boolean)"""
        super(_JComponent, self).setInheritsPopupMenu(_boolean.valueOf(arg0))

    @override
    @overload
    def getHierarchyListeners(self) -> List['HierarchyListener']:
        """public synchronized java.awt.event.HierarchyListener[] java.awt.Component.getHierarchyListeners()"""
        return List['HierarchyListener']._wrap(super(Component, self).getHierarchyListeners())

    @override
    @overload
    def nextFocus(self):
        """public void java.awt.Component.nextFocus()"""
        super(Component, self).nextFocus()

    @override
    @overload
    def isPaintingTile(self) -> bool:
        """public boolean javax.swing.JComponent.isPaintingTile()"""
        return bool._wrap(super(JComponent, self).isPaintingTile())

    @override
    @overload
    def getContentPanel(self) -> 'JPanel':
        """public javax.swing.JPanel com.badlogic.gdx.tools.flame.EditorPanel.getContentPanel()"""
        return 'JPanel'._wrap(super(EditorPanel, self).getContentPanel())

    @override
    @overload
    def isDisplayable(self) -> bool:
        """public boolean java.awt.Component.isDisplayable()"""
        return bool._wrap(super(Component, self).isDisplayable())

    @overload
    def setValue(self, arg0: 'Angular'):
        """public void com.badlogic.gdx.tools.flame.AngularVelocityPanel.setValue(com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Angular)"""
        super(_AngularVelocityPanel, self).setValue(arg0)

    @override
    @overload
    def getBounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.getBounds()"""
        return 'Rectangle'._wrap(super(Component, self).getBounds())

    @override
    @overload
    def removeMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.removeMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).removeMouseMotionListener(arg0)

    @override
    @overload
    def isShowing(self) -> bool:
        """public boolean java.awt.Component.isShowing()"""
        return bool._wrap(super(Component, self).isShowing())

    @override
    @overload
    def getDropTarget(self) -> 'DropTarget':
        """public synchronized java.awt.dnd.DropTarget java.awt.Component.getDropTarget()"""
        return 'DropTarget'._wrap(super(Component, self).getDropTarget())

    @override
    @overload
    def isFontSet(self) -> bool:
        """public boolean java.awt.Component.isFontSet()"""
        return bool._wrap(super(Component, self).isFontSet())

    @overload
    def mouseUp(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseUp(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseUp(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def setIgnoreRepaint(self, arg0: bool):
        """public void java.awt.Component.setIgnoreRepaint(boolean)"""
        super(_Component, self).setIgnoreRepaint(_boolean.valueOf(arg0))

    @override
    @overload
    def getPropertyChangeListeners(self) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners()"""
        return List['PropertyChangeListener']._wrap(super(Component, self).getPropertyChangeListeners())

    @override
    @overload
    def isBackgroundSet(self) -> bool:
        """public boolean java.awt.Component.isBackgroundSet()"""
        return bool._wrap(super(Component, self).isBackgroundSet())

    @override
    @overload
    def getLocation(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocation()"""
        return 'Point'._wrap(super(Component, self).getLocation())

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int._wrap(super(object, self).hashCode())

    @override
    @overload
    def location(self) -> 'Point':
        """public java.awt.Point java.awt.Component.location()"""
        return 'Point'._wrap(super(Component, self).location())

    @override
    @overload
    def getComponentOrientation(self) -> 'ComponentOrientation':
        """public java.awt.ComponentOrientation java.awt.Component.getComponentOrientation()"""
        return 'ComponentOrientation'._wrap(super(Component, self).getComponentOrientation())

    @override
    @overload
    def addHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.addHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).addHierarchyListener(arg0)

    @override
    @overload
    def getInheritsPopupMenu(self) -> bool:
        """public boolean javax.swing.JComponent.getInheritsPopupMenu()"""
        return bool._wrap(super(JComponent, self).getInheritsPopupMenu())

    @override
    @overload
    def setComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Component.setComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Component, self).setComponentOrientation(arg0)

    @override
    @overload
    def getFocusCycleRootAncestor(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getFocusCycleRootAncestor()"""
        return 'Container'._wrap(super(Component, self).getFocusCycleRootAncestor())

    @override
    @overload
    def show(self, arg0: bool):
        """public void java.awt.Component.show(boolean)"""
        super(_Component, self).show(_boolean.valueOf(arg0))

    @staticmethod
    @overload
    def addContent(arg0: 'JPanel', arg1: int, arg2: int, arg3: 'JComponent', arg4: bool, arg5: int, arg6: int, arg7: float, arg8: float):
        """public static void com.badlogic.gdx.tools.flame.EditorPanel.addContent(javax.swing.JPanel,int,int,javax.swing.JComponent,boolean,int,int,float,float)"""
        _EditorPanel.addContent(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3, _boolean.valueOf(arg4), _int.valueOf(arg5), _int.valueOf(arg6), _float.valueOf(arg7), _float.valueOf(arg8))

    @override
    @overload
    def grabFocus(self):
        """public void javax.swing.JComponent.grabFocus()"""
        super(JComponent, self).grabFocus()

    @overload
    def locate(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.locate(int,int)"""
        return 'Component'._wrap(super(_Container, self).locate(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def isPaintingForPrint(self) -> bool:
        """public final boolean javax.swing.JComponent.isPaintingForPrint()"""
        return bool._wrap(super(JComponent, self).isPaintingForPrint())

    @overload
    def keyDown(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyDown(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyDown(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,int,int)"""
        super(_JComponent, self).firePropertyChange(arg0, _int.valueOf(arg1), _int.valueOf(arg2))

    @override
    @overload
    def getLayout(self) -> 'LayoutManager':
        """public java.awt.LayoutManager java.awt.Container.getLayout()"""
        return 'LayoutManager'._wrap(super(Container, self).getLayout())

    @override
    @overload
    def preferredSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.preferredSize()"""
        return 'Dimension'._wrap(super(Container, self).preferredSize())

    @override
    @overload
    def addNotify(self):
        """public void javax.swing.JComponent.addNotify()"""
        super(JComponent, self).addNotify()

    @override
    @overload
    def setSize(self, arg0: int, arg1: int):
        """public void java.awt.Component.setSize(int,int)"""
        super(_Component, self).setSize(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.repaint(int,int,int,int)"""
        super(_Component, self).repaint(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @overload
    def requestFocusInWindow(self, arg0: 'Cause') -> bool:
        """public boolean java.awt.Component.requestFocusInWindow(java.awt.event.FocusEvent$Cause)"""
        return bool._wrap(super(_Component, self).requestFocusInWindow(arg0))

    @override
    @overload
    def remove(self, arg0: int):
        """public void java.awt.Container.remove(int)"""
        super(_Container, self).remove(_int.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,long,long)"""
        super(_Component, self).firePropertyChange(arg0, _long.valueOf(arg1), _long.valueOf(arg2))

    @override
    @overload
    def update(self, arg0: 'FlameMain'):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.update(com.badlogic.gdx.tools.flame.FlameMain)"""
        super(_EditorPanel, self).update(arg0)

    @override
    @overload
    def setFocusCycleRoot(self, arg0: bool):
        """public void java.awt.Container.setFocusCycleRoot(boolean)"""
        super(_Container, self).setFocusCycleRoot(_boolean.valueOf(arg0))

    @overload
    def keyUp(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyUp(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyUp(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def setBackground(self, arg0: 'Color'):
        """public void javax.swing.JComponent.setBackground(java.awt.Color)"""
        super(_JComponent, self).setBackground(arg0)

    @override
    @overload
    def doLayout(self):
        """public void java.awt.Container.doLayout()"""
        super(Container, self).doLayout()

    @override
    @overload
    def enable(self):
        """public void javax.swing.JComponent.enable()"""
        super(JComponent, self).enable()

    @override
    @overload
    def getInsets(self) -> 'Insets':
        """public java.awt.Insets javax.swing.JComponent.getInsets()"""
        return 'Insets'._wrap(super(JComponent, self).getInsets())

    @override
    @overload
    def setNextFocusableComponent(self, arg0: 'Component'):
        """public void javax.swing.JComponent.setNextFocusableComponent(java.awt.Component)"""
        super(_JComponent, self).setNextFocusableComponent(arg0)

    @override
    @overload
    def getAlignmentY(self) -> float:
        """public float javax.swing.JComponent.getAlignmentY()"""
        return float._wrap(super(JComponent, self).getAlignmentY())

    @overload
    def checkImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @override
    @overload
    def getFocusTraversalKeysEnabled(self) -> bool:
        """public boolean java.awt.Component.getFocusTraversalKeysEnabled()"""
        return bool._wrap(super(Component, self).getFocusTraversalKeysEnabled())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getRootPane(self) -> 'JRootPane':
        """public javax.swing.JRootPane javax.swing.JComponent.getRootPane()"""
        return 'JRootPane'._wrap(super(JComponent, self).getRootPane())

    @override
    @overload
    def invalidate(self):
        """public void java.awt.Container.invalidate()"""
        super(Container, self).invalidate()

    @override
    @overload
    def resetKeyboardActions(self):
        """public void javax.swing.JComponent.resetKeyboardActions()"""
        super(JComponent, self).resetKeyboardActions()

    @overload
    def getComponent(self, arg0: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponent(int)"""
        return 'Component'._wrap(super(_Container, self).getComponent(_int.valueOf(arg0)))

    @override
    @overload
    def setName(self, arg0: str):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setName(java.lang.String)"""
        super(_EditorPanel, self).setName(arg0)

    @overload
    def getThetaPanel(self) -> 'ScaledNumericPanel':
        """public com.badlogic.gdx.tools.flame.ScaledNumericPanel com.badlogic.gdx.tools.flame.AngularVelocityPanel.getThetaPanel()"""
        return 'ScaledNumericPanel'._wrap(super(AngularVelocityPanel, self).getThetaPanel())

    @override
    @overload
    def addPropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Container.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Container, self).addPropertyChangeListener(arg0, arg1)

    @override
    @overload
    def setInputMap(self, arg0: int, arg1: 'InputMap'):
        """public final void javax.swing.JComponent.setInputMap(int,javax.swing.InputMap)"""
        super(_JComponent, self).setInputMap(_int.valueOf(arg0), arg1)

    @override
    @overload
    def removePropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0)

    @override
    @overload
    def applyComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Container.applyComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Container, self).applyComponentOrientation(arg0)

    @override
    @overload
    def setBorder(self, arg0: 'Border'):
        """public void javax.swing.JComponent.setBorder(javax.swing.border.Border)"""
        super(_JComponent, self).setBorder(arg0)

    @override
    @overload
    def remove(self, arg0: 'MenuComponent'):
        """public void java.awt.Component.remove(java.awt.MenuComponent)"""
        super(_Component, self).remove(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintStream'):
        """public void java.awt.Component.list(java.io.PrintStream)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def removeMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.removeMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).removeMouseListener(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintWriter'):
        """public void java.awt.Component.list(java.io.PrintWriter)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def getKeyListeners(self) -> List['KeyListener']:
        """public synchronized java.awt.event.KeyListener[] java.awt.Component.getKeyListeners()"""
        return List['KeyListener']._wrap(super(Component, self).getKeyListeners())

    @override
    @overload
    def getInputContext(self) -> 'InputContext':
        """public java.awt.im.InputContext java.awt.Component.getInputContext()"""
        return 'InputContext'._wrap(super(Component, self).getInputContext())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,double,double)"""
        super(_Component, self).firePropertyChange(arg0, _double.valueOf(arg1), _double.valueOf(arg2))

    @override
    @overload
    def removeAncestorListener(self, arg0: 'AncestorListener'):
        """public void javax.swing.JComponent.removeAncestorListener(javax.swing.event.AncestorListener)"""
        super(_JComponent, self).removeAncestorListener(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintWriter', arg1: int):
        """public void java.awt.Container.list(java.io.PrintWriter,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @overload
    def checkImage(self, arg0: 'Image', arg1: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, arg1))

    @override
    @overload
    def removeFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.removeFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).removeFocusListener(arg0)

    @overload
    def mouseDown(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDown(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDown(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def setIsAlwayShown(self, arg0: bool):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setIsAlwayShown(boolean)"""
        super(_EditorPanel, self).setIsAlwayShown(_boolean.valueOf(arg0))

    @overload
    def getConditionForKeyStroke(self, arg0: 'KeyStroke') -> int:
        """public int javax.swing.JComponent.getConditionForKeyStroke(javax.swing.KeyStroke)"""
        return int._wrap(super(_JComponent, self).getConditionForKeyStroke(arg0))

    @override
    @overload
    def getTreeLock(self) -> object:
        """public final java.lang.Object java.awt.Component.getTreeLock()"""
        return object._wrap(super(Component, self).getTreeLock())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @override
    @overload
    def addVetoableChangeListener(self, arg0: 'VetoableChangeListener'):
        """public synchronized void javax.swing.JComponent.addVetoableChangeListener(java.beans.VetoableChangeListener)"""
        super(_JComponent, self).addVetoableChangeListener(arg0)

    @overload
    def contains(self, arg0: 'Point') -> bool:
        """public boolean java.awt.Component.contains(java.awt.Point)"""
        return bool._wrap(super(_Component, self).contains(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,short,short)"""
        super(_Component, self).firePropertyChange(arg0, _short.valueOf(arg1), _short.valueOf(arg2))

    @override
    @overload
    def dispatchEvent(self, arg0: 'AWTEvent'):
        """public final void java.awt.Component.dispatchEvent(java.awt.AWTEvent)"""
        super(_Component, self).dispatchEvent(arg0)

    @override
    @overload
    def removeContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.removeContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).removeContainerListener(arg0)

    @override
    @overload
    def getGraphicsConfiguration(self) -> 'GraphicsConfiguration':
        """public java.awt.GraphicsConfiguration java.awt.Component.getGraphicsConfiguration()"""
        return 'GraphicsConfiguration'._wrap(super(Component, self).getGraphicsConfiguration())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: bool, arg2: bool):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,boolean,boolean)"""
        super(_JComponent, self).firePropertyChange(arg0, _boolean.valueOf(arg1), _boolean.valueOf(arg2))

    @override
    @overload
    def registerKeyboardAction(self, arg0: 'ActionListener', arg1: str, arg2: 'KeyStroke', arg3: int):
        """public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,java.lang.String,javax.swing.KeyStroke,int)"""
        super(_JComponent, self).registerKeyboardAction(arg0, arg1, arg2, _int.valueOf(arg3))

    @overload
    def findComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(arg0))

    @override
    @overload
    def resize(self, arg0: int, arg1: int):
        """public void java.awt.Component.resize(int,int)"""
        super(_Component, self).resize(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getHeight(self) -> int:
        """public int javax.swing.JComponent.getHeight()"""
        return int._wrap(super(JComponent, self).getHeight())

    @override
    @overload
    def getTransferHandler(self) -> 'TransferHandler':
        """public javax.swing.TransferHandler javax.swing.JComponent.getTransferHandler()"""
        return 'TransferHandler'._wrap(super(JComponent, self).getTransferHandler())

    @overload
    def imageUpdate(self, arg0: 'Image', arg1: int, arg2: int, arg3: int, arg4: int, arg5: int) -> bool:
        """public boolean java.awt.Component.imageUpdate(java.awt.Image,int,int,int,int,int)"""
        return bool._wrap(super(_Component, self).imageUpdate(arg0, _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4), _int.valueOf(arg5)))

    @override
    @overload
    def getWidth(self) -> int:
        """public int javax.swing.JComponent.getWidth()"""
        return int._wrap(super(JComponent, self).getWidth())

    @override
    @overload
    def transferFocusBackward(self):
        """public void java.awt.Component.transferFocusBackward()"""
        super(Component, self).transferFocusBackward()

    @overload
    def getPropertyChangeListeners(self, arg0: str) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners(java.lang.String)"""
        return List['PropertyChangeListener']._wrap(super(_Component, self).getPropertyChangeListeners(arg0))

    @override
    @overload
    def getName(self) -> str:
        """public java.lang.String com.badlogic.gdx.tools.flame.EditorPanel.getName()"""
        return str._wrap(super(EditorPanel, self).getName())

    @staticmethod
    @overload
    def isLightweightComponent(arg0: 'Component') -> bool:
        """public static boolean javax.swing.JComponent.isLightweightComponent(java.awt.Component)"""
        return bool._wrap(_JComponent.isLightweightComponent(arg0))

    @override
    @overload
    def getBorder(self) -> 'Border':
        """public javax.swing.border.Border javax.swing.JComponent.getBorder()"""
        return 'Border'._wrap(super(JComponent, self).getBorder())

    @override
    @overload
    def printAll(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.printAll(java.awt.Graphics)"""
        super(_JComponent, self).printAll(arg0)

    @override
    @overload
    def addComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.addComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).addComponentListener(arg0)

    @override
    @overload
    def getBaselineResizeBehavior(self) -> 'BaselineResizeBehavior.Component$BaselineResizeBehavior':
        """public java.awt.Component$BaselineResizeBehavior javax.swing.JComponent.getBaselineResizeBehavior()"""
        return 'BaselineResizeBehavior.Component$BaselineResizeBehavior'._wrap(super(JComponent, self).getBaselineResizeBehavior())

    @override
    @overload
    def print(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.print(java.awt.Graphics)"""
        super(_JComponent, self).print(arg0)

    @override
    @overload
    def setInputVerifier(self, arg0: 'InputVerifier'):
        """public void javax.swing.JComponent.setInputVerifier(javax.swing.InputVerifier)"""
        super(_JComponent, self).setInputVerifier(arg0)

    @override
    @overload
    def addAncestorListener(self, arg0: 'AncestorListener'):
        """public void javax.swing.JComponent.addAncestorListener(javax.swing.event.AncestorListener)"""
        super(_JComponent, self).addAncestorListener(arg0)

    @override
    @overload
    def getFont(self) -> 'Font':
        """public java.awt.Font java.awt.Component.getFont()"""
        return 'Font'._wrap(super(Component, self).getFont())

    @override
    @overload
    def setFont(self, arg0: 'Font'):
        """public void javax.swing.JComponent.setFont(java.awt.Font)"""
        super(_JComponent, self).setFont(arg0)

    @override
    @overload
    def isOptimizedDrawingEnabled(self) -> bool:
        """public boolean javax.swing.JComponent.isOptimizedDrawingEnabled()"""
        return bool._wrap(super(JComponent, self).isOptimizedDrawingEnabled())

    @override
    @overload
    def isValidateRoot(self) -> bool:
        """public boolean javax.swing.JComponent.isValidateRoot()"""
        return bool._wrap(super(JComponent, self).isValidateRoot())

    @overload
    def prepareImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @override
    @overload
    def setHasAdvanced(self, arg0: bool):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setHasAdvanced(boolean)"""
        super(_EditorPanel, self).setHasAdvanced(_boolean.valueOf(arg0))

    @override
    @overload
    def setForeground(self, arg0: 'Color'):
        """public void javax.swing.JComponent.setForeground(java.awt.Color)"""
        super(_JComponent, self).setForeground(arg0)

    @overload
    def mouseDrag(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDrag(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDrag(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def isOpaque(self) -> bool:
        """public boolean javax.swing.JComponent.isOpaque()"""
        return bool._wrap(super(JComponent, self).isOpaque())

    @overload
    def createVolatileImage(self, arg0: int, arg1: int, arg2: 'ImageCapabilities') -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int,java.awt.ImageCapabilities) throws java.awt.AWTException"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1), arg2))

    @override
    @overload
    def bounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.bounds()"""
        return 'Rectangle'._wrap(super(Component, self).bounds())

    @override
    @overload
    def update(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.update(java.awt.Graphics)"""
        super(_JComponent, self).update(arg0)

    @override
    @overload
    def add(self, arg0: 'PopupMenu'):
        """public void java.awt.Component.add(java.awt.PopupMenu)"""
        super(_Component, self).add(arg0)

    @override
    @overload
    def getToolTipText(self) -> str:
        """public java.lang.String javax.swing.JComponent.getToolTipText()"""
        return str._wrap(super(JComponent, self).getToolTipText())

    @override
    @overload
    def isVisible(self) -> bool:
        """public boolean java.awt.Component.isVisible()"""
        return bool._wrap(super(Component, self).isVisible())

    @override
    @overload
    def setDropTarget(self, arg0: 'DropTarget'):
        """public synchronized void java.awt.Component.setDropTarget(java.awt.dnd.DropTarget)"""
        super(_Component, self).setDropTarget(arg0)

    @override
    @overload
    def getLocationOnScreen(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocationOnScreen()"""
        return 'Point'._wrap(super(Component, self).getLocationOnScreen())

    @override
    @overload
    def getY(self) -> int:
        """public int javax.swing.JComponent.getY()"""
        return int._wrap(super(JComponent, self).getY())

    @overload
    def getComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def isMaximumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMaximumSizeSet()"""
        return bool._wrap(super(Component, self).isMaximumSizeSet())

    @override
    @overload
    def setAlignmentY(self, arg0: float):
        """public void javax.swing.JComponent.setAlignmentY(float)"""
        super(_JComponent, self).setAlignmentY(_float.valueOf(arg0))

    @override
    @overload
    def getRegisteredKeyStrokes(self) -> List['KeyStroke']:
        """public javax.swing.KeyStroke[] javax.swing.JComponent.getRegisteredKeyStrokes()"""
        return List['KeyStroke']._wrap(super(JComponent, self).getRegisteredKeyStrokes())

    @override
    @overload
    def isFocusable(self) -> bool:
        """public boolean java.awt.Component.isFocusable()"""
        return bool._wrap(super(Component, self).isFocusable())

    @override
    @overload
    def isFocusTraversalPolicyProvider(self) -> bool:
        """public final boolean java.awt.Container.isFocusTraversalPolicyProvider()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicyProvider())

    @override
    @overload
    def getMouseListeners(self) -> List['MouseListener']:
        """public synchronized java.awt.event.MouseListener[] java.awt.Component.getMouseListeners()"""
        return List['MouseListener']._wrap(super(Component, self).getMouseListeners())

    @override
    @overload
    def registerKeyboardAction(self, arg0: 'ActionListener', arg1: 'KeyStroke', arg2: int):
        """public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,javax.swing.KeyStroke,int)"""
        super(_JComponent, self).registerKeyboardAction(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def transferFocusUpCycle(self):
        """public void java.awt.Component.transferFocusUpCycle()"""
        super(Component, self).transferFocusUpCycle()

    @override
    @overload
    def removeKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.removeKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).removeKeyListener(arg0)

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: str, arg2: str):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,char,char)"""
        super(_JComponent, self).firePropertyChange(arg0, _char.valueOf(arg1), _char.valueOf(arg2))

    @override
    @overload
    def getMouseMotionListeners(self) -> List['MouseMotionListener']:
        """public synchronized java.awt.event.MouseMotionListener[] java.awt.Component.getMouseMotionListeners()"""
        return List['MouseMotionListener']._wrap(super(Component, self).getMouseMotionListeners())

    @override
    @overload
    def getAutoscrolls(self) -> bool:
        """public boolean javax.swing.JComponent.getAutoscrolls()"""
        return bool._wrap(super(JComponent, self).getAutoscrolls())

    @override
    @overload
    def addContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.addContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).addContainerListener(arg0)

    @override
    @overload
    def isFocusTraversable(self) -> bool:
        """public boolean java.awt.Component.isFocusTraversable()"""
        return bool._wrap(super(Component, self).isFocusTraversable())

    @overload
    def mouseExit(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseExit(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseExit(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getBounds(self, arg0: 'Rectangle') -> 'Rectangle':
        """public java.awt.Rectangle javax.swing.JComponent.getBounds(java.awt.Rectangle)"""
        return 'Rectangle'._wrap(super(_JComponent, self).getBounds(arg0))

    @override
    @overload
    def setToolTipText(self, arg0: str):
        """public void javax.swing.JComponent.setToolTipText(java.lang.String)"""
        super(_JComponent, self).setToolTipText(arg0)

    @override
    @overload
    def setAutoscrolls(self, arg0: bool):
        """public void javax.swing.JComponent.setAutoscrolls(boolean)"""
        super(_JComponent, self).setAutoscrolls(_boolean.valueOf(arg0))

    @override
    @overload
    def setComponentPopupMenu(self, arg0: 'JPopupMenu'):
        """public void javax.swing.JComponent.setComponentPopupMenu(javax.swing.JPopupMenu)"""
        super(_JComponent, self).setComponentPopupMenu(arg0)

    @override
    @overload
    def setMixingCutoutShape(self, arg0: 'Shape'):
        """public void java.awt.Component.setMixingCutoutShape(java.awt.Shape)"""
        super(_Component, self).setMixingCutoutShape(arg0)

    @override
    @overload
    def getVisibleRect(self) -> 'Rectangle':
        """public java.awt.Rectangle javax.swing.JComponent.getVisibleRect()"""
        return 'Rectangle'._wrap(super(JComponent, self).getVisibleRect())

    @override
    @overload
    def requestFocus(self, arg0: 'Cause'):
        """public void java.awt.Component.requestFocus(java.awt.event.FocusEvent$Cause)"""
        super(_Component, self).requestFocus(arg0)

    @overload
    def createImage(self, arg0: int, arg1: int) -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(int,int)"""
        return 'Image'._wrap(super(_Component, self).createImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def putClientProperty(self, arg0: object, arg1: object):
        """public final void javax.swing.JComponent.putClientProperty(java.lang.Object,java.lang.Object)"""
        super(_JComponent, self).putClientProperty(arg0, arg1)

    @override
    @overload
    def getVetoableChangeListeners(self) -> List['VetoableChangeListener']:
        """public synchronized java.beans.VetoableChangeListener[] javax.swing.JComponent.getVetoableChangeListeners()"""
        return List['VetoableChangeListener']._wrap(super(JComponent, self).getVetoableChangeListeners())

    @override
    @overload
    def scrollRectToVisible(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.scrollRectToVisible(java.awt.Rectangle)"""
        super(_JComponent, self).scrollRectToVisible(arg0)

    @override
    @overload
    def getTopLevelAncestor(self) -> 'Container':
        """public java.awt.Container javax.swing.JComponent.getTopLevelAncestor()"""
        return 'Container'._wrap(super(JComponent, self).getTopLevelAncestor())

    @override
    @overload
    def isRequestFocusEnabled(self) -> bool:
        """public boolean javax.swing.JComponent.isRequestFocusEnabled()"""
        return bool._wrap(super(JComponent, self).isRequestFocusEnabled())

    @override
    @overload
    def getFocusListeners(self) -> List['FocusListener']:
        """public synchronized java.awt.event.FocusListener[] java.awt.Component.getFocusListeners()"""
        return List['FocusListener']._wrap(super(Component, self).getFocusListeners())

    @override
    @overload
    def setLayout(self, arg0: 'LayoutManager'):
        """public void java.awt.Container.setLayout(java.awt.LayoutManager)"""
        super(_Container, self).setLayout(arg0)

    @overload
    def add(self, arg0: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0))

    @override
    @overload
    def getMouseWheelListeners(self) -> List['MouseWheelListener']:
        """public synchronized java.awt.event.MouseWheelListener[] java.awt.Component.getMouseWheelListeners()"""
        return List['MouseWheelListener']._wrap(super(Component, self).getMouseWheelListeners())

    @override
    @overload
    def reshape(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void javax.swing.JComponent.reshape(int,int,int,int)"""
        super(_JComponent, self).reshape(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def setTransferHandler(self, arg0: 'TransferHandler'):
        """public void javax.swing.JComponent.setTransferHandler(javax.swing.TransferHandler)"""
        super(_JComponent, self).setTransferHandler(arg0)

    @override
    @overload
    def getPreferredSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getPreferredSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getPreferredSize())

    @override
    @overload
    def setLocation(self, arg0: int, arg1: int):
        """public void java.awt.Component.setLocation(int,int)"""
        super(_Component, self).setLocation(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def removeInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.removeInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).removeInputMethodListener(arg0)

    @override
    @overload
    def setFocusable(self, arg0: bool):
        """public void java.awt.Component.setFocusable(boolean)"""
        super(_Component, self).setFocusable(_boolean.valueOf(arg0))

    @override
    @overload
    def paintComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.paintComponents(java.awt.Graphics)"""
        super(_Container, self).paintComponents(arg0)

    @override
    @overload
    def addFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.addFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).addFocusListener(arg0)

    @overload
    def prepareImage(self, arg0: 'Image', arg1: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, arg1))

    @override
    @overload
    def addKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.addKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).addKeyListener(arg0)

    @override
    @overload
    def resize(self, arg0: 'Dimension'):
        """public void java.awt.Component.resize(java.awt.Dimension)"""
        super(_Component, self).resize(arg0)

    @override
    @overload
    def setComponentZOrder(self, arg0: 'Component', arg1: int):
        """public void java.awt.Container.setComponentZOrder(java.awt.Component,int)"""
        super(_Container, self).setComponentZOrder(arg0, _int.valueOf(arg1))

    @override
    @overload
    def list(self):
        """public void java.awt.Component.list()"""
        super(Component, self).list()

    @overload
    def add(self, arg0: str, arg1: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.lang.String,java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, arg1))

    @override
    @overload
    def paintImmediately(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void javax.swing.JComponent.paintImmediately(int,int,int,int)"""
        super(_JComponent, self).paintImmediately(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def getMinimumSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getMinimumSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getMinimumSize())

    @override
    @overload
    def setEnabled(self, arg0: bool):
        """public void javax.swing.JComponent.setEnabled(boolean)"""
        super(_JComponent, self).setEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def hasFocus(self) -> bool:
        """public boolean java.awt.Component.hasFocus()"""
        return bool._wrap(super(Component, self).hasFocus())

    @overload
    def createVolatileImage(self, arg0: int, arg1: int) -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int)"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.removeHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).removeHierarchyListener(arg0)

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.awt.Component.toString()"""
        return str._wrap(super(Component, self).toString())

    @override
    @overload
    def addMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.addMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).addMouseListener(arg0)

    @override
    @overload
    def isFocusOwner(self) -> bool:
        """public boolean java.awt.Component.isFocusOwner()"""
        return bool._wrap(super(Component, self).isFocusOwner())

    @override
    @overload
    def getAccessibleContext(self) -> 'AccessibleContext':
        """public javax.accessibility.AccessibleContext javax.swing.JPanel.getAccessibleContext()"""
        return 'AccessibleContext'._wrap(super(JPanel, self).getAccessibleContext())

    @overload
    def postEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.postEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).postEvent(arg0))

    @overload
    def getLocation(self, arg0: 'Point') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getLocation(java.awt.Point)"""
        return 'Point'._wrap(super(_JComponent, self).getLocation(arg0))

    @overload
    def getBaseline(self, arg0: int, arg1: int) -> int:
        """public int javax.swing.JComponent.getBaseline(int,int)"""
        return int._wrap(super(_JComponent, self).getBaseline(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def findComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeNotify(self):
        """public void javax.swing.JComponent.removeNotify()"""
        super(JComponent, self).removeNotify()

    @override
    @overload
    def getForeground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getForeground()"""
        return 'Color'._wrap(super(Component, self).getForeground())

    @override
    @overload
    def show(self):
        """public void java.awt.Component.show()"""
        super(Component, self).show()

    @override
    @overload
    def isDoubleBuffered(self) -> bool:
        """public boolean javax.swing.JComponent.isDoubleBuffered()"""
        return bool._wrap(super(JComponent, self).isDoubleBuffered())

    @override
    @overload
    def setDescription(self, arg0: str):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setDescription(java.lang.String)"""
        super(_EditorPanel, self).setDescription(arg0)

    @override
    @overload
    def isFocusCycleRoot(self) -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot()"""
        return bool._wrap(super(Container, self).isFocusCycleRoot())

    @override
    @overload
    def addMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.addMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).addMouseWheelListener(arg0)

    @override
    @overload
    def hide(self):
        """public void javax.swing.JComponent.hide()"""
        super(JComponent, self).hide()

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def revalidate(self):
        """public void javax.swing.JComponent.revalidate()"""
        super(JComponent, self).revalidate()

    @override
    @overload
    def getActionMap(self) -> 'ActionMap':
        """public final javax.swing.ActionMap javax.swing.JComponent.getActionMap()"""
        return 'ActionMap'._wrap(super(JComponent, self).getActionMap())

    @override
    @overload
    def requestFocusInWindow(self) -> bool:
        """public boolean javax.swing.JComponent.requestFocusInWindow()"""
        return bool._wrap(super(JComponent, self).requestFocusInWindow())

    @overload
    def action(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.action(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).action(arg0, arg1))

    @override
    @overload
    def isManagingFocus(self) -> bool:
        """public boolean javax.swing.JComponent.isManagingFocus()"""
        return bool._wrap(super(JComponent, self).isManagingFocus())

    @override
    @overload
    def isLightweight(self) -> bool:
        """public boolean java.awt.Component.isLightweight()"""
        return bool._wrap(super(Component, self).isLightweight())

    @override
    @overload
    def setAlignmentX(self, arg0: float):
        """public void javax.swing.JComponent.setAlignmentX(float)"""
        super(_JComponent, self).setAlignmentX(_float.valueOf(arg0))

    @overload
    def getFocusTraversalKeys(self, arg0: int) -> 'Set':
        """public java.util.Set<java.awt.AWTKeyStroke> java.awt.Container.getFocusTraversalKeys(int)"""
        return 'Set'._wrap(super(_Container, self).getFocusTraversalKeys(_int.valueOf(arg0)))

    @override
    @overload
    def setFocusTraversalKeysEnabled(self, arg0: bool):
        """public void java.awt.Component.setFocusTraversalKeysEnabled(boolean)"""
        super(_Component, self).setFocusTraversalKeysEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def remove(self, arg0: 'Component'):
        """public void java.awt.Container.remove(java.awt.Component)"""
        super(_Container, self).remove(arg0)

    @overload
    def getInsets(self, arg0: 'Insets') -> 'Insets':
        """public java.awt.Insets javax.swing.JComponent.getInsets(java.awt.Insets)"""
        return 'Insets'._wrap(super(_JComponent, self).getInsets(arg0))

    @override
    @overload
    def insets(self) -> 'Insets':
        """public java.awt.Insets java.awt.Container.insets()"""
        return 'Insets'._wrap(super(Container, self).insets())

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int):
        """public void javax.swing.JComponent.repaint(long,int,int,int,int)"""
        super(_JComponent, self).repaint(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4))

    @override
    @overload
    def setFocusTraversalPolicy(self, arg0: 'FocusTraversalPolicy'):
        """public void java.awt.Container.setFocusTraversalPolicy(java.awt.FocusTraversalPolicy)"""
        super(_Container, self).setFocusTraversalPolicy(arg0)

    @overload
    def getSize(self, arg0: 'Dimension') -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getSize(java.awt.Dimension)"""
        return 'Dimension'._wrap(super(_JComponent, self).getSize(arg0))

    @override
    @overload
    def enable(self, arg0: bool):
        """public void java.awt.Component.enable(boolean)"""
        super(_Component, self).enable(_boolean.valueOf(arg0))

    @overload
    def getToolTipLocation(self, arg0: 'MouseEvent') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getToolTipLocation(java.awt.event.MouseEvent)"""
        return 'Point'._wrap(super(_JComponent, self).getToolTipLocation(arg0))

    @override
    @overload
    def addPropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Container.addPropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Container, self).addPropertyChangeListener(arg0)

    @overload
    def getComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(arg0))

    @override
    @overload
    def size(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.size()"""
        return 'Dimension'._wrap(super(Component, self).size())

    @override
    @overload
    def getVerifyInputWhenFocusTarget(self) -> bool:
        """public boolean javax.swing.JComponent.getVerifyInputWhenFocusTarget()"""
        return bool._wrap(super(JComponent, self).getVerifyInputWhenFocusTarget())

    @overload
    def mouseMove(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseMove(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseMove(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getMagnitudePanel(self) -> 'ScaledNumericPanel':
        """public com.badlogic.gdx.tools.flame.ScaledNumericPanel com.badlogic.gdx.tools.flame.AngularVelocityPanel.getMagnitudePanel()"""
        return 'ScaledNumericPanel'._wrap(super(AngularVelocityPanel, self).getMagnitudePanel())

    @overload
    def getActionForKeyStroke(self, arg0: 'KeyStroke') -> 'ActionListener':
        """public java.awt.event.ActionListener javax.swing.JComponent.getActionForKeyStroke(javax.swing.KeyStroke)"""
        return 'ActionListener'._wrap(super(_JComponent, self).getActionForKeyStroke(arg0))

    @overload
    def lostFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.lostFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).lostFocus(arg0, arg1))

    @override
    @overload
    def isMinimumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMinimumSizeSet()"""
        return bool._wrap(super(Component, self).isMinimumSizeSet())

    @override
    @overload
    def isForegroundSet(self) -> bool:
        """public boolean java.awt.Component.isForegroundSet()"""
        return bool._wrap(super(Component, self).isForegroundSet())

    @overload
    def getMousePosition(self, arg0: bool) -> 'Point':
        """public java.awt.Point java.awt.Container.getMousePosition(boolean) throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(_Container, self).getMousePosition(_boolean.valueOf(arg0)))

    @overload
    def getFontMetrics(self, arg0: 'Font') -> 'FontMetrics':
        """public java.awt.FontMetrics javax.swing.JComponent.getFontMetrics(java.awt.Font)"""
        return 'FontMetrics'._wrap(super(_JComponent, self).getFontMetrics(arg0))

    @overload
    def getListeners(self, arg0: 'Class') -> List['EventListener']:
        """public <T extends java.util.EventListener> T[] javax.swing.JComponent.getListeners(java.lang.Class<T>)"""
        return List['EventListener']._wrap(super(_JComponent, self).getListeners(arg0))

    @override
    @overload
    def getHierarchyBoundsListeners(self) -> List['HierarchyBoundsListener']:
        """public synchronized java.awt.event.HierarchyBoundsListener[] java.awt.Component.getHierarchyBoundsListeners()"""
        return List['HierarchyBoundsListener']._wrap(super(Component, self).getHierarchyBoundsListeners())

    @override
    @overload
    def minimumSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.minimumSize()"""
        return 'Dimension'._wrap(super(Container, self).minimumSize())

    @overload
    def handleEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.handleEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).handleEvent(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @override
    @overload
    def getComponentListeners(self) -> List['ComponentListener']:
        """public synchronized java.awt.event.ComponentListener[] java.awt.Component.getComponentListeners()"""
        return List['ComponentListener']._wrap(super(Component, self).getComponentListeners())

    @override
    @overload
    def computeVisibleRect(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.computeVisibleRect(java.awt.Rectangle)"""
        super(_JComponent, self).computeVisibleRect(arg0)

    @override
    @overload
    def deliverEvent(self, arg0: 'Event'):
        """public void java.awt.Container.deliverEvent(java.awt.Event)"""
        super(_Container, self).deliverEvent(arg0)

    @override
    @overload
    def addHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.addHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).addHierarchyBoundsListener(arg0)

    @override
    @overload
    def getAlignmentX(self) -> float:
        """public float javax.swing.JComponent.getAlignmentX()"""
        return float._wrap(super(JComponent, self).getAlignmentX())

    @overload
    def add(self, arg0: 'Component', arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component,int)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def repaint(self):
        """public void java.awt.Component.repaint()"""
        super(Component, self).repaint()

    @overload
    def gotFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.gotFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).gotFocus(arg0, arg1))

    @override
    @overload
    def createToolTip(self) -> 'JToolTip':
        """public javax.swing.JToolTip javax.swing.JComponent.createToolTip()"""
        return 'JToolTip'._wrap(super(JComponent, self).createToolTip())

    @override
    @overload
    def setEmbedded(self):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setEmbedded()"""
        super(EditorPanel, self).setEmbedded()

    @overload
    def getToolTipText(self, arg0: 'MouseEvent') -> str:
        """public java.lang.String javax.swing.JComponent.getToolTipText(java.awt.event.MouseEvent)"""
        return str._wrap(super(_JComponent, self).getToolTipText(arg0))

    @override
    @overload
    def printComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.printComponents(java.awt.Graphics)"""
        super(_Container, self).printComponents(arg0)

    @override
    @overload
    def getColorModel(self) -> 'ColorModel':
        """public java.awt.image.ColorModel java.awt.Component.getColorModel()"""
        return 'ColorModel'._wrap(super(Component, self).getColorModel())

    @override
    @overload
    def setFocusTraversalPolicyProvider(self, arg0: bool):
        """public final void java.awt.Container.setFocusTraversalPolicyProvider(boolean)"""
        super(_Container, self).setFocusTraversalPolicyProvider(_boolean.valueOf(arg0))

    @overload
    def getComponentZOrder(self, arg0: 'Component') -> int:
        """public int java.awt.Container.getComponentZOrder(java.awt.Component)"""
        return int._wrap(super(_Container, self).getComponentZOrder(arg0))

    @override
    @overload
    def getDebugGraphicsOptions(self) -> int:
        """public int javax.swing.JComponent.getDebugGraphicsOptions()"""
        return int._wrap(super(JComponent, self).getDebugGraphicsOptions())

    @overload
    def areFocusTraversalKeysSet(self, arg0: int) -> bool:
        """public boolean java.awt.Container.areFocusTraversalKeysSet(int)"""
        return bool._wrap(super(_Container, self).areFocusTraversalKeysSet(_int.valueOf(arg0)))

    @override
    @overload
    def getSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.getSize()"""
        return 'Dimension'._wrap(super(Component, self).getSize())

    @override
    @overload
    def repaint(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.repaint(java.awt.Rectangle)"""
        super(_JComponent, self).repaint(arg0)

    @overload
    def getClientProperty(self, arg0: object) -> object:
        """public final java.lang.Object javax.swing.JComponent.getClientProperty(java.lang.Object)"""
        return object._wrap(super(_JComponent, self).getClientProperty(arg0))

    @override
    @overload
    def unregisterKeyboardAction(self, arg0: 'KeyStroke'):
        """public void javax.swing.JComponent.unregisterKeyboardAction(javax.swing.KeyStroke)"""
        super(_JComponent, self).unregisterKeyboardAction(arg0)

    @overload
    def requestFocus(self, arg0: bool) -> bool:
        """public boolean javax.swing.JComponent.requestFocus(boolean)"""
        return bool._wrap(super(_JComponent, self).requestFocus(_boolean.valueOf(arg0)))

    @override
    @overload
    def setActionMap(self, arg0: 'ActionMap'):
        """public final void javax.swing.JComponent.setActionMap(javax.swing.ActionMap)"""
        super(_JComponent, self).setActionMap(arg0)

    @override
    @overload
    def getX(self) -> int:
        """public int javax.swing.JComponent.getX()"""
        return int._wrap(super(JComponent, self).getX())

    @overload
    def mouseEnter(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseEnter(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseEnter(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def updateUI(self):
        """public void javax.swing.JPanel.updateUI()"""
        super(JPanel, self).updateUI()

    @override
    @overload
    def getToolkit(self) -> 'Toolkit':
        """public java.awt.Toolkit java.awt.Component.getToolkit()"""
        return 'Toolkit'._wrap(super(Component, self).getToolkit())

    @override
    @overload
    def isCursorSet(self) -> bool:
        """public boolean java.awt.Component.isCursorSet()"""
        return bool._wrap(super(Component, self).isCursorSet())

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object, arg2: int):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object,int)"""
        super(_Container, self).add(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def setPreferredSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setPreferredSize(java.awt.Dimension)"""
        super(_JComponent, self).setPreferredSize(arg0)

    @override
    @overload
    def setBounds(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.setBounds(int,int,int,int)"""
        super(_Component, self).setBounds(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @overload
    def __init__(self, arg0: 'FlameMain', arg1: 'Angular', arg2: str, arg3: str, arg4: str):
        """public com.badlogic.gdx.tools.flame.AngularVelocityPanel(com.badlogic.gdx.tools.flame.FlameMain,com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Angular,java.lang.String,java.lang.String,java.lang.String)"""
        val = _AngularVelocityPanel(arg0, arg1, arg2, arg3, arg4)
        self.__wrapper = val

    @override
    @overload
    def isFocusTraversalPolicySet(self) -> bool:
        """public boolean java.awt.Container.isFocusTraversalPolicySet()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicySet())

    @override
    @overload
    def requestFocus(self):
        """public void javax.swing.JComponent.requestFocus()"""
        super(JComponent, self).requestFocus()

    @override
    @overload
    def getAncestorListeners(self) -> List['AncestorListener']:
        """public javax.swing.event.AncestorListener[] javax.swing.JComponent.getAncestorListeners()"""
        return List['AncestorListener']._wrap(super(JComponent, self).getAncestorListeners())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool._wrap(super(_object, self).equals(arg0))

    @overload
    def getInputMap(self, arg0: int) -> 'InputMap':
        """public final javax.swing.InputMap javax.swing.JComponent.getInputMap(int)"""
        return 'InputMap'._wrap(super(_JComponent, self).getInputMap(_int.valueOf(arg0)))

    @override
    @overload
    def isEnabled(self) -> bool:
        """public boolean java.awt.Component.isEnabled()"""
        return bool._wrap(super(Component, self).isEnabled())

    @override
    @overload
    def move(self, arg0: int, arg1: int):
        """public void java.awt.Component.move(int,int)"""
        super(_Component, self).move(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def addMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.addMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).addMouseMotionListener(arg0)

    @override
    @overload
    def getIgnoreRepaint(self) -> bool:
        """public boolean java.awt.Component.getIgnoreRepaint()"""
        return bool._wrap(super(Component, self).getIgnoreRepaint())

    @overload
    def isFocusCycleRoot(self, arg0: 'Container') -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot(java.awt.Container)"""
        return bool._wrap(super(_Container, self).isFocusCycleRoot(arg0))

    @override
    @overload
    def getGraphics(self) -> 'Graphics':
        """public java.awt.Graphics javax.swing.JComponent.getGraphics()"""
        return 'Graphics'._wrap(super(JComponent, self).getGraphics())

    @override
    @overload
    def setLocale(self, arg0: 'Locale'):
        """public void java.awt.Component.setLocale(java.util.Locale)"""
        super(_Component, self).setLocale(arg0)

    @override
    @overload
    def paintAll(self, arg0: 'Graphics'):
        """public void java.awt.Component.paintAll(java.awt.Graphics)"""
        super(_Component, self).paintAll(arg0)

    @override
    @overload
    def setDoubleBuffered(self, arg0: bool):
        """public void javax.swing.JComponent.setDoubleBuffered(boolean)"""
        super(_JComponent, self).setDoubleBuffered(_boolean.valueOf(arg0))

    @override
    @overload
    def isPreferredSizeSet(self) -> bool:
        """public boolean java.awt.Component.isPreferredSizeSet()"""
        return bool._wrap(super(Component, self).isPreferredSizeSet())

    @override
    @overload
    def addInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.addInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).addInputMethodListener(arg0)

    @override
    @overload
    def removeMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.removeMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).removeMouseWheelListener(arg0)

    @override
    @overload
    def getInputMap(self) -> 'InputMap':
        """public final javax.swing.InputMap javax.swing.JComponent.getInputMap()"""
        return 'InputMap'._wrap(super(JComponent, self).getInputMap())

    @override
    @overload
    def setVisible(self, arg0: bool):
        """public void javax.swing.JComponent.setVisible(boolean)"""
        super(_JComponent, self).setVisible(_boolean.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,byte,byte)"""
        super(_Component, self).firePropertyChange(arg0, _byte.valueOf(arg1), _byte.valueOf(arg2))

    @override
    @overload
    def getUIClassID(self) -> str:
        """public java.lang.String javax.swing.JPanel.getUIClassID()"""
        return str._wrap(super(JPanel, self).getUIClassID())

    @override
    @overload
    def transferFocusDownCycle(self):
        """public void java.awt.Container.transferFocusDownCycle()"""
        super(Container, self).transferFocusDownCycle()

    @override
    @overload
    def getNextFocusableComponent(self) -> 'Component':
        """public java.awt.Component javax.swing.JComponent.getNextFocusableComponent()"""
        return 'Component'._wrap(super(JComponent, self).getNextFocusableComponent())

    @override
    @overload
    def getUI(self) -> 'PanelUI':
        """public javax.swing.plaf.PanelUI javax.swing.JPanel.getUI()"""
        return 'PanelUI'._wrap(super(JPanel, self).getUI())

    @override
    @overload
    def setBounds(self, arg0: 'Rectangle'):
        """public void java.awt.Component.setBounds(java.awt.Rectangle)"""
        super(_Component, self).setBounds(arg0)

    @override
    @overload
    def repaint(self, arg0: int):
        """public void java.awt.Component.repaint(long)"""
        super(_Component, self).repaint(_long.valueOf(arg0))

    @override
    @overload
    def removeHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.removeHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).removeHierarchyBoundsListener(arg0)

    @override
    @overload
    def getComponentPopupMenu(self) -> 'JPopupMenu':
        """public javax.swing.JPopupMenu javax.swing.JComponent.getComponentPopupMenu()"""
        return 'JPopupMenu'._wrap(super(JComponent, self).getComponentPopupMenu())

    @override
    @overload
    def getMousePosition(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getMousePosition() throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(Component, self).getMousePosition())

    @override
    @overload
    def getComponentCount(self) -> int:
        """public int java.awt.Container.getComponentCount()"""
        return int._wrap(super(Container, self).getComponentCount())

    @override
    @overload
    def getInputMethodRequests(self) -> 'InputMethodRequests':
        """public java.awt.im.InputMethodRequests java.awt.Component.getInputMethodRequests()"""
        return 'InputMethodRequests'._wrap(super(Component, self).getInputMethodRequests())

    @override
    @overload
    def setMaximumSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setMaximumSize(java.awt.Dimension)"""
        super(_JComponent, self).setMaximumSize(arg0)

    @override
    @overload
    def setRequestFocusEnabled(self, arg0: bool):
        """public void javax.swing.JComponent.setRequestFocusEnabled(boolean)"""
        super(_JComponent, self).setRequestFocusEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def setFocusTraversalKeys(self, arg0: int, arg1: 'Set'):
        """public void javax.swing.JComponent.setFocusTraversalKeys(int,java.util.Set<? extends java.awt.AWTKeyStroke>)"""
        super(_JComponent, self).setFocusTraversalKeys(_int.valueOf(arg0), arg1)

    @overload
    def inside(self, arg0: int, arg1: int) -> bool:
        """public boolean java.awt.Component.inside(int,int)"""
        return bool._wrap(super(_Component, self).inside(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def requestDefaultFocus(self) -> bool:
        """public boolean javax.swing.JComponent.requestDefaultFocus()"""
        return bool._wrap(super(JComponent, self).requestDefaultFocus())

    @override
    @overload
    def disable(self):
        """public void javax.swing.JComponent.disable()"""
        super(JComponent, self).disable()

    @override
    @overload
    def showContent(self, arg0: bool):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.showContent(boolean)"""
        super(_EditorPanel, self).showContent(_boolean.valueOf(arg0))

    @override
    @overload
    def enableInputMethods(self, arg0: bool):
        """public void java.awt.Component.enableInputMethods(boolean)"""
        super(_Component, self).enableInputMethods(_boolean.valueOf(arg0))

    @override
    @overload
    def layout(self):
        """public void java.awt.Container.layout()"""
        super(Container, self).layout()

    @override
    @overload
    def getInputMethodListeners(self) -> List['InputMethodListener']:
        """public synchronized java.awt.event.InputMethodListener[] java.awt.Component.getInputMethodListeners()"""
        return List['InputMethodListener']._wrap(super(Component, self).getInputMethodListeners())

    @override
    @overload
    def paint(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.paint(java.awt.Graphics)"""
        super(_JComponent, self).paint(arg0)

    @override
    @overload
    def transferFocus(self):
        """public void java.awt.Component.transferFocus()"""
        super(Component, self).transferFocus()

    @override
    @overload
    def removeComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.removeComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).removeComponentListener(arg0)

    @override
    @overload
    def getCursor(self) -> 'Cursor':
        """public java.awt.Cursor java.awt.Component.getCursor()"""
        return 'Cursor'._wrap(super(Component, self).getCursor())

    @override
    @overload
    def setMinimumSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setMinimumSize(java.awt.Dimension)"""
        super(_JComponent, self).setMinimumSize(arg0)

    @override
    @overload
    def getAdvancedPanel(self) -> 'JPanel':
        """public javax.swing.JPanel com.badlogic.gdx.tools.flame.EditorPanel.getAdvancedPanel()"""
        return 'JPanel'._wrap(super(EditorPanel, self).getAdvancedPanel())

    @override
    @overload
    def getContainerListeners(self) -> List['ContainerListener']:
        """public synchronized java.awt.event.ContainerListener[] java.awt.Container.getContainerListeners()"""
        return List['ContainerListener']._wrap(super(Container, self).getContainerListeners())

    @overload
    def getPhiPanel(self) -> 'ScaledNumericPanel':
        """public com.badlogic.gdx.tools.flame.ScaledNumericPanel com.badlogic.gdx.tools.flame.AngularVelocityPanel.getPhiPanel()"""
        return 'ScaledNumericPanel'._wrap(super(AngularVelocityPanel, self).getPhiPanel())

    @override
    @overload
    def setLocation(self, arg0: 'Point'):
        """public void java.awt.Component.setLocation(java.awt.Point)"""
        super(_Component, self).setLocation(arg0)

    @override
    @overload
    def setSize(self, arg0: 'Dimension'):
        """public void java.awt.Component.setSize(java.awt.Dimension)"""
        super(_Component, self).setSize(arg0)

    @override
    @overload
    def removeAll(self):
        """public void java.awt.Container.removeAll()"""
        super(Container, self).removeAll()

    @overload
    def getPopupLocation(self, arg0: 'MouseEvent') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getPopupLocation(java.awt.event.MouseEvent)"""
        return 'Point'._wrap(super(_JComponent, self).getPopupLocation(arg0))

    @overload
    def isAncestorOf(self, arg0: 'Component') -> bool:
        """public boolean java.awt.Container.isAncestorOf(java.awt.Component)"""
        return bool._wrap(super(_Container, self).isAncestorOf(arg0))

    @override
    @overload
    def setOpaque(self, arg0: bool):
        """public void javax.swing.JComponent.setOpaque(boolean)"""
        super(_JComponent, self).setOpaque(_boolean.valueOf(arg0))

    @overload
    def contains(self, arg0: int, arg1: int) -> bool:
        """public boolean javax.swing.JComponent.contains(int,int)"""
        return bool._wrap(super(_JComponent, self).contains(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def setCursor(self, arg0: 'Cursor'):
        """public void java.awt.Component.setCursor(java.awt.Cursor)"""
        super(_Component, self).setCursor(arg0)

    @override
    @overload
    def validate(self):
        """public void java.awt.Container.validate()"""
        super(Container, self).validate()

    @override
    @overload
    def getMaximumSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getMaximumSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getMaximumSize())

    @override
    @overload
    def getBackground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getBackground()"""
        return 'Color'._wrap(super(Component, self).getBackground())

    @overload
    def createImage(self, arg0: 'ImageProducer') -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(java.awt.image.ImageProducer)"""
        return 'Image'._wrap(super(_Component, self).createImage(arg0))

    @override
    @overload
    def setVerifyInputWhenFocusTarget(self, arg0: bool):
        """public void javax.swing.JComponent.setVerifyInputWhenFocusTarget(boolean)"""
        super(_JComponent, self).setVerifyInputWhenFocusTarget(_boolean.valueOf(arg0))

    @override
    @overload
    def removePropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0, arg1)

    @override
    @overload
    def countComponents(self) -> int:
        """public int java.awt.Container.countComponents()"""
        return int._wrap(super(Container, self).countComponents()) 
 
 
# CLASS: com.badlogic.gdx.tools.flame.PreAlpha
import javax.accessibility.AccessibleContext as AccessibleContext
import java.awt.event.HierarchyBoundsListener as HierarchyBoundsListener
import java.awt.ComponentOrientation as _ComponentOrientation
_ComponentOrientation = _ComponentOrientation
import java.awt.image.ImageProducer as ImageProducer
import java.awt.BufferCapabilities as BufferCapabilities
import java.awt.Window as _Window
_Window = _Window
import java.awt.GraphicsConfiguration as GraphicsConfiguration
import java.awt.Graphics as _Graphics
_Graphics = _Graphics
import java.awt.Container as _Container
_Container = _Container
import java.awt.MenuComponent as MenuComponent
import java.awt.im.InputMethodRequests as _InputMethodRequests
_InputMethodRequests = _InputMethodRequests
import java.awt.FocusTraversalPolicy as _FocusTraversalPolicy
_FocusTraversalPolicy = _FocusTraversalPolicy
import java.lang.Byte as _byte
import java.awt.Dimension as Dimension
import java.awt.Font as _Font
_Font = _Font
import java.awt.event.ContainerListener as ContainerListener
import java.awt.AWTEvent as AWTEvent
import java.awt.image.ColorModel as _ColorModel
_ColorModel = _ColorModel
import java.lang.Object as _object
import java.awt.ComponentOrientation as ComponentOrientation
import java.awt.im.InputContext as _InputContext
_InputContext = _InputContext
from builtins import float
import java.awt.event.HierarchyListener as HierarchyListener
import java.awt.event.InputMethodListener as InputMethodListener
from typing import List
import java.awt.event.MouseWheelListener as _MouseWheelListener
_MouseWheelListener = _MouseWheelListener
import java.awt.Window.Type as Type
import java.awt.event.KeyListener as KeyListener
import java.awt.Component as Component
import java.awt.MenuBar as _MenuBar
_MenuBar = _MenuBar
from builtins import int
import java.awt.Frame as Frame
import java.awt.LayoutManager as LayoutManager
import java.awt.FontMetrics as _FontMetrics
_FontMetrics = _FontMetrics
import java.awt.Container as Container
import javax.swing.JMenuBar as JMenuBar
from builtins import type
import java.awt.image.VolatileImage as _VolatileImage
_VolatileImage = _VolatileImage
import java.awt.Shape as Shape
import java.util.ResourceBundle as ResourceBundle
import java.awt.Rectangle as Rectangle
import java.awt.event.ContainerListener as _ContainerListener
_ContainerListener = _ContainerListener
import java.awt.event.HierarchyListener as _HierarchyListener
_HierarchyListener = _HierarchyListener
import java.lang.String as _string
import java.awt.Insets as _Insets
_Insets = _Insets
import java.awt.event.ComponentListener as _ComponentListener
_ComponentListener = _ComponentListener
import java.awt.event.ComponentListener as ComponentListener
import java.awt.Frame as _Frame
_Frame = _Frame
import java.awt.event.WindowFocusListener as WindowFocusListener
from builtins import object
import java.awt.event.WindowFocusListener as _WindowFocusListener
_WindowFocusListener = _WindowFocusListener
import java.awt.event.KeyListener as _KeyListener
_KeyListener = _KeyListener
import java.awt.MenuBar as MenuBar
import java.awt.Component.BaselineResizeBehavior as BaselineResizeBehavior
import java.awt.Component as _Component_BaselineResizeBehavior
_BaselineResizeBehavior = _Component_BaselineResizeBehavior.BaselineResizeBehavior
import java.awt.Shape as _Shape
_Shape = _Shape
import java.awt.Cursor as _Cursor
_Cursor = _Cursor
import java.awt.im.InputMethodRequests as InputMethodRequests
import java.lang.Long as _long
import javax.swing.JLayeredPane as JLayeredPane
import java.util.List as List
import java.awt.event.FocusListener as _FocusListener
_FocusListener = _FocusListener
import javax.swing.TransferHandler as TransferHandler
import java.lang.Character as _char
import java.awt.event.FocusEvent.Cause as Cause
import javax.accessibility.AccessibleContext as _AccessibleContext
_AccessibleContext = _AccessibleContext
import java.awt.event.MouseWheelListener as MouseWheelListener
import java.util.Set as _Set
_Set = _Set
import java.awt.event.WindowStateListener as _WindowStateListener
_WindowStateListener = _WindowStateListener
import java.awt.image.ColorModel as ColorModel
import java.lang.Boolean as _boolean
import java.awt.event.WindowStateListener as WindowStateListener
import java.awt.event.MouseMotionListener as MouseMotionListener
import java.util.EventListener as EventListener
import javax.swing.JLayeredPane as _JLayeredPane
_JLayeredPane = _JLayeredPane
import javax.swing.JFrame as _JFrame
_JFrame = _JFrame
import java.awt.Insets as Insets
import java.awt.GraphicsConfiguration as _GraphicsConfiguration
_GraphicsConfiguration = _GraphicsConfiguration
import java.awt.dnd.DropTarget as _DropTarget
_DropTarget = _DropTarget
from builtins import bool
import java.awt.Window as Window
import java.beans.PropertyChangeListener as _PropertyChangeListener
_PropertyChangeListener = _PropertyChangeListener
import java.awt.LayoutManager as _LayoutManager
_LayoutManager = _LayoutManager
import java.awt.PopupMenu as PopupMenu
import java.util.EventListener as _EventListener
_EventListener = _EventListener
import java.awt.im.InputContext as InputContext
import java.awt.Component as _Component
_Component = _Component
import java.awt.Font as Font
import java.awt.image.VolatileImage as VolatileImage
import java.awt.dnd.DropTarget as DropTarget
import java.lang.String as _String
_String = _String
import java.awt.Dialog as _Dialog_ModalExclusionType
_ModalExclusionType = _Dialog_ModalExclusionType.ModalExclusionType
import java.util.List as _List
_List = _List
import java.lang.Float as _float
import java.awt.Cursor as Cursor
import java.awt.event.MouseListener as _MouseListener
_MouseListener = _MouseListener
import java.awt.Toolkit as _Toolkit
_Toolkit = _Toolkit
import java.io.PrintStream as PrintStream
import javax.swing.JRootPane as _JRootPane
_JRootPane = _JRootPane
import java.awt.Dimension as _Dimension
_Dimension = _Dimension
import java.awt.Color as _Color
_Color = _Color
import java.awt.image.BufferStrategy as BufferStrategy
import java.awt.Dialog.ModalExclusionType as ModalExclusionType
import java.awt.event.MouseListener as MouseListener
import java.lang.Class as _Class
_Class = _Class
import java.awt.event.WindowListener as _WindowListener
_WindowListener = _WindowListener
import java.util.Locale as Locale
import java.lang.Double as _double
import java.beans.PropertyChangeListener as PropertyChangeListener
import java.awt.Point as _Point
_Point = _Point
import java.lang.Object as _Object
_Object = _Object
import java.io.PrintWriter as PrintWriter
import java.awt.Point as Point
import java.lang.Short as _short
import java.awt.Toolkit as Toolkit
import java.awt.event.HierarchyBoundsListener as _HierarchyBoundsListener
_HierarchyBoundsListener = _HierarchyBoundsListener
import javax.swing.TransferHandler as _TransferHandler
_TransferHandler = _TransferHandler
import com.badlogic.gdx.tools.flame.PreAlpha as _PreAlpha
_PreAlpha = _PreAlpha
import javax.swing.JRootPane as JRootPane
import java.awt.Rectangle as _Rectangle
_Rectangle = _Rectangle
import java.awt.Event as Event
import java.awt.event.FocusListener as FocusListener
import java.awt.image.ImageObserver as ImageObserver
from builtins import str
from pyquantum_helper import override
import java.awt.event.WindowListener as WindowListener
import java.awt.FocusTraversalPolicy as FocusTraversalPolicy
import java.awt.image.BufferStrategy as _BufferStrategy
_BufferStrategy = _BufferStrategy
import java.awt.event.MouseMotionListener as _MouseMotionListener
_MouseMotionListener = _MouseMotionListener
import java.awt.event.InputMethodListener as _InputMethodListener
_InputMethodListener = _InputMethodListener
import javax.swing.JMenuBar as _JMenuBar
_JMenuBar = _JMenuBar
import java.util.Set as Set
import java.lang.Integer as _int
import java.awt.Image as _Image
_Image = _Image
import java.awt.FontMetrics as FontMetrics
import java.awt.Color as Color
import java.awt.Window as _Window_Type
_Type = _Window_Type.Type
import java.awt.Image as Image
import java.awt.Graphics as Graphics
import java.awt.ImageCapabilities as ImageCapabilities
import java.util.Locale as _Locale
_Locale = _Locale
 
class PreAlpha():
    """com.badlogic.gdx.tools.flame.PreAlpha"""
 
    @staticmethod
    def _wrap(java_value: _PreAlpha) -> 'PreAlpha':
        return PreAlpha(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _PreAlpha):
        """
        Dynamic initializer for PreAlpha.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_PreAlpha__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_PreAlpha__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def getAlignmentY(self) -> float:
        """public float java.awt.Container.getAlignmentY()"""
        return float._wrap(super(Container, self).getAlignmentY())

    @override
    @overload
    def getComponents(self) -> List['Component']:
        """public java.awt.Component[] java.awt.Container.getComponents()"""
        return List['Component']._wrap(super(Container, self).getComponents())

    @override
    @overload
    def isValid(self) -> bool:
        """public boolean java.awt.Component.isValid()"""
        return bool._wrap(super(Component, self).isValid())

    @override
    @overload
    def removeNotify(self):
        """public void java.awt.Frame.removeNotify()"""
        super(Frame, self).removeNotify()

    @override
    @overload
    def setFocusTraversalKeys(self, arg0: int, arg1: 'Set'):
        """public void java.awt.Container.setFocusTraversalKeys(int,java.util.Set<? extends java.awt.AWTKeyStroke>)"""
        super(_Container, self).setFocusTraversalKeys(_int.valueOf(arg0), arg1)

    @override
    @overload
    def getWidth(self) -> int:
        """public int java.awt.Component.getWidth()"""
        return int._wrap(super(Component, self).getWidth())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def addPropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Window.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Window, self).addPropertyChangeListener(arg0, arg1)

    @override
    @overload
    def getIconImages(self) -> 'List':
        """public java.util.List<java.awt.Image> java.awt.Window.getIconImages()"""
        return 'List'._wrap(super(Window, self).getIconImages())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: str, arg2: str):
        """public void java.awt.Component.firePropertyChange(java.lang.String,char,char)"""
        super(_Component, self).firePropertyChange(arg0, _char.valueOf(arg1), _char.valueOf(arg2))

    @overload
    def getBounds(self, arg0: 'Rectangle') -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.getBounds(java.awt.Rectangle)"""
        return 'Rectangle'._wrap(super(_Component, self).getBounds(arg0))

    @override
    @overload
    def remove(self, arg0: 'MenuComponent'):
        """public void java.awt.Frame.remove(java.awt.MenuComponent)"""
        super(_Frame, self).remove(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintStream', arg1: int):
        """public void java.awt.Container.list(java.io.PrintStream,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @override
    @overload
    def setLocation(self, arg0: 'Point'):
        """public void java.awt.Window.setLocation(java.awt.Point)"""
        super(_Window, self).setLocation(arg0)

    @override
    @overload
    def getFocusTraversalPolicy(self) -> 'FocusTraversalPolicy':
        """public java.awt.FocusTraversalPolicy java.awt.Container.getFocusTraversalPolicy()"""
        return 'FocusTraversalPolicy'._wrap(super(Container, self).getFocusTraversalPolicy())

    @override
    @overload
    def getParent(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getParent()"""
        return 'Container'._wrap(super(Component, self).getParent())

    @override
    @overload
    def getInputContext(self) -> 'InputContext':
        """public java.awt.im.InputContext java.awt.Window.getInputContext()"""
        return 'InputContext'._wrap(super(Window, self).getInputContext())

    @override
    @overload
    def getLayeredPane(self) -> 'JLayeredPane':
        """public javax.swing.JLayeredPane javax.swing.JFrame.getLayeredPane()"""
        return 'JLayeredPane'._wrap(super(JFrame, self).getLayeredPane())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,float,float)"""
        super(_Component, self).firePropertyChange(arg0, _float.valueOf(arg1), _float.valueOf(arg2))

    @override
    @overload
    def disable(self):
        """public void java.awt.Component.disable()"""
        super(Component, self).disable()

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object)"""
        super(_Container, self).add(arg0, arg1)

    @override
    @overload
    def dispose(self):
        """public void java.awt.Window.dispose()"""
        super(Window, self).dispose()

    @override
    @overload
    def setGlassPane(self, arg0: 'Component'):
        """public void javax.swing.JFrame.setGlassPane(java.awt.Component)"""
        super(_JFrame, self).setGlassPane(arg0)

    @override
    @overload
    def getHierarchyListeners(self) -> List['HierarchyListener']:
        """public synchronized java.awt.event.HierarchyListener[] java.awt.Component.getHierarchyListeners()"""
        return List['HierarchyListener']._wrap(super(Component, self).getHierarchyListeners())

    @override
    @overload
    def getLocale(self) -> 'Locale':
        """public java.util.Locale java.awt.Window.getLocale()"""
        return 'Locale'._wrap(super(Window, self).getLocale())

    @override
    @overload
    def nextFocus(self):
        """public void java.awt.Component.nextFocus()"""
        super(Component, self).nextFocus()

    @override
    @overload
    def isAlwaysOnTopSupported(self) -> bool:
        """public boolean java.awt.Window.isAlwaysOnTopSupported()"""
        return bool._wrap(super(Window, self).isAlwaysOnTopSupported())

    @override
    @overload
    def revalidate(self):
        """public void java.awt.Component.revalidate()"""
        super(Component, self).revalidate()

    @override
    @overload
    def getDefaultCloseOperation(self) -> int:
        """public int javax.swing.JFrame.getDefaultCloseOperation()"""
        return int._wrap(super(JFrame, self).getDefaultCloseOperation())

    @override
    @overload
    def getFocusableWindowState(self) -> bool:
        """public boolean java.awt.Window.getFocusableWindowState()"""
        return bool._wrap(super(Window, self).getFocusableWindowState())

    @override
    @overload
    def isDisplayable(self) -> bool:
        """public boolean java.awt.Component.isDisplayable()"""
        return bool._wrap(super(Component, self).isDisplayable())

    @staticmethod
    @overload
    def main(arg0: 'String'):
        """public static void com.badlogic.gdx.tools.flame.PreAlpha.main(java.lang.String[])"""
        _PreAlpha.main(arg0)

    @staticmethod
    @overload
    def setDefaultLookAndFeelDecorated(arg0: bool):
        """public static void javax.swing.JFrame.setDefaultLookAndFeelDecorated(boolean)"""
        _JFrame.setDefaultLookAndFeelDecorated(_boolean.valueOf(arg0))

    @override
    @overload
    def getBounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.getBounds()"""
        return 'Rectangle'._wrap(super(Component, self).getBounds())

    @override
    @overload
    def removeMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.removeMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).removeMouseMotionListener(arg0)

    @override
    @overload
    def getDropTarget(self) -> 'DropTarget':
        """public synchronized java.awt.dnd.DropTarget java.awt.Component.getDropTarget()"""
        return 'DropTarget'._wrap(super(Component, self).getDropTarget())

    @override
    @overload
    def isFontSet(self) -> bool:
        """public boolean java.awt.Component.isFontSet()"""
        return bool._wrap(super(Component, self).isFontSet())

    @overload
    def mouseUp(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseUp(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseUp(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def setIgnoreRepaint(self, arg0: bool):
        """public void java.awt.Component.setIgnoreRepaint(boolean)"""
        super(_Component, self).setIgnoreRepaint(_boolean.valueOf(arg0))

    @override
    @overload
    def getPropertyChangeListeners(self) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners()"""
        return List['PropertyChangeListener']._wrap(super(Component, self).getPropertyChangeListeners())

    @override
    @overload
    def isBackgroundSet(self) -> bool:
        """public boolean java.awt.Component.isBackgroundSet()"""
        return bool._wrap(super(Component, self).isBackgroundSet())

    @override
    @overload
    def getLocation(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocation()"""
        return 'Point'._wrap(super(Component, self).getLocation())

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int._wrap(super(object, self).hashCode())

    @override
    @overload
    def location(self) -> 'Point':
        """public java.awt.Point java.awt.Component.location()"""
        return 'Point'._wrap(super(Component, self).location())

    @override
    @overload
    def getComponentOrientation(self) -> 'ComponentOrientation':
        """public java.awt.ComponentOrientation java.awt.Component.getComponentOrientation()"""
        return 'ComponentOrientation'._wrap(super(Component, self).getComponentOrientation())

    @override
    @overload
    def addHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.addHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).addHierarchyListener(arg0)

    @overload
    def __init__(self, ):
        """public com.badlogic.gdx.tools.flame.PreAlpha()"""
        val = _PreAlpha()
        self.__wrapper = val

    @override
    @overload
    def setExtendedState(self, arg0: int):
        """public void java.awt.Frame.setExtendedState(int)"""
        super(_Frame, self).setExtendedState(_int.valueOf(arg0))

    @override
    @overload
    def setComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Component.setComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Component, self).setComponentOrientation(arg0)

    @override
    @overload
    def show(self, arg0: bool):
        """public void java.awt.Component.show(boolean)"""
        super(_Component, self).show(_boolean.valueOf(arg0))

    @override
    @overload
    def setAutoRequestFocus(self, arg0: bool):
        """public void java.awt.Window.setAutoRequestFocus(boolean)"""
        super(_Window, self).setAutoRequestFocus(_boolean.valueOf(arg0))

    @overload
    def locate(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.locate(int,int)"""
        return 'Component'._wrap(super(_Container, self).locate(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def keyDown(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyDown(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyDown(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def setBackground(self, arg0: 'Color'):
        """public void java.awt.Frame.setBackground(java.awt.Color)"""
        super(_Frame, self).setBackground(arg0)

    @override
    @overload
    def getLayout(self) -> 'LayoutManager':
        """public java.awt.LayoutManager java.awt.Container.getLayout()"""
        return 'LayoutManager'._wrap(super(Container, self).getLayout())

    @override
    @overload
    def preferredSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.preferredSize()"""
        return 'Dimension'._wrap(super(Container, self).preferredSize())

    @override
    @overload
    def reshape(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Window.reshape(int,int,int,int)"""
        super(_Window, self).reshape(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.repaint(int,int,int,int)"""
        super(_Component, self).repaint(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @overload
    def requestFocusInWindow(self, arg0: 'Cause') -> bool:
        """public boolean java.awt.Component.requestFocusInWindow(java.awt.event.FocusEvent$Cause)"""
        return bool._wrap(super(_Component, self).requestFocusInWindow(arg0))

    @override
    @overload
    def remove(self, arg0: int):
        """public void java.awt.Container.remove(int)"""
        super(_Container, self).remove(_int.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,long,long)"""
        super(_Component, self).firePropertyChange(arg0, _long.valueOf(arg1), _long.valueOf(arg2))

    @override
    @overload
    def getBaselineResizeBehavior(self) -> 'BaselineResizeBehavior.Component$BaselineResizeBehavior':
        """public java.awt.Component$BaselineResizeBehavior java.awt.Component.getBaselineResizeBehavior()"""
        return 'BaselineResizeBehavior.Component$BaselineResizeBehavior'._wrap(super(Component, self).getBaselineResizeBehavior())

    @override
    @overload
    def setLayout(self, arg0: 'LayoutManager'):
        """public void javax.swing.JFrame.setLayout(java.awt.LayoutManager)"""
        super(_JFrame, self).setLayout(arg0)

    @overload
    def keyUp(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyUp(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyUp(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def getToolkit(self) -> 'Toolkit':
        """public java.awt.Toolkit java.awt.Window.getToolkit()"""
        return 'Toolkit'._wrap(super(Window, self).getToolkit())

    @override
    @overload
    def getCursorType(self) -> int:
        """public int java.awt.Frame.getCursorType()"""
        return int._wrap(super(Frame, self).getCursorType())

    @override
    @overload
    def getFocusOwner(self) -> 'Component':
        """public java.awt.Component java.awt.Window.getFocusOwner()"""
        return 'Component'._wrap(super(Window, self).getFocusOwner())

    @staticmethod
    @overload
    def getWindows() -> List['Window']:
        """public static java.awt.Window[] java.awt.Window.getWindows()"""
        return List[Window]._wrap(_Window.getWindows())

    @override
    @overload
    def doLayout(self):
        """public void java.awt.Container.doLayout()"""
        super(Container, self).doLayout()

    @overload
    def __init__(self):
        """public com.badlogic.gdx.tools.flame.PreAlpha()"""
        val = _PreAlpha()
        self.__wrapper = val

    @override
    @overload
    def getBackground(self) -> 'Color':
        """public java.awt.Color java.awt.Window.getBackground()"""
        return 'Color'._wrap(super(Window, self).getBackground())

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int):
        """public void javax.swing.JFrame.repaint(long,int,int,int,int)"""
        super(_JFrame, self).repaint(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4))

    @override
    @overload
    def setTitle(self, arg0: str):
        """public void java.awt.Frame.setTitle(java.lang.String)"""
        super(_Frame, self).setTitle(arg0)

    @override
    @overload
    def getFocusCycleRootAncestor(self) -> 'Container':
        """public final java.awt.Container java.awt.Window.getFocusCycleRootAncestor()"""
        return 'Container'._wrap(super(Window, self).getFocusCycleRootAncestor())

    @overload
    def checkImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @override
    @overload
    def setAlwaysOnTop(self, arg0: bool):
        """public final void java.awt.Window.setAlwaysOnTop(boolean) throws java.lang.SecurityException"""
        super(_Window, self).setAlwaysOnTop(_boolean.valueOf(arg0))

    @override
    @overload
    def getFocusTraversalKeysEnabled(self) -> bool:
        """public boolean java.awt.Component.getFocusTraversalKeysEnabled()"""
        return bool._wrap(super(Component, self).getFocusTraversalKeysEnabled())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getHeight(self) -> int:
        """public int java.awt.Component.getHeight()"""
        return int._wrap(super(Component, self).getHeight())

    @override
    @overload
    def invalidate(self):
        """public void java.awt.Container.invalidate()"""
        super(Container, self).invalidate()

    @override
    @overload
    def createBufferStrategy(self, arg0: int, arg1: 'BufferCapabilities'):
        """public void java.awt.Window.createBufferStrategy(int,java.awt.BufferCapabilities) throws java.awt.AWTException"""
        super(_Window, self).createBufferStrategy(_int.valueOf(arg0), arg1)

    @overload
    def getComponent(self, arg0: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponent(int)"""
        return 'Component'._wrap(super(_Container, self).getComponent(_int.valueOf(arg0)))

    @override
    @overload
    def setResizable(self, arg0: bool):
        """public void java.awt.Frame.setResizable(boolean)"""
        super(_Frame, self).setResizable(_boolean.valueOf(arg0))

    @override
    @overload
    def setMaximizedBounds(self, arg0: 'Rectangle'):
        """public void java.awt.Frame.setMaximizedBounds(java.awt.Rectangle)"""
        super(_Frame, self).setMaximizedBounds(arg0)

    @overload
    def getListeners(self, arg0: 'Class') -> List['EventListener']:
        """public <T extends java.util.EventListener> T[] java.awt.Window.getListeners(java.lang.Class<T>)"""
        return List['EventListener']._wrap(super(_Window, self).getListeners(arg0))

    @override
    @overload
    def toBack(self):
        """public void java.awt.Window.toBack()"""
        super(Window, self).toBack()

    @override
    @overload
    def isFocused(self) -> bool:
        """public boolean java.awt.Window.isFocused()"""
        return bool._wrap(super(Window, self).isFocused())

    @override
    @overload
    def removePropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0)

    @override
    @overload
    def applyComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Container.applyComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Container, self).applyComponentOrientation(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintStream'):
        """public void java.awt.Component.list(java.io.PrintStream)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def removeMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.removeMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).removeMouseListener(arg0)

    @override
    @overload
    def getMostRecentFocusOwner(self) -> 'Component':
        """public java.awt.Component java.awt.Window.getMostRecentFocusOwner()"""
        return 'Component'._wrap(super(Window, self).getMostRecentFocusOwner())

    @override
    @overload
    def list(self, arg0: 'PrintWriter'):
        """public void java.awt.Component.list(java.io.PrintWriter)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def getKeyListeners(self) -> List['KeyListener']:
        """public synchronized java.awt.event.KeyListener[] java.awt.Component.getKeyListeners()"""
        return List['KeyListener']._wrap(super(Component, self).getKeyListeners())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,double,double)"""
        super(_Component, self).firePropertyChange(arg0, _double.valueOf(arg1), _double.valueOf(arg2))

    @override
    @overload
    def list(self, arg0: 'PrintWriter', arg1: int):
        """public void java.awt.Container.list(java.io.PrintWriter,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @override
    @overload
    def createBufferStrategy(self, arg0: int):
        """public void java.awt.Window.createBufferStrategy(int)"""
        super(_Window, self).createBufferStrategy(_int.valueOf(arg0))

    @overload
    def checkImage(self, arg0: 'Image', arg1: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, arg1))

    @override
    @overload
    def removeFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.removeFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).removeFocusListener(arg0)

    @overload
    def mouseDown(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDown(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDown(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def setState(self, arg0: int):
        """public synchronized void java.awt.Frame.setState(int)"""
        super(_Frame, self).setState(_int.valueOf(arg0))

    @override
    @overload
    def getMenuBar(self) -> 'MenuBar':
        """public java.awt.MenuBar java.awt.Frame.getMenuBar()"""
        return 'MenuBar'._wrap(super(Frame, self).getMenuBar())

    @staticmethod
    @overload
    def getFrames() -> List['Frame']:
        """public static java.awt.Frame[] java.awt.Frame.getFrames()"""
        return List[Frame]._wrap(_Frame.getFrames())

    @override
    @overload
    def setIconImages(self, arg0: 'List'):
        """public synchronized void java.awt.Window.setIconImages(java.util.List<? extends java.awt.Image>)"""
        super(_Window, self).setIconImages(arg0)

    @override
    @overload
    def getTreeLock(self) -> object:
        """public final java.lang.Object java.awt.Component.getTreeLock()"""
        return object._wrap(super(Component, self).getTreeLock())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def getFocusTraversalKeys(self, arg0: int) -> 'Set':
        """public java.util.Set<java.awt.AWTKeyStroke> java.awt.Window.getFocusTraversalKeys(int)"""
        return 'Set'._wrap(super(_Window, self).getFocusTraversalKeys(_int.valueOf(arg0)))

    @overload
    def contains(self, arg0: 'Point') -> bool:
        """public boolean java.awt.Component.contains(java.awt.Point)"""
        return bool._wrap(super(_Component, self).contains(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def setFocusCycleRoot(self, arg0: bool):
        """public final void java.awt.Window.setFocusCycleRoot(boolean)"""
        super(_Window, self).setFocusCycleRoot(_boolean.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,short,short)"""
        super(_Component, self).firePropertyChange(arg0, _short.valueOf(arg1), _short.valueOf(arg2))

    @override
    @overload
    def removeWindowListener(self, arg0: 'WindowListener'):
        """public synchronized void java.awt.Window.removeWindowListener(java.awt.event.WindowListener)"""
        super(_Window, self).removeWindowListener(arg0)

    @override
    @overload
    def dispatchEvent(self, arg0: 'AWTEvent'):
        """public final void java.awt.Component.dispatchEvent(java.awt.AWTEvent)"""
        super(_Component, self).dispatchEvent(arg0)

    @override
    @overload
    def removeContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.removeContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).removeContainerListener(arg0)

    @override
    @overload
    def getGraphicsConfiguration(self) -> 'GraphicsConfiguration':
        """public java.awt.GraphicsConfiguration java.awt.Component.getGraphicsConfiguration()"""
        return 'GraphicsConfiguration'._wrap(super(Component, self).getGraphicsConfiguration())

    @override
    @overload
    def getShape(self) -> 'Shape':
        """public java.awt.Shape java.awt.Window.getShape()"""
        return 'Shape'._wrap(super(Window, self).getShape())

    @override
    @overload
    def pack(self):
        """public void java.awt.Window.pack()"""
        super(Window, self).pack()

    @override
    @overload
    def removeWindowFocusListener(self, arg0: 'WindowFocusListener'):
        """public synchronized void java.awt.Window.removeWindowFocusListener(java.awt.event.WindowFocusListener)"""
        super(_Window, self).removeWindowFocusListener(arg0)

    @overload
    def findComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(arg0))

    @override
    @overload
    def resize(self, arg0: int, arg1: int):
        """public void java.awt.Component.resize(int,int)"""
        super(_Component, self).resize(_int.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def imageUpdate(self, arg0: 'Image', arg1: int, arg2: int, arg3: int, arg4: int, arg5: int) -> bool:
        """public boolean java.awt.Component.imageUpdate(java.awt.Image,int,int,int,int,int)"""
        return bool._wrap(super(_Component, self).imageUpdate(arg0, _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4), _int.valueOf(arg5)))

    @override
    @overload
    def getGraphics(self) -> 'Graphics':
        """public java.awt.Graphics javax.swing.JFrame.getGraphics()"""
        return 'Graphics'._wrap(super(JFrame, self).getGraphics())

    @override
    @overload
    def transferFocusBackward(self):
        """public void java.awt.Component.transferFocusBackward()"""
        super(Component, self).transferFocusBackward()

    @override
    @overload
    def isOpaque(self) -> bool:
        """public boolean java.awt.Window.isOpaque()"""
        return bool._wrap(super(Window, self).isOpaque())

    @override
    @overload
    def getOwnedWindows(self) -> List['Window']:
        """public java.awt.Window[] java.awt.Window.getOwnedWindows()"""
        return List['Window']._wrap(super(Window, self).getOwnedWindows())

    @overload
    def getPropertyChangeListeners(self, arg0: str) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners(java.lang.String)"""
        return List['PropertyChangeListener']._wrap(super(_Component, self).getPropertyChangeListeners(arg0))

    @override
    @overload
    def remove(self, arg0: 'Component'):
        """public void javax.swing.JFrame.remove(java.awt.Component)"""
        super(_JFrame, self).remove(arg0)

    @override
    @overload
    def isLocationByPlatform(self) -> bool:
        """public boolean java.awt.Window.isLocationByPlatform()"""
        return bool._wrap(super(Window, self).isLocationByPlatform())

    @override
    @overload
    def addComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.addComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).addComponentListener(arg0)

    @override
    @overload
    def setCursor(self, arg0: 'Cursor'):
        """public void java.awt.Window.setCursor(java.awt.Cursor)"""
        super(_Window, self).setCursor(arg0)

    @override
    @overload
    def addNotify(self):
        """public void java.awt.Frame.addNotify()"""
        super(Frame, self).addNotify()

    @override
    @overload
    def getFont(self) -> 'Font':
        """public java.awt.Font java.awt.Component.getFont()"""
        return 'Font'._wrap(super(Component, self).getFont())

    @staticmethod
    @overload
    def isDefaultLookAndFeelDecorated() -> bool:
        """public static boolean javax.swing.JFrame.isDefaultLookAndFeelDecorated()"""
        return bool._wrap(_JFrame.isDefaultLookAndFeelDecorated())

    @overload
    def prepareImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @override
    @overload
    def setMaximumSize(self, arg0: 'Dimension'):
        """public void java.awt.Component.setMaximumSize(java.awt.Dimension)"""
        super(_Component, self).setMaximumSize(arg0)

    @override
    @overload
    def setForeground(self, arg0: 'Color'):
        """public void java.awt.Component.setForeground(java.awt.Color)"""
        super(_Component, self).setForeground(arg0)

    @overload
    def mouseDrag(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDrag(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDrag(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def setSize(self, arg0: 'Dimension'):
        """public void java.awt.Window.setSize(java.awt.Dimension)"""
        super(_Window, self).setSize(arg0)

    @overload
    def createVolatileImage(self, arg0: int, arg1: int, arg2: 'ImageCapabilities') -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int,java.awt.ImageCapabilities) throws java.awt.AWTException"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1), arg2))

    @override
    @overload
    def bounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.bounds()"""
        return 'Rectangle'._wrap(super(Component, self).bounds())

    @override
    @overload
    def add(self, arg0: 'PopupMenu'):
        """public void java.awt.Component.add(java.awt.PopupMenu)"""
        super(_Component, self).add(arg0)

    @override
    @overload
    def isVisible(self) -> bool:
        """public boolean java.awt.Component.isVisible()"""
        return bool._wrap(super(Component, self).isVisible())

    @override
    @overload
    def setDropTarget(self, arg0: 'DropTarget'):
        """public synchronized void java.awt.Component.setDropTarget(java.awt.dnd.DropTarget)"""
        super(_Component, self).setDropTarget(arg0)

    @override
    @overload
    def isFocusableWindow(self) -> bool:
        """public final boolean java.awt.Window.isFocusableWindow()"""
        return bool._wrap(super(Window, self).isFocusableWindow())

    @override
    @overload
    def getLocationOnScreen(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocationOnScreen()"""
        return 'Point'._wrap(super(Component, self).getLocationOnScreen())

    @overload
    def getComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def isAlwaysOnTop(self) -> bool:
        """public final boolean java.awt.Window.isAlwaysOnTop()"""
        return bool._wrap(super(Window, self).isAlwaysOnTop())

    @staticmethod
    @overload
    def getOwnerlessWindows() -> List['Window']:
        """public static java.awt.Window[] java.awt.Window.getOwnerlessWindows()"""
        return List[Window]._wrap(_Window.getOwnerlessWindows())

    @override
    @overload
    def getIconImage(self) -> 'Image':
        """public java.awt.Image java.awt.Frame.getIconImage()"""
        return 'Image'._wrap(super(Frame, self).getIconImage())

    @override
    @overload
    def isMaximumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMaximumSizeSet()"""
        return bool._wrap(super(Component, self).isMaximumSizeSet())

    @override
    @overload
    def isFocusable(self) -> bool:
        """public boolean java.awt.Component.isFocusable()"""
        return bool._wrap(super(Component, self).isFocusable())

    @override
    @overload
    def requestFocusInWindow(self) -> bool:
        """public boolean java.awt.Component.requestFocusInWindow()"""
        return bool._wrap(super(Component, self).requestFocusInWindow())

    @override
    @overload
    def isFocusTraversalPolicyProvider(self) -> bool:
        """public final boolean java.awt.Container.isFocusTraversalPolicyProvider()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicyProvider())

    @override
    @overload
    def getMouseListeners(self) -> List['MouseListener']:
        """public synchronized java.awt.event.MouseListener[] java.awt.Component.getMouseListeners()"""
        return List['MouseListener']._wrap(super(Component, self).getMouseListeners())

    @override
    @overload
    def setFont(self, arg0: 'Font'):
        """public void java.awt.Container.setFont(java.awt.Font)"""
        super(_Container, self).setFont(arg0)

    @override
    @overload
    def transferFocusUpCycle(self):
        """public void java.awt.Component.transferFocusUpCycle()"""
        super(Component, self).transferFocusUpCycle()

    @override
    @overload
    def removeKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.removeKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).removeKeyListener(arg0)

    @override
    @overload
    def getMouseMotionListeners(self) -> List['MouseMotionListener']:
        """public synchronized java.awt.event.MouseMotionListener[] java.awt.Component.getMouseMotionListeners()"""
        return List['MouseMotionListener']._wrap(super(Component, self).getMouseMotionListeners())

    @override
    @overload
    def setIconImage(self, arg0: 'Image'):
        """public void javax.swing.JFrame.setIconImage(java.awt.Image)"""
        super(_JFrame, self).setIconImage(arg0)

    @override
    @overload
    def addContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.addContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).addContainerListener(arg0)

    @override
    @overload
    def isFocusTraversable(self) -> bool:
        """public boolean java.awt.Component.isFocusTraversable()"""
        return bool._wrap(super(Component, self).isFocusTraversable())

    @overload
    def mouseExit(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseExit(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseExit(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def setMixingCutoutShape(self, arg0: 'Shape'):
        """public void java.awt.Component.setMixingCutoutShape(java.awt.Shape)"""
        super(_Component, self).setMixingCutoutShape(arg0)

    @override
    @overload
    def toFront(self):
        """public void java.awt.Window.toFront()"""
        super(Window, self).toFront()

    @override
    @overload
    def addWindowStateListener(self, arg0: 'WindowStateListener'):
        """public synchronized void java.awt.Window.addWindowStateListener(java.awt.event.WindowStateListener)"""
        super(_Window, self).addWindowStateListener(arg0)

    @overload
    def getSize(self, arg0: 'Dimension') -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.getSize(java.awt.Dimension)"""
        return 'Dimension'._wrap(super(_Component, self).getSize(arg0))

    @override
    @overload
    def requestFocus(self, arg0: 'Cause'):
        """public void java.awt.Component.requestFocus(java.awt.event.FocusEvent$Cause)"""
        super(_Component, self).requestFocus(arg0)

    @overload
    def createImage(self, arg0: int, arg1: int) -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(int,int)"""
        return 'Image'._wrap(super(_Component, self).createImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def setUndecorated(self, arg0: bool):
        """public void java.awt.Frame.setUndecorated(boolean)"""
        super(_Frame, self).setUndecorated(_boolean.valueOf(arg0))

    @override
    @overload
    def getFocusListeners(self) -> List['FocusListener']:
        """public synchronized java.awt.event.FocusListener[] java.awt.Component.getFocusListeners()"""
        return List['FocusListener']._wrap(super(Component, self).getFocusListeners())

    @override
    @overload
    def setJMenuBar(self, arg0: 'JMenuBar'):
        """public void javax.swing.JFrame.setJMenuBar(javax.swing.JMenuBar)"""
        super(_JFrame, self).setJMenuBar(arg0)

    @overload
    def add(self, arg0: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0))

    @override
    @overload
    def getMouseWheelListeners(self) -> List['MouseWheelListener']:
        """public synchronized java.awt.event.MouseWheelListener[] java.awt.Component.getMouseWheelListeners()"""
        return List['MouseWheelListener']._wrap(super(Component, self).getMouseWheelListeners())

    @overload
    def contains(self, arg0: int, arg1: int) -> bool:
        """public boolean java.awt.Component.contains(int,int)"""
        return bool._wrap(super(_Component, self).contains(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.removeInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).removeInputMethodListener(arg0)

    @override
    @overload
    def setFocusable(self, arg0: bool):
        """public void java.awt.Component.setFocusable(boolean)"""
        super(_Component, self).setFocusable(_boolean.valueOf(arg0))

    @override
    @overload
    def setBounds(self, arg0: 'Rectangle'):
        """public void java.awt.Window.setBounds(java.awt.Rectangle)"""
        super(_Window, self).setBounds(arg0)

    @override
    @overload
    def getJMenuBar(self) -> 'JMenuBar':
        """public javax.swing.JMenuBar javax.swing.JFrame.getJMenuBar()"""
        return 'JMenuBar'._wrap(super(JFrame, self).getJMenuBar())

    @override
    @overload
    def paintComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.paintComponents(java.awt.Graphics)"""
        super(_Container, self).paintComponents(arg0)

    @override
    @overload
    def hide(self):
        """public void java.awt.Window.hide()"""
        super(Window, self).hide()

    @override
    @overload
    def applyResourceBundle(self, arg0: str):
        """public void java.awt.Window.applyResourceBundle(java.lang.String)"""
        super(_Window, self).applyResourceBundle(arg0)

    @override
    @overload
    def addFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.addFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).addFocusListener(arg0)

    @overload
    def prepareImage(self, arg0: 'Image', arg1: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, arg1))

    @override
    @overload
    def isFocusCycleRoot(self) -> bool:
        """public final boolean java.awt.Window.isFocusCycleRoot()"""
        return bool._wrap(super(Window, self).isFocusCycleRoot())

    @override
    @overload
    def addKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.addKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).addKeyListener(arg0)

    @override
    @overload
    def getBufferStrategy(self) -> 'BufferStrategy':
        """public java.awt.image.BufferStrategy java.awt.Window.getBufferStrategy()"""
        return 'BufferStrategy'._wrap(super(Window, self).getBufferStrategy())

    @override
    @overload
    def isUndecorated(self) -> bool:
        """public boolean java.awt.Frame.isUndecorated()"""
        return bool._wrap(super(Frame, self).isUndecorated())

    @override
    @overload
    def resize(self, arg0: 'Dimension'):
        """public void java.awt.Component.resize(java.awt.Dimension)"""
        super(_Component, self).resize(arg0)

    @override
    @overload
    def setComponentZOrder(self, arg0: 'Component', arg1: int):
        """public void java.awt.Container.setComponentZOrder(java.awt.Component,int)"""
        super(_Container, self).setComponentZOrder(arg0, _int.valueOf(arg1))

    @override
    @overload
    def list(self):
        """public void java.awt.Component.list()"""
        super(Component, self).list()

    @overload
    def add(self, arg0: str, arg1: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.lang.String,java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, arg1))

    @override
    @overload
    def setShape(self, arg0: 'Shape'):
        """public void java.awt.Frame.setShape(java.awt.Shape)"""
        super(_Frame, self).setShape(arg0)

    @override
    @overload
    def hasFocus(self) -> bool:
        """public boolean java.awt.Component.hasFocus()"""
        return bool._wrap(super(Component, self).hasFocus())

    @override
    @overload
    def applyResourceBundle(self, arg0: 'ResourceBundle'):
        """public void java.awt.Window.applyResourceBundle(java.util.ResourceBundle)"""
        super(_Window, self).applyResourceBundle(arg0)

    @override
    @overload
    def setEnabled(self, arg0: bool):
        """public void java.awt.Component.setEnabled(boolean)"""
        super(_Component, self).setEnabled(_boolean.valueOf(arg0))

    @overload
    def createVolatileImage(self, arg0: int, arg1: int) -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int)"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.removeHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).removeHierarchyListener(arg0)

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.awt.Component.toString()"""
        return str._wrap(super(Component, self).toString())

    @override
    @overload
    def addMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.addMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).addMouseListener(arg0)

    @override
    @overload
    def getTransferHandler(self) -> 'TransferHandler':
        """public javax.swing.TransferHandler javax.swing.JFrame.getTransferHandler()"""
        return 'TransferHandler'._wrap(super(JFrame, self).getTransferHandler())

    @override
    @overload
    def isFocusOwner(self) -> bool:
        """public boolean java.awt.Component.isFocusOwner()"""
        return bool._wrap(super(Component, self).isFocusOwner())

    @override
    @overload
    def getWindowFocusListeners(self) -> List['WindowFocusListener']:
        """public synchronized java.awt.event.WindowFocusListener[] java.awt.Window.getWindowFocusListeners()"""
        return List['WindowFocusListener']._wrap(super(Window, self).getWindowFocusListeners())

    @override
    @overload
    def enable(self):
        """public void java.awt.Component.enable()"""
        super(Component, self).enable()

    @overload
    def findComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def requestFocus(self):
        """public void java.awt.Component.requestFocus()"""
        super(Component, self).requestFocus()

    @override
    @overload
    def setModalExclusionType(self, arg0: 'ModalExclusionType'):
        """public void java.awt.Window.setModalExclusionType(java.awt.Dialog$ModalExclusionType)"""
        super(_Window, self).setModalExclusionType(arg0)

    @override
    @overload
    def getForeground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getForeground()"""
        return 'Color'._wrap(super(Component, self).getForeground())

    @override
    @overload
    def isAutoRequestFocus(self) -> bool:
        """public boolean java.awt.Window.isAutoRequestFocus()"""
        return bool._wrap(super(Window, self).isAutoRequestFocus())

    @override
    @overload
    def addMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.addMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).addMouseWheelListener(arg0)

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def addWindowListener(self, arg0: 'WindowListener'):
        """public synchronized void java.awt.Window.addWindowListener(java.awt.event.WindowListener)"""
        super(_Window, self).addWindowListener(arg0)

    @override
    @overload
    def setLocationByPlatform(self, arg0: bool):
        """public void java.awt.Window.setLocationByPlatform(boolean)"""
        super(_Window, self).setLocationByPlatform(_boolean.valueOf(arg0))

    @override
    @overload
    def addWindowFocusListener(self, arg0: 'WindowFocusListener'):
        """public synchronized void java.awt.Window.addWindowFocusListener(java.awt.event.WindowFocusListener)"""
        super(_Window, self).addWindowFocusListener(arg0)

    @overload
    def action(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.action(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).action(arg0, arg1))

    @override
    @overload
    def isLightweight(self) -> bool:
        """public boolean java.awt.Component.isLightweight()"""
        return bool._wrap(super(Component, self).isLightweight())

    @override
    @overload
    def setContentPane(self, arg0: 'Container'):
        """public void javax.swing.JFrame.setContentPane(java.awt.Container)"""
        super(_JFrame, self).setContentPane(arg0)

    @override
    @overload
    def setFocusTraversalKeysEnabled(self, arg0: bool):
        """public void java.awt.Component.setFocusTraversalKeysEnabled(boolean)"""
        super(_Component, self).setFocusTraversalKeysEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def update(self, arg0: 'Graphics'):
        """public void javax.swing.JFrame.update(java.awt.Graphics)"""
        super(_JFrame, self).update(arg0)

    @override
    @overload
    def setLayeredPane(self, arg0: 'JLayeredPane'):
        """public void javax.swing.JFrame.setLayeredPane(javax.swing.JLayeredPane)"""
        super(_JFrame, self).setLayeredPane(arg0)

    @override
    @overload
    def getAlignmentX(self) -> float:
        """public float java.awt.Container.getAlignmentX()"""
        return float._wrap(super(Container, self).getAlignmentX())

    @override
    @overload
    def getModalExclusionType(self) -> 'ModalExclusionType.Dialog$ModalExclusionType':
        """public java.awt.Dialog$ModalExclusionType java.awt.Window.getModalExclusionType()"""
        return 'ModalExclusionType.Dialog$ModalExclusionType'._wrap(super(Window, self).getModalExclusionType())

    @override
    @overload
    def insets(self) -> 'Insets':
        """public java.awt.Insets java.awt.Container.insets()"""
        return 'Insets'._wrap(super(Container, self).insets())

    @override
    @overload
    def setVisible(self, arg0: bool):
        """public void java.awt.Window.setVisible(boolean)"""
        super(_Window, self).setVisible(_boolean.valueOf(arg0))

    @override
    @overload
    def getOpacity(self) -> float:
        """public float java.awt.Window.getOpacity()"""
        return float._wrap(super(Window, self).getOpacity())

    @override
    @overload
    def setFocusTraversalPolicy(self, arg0: 'FocusTraversalPolicy'):
        """public void java.awt.Container.setFocusTraversalPolicy(java.awt.FocusTraversalPolicy)"""
        super(_Container, self).setFocusTraversalPolicy(arg0)

    @override
    @overload
    def enable(self, arg0: bool):
        """public void java.awt.Component.enable(boolean)"""
        super(_Component, self).enable(_boolean.valueOf(arg0))

    @override
    @overload
    def setSize(self, arg0: int, arg1: int):
        """public void java.awt.Window.setSize(int,int)"""
        super(_Window, self).setSize(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def printAll(self, arg0: 'Graphics'):
        """public void java.awt.Component.printAll(java.awt.Graphics)"""
        super(_Component, self).printAll(arg0)

    @override
    @overload
    def setCursor(self, arg0: int):
        """public void java.awt.Frame.setCursor(int)"""
        super(_Frame, self).setCursor(_int.valueOf(arg0))

    @override
    @overload
    def getWarningString(self) -> str:
        """public final java.lang.String java.awt.Window.getWarningString()"""
        return str._wrap(super(Window, self).getWarningString())

    @override
    @overload
    def setOpacity(self, arg0: float):
        """public void java.awt.Frame.setOpacity(float)"""
        super(_Frame, self).setOpacity(_float.valueOf(arg0))

    @override
    @overload
    def getInsets(self) -> 'Insets':
        """public java.awt.Insets java.awt.Container.getInsets()"""
        return 'Insets'._wrap(super(Container, self).getInsets())

    @override
    @overload
    def setLocation(self, arg0: int, arg1: int):
        """public void java.awt.Window.setLocation(int,int)"""
        super(_Window, self).setLocation(_int.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def getComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(arg0))

    @override
    @overload
    def size(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.size()"""
        return 'Dimension'._wrap(super(Component, self).size())

    @overload
    def mouseMove(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseMove(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseMove(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def lostFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.lostFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).lostFocus(arg0, arg1))

    @override
    @overload
    def getMaximizedBounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Frame.getMaximizedBounds()"""
        return 'Rectangle'._wrap(super(Frame, self).getMaximizedBounds())

    @override
    @overload
    def isMinimumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMinimumSizeSet()"""
        return bool._wrap(super(Component, self).isMinimumSizeSet())

    @override
    @overload
    def isForegroundSet(self) -> bool:
        """public boolean java.awt.Component.isForegroundSet()"""
        return bool._wrap(super(Component, self).isForegroundSet())

    @override
    @overload
    def getWindowListeners(self) -> List['WindowListener']:
        """public synchronized java.awt.event.WindowListener[] java.awt.Window.getWindowListeners()"""
        return List['WindowListener']._wrap(super(Window, self).getWindowListeners())

    @overload
    def getMousePosition(self, arg0: bool) -> 'Point':
        """public java.awt.Point java.awt.Container.getMousePosition(boolean) throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(_Container, self).getMousePosition(_boolean.valueOf(arg0)))

    @override
    @overload
    def show(self):
        """public void java.awt.Window.show()"""
        super(Window, self).show()

    @override
    @overload
    def getHierarchyBoundsListeners(self) -> List['HierarchyBoundsListener']:
        """public synchronized java.awt.event.HierarchyBoundsListener[] java.awt.Component.getHierarchyBoundsListeners()"""
        return List['HierarchyBoundsListener']._wrap(super(Component, self).getHierarchyBoundsListeners())

    @override
    @overload
    def minimumSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.minimumSize()"""
        return 'Dimension'._wrap(super(Container, self).minimumSize())

    @overload
    def handleEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.handleEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).handleEvent(arg0))

    @override
    @overload
    def getExtendedState(self) -> int:
        """public int java.awt.Frame.getExtendedState()"""
        return int._wrap(super(Frame, self).getExtendedState())

    @override
    @overload
    def isValidateRoot(self) -> bool:
        """public boolean java.awt.Window.isValidateRoot()"""
        return bool._wrap(super(Window, self).isValidateRoot())

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def getLocation(self, arg0: 'Point') -> 'Point':
        """public java.awt.Point java.awt.Component.getLocation(java.awt.Point)"""
        return 'Point'._wrap(super(_Component, self).getLocation(arg0))

    @override
    @overload
    def getComponentListeners(self) -> List['ComponentListener']:
        """public synchronized java.awt.event.ComponentListener[] java.awt.Component.getComponentListeners()"""
        return List['ComponentListener']._wrap(super(Component, self).getComponentListeners())

    @override
    @overload
    def deliverEvent(self, arg0: 'Event'):
        """public void java.awt.Container.deliverEvent(java.awt.Event)"""
        super(_Container, self).deliverEvent(arg0)

    @override
    @overload
    def getMinimumSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.getMinimumSize()"""
        return 'Dimension'._wrap(super(Container, self).getMinimumSize())

    @override
    @overload
    def addHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.addHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).addHierarchyBoundsListener(arg0)

    @override
    @overload
    def isResizable(self) -> bool:
        """public boolean java.awt.Frame.isResizable()"""
        return bool._wrap(super(Frame, self).isResizable())

    @override
    @overload
    def getY(self) -> int:
        """public int java.awt.Component.getY()"""
        return int._wrap(super(Component, self).getY())

    @override
    @overload
    def getOwner(self) -> 'Window':
        """public java.awt.Window java.awt.Window.getOwner()"""
        return 'Window'._wrap(super(Window, self).getOwner())

    @overload
    def add(self, arg0: 'Component', arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component,int)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def repaint(self):
        """public void java.awt.Component.repaint()"""
        super(Component, self).repaint()

    @overload
    def gotFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.gotFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).gotFocus(arg0, arg1))

    @overload
    def postEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Window.postEvent(java.awt.Event)"""
        return bool._wrap(super(_Window, self).postEvent(arg0))

    @override
    @overload
    def printComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.printComponents(java.awt.Graphics)"""
        super(_Container, self).printComponents(arg0)

    @override
    @overload
    def getColorModel(self) -> 'ColorModel':
        """public java.awt.image.ColorModel java.awt.Component.getColorModel()"""
        return 'ColorModel'._wrap(super(Component, self).getColorModel())

    @override
    @overload
    def setFocusTraversalPolicyProvider(self, arg0: bool):
        """public final void java.awt.Container.setFocusTraversalPolicyProvider(boolean)"""
        super(_Container, self).setFocusTraversalPolicyProvider(_boolean.valueOf(arg0))

    @overload
    def getComponentZOrder(self, arg0: 'Component') -> int:
        """public int java.awt.Container.getComponentZOrder(java.awt.Component)"""
        return int._wrap(super(_Container, self).getComponentZOrder(arg0))

    @overload
    def areFocusTraversalKeysSet(self, arg0: int) -> bool:
        """public boolean java.awt.Container.areFocusTraversalKeysSet(int)"""
        return bool._wrap(super(_Container, self).areFocusTraversalKeysSet(_int.valueOf(arg0)))

    @override
    @overload
    def getSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.getSize()"""
        return 'Dimension'._wrap(super(Component, self).getSize())

    @override
    @overload
    def setName(self, arg0: str):
        """public void java.awt.Component.setName(java.lang.String)"""
        super(_Component, self).setName(arg0)

    @overload
    def mouseEnter(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseEnter(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseEnter(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def setMinimumSize(self, arg0: 'Dimension'):
        """public void java.awt.Window.setMinimumSize(java.awt.Dimension)"""
        super(_Window, self).setMinimumSize(arg0)

    @override
    @overload
    def isCursorSet(self) -> bool:
        """public boolean java.awt.Component.isCursorSet()"""
        return bool._wrap(super(Component, self).isCursorSet())

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object, arg2: int):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object,int)"""
        super(_Container, self).add(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def paint(self, arg0: 'Graphics'):
        """public void java.awt.Window.paint(java.awt.Graphics)"""
        super(_Window, self).paint(arg0)

    @override
    @overload
    def isFocusTraversalPolicySet(self) -> bool:
        """public boolean java.awt.Container.isFocusTraversalPolicySet()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicySet())

    @override
    @overload
    def isDoubleBuffered(self) -> bool:
        """public boolean java.awt.Component.isDoubleBuffered()"""
        return bool._wrap(super(Component, self).isDoubleBuffered())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool._wrap(super(_object, self).equals(arg0))

    @overload
    def getBaseline(self, arg0: int, arg1: int) -> int:
        """public int java.awt.Component.getBaseline(int,int)"""
        return int._wrap(super(_Component, self).getBaseline(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def isEnabled(self) -> bool:
        """public boolean java.awt.Component.isEnabled()"""
        return bool._wrap(super(Component, self).isEnabled())

    @override
    @overload
    def move(self, arg0: int, arg1: int):
        """public void java.awt.Component.move(int,int)"""
        super(_Component, self).move(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getName(self) -> str:
        """public java.lang.String java.awt.Component.getName()"""
        return str._wrap(super(Component, self).getName())

    @override
    @overload
    def getX(self) -> int:
        """public int java.awt.Component.getX()"""
        return int._wrap(super(Component, self).getX())

    @override
    @overload
    def addMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.addMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).addMouseMotionListener(arg0)

    @override
    @overload
    def addPropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Window.addPropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Window, self).addPropertyChangeListener(arg0)

    @override
    @overload
    def getIgnoreRepaint(self) -> bool:
        """public boolean java.awt.Component.getIgnoreRepaint()"""
        return bool._wrap(super(Component, self).getIgnoreRepaint())

    @overload
    def isFocusCycleRoot(self, arg0: 'Container') -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot(java.awt.Container)"""
        return bool._wrap(super(_Container, self).isFocusCycleRoot(arg0))

    @override
    @overload
    def setLocale(self, arg0: 'Locale'):
        """public void java.awt.Component.setLocale(java.util.Locale)"""
        super(_Component, self).setLocale(arg0)

    @override
    @overload
    def paintAll(self, arg0: 'Graphics'):
        """public void java.awt.Component.paintAll(java.awt.Graphics)"""
        super(_Component, self).paintAll(arg0)

    @override
    @overload
    def getContentPane(self) -> 'Container':
        """public java.awt.Container javax.swing.JFrame.getContentPane()"""
        return 'Container'._wrap(super(JFrame, self).getContentPane())

    @override
    @overload
    def getState(self) -> int:
        """public synchronized int java.awt.Frame.getState()"""
        return int._wrap(super(Frame, self).getState())

    @override
    @overload
    def setPreferredSize(self, arg0: 'Dimension'):
        """public void java.awt.Component.setPreferredSize(java.awt.Dimension)"""
        super(_Component, self).setPreferredSize(arg0)

    @override
    @overload
    def isPreferredSizeSet(self) -> bool:
        """public boolean java.awt.Component.isPreferredSizeSet()"""
        return bool._wrap(super(Component, self).isPreferredSizeSet())

    @override
    @overload
    def addInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.addInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).addInputMethodListener(arg0)

    @override
    @overload
    def removeMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.removeMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).removeMouseWheelListener(arg0)

    @override
    @overload
    def print(self, arg0: 'Graphics'):
        """public void java.awt.Container.print(java.awt.Graphics)"""
        super(_Container, self).print(arg0)

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,byte,byte)"""
        super(_Component, self).firePropertyChange(arg0, _byte.valueOf(arg1), _byte.valueOf(arg2))

    @override
    @overload
    def transferFocusDownCycle(self):
        """public void java.awt.Container.transferFocusDownCycle()"""
        super(Container, self).transferFocusDownCycle()

    @override
    @overload
    def setBounds(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Window.setBounds(int,int,int,int)"""
        super(_Window, self).setBounds(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def removeWindowStateListener(self, arg0: 'WindowStateListener'):
        """public synchronized void java.awt.Window.removeWindowStateListener(java.awt.event.WindowStateListener)"""
        super(_Window, self).removeWindowStateListener(arg0)

    @override
    @overload
    def getAccessibleContext(self) -> 'AccessibleContext':
        """public javax.accessibility.AccessibleContext javax.swing.JFrame.getAccessibleContext()"""
        return 'AccessibleContext'._wrap(super(JFrame, self).getAccessibleContext())

    @override
    @overload
    def setType(self, arg0: 'Type'):
        """public void java.awt.Window.setType(java.awt.Window$Type)"""
        super(_Window, self).setType(arg0)

    @override
    @overload
    def getGlassPane(self) -> 'Component':
        """public java.awt.Component javax.swing.JFrame.getGlassPane()"""
        return 'Component'._wrap(super(JFrame, self).getGlassPane())

    @override
    @overload
    def setFocusableWindowState(self, arg0: bool):
        """public void java.awt.Window.setFocusableWindowState(boolean)"""
        super(_Window, self).setFocusableWindowState(_boolean.valueOf(arg0))

    @override
    @overload
    def repaint(self, arg0: int):
        """public void java.awt.Component.repaint(long)"""
        super(_Component, self).repaint(_long.valueOf(arg0))

    @override
    @overload
    def removeHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.removeHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).removeHierarchyBoundsListener(arg0)

    @override
    @overload
    def getMousePosition(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getMousePosition() throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(Component, self).getMousePosition())

    @override
    @overload
    def getType(self) -> 'Type.Window$Type':
        """public java.awt.Window$Type java.awt.Window.getType()"""
        return 'Type.Window$Type'._wrap(super(Window, self).getType())

    @override
    @overload
    def getComponentCount(self) -> int:
        """public int java.awt.Container.getComponentCount()"""
        return int._wrap(super(Container, self).getComponentCount())

    @override
    @overload
    def getPreferredSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.getPreferredSize()"""
        return 'Dimension'._wrap(super(Container, self).getPreferredSize())

    @override
    @overload
    def getInputMethodRequests(self) -> 'InputMethodRequests':
        """public java.awt.im.InputMethodRequests java.awt.Component.getInputMethodRequests()"""
        return 'InputMethodRequests'._wrap(super(Component, self).getInputMethodRequests())

    @override
    @overload
    def getRootPane(self) -> 'JRootPane':
        """public javax.swing.JRootPane javax.swing.JFrame.getRootPane()"""
        return 'JRootPane'._wrap(super(JFrame, self).getRootPane())

    @override
    @overload
    def getWindowStateListeners(self) -> List['WindowStateListener']:
        """public synchronized java.awt.event.WindowStateListener[] java.awt.Window.getWindowStateListeners()"""
        return List['WindowStateListener']._wrap(super(Window, self).getWindowStateListeners())

    @override
    @overload
    def isActive(self) -> bool:
        """public boolean java.awt.Window.isActive()"""
        return bool._wrap(super(Window, self).isActive())

    @overload
    def getFontMetrics(self, arg0: 'Font') -> 'FontMetrics':
        """public java.awt.FontMetrics java.awt.Component.getFontMetrics(java.awt.Font)"""
        return 'FontMetrics'._wrap(super(_Component, self).getFontMetrics(arg0))

    @override
    @overload
    def setTransferHandler(self, arg0: 'TransferHandler'):
        """public void javax.swing.JFrame.setTransferHandler(javax.swing.TransferHandler)"""
        super(_JFrame, self).setTransferHandler(arg0)

    @overload
    def inside(self, arg0: int, arg1: int) -> bool:
        """public boolean java.awt.Component.inside(int,int)"""
        return bool._wrap(super(_Component, self).inside(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def setDefaultCloseOperation(self, arg0: int):
        """public void javax.swing.JFrame.setDefaultCloseOperation(int)"""
        super(_JFrame, self).setDefaultCloseOperation(_int.valueOf(arg0))

    @override
    @overload
    def enableInputMethods(self, arg0: bool):
        """public void java.awt.Component.enableInputMethods(boolean)"""
        super(_Component, self).enableInputMethods(_boolean.valueOf(arg0))

    @override
    @overload
    def layout(self):
        """public void java.awt.Container.layout()"""
        super(Container, self).layout()

    @override
    @overload
    def getInputMethodListeners(self) -> List['InputMethodListener']:
        """public synchronized java.awt.event.InputMethodListener[] java.awt.Component.getInputMethodListeners()"""
        return List['InputMethodListener']._wrap(super(Component, self).getInputMethodListeners())

    @override
    @overload
    def transferFocus(self):
        """public void java.awt.Component.transferFocus()"""
        super(Component, self).transferFocus()

    @override
    @overload
    def isShowing(self) -> bool:
        """public boolean java.awt.Window.isShowing()"""
        return bool._wrap(super(Window, self).isShowing())

    @override
    @overload
    def removeComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.removeComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).removeComponentListener(arg0)

    @override
    @overload
    def getCursor(self) -> 'Cursor':
        """public java.awt.Cursor java.awt.Component.getCursor()"""
        return 'Cursor'._wrap(super(Component, self).getCursor())

    @override
    @overload
    def setMenuBar(self, arg0: 'MenuBar'):
        """public void java.awt.Frame.setMenuBar(java.awt.MenuBar)"""
        super(_Frame, self).setMenuBar(arg0)

    @override
    @overload
    def getContainerListeners(self) -> List['ContainerListener']:
        """public synchronized java.awt.event.ContainerListener[] java.awt.Container.getContainerListeners()"""
        return List['ContainerListener']._wrap(super(Container, self).getContainerListeners())

    @override
    @overload
    def getMaximumSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.getMaximumSize()"""
        return 'Dimension'._wrap(super(Container, self).getMaximumSize())

    @override
    @overload
    def removeAll(self):
        """public void java.awt.Container.removeAll()"""
        super(Container, self).removeAll()

    @overload
    def isAncestorOf(self, arg0: 'Component') -> bool:
        """public boolean java.awt.Container.isAncestorOf(java.awt.Component)"""
        return bool._wrap(super(_Container, self).isAncestorOf(arg0))

    @override
    @overload
    def validate(self):
        """public void java.awt.Container.validate()"""
        super(Container, self).validate()

    @overload
    def createImage(self, arg0: 'ImageProducer') -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(java.awt.image.ImageProducer)"""
        return 'Image'._wrap(super(_Component, self).createImage(arg0))

    @override
    @overload
    def setLocationRelativeTo(self, arg0: 'Component'):
        """public void java.awt.Window.setLocationRelativeTo(java.awt.Component)"""
        super(_Window, self).setLocationRelativeTo(arg0)

    @override
    @overload
    def removePropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0, arg1)

    @override
    @overload
    def countComponents(self) -> int:
        """public int java.awt.Container.countComponents()"""
        return int._wrap(super(Container, self).countComponents())

    @override
    @overload
    def getTitle(self) -> str:
        """public java.lang.String java.awt.Frame.getTitle()"""
        return str._wrap(super(Frame, self).getTitle()) 
 
 
# CLASS: com.badlogic.gdx.tools.flame.StrengthVelocityPanel
from pyquantum_helper import import_once as _import_once
import javax.accessibility.AccessibleContext as AccessibleContext
import com.badlogic.gdx.tools.flame.StrengthVelocityPanel as _StrengthVelocityPanel
_StrengthVelocityPanel = _StrengthVelocityPanel
import javax.swing.JToolTip as JToolTip
import java.awt.event.HierarchyBoundsListener as HierarchyBoundsListener
import java.awt.event.ActionListener as _ActionListener
_ActionListener = _ActionListener
import java.awt.ComponentOrientation as _ComponentOrientation
_ComponentOrientation = _ComponentOrientation
import java.awt.image.ImageProducer as ImageProducer
import java.awt.GraphicsConfiguration as GraphicsConfiguration
import java.awt.Graphics as _Graphics
_Graphics = _Graphics
import javax.swing.JToolTip as _JToolTip
_JToolTip = _JToolTip
import java.awt.Container as _Container
_Container = _Container
import java.awt.MenuComponent as MenuComponent
import java.awt.im.InputMethodRequests as _InputMethodRequests
_InputMethodRequests = _InputMethodRequests
import java.awt.FocusTraversalPolicy as _FocusTraversalPolicy
_FocusTraversalPolicy = _FocusTraversalPolicy
import java.lang.Byte as _byte
import java.awt.Dimension as Dimension
import java.awt.Font as _Font
_Font = _Font
import javax.swing.plaf.PanelUI as _PanelUI
_PanelUI = _PanelUI
import java.awt.event.ContainerListener as ContainerListener
import javax.swing.event.AncestorListener as AncestorListener
import java.awt.AWTEvent as AWTEvent
import javax.swing.JPanel as JPanel
import java.awt.image.ColorModel as _ColorModel
_ColorModel = _ColorModel
import java.lang.Object as _object
import java.awt.ComponentOrientation as ComponentOrientation
import java.awt.im.InputContext as _InputContext
_InputContext = _InputContext
from builtins import float
import java.awt.event.HierarchyListener as HierarchyListener
import java.awt.event.InputMethodListener as InputMethodListener
from typing import List
import java.awt.event.MouseWheelListener as _MouseWheelListener
_MouseWheelListener = _MouseWheelListener
import java.awt.event.KeyListener as KeyListener
import java.awt.Component as Component
from builtins import int
import java.awt.LayoutManager as LayoutManager
import java.awt.FontMetrics as _FontMetrics
_FontMetrics = _FontMetrics
import java.awt.Container as Container
from builtins import type
import java.awt.image.VolatileImage as _VolatileImage
_VolatileImage = _VolatileImage
import java.awt.Shape as Shape
import com.badlogic.gdx.tools.flame.EditorPanel as _EditorPanel
_EditorPanel = _EditorPanel
import java.awt.Rectangle as Rectangle
import java.awt.event.ContainerListener as _ContainerListener
_ContainerListener = _ContainerListener
import java.awt.event.HierarchyListener as _HierarchyListener
_HierarchyListener = _HierarchyListener
import java.lang.String as _string
import javax.swing.InputVerifier as _InputVerifier
_InputVerifier = _InputVerifier
import java.awt.Insets as _Insets
_Insets = _Insets
import javax.swing.border.Border as _Border
_Border = _Border
import java.awt.event.ComponentListener as _ComponentListener
_ComponentListener = _ComponentListener
import javax.swing.ActionMap as ActionMap
import java.beans.VetoableChangeListener as VetoableChangeListener
import java.awt.event.ComponentListener as ComponentListener
import javax.swing.KeyStroke as KeyStroke
import java.beans.VetoableChangeListener as _VetoableChangeListener
_VetoableChangeListener = _VetoableChangeListener
from builtins import object
try:
    from pygdx.graphics.g3d.particles import influencers
except ImportError:
    influencers = _import_once("pygdx.graphics.g3d.particles.influencers")

import java.awt.event.KeyListener as _KeyListener
_KeyListener = _KeyListener
import java.awt.Component.BaselineResizeBehavior as BaselineResizeBehavior
import java.awt.Component as _Component_BaselineResizeBehavior
_BaselineResizeBehavior = _Component_BaselineResizeBehavior.BaselineResizeBehavior
import java.awt.Cursor as _Cursor
_Cursor = _Cursor
import java.awt.im.InputMethodRequests as InputMethodRequests
import java.lang.Long as _long
import javax.swing.JPanel as _JPanel
_JPanel = _JPanel
import java.awt.event.FocusListener as _FocusListener
_FocusListener = _FocusListener
import java.lang.Character as _char
import javax.swing.TransferHandler as TransferHandler
import java.awt.event.FocusEvent.Cause as Cause
import javax.swing.JComponent as JComponent
import javax.accessibility.AccessibleContext as _AccessibleContext
_AccessibleContext = _AccessibleContext
import java.awt.event.MouseWheelListener as MouseWheelListener
import java.util.Set as _Set
_Set = _Set
import java.awt.image.ColorModel as ColorModel
import java.lang.Boolean as _boolean
import java.awt.event.MouseMotionListener as MouseMotionListener
import java.util.EventListener as EventListener
import java.awt.Insets as Insets
import javax.swing.KeyStroke as _KeyStroke
_KeyStroke = _KeyStroke
import java.awt.GraphicsConfiguration as _GraphicsConfiguration
_GraphicsConfiguration = _GraphicsConfiguration
import java.awt.dnd.DropTarget as _DropTarget
_DropTarget = _DropTarget
from builtins import bool
import java.beans.PropertyChangeListener as _PropertyChangeListener
_PropertyChangeListener = _PropertyChangeListener
import java.awt.LayoutManager as _LayoutManager
_LayoutManager = _LayoutManager
import java.awt.PopupMenu as PopupMenu
import java.util.EventListener as _EventListener
_EventListener = _EventListener
import java.awt.im.InputContext as InputContext
import java.awt.Component as _Component
_Component = _Component
import java.awt.Font as Font
import java.awt.image.VolatileImage as VolatileImage
import java.awt.dnd.DropTarget as DropTarget
import java.lang.String as _String
_String = _String
import java.lang.Float as _float
import java.awt.Cursor as Cursor
import java.awt.event.MouseListener as _MouseListener
_MouseListener = _MouseListener
import java.awt.Toolkit as _Toolkit
_Toolkit = _Toolkit
import java.io.PrintStream as PrintStream
import javax.swing.JRootPane as _JRootPane
_JRootPane = _JRootPane
import java.awt.Dimension as _Dimension
_Dimension = _Dimension
import java.awt.event.ActionListener as ActionListener
import java.awt.event.MouseEvent as MouseEvent
import java.awt.Color as _Color
_Color = _Color
import javax.swing.JPopupMenu as _JPopupMenu
_JPopupMenu = _JPopupMenu
import javax.swing.InputMap as _InputMap
_InputMap = _InputMap
import java.awt.event.MouseListener as MouseListener
import java.lang.Class as _Class
_Class = _Class
import java.util.Locale as Locale
import java.lang.Double as _double
import javax.swing.plaf.PanelUI as PanelUI
import java.awt.Point as _Point
_Point = _Point
import java.lang.Object as _Object
_Object = _Object
import java.beans.PropertyChangeListener as PropertyChangeListener
import javax.swing.border.Border as Border
import javax.swing.JComponent as _JComponent
_JComponent = _JComponent
import javax.swing.InputVerifier as InputVerifier
import java.io.PrintWriter as PrintWriter
import java.awt.Point as Point
import javax.swing.event.AncestorListener as _AncestorListener
_AncestorListener = _AncestorListener
import java.lang.Short as _short
import java.awt.Toolkit as Toolkit
import java.awt.event.HierarchyBoundsListener as _HierarchyBoundsListener
_HierarchyBoundsListener = _HierarchyBoundsListener
import javax.swing.TransferHandler as _TransferHandler
_TransferHandler = _TransferHandler
import javax.swing.InputMap as InputMap
import java.awt.Rectangle as _Rectangle
_Rectangle = _Rectangle
import javax.swing.JRootPane as JRootPane
import java.awt.Event as Event
import java.awt.event.FocusListener as FocusListener
import java.awt.image.ImageObserver as ImageObserver
from builtins import str
from pyquantum_helper import override
import javax.swing.ActionMap as _ActionMap
_ActionMap = _ActionMap
import java.awt.FocusTraversalPolicy as FocusTraversalPolicy
import java.awt.event.MouseMotionListener as _MouseMotionListener
_MouseMotionListener = _MouseMotionListener
import java.awt.event.InputMethodListener as _InputMethodListener
_InputMethodListener = _InputMethodListener
import javax.swing.JPopupMenu as JPopupMenu
import java.util.Set as Set
import java.lang.Integer as _int
import java.awt.Image as _Image
_Image = _Image
import java.awt.FontMetrics as FontMetrics
import java.awt.Color as Color
import java.awt.Image as Image
import java.awt.Graphics as Graphics
import java.awt.ImageCapabilities as ImageCapabilities
import java.util.Locale as _Locale
_Locale = _Locale
 
class StrengthVelocityPanel():
    """com.badlogic.gdx.tools.flame.StrengthVelocityPanel"""
 
    @staticmethod
    def _wrap(java_value: _StrengthVelocityPanel) -> 'StrengthVelocityPanel':
        return StrengthVelocityPanel(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _StrengthVelocityPanel):
        """
        Dynamic initializer for StrengthVelocityPanel.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_StrengthVelocityPanel__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_StrengthVelocityPanel__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def removeVetoableChangeListener(self, arg0: 'VetoableChangeListener'):
        """public synchronized void javax.swing.JComponent.removeVetoableChangeListener(java.beans.VetoableChangeListener)"""
        super(_JComponent, self).removeVetoableChangeListener(arg0)

    @override
    @overload
    def getComponents(self) -> List['Component']:
        """public java.awt.Component[] java.awt.Container.getComponents()"""
        return List['Component']._wrap(super(Container, self).getComponents())

    @override
    @overload
    def setDebugGraphicsOptions(self, arg0: int):
        """public void javax.swing.JComponent.setDebugGraphicsOptions(int)"""
        super(_JComponent, self).setDebugGraphicsOptions(_int.valueOf(arg0))

    @override
    @overload
    def isValid(self) -> bool:
        """public boolean java.awt.Component.isValid()"""
        return bool._wrap(super(Component, self).isValid())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def getDefaultLocale() -> 'Locale':
        """public static java.util.Locale javax.swing.JComponent.getDefaultLocale()"""
        return Locale._wrap(_JComponent.getDefaultLocale())

    @override
    @overload
    def getInputVerifier(self) -> 'InputVerifier':
        """public javax.swing.InputVerifier javax.swing.JComponent.getInputVerifier()"""
        return 'InputVerifier'._wrap(super(JComponent, self).getInputVerifier())

    @override
    @overload
    def list(self, arg0: 'PrintStream', arg1: int):
        """public void java.awt.Container.list(java.io.PrintStream,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @override
    @overload
    def setUI(self, arg0: 'PanelUI'):
        """public void javax.swing.JPanel.setUI(javax.swing.plaf.PanelUI)"""
        super(_JPanel, self).setUI(arg0)

    @override
    @overload
    def getFocusTraversalPolicy(self) -> 'FocusTraversalPolicy':
        """public java.awt.FocusTraversalPolicy java.awt.Container.getFocusTraversalPolicy()"""
        return 'FocusTraversalPolicy'._wrap(super(Container, self).getFocusTraversalPolicy())

    @override
    @overload
    def getParent(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getParent()"""
        return 'Container'._wrap(super(Component, self).getParent())

    @override
    @overload
    def paintImmediately(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.paintImmediately(java.awt.Rectangle)"""
        super(_JComponent, self).paintImmediately(arg0)

    @staticmethod
    @overload
    def setDefaultLocale(arg0: 'Locale'):
        """public static void javax.swing.JComponent.setDefaultLocale(java.util.Locale)"""
        _JComponent.setDefaultLocale(arg0)

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,float,float)"""
        super(_Component, self).firePropertyChange(arg0, _float.valueOf(arg1), _float.valueOf(arg2))

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object)"""
        super(_Container, self).add(arg0, arg1)

    @override
    @overload
    def getLocale(self) -> 'Locale':
        """public java.util.Locale java.awt.Component.getLocale()"""
        return 'Locale'._wrap(super(Component, self).getLocale())

    @override
    @overload
    def setInheritsPopupMenu(self, arg0: bool):
        """public void javax.swing.JComponent.setInheritsPopupMenu(boolean)"""
        super(_JComponent, self).setInheritsPopupMenu(_boolean.valueOf(arg0))

    @override
    @overload
    def getHierarchyListeners(self) -> List['HierarchyListener']:
        """public synchronized java.awt.event.HierarchyListener[] java.awt.Component.getHierarchyListeners()"""
        return List['HierarchyListener']._wrap(super(Component, self).getHierarchyListeners())

    @override
    @overload
    def nextFocus(self):
        """public void java.awt.Component.nextFocus()"""
        super(Component, self).nextFocus()

    @override
    @overload
    def isPaintingTile(self) -> bool:
        """public boolean javax.swing.JComponent.isPaintingTile()"""
        return bool._wrap(super(JComponent, self).isPaintingTile())

    @override
    @overload
    def getContentPanel(self) -> 'JPanel':
        """public javax.swing.JPanel com.badlogic.gdx.tools.flame.EditorPanel.getContentPanel()"""
        return 'JPanel'._wrap(super(EditorPanel, self).getContentPanel())

    @override
    @overload
    def isDisplayable(self) -> bool:
        """public boolean java.awt.Component.isDisplayable()"""
        return bool._wrap(super(Component, self).isDisplayable())

    @override
    @overload
    def getBounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.getBounds()"""
        return 'Rectangle'._wrap(super(Component, self).getBounds())

    @override
    @overload
    def removeMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.removeMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).removeMouseMotionListener(arg0)

    @override
    @overload
    def isShowing(self) -> bool:
        """public boolean java.awt.Component.isShowing()"""
        return bool._wrap(super(Component, self).isShowing())

    @override
    @overload
    def getDropTarget(self) -> 'DropTarget':
        """public synchronized java.awt.dnd.DropTarget java.awt.Component.getDropTarget()"""
        return 'DropTarget'._wrap(super(Component, self).getDropTarget())

    @override
    @overload
    def isFontSet(self) -> bool:
        """public boolean java.awt.Component.isFontSet()"""
        return bool._wrap(super(Component, self).isFontSet())

    @overload
    def mouseUp(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseUp(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseUp(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def setIgnoreRepaint(self, arg0: bool):
        """public void java.awt.Component.setIgnoreRepaint(boolean)"""
        super(_Component, self).setIgnoreRepaint(_boolean.valueOf(arg0))

    @override
    @overload
    def getPropertyChangeListeners(self) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners()"""
        return List['PropertyChangeListener']._wrap(super(Component, self).getPropertyChangeListeners())

    @override
    @overload
    def isBackgroundSet(self) -> bool:
        """public boolean java.awt.Component.isBackgroundSet()"""
        return bool._wrap(super(Component, self).isBackgroundSet())

    @override
    @overload
    def getLocation(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocation()"""
        return 'Point'._wrap(super(Component, self).getLocation())

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int._wrap(super(object, self).hashCode())

    @override
    @overload
    def location(self) -> 'Point':
        """public java.awt.Point java.awt.Component.location()"""
        return 'Point'._wrap(super(Component, self).location())

    @override
    @overload
    def getComponentOrientation(self) -> 'ComponentOrientation':
        """public java.awt.ComponentOrientation java.awt.Component.getComponentOrientation()"""
        return 'ComponentOrientation'._wrap(super(Component, self).getComponentOrientation())

    @override
    @overload
    def addHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.addHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).addHierarchyListener(arg0)

    @override
    @overload
    def getInheritsPopupMenu(self) -> bool:
        """public boolean javax.swing.JComponent.getInheritsPopupMenu()"""
        return bool._wrap(super(JComponent, self).getInheritsPopupMenu())

    @override
    @overload
    def setComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Component.setComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Component, self).setComponentOrientation(arg0)

    @override
    @overload
    def getFocusCycleRootAncestor(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getFocusCycleRootAncestor()"""
        return 'Container'._wrap(super(Component, self).getFocusCycleRootAncestor())

    @override
    @overload
    def show(self, arg0: bool):
        """public void java.awt.Component.show(boolean)"""
        super(_Component, self).show(_boolean.valueOf(arg0))

    @staticmethod
    @overload
    def addContent(arg0: 'JPanel', arg1: int, arg2: int, arg3: 'JComponent', arg4: bool, arg5: int, arg6: int, arg7: float, arg8: float):
        """public static void com.badlogic.gdx.tools.flame.EditorPanel.addContent(javax.swing.JPanel,int,int,javax.swing.JComponent,boolean,int,int,float,float)"""
        _EditorPanel.addContent(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3, _boolean.valueOf(arg4), _int.valueOf(arg5), _int.valueOf(arg6), _float.valueOf(arg7), _float.valueOf(arg8))

    @override
    @overload
    def grabFocus(self):
        """public void javax.swing.JComponent.grabFocus()"""
        super(JComponent, self).grabFocus()

    @overload
    def locate(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.locate(int,int)"""
        return 'Component'._wrap(super(_Container, self).locate(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def isPaintingForPrint(self) -> bool:
        """public final boolean javax.swing.JComponent.isPaintingForPrint()"""
        return bool._wrap(super(JComponent, self).isPaintingForPrint())

    @overload
    def keyDown(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyDown(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyDown(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,int,int)"""
        super(_JComponent, self).firePropertyChange(arg0, _int.valueOf(arg1), _int.valueOf(arg2))

    @override
    @overload
    def getLayout(self) -> 'LayoutManager':
        """public java.awt.LayoutManager java.awt.Container.getLayout()"""
        return 'LayoutManager'._wrap(super(Container, self).getLayout())

    @override
    @overload
    def preferredSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.preferredSize()"""
        return 'Dimension'._wrap(super(Container, self).preferredSize())

    @override
    @overload
    def addNotify(self):
        """public void javax.swing.JComponent.addNotify()"""
        super(JComponent, self).addNotify()

    @override
    @overload
    def setSize(self, arg0: int, arg1: int):
        """public void java.awt.Component.setSize(int,int)"""
        super(_Component, self).setSize(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.repaint(int,int,int,int)"""
        super(_Component, self).repaint(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @overload
    def requestFocusInWindow(self, arg0: 'Cause') -> bool:
        """public boolean java.awt.Component.requestFocusInWindow(java.awt.event.FocusEvent$Cause)"""
        return bool._wrap(super(_Component, self).requestFocusInWindow(arg0))

    @override
    @overload
    def remove(self, arg0: int):
        """public void java.awt.Container.remove(int)"""
        super(_Container, self).remove(_int.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,long,long)"""
        super(_Component, self).firePropertyChange(arg0, _long.valueOf(arg1), _long.valueOf(arg2))

    @override
    @overload
    def update(self, arg0: 'FlameMain'):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.update(com.badlogic.gdx.tools.flame.FlameMain)"""
        super(_EditorPanel, self).update(arg0)

    @override
    @overload
    def setFocusCycleRoot(self, arg0: bool):
        """public void java.awt.Container.setFocusCycleRoot(boolean)"""
        super(_Container, self).setFocusCycleRoot(_boolean.valueOf(arg0))

    @overload
    def keyUp(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyUp(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyUp(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def setBackground(self, arg0: 'Color'):
        """public void javax.swing.JComponent.setBackground(java.awt.Color)"""
        super(_JComponent, self).setBackground(arg0)

    @override
    @overload
    def doLayout(self):
        """public void java.awt.Container.doLayout()"""
        super(Container, self).doLayout()

    @override
    @overload
    def enable(self):
        """public void javax.swing.JComponent.enable()"""
        super(JComponent, self).enable()

    @override
    @overload
    def getInsets(self) -> 'Insets':
        """public java.awt.Insets javax.swing.JComponent.getInsets()"""
        return 'Insets'._wrap(super(JComponent, self).getInsets())

    @override
    @overload
    def setNextFocusableComponent(self, arg0: 'Component'):
        """public void javax.swing.JComponent.setNextFocusableComponent(java.awt.Component)"""
        super(_JComponent, self).setNextFocusableComponent(arg0)

    @override
    @overload
    def getAlignmentY(self) -> float:
        """public float javax.swing.JComponent.getAlignmentY()"""
        return float._wrap(super(JComponent, self).getAlignmentY())

    @overload
    def checkImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @override
    @overload
    def getFocusTraversalKeysEnabled(self) -> bool:
        """public boolean java.awt.Component.getFocusTraversalKeysEnabled()"""
        return bool._wrap(super(Component, self).getFocusTraversalKeysEnabled())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getRootPane(self) -> 'JRootPane':
        """public javax.swing.JRootPane javax.swing.JComponent.getRootPane()"""
        return 'JRootPane'._wrap(super(JComponent, self).getRootPane())

    @override
    @overload
    def invalidate(self):
        """public void java.awt.Container.invalidate()"""
        super(Container, self).invalidate()

    @override
    @overload
    def resetKeyboardActions(self):
        """public void javax.swing.JComponent.resetKeyboardActions()"""
        super(JComponent, self).resetKeyboardActions()

    @overload
    def getComponent(self, arg0: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponent(int)"""
        return 'Component'._wrap(super(_Container, self).getComponent(_int.valueOf(arg0)))

    @override
    @overload
    def setName(self, arg0: str):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setName(java.lang.String)"""
        super(_EditorPanel, self).setName(arg0)

    @override
    @overload
    def addPropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Container.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Container, self).addPropertyChangeListener(arg0, arg1)

    @override
    @overload
    def setInputMap(self, arg0: int, arg1: 'InputMap'):
        """public final void javax.swing.JComponent.setInputMap(int,javax.swing.InputMap)"""
        super(_JComponent, self).setInputMap(_int.valueOf(arg0), arg1)

    @override
    @overload
    def removePropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0)

    @override
    @overload
    def applyComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Container.applyComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Container, self).applyComponentOrientation(arg0)

    @override
    @overload
    def setBorder(self, arg0: 'Border'):
        """public void javax.swing.JComponent.setBorder(javax.swing.border.Border)"""
        super(_JComponent, self).setBorder(arg0)

    @override
    @overload
    def remove(self, arg0: 'MenuComponent'):
        """public void java.awt.Component.remove(java.awt.MenuComponent)"""
        super(_Component, self).remove(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintStream'):
        """public void java.awt.Component.list(java.io.PrintStream)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def removeMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.removeMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).removeMouseListener(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintWriter'):
        """public void java.awt.Component.list(java.io.PrintWriter)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def getKeyListeners(self) -> List['KeyListener']:
        """public synchronized java.awt.event.KeyListener[] java.awt.Component.getKeyListeners()"""
        return List['KeyListener']._wrap(super(Component, self).getKeyListeners())

    @override
    @overload
    def getInputContext(self) -> 'InputContext':
        """public java.awt.im.InputContext java.awt.Component.getInputContext()"""
        return 'InputContext'._wrap(super(Component, self).getInputContext())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,double,double)"""
        super(_Component, self).firePropertyChange(arg0, _double.valueOf(arg1), _double.valueOf(arg2))

    @override
    @overload
    def removeAncestorListener(self, arg0: 'AncestorListener'):
        """public void javax.swing.JComponent.removeAncestorListener(javax.swing.event.AncestorListener)"""
        super(_JComponent, self).removeAncestorListener(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintWriter', arg1: int):
        """public void java.awt.Container.list(java.io.PrintWriter,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @overload
    def checkImage(self, arg0: 'Image', arg1: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, arg1))

    @override
    @overload
    def removeFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.removeFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).removeFocusListener(arg0)

    @overload
    def mouseDown(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDown(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDown(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def setIsAlwayShown(self, arg0: bool):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setIsAlwayShown(boolean)"""
        super(_EditorPanel, self).setIsAlwayShown(_boolean.valueOf(arg0))

    @overload
    def getConditionForKeyStroke(self, arg0: 'KeyStroke') -> int:
        """public int javax.swing.JComponent.getConditionForKeyStroke(javax.swing.KeyStroke)"""
        return int._wrap(super(_JComponent, self).getConditionForKeyStroke(arg0))

    @override
    @overload
    def getTreeLock(self) -> object:
        """public final java.lang.Object java.awt.Component.getTreeLock()"""
        return object._wrap(super(Component, self).getTreeLock())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @override
    @overload
    def addVetoableChangeListener(self, arg0: 'VetoableChangeListener'):
        """public synchronized void javax.swing.JComponent.addVetoableChangeListener(java.beans.VetoableChangeListener)"""
        super(_JComponent, self).addVetoableChangeListener(arg0)

    @overload
    def contains(self, arg0: 'Point') -> bool:
        """public boolean java.awt.Component.contains(java.awt.Point)"""
        return bool._wrap(super(_Component, self).contains(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,short,short)"""
        super(_Component, self).firePropertyChange(arg0, _short.valueOf(arg1), _short.valueOf(arg2))

    @override
    @overload
    def dispatchEvent(self, arg0: 'AWTEvent'):
        """public final void java.awt.Component.dispatchEvent(java.awt.AWTEvent)"""
        super(_Component, self).dispatchEvent(arg0)

    @override
    @overload
    def removeContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.removeContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).removeContainerListener(arg0)

    @override
    @overload
    def getGraphicsConfiguration(self) -> 'GraphicsConfiguration':
        """public java.awt.GraphicsConfiguration java.awt.Component.getGraphicsConfiguration()"""
        return 'GraphicsConfiguration'._wrap(super(Component, self).getGraphicsConfiguration())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: bool, arg2: bool):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,boolean,boolean)"""
        super(_JComponent, self).firePropertyChange(arg0, _boolean.valueOf(arg1), _boolean.valueOf(arg2))

    @override
    @overload
    def registerKeyboardAction(self, arg0: 'ActionListener', arg1: str, arg2: 'KeyStroke', arg3: int):
        """public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,java.lang.String,javax.swing.KeyStroke,int)"""
        super(_JComponent, self).registerKeyboardAction(arg0, arg1, arg2, _int.valueOf(arg3))

    @overload
    def findComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(arg0))

    @override
    @overload
    def resize(self, arg0: int, arg1: int):
        """public void java.awt.Component.resize(int,int)"""
        super(_Component, self).resize(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getHeight(self) -> int:
        """public int javax.swing.JComponent.getHeight()"""
        return int._wrap(super(JComponent, self).getHeight())

    @override
    @overload
    def getTransferHandler(self) -> 'TransferHandler':
        """public javax.swing.TransferHandler javax.swing.JComponent.getTransferHandler()"""
        return 'TransferHandler'._wrap(super(JComponent, self).getTransferHandler())

    @overload
    def imageUpdate(self, arg0: 'Image', arg1: int, arg2: int, arg3: int, arg4: int, arg5: int) -> bool:
        """public boolean java.awt.Component.imageUpdate(java.awt.Image,int,int,int,int,int)"""
        return bool._wrap(super(_Component, self).imageUpdate(arg0, _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4), _int.valueOf(arg5)))

    @override
    @overload
    def getWidth(self) -> int:
        """public int javax.swing.JComponent.getWidth()"""
        return int._wrap(super(JComponent, self).getWidth())

    @override
    @overload
    def transferFocusBackward(self):
        """public void java.awt.Component.transferFocusBackward()"""
        super(Component, self).transferFocusBackward()

    @overload
    def getPropertyChangeListeners(self, arg0: str) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners(java.lang.String)"""
        return List['PropertyChangeListener']._wrap(super(_Component, self).getPropertyChangeListeners(arg0))

    @override
    @overload
    def getName(self) -> str:
        """public java.lang.String com.badlogic.gdx.tools.flame.EditorPanel.getName()"""
        return str._wrap(super(EditorPanel, self).getName())

    @staticmethod
    @overload
    def isLightweightComponent(arg0: 'Component') -> bool:
        """public static boolean javax.swing.JComponent.isLightweightComponent(java.awt.Component)"""
        return bool._wrap(_JComponent.isLightweightComponent(arg0))

    @override
    @overload
    def getBorder(self) -> 'Border':
        """public javax.swing.border.Border javax.swing.JComponent.getBorder()"""
        return 'Border'._wrap(super(JComponent, self).getBorder())

    @override
    @overload
    def printAll(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.printAll(java.awt.Graphics)"""
        super(_JComponent, self).printAll(arg0)

    @override
    @overload
    def addComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.addComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).addComponentListener(arg0)

    @override
    @overload
    def getBaselineResizeBehavior(self) -> 'BaselineResizeBehavior.Component$BaselineResizeBehavior':
        """public java.awt.Component$BaselineResizeBehavior javax.swing.JComponent.getBaselineResizeBehavior()"""
        return 'BaselineResizeBehavior.Component$BaselineResizeBehavior'._wrap(super(JComponent, self).getBaselineResizeBehavior())

    @override
    @overload
    def print(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.print(java.awt.Graphics)"""
        super(_JComponent, self).print(arg0)

    @override
    @overload
    def setInputVerifier(self, arg0: 'InputVerifier'):
        """public void javax.swing.JComponent.setInputVerifier(javax.swing.InputVerifier)"""
        super(_JComponent, self).setInputVerifier(arg0)

    @override
    @overload
    def addAncestorListener(self, arg0: 'AncestorListener'):
        """public void javax.swing.JComponent.addAncestorListener(javax.swing.event.AncestorListener)"""
        super(_JComponent, self).addAncestorListener(arg0)

    @override
    @overload
    def getFont(self) -> 'Font':
        """public java.awt.Font java.awt.Component.getFont()"""
        return 'Font'._wrap(super(Component, self).getFont())

    @override
    @overload
    def setFont(self, arg0: 'Font'):
        """public void javax.swing.JComponent.setFont(java.awt.Font)"""
        super(_JComponent, self).setFont(arg0)

    @override
    @overload
    def isOptimizedDrawingEnabled(self) -> bool:
        """public boolean javax.swing.JComponent.isOptimizedDrawingEnabled()"""
        return bool._wrap(super(JComponent, self).isOptimizedDrawingEnabled())

    @override
    @overload
    def isValidateRoot(self) -> bool:
        """public boolean javax.swing.JComponent.isValidateRoot()"""
        return bool._wrap(super(JComponent, self).isValidateRoot())

    @overload
    def prepareImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @override
    @overload
    def setHasAdvanced(self, arg0: bool):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setHasAdvanced(boolean)"""
        super(_EditorPanel, self).setHasAdvanced(_boolean.valueOf(arg0))

    @override
    @overload
    def setForeground(self, arg0: 'Color'):
        """public void javax.swing.JComponent.setForeground(java.awt.Color)"""
        super(_JComponent, self).setForeground(arg0)

    @overload
    def mouseDrag(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDrag(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDrag(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def isOpaque(self) -> bool:
        """public boolean javax.swing.JComponent.isOpaque()"""
        return bool._wrap(super(JComponent, self).isOpaque())

    @overload
    def createVolatileImage(self, arg0: int, arg1: int, arg2: 'ImageCapabilities') -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int,java.awt.ImageCapabilities) throws java.awt.AWTException"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1), arg2))

    @override
    @overload
    def bounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.bounds()"""
        return 'Rectangle'._wrap(super(Component, self).bounds())

    @override
    @overload
    def update(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.update(java.awt.Graphics)"""
        super(_JComponent, self).update(arg0)

    @override
    @overload
    def add(self, arg0: 'PopupMenu'):
        """public void java.awt.Component.add(java.awt.PopupMenu)"""
        super(_Component, self).add(arg0)

    @override
    @overload
    def getToolTipText(self) -> str:
        """public java.lang.String javax.swing.JComponent.getToolTipText()"""
        return str._wrap(super(JComponent, self).getToolTipText())

    @override
    @overload
    def isVisible(self) -> bool:
        """public boolean java.awt.Component.isVisible()"""
        return bool._wrap(super(Component, self).isVisible())

    @override
    @overload
    def setDropTarget(self, arg0: 'DropTarget'):
        """public synchronized void java.awt.Component.setDropTarget(java.awt.dnd.DropTarget)"""
        super(_Component, self).setDropTarget(arg0)

    @override
    @overload
    def getLocationOnScreen(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocationOnScreen()"""
        return 'Point'._wrap(super(Component, self).getLocationOnScreen())

    @override
    @overload
    def getY(self) -> int:
        """public int javax.swing.JComponent.getY()"""
        return int._wrap(super(JComponent, self).getY())

    @overload
    def getComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def isMaximumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMaximumSizeSet()"""
        return bool._wrap(super(Component, self).isMaximumSizeSet())

    @override
    @overload
    def setAlignmentY(self, arg0: float):
        """public void javax.swing.JComponent.setAlignmentY(float)"""
        super(_JComponent, self).setAlignmentY(_float.valueOf(arg0))

    @override
    @overload
    def getRegisteredKeyStrokes(self) -> List['KeyStroke']:
        """public javax.swing.KeyStroke[] javax.swing.JComponent.getRegisteredKeyStrokes()"""
        return List['KeyStroke']._wrap(super(JComponent, self).getRegisteredKeyStrokes())

    @override
    @overload
    def isFocusable(self) -> bool:
        """public boolean java.awt.Component.isFocusable()"""
        return bool._wrap(super(Component, self).isFocusable())

    @override
    @overload
    def isFocusTraversalPolicyProvider(self) -> bool:
        """public final boolean java.awt.Container.isFocusTraversalPolicyProvider()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicyProvider())

    @override
    @overload
    def getMouseListeners(self) -> List['MouseListener']:
        """public synchronized java.awt.event.MouseListener[] java.awt.Component.getMouseListeners()"""
        return List['MouseListener']._wrap(super(Component, self).getMouseListeners())

    @override
    @overload
    def registerKeyboardAction(self, arg0: 'ActionListener', arg1: 'KeyStroke', arg2: int):
        """public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,javax.swing.KeyStroke,int)"""
        super(_JComponent, self).registerKeyboardAction(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def transferFocusUpCycle(self):
        """public void java.awt.Component.transferFocusUpCycle()"""
        super(Component, self).transferFocusUpCycle()

    @override
    @overload
    def removeKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.removeKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).removeKeyListener(arg0)

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: str, arg2: str):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,char,char)"""
        super(_JComponent, self).firePropertyChange(arg0, _char.valueOf(arg1), _char.valueOf(arg2))

    @override
    @overload
    def getMouseMotionListeners(self) -> List['MouseMotionListener']:
        """public synchronized java.awt.event.MouseMotionListener[] java.awt.Component.getMouseMotionListeners()"""
        return List['MouseMotionListener']._wrap(super(Component, self).getMouseMotionListeners())

    @override
    @overload
    def getAutoscrolls(self) -> bool:
        """public boolean javax.swing.JComponent.getAutoscrolls()"""
        return bool._wrap(super(JComponent, self).getAutoscrolls())

    @override
    @overload
    def addContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.addContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).addContainerListener(arg0)

    @override
    @overload
    def isFocusTraversable(self) -> bool:
        """public boolean java.awt.Component.isFocusTraversable()"""
        return bool._wrap(super(Component, self).isFocusTraversable())

    @overload
    def mouseExit(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseExit(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseExit(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getBounds(self, arg0: 'Rectangle') -> 'Rectangle':
        """public java.awt.Rectangle javax.swing.JComponent.getBounds(java.awt.Rectangle)"""
        return 'Rectangle'._wrap(super(_JComponent, self).getBounds(arg0))

    @override
    @overload
    def setToolTipText(self, arg0: str):
        """public void javax.swing.JComponent.setToolTipText(java.lang.String)"""
        super(_JComponent, self).setToolTipText(arg0)

    @override
    @overload
    def setAutoscrolls(self, arg0: bool):
        """public void javax.swing.JComponent.setAutoscrolls(boolean)"""
        super(_JComponent, self).setAutoscrolls(_boolean.valueOf(arg0))

    @override
    @overload
    def setComponentPopupMenu(self, arg0: 'JPopupMenu'):
        """public void javax.swing.JComponent.setComponentPopupMenu(javax.swing.JPopupMenu)"""
        super(_JComponent, self).setComponentPopupMenu(arg0)

    @override
    @overload
    def setMixingCutoutShape(self, arg0: 'Shape'):
        """public void java.awt.Component.setMixingCutoutShape(java.awt.Shape)"""
        super(_Component, self).setMixingCutoutShape(arg0)

    @override
    @overload
    def getVisibleRect(self) -> 'Rectangle':
        """public java.awt.Rectangle javax.swing.JComponent.getVisibleRect()"""
        return 'Rectangle'._wrap(super(JComponent, self).getVisibleRect())

    @override
    @overload
    def requestFocus(self, arg0: 'Cause'):
        """public void java.awt.Component.requestFocus(java.awt.event.FocusEvent$Cause)"""
        super(_Component, self).requestFocus(arg0)

    @overload
    def createImage(self, arg0: int, arg1: int) -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(int,int)"""
        return 'Image'._wrap(super(_Component, self).createImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def putClientProperty(self, arg0: object, arg1: object):
        """public final void javax.swing.JComponent.putClientProperty(java.lang.Object,java.lang.Object)"""
        super(_JComponent, self).putClientProperty(arg0, arg1)

    @override
    @overload
    def getVetoableChangeListeners(self) -> List['VetoableChangeListener']:
        """public synchronized java.beans.VetoableChangeListener[] javax.swing.JComponent.getVetoableChangeListeners()"""
        return List['VetoableChangeListener']._wrap(super(JComponent, self).getVetoableChangeListeners())

    @override
    @overload
    def scrollRectToVisible(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.scrollRectToVisible(java.awt.Rectangle)"""
        super(_JComponent, self).scrollRectToVisible(arg0)

    @override
    @overload
    def getTopLevelAncestor(self) -> 'Container':
        """public java.awt.Container javax.swing.JComponent.getTopLevelAncestor()"""
        return 'Container'._wrap(super(JComponent, self).getTopLevelAncestor())

    @override
    @overload
    def isRequestFocusEnabled(self) -> bool:
        """public boolean javax.swing.JComponent.isRequestFocusEnabled()"""
        return bool._wrap(super(JComponent, self).isRequestFocusEnabled())

    @override
    @overload
    def getFocusListeners(self) -> List['FocusListener']:
        """public synchronized java.awt.event.FocusListener[] java.awt.Component.getFocusListeners()"""
        return List['FocusListener']._wrap(super(Component, self).getFocusListeners())

    @override
    @overload
    def setLayout(self, arg0: 'LayoutManager'):
        """public void java.awt.Container.setLayout(java.awt.LayoutManager)"""
        super(_Container, self).setLayout(arg0)

    @overload
    def add(self, arg0: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0))

    @override
    @overload
    def getMouseWheelListeners(self) -> List['MouseWheelListener']:
        """public synchronized java.awt.event.MouseWheelListener[] java.awt.Component.getMouseWheelListeners()"""
        return List['MouseWheelListener']._wrap(super(Component, self).getMouseWheelListeners())

    @override
    @overload
    def reshape(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void javax.swing.JComponent.reshape(int,int,int,int)"""
        super(_JComponent, self).reshape(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def setTransferHandler(self, arg0: 'TransferHandler'):
        """public void javax.swing.JComponent.setTransferHandler(javax.swing.TransferHandler)"""
        super(_JComponent, self).setTransferHandler(arg0)

    @override
    @overload
    def getPreferredSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getPreferredSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getPreferredSize())

    @override
    @overload
    def setLocation(self, arg0: int, arg1: int):
        """public void java.awt.Component.setLocation(int,int)"""
        super(_Component, self).setLocation(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def removeInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.removeInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).removeInputMethodListener(arg0)

    @override
    @overload
    def setFocusable(self, arg0: bool):
        """public void java.awt.Component.setFocusable(boolean)"""
        super(_Component, self).setFocusable(_boolean.valueOf(arg0))

    @override
    @overload
    def paintComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.paintComponents(java.awt.Graphics)"""
        super(_Container, self).paintComponents(arg0)

    @override
    @overload
    def addFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.addFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).addFocusListener(arg0)

    @overload
    def prepareImage(self, arg0: 'Image', arg1: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, arg1))

    @override
    @overload
    def addKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.addKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).addKeyListener(arg0)

    @override
    @overload
    def resize(self, arg0: 'Dimension'):
        """public void java.awt.Component.resize(java.awt.Dimension)"""
        super(_Component, self).resize(arg0)

    @override
    @overload
    def setComponentZOrder(self, arg0: 'Component', arg1: int):
        """public void java.awt.Container.setComponentZOrder(java.awt.Component,int)"""
        super(_Container, self).setComponentZOrder(arg0, _int.valueOf(arg1))

    @override
    @overload
    def list(self):
        """public void java.awt.Component.list()"""
        super(Component, self).list()

    @overload
    def add(self, arg0: str, arg1: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.lang.String,java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, arg1))

    @override
    @overload
    def paintImmediately(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void javax.swing.JComponent.paintImmediately(int,int,int,int)"""
        super(_JComponent, self).paintImmediately(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def getMinimumSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getMinimumSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getMinimumSize())

    @override
    @overload
    def setEnabled(self, arg0: bool):
        """public void javax.swing.JComponent.setEnabled(boolean)"""
        super(_JComponent, self).setEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def hasFocus(self) -> bool:
        """public boolean java.awt.Component.hasFocus()"""
        return bool._wrap(super(Component, self).hasFocus())

    @overload
    def createVolatileImage(self, arg0: int, arg1: int) -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int)"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.removeHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).removeHierarchyListener(arg0)

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.awt.Component.toString()"""
        return str._wrap(super(Component, self).toString())

    @override
    @overload
    def addMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.addMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).addMouseListener(arg0)

    @override
    @overload
    def isFocusOwner(self) -> bool:
        """public boolean java.awt.Component.isFocusOwner()"""
        return bool._wrap(super(Component, self).isFocusOwner())

    @override
    @overload
    def getAccessibleContext(self) -> 'AccessibleContext':
        """public javax.accessibility.AccessibleContext javax.swing.JPanel.getAccessibleContext()"""
        return 'AccessibleContext'._wrap(super(JPanel, self).getAccessibleContext())

    @overload
    def postEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.postEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).postEvent(arg0))

    @overload
    def getLocation(self, arg0: 'Point') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getLocation(java.awt.Point)"""
        return 'Point'._wrap(super(_JComponent, self).getLocation(arg0))

    @overload
    def getBaseline(self, arg0: int, arg1: int) -> int:
        """public int javax.swing.JComponent.getBaseline(int,int)"""
        return int._wrap(super(_JComponent, self).getBaseline(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def findComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeNotify(self):
        """public void javax.swing.JComponent.removeNotify()"""
        super(JComponent, self).removeNotify()

    @override
    @overload
    def getForeground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getForeground()"""
        return 'Color'._wrap(super(Component, self).getForeground())

    @override
    @overload
    def show(self):
        """public void java.awt.Component.show()"""
        super(Component, self).show()

    @override
    @overload
    def isDoubleBuffered(self) -> bool:
        """public boolean javax.swing.JComponent.isDoubleBuffered()"""
        return bool._wrap(super(JComponent, self).isDoubleBuffered())

    @override
    @overload
    def setDescription(self, arg0: str):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setDescription(java.lang.String)"""
        super(_EditorPanel, self).setDescription(arg0)

    @override
    @overload
    def isFocusCycleRoot(self) -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot()"""
        return bool._wrap(super(Container, self).isFocusCycleRoot())

    @override
    @overload
    def addMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.addMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).addMouseWheelListener(arg0)

    @override
    @overload
    def hide(self):
        """public void javax.swing.JComponent.hide()"""
        super(JComponent, self).hide()

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def revalidate(self):
        """public void javax.swing.JComponent.revalidate()"""
        super(JComponent, self).revalidate()

    @override
    @overload
    def getActionMap(self) -> 'ActionMap':
        """public final javax.swing.ActionMap javax.swing.JComponent.getActionMap()"""
        return 'ActionMap'._wrap(super(JComponent, self).getActionMap())

    @override
    @overload
    def requestFocusInWindow(self) -> bool:
        """public boolean javax.swing.JComponent.requestFocusInWindow()"""
        return bool._wrap(super(JComponent, self).requestFocusInWindow())

    @overload
    def action(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.action(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).action(arg0, arg1))

    @override
    @overload
    def isManagingFocus(self) -> bool:
        """public boolean javax.swing.JComponent.isManagingFocus()"""
        return bool._wrap(super(JComponent, self).isManagingFocus())

    @override
    @overload
    def isLightweight(self) -> bool:
        """public boolean java.awt.Component.isLightweight()"""
        return bool._wrap(super(Component, self).isLightweight())

    @override
    @overload
    def setAlignmentX(self, arg0: float):
        """public void javax.swing.JComponent.setAlignmentX(float)"""
        super(_JComponent, self).setAlignmentX(_float.valueOf(arg0))

    @overload
    def getFocusTraversalKeys(self, arg0: int) -> 'Set':
        """public java.util.Set<java.awt.AWTKeyStroke> java.awt.Container.getFocusTraversalKeys(int)"""
        return 'Set'._wrap(super(_Container, self).getFocusTraversalKeys(_int.valueOf(arg0)))

    @override
    @overload
    def setFocusTraversalKeysEnabled(self, arg0: bool):
        """public void java.awt.Component.setFocusTraversalKeysEnabled(boolean)"""
        super(_Component, self).setFocusTraversalKeysEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def remove(self, arg0: 'Component'):
        """public void java.awt.Container.remove(java.awt.Component)"""
        super(_Container, self).remove(arg0)

    @overload
    def getInsets(self, arg0: 'Insets') -> 'Insets':
        """public java.awt.Insets javax.swing.JComponent.getInsets(java.awt.Insets)"""
        return 'Insets'._wrap(super(_JComponent, self).getInsets(arg0))

    @overload
    def __init__(self, arg0: 'FlameMain', arg1: 'Strength', arg2: str, arg3: str, arg4: str):
        """public com.badlogic.gdx.tools.flame.StrengthVelocityPanel(com.badlogic.gdx.tools.flame.FlameMain,com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Strength,java.lang.String,java.lang.String,java.lang.String)"""
        val = _StrengthVelocityPanel(arg0, arg1, arg2, arg3, arg4)
        self.__wrapper = val

    @overload
    def setValue(self, arg0: 'Strength'):
        """public void com.badlogic.gdx.tools.flame.StrengthVelocityPanel.setValue(com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Strength)"""
        super(_StrengthVelocityPanel, self).setValue(arg0)

    @override
    @overload
    def insets(self) -> 'Insets':
        """public java.awt.Insets java.awt.Container.insets()"""
        return 'Insets'._wrap(super(Container, self).insets())

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int):
        """public void javax.swing.JComponent.repaint(long,int,int,int,int)"""
        super(_JComponent, self).repaint(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4))

    @override
    @overload
    def setFocusTraversalPolicy(self, arg0: 'FocusTraversalPolicy'):
        """public void java.awt.Container.setFocusTraversalPolicy(java.awt.FocusTraversalPolicy)"""
        super(_Container, self).setFocusTraversalPolicy(arg0)

    @overload
    def getSize(self, arg0: 'Dimension') -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getSize(java.awt.Dimension)"""
        return 'Dimension'._wrap(super(_JComponent, self).getSize(arg0))

    @override
    @overload
    def enable(self, arg0: bool):
        """public void java.awt.Component.enable(boolean)"""
        super(_Component, self).enable(_boolean.valueOf(arg0))

    @overload
    def getToolTipLocation(self, arg0: 'MouseEvent') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getToolTipLocation(java.awt.event.MouseEvent)"""
        return 'Point'._wrap(super(_JComponent, self).getToolTipLocation(arg0))

    @override
    @overload
    def addPropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Container.addPropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Container, self).addPropertyChangeListener(arg0)

    @overload
    def getComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(arg0))

    @override
    @overload
    def size(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.size()"""
        return 'Dimension'._wrap(super(Component, self).size())

    @override
    @overload
    def getVerifyInputWhenFocusTarget(self) -> bool:
        """public boolean javax.swing.JComponent.getVerifyInputWhenFocusTarget()"""
        return bool._wrap(super(JComponent, self).getVerifyInputWhenFocusTarget())

    @overload
    def mouseMove(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseMove(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseMove(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getActionForKeyStroke(self, arg0: 'KeyStroke') -> 'ActionListener':
        """public java.awt.event.ActionListener javax.swing.JComponent.getActionForKeyStroke(javax.swing.KeyStroke)"""
        return 'ActionListener'._wrap(super(_JComponent, self).getActionForKeyStroke(arg0))

    @overload
    def lostFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.lostFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).lostFocus(arg0, arg1))

    @override
    @overload
    def isMinimumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMinimumSizeSet()"""
        return bool._wrap(super(Component, self).isMinimumSizeSet())

    @override
    @overload
    def isForegroundSet(self) -> bool:
        """public boolean java.awt.Component.isForegroundSet()"""
        return bool._wrap(super(Component, self).isForegroundSet())

    @overload
    def getMousePosition(self, arg0: bool) -> 'Point':
        """public java.awt.Point java.awt.Container.getMousePosition(boolean) throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(_Container, self).getMousePosition(_boolean.valueOf(arg0)))

    @overload
    def getFontMetrics(self, arg0: 'Font') -> 'FontMetrics':
        """public java.awt.FontMetrics javax.swing.JComponent.getFontMetrics(java.awt.Font)"""
        return 'FontMetrics'._wrap(super(_JComponent, self).getFontMetrics(arg0))

    @overload
    def getListeners(self, arg0: 'Class') -> List['EventListener']:
        """public <T extends java.util.EventListener> T[] javax.swing.JComponent.getListeners(java.lang.Class<T>)"""
        return List['EventListener']._wrap(super(_JComponent, self).getListeners(arg0))

    @override
    @overload
    def getHierarchyBoundsListeners(self) -> List['HierarchyBoundsListener']:
        """public synchronized java.awt.event.HierarchyBoundsListener[] java.awt.Component.getHierarchyBoundsListeners()"""
        return List['HierarchyBoundsListener']._wrap(super(Component, self).getHierarchyBoundsListeners())

    @override
    @overload
    def minimumSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.minimumSize()"""
        return 'Dimension'._wrap(super(Container, self).minimumSize())

    @overload
    def handleEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.handleEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).handleEvent(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @override
    @overload
    def getComponentListeners(self) -> List['ComponentListener']:
        """public synchronized java.awt.event.ComponentListener[] java.awt.Component.getComponentListeners()"""
        return List['ComponentListener']._wrap(super(Component, self).getComponentListeners())

    @override
    @overload
    def computeVisibleRect(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.computeVisibleRect(java.awt.Rectangle)"""
        super(_JComponent, self).computeVisibleRect(arg0)

    @override
    @overload
    def deliverEvent(self, arg0: 'Event'):
        """public void java.awt.Container.deliverEvent(java.awt.Event)"""
        super(_Container, self).deliverEvent(arg0)

    @override
    @overload
    def addHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.addHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).addHierarchyBoundsListener(arg0)

    @override
    @overload
    def getAlignmentX(self) -> float:
        """public float javax.swing.JComponent.getAlignmentX()"""
        return float._wrap(super(JComponent, self).getAlignmentX())

    @overload
    def add(self, arg0: 'Component', arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component,int)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def repaint(self):
        """public void java.awt.Component.repaint()"""
        super(Component, self).repaint()

    @overload
    def gotFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.gotFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).gotFocus(arg0, arg1))

    @override
    @overload
    def createToolTip(self) -> 'JToolTip':
        """public javax.swing.JToolTip javax.swing.JComponent.createToolTip()"""
        return 'JToolTip'._wrap(super(JComponent, self).createToolTip())

    @override
    @overload
    def setEmbedded(self):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setEmbedded()"""
        super(EditorPanel, self).setEmbedded()

    @overload
    def getToolTipText(self, arg0: 'MouseEvent') -> str:
        """public java.lang.String javax.swing.JComponent.getToolTipText(java.awt.event.MouseEvent)"""
        return str._wrap(super(_JComponent, self).getToolTipText(arg0))

    @override
    @overload
    def printComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.printComponents(java.awt.Graphics)"""
        super(_Container, self).printComponents(arg0)

    @override
    @overload
    def getColorModel(self) -> 'ColorModel':
        """public java.awt.image.ColorModel java.awt.Component.getColorModel()"""
        return 'ColorModel'._wrap(super(Component, self).getColorModel())

    @override
    @overload
    def setFocusTraversalPolicyProvider(self, arg0: bool):
        """public final void java.awt.Container.setFocusTraversalPolicyProvider(boolean)"""
        super(_Container, self).setFocusTraversalPolicyProvider(_boolean.valueOf(arg0))

    @overload
    def getComponentZOrder(self, arg0: 'Component') -> int:
        """public int java.awt.Container.getComponentZOrder(java.awt.Component)"""
        return int._wrap(super(_Container, self).getComponentZOrder(arg0))

    @override
    @overload
    def getDebugGraphicsOptions(self) -> int:
        """public int javax.swing.JComponent.getDebugGraphicsOptions()"""
        return int._wrap(super(JComponent, self).getDebugGraphicsOptions())

    @overload
    def areFocusTraversalKeysSet(self, arg0: int) -> bool:
        """public boolean java.awt.Container.areFocusTraversalKeysSet(int)"""
        return bool._wrap(super(_Container, self).areFocusTraversalKeysSet(_int.valueOf(arg0)))

    @override
    @overload
    def getSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.getSize()"""
        return 'Dimension'._wrap(super(Component, self).getSize())

    @override
    @overload
    def repaint(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.repaint(java.awt.Rectangle)"""
        super(_JComponent, self).repaint(arg0)

    @overload
    def getClientProperty(self, arg0: object) -> object:
        """public final java.lang.Object javax.swing.JComponent.getClientProperty(java.lang.Object)"""
        return object._wrap(super(_JComponent, self).getClientProperty(arg0))

    @override
    @overload
    def unregisterKeyboardAction(self, arg0: 'KeyStroke'):
        """public void javax.swing.JComponent.unregisterKeyboardAction(javax.swing.KeyStroke)"""
        super(_JComponent, self).unregisterKeyboardAction(arg0)

    @overload
    def requestFocus(self, arg0: bool) -> bool:
        """public boolean javax.swing.JComponent.requestFocus(boolean)"""
        return bool._wrap(super(_JComponent, self).requestFocus(_boolean.valueOf(arg0)))

    @override
    @overload
    def setActionMap(self, arg0: 'ActionMap'):
        """public final void javax.swing.JComponent.setActionMap(javax.swing.ActionMap)"""
        super(_JComponent, self).setActionMap(arg0)

    @override
    @overload
    def getX(self) -> int:
        """public int javax.swing.JComponent.getX()"""
        return int._wrap(super(JComponent, self).getX())

    @overload
    def mouseEnter(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseEnter(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseEnter(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def updateUI(self):
        """public void javax.swing.JPanel.updateUI()"""
        super(JPanel, self).updateUI()

    @override
    @overload
    def getToolkit(self) -> 'Toolkit':
        """public java.awt.Toolkit java.awt.Component.getToolkit()"""
        return 'Toolkit'._wrap(super(Component, self).getToolkit())

    @override
    @overload
    def isCursorSet(self) -> bool:
        """public boolean java.awt.Component.isCursorSet()"""
        return bool._wrap(super(Component, self).isCursorSet())

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object, arg2: int):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object,int)"""
        super(_Container, self).add(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def setPreferredSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setPreferredSize(java.awt.Dimension)"""
        super(_JComponent, self).setPreferredSize(arg0)

    @override
    @overload
    def setBounds(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.setBounds(int,int,int,int)"""
        super(_Component, self).setBounds(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def isFocusTraversalPolicySet(self) -> bool:
        """public boolean java.awt.Container.isFocusTraversalPolicySet()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicySet())

    @override
    @overload
    def requestFocus(self):
        """public void javax.swing.JComponent.requestFocus()"""
        super(JComponent, self).requestFocus()

    @override
    @overload
    def getAncestorListeners(self) -> List['AncestorListener']:
        """public javax.swing.event.AncestorListener[] javax.swing.JComponent.getAncestorListeners()"""
        return List['AncestorListener']._wrap(super(JComponent, self).getAncestorListeners())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool._wrap(super(_object, self).equals(arg0))

    @overload
    def getInputMap(self, arg0: int) -> 'InputMap':
        """public final javax.swing.InputMap javax.swing.JComponent.getInputMap(int)"""
        return 'InputMap'._wrap(super(_JComponent, self).getInputMap(_int.valueOf(arg0)))

    @override
    @overload
    def isEnabled(self) -> bool:
        """public boolean java.awt.Component.isEnabled()"""
        return bool._wrap(super(Component, self).isEnabled())

    @override
    @overload
    def move(self, arg0: int, arg1: int):
        """public void java.awt.Component.move(int,int)"""
        super(_Component, self).move(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def addMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.addMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).addMouseMotionListener(arg0)

    @override
    @overload
    def getIgnoreRepaint(self) -> bool:
        """public boolean java.awt.Component.getIgnoreRepaint()"""
        return bool._wrap(super(Component, self).getIgnoreRepaint())

    @overload
    def isFocusCycleRoot(self, arg0: 'Container') -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot(java.awt.Container)"""
        return bool._wrap(super(_Container, self).isFocusCycleRoot(arg0))

    @override
    @overload
    def getGraphics(self) -> 'Graphics':
        """public java.awt.Graphics javax.swing.JComponent.getGraphics()"""
        return 'Graphics'._wrap(super(JComponent, self).getGraphics())

    @override
    @overload
    def setLocale(self, arg0: 'Locale'):
        """public void java.awt.Component.setLocale(java.util.Locale)"""
        super(_Component, self).setLocale(arg0)

    @override
    @overload
    def paintAll(self, arg0: 'Graphics'):
        """public void java.awt.Component.paintAll(java.awt.Graphics)"""
        super(_Component, self).paintAll(arg0)

    @override
    @overload
    def setDoubleBuffered(self, arg0: bool):
        """public void javax.swing.JComponent.setDoubleBuffered(boolean)"""
        super(_JComponent, self).setDoubleBuffered(_boolean.valueOf(arg0))

    @override
    @overload
    def isPreferredSizeSet(self) -> bool:
        """public boolean java.awt.Component.isPreferredSizeSet()"""
        return bool._wrap(super(Component, self).isPreferredSizeSet())

    @override
    @overload
    def addInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.addInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).addInputMethodListener(arg0)

    @override
    @overload
    def removeMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.removeMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).removeMouseWheelListener(arg0)

    @override
    @overload
    def getInputMap(self) -> 'InputMap':
        """public final javax.swing.InputMap javax.swing.JComponent.getInputMap()"""
        return 'InputMap'._wrap(super(JComponent, self).getInputMap())

    @override
    @overload
    def setVisible(self, arg0: bool):
        """public void javax.swing.JComponent.setVisible(boolean)"""
        super(_JComponent, self).setVisible(_boolean.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,byte,byte)"""
        super(_Component, self).firePropertyChange(arg0, _byte.valueOf(arg1), _byte.valueOf(arg2))

    @override
    @overload
    def getUIClassID(self) -> str:
        """public java.lang.String javax.swing.JPanel.getUIClassID()"""
        return str._wrap(super(JPanel, self).getUIClassID())

    @override
    @overload
    def transferFocusDownCycle(self):
        """public void java.awt.Container.transferFocusDownCycle()"""
        super(Container, self).transferFocusDownCycle()

    @override
    @overload
    def getNextFocusableComponent(self) -> 'Component':
        """public java.awt.Component javax.swing.JComponent.getNextFocusableComponent()"""
        return 'Component'._wrap(super(JComponent, self).getNextFocusableComponent())

    @override
    @overload
    def getUI(self) -> 'PanelUI':
        """public javax.swing.plaf.PanelUI javax.swing.JPanel.getUI()"""
        return 'PanelUI'._wrap(super(JPanel, self).getUI())

    @override
    @overload
    def setBounds(self, arg0: 'Rectangle'):
        """public void java.awt.Component.setBounds(java.awt.Rectangle)"""
        super(_Component, self).setBounds(arg0)

    @override
    @overload
    def repaint(self, arg0: int):
        """public void java.awt.Component.repaint(long)"""
        super(_Component, self).repaint(_long.valueOf(arg0))

    @override
    @overload
    def removeHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.removeHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).removeHierarchyBoundsListener(arg0)

    @override
    @overload
    def getComponentPopupMenu(self) -> 'JPopupMenu':
        """public javax.swing.JPopupMenu javax.swing.JComponent.getComponentPopupMenu()"""
        return 'JPopupMenu'._wrap(super(JComponent, self).getComponentPopupMenu())

    @override
    @overload
    def getMousePosition(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getMousePosition() throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(Component, self).getMousePosition())

    @override
    @overload
    def getComponentCount(self) -> int:
        """public int java.awt.Container.getComponentCount()"""
        return int._wrap(super(Container, self).getComponentCount())

    @override
    @overload
    def getInputMethodRequests(self) -> 'InputMethodRequests':
        """public java.awt.im.InputMethodRequests java.awt.Component.getInputMethodRequests()"""
        return 'InputMethodRequests'._wrap(super(Component, self).getInputMethodRequests())

    @override
    @overload
    def setMaximumSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setMaximumSize(java.awt.Dimension)"""
        super(_JComponent, self).setMaximumSize(arg0)

    @override
    @overload
    def setRequestFocusEnabled(self, arg0: bool):
        """public void javax.swing.JComponent.setRequestFocusEnabled(boolean)"""
        super(_JComponent, self).setRequestFocusEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def setFocusTraversalKeys(self, arg0: int, arg1: 'Set'):
        """public void javax.swing.JComponent.setFocusTraversalKeys(int,java.util.Set<? extends java.awt.AWTKeyStroke>)"""
        super(_JComponent, self).setFocusTraversalKeys(_int.valueOf(arg0), arg1)

    @overload
    def inside(self, arg0: int, arg1: int) -> bool:
        """public boolean java.awt.Component.inside(int,int)"""
        return bool._wrap(super(_Component, self).inside(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def requestDefaultFocus(self) -> bool:
        """public boolean javax.swing.JComponent.requestDefaultFocus()"""
        return bool._wrap(super(JComponent, self).requestDefaultFocus())

    @override
    @overload
    def disable(self):
        """public void javax.swing.JComponent.disable()"""
        super(JComponent, self).disable()

    @override
    @overload
    def showContent(self, arg0: bool):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.showContent(boolean)"""
        super(_EditorPanel, self).showContent(_boolean.valueOf(arg0))

    @override
    @overload
    def enableInputMethods(self, arg0: bool):
        """public void java.awt.Component.enableInputMethods(boolean)"""
        super(_Component, self).enableInputMethods(_boolean.valueOf(arg0))

    @override
    @overload
    def layout(self):
        """public void java.awt.Container.layout()"""
        super(Container, self).layout()

    @override
    @overload
    def getInputMethodListeners(self) -> List['InputMethodListener']:
        """public synchronized java.awt.event.InputMethodListener[] java.awt.Component.getInputMethodListeners()"""
        return List['InputMethodListener']._wrap(super(Component, self).getInputMethodListeners())

    @override
    @overload
    def paint(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.paint(java.awt.Graphics)"""
        super(_JComponent, self).paint(arg0)

    @override
    @overload
    def transferFocus(self):
        """public void java.awt.Component.transferFocus()"""
        super(Component, self).transferFocus()

    @override
    @overload
    def removeComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.removeComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).removeComponentListener(arg0)

    @override
    @overload
    def getCursor(self) -> 'Cursor':
        """public java.awt.Cursor java.awt.Component.getCursor()"""
        return 'Cursor'._wrap(super(Component, self).getCursor())

    @override
    @overload
    def setMinimumSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setMinimumSize(java.awt.Dimension)"""
        super(_JComponent, self).setMinimumSize(arg0)

    @override
    @overload
    def getAdvancedPanel(self) -> 'JPanel':
        """public javax.swing.JPanel com.badlogic.gdx.tools.flame.EditorPanel.getAdvancedPanel()"""
        return 'JPanel'._wrap(super(EditorPanel, self).getAdvancedPanel())

    @override
    @overload
    def getContainerListeners(self) -> List['ContainerListener']:
        """public synchronized java.awt.event.ContainerListener[] java.awt.Container.getContainerListeners()"""
        return List['ContainerListener']._wrap(super(Container, self).getContainerListeners())

    @override
    @overload
    def setLocation(self, arg0: 'Point'):
        """public void java.awt.Component.setLocation(java.awt.Point)"""
        super(_Component, self).setLocation(arg0)

    @override
    @overload
    def setSize(self, arg0: 'Dimension'):
        """public void java.awt.Component.setSize(java.awt.Dimension)"""
        super(_Component, self).setSize(arg0)

    @override
    @overload
    def removeAll(self):
        """public void java.awt.Container.removeAll()"""
        super(Container, self).removeAll()

    @overload
    def getPopupLocation(self, arg0: 'MouseEvent') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getPopupLocation(java.awt.event.MouseEvent)"""
        return 'Point'._wrap(super(_JComponent, self).getPopupLocation(arg0))

    @overload
    def isAncestorOf(self, arg0: 'Component') -> bool:
        """public boolean java.awt.Container.isAncestorOf(java.awt.Component)"""
        return bool._wrap(super(_Container, self).isAncestorOf(arg0))

    @override
    @overload
    def setOpaque(self, arg0: bool):
        """public void javax.swing.JComponent.setOpaque(boolean)"""
        super(_JComponent, self).setOpaque(_boolean.valueOf(arg0))

    @overload
    def contains(self, arg0: int, arg1: int) -> bool:
        """public boolean javax.swing.JComponent.contains(int,int)"""
        return bool._wrap(super(_JComponent, self).contains(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def setCursor(self, arg0: 'Cursor'):
        """public void java.awt.Component.setCursor(java.awt.Cursor)"""
        super(_Component, self).setCursor(arg0)

    @override
    @overload
    def validate(self):
        """public void java.awt.Container.validate()"""
        super(Container, self).validate()

    @override
    @overload
    def getMaximumSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getMaximumSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getMaximumSize())

    @override
    @overload
    def getBackground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getBackground()"""
        return 'Color'._wrap(super(Component, self).getBackground())

    @overload
    def createImage(self, arg0: 'ImageProducer') -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(java.awt.image.ImageProducer)"""
        return 'Image'._wrap(super(_Component, self).createImage(arg0))

    @override
    @overload
    def setVerifyInputWhenFocusTarget(self, arg0: bool):
        """public void javax.swing.JComponent.setVerifyInputWhenFocusTarget(boolean)"""
        super(_JComponent, self).setVerifyInputWhenFocusTarget(_boolean.valueOf(arg0))

    @override
    @overload
    def removePropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0, arg1)

    @override
    @overload
    def countComponents(self) -> int:
        """public int java.awt.Container.countComponents()"""
        return int._wrap(super(Container, self).countComponents()) 
 
 
# CLASS: com.badlogic.gdx.tools.flame.SavePanel
import javax.accessibility.AccessibleContext as AccessibleContext
import javax.swing.JToolTip as JToolTip
import java.awt.event.HierarchyBoundsListener as HierarchyBoundsListener
import java.awt.event.ActionListener as _ActionListener
_ActionListener = _ActionListener
import java.awt.ComponentOrientation as _ComponentOrientation
_ComponentOrientation = _ComponentOrientation
import java.awt.image.ImageProducer as ImageProducer
import java.awt.GraphicsConfiguration as GraphicsConfiguration
import java.awt.Graphics as _Graphics
_Graphics = _Graphics
import javax.swing.JToolTip as _JToolTip
_JToolTip = _JToolTip
import java.awt.Container as _Container
_Container = _Container
import java.awt.MenuComponent as MenuComponent
import java.awt.im.InputMethodRequests as _InputMethodRequests
_InputMethodRequests = _InputMethodRequests
import java.awt.FocusTraversalPolicy as _FocusTraversalPolicy
_FocusTraversalPolicy = _FocusTraversalPolicy
import java.lang.Byte as _byte
import java.awt.Dimension as Dimension
import java.awt.Font as _Font
_Font = _Font
import javax.swing.plaf.PanelUI as _PanelUI
_PanelUI = _PanelUI
import java.awt.event.ContainerListener as ContainerListener
import javax.swing.event.AncestorListener as AncestorListener
import java.awt.AWTEvent as AWTEvent
import javax.swing.JPanel as JPanel
import java.awt.image.ColorModel as _ColorModel
_ColorModel = _ColorModel
import java.lang.Object as _object
import java.awt.ComponentOrientation as ComponentOrientation
import java.awt.im.InputContext as _InputContext
_InputContext = _InputContext
from builtins import float
import java.awt.event.HierarchyListener as HierarchyListener
import java.awt.event.InputMethodListener as InputMethodListener
from typing import List
import java.awt.event.MouseWheelListener as _MouseWheelListener
_MouseWheelListener = _MouseWheelListener
import java.awt.event.KeyListener as KeyListener
import java.awt.Component as Component
from builtins import int
import java.awt.LayoutManager as LayoutManager
import java.awt.FontMetrics as _FontMetrics
_FontMetrics = _FontMetrics
import java.awt.Container as Container
from builtins import type
import java.awt.image.VolatileImage as _VolatileImage
_VolatileImage = _VolatileImage
import java.awt.Shape as Shape
import com.badlogic.gdx.tools.flame.EditorPanel as _EditorPanel
_EditorPanel = _EditorPanel
import java.awt.Rectangle as Rectangle
import java.awt.event.ContainerListener as _ContainerListener
_ContainerListener = _ContainerListener
import java.awt.event.HierarchyListener as _HierarchyListener
_HierarchyListener = _HierarchyListener
import java.lang.String as _string
import javax.swing.InputVerifier as _InputVerifier
_InputVerifier = _InputVerifier
import java.awt.Insets as _Insets
_Insets = _Insets
import javax.swing.border.Border as _Border
_Border = _Border
import java.awt.event.ComponentListener as _ComponentListener
_ComponentListener = _ComponentListener
import javax.swing.ActionMap as ActionMap
import java.beans.VetoableChangeListener as VetoableChangeListener
import com.badlogic.gdx.tools.flame.SavePanel as _SavePanel
_SavePanel = _SavePanel
import java.awt.event.ComponentListener as ComponentListener
import javax.swing.KeyStroke as KeyStroke
import java.beans.VetoableChangeListener as _VetoableChangeListener
_VetoableChangeListener = _VetoableChangeListener
from builtins import object
import java.awt.event.KeyListener as _KeyListener
_KeyListener = _KeyListener
import java.awt.Component.BaselineResizeBehavior as BaselineResizeBehavior
import java.awt.Component as _Component_BaselineResizeBehavior
_BaselineResizeBehavior = _Component_BaselineResizeBehavior.BaselineResizeBehavior
import java.awt.Cursor as _Cursor
_Cursor = _Cursor
import java.awt.im.InputMethodRequests as InputMethodRequests
import java.lang.Long as _long
import javax.swing.JPanel as _JPanel
_JPanel = _JPanel
import java.awt.event.FocusListener as _FocusListener
_FocusListener = _FocusListener
import java.lang.Character as _char
import javax.swing.TransferHandler as TransferHandler
import java.awt.event.FocusEvent.Cause as Cause
import javax.swing.JComponent as JComponent
import javax.accessibility.AccessibleContext as _AccessibleContext
_AccessibleContext = _AccessibleContext
import java.awt.event.MouseWheelListener as MouseWheelListener
import java.util.Set as _Set
_Set = _Set
import java.awt.image.ColorModel as ColorModel
import java.lang.Boolean as _boolean
import java.awt.event.MouseMotionListener as MouseMotionListener
import java.util.EventListener as EventListener
import java.awt.Insets as Insets
import javax.swing.KeyStroke as _KeyStroke
_KeyStroke = _KeyStroke
import java.awt.GraphicsConfiguration as _GraphicsConfiguration
_GraphicsConfiguration = _GraphicsConfiguration
import java.awt.dnd.DropTarget as _DropTarget
_DropTarget = _DropTarget
from builtins import bool
import java.beans.PropertyChangeListener as _PropertyChangeListener
_PropertyChangeListener = _PropertyChangeListener
import java.awt.LayoutManager as _LayoutManager
_LayoutManager = _LayoutManager
import java.awt.PopupMenu as PopupMenu
import java.util.EventListener as _EventListener
_EventListener = _EventListener
import java.awt.im.InputContext as InputContext
import java.awt.Component as _Component
_Component = _Component
import java.awt.Font as Font
import java.awt.image.VolatileImage as VolatileImage
import java.awt.dnd.DropTarget as DropTarget
import java.lang.String as _String
_String = _String
import java.lang.Float as _float
import java.awt.Cursor as Cursor
import java.awt.event.MouseListener as _MouseListener
_MouseListener = _MouseListener
import java.awt.Toolkit as _Toolkit
_Toolkit = _Toolkit
import java.io.PrintStream as PrintStream
import javax.swing.JRootPane as _JRootPane
_JRootPane = _JRootPane
import java.awt.Dimension as _Dimension
_Dimension = _Dimension
import java.awt.event.ActionListener as ActionListener
import java.awt.event.MouseEvent as MouseEvent
import java.awt.Color as _Color
_Color = _Color
import javax.swing.JPopupMenu as _JPopupMenu
_JPopupMenu = _JPopupMenu
import javax.swing.InputMap as _InputMap
_InputMap = _InputMap
import java.awt.event.MouseListener as MouseListener
import java.lang.Class as _Class
_Class = _Class
import java.util.Locale as Locale
import java.lang.Double as _double
import javax.swing.plaf.PanelUI as PanelUI
import java.awt.Point as _Point
_Point = _Point
import java.lang.Object as _Object
_Object = _Object
import java.beans.PropertyChangeListener as PropertyChangeListener
import javax.swing.border.Border as Border
import javax.swing.JComponent as _JComponent
_JComponent = _JComponent
import javax.swing.InputVerifier as InputVerifier
import java.io.PrintWriter as PrintWriter
import java.awt.Point as Point
import javax.swing.event.AncestorListener as _AncestorListener
_AncestorListener = _AncestorListener
import java.lang.Short as _short
import java.awt.Toolkit as Toolkit
import java.awt.event.HierarchyBoundsListener as _HierarchyBoundsListener
_HierarchyBoundsListener = _HierarchyBoundsListener
import javax.swing.TransferHandler as _TransferHandler
_TransferHandler = _TransferHandler
import javax.swing.InputMap as InputMap
import java.awt.Rectangle as _Rectangle
_Rectangle = _Rectangle
import javax.swing.JRootPane as JRootPane
import java.awt.Event as Event
import java.awt.event.FocusListener as FocusListener
import java.awt.image.ImageObserver as ImageObserver
from builtins import str
from pyquantum_helper import override
import javax.swing.ActionMap as _ActionMap
_ActionMap = _ActionMap
import java.awt.FocusTraversalPolicy as FocusTraversalPolicy
import java.awt.event.MouseMotionListener as _MouseMotionListener
_MouseMotionListener = _MouseMotionListener
import java.awt.event.InputMethodListener as _InputMethodListener
_InputMethodListener = _InputMethodListener
import javax.swing.JPopupMenu as JPopupMenu
import java.util.Set as Set
import java.lang.Integer as _int
import java.awt.Image as _Image
_Image = _Image
import java.awt.FontMetrics as FontMetrics
import java.awt.Color as Color
import java.awt.Image as Image
import java.awt.Graphics as Graphics
import java.awt.ImageCapabilities as ImageCapabilities
import java.util.Locale as _Locale
_Locale = _Locale
 
class SavePanel():
    """com.badlogic.gdx.tools.flame.SavePanel"""
 
    @staticmethod
    def _wrap(java_value: _SavePanel) -> 'SavePanel':
        return SavePanel(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _SavePanel):
        """
        Dynamic initializer for SavePanel.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_SavePanel__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_SavePanel__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def removeVetoableChangeListener(self, arg0: 'VetoableChangeListener'):
        """public synchronized void javax.swing.JComponent.removeVetoableChangeListener(java.beans.VetoableChangeListener)"""
        super(_JComponent, self).removeVetoableChangeListener(arg0)

    @override
    @overload
    def getComponents(self) -> List['Component']:
        """public java.awt.Component[] java.awt.Container.getComponents()"""
        return List['Component']._wrap(super(Container, self).getComponents())

    @override
    @overload
    def setDebugGraphicsOptions(self, arg0: int):
        """public void javax.swing.JComponent.setDebugGraphicsOptions(int)"""
        super(_JComponent, self).setDebugGraphicsOptions(_int.valueOf(arg0))

    @override
    @overload
    def isValid(self) -> bool:
        """public boolean java.awt.Component.isValid()"""
        return bool._wrap(super(Component, self).isValid())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def getDefaultLocale() -> 'Locale':
        """public static java.util.Locale javax.swing.JComponent.getDefaultLocale()"""
        return Locale._wrap(_JComponent.getDefaultLocale())

    @override
    @overload
    def getInputVerifier(self) -> 'InputVerifier':
        """public javax.swing.InputVerifier javax.swing.JComponent.getInputVerifier()"""
        return 'InputVerifier'._wrap(super(JComponent, self).getInputVerifier())

    @overload
    def __init__(self, arg0: 'FlameMain', arg1: str, arg2: str):
        """public com.badlogic.gdx.tools.flame.SavePanel(com.badlogic.gdx.tools.flame.FlameMain,java.lang.String,java.lang.String)"""
        val = _SavePanel(arg0, arg1, arg2)
        self.__wrapper = val

    @override
    @overload
    def list(self, arg0: 'PrintStream', arg1: int):
        """public void java.awt.Container.list(java.io.PrintStream,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @override
    @overload
    def setUI(self, arg0: 'PanelUI'):
        """public void javax.swing.JPanel.setUI(javax.swing.plaf.PanelUI)"""
        super(_JPanel, self).setUI(arg0)

    @override
    @overload
    def getFocusTraversalPolicy(self) -> 'FocusTraversalPolicy':
        """public java.awt.FocusTraversalPolicy java.awt.Container.getFocusTraversalPolicy()"""
        return 'FocusTraversalPolicy'._wrap(super(Container, self).getFocusTraversalPolicy())

    @override
    @overload
    def getParent(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getParent()"""
        return 'Container'._wrap(super(Component, self).getParent())

    @override
    @overload
    def paintImmediately(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.paintImmediately(java.awt.Rectangle)"""
        super(_JComponent, self).paintImmediately(arg0)

    @staticmethod
    @overload
    def setDefaultLocale(arg0: 'Locale'):
        """public static void javax.swing.JComponent.setDefaultLocale(java.util.Locale)"""
        _JComponent.setDefaultLocale(arg0)

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,float,float)"""
        super(_Component, self).firePropertyChange(arg0, _float.valueOf(arg1), _float.valueOf(arg2))

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object)"""
        super(_Container, self).add(arg0, arg1)

    @override
    @overload
    def getLocale(self) -> 'Locale':
        """public java.util.Locale java.awt.Component.getLocale()"""
        return 'Locale'._wrap(super(Component, self).getLocale())

    @override
    @overload
    def setInheritsPopupMenu(self, arg0: bool):
        """public void javax.swing.JComponent.setInheritsPopupMenu(boolean)"""
        super(_JComponent, self).setInheritsPopupMenu(_boolean.valueOf(arg0))

    @override
    @overload
    def getHierarchyListeners(self) -> List['HierarchyListener']:
        """public synchronized java.awt.event.HierarchyListener[] java.awt.Component.getHierarchyListeners()"""
        return List['HierarchyListener']._wrap(super(Component, self).getHierarchyListeners())

    @override
    @overload
    def nextFocus(self):
        """public void java.awt.Component.nextFocus()"""
        super(Component, self).nextFocus()

    @override
    @overload
    def isPaintingTile(self) -> bool:
        """public boolean javax.swing.JComponent.isPaintingTile()"""
        return bool._wrap(super(JComponent, self).isPaintingTile())

    @override
    @overload
    def getContentPanel(self) -> 'JPanel':
        """public javax.swing.JPanel com.badlogic.gdx.tools.flame.EditorPanel.getContentPanel()"""
        return 'JPanel'._wrap(super(EditorPanel, self).getContentPanel())

    @override
    @overload
    def isDisplayable(self) -> bool:
        """public boolean java.awt.Component.isDisplayable()"""
        return bool._wrap(super(Component, self).isDisplayable())

    @override
    @overload
    def getBounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.getBounds()"""
        return 'Rectangle'._wrap(super(Component, self).getBounds())

    @override
    @overload
    def removeMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.removeMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).removeMouseMotionListener(arg0)

    @override
    @overload
    def isShowing(self) -> bool:
        """public boolean java.awt.Component.isShowing()"""
        return bool._wrap(super(Component, self).isShowing())

    @override
    @overload
    def getDropTarget(self) -> 'DropTarget':
        """public synchronized java.awt.dnd.DropTarget java.awt.Component.getDropTarget()"""
        return 'DropTarget'._wrap(super(Component, self).getDropTarget())

    @override
    @overload
    def isFontSet(self) -> bool:
        """public boolean java.awt.Component.isFontSet()"""
        return bool._wrap(super(Component, self).isFontSet())

    @overload
    def mouseUp(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseUp(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseUp(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def setIgnoreRepaint(self, arg0: bool):
        """public void java.awt.Component.setIgnoreRepaint(boolean)"""
        super(_Component, self).setIgnoreRepaint(_boolean.valueOf(arg0))

    @override
    @overload
    def getPropertyChangeListeners(self) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners()"""
        return List['PropertyChangeListener']._wrap(super(Component, self).getPropertyChangeListeners())

    @override
    @overload
    def isBackgroundSet(self) -> bool:
        """public boolean java.awt.Component.isBackgroundSet()"""
        return bool._wrap(super(Component, self).isBackgroundSet())

    @override
    @overload
    def getLocation(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocation()"""
        return 'Point'._wrap(super(Component, self).getLocation())

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int._wrap(super(object, self).hashCode())

    @override
    @overload
    def location(self) -> 'Point':
        """public java.awt.Point java.awt.Component.location()"""
        return 'Point'._wrap(super(Component, self).location())

    @override
    @overload
    def getComponentOrientation(self) -> 'ComponentOrientation':
        """public java.awt.ComponentOrientation java.awt.Component.getComponentOrientation()"""
        return 'ComponentOrientation'._wrap(super(Component, self).getComponentOrientation())

    @override
    @overload
    def addHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.addHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).addHierarchyListener(arg0)

    @override
    @overload
    def getInheritsPopupMenu(self) -> bool:
        """public boolean javax.swing.JComponent.getInheritsPopupMenu()"""
        return bool._wrap(super(JComponent, self).getInheritsPopupMenu())

    @override
    @overload
    def setComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Component.setComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Component, self).setComponentOrientation(arg0)

    @override
    @overload
    def getFocusCycleRootAncestor(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getFocusCycleRootAncestor()"""
        return 'Container'._wrap(super(Component, self).getFocusCycleRootAncestor())

    @override
    @overload
    def show(self, arg0: bool):
        """public void java.awt.Component.show(boolean)"""
        super(_Component, self).show(_boolean.valueOf(arg0))

    @staticmethod
    @overload
    def addContent(arg0: 'JPanel', arg1: int, arg2: int, arg3: 'JComponent', arg4: bool, arg5: int, arg6: int, arg7: float, arg8: float):
        """public static void com.badlogic.gdx.tools.flame.EditorPanel.addContent(javax.swing.JPanel,int,int,javax.swing.JComponent,boolean,int,int,float,float)"""
        _EditorPanel.addContent(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3, _boolean.valueOf(arg4), _int.valueOf(arg5), _int.valueOf(arg6), _float.valueOf(arg7), _float.valueOf(arg8))

    @override
    @overload
    def grabFocus(self):
        """public void javax.swing.JComponent.grabFocus()"""
        super(JComponent, self).grabFocus()

    @overload
    def locate(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.locate(int,int)"""
        return 'Component'._wrap(super(_Container, self).locate(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def isPaintingForPrint(self) -> bool:
        """public final boolean javax.swing.JComponent.isPaintingForPrint()"""
        return bool._wrap(super(JComponent, self).isPaintingForPrint())

    @overload
    def keyDown(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyDown(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyDown(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,int,int)"""
        super(_JComponent, self).firePropertyChange(arg0, _int.valueOf(arg1), _int.valueOf(arg2))

    @override
    @overload
    def getLayout(self) -> 'LayoutManager':
        """public java.awt.LayoutManager java.awt.Container.getLayout()"""
        return 'LayoutManager'._wrap(super(Container, self).getLayout())

    @override
    @overload
    def preferredSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.preferredSize()"""
        return 'Dimension'._wrap(super(Container, self).preferredSize())

    @override
    @overload
    def addNotify(self):
        """public void javax.swing.JComponent.addNotify()"""
        super(JComponent, self).addNotify()

    @override
    @overload
    def setSize(self, arg0: int, arg1: int):
        """public void java.awt.Component.setSize(int,int)"""
        super(_Component, self).setSize(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.repaint(int,int,int,int)"""
        super(_Component, self).repaint(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @overload
    def requestFocusInWindow(self, arg0: 'Cause') -> bool:
        """public boolean java.awt.Component.requestFocusInWindow(java.awt.event.FocusEvent$Cause)"""
        return bool._wrap(super(_Component, self).requestFocusInWindow(arg0))

    @override
    @overload
    def remove(self, arg0: int):
        """public void java.awt.Container.remove(int)"""
        super(_Container, self).remove(_int.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,long,long)"""
        super(_Component, self).firePropertyChange(arg0, _long.valueOf(arg1), _long.valueOf(arg2))

    @override
    @overload
    def update(self, arg0: 'FlameMain'):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.update(com.badlogic.gdx.tools.flame.FlameMain)"""
        super(_EditorPanel, self).update(arg0)

    @override
    @overload
    def setFocusCycleRoot(self, arg0: bool):
        """public void java.awt.Container.setFocusCycleRoot(boolean)"""
        super(_Container, self).setFocusCycleRoot(_boolean.valueOf(arg0))

    @overload
    def keyUp(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyUp(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyUp(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def setBackground(self, arg0: 'Color'):
        """public void javax.swing.JComponent.setBackground(java.awt.Color)"""
        super(_JComponent, self).setBackground(arg0)

    @override
    @overload
    def doLayout(self):
        """public void java.awt.Container.doLayout()"""
        super(Container, self).doLayout()

    @override
    @overload
    def enable(self):
        """public void javax.swing.JComponent.enable()"""
        super(JComponent, self).enable()

    @override
    @overload
    def getInsets(self) -> 'Insets':
        """public java.awt.Insets javax.swing.JComponent.getInsets()"""
        return 'Insets'._wrap(super(JComponent, self).getInsets())

    @override
    @overload
    def setNextFocusableComponent(self, arg0: 'Component'):
        """public void javax.swing.JComponent.setNextFocusableComponent(java.awt.Component)"""
        super(_JComponent, self).setNextFocusableComponent(arg0)

    @override
    @overload
    def getAlignmentY(self) -> float:
        """public float javax.swing.JComponent.getAlignmentY()"""
        return float._wrap(super(JComponent, self).getAlignmentY())

    @overload
    def checkImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @override
    @overload
    def getFocusTraversalKeysEnabled(self) -> bool:
        """public boolean java.awt.Component.getFocusTraversalKeysEnabled()"""
        return bool._wrap(super(Component, self).getFocusTraversalKeysEnabled())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getRootPane(self) -> 'JRootPane':
        """public javax.swing.JRootPane javax.swing.JComponent.getRootPane()"""
        return 'JRootPane'._wrap(super(JComponent, self).getRootPane())

    @override
    @overload
    def invalidate(self):
        """public void java.awt.Container.invalidate()"""
        super(Container, self).invalidate()

    @override
    @overload
    def resetKeyboardActions(self):
        """public void javax.swing.JComponent.resetKeyboardActions()"""
        super(JComponent, self).resetKeyboardActions()

    @overload
    def getComponent(self, arg0: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponent(int)"""
        return 'Component'._wrap(super(_Container, self).getComponent(_int.valueOf(arg0)))

    @override
    @overload
    def setName(self, arg0: str):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setName(java.lang.String)"""
        super(_EditorPanel, self).setName(arg0)

    @override
    @overload
    def addPropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Container.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Container, self).addPropertyChangeListener(arg0, arg1)

    @override
    @overload
    def setInputMap(self, arg0: int, arg1: 'InputMap'):
        """public final void javax.swing.JComponent.setInputMap(int,javax.swing.InputMap)"""
        super(_JComponent, self).setInputMap(_int.valueOf(arg0), arg1)

    @override
    @overload
    def removePropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0)

    @override
    @overload
    def applyComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Container.applyComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Container, self).applyComponentOrientation(arg0)

    @override
    @overload
    def setBorder(self, arg0: 'Border'):
        """public void javax.swing.JComponent.setBorder(javax.swing.border.Border)"""
        super(_JComponent, self).setBorder(arg0)

    @override
    @overload
    def remove(self, arg0: 'MenuComponent'):
        """public void java.awt.Component.remove(java.awt.MenuComponent)"""
        super(_Component, self).remove(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintStream'):
        """public void java.awt.Component.list(java.io.PrintStream)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def removeMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.removeMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).removeMouseListener(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintWriter'):
        """public void java.awt.Component.list(java.io.PrintWriter)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def getKeyListeners(self) -> List['KeyListener']:
        """public synchronized java.awt.event.KeyListener[] java.awt.Component.getKeyListeners()"""
        return List['KeyListener']._wrap(super(Component, self).getKeyListeners())

    @override
    @overload
    def getInputContext(self) -> 'InputContext':
        """public java.awt.im.InputContext java.awt.Component.getInputContext()"""
        return 'InputContext'._wrap(super(Component, self).getInputContext())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,double,double)"""
        super(_Component, self).firePropertyChange(arg0, _double.valueOf(arg1), _double.valueOf(arg2))

    @override
    @overload
    def removeAncestorListener(self, arg0: 'AncestorListener'):
        """public void javax.swing.JComponent.removeAncestorListener(javax.swing.event.AncestorListener)"""
        super(_JComponent, self).removeAncestorListener(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintWriter', arg1: int):
        """public void java.awt.Container.list(java.io.PrintWriter,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @overload
    def checkImage(self, arg0: 'Image', arg1: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, arg1))

    @override
    @overload
    def removeFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.removeFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).removeFocusListener(arg0)

    @overload
    def mouseDown(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDown(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDown(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def setIsAlwayShown(self, arg0: bool):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setIsAlwayShown(boolean)"""
        super(_EditorPanel, self).setIsAlwayShown(_boolean.valueOf(arg0))

    @overload
    def getConditionForKeyStroke(self, arg0: 'KeyStroke') -> int:
        """public int javax.swing.JComponent.getConditionForKeyStroke(javax.swing.KeyStroke)"""
        return int._wrap(super(_JComponent, self).getConditionForKeyStroke(arg0))

    @override
    @overload
    def getTreeLock(self) -> object:
        """public final java.lang.Object java.awt.Component.getTreeLock()"""
        return object._wrap(super(Component, self).getTreeLock())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @override
    @overload
    def addVetoableChangeListener(self, arg0: 'VetoableChangeListener'):
        """public synchronized void javax.swing.JComponent.addVetoableChangeListener(java.beans.VetoableChangeListener)"""
        super(_JComponent, self).addVetoableChangeListener(arg0)

    @overload
    def contains(self, arg0: 'Point') -> bool:
        """public boolean java.awt.Component.contains(java.awt.Point)"""
        return bool._wrap(super(_Component, self).contains(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,short,short)"""
        super(_Component, self).firePropertyChange(arg0, _short.valueOf(arg1), _short.valueOf(arg2))

    @override
    @overload
    def dispatchEvent(self, arg0: 'AWTEvent'):
        """public final void java.awt.Component.dispatchEvent(java.awt.AWTEvent)"""
        super(_Component, self).dispatchEvent(arg0)

    @override
    @overload
    def removeContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.removeContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).removeContainerListener(arg0)

    @override
    @overload
    def getGraphicsConfiguration(self) -> 'GraphicsConfiguration':
        """public java.awt.GraphicsConfiguration java.awt.Component.getGraphicsConfiguration()"""
        return 'GraphicsConfiguration'._wrap(super(Component, self).getGraphicsConfiguration())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: bool, arg2: bool):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,boolean,boolean)"""
        super(_JComponent, self).firePropertyChange(arg0, _boolean.valueOf(arg1), _boolean.valueOf(arg2))

    @override
    @overload
    def registerKeyboardAction(self, arg0: 'ActionListener', arg1: str, arg2: 'KeyStroke', arg3: int):
        """public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,java.lang.String,javax.swing.KeyStroke,int)"""
        super(_JComponent, self).registerKeyboardAction(arg0, arg1, arg2, _int.valueOf(arg3))

    @overload
    def findComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(arg0))

    @override
    @overload
    def resize(self, arg0: int, arg1: int):
        """public void java.awt.Component.resize(int,int)"""
        super(_Component, self).resize(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getHeight(self) -> int:
        """public int javax.swing.JComponent.getHeight()"""
        return int._wrap(super(JComponent, self).getHeight())

    @override
    @overload
    def getTransferHandler(self) -> 'TransferHandler':
        """public javax.swing.TransferHandler javax.swing.JComponent.getTransferHandler()"""
        return 'TransferHandler'._wrap(super(JComponent, self).getTransferHandler())

    @overload
    def imageUpdate(self, arg0: 'Image', arg1: int, arg2: int, arg3: int, arg4: int, arg5: int) -> bool:
        """public boolean java.awt.Component.imageUpdate(java.awt.Image,int,int,int,int,int)"""
        return bool._wrap(super(_Component, self).imageUpdate(arg0, _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4), _int.valueOf(arg5)))

    @override
    @overload
    def getWidth(self) -> int:
        """public int javax.swing.JComponent.getWidth()"""
        return int._wrap(super(JComponent, self).getWidth())

    @override
    @overload
    def transferFocusBackward(self):
        """public void java.awt.Component.transferFocusBackward()"""
        super(Component, self).transferFocusBackward()

    @overload
    def getPropertyChangeListeners(self, arg0: str) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners(java.lang.String)"""
        return List['PropertyChangeListener']._wrap(super(_Component, self).getPropertyChangeListeners(arg0))

    @override
    @overload
    def getName(self) -> str:
        """public java.lang.String com.badlogic.gdx.tools.flame.EditorPanel.getName()"""
        return str._wrap(super(EditorPanel, self).getName())

    @staticmethod
    @overload
    def isLightweightComponent(arg0: 'Component') -> bool:
        """public static boolean javax.swing.JComponent.isLightweightComponent(java.awt.Component)"""
        return bool._wrap(_JComponent.isLightweightComponent(arg0))

    @override
    @overload
    def getBorder(self) -> 'Border':
        """public javax.swing.border.Border javax.swing.JComponent.getBorder()"""
        return 'Border'._wrap(super(JComponent, self).getBorder())

    @override
    @overload
    def printAll(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.printAll(java.awt.Graphics)"""
        super(_JComponent, self).printAll(arg0)

    @override
    @overload
    def addComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.addComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).addComponentListener(arg0)

    @override
    @overload
    def getBaselineResizeBehavior(self) -> 'BaselineResizeBehavior.Component$BaselineResizeBehavior':
        """public java.awt.Component$BaselineResizeBehavior javax.swing.JComponent.getBaselineResizeBehavior()"""
        return 'BaselineResizeBehavior.Component$BaselineResizeBehavior'._wrap(super(JComponent, self).getBaselineResizeBehavior())

    @override
    @overload
    def print(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.print(java.awt.Graphics)"""
        super(_JComponent, self).print(arg0)

    @override
    @overload
    def setInputVerifier(self, arg0: 'InputVerifier'):
        """public void javax.swing.JComponent.setInputVerifier(javax.swing.InputVerifier)"""
        super(_JComponent, self).setInputVerifier(arg0)

    @override
    @overload
    def addAncestorListener(self, arg0: 'AncestorListener'):
        """public void javax.swing.JComponent.addAncestorListener(javax.swing.event.AncestorListener)"""
        super(_JComponent, self).addAncestorListener(arg0)

    @override
    @overload
    def getFont(self) -> 'Font':
        """public java.awt.Font java.awt.Component.getFont()"""
        return 'Font'._wrap(super(Component, self).getFont())

    @override
    @overload
    def setFont(self, arg0: 'Font'):
        """public void javax.swing.JComponent.setFont(java.awt.Font)"""
        super(_JComponent, self).setFont(arg0)

    @override
    @overload
    def isOptimizedDrawingEnabled(self) -> bool:
        """public boolean javax.swing.JComponent.isOptimizedDrawingEnabled()"""
        return bool._wrap(super(JComponent, self).isOptimizedDrawingEnabled())

    @override
    @overload
    def isValidateRoot(self) -> bool:
        """public boolean javax.swing.JComponent.isValidateRoot()"""
        return bool._wrap(super(JComponent, self).isValidateRoot())

    @overload
    def prepareImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @override
    @overload
    def setHasAdvanced(self, arg0: bool):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setHasAdvanced(boolean)"""
        super(_EditorPanel, self).setHasAdvanced(_boolean.valueOf(arg0))

    @override
    @overload
    def setForeground(self, arg0: 'Color'):
        """public void javax.swing.JComponent.setForeground(java.awt.Color)"""
        super(_JComponent, self).setForeground(arg0)

    @overload
    def mouseDrag(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDrag(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDrag(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def isOpaque(self) -> bool:
        """public boolean javax.swing.JComponent.isOpaque()"""
        return bool._wrap(super(JComponent, self).isOpaque())

    @overload
    def createVolatileImage(self, arg0: int, arg1: int, arg2: 'ImageCapabilities') -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int,java.awt.ImageCapabilities) throws java.awt.AWTException"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1), arg2))

    @override
    @overload
    def bounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.bounds()"""
        return 'Rectangle'._wrap(super(Component, self).bounds())

    @override
    @overload
    def update(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.update(java.awt.Graphics)"""
        super(_JComponent, self).update(arg0)

    @override
    @overload
    def add(self, arg0: 'PopupMenu'):
        """public void java.awt.Component.add(java.awt.PopupMenu)"""
        super(_Component, self).add(arg0)

    @override
    @overload
    def getToolTipText(self) -> str:
        """public java.lang.String javax.swing.JComponent.getToolTipText()"""
        return str._wrap(super(JComponent, self).getToolTipText())

    @override
    @overload
    def isVisible(self) -> bool:
        """public boolean java.awt.Component.isVisible()"""
        return bool._wrap(super(Component, self).isVisible())

    @override
    @overload
    def setDropTarget(self, arg0: 'DropTarget'):
        """public synchronized void java.awt.Component.setDropTarget(java.awt.dnd.DropTarget)"""
        super(_Component, self).setDropTarget(arg0)

    @override
    @overload
    def getLocationOnScreen(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocationOnScreen()"""
        return 'Point'._wrap(super(Component, self).getLocationOnScreen())

    @override
    @overload
    def getY(self) -> int:
        """public int javax.swing.JComponent.getY()"""
        return int._wrap(super(JComponent, self).getY())

    @overload
    def getComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def isMaximumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMaximumSizeSet()"""
        return bool._wrap(super(Component, self).isMaximumSizeSet())

    @override
    @overload
    def setAlignmentY(self, arg0: float):
        """public void javax.swing.JComponent.setAlignmentY(float)"""
        super(_JComponent, self).setAlignmentY(_float.valueOf(arg0))

    @override
    @overload
    def getRegisteredKeyStrokes(self) -> List['KeyStroke']:
        """public javax.swing.KeyStroke[] javax.swing.JComponent.getRegisteredKeyStrokes()"""
        return List['KeyStroke']._wrap(super(JComponent, self).getRegisteredKeyStrokes())

    @override
    @overload
    def isFocusable(self) -> bool:
        """public boolean java.awt.Component.isFocusable()"""
        return bool._wrap(super(Component, self).isFocusable())

    @override
    @overload
    def isFocusTraversalPolicyProvider(self) -> bool:
        """public final boolean java.awt.Container.isFocusTraversalPolicyProvider()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicyProvider())

    @override
    @overload
    def getMouseListeners(self) -> List['MouseListener']:
        """public synchronized java.awt.event.MouseListener[] java.awt.Component.getMouseListeners()"""
        return List['MouseListener']._wrap(super(Component, self).getMouseListeners())

    @override
    @overload
    def setValue(self, arg0: object):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setValue(T)"""
        super(_EditorPanel, self).setValue(arg0)

    @override
    @overload
    def registerKeyboardAction(self, arg0: 'ActionListener', arg1: 'KeyStroke', arg2: int):
        """public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,javax.swing.KeyStroke,int)"""
        super(_JComponent, self).registerKeyboardAction(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def transferFocusUpCycle(self):
        """public void java.awt.Component.transferFocusUpCycle()"""
        super(Component, self).transferFocusUpCycle()

    @override
    @overload
    def removeKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.removeKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).removeKeyListener(arg0)

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: str, arg2: str):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,char,char)"""
        super(_JComponent, self).firePropertyChange(arg0, _char.valueOf(arg1), _char.valueOf(arg2))

    @override
    @overload
    def getMouseMotionListeners(self) -> List['MouseMotionListener']:
        """public synchronized java.awt.event.MouseMotionListener[] java.awt.Component.getMouseMotionListeners()"""
        return List['MouseMotionListener']._wrap(super(Component, self).getMouseMotionListeners())

    @override
    @overload
    def getAutoscrolls(self) -> bool:
        """public boolean javax.swing.JComponent.getAutoscrolls()"""
        return bool._wrap(super(JComponent, self).getAutoscrolls())

    @override
    @overload
    def addContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.addContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).addContainerListener(arg0)

    @override
    @overload
    def isFocusTraversable(self) -> bool:
        """public boolean java.awt.Component.isFocusTraversable()"""
        return bool._wrap(super(Component, self).isFocusTraversable())

    @overload
    def mouseExit(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseExit(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseExit(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getBounds(self, arg0: 'Rectangle') -> 'Rectangle':
        """public java.awt.Rectangle javax.swing.JComponent.getBounds(java.awt.Rectangle)"""
        return 'Rectangle'._wrap(super(_JComponent, self).getBounds(arg0))

    @override
    @overload
    def setToolTipText(self, arg0: str):
        """public void javax.swing.JComponent.setToolTipText(java.lang.String)"""
        super(_JComponent, self).setToolTipText(arg0)

    @override
    @overload
    def setAutoscrolls(self, arg0: bool):
        """public void javax.swing.JComponent.setAutoscrolls(boolean)"""
        super(_JComponent, self).setAutoscrolls(_boolean.valueOf(arg0))

    @override
    @overload
    def setComponentPopupMenu(self, arg0: 'JPopupMenu'):
        """public void javax.swing.JComponent.setComponentPopupMenu(javax.swing.JPopupMenu)"""
        super(_JComponent, self).setComponentPopupMenu(arg0)

    @override
    @overload
    def setMixingCutoutShape(self, arg0: 'Shape'):
        """public void java.awt.Component.setMixingCutoutShape(java.awt.Shape)"""
        super(_Component, self).setMixingCutoutShape(arg0)

    @override
    @overload
    def getVisibleRect(self) -> 'Rectangle':
        """public java.awt.Rectangle javax.swing.JComponent.getVisibleRect()"""
        return 'Rectangle'._wrap(super(JComponent, self).getVisibleRect())

    @override
    @overload
    def requestFocus(self, arg0: 'Cause'):
        """public void java.awt.Component.requestFocus(java.awt.event.FocusEvent$Cause)"""
        super(_Component, self).requestFocus(arg0)

    @overload
    def createImage(self, arg0: int, arg1: int) -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(int,int)"""
        return 'Image'._wrap(super(_Component, self).createImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def putClientProperty(self, arg0: object, arg1: object):
        """public final void javax.swing.JComponent.putClientProperty(java.lang.Object,java.lang.Object)"""
        super(_JComponent, self).putClientProperty(arg0, arg1)

    @override
    @overload
    def getVetoableChangeListeners(self) -> List['VetoableChangeListener']:
        """public synchronized java.beans.VetoableChangeListener[] javax.swing.JComponent.getVetoableChangeListeners()"""
        return List['VetoableChangeListener']._wrap(super(JComponent, self).getVetoableChangeListeners())

    @override
    @overload
    def scrollRectToVisible(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.scrollRectToVisible(java.awt.Rectangle)"""
        super(_JComponent, self).scrollRectToVisible(arg0)

    @override
    @overload
    def getTopLevelAncestor(self) -> 'Container':
        """public java.awt.Container javax.swing.JComponent.getTopLevelAncestor()"""
        return 'Container'._wrap(super(JComponent, self).getTopLevelAncestor())

    @override
    @overload
    def isRequestFocusEnabled(self) -> bool:
        """public boolean javax.swing.JComponent.isRequestFocusEnabled()"""
        return bool._wrap(super(JComponent, self).isRequestFocusEnabled())

    @override
    @overload
    def getFocusListeners(self) -> List['FocusListener']:
        """public synchronized java.awt.event.FocusListener[] java.awt.Component.getFocusListeners()"""
        return List['FocusListener']._wrap(super(Component, self).getFocusListeners())

    @override
    @overload
    def setLayout(self, arg0: 'LayoutManager'):
        """public void java.awt.Container.setLayout(java.awt.LayoutManager)"""
        super(_Container, self).setLayout(arg0)

    @overload
    def add(self, arg0: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0))

    @override
    @overload
    def getMouseWheelListeners(self) -> List['MouseWheelListener']:
        """public synchronized java.awt.event.MouseWheelListener[] java.awt.Component.getMouseWheelListeners()"""
        return List['MouseWheelListener']._wrap(super(Component, self).getMouseWheelListeners())

    @override
    @overload
    def reshape(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void javax.swing.JComponent.reshape(int,int,int,int)"""
        super(_JComponent, self).reshape(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def setTransferHandler(self, arg0: 'TransferHandler'):
        """public void javax.swing.JComponent.setTransferHandler(javax.swing.TransferHandler)"""
        super(_JComponent, self).setTransferHandler(arg0)

    @override
    @overload
    def getPreferredSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getPreferredSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getPreferredSize())

    @override
    @overload
    def setLocation(self, arg0: int, arg1: int):
        """public void java.awt.Component.setLocation(int,int)"""
        super(_Component, self).setLocation(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def removeInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.removeInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).removeInputMethodListener(arg0)

    @override
    @overload
    def setFocusable(self, arg0: bool):
        """public void java.awt.Component.setFocusable(boolean)"""
        super(_Component, self).setFocusable(_boolean.valueOf(arg0))

    @override
    @overload
    def paintComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.paintComponents(java.awt.Graphics)"""
        super(_Container, self).paintComponents(arg0)

    @override
    @overload
    def addFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.addFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).addFocusListener(arg0)

    @overload
    def prepareImage(self, arg0: 'Image', arg1: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, arg1))

    @override
    @overload
    def addKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.addKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).addKeyListener(arg0)

    @override
    @overload
    def resize(self, arg0: 'Dimension'):
        """public void java.awt.Component.resize(java.awt.Dimension)"""
        super(_Component, self).resize(arg0)

    @override
    @overload
    def setComponentZOrder(self, arg0: 'Component', arg1: int):
        """public void java.awt.Container.setComponentZOrder(java.awt.Component,int)"""
        super(_Container, self).setComponentZOrder(arg0, _int.valueOf(arg1))

    @override
    @overload
    def list(self):
        """public void java.awt.Component.list()"""
        super(Component, self).list()

    @overload
    def add(self, arg0: str, arg1: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.lang.String,java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, arg1))

    @override
    @overload
    def paintImmediately(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void javax.swing.JComponent.paintImmediately(int,int,int,int)"""
        super(_JComponent, self).paintImmediately(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def getMinimumSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getMinimumSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getMinimumSize())

    @override
    @overload
    def setEnabled(self, arg0: bool):
        """public void javax.swing.JComponent.setEnabled(boolean)"""
        super(_JComponent, self).setEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def hasFocus(self) -> bool:
        """public boolean java.awt.Component.hasFocus()"""
        return bool._wrap(super(Component, self).hasFocus())

    @overload
    def createVolatileImage(self, arg0: int, arg1: int) -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int)"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.removeHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).removeHierarchyListener(arg0)

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.awt.Component.toString()"""
        return str._wrap(super(Component, self).toString())

    @override
    @overload
    def addMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.addMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).addMouseListener(arg0)

    @override
    @overload
    def isFocusOwner(self) -> bool:
        """public boolean java.awt.Component.isFocusOwner()"""
        return bool._wrap(super(Component, self).isFocusOwner())

    @override
    @overload
    def getAccessibleContext(self) -> 'AccessibleContext':
        """public javax.accessibility.AccessibleContext javax.swing.JPanel.getAccessibleContext()"""
        return 'AccessibleContext'._wrap(super(JPanel, self).getAccessibleContext())

    @overload
    def postEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.postEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).postEvent(arg0))

    @overload
    def getLocation(self, arg0: 'Point') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getLocation(java.awt.Point)"""
        return 'Point'._wrap(super(_JComponent, self).getLocation(arg0))

    @overload
    def getBaseline(self, arg0: int, arg1: int) -> int:
        """public int javax.swing.JComponent.getBaseline(int,int)"""
        return int._wrap(super(_JComponent, self).getBaseline(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def findComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeNotify(self):
        """public void javax.swing.JComponent.removeNotify()"""
        super(JComponent, self).removeNotify()

    @override
    @overload
    def getForeground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getForeground()"""
        return 'Color'._wrap(super(Component, self).getForeground())

    @override
    @overload
    def show(self):
        """public void java.awt.Component.show()"""
        super(Component, self).show()

    @override
    @overload
    def isDoubleBuffered(self) -> bool:
        """public boolean javax.swing.JComponent.isDoubleBuffered()"""
        return bool._wrap(super(JComponent, self).isDoubleBuffered())

    @override
    @overload
    def setDescription(self, arg0: str):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setDescription(java.lang.String)"""
        super(_EditorPanel, self).setDescription(arg0)

    @override
    @overload
    def isFocusCycleRoot(self) -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot()"""
        return bool._wrap(super(Container, self).isFocusCycleRoot())

    @override
    @overload
    def addMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.addMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).addMouseWheelListener(arg0)

    @override
    @overload
    def hide(self):
        """public void javax.swing.JComponent.hide()"""
        super(JComponent, self).hide()

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def revalidate(self):
        """public void javax.swing.JComponent.revalidate()"""
        super(JComponent, self).revalidate()

    @override
    @overload
    def getActionMap(self) -> 'ActionMap':
        """public final javax.swing.ActionMap javax.swing.JComponent.getActionMap()"""
        return 'ActionMap'._wrap(super(JComponent, self).getActionMap())

    @override
    @overload
    def requestFocusInWindow(self) -> bool:
        """public boolean javax.swing.JComponent.requestFocusInWindow()"""
        return bool._wrap(super(JComponent, self).requestFocusInWindow())

    @overload
    def action(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.action(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).action(arg0, arg1))

    @override
    @overload
    def isManagingFocus(self) -> bool:
        """public boolean javax.swing.JComponent.isManagingFocus()"""
        return bool._wrap(super(JComponent, self).isManagingFocus())

    @override
    @overload
    def isLightweight(self) -> bool:
        """public boolean java.awt.Component.isLightweight()"""
        return bool._wrap(super(Component, self).isLightweight())

    @override
    @overload
    def setAlignmentX(self, arg0: float):
        """public void javax.swing.JComponent.setAlignmentX(float)"""
        super(_JComponent, self).setAlignmentX(_float.valueOf(arg0))

    @overload
    def getFocusTraversalKeys(self, arg0: int) -> 'Set':
        """public java.util.Set<java.awt.AWTKeyStroke> java.awt.Container.getFocusTraversalKeys(int)"""
        return 'Set'._wrap(super(_Container, self).getFocusTraversalKeys(_int.valueOf(arg0)))

    @override
    @overload
    def setFocusTraversalKeysEnabled(self, arg0: bool):
        """public void java.awt.Component.setFocusTraversalKeysEnabled(boolean)"""
        super(_Component, self).setFocusTraversalKeysEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def remove(self, arg0: 'Component'):
        """public void java.awt.Container.remove(java.awt.Component)"""
        super(_Container, self).remove(arg0)

    @overload
    def getInsets(self, arg0: 'Insets') -> 'Insets':
        """public java.awt.Insets javax.swing.JComponent.getInsets(java.awt.Insets)"""
        return 'Insets'._wrap(super(_JComponent, self).getInsets(arg0))

    @override
    @overload
    def insets(self) -> 'Insets':
        """public java.awt.Insets java.awt.Container.insets()"""
        return 'Insets'._wrap(super(Container, self).insets())

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int):
        """public void javax.swing.JComponent.repaint(long,int,int,int,int)"""
        super(_JComponent, self).repaint(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4))

    @override
    @overload
    def setFocusTraversalPolicy(self, arg0: 'FocusTraversalPolicy'):
        """public void java.awt.Container.setFocusTraversalPolicy(java.awt.FocusTraversalPolicy)"""
        super(_Container, self).setFocusTraversalPolicy(arg0)

    @overload
    def getSize(self, arg0: 'Dimension') -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getSize(java.awt.Dimension)"""
        return 'Dimension'._wrap(super(_JComponent, self).getSize(arg0))

    @override
    @overload
    def enable(self, arg0: bool):
        """public void java.awt.Component.enable(boolean)"""
        super(_Component, self).enable(_boolean.valueOf(arg0))

    @overload
    def getToolTipLocation(self, arg0: 'MouseEvent') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getToolTipLocation(java.awt.event.MouseEvent)"""
        return 'Point'._wrap(super(_JComponent, self).getToolTipLocation(arg0))

    @override
    @overload
    def addPropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Container.addPropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Container, self).addPropertyChangeListener(arg0)

    @overload
    def getComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(arg0))

    @override
    @overload
    def size(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.size()"""
        return 'Dimension'._wrap(super(Component, self).size())

    @override
    @overload
    def getVerifyInputWhenFocusTarget(self) -> bool:
        """public boolean javax.swing.JComponent.getVerifyInputWhenFocusTarget()"""
        return bool._wrap(super(JComponent, self).getVerifyInputWhenFocusTarget())

    @overload
    def mouseMove(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseMove(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseMove(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getActionForKeyStroke(self, arg0: 'KeyStroke') -> 'ActionListener':
        """public java.awt.event.ActionListener javax.swing.JComponent.getActionForKeyStroke(javax.swing.KeyStroke)"""
        return 'ActionListener'._wrap(super(_JComponent, self).getActionForKeyStroke(arg0))

    @overload
    def lostFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.lostFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).lostFocus(arg0, arg1))

    @override
    @overload
    def isMinimumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMinimumSizeSet()"""
        return bool._wrap(super(Component, self).isMinimumSizeSet())

    @override
    @overload
    def isForegroundSet(self) -> bool:
        """public boolean java.awt.Component.isForegroundSet()"""
        return bool._wrap(super(Component, self).isForegroundSet())

    @overload
    def getMousePosition(self, arg0: bool) -> 'Point':
        """public java.awt.Point java.awt.Container.getMousePosition(boolean) throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(_Container, self).getMousePosition(_boolean.valueOf(arg0)))

    @overload
    def getFontMetrics(self, arg0: 'Font') -> 'FontMetrics':
        """public java.awt.FontMetrics javax.swing.JComponent.getFontMetrics(java.awt.Font)"""
        return 'FontMetrics'._wrap(super(_JComponent, self).getFontMetrics(arg0))

    @overload
    def getListeners(self, arg0: 'Class') -> List['EventListener']:
        """public <T extends java.util.EventListener> T[] javax.swing.JComponent.getListeners(java.lang.Class<T>)"""
        return List['EventListener']._wrap(super(_JComponent, self).getListeners(arg0))

    @override
    @overload
    def getHierarchyBoundsListeners(self) -> List['HierarchyBoundsListener']:
        """public synchronized java.awt.event.HierarchyBoundsListener[] java.awt.Component.getHierarchyBoundsListeners()"""
        return List['HierarchyBoundsListener']._wrap(super(Component, self).getHierarchyBoundsListeners())

    @override
    @overload
    def minimumSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.minimumSize()"""
        return 'Dimension'._wrap(super(Container, self).minimumSize())

    @overload
    def handleEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.handleEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).handleEvent(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @override
    @overload
    def getComponentListeners(self) -> List['ComponentListener']:
        """public synchronized java.awt.event.ComponentListener[] java.awt.Component.getComponentListeners()"""
        return List['ComponentListener']._wrap(super(Component, self).getComponentListeners())

    @override
    @overload
    def computeVisibleRect(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.computeVisibleRect(java.awt.Rectangle)"""
        super(_JComponent, self).computeVisibleRect(arg0)

    @override
    @overload
    def deliverEvent(self, arg0: 'Event'):
        """public void java.awt.Container.deliverEvent(java.awt.Event)"""
        super(_Container, self).deliverEvent(arg0)

    @override
    @overload
    def addHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.addHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).addHierarchyBoundsListener(arg0)

    @override
    @overload
    def getAlignmentX(self) -> float:
        """public float javax.swing.JComponent.getAlignmentX()"""
        return float._wrap(super(JComponent, self).getAlignmentX())

    @overload
    def add(self, arg0: 'Component', arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component,int)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def repaint(self):
        """public void java.awt.Component.repaint()"""
        super(Component, self).repaint()

    @overload
    def gotFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.gotFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).gotFocus(arg0, arg1))

    @override
    @overload
    def createToolTip(self) -> 'JToolTip':
        """public javax.swing.JToolTip javax.swing.JComponent.createToolTip()"""
        return 'JToolTip'._wrap(super(JComponent, self).createToolTip())

    @override
    @overload
    def setEmbedded(self):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setEmbedded()"""
        super(EditorPanel, self).setEmbedded()

    @overload
    def getToolTipText(self, arg0: 'MouseEvent') -> str:
        """public java.lang.String javax.swing.JComponent.getToolTipText(java.awt.event.MouseEvent)"""
        return str._wrap(super(_JComponent, self).getToolTipText(arg0))

    @override
    @overload
    def printComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.printComponents(java.awt.Graphics)"""
        super(_Container, self).printComponents(arg0)

    @override
    @overload
    def getColorModel(self) -> 'ColorModel':
        """public java.awt.image.ColorModel java.awt.Component.getColorModel()"""
        return 'ColorModel'._wrap(super(Component, self).getColorModel())

    @override
    @overload
    def setFocusTraversalPolicyProvider(self, arg0: bool):
        """public final void java.awt.Container.setFocusTraversalPolicyProvider(boolean)"""
        super(_Container, self).setFocusTraversalPolicyProvider(_boolean.valueOf(arg0))

    @overload
    def getComponentZOrder(self, arg0: 'Component') -> int:
        """public int java.awt.Container.getComponentZOrder(java.awt.Component)"""
        return int._wrap(super(_Container, self).getComponentZOrder(arg0))

    @override
    @overload
    def getDebugGraphicsOptions(self) -> int:
        """public int javax.swing.JComponent.getDebugGraphicsOptions()"""
        return int._wrap(super(JComponent, self).getDebugGraphicsOptions())

    @overload
    def areFocusTraversalKeysSet(self, arg0: int) -> bool:
        """public boolean java.awt.Container.areFocusTraversalKeysSet(int)"""
        return bool._wrap(super(_Container, self).areFocusTraversalKeysSet(_int.valueOf(arg0)))

    @override
    @overload
    def getSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.getSize()"""
        return 'Dimension'._wrap(super(Component, self).getSize())

    @override
    @overload
    def repaint(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.repaint(java.awt.Rectangle)"""
        super(_JComponent, self).repaint(arg0)

    @overload
    def getClientProperty(self, arg0: object) -> object:
        """public final java.lang.Object javax.swing.JComponent.getClientProperty(java.lang.Object)"""
        return object._wrap(super(_JComponent, self).getClientProperty(arg0))

    @override
    @overload
    def unregisterKeyboardAction(self, arg0: 'KeyStroke'):
        """public void javax.swing.JComponent.unregisterKeyboardAction(javax.swing.KeyStroke)"""
        super(_JComponent, self).unregisterKeyboardAction(arg0)

    @overload
    def requestFocus(self, arg0: bool) -> bool:
        """public boolean javax.swing.JComponent.requestFocus(boolean)"""
        return bool._wrap(super(_JComponent, self).requestFocus(_boolean.valueOf(arg0)))

    @override
    @overload
    def setActionMap(self, arg0: 'ActionMap'):
        """public final void javax.swing.JComponent.setActionMap(javax.swing.ActionMap)"""
        super(_JComponent, self).setActionMap(arg0)

    @override
    @overload
    def getX(self) -> int:
        """public int javax.swing.JComponent.getX()"""
        return int._wrap(super(JComponent, self).getX())

    @overload
    def mouseEnter(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseEnter(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseEnter(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def updateUI(self):
        """public void javax.swing.JPanel.updateUI()"""
        super(JPanel, self).updateUI()

    @override
    @overload
    def getToolkit(self) -> 'Toolkit':
        """public java.awt.Toolkit java.awt.Component.getToolkit()"""
        return 'Toolkit'._wrap(super(Component, self).getToolkit())

    @override
    @overload
    def isCursorSet(self) -> bool:
        """public boolean java.awt.Component.isCursorSet()"""
        return bool._wrap(super(Component, self).isCursorSet())

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object, arg2: int):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object,int)"""
        super(_Container, self).add(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def setPreferredSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setPreferredSize(java.awt.Dimension)"""
        super(_JComponent, self).setPreferredSize(arg0)

    @override
    @overload
    def setBounds(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.setBounds(int,int,int,int)"""
        super(_Component, self).setBounds(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def isFocusTraversalPolicySet(self) -> bool:
        """public boolean java.awt.Container.isFocusTraversalPolicySet()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicySet())

    @override
    @overload
    def requestFocus(self):
        """public void javax.swing.JComponent.requestFocus()"""
        super(JComponent, self).requestFocus()

    @override
    @overload
    def getAncestorListeners(self) -> List['AncestorListener']:
        """public javax.swing.event.AncestorListener[] javax.swing.JComponent.getAncestorListeners()"""
        return List['AncestorListener']._wrap(super(JComponent, self).getAncestorListeners())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool._wrap(super(_object, self).equals(arg0))

    @overload
    def getInputMap(self, arg0: int) -> 'InputMap':
        """public final javax.swing.InputMap javax.swing.JComponent.getInputMap(int)"""
        return 'InputMap'._wrap(super(_JComponent, self).getInputMap(_int.valueOf(arg0)))

    @override
    @overload
    def isEnabled(self) -> bool:
        """public boolean java.awt.Component.isEnabled()"""
        return bool._wrap(super(Component, self).isEnabled())

    @override
    @overload
    def move(self, arg0: int, arg1: int):
        """public void java.awt.Component.move(int,int)"""
        super(_Component, self).move(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def addMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.addMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).addMouseMotionListener(arg0)

    @override
    @overload
    def getIgnoreRepaint(self) -> bool:
        """public boolean java.awt.Component.getIgnoreRepaint()"""
        return bool._wrap(super(Component, self).getIgnoreRepaint())

    @overload
    def isFocusCycleRoot(self, arg0: 'Container') -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot(java.awt.Container)"""
        return bool._wrap(super(_Container, self).isFocusCycleRoot(arg0))

    @override
    @overload
    def getGraphics(self) -> 'Graphics':
        """public java.awt.Graphics javax.swing.JComponent.getGraphics()"""
        return 'Graphics'._wrap(super(JComponent, self).getGraphics())

    @override
    @overload
    def setLocale(self, arg0: 'Locale'):
        """public void java.awt.Component.setLocale(java.util.Locale)"""
        super(_Component, self).setLocale(arg0)

    @override
    @overload
    def paintAll(self, arg0: 'Graphics'):
        """public void java.awt.Component.paintAll(java.awt.Graphics)"""
        super(_Component, self).paintAll(arg0)

    @override
    @overload
    def setDoubleBuffered(self, arg0: bool):
        """public void javax.swing.JComponent.setDoubleBuffered(boolean)"""
        super(_JComponent, self).setDoubleBuffered(_boolean.valueOf(arg0))

    @override
    @overload
    def isPreferredSizeSet(self) -> bool:
        """public boolean java.awt.Component.isPreferredSizeSet()"""
        return bool._wrap(super(Component, self).isPreferredSizeSet())

    @override
    @overload
    def addInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.addInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).addInputMethodListener(arg0)

    @override
    @overload
    def removeMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.removeMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).removeMouseWheelListener(arg0)

    @override
    @overload
    def getInputMap(self) -> 'InputMap':
        """public final javax.swing.InputMap javax.swing.JComponent.getInputMap()"""
        return 'InputMap'._wrap(super(JComponent, self).getInputMap())

    @override
    @overload
    def setVisible(self, arg0: bool):
        """public void javax.swing.JComponent.setVisible(boolean)"""
        super(_JComponent, self).setVisible(_boolean.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,byte,byte)"""
        super(_Component, self).firePropertyChange(arg0, _byte.valueOf(arg1), _byte.valueOf(arg2))

    @override
    @overload
    def getUIClassID(self) -> str:
        """public java.lang.String javax.swing.JPanel.getUIClassID()"""
        return str._wrap(super(JPanel, self).getUIClassID())

    @override
    @overload
    def transferFocusDownCycle(self):
        """public void java.awt.Container.transferFocusDownCycle()"""
        super(Container, self).transferFocusDownCycle()

    @override
    @overload
    def getNextFocusableComponent(self) -> 'Component':
        """public java.awt.Component javax.swing.JComponent.getNextFocusableComponent()"""
        return 'Component'._wrap(super(JComponent, self).getNextFocusableComponent())

    @override
    @overload
    def getUI(self) -> 'PanelUI':
        """public javax.swing.plaf.PanelUI javax.swing.JPanel.getUI()"""
        return 'PanelUI'._wrap(super(JPanel, self).getUI())

    @override
    @overload
    def setBounds(self, arg0: 'Rectangle'):
        """public void java.awt.Component.setBounds(java.awt.Rectangle)"""
        super(_Component, self).setBounds(arg0)

    @override
    @overload
    def repaint(self, arg0: int):
        """public void java.awt.Component.repaint(long)"""
        super(_Component, self).repaint(_long.valueOf(arg0))

    @override
    @overload
    def removeHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.removeHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).removeHierarchyBoundsListener(arg0)

    @override
    @overload
    def getComponentPopupMenu(self) -> 'JPopupMenu':
        """public javax.swing.JPopupMenu javax.swing.JComponent.getComponentPopupMenu()"""
        return 'JPopupMenu'._wrap(super(JComponent, self).getComponentPopupMenu())

    @override
    @overload
    def getMousePosition(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getMousePosition() throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(Component, self).getMousePosition())

    @override
    @overload
    def getComponentCount(self) -> int:
        """public int java.awt.Container.getComponentCount()"""
        return int._wrap(super(Container, self).getComponentCount())

    @override
    @overload
    def getInputMethodRequests(self) -> 'InputMethodRequests':
        """public java.awt.im.InputMethodRequests java.awt.Component.getInputMethodRequests()"""
        return 'InputMethodRequests'._wrap(super(Component, self).getInputMethodRequests())

    @override
    @overload
    def setMaximumSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setMaximumSize(java.awt.Dimension)"""
        super(_JComponent, self).setMaximumSize(arg0)

    @override
    @overload
    def setRequestFocusEnabled(self, arg0: bool):
        """public void javax.swing.JComponent.setRequestFocusEnabled(boolean)"""
        super(_JComponent, self).setRequestFocusEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def setFocusTraversalKeys(self, arg0: int, arg1: 'Set'):
        """public void javax.swing.JComponent.setFocusTraversalKeys(int,java.util.Set<? extends java.awt.AWTKeyStroke>)"""
        super(_JComponent, self).setFocusTraversalKeys(_int.valueOf(arg0), arg1)

    @overload
    def inside(self, arg0: int, arg1: int) -> bool:
        """public boolean java.awt.Component.inside(int,int)"""
        return bool._wrap(super(_Component, self).inside(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def requestDefaultFocus(self) -> bool:
        """public boolean javax.swing.JComponent.requestDefaultFocus()"""
        return bool._wrap(super(JComponent, self).requestDefaultFocus())

    @override
    @overload
    def disable(self):
        """public void javax.swing.JComponent.disable()"""
        super(JComponent, self).disable()

    @override
    @overload
    def showContent(self, arg0: bool):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.showContent(boolean)"""
        super(_EditorPanel, self).showContent(_boolean.valueOf(arg0))

    @override
    @overload
    def enableInputMethods(self, arg0: bool):
        """public void java.awt.Component.enableInputMethods(boolean)"""
        super(_Component, self).enableInputMethods(_boolean.valueOf(arg0))

    @override
    @overload
    def layout(self):
        """public void java.awt.Container.layout()"""
        super(Container, self).layout()

    @override
    @overload
    def getInputMethodListeners(self) -> List['InputMethodListener']:
        """public synchronized java.awt.event.InputMethodListener[] java.awt.Component.getInputMethodListeners()"""
        return List['InputMethodListener']._wrap(super(Component, self).getInputMethodListeners())

    @override
    @overload
    def paint(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.paint(java.awt.Graphics)"""
        super(_JComponent, self).paint(arg0)

    @override
    @overload
    def transferFocus(self):
        """public void java.awt.Component.transferFocus()"""
        super(Component, self).transferFocus()

    @override
    @overload
    def removeComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.removeComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).removeComponentListener(arg0)

    @override
    @overload
    def getCursor(self) -> 'Cursor':
        """public java.awt.Cursor java.awt.Component.getCursor()"""
        return 'Cursor'._wrap(super(Component, self).getCursor())

    @override
    @overload
    def setMinimumSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setMinimumSize(java.awt.Dimension)"""
        super(_JComponent, self).setMinimumSize(arg0)

    @override
    @overload
    def getAdvancedPanel(self) -> 'JPanel':
        """public javax.swing.JPanel com.badlogic.gdx.tools.flame.EditorPanel.getAdvancedPanel()"""
        return 'JPanel'._wrap(super(EditorPanel, self).getAdvancedPanel())

    @override
    @overload
    def getContainerListeners(self) -> List['ContainerListener']:
        """public synchronized java.awt.event.ContainerListener[] java.awt.Container.getContainerListeners()"""
        return List['ContainerListener']._wrap(super(Container, self).getContainerListeners())

    @override
    @overload
    def setLocation(self, arg0: 'Point'):
        """public void java.awt.Component.setLocation(java.awt.Point)"""
        super(_Component, self).setLocation(arg0)

    @override
    @overload
    def setSize(self, arg0: 'Dimension'):
        """public void java.awt.Component.setSize(java.awt.Dimension)"""
        super(_Component, self).setSize(arg0)

    @override
    @overload
    def removeAll(self):
        """public void java.awt.Container.removeAll()"""
        super(Container, self).removeAll()

    @overload
    def getPopupLocation(self, arg0: 'MouseEvent') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getPopupLocation(java.awt.event.MouseEvent)"""
        return 'Point'._wrap(super(_JComponent, self).getPopupLocation(arg0))

    @overload
    def isAncestorOf(self, arg0: 'Component') -> bool:
        """public boolean java.awt.Container.isAncestorOf(java.awt.Component)"""
        return bool._wrap(super(_Container, self).isAncestorOf(arg0))

    @override
    @overload
    def setOpaque(self, arg0: bool):
        """public void javax.swing.JComponent.setOpaque(boolean)"""
        super(_JComponent, self).setOpaque(_boolean.valueOf(arg0))

    @overload
    def contains(self, arg0: int, arg1: int) -> bool:
        """public boolean javax.swing.JComponent.contains(int,int)"""
        return bool._wrap(super(_JComponent, self).contains(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def setCursor(self, arg0: 'Cursor'):
        """public void java.awt.Component.setCursor(java.awt.Cursor)"""
        super(_Component, self).setCursor(arg0)

    @override
    @overload
    def validate(self):
        """public void java.awt.Container.validate()"""
        super(Container, self).validate()

    @override
    @overload
    def getMaximumSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getMaximumSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getMaximumSize())

    @override
    @overload
    def getBackground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getBackground()"""
        return 'Color'._wrap(super(Component, self).getBackground())

    @overload
    def createImage(self, arg0: 'ImageProducer') -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(java.awt.image.ImageProducer)"""
        return 'Image'._wrap(super(_Component, self).createImage(arg0))

    @override
    @overload
    def setVerifyInputWhenFocusTarget(self, arg0: bool):
        """public void javax.swing.JComponent.setVerifyInputWhenFocusTarget(boolean)"""
        super(_JComponent, self).setVerifyInputWhenFocusTarget(_boolean.valueOf(arg0))

    @override
    @overload
    def removePropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0, arg1)

    @override
    @overload
    def countComponents(self) -> int:
        """public int java.awt.Container.countComponents()"""
        return int._wrap(super(Container, self).countComponents()) 
 
 
# CLASS: com.badlogic.gdx.tools.flame.RegionPickerPanel$Listener
from pyquantum_helper import import_once as _import_once
try:
    from pygdx import utils
except ImportError:
    utils = _import_once("pygdx.utils")

from abc import abstractmethod, ABC
import com.badlogic.gdx.tools.flame.RegionPickerPanel as _RegionPickerPanel_Listener
_Listener = _RegionPickerPanel_Listener.Listener
 
class Listener():
    """com.badlogic.gdx.tools.flame.RegionPickerPanel.Listener"""
 
    @staticmethod
    def _wrap(java_value: _Listener) -> 'Listener':
        return Listener(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Listener):
        """
        Dynamic initializer for Listener.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Listener__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Listener__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @abstractmethod
    def onRegionsSelected(self, arg0: 'Array', arg1: str):
        """public abstract void com.badlogic.gdx.tools.flame.RegionPickerPanel$Listener.onRegionsSelected(com.badlogic.gdx.utils.Array<com.badlogic.gdx.graphics.g2d.TextureRegion>,java.lang.String)"""
        pass 
 
 
# CLASS: com.badlogic.gdx.tools.flame.RegionInfluencerPanel
from pyquantum_helper import import_once as _import_once
import javax.accessibility.AccessibleContext as AccessibleContext
import javax.swing.JToolTip as JToolTip
import java.awt.event.HierarchyBoundsListener as HierarchyBoundsListener
import java.awt.event.ActionListener as _ActionListener
_ActionListener = _ActionListener
import java.awt.ComponentOrientation as _ComponentOrientation
_ComponentOrientation = _ComponentOrientation
import java.awt.image.ImageProducer as ImageProducer
import java.awt.GraphicsConfiguration as GraphicsConfiguration
import java.awt.Graphics as _Graphics
_Graphics = _Graphics
import javax.swing.JToolTip as _JToolTip
_JToolTip = _JToolTip
import java.awt.Container as _Container
_Container = _Container
import java.awt.MenuComponent as MenuComponent
import java.awt.im.InputMethodRequests as _InputMethodRequests
_InputMethodRequests = _InputMethodRequests
import java.awt.FocusTraversalPolicy as _FocusTraversalPolicy
_FocusTraversalPolicy = _FocusTraversalPolicy
import java.lang.Byte as _byte
import java.awt.Dimension as Dimension
import java.awt.Font as _Font
_Font = _Font
import javax.swing.plaf.PanelUI as _PanelUI
_PanelUI = _PanelUI
import java.awt.event.ContainerListener as ContainerListener
import javax.swing.event.AncestorListener as AncestorListener
import java.awt.AWTEvent as AWTEvent
import javax.swing.JPanel as JPanel
import java.awt.image.ColorModel as _ColorModel
_ColorModel = _ColorModel
import java.lang.Object as _object
import java.awt.ComponentOrientation as ComponentOrientation
import java.awt.im.InputContext as _InputContext
_InputContext = _InputContext
from builtins import float
import java.awt.event.HierarchyListener as HierarchyListener
import java.awt.event.InputMethodListener as InputMethodListener
from typing import List
import java.awt.event.MouseWheelListener as _MouseWheelListener
_MouseWheelListener = _MouseWheelListener
import java.awt.event.KeyListener as KeyListener
import java.awt.Component as Component
from builtins import int
import java.awt.LayoutManager as LayoutManager
import java.awt.FontMetrics as _FontMetrics
_FontMetrics = _FontMetrics
import java.awt.Container as Container
from builtins import type
import java.awt.image.VolatileImage as _VolatileImage
_VolatileImage = _VolatileImage
import java.awt.Shape as Shape
import com.badlogic.gdx.tools.flame.EditorPanel as _EditorPanel
_EditorPanel = _EditorPanel
import java.awt.Rectangle as Rectangle
import java.awt.event.ContainerListener as _ContainerListener
_ContainerListener = _ContainerListener
import java.awt.event.HierarchyListener as _HierarchyListener
_HierarchyListener = _HierarchyListener
import java.lang.String as _string
import javax.swing.InputVerifier as _InputVerifier
_InputVerifier = _InputVerifier
import java.awt.Insets as _Insets
_Insets = _Insets
import javax.swing.border.Border as _Border
_Border = _Border
import java.awt.event.ComponentListener as _ComponentListener
_ComponentListener = _ComponentListener
import javax.swing.ActionMap as ActionMap
import java.beans.VetoableChangeListener as VetoableChangeListener
import java.awt.event.ComponentListener as ComponentListener
import javax.swing.KeyStroke as KeyStroke
import java.beans.VetoableChangeListener as _VetoableChangeListener
_VetoableChangeListener = _VetoableChangeListener
from builtins import object
try:
    from pygdx.graphics.g3d.particles import influencers
except ImportError:
    influencers = _import_once("pygdx.graphics.g3d.particles.influencers")

import java.awt.event.KeyListener as _KeyListener
_KeyListener = _KeyListener
import java.awt.Component.BaselineResizeBehavior as BaselineResizeBehavior
import java.awt.Component as _Component_BaselineResizeBehavior
_BaselineResizeBehavior = _Component_BaselineResizeBehavior.BaselineResizeBehavior
import java.awt.Cursor as _Cursor
_Cursor = _Cursor
import java.awt.im.InputMethodRequests as InputMethodRequests
import java.lang.Long as _long
import javax.swing.JPanel as _JPanel
_JPanel = _JPanel
import java.awt.event.FocusListener as _FocusListener
_FocusListener = _FocusListener
import java.lang.Character as _char
import javax.swing.TransferHandler as TransferHandler
import java.awt.event.FocusEvent.Cause as Cause
import javax.swing.JComponent as JComponent
import javax.accessibility.AccessibleContext as _AccessibleContext
_AccessibleContext = _AccessibleContext
import java.awt.event.MouseWheelListener as MouseWheelListener
import java.util.Set as _Set
_Set = _Set
import java.awt.image.ColorModel as ColorModel
import java.lang.Boolean as _boolean
import java.awt.event.MouseMotionListener as MouseMotionListener
import java.util.EventListener as EventListener
import java.awt.Insets as Insets
import javax.swing.KeyStroke as _KeyStroke
_KeyStroke = _KeyStroke
import java.awt.GraphicsConfiguration as _GraphicsConfiguration
_GraphicsConfiguration = _GraphicsConfiguration
import java.awt.dnd.DropTarget as _DropTarget
_DropTarget = _DropTarget
from builtins import bool
import java.beans.PropertyChangeListener as _PropertyChangeListener
_PropertyChangeListener = _PropertyChangeListener
try:
    from pygdx import utils
except ImportError:
    utils = _import_once("pygdx.utils")

import java.awt.LayoutManager as _LayoutManager
_LayoutManager = _LayoutManager
import java.awt.PopupMenu as PopupMenu
import java.util.EventListener as _EventListener
_EventListener = _EventListener
import java.awt.im.InputContext as InputContext
import java.awt.Component as _Component
_Component = _Component
import java.awt.Font as Font
import java.awt.image.VolatileImage as VolatileImage
import java.awt.dnd.DropTarget as DropTarget
import java.lang.String as _String
_String = _String
import java.lang.Float as _float
import java.awt.Cursor as Cursor
import java.awt.event.MouseListener as _MouseListener
_MouseListener = _MouseListener
import java.awt.Toolkit as _Toolkit
_Toolkit = _Toolkit
import java.io.PrintStream as PrintStream
import javax.swing.JRootPane as _JRootPane
_JRootPane = _JRootPane
import java.awt.Dimension as _Dimension
_Dimension = _Dimension
import java.awt.event.ActionListener as ActionListener
import java.awt.event.MouseEvent as MouseEvent
import java.awt.Color as _Color
_Color = _Color
import com.badlogic.gdx.tools.flame.RegionInfluencerPanel as _RegionInfluencerPanel
_RegionInfluencerPanel = _RegionInfluencerPanel
import javax.swing.JPopupMenu as _JPopupMenu
_JPopupMenu = _JPopupMenu
import javax.swing.InputMap as _InputMap
_InputMap = _InputMap
import java.awt.event.MouseListener as MouseListener
import java.lang.Class as _Class
_Class = _Class
import java.util.Locale as Locale
import java.lang.Double as _double
import javax.swing.plaf.PanelUI as PanelUI
import java.awt.Point as _Point
_Point = _Point
import java.lang.Object as _Object
_Object = _Object
import java.beans.PropertyChangeListener as PropertyChangeListener
import javax.swing.border.Border as Border
import javax.swing.JComponent as _JComponent
_JComponent = _JComponent
import javax.swing.InputVerifier as InputVerifier
import java.io.PrintWriter as PrintWriter
import java.awt.Point as Point
import javax.swing.event.AncestorListener as _AncestorListener
_AncestorListener = _AncestorListener
import java.lang.Short as _short
import java.awt.Toolkit as Toolkit
import java.awt.event.HierarchyBoundsListener as _HierarchyBoundsListener
_HierarchyBoundsListener = _HierarchyBoundsListener
import javax.swing.TransferHandler as _TransferHandler
_TransferHandler = _TransferHandler
import javax.swing.InputMap as InputMap
import java.awt.Rectangle as _Rectangle
_Rectangle = _Rectangle
import javax.swing.JRootPane as JRootPane
import java.awt.Event as Event
import java.awt.event.FocusListener as FocusListener
import java.awt.image.ImageObserver as ImageObserver
from builtins import str
from pyquantum_helper import override
import javax.swing.ActionMap as _ActionMap
_ActionMap = _ActionMap
import java.awt.FocusTraversalPolicy as FocusTraversalPolicy
import java.awt.event.MouseMotionListener as _MouseMotionListener
_MouseMotionListener = _MouseMotionListener
import java.awt.event.InputMethodListener as _InputMethodListener
_InputMethodListener = _InputMethodListener
import javax.swing.JPopupMenu as JPopupMenu
import java.util.Set as Set
import java.lang.Integer as _int
import java.awt.Image as _Image
_Image = _Image
import java.awt.FontMetrics as FontMetrics
import java.awt.Color as Color
import java.awt.Image as Image
import java.awt.Graphics as Graphics
import java.awt.ImageCapabilities as ImageCapabilities
import java.util.Locale as _Locale
_Locale = _Locale
 
class RegionInfluencerPanel():
    """com.badlogic.gdx.tools.flame.RegionInfluencerPanel"""
 
    @staticmethod
    def _wrap(java_value: _RegionInfluencerPanel) -> 'RegionInfluencerPanel':
        return RegionInfluencerPanel(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _RegionInfluencerPanel):
        """
        Dynamic initializer for RegionInfluencerPanel.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_RegionInfluencerPanel__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_RegionInfluencerPanel__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def removeVetoableChangeListener(self, arg0: 'VetoableChangeListener'):
        """public synchronized void javax.swing.JComponent.removeVetoableChangeListener(java.beans.VetoableChangeListener)"""
        super(_JComponent, self).removeVetoableChangeListener(arg0)

    @override
    @overload
    def getComponents(self) -> List['Component']:
        """public java.awt.Component[] java.awt.Container.getComponents()"""
        return List['Component']._wrap(super(Container, self).getComponents())

    @override
    @overload
    def setDebugGraphicsOptions(self, arg0: int):
        """public void javax.swing.JComponent.setDebugGraphicsOptions(int)"""
        super(_JComponent, self).setDebugGraphicsOptions(_int.valueOf(arg0))

    @override
    @overload
    def isValid(self) -> bool:
        """public boolean java.awt.Component.isValid()"""
        return bool._wrap(super(Component, self).isValid())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def getDefaultLocale() -> 'Locale':
        """public static java.util.Locale javax.swing.JComponent.getDefaultLocale()"""
        return Locale._wrap(_JComponent.getDefaultLocale())

    @override
    @overload
    def getInputVerifier(self) -> 'InputVerifier':
        """public javax.swing.InputVerifier javax.swing.JComponent.getInputVerifier()"""
        return 'InputVerifier'._wrap(super(JComponent, self).getInputVerifier())

    @override
    @overload
    def list(self, arg0: 'PrintStream', arg1: int):
        """public void java.awt.Container.list(java.io.PrintStream,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @override
    @overload
    def setUI(self, arg0: 'PanelUI'):
        """public void javax.swing.JPanel.setUI(javax.swing.plaf.PanelUI)"""
        super(_JPanel, self).setUI(arg0)

    @override
    @overload
    def getFocusTraversalPolicy(self) -> 'FocusTraversalPolicy':
        """public java.awt.FocusTraversalPolicy java.awt.Container.getFocusTraversalPolicy()"""
        return 'FocusTraversalPolicy'._wrap(super(Container, self).getFocusTraversalPolicy())

    @override
    @overload
    def getParent(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getParent()"""
        return 'Container'._wrap(super(Component, self).getParent())

    @override
    @overload
    def paintImmediately(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.paintImmediately(java.awt.Rectangle)"""
        super(_JComponent, self).paintImmediately(arg0)

    @staticmethod
    @overload
    def setDefaultLocale(arg0: 'Locale'):
        """public static void javax.swing.JComponent.setDefaultLocale(java.util.Locale)"""
        _JComponent.setDefaultLocale(arg0)

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,float,float)"""
        super(_Component, self).firePropertyChange(arg0, _float.valueOf(arg1), _float.valueOf(arg2))

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object)"""
        super(_Container, self).add(arg0, arg1)

    @override
    @overload
    def getLocale(self) -> 'Locale':
        """public java.util.Locale java.awt.Component.getLocale()"""
        return 'Locale'._wrap(super(Component, self).getLocale())

    @override
    @overload
    def setInheritsPopupMenu(self, arg0: bool):
        """public void javax.swing.JComponent.setInheritsPopupMenu(boolean)"""
        super(_JComponent, self).setInheritsPopupMenu(_boolean.valueOf(arg0))

    @override
    @overload
    def getHierarchyListeners(self) -> List['HierarchyListener']:
        """public synchronized java.awt.event.HierarchyListener[] java.awt.Component.getHierarchyListeners()"""
        return List['HierarchyListener']._wrap(super(Component, self).getHierarchyListeners())

    @override
    @overload
    def nextFocus(self):
        """public void java.awt.Component.nextFocus()"""
        super(Component, self).nextFocus()

    @override
    @overload
    def isPaintingTile(self) -> bool:
        """public boolean javax.swing.JComponent.isPaintingTile()"""
        return bool._wrap(super(JComponent, self).isPaintingTile())

    @override
    @overload
    def getContentPanel(self) -> 'JPanel':
        """public javax.swing.JPanel com.badlogic.gdx.tools.flame.EditorPanel.getContentPanel()"""
        return 'JPanel'._wrap(super(EditorPanel, self).getContentPanel())

    @override
    @overload
    def isDisplayable(self) -> bool:
        """public boolean java.awt.Component.isDisplayable()"""
        return bool._wrap(super(Component, self).isDisplayable())

    @override
    @overload
    def getBounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.getBounds()"""
        return 'Rectangle'._wrap(super(Component, self).getBounds())

    @override
    @overload
    def removeMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.removeMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).removeMouseMotionListener(arg0)

    @override
    @overload
    def isShowing(self) -> bool:
        """public boolean java.awt.Component.isShowing()"""
        return bool._wrap(super(Component, self).isShowing())

    @override
    @overload
    def getDropTarget(self) -> 'DropTarget':
        """public synchronized java.awt.dnd.DropTarget java.awt.Component.getDropTarget()"""
        return 'DropTarget'._wrap(super(Component, self).getDropTarget())

    @override
    @overload
    def isFontSet(self) -> bool:
        """public boolean java.awt.Component.isFontSet()"""
        return bool._wrap(super(Component, self).isFontSet())

    @overload
    def mouseUp(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseUp(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseUp(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def setIgnoreRepaint(self, arg0: bool):
        """public void java.awt.Component.setIgnoreRepaint(boolean)"""
        super(_Component, self).setIgnoreRepaint(_boolean.valueOf(arg0))

    @override
    @overload
    def getPropertyChangeListeners(self) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners()"""
        return List['PropertyChangeListener']._wrap(super(Component, self).getPropertyChangeListeners())

    @override
    @overload
    def isBackgroundSet(self) -> bool:
        """public boolean java.awt.Component.isBackgroundSet()"""
        return bool._wrap(super(Component, self).isBackgroundSet())

    @override
    @overload
    def getLocation(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocation()"""
        return 'Point'._wrap(super(Component, self).getLocation())

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int._wrap(super(object, self).hashCode())

    @override
    @overload
    def location(self) -> 'Point':
        """public java.awt.Point java.awt.Component.location()"""
        return 'Point'._wrap(super(Component, self).location())

    @override
    @overload
    def getComponentOrientation(self) -> 'ComponentOrientation':
        """public java.awt.ComponentOrientation java.awt.Component.getComponentOrientation()"""
        return 'ComponentOrientation'._wrap(super(Component, self).getComponentOrientation())

    @override
    @overload
    def addHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.addHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).addHierarchyListener(arg0)

    @override
    @overload
    def getInheritsPopupMenu(self) -> bool:
        """public boolean javax.swing.JComponent.getInheritsPopupMenu()"""
        return bool._wrap(super(JComponent, self).getInheritsPopupMenu())

    @override
    @overload
    def setComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Component.setComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Component, self).setComponentOrientation(arg0)

    @override
    @overload
    def getFocusCycleRootAncestor(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getFocusCycleRootAncestor()"""
        return 'Container'._wrap(super(Component, self).getFocusCycleRootAncestor())

    @override
    @overload
    def show(self, arg0: bool):
        """public void java.awt.Component.show(boolean)"""
        super(_Component, self).show(_boolean.valueOf(arg0))

    @staticmethod
    @overload
    def addContent(arg0: 'JPanel', arg1: int, arg2: int, arg3: 'JComponent', arg4: bool, arg5: int, arg6: int, arg7: float, arg8: float):
        """public static void com.badlogic.gdx.tools.flame.EditorPanel.addContent(javax.swing.JPanel,int,int,javax.swing.JComponent,boolean,int,int,float,float)"""
        _EditorPanel.addContent(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3, _boolean.valueOf(arg4), _int.valueOf(arg5), _int.valueOf(arg6), _float.valueOf(arg7), _float.valueOf(arg8))

    @override
    @overload
    def grabFocus(self):
        """public void javax.swing.JComponent.grabFocus()"""
        super(JComponent, self).grabFocus()

    @overload
    def locate(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.locate(int,int)"""
        return 'Component'._wrap(super(_Container, self).locate(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def isPaintingForPrint(self) -> bool:
        """public final boolean javax.swing.JComponent.isPaintingForPrint()"""
        return bool._wrap(super(JComponent, self).isPaintingForPrint())

    @overload
    def keyDown(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyDown(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyDown(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,int,int)"""
        super(_JComponent, self).firePropertyChange(arg0, _int.valueOf(arg1), _int.valueOf(arg2))

    @override
    @overload
    def getLayout(self) -> 'LayoutManager':
        """public java.awt.LayoutManager java.awt.Container.getLayout()"""
        return 'LayoutManager'._wrap(super(Container, self).getLayout())

    @override
    @overload
    def preferredSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.preferredSize()"""
        return 'Dimension'._wrap(super(Container, self).preferredSize())

    @override
    @overload
    def addNotify(self):
        """public void javax.swing.JComponent.addNotify()"""
        super(JComponent, self).addNotify()

    @override
    @overload
    def setSize(self, arg0: int, arg1: int):
        """public void java.awt.Component.setSize(int,int)"""
        super(_Component, self).setSize(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.repaint(int,int,int,int)"""
        super(_Component, self).repaint(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @overload
    def requestFocusInWindow(self, arg0: 'Cause') -> bool:
        """public boolean java.awt.Component.requestFocusInWindow(java.awt.event.FocusEvent$Cause)"""
        return bool._wrap(super(_Component, self).requestFocusInWindow(arg0))

    @override
    @overload
    def remove(self, arg0: int):
        """public void java.awt.Container.remove(int)"""
        super(_Container, self).remove(_int.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,long,long)"""
        super(_Component, self).firePropertyChange(arg0, _long.valueOf(arg1), _long.valueOf(arg2))

    @override
    @overload
    def update(self, arg0: 'FlameMain'):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.update(com.badlogic.gdx.tools.flame.FlameMain)"""
        super(_EditorPanel, self).update(arg0)

    @override
    @overload
    def setFocusCycleRoot(self, arg0: bool):
        """public void java.awt.Container.setFocusCycleRoot(boolean)"""
        super(_Container, self).setFocusCycleRoot(_boolean.valueOf(arg0))

    @overload
    def keyUp(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyUp(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyUp(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def setBackground(self, arg0: 'Color'):
        """public void javax.swing.JComponent.setBackground(java.awt.Color)"""
        super(_JComponent, self).setBackground(arg0)

    @override
    @overload
    def doLayout(self):
        """public void java.awt.Container.doLayout()"""
        super(Container, self).doLayout()

    @override
    @overload
    def enable(self):
        """public void javax.swing.JComponent.enable()"""
        super(JComponent, self).enable()

    @override
    @overload
    def getInsets(self) -> 'Insets':
        """public java.awt.Insets javax.swing.JComponent.getInsets()"""
        return 'Insets'._wrap(super(JComponent, self).getInsets())

    @override
    @overload
    def setNextFocusableComponent(self, arg0: 'Component'):
        """public void javax.swing.JComponent.setNextFocusableComponent(java.awt.Component)"""
        super(_JComponent, self).setNextFocusableComponent(arg0)

    @override
    @overload
    def getAlignmentY(self) -> float:
        """public float javax.swing.JComponent.getAlignmentY()"""
        return float._wrap(super(JComponent, self).getAlignmentY())

    @overload
    def checkImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @override
    @overload
    def getFocusTraversalKeysEnabled(self) -> bool:
        """public boolean java.awt.Component.getFocusTraversalKeysEnabled()"""
        return bool._wrap(super(Component, self).getFocusTraversalKeysEnabled())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getRootPane(self) -> 'JRootPane':
        """public javax.swing.JRootPane javax.swing.JComponent.getRootPane()"""
        return 'JRootPane'._wrap(super(JComponent, self).getRootPane())

    @override
    @overload
    def invalidate(self):
        """public void java.awt.Container.invalidate()"""
        super(Container, self).invalidate()

    @override
    @overload
    def resetKeyboardActions(self):
        """public void javax.swing.JComponent.resetKeyboardActions()"""
        super(JComponent, self).resetKeyboardActions()

    @overload
    def getComponent(self, arg0: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponent(int)"""
        return 'Component'._wrap(super(_Container, self).getComponent(_int.valueOf(arg0)))

    @override
    @overload
    def setName(self, arg0: str):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setName(java.lang.String)"""
        super(_EditorPanel, self).setName(arg0)

    @override
    @overload
    def addPropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Container.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Container, self).addPropertyChangeListener(arg0, arg1)

    @override
    @overload
    def setInputMap(self, arg0: int, arg1: 'InputMap'):
        """public final void javax.swing.JComponent.setInputMap(int,javax.swing.InputMap)"""
        super(_JComponent, self).setInputMap(_int.valueOf(arg0), arg1)

    @override
    @overload
    def removePropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0)

    @override
    @overload
    def applyComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Container.applyComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Container, self).applyComponentOrientation(arg0)

    @override
    @overload
    def setBorder(self, arg0: 'Border'):
        """public void javax.swing.JComponent.setBorder(javax.swing.border.Border)"""
        super(_JComponent, self).setBorder(arg0)

    @override
    @overload
    def remove(self, arg0: 'MenuComponent'):
        """public void java.awt.Component.remove(java.awt.MenuComponent)"""
        super(_Component, self).remove(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintStream'):
        """public void java.awt.Component.list(java.io.PrintStream)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def removeMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.removeMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).removeMouseListener(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintWriter'):
        """public void java.awt.Component.list(java.io.PrintWriter)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def getKeyListeners(self) -> List['KeyListener']:
        """public synchronized java.awt.event.KeyListener[] java.awt.Component.getKeyListeners()"""
        return List['KeyListener']._wrap(super(Component, self).getKeyListeners())

    @override
    @overload
    def getInputContext(self) -> 'InputContext':
        """public java.awt.im.InputContext java.awt.Component.getInputContext()"""
        return 'InputContext'._wrap(super(Component, self).getInputContext())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,double,double)"""
        super(_Component, self).firePropertyChange(arg0, _double.valueOf(arg1), _double.valueOf(arg2))

    @override
    @overload
    def removeAncestorListener(self, arg0: 'AncestorListener'):
        """public void javax.swing.JComponent.removeAncestorListener(javax.swing.event.AncestorListener)"""
        super(_JComponent, self).removeAncestorListener(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintWriter', arg1: int):
        """public void java.awt.Container.list(java.io.PrintWriter,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @overload
    def checkImage(self, arg0: 'Image', arg1: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, arg1))

    @override
    @overload
    def removeFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.removeFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).removeFocusListener(arg0)

    @overload
    def mouseDown(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDown(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDown(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def setIsAlwayShown(self, arg0: bool):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setIsAlwayShown(boolean)"""
        super(_EditorPanel, self).setIsAlwayShown(_boolean.valueOf(arg0))

    @overload
    def getConditionForKeyStroke(self, arg0: 'KeyStroke') -> int:
        """public int javax.swing.JComponent.getConditionForKeyStroke(javax.swing.KeyStroke)"""
        return int._wrap(super(_JComponent, self).getConditionForKeyStroke(arg0))

    @override
    @overload
    def getTreeLock(self) -> object:
        """public final java.lang.Object java.awt.Component.getTreeLock()"""
        return object._wrap(super(Component, self).getTreeLock())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @override
    @overload
    def addVetoableChangeListener(self, arg0: 'VetoableChangeListener'):
        """public synchronized void javax.swing.JComponent.addVetoableChangeListener(java.beans.VetoableChangeListener)"""
        super(_JComponent, self).addVetoableChangeListener(arg0)

    @overload
    def contains(self, arg0: 'Point') -> bool:
        """public boolean java.awt.Component.contains(java.awt.Point)"""
        return bool._wrap(super(_Component, self).contains(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,short,short)"""
        super(_Component, self).firePropertyChange(arg0, _short.valueOf(arg1), _short.valueOf(arg2))

    @override
    @overload
    def dispatchEvent(self, arg0: 'AWTEvent'):
        """public final void java.awt.Component.dispatchEvent(java.awt.AWTEvent)"""
        super(_Component, self).dispatchEvent(arg0)

    @override
    @overload
    def removeContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.removeContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).removeContainerListener(arg0)

    @override
    @overload
    def getGraphicsConfiguration(self) -> 'GraphicsConfiguration':
        """public java.awt.GraphicsConfiguration java.awt.Component.getGraphicsConfiguration()"""
        return 'GraphicsConfiguration'._wrap(super(Component, self).getGraphicsConfiguration())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: bool, arg2: bool):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,boolean,boolean)"""
        super(_JComponent, self).firePropertyChange(arg0, _boolean.valueOf(arg1), _boolean.valueOf(arg2))

    @override
    @overload
    def registerKeyboardAction(self, arg0: 'ActionListener', arg1: str, arg2: 'KeyStroke', arg3: int):
        """public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,java.lang.String,javax.swing.KeyStroke,int)"""
        super(_JComponent, self).registerKeyboardAction(arg0, arg1, arg2, _int.valueOf(arg3))

    @overload
    def findComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(arg0))

    @override
    @overload
    def resize(self, arg0: int, arg1: int):
        """public void java.awt.Component.resize(int,int)"""
        super(_Component, self).resize(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getHeight(self) -> int:
        """public int javax.swing.JComponent.getHeight()"""
        return int._wrap(super(JComponent, self).getHeight())

    @override
    @overload
    def getTransferHandler(self) -> 'TransferHandler':
        """public javax.swing.TransferHandler javax.swing.JComponent.getTransferHandler()"""
        return 'TransferHandler'._wrap(super(JComponent, self).getTransferHandler())

    @overload
    def imageUpdate(self, arg0: 'Image', arg1: int, arg2: int, arg3: int, arg4: int, arg5: int) -> bool:
        """public boolean java.awt.Component.imageUpdate(java.awt.Image,int,int,int,int,int)"""
        return bool._wrap(super(_Component, self).imageUpdate(arg0, _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4), _int.valueOf(arg5)))

    @override
    @overload
    def getWidth(self) -> int:
        """public int javax.swing.JComponent.getWidth()"""
        return int._wrap(super(JComponent, self).getWidth())

    @override
    @overload
    def transferFocusBackward(self):
        """public void java.awt.Component.transferFocusBackward()"""
        super(Component, self).transferFocusBackward()

    @overload
    def getPropertyChangeListeners(self, arg0: str) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners(java.lang.String)"""
        return List['PropertyChangeListener']._wrap(super(_Component, self).getPropertyChangeListeners(arg0))

    @override
    @overload
    def getName(self) -> str:
        """public java.lang.String com.badlogic.gdx.tools.flame.EditorPanel.getName()"""
        return str._wrap(super(EditorPanel, self).getName())

    @staticmethod
    @overload
    def isLightweightComponent(arg0: 'Component') -> bool:
        """public static boolean javax.swing.JComponent.isLightweightComponent(java.awt.Component)"""
        return bool._wrap(_JComponent.isLightweightComponent(arg0))

    @override
    @overload
    def getBorder(self) -> 'Border':
        """public javax.swing.border.Border javax.swing.JComponent.getBorder()"""
        return 'Border'._wrap(super(JComponent, self).getBorder())

    @override
    @overload
    def printAll(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.printAll(java.awt.Graphics)"""
        super(_JComponent, self).printAll(arg0)

    @override
    @overload
    def addComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.addComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).addComponentListener(arg0)

    @override
    @overload
    def getBaselineResizeBehavior(self) -> 'BaselineResizeBehavior.Component$BaselineResizeBehavior':
        """public java.awt.Component$BaselineResizeBehavior javax.swing.JComponent.getBaselineResizeBehavior()"""
        return 'BaselineResizeBehavior.Component$BaselineResizeBehavior'._wrap(super(JComponent, self).getBaselineResizeBehavior())

    @override
    @overload
    def print(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.print(java.awt.Graphics)"""
        super(_JComponent, self).print(arg0)

    @override
    @overload
    def setInputVerifier(self, arg0: 'InputVerifier'):
        """public void javax.swing.JComponent.setInputVerifier(javax.swing.InputVerifier)"""
        super(_JComponent, self).setInputVerifier(arg0)

    @override
    @overload
    def addAncestorListener(self, arg0: 'AncestorListener'):
        """public void javax.swing.JComponent.addAncestorListener(javax.swing.event.AncestorListener)"""
        super(_JComponent, self).addAncestorListener(arg0)

    @override
    @overload
    def getFont(self) -> 'Font':
        """public java.awt.Font java.awt.Component.getFont()"""
        return 'Font'._wrap(super(Component, self).getFont())

    @override
    @overload
    def setFont(self, arg0: 'Font'):
        """public void javax.swing.JComponent.setFont(java.awt.Font)"""
        super(_JComponent, self).setFont(arg0)

    @override
    @overload
    def isOptimizedDrawingEnabled(self) -> bool:
        """public boolean javax.swing.JComponent.isOptimizedDrawingEnabled()"""
        return bool._wrap(super(JComponent, self).isOptimizedDrawingEnabled())

    @override
    @overload
    def isValidateRoot(self) -> bool:
        """public boolean javax.swing.JComponent.isValidateRoot()"""
        return bool._wrap(super(JComponent, self).isValidateRoot())

    @overload
    def prepareImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @override
    @overload
    def setHasAdvanced(self, arg0: bool):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setHasAdvanced(boolean)"""
        super(_EditorPanel, self).setHasAdvanced(_boolean.valueOf(arg0))

    @override
    @overload
    def setForeground(self, arg0: 'Color'):
        """public void javax.swing.JComponent.setForeground(java.awt.Color)"""
        super(_JComponent, self).setForeground(arg0)

    @overload
    def mouseDrag(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDrag(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDrag(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def isOpaque(self) -> bool:
        """public boolean javax.swing.JComponent.isOpaque()"""
        return bool._wrap(super(JComponent, self).isOpaque())

    @overload
    def createVolatileImage(self, arg0: int, arg1: int, arg2: 'ImageCapabilities') -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int,java.awt.ImageCapabilities) throws java.awt.AWTException"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1), arg2))

    @override
    @overload
    def bounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.bounds()"""
        return 'Rectangle'._wrap(super(Component, self).bounds())

    @override
    @overload
    def update(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.update(java.awt.Graphics)"""
        super(_JComponent, self).update(arg0)

    @override
    @overload
    def add(self, arg0: 'PopupMenu'):
        """public void java.awt.Component.add(java.awt.PopupMenu)"""
        super(_Component, self).add(arg0)

    @override
    @overload
    def getToolTipText(self) -> str:
        """public java.lang.String javax.swing.JComponent.getToolTipText()"""
        return str._wrap(super(JComponent, self).getToolTipText())

    @override
    @overload
    def isVisible(self) -> bool:
        """public boolean java.awt.Component.isVisible()"""
        return bool._wrap(super(Component, self).isVisible())

    @override
    @overload
    def setDropTarget(self, arg0: 'DropTarget'):
        """public synchronized void java.awt.Component.setDropTarget(java.awt.dnd.DropTarget)"""
        super(_Component, self).setDropTarget(arg0)

    @override
    @overload
    def getLocationOnScreen(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocationOnScreen()"""
        return 'Point'._wrap(super(Component, self).getLocationOnScreen())

    @override
    @overload
    def getY(self) -> int:
        """public int javax.swing.JComponent.getY()"""
        return int._wrap(super(JComponent, self).getY())

    @overload
    def getComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def isMaximumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMaximumSizeSet()"""
        return bool._wrap(super(Component, self).isMaximumSizeSet())

    @override
    @overload
    def setAlignmentY(self, arg0: float):
        """public void javax.swing.JComponent.setAlignmentY(float)"""
        super(_JComponent, self).setAlignmentY(_float.valueOf(arg0))

    @override
    @overload
    def getRegisteredKeyStrokes(self) -> List['KeyStroke']:
        """public javax.swing.KeyStroke[] javax.swing.JComponent.getRegisteredKeyStrokes()"""
        return List['KeyStroke']._wrap(super(JComponent, self).getRegisteredKeyStrokes())

    @override
    @overload
    def isFocusable(self) -> bool:
        """public boolean java.awt.Component.isFocusable()"""
        return bool._wrap(super(Component, self).isFocusable())

    @override
    @overload
    def isFocusTraversalPolicyProvider(self) -> bool:
        """public final boolean java.awt.Container.isFocusTraversalPolicyProvider()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicyProvider())

    @override
    @overload
    def getMouseListeners(self) -> List['MouseListener']:
        """public synchronized java.awt.event.MouseListener[] java.awt.Component.getMouseListeners()"""
        return List['MouseListener']._wrap(super(Component, self).getMouseListeners())

    @override
    @overload
    def setValue(self, arg0: object):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setValue(T)"""
        super(_EditorPanel, self).setValue(arg0)

    @override
    @overload
    def registerKeyboardAction(self, arg0: 'ActionListener', arg1: 'KeyStroke', arg2: int):
        """public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,javax.swing.KeyStroke,int)"""
        super(_JComponent, self).registerKeyboardAction(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def transferFocusUpCycle(self):
        """public void java.awt.Component.transferFocusUpCycle()"""
        super(Component, self).transferFocusUpCycle()

    @override
    @overload
    def removeKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.removeKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).removeKeyListener(arg0)

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: str, arg2: str):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,char,char)"""
        super(_JComponent, self).firePropertyChange(arg0, _char.valueOf(arg1), _char.valueOf(arg2))

    @override
    @overload
    def getMouseMotionListeners(self) -> List['MouseMotionListener']:
        """public synchronized java.awt.event.MouseMotionListener[] java.awt.Component.getMouseMotionListeners()"""
        return List['MouseMotionListener']._wrap(super(Component, self).getMouseMotionListeners())

    @override
    @overload
    def getAutoscrolls(self) -> bool:
        """public boolean javax.swing.JComponent.getAutoscrolls()"""
        return bool._wrap(super(JComponent, self).getAutoscrolls())

    @override
    @overload
    def addContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.addContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).addContainerListener(arg0)

    @override
    @overload
    def isFocusTraversable(self) -> bool:
        """public boolean java.awt.Component.isFocusTraversable()"""
        return bool._wrap(super(Component, self).isFocusTraversable())

    @overload
    def mouseExit(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseExit(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseExit(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getBounds(self, arg0: 'Rectangle') -> 'Rectangle':
        """public java.awt.Rectangle javax.swing.JComponent.getBounds(java.awt.Rectangle)"""
        return 'Rectangle'._wrap(super(_JComponent, self).getBounds(arg0))

    @override
    @overload
    def setToolTipText(self, arg0: str):
        """public void javax.swing.JComponent.setToolTipText(java.lang.String)"""
        super(_JComponent, self).setToolTipText(arg0)

    @override
    @overload
    def setAutoscrolls(self, arg0: bool):
        """public void javax.swing.JComponent.setAutoscrolls(boolean)"""
        super(_JComponent, self).setAutoscrolls(_boolean.valueOf(arg0))

    @override
    @overload
    def setComponentPopupMenu(self, arg0: 'JPopupMenu'):
        """public void javax.swing.JComponent.setComponentPopupMenu(javax.swing.JPopupMenu)"""
        super(_JComponent, self).setComponentPopupMenu(arg0)

    @override
    @overload
    def setMixingCutoutShape(self, arg0: 'Shape'):
        """public void java.awt.Component.setMixingCutoutShape(java.awt.Shape)"""
        super(_Component, self).setMixingCutoutShape(arg0)

    @override
    @overload
    def getVisibleRect(self) -> 'Rectangle':
        """public java.awt.Rectangle javax.swing.JComponent.getVisibleRect()"""
        return 'Rectangle'._wrap(super(JComponent, self).getVisibleRect())

    @override
    @overload
    def requestFocus(self, arg0: 'Cause'):
        """public void java.awt.Component.requestFocus(java.awt.event.FocusEvent$Cause)"""
        super(_Component, self).requestFocus(arg0)

    @overload
    def createImage(self, arg0: int, arg1: int) -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(int,int)"""
        return 'Image'._wrap(super(_Component, self).createImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def putClientProperty(self, arg0: object, arg1: object):
        """public final void javax.swing.JComponent.putClientProperty(java.lang.Object,java.lang.Object)"""
        super(_JComponent, self).putClientProperty(arg0, arg1)

    @override
    @overload
    def getVetoableChangeListeners(self) -> List['VetoableChangeListener']:
        """public synchronized java.beans.VetoableChangeListener[] javax.swing.JComponent.getVetoableChangeListeners()"""
        return List['VetoableChangeListener']._wrap(super(JComponent, self).getVetoableChangeListeners())

    @override
    @overload
    def scrollRectToVisible(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.scrollRectToVisible(java.awt.Rectangle)"""
        super(_JComponent, self).scrollRectToVisible(arg0)

    @override
    @overload
    def getTopLevelAncestor(self) -> 'Container':
        """public java.awt.Container javax.swing.JComponent.getTopLevelAncestor()"""
        return 'Container'._wrap(super(JComponent, self).getTopLevelAncestor())

    @override
    @overload
    def isRequestFocusEnabled(self) -> bool:
        """public boolean javax.swing.JComponent.isRequestFocusEnabled()"""
        return bool._wrap(super(JComponent, self).isRequestFocusEnabled())

    @override
    @overload
    def getFocusListeners(self) -> List['FocusListener']:
        """public synchronized java.awt.event.FocusListener[] java.awt.Component.getFocusListeners()"""
        return List['FocusListener']._wrap(super(Component, self).getFocusListeners())

    @override
    @overload
    def setLayout(self, arg0: 'LayoutManager'):
        """public void java.awt.Container.setLayout(java.awt.LayoutManager)"""
        super(_Container, self).setLayout(arg0)

    @overload
    def add(self, arg0: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0))

    @override
    @overload
    def getMouseWheelListeners(self) -> List['MouseWheelListener']:
        """public synchronized java.awt.event.MouseWheelListener[] java.awt.Component.getMouseWheelListeners()"""
        return List['MouseWheelListener']._wrap(super(Component, self).getMouseWheelListeners())

    @override
    @overload
    def reshape(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void javax.swing.JComponent.reshape(int,int,int,int)"""
        super(_JComponent, self).reshape(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def setTransferHandler(self, arg0: 'TransferHandler'):
        """public void javax.swing.JComponent.setTransferHandler(javax.swing.TransferHandler)"""
        super(_JComponent, self).setTransferHandler(arg0)

    @override
    @overload
    def getPreferredSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getPreferredSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getPreferredSize())

    @override
    @overload
    def setLocation(self, arg0: int, arg1: int):
        """public void java.awt.Component.setLocation(int,int)"""
        super(_Component, self).setLocation(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def removeInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.removeInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).removeInputMethodListener(arg0)

    @override
    @overload
    def setFocusable(self, arg0: bool):
        """public void java.awt.Component.setFocusable(boolean)"""
        super(_Component, self).setFocusable(_boolean.valueOf(arg0))

    @override
    @overload
    def paintComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.paintComponents(java.awt.Graphics)"""
        super(_Container, self).paintComponents(arg0)

    @override
    @overload
    def addFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.addFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).addFocusListener(arg0)

    @overload
    def prepareImage(self, arg0: 'Image', arg1: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, arg1))

    @override
    @overload
    def addKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.addKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).addKeyListener(arg0)

    @override
    @overload
    def resize(self, arg0: 'Dimension'):
        """public void java.awt.Component.resize(java.awt.Dimension)"""
        super(_Component, self).resize(arg0)

    @override
    @overload
    def setComponentZOrder(self, arg0: 'Component', arg1: int):
        """public void java.awt.Container.setComponentZOrder(java.awt.Component,int)"""
        super(_Container, self).setComponentZOrder(arg0, _int.valueOf(arg1))

    @override
    @overload
    def list(self):
        """public void java.awt.Component.list()"""
        super(Component, self).list()

    @overload
    def add(self, arg0: str, arg1: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.lang.String,java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, arg1))

    @override
    @overload
    def paintImmediately(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void javax.swing.JComponent.paintImmediately(int,int,int,int)"""
        super(_JComponent, self).paintImmediately(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def getMinimumSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getMinimumSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getMinimumSize())

    @override
    @overload
    def setEnabled(self, arg0: bool):
        """public void javax.swing.JComponent.setEnabled(boolean)"""
        super(_JComponent, self).setEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def hasFocus(self) -> bool:
        """public boolean java.awt.Component.hasFocus()"""
        return bool._wrap(super(Component, self).hasFocus())

    @overload
    def createVolatileImage(self, arg0: int, arg1: int) -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int)"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.removeHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).removeHierarchyListener(arg0)

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.awt.Component.toString()"""
        return str._wrap(super(Component, self).toString())

    @override
    @overload
    def addMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.addMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).addMouseListener(arg0)

    @override
    @overload
    def isFocusOwner(self) -> bool:
        """public boolean java.awt.Component.isFocusOwner()"""
        return bool._wrap(super(Component, self).isFocusOwner())

    @override
    @overload
    def getAccessibleContext(self) -> 'AccessibleContext':
        """public javax.accessibility.AccessibleContext javax.swing.JPanel.getAccessibleContext()"""
        return 'AccessibleContext'._wrap(super(JPanel, self).getAccessibleContext())

    @overload
    def postEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.postEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).postEvent(arg0))

    @overload
    def getLocation(self, arg0: 'Point') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getLocation(java.awt.Point)"""
        return 'Point'._wrap(super(_JComponent, self).getLocation(arg0))

    @overload
    def getBaseline(self, arg0: int, arg1: int) -> int:
        """public int javax.swing.JComponent.getBaseline(int,int)"""
        return int._wrap(super(_JComponent, self).getBaseline(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def findComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeNotify(self):
        """public void javax.swing.JComponent.removeNotify()"""
        super(JComponent, self).removeNotify()

    @override
    @overload
    def getForeground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getForeground()"""
        return 'Color'._wrap(super(Component, self).getForeground())

    @override
    @overload
    def show(self):
        """public void java.awt.Component.show()"""
        super(Component, self).show()

    @override
    @overload
    def isDoubleBuffered(self) -> bool:
        """public boolean javax.swing.JComponent.isDoubleBuffered()"""
        return bool._wrap(super(JComponent, self).isDoubleBuffered())

    @override
    @overload
    def setDescription(self, arg0: str):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setDescription(java.lang.String)"""
        super(_EditorPanel, self).setDescription(arg0)

    @override
    @overload
    def isFocusCycleRoot(self) -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot()"""
        return bool._wrap(super(Container, self).isFocusCycleRoot())

    @override
    @overload
    def onRegionsSelected(self, arg0: 'Array', arg1: str):
        """public void com.badlogic.gdx.tools.flame.RegionInfluencerPanel.onRegionsSelected(com.badlogic.gdx.utils.Array<com.badlogic.gdx.graphics.g2d.TextureRegion>,java.lang.String)"""
        super(_RegionInfluencerPanel, self).onRegionsSelected(arg0, arg1)

    @override
    @overload
    def addMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.addMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).addMouseWheelListener(arg0)

    @override
    @overload
    def hide(self):
        """public void javax.swing.JComponent.hide()"""
        super(JComponent, self).hide()

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def revalidate(self):
        """public void javax.swing.JComponent.revalidate()"""
        super(JComponent, self).revalidate()

    @override
    @overload
    def getActionMap(self) -> 'ActionMap':
        """public final javax.swing.ActionMap javax.swing.JComponent.getActionMap()"""
        return 'ActionMap'._wrap(super(JComponent, self).getActionMap())

    @override
    @overload
    def requestFocusInWindow(self) -> bool:
        """public boolean javax.swing.JComponent.requestFocusInWindow()"""
        return bool._wrap(super(JComponent, self).requestFocusInWindow())

    @overload
    def action(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.action(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).action(arg0, arg1))

    @override
    @overload
    def isManagingFocus(self) -> bool:
        """public boolean javax.swing.JComponent.isManagingFocus()"""
        return bool._wrap(super(JComponent, self).isManagingFocus())

    @override
    @overload
    def isLightweight(self) -> bool:
        """public boolean java.awt.Component.isLightweight()"""
        return bool._wrap(super(Component, self).isLightweight())

    @override
    @overload
    def setAlignmentX(self, arg0: float):
        """public void javax.swing.JComponent.setAlignmentX(float)"""
        super(_JComponent, self).setAlignmentX(_float.valueOf(arg0))

    @overload
    def getFocusTraversalKeys(self, arg0: int) -> 'Set':
        """public java.util.Set<java.awt.AWTKeyStroke> java.awt.Container.getFocusTraversalKeys(int)"""
        return 'Set'._wrap(super(_Container, self).getFocusTraversalKeys(_int.valueOf(arg0)))

    @override
    @overload
    def setFocusTraversalKeysEnabled(self, arg0: bool):
        """public void java.awt.Component.setFocusTraversalKeysEnabled(boolean)"""
        super(_Component, self).setFocusTraversalKeysEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def remove(self, arg0: 'Component'):
        """public void java.awt.Container.remove(java.awt.Component)"""
        super(_Container, self).remove(arg0)

    @overload
    def getInsets(self, arg0: 'Insets') -> 'Insets':
        """public java.awt.Insets javax.swing.JComponent.getInsets(java.awt.Insets)"""
        return 'Insets'._wrap(super(_JComponent, self).getInsets(arg0))

    @override
    @overload
    def insets(self) -> 'Insets':
        """public java.awt.Insets java.awt.Container.insets()"""
        return 'Insets'._wrap(super(Container, self).insets())

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int):
        """public void javax.swing.JComponent.repaint(long,int,int,int,int)"""
        super(_JComponent, self).repaint(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4))

    @override
    @overload
    def setFocusTraversalPolicy(self, arg0: 'FocusTraversalPolicy'):
        """public void java.awt.Container.setFocusTraversalPolicy(java.awt.FocusTraversalPolicy)"""
        super(_Container, self).setFocusTraversalPolicy(arg0)

    @overload
    def getSize(self, arg0: 'Dimension') -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getSize(java.awt.Dimension)"""
        return 'Dimension'._wrap(super(_JComponent, self).getSize(arg0))

    @override
    @overload
    def enable(self, arg0: bool):
        """public void java.awt.Component.enable(boolean)"""
        super(_Component, self).enable(_boolean.valueOf(arg0))

    @overload
    def getToolTipLocation(self, arg0: 'MouseEvent') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getToolTipLocation(java.awt.event.MouseEvent)"""
        return 'Point'._wrap(super(_JComponent, self).getToolTipLocation(arg0))

    @override
    @overload
    def addPropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Container.addPropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Container, self).addPropertyChangeListener(arg0)

    @overload
    def __init__(self, arg0: 'FlameMain', arg1: str, arg2: str, arg3: 'RegionInfluencer'):
        """public com.badlogic.gdx.tools.flame.RegionInfluencerPanel(com.badlogic.gdx.tools.flame.FlameMain,java.lang.String,java.lang.String,com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer)"""
        val = _RegionInfluencerPanel(arg0, arg1, arg2, arg3)
        self.__wrapper = val

    @overload
    def getComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(arg0))

    @override
    @overload
    def size(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.size()"""
        return 'Dimension'._wrap(super(Component, self).size())

    @override
    @overload
    def getVerifyInputWhenFocusTarget(self) -> bool:
        """public boolean javax.swing.JComponent.getVerifyInputWhenFocusTarget()"""
        return bool._wrap(super(JComponent, self).getVerifyInputWhenFocusTarget())

    @overload
    def mouseMove(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseMove(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseMove(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getActionForKeyStroke(self, arg0: 'KeyStroke') -> 'ActionListener':
        """public java.awt.event.ActionListener javax.swing.JComponent.getActionForKeyStroke(javax.swing.KeyStroke)"""
        return 'ActionListener'._wrap(super(_JComponent, self).getActionForKeyStroke(arg0))

    @overload
    def lostFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.lostFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).lostFocus(arg0, arg1))

    @override
    @overload
    def isMinimumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMinimumSizeSet()"""
        return bool._wrap(super(Component, self).isMinimumSizeSet())

    @override
    @overload
    def isForegroundSet(self) -> bool:
        """public boolean java.awt.Component.isForegroundSet()"""
        return bool._wrap(super(Component, self).isForegroundSet())

    @overload
    def getMousePosition(self, arg0: bool) -> 'Point':
        """public java.awt.Point java.awt.Container.getMousePosition(boolean) throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(_Container, self).getMousePosition(_boolean.valueOf(arg0)))

    @overload
    def getFontMetrics(self, arg0: 'Font') -> 'FontMetrics':
        """public java.awt.FontMetrics javax.swing.JComponent.getFontMetrics(java.awt.Font)"""
        return 'FontMetrics'._wrap(super(_JComponent, self).getFontMetrics(arg0))

    @overload
    def getListeners(self, arg0: 'Class') -> List['EventListener']:
        """public <T extends java.util.EventListener> T[] javax.swing.JComponent.getListeners(java.lang.Class<T>)"""
        return List['EventListener']._wrap(super(_JComponent, self).getListeners(arg0))

    @override
    @overload
    def getHierarchyBoundsListeners(self) -> List['HierarchyBoundsListener']:
        """public synchronized java.awt.event.HierarchyBoundsListener[] java.awt.Component.getHierarchyBoundsListeners()"""
        return List['HierarchyBoundsListener']._wrap(super(Component, self).getHierarchyBoundsListeners())

    @override
    @overload
    def minimumSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.minimumSize()"""
        return 'Dimension'._wrap(super(Container, self).minimumSize())

    @overload
    def handleEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.handleEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).handleEvent(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @override
    @overload
    def getComponentListeners(self) -> List['ComponentListener']:
        """public synchronized java.awt.event.ComponentListener[] java.awt.Component.getComponentListeners()"""
        return List['ComponentListener']._wrap(super(Component, self).getComponentListeners())

    @override
    @overload
    def computeVisibleRect(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.computeVisibleRect(java.awt.Rectangle)"""
        super(_JComponent, self).computeVisibleRect(arg0)

    @override
    @overload
    def deliverEvent(self, arg0: 'Event'):
        """public void java.awt.Container.deliverEvent(java.awt.Event)"""
        super(_Container, self).deliverEvent(arg0)

    @override
    @overload
    def addHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.addHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).addHierarchyBoundsListener(arg0)

    @override
    @overload
    def getAlignmentX(self) -> float:
        """public float javax.swing.JComponent.getAlignmentX()"""
        return float._wrap(super(JComponent, self).getAlignmentX())

    @overload
    def add(self, arg0: 'Component', arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component,int)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def repaint(self):
        """public void java.awt.Component.repaint()"""
        super(Component, self).repaint()

    @overload
    def gotFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.gotFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).gotFocus(arg0, arg1))

    @override
    @overload
    def createToolTip(self) -> 'JToolTip':
        """public javax.swing.JToolTip javax.swing.JComponent.createToolTip()"""
        return 'JToolTip'._wrap(super(JComponent, self).createToolTip())

    @override
    @overload
    def setEmbedded(self):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.setEmbedded()"""
        super(EditorPanel, self).setEmbedded()

    @overload
    def getToolTipText(self, arg0: 'MouseEvent') -> str:
        """public java.lang.String javax.swing.JComponent.getToolTipText(java.awt.event.MouseEvent)"""
        return str._wrap(super(_JComponent, self).getToolTipText(arg0))

    @override
    @overload
    def printComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.printComponents(java.awt.Graphics)"""
        super(_Container, self).printComponents(arg0)

    @override
    @overload
    def getColorModel(self) -> 'ColorModel':
        """public java.awt.image.ColorModel java.awt.Component.getColorModel()"""
        return 'ColorModel'._wrap(super(Component, self).getColorModel())

    @override
    @overload
    def setFocusTraversalPolicyProvider(self, arg0: bool):
        """public final void java.awt.Container.setFocusTraversalPolicyProvider(boolean)"""
        super(_Container, self).setFocusTraversalPolicyProvider(_boolean.valueOf(arg0))

    @overload
    def getComponentZOrder(self, arg0: 'Component') -> int:
        """public int java.awt.Container.getComponentZOrder(java.awt.Component)"""
        return int._wrap(super(_Container, self).getComponentZOrder(arg0))

    @override
    @overload
    def getDebugGraphicsOptions(self) -> int:
        """public int javax.swing.JComponent.getDebugGraphicsOptions()"""
        return int._wrap(super(JComponent, self).getDebugGraphicsOptions())

    @overload
    def areFocusTraversalKeysSet(self, arg0: int) -> bool:
        """public boolean java.awt.Container.areFocusTraversalKeysSet(int)"""
        return bool._wrap(super(_Container, self).areFocusTraversalKeysSet(_int.valueOf(arg0)))

    @override
    @overload
    def getSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.getSize()"""
        return 'Dimension'._wrap(super(Component, self).getSize())

    @override
    @overload
    def repaint(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.repaint(java.awt.Rectangle)"""
        super(_JComponent, self).repaint(arg0)

    @overload
    def getClientProperty(self, arg0: object) -> object:
        """public final java.lang.Object javax.swing.JComponent.getClientProperty(java.lang.Object)"""
        return object._wrap(super(_JComponent, self).getClientProperty(arg0))

    @override
    @overload
    def unregisterKeyboardAction(self, arg0: 'KeyStroke'):
        """public void javax.swing.JComponent.unregisterKeyboardAction(javax.swing.KeyStroke)"""
        super(_JComponent, self).unregisterKeyboardAction(arg0)

    @overload
    def requestFocus(self, arg0: bool) -> bool:
        """public boolean javax.swing.JComponent.requestFocus(boolean)"""
        return bool._wrap(super(_JComponent, self).requestFocus(_boolean.valueOf(arg0)))

    @override
    @overload
    def setActionMap(self, arg0: 'ActionMap'):
        """public final void javax.swing.JComponent.setActionMap(javax.swing.ActionMap)"""
        super(_JComponent, self).setActionMap(arg0)

    @override
    @overload
    def getX(self) -> int:
        """public int javax.swing.JComponent.getX()"""
        return int._wrap(super(JComponent, self).getX())

    @overload
    def mouseEnter(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseEnter(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseEnter(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def updateUI(self):
        """public void javax.swing.JPanel.updateUI()"""
        super(JPanel, self).updateUI()

    @override
    @overload
    def getToolkit(self) -> 'Toolkit':
        """public java.awt.Toolkit java.awt.Component.getToolkit()"""
        return 'Toolkit'._wrap(super(Component, self).getToolkit())

    @override
    @overload
    def isCursorSet(self) -> bool:
        """public boolean java.awt.Component.isCursorSet()"""
        return bool._wrap(super(Component, self).isCursorSet())

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object, arg2: int):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object,int)"""
        super(_Container, self).add(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def setPreferredSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setPreferredSize(java.awt.Dimension)"""
        super(_JComponent, self).setPreferredSize(arg0)

    @override
    @overload
    def setBounds(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.setBounds(int,int,int,int)"""
        super(_Component, self).setBounds(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def isFocusTraversalPolicySet(self) -> bool:
        """public boolean java.awt.Container.isFocusTraversalPolicySet()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicySet())

    @override
    @overload
    def requestFocus(self):
        """public void javax.swing.JComponent.requestFocus()"""
        super(JComponent, self).requestFocus()

    @override
    @overload
    def getAncestorListeners(self) -> List['AncestorListener']:
        """public javax.swing.event.AncestorListener[] javax.swing.JComponent.getAncestorListeners()"""
        return List['AncestorListener']._wrap(super(JComponent, self).getAncestorListeners())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool._wrap(super(_object, self).equals(arg0))

    @overload
    def getInputMap(self, arg0: int) -> 'InputMap':
        """public final javax.swing.InputMap javax.swing.JComponent.getInputMap(int)"""
        return 'InputMap'._wrap(super(_JComponent, self).getInputMap(_int.valueOf(arg0)))

    @override
    @overload
    def isEnabled(self) -> bool:
        """public boolean java.awt.Component.isEnabled()"""
        return bool._wrap(super(Component, self).isEnabled())

    @override
    @overload
    def move(self, arg0: int, arg1: int):
        """public void java.awt.Component.move(int,int)"""
        super(_Component, self).move(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def addMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.addMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).addMouseMotionListener(arg0)

    @override
    @overload
    def getIgnoreRepaint(self) -> bool:
        """public boolean java.awt.Component.getIgnoreRepaint()"""
        return bool._wrap(super(Component, self).getIgnoreRepaint())

    @overload
    def isFocusCycleRoot(self, arg0: 'Container') -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot(java.awt.Container)"""
        return bool._wrap(super(_Container, self).isFocusCycleRoot(arg0))

    @override
    @overload
    def getGraphics(self) -> 'Graphics':
        """public java.awt.Graphics javax.swing.JComponent.getGraphics()"""
        return 'Graphics'._wrap(super(JComponent, self).getGraphics())

    @override
    @overload
    def setLocale(self, arg0: 'Locale'):
        """public void java.awt.Component.setLocale(java.util.Locale)"""
        super(_Component, self).setLocale(arg0)

    @override
    @overload
    def paintAll(self, arg0: 'Graphics'):
        """public void java.awt.Component.paintAll(java.awt.Graphics)"""
        super(_Component, self).paintAll(arg0)

    @override
    @overload
    def setDoubleBuffered(self, arg0: bool):
        """public void javax.swing.JComponent.setDoubleBuffered(boolean)"""
        super(_JComponent, self).setDoubleBuffered(_boolean.valueOf(arg0))

    @override
    @overload
    def isPreferredSizeSet(self) -> bool:
        """public boolean java.awt.Component.isPreferredSizeSet()"""
        return bool._wrap(super(Component, self).isPreferredSizeSet())

    @override
    @overload
    def addInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.addInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).addInputMethodListener(arg0)

    @override
    @overload
    def removeMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.removeMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).removeMouseWheelListener(arg0)

    @override
    @overload
    def getInputMap(self) -> 'InputMap':
        """public final javax.swing.InputMap javax.swing.JComponent.getInputMap()"""
        return 'InputMap'._wrap(super(JComponent, self).getInputMap())

    @override
    @overload
    def setVisible(self, arg0: bool):
        """public void javax.swing.JComponent.setVisible(boolean)"""
        super(_JComponent, self).setVisible(_boolean.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,byte,byte)"""
        super(_Component, self).firePropertyChange(arg0, _byte.valueOf(arg1), _byte.valueOf(arg2))

    @override
    @overload
    def getUIClassID(self) -> str:
        """public java.lang.String javax.swing.JPanel.getUIClassID()"""
        return str._wrap(super(JPanel, self).getUIClassID())

    @override
    @overload
    def transferFocusDownCycle(self):
        """public void java.awt.Container.transferFocusDownCycle()"""
        super(Container, self).transferFocusDownCycle()

    @override
    @overload
    def getNextFocusableComponent(self) -> 'Component':
        """public java.awt.Component javax.swing.JComponent.getNextFocusableComponent()"""
        return 'Component'._wrap(super(JComponent, self).getNextFocusableComponent())

    @override
    @overload
    def getUI(self) -> 'PanelUI':
        """public javax.swing.plaf.PanelUI javax.swing.JPanel.getUI()"""
        return 'PanelUI'._wrap(super(JPanel, self).getUI())

    @override
    @overload
    def setBounds(self, arg0: 'Rectangle'):
        """public void java.awt.Component.setBounds(java.awt.Rectangle)"""
        super(_Component, self).setBounds(arg0)

    @override
    @overload
    def repaint(self, arg0: int):
        """public void java.awt.Component.repaint(long)"""
        super(_Component, self).repaint(_long.valueOf(arg0))

    @override
    @overload
    def removeHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.removeHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).removeHierarchyBoundsListener(arg0)

    @override
    @overload
    def getComponentPopupMenu(self) -> 'JPopupMenu':
        """public javax.swing.JPopupMenu javax.swing.JComponent.getComponentPopupMenu()"""
        return 'JPopupMenu'._wrap(super(JComponent, self).getComponentPopupMenu())

    @override
    @overload
    def getMousePosition(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getMousePosition() throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(Component, self).getMousePosition())

    @override
    @overload
    def getComponentCount(self) -> int:
        """public int java.awt.Container.getComponentCount()"""
        return int._wrap(super(Container, self).getComponentCount())

    @override
    @overload
    def getInputMethodRequests(self) -> 'InputMethodRequests':
        """public java.awt.im.InputMethodRequests java.awt.Component.getInputMethodRequests()"""
        return 'InputMethodRequests'._wrap(super(Component, self).getInputMethodRequests())

    @override
    @overload
    def setMaximumSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setMaximumSize(java.awt.Dimension)"""
        super(_JComponent, self).setMaximumSize(arg0)

    @override
    @overload
    def setRequestFocusEnabled(self, arg0: bool):
        """public void javax.swing.JComponent.setRequestFocusEnabled(boolean)"""
        super(_JComponent, self).setRequestFocusEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def setFocusTraversalKeys(self, arg0: int, arg1: 'Set'):
        """public void javax.swing.JComponent.setFocusTraversalKeys(int,java.util.Set<? extends java.awt.AWTKeyStroke>)"""
        super(_JComponent, self).setFocusTraversalKeys(_int.valueOf(arg0), arg1)

    @overload
    def inside(self, arg0: int, arg1: int) -> bool:
        """public boolean java.awt.Component.inside(int,int)"""
        return bool._wrap(super(_Component, self).inside(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def requestDefaultFocus(self) -> bool:
        """public boolean javax.swing.JComponent.requestDefaultFocus()"""
        return bool._wrap(super(JComponent, self).requestDefaultFocus())

    @override
    @overload
    def disable(self):
        """public void javax.swing.JComponent.disable()"""
        super(JComponent, self).disable()

    @override
    @overload
    def showContent(self, arg0: bool):
        """public void com.badlogic.gdx.tools.flame.EditorPanel.showContent(boolean)"""
        super(_EditorPanel, self).showContent(_boolean.valueOf(arg0))

    @override
    @overload
    def enableInputMethods(self, arg0: bool):
        """public void java.awt.Component.enableInputMethods(boolean)"""
        super(_Component, self).enableInputMethods(_boolean.valueOf(arg0))

    @override
    @overload
    def layout(self):
        """public void java.awt.Container.layout()"""
        super(Container, self).layout()

    @override
    @overload
    def getInputMethodListeners(self) -> List['InputMethodListener']:
        """public synchronized java.awt.event.InputMethodListener[] java.awt.Component.getInputMethodListeners()"""
        return List['InputMethodListener']._wrap(super(Component, self).getInputMethodListeners())

    @override
    @overload
    def paint(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.paint(java.awt.Graphics)"""
        super(_JComponent, self).paint(arg0)

    @override
    @overload
    def transferFocus(self):
        """public void java.awt.Component.transferFocus()"""
        super(Component, self).transferFocus()

    @override
    @overload
    def removeComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.removeComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).removeComponentListener(arg0)

    @override
    @overload
    def getCursor(self) -> 'Cursor':
        """public java.awt.Cursor java.awt.Component.getCursor()"""
        return 'Cursor'._wrap(super(Component, self).getCursor())

    @override
    @overload
    def setMinimumSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setMinimumSize(java.awt.Dimension)"""
        super(_JComponent, self).setMinimumSize(arg0)

    @override
    @overload
    def getAdvancedPanel(self) -> 'JPanel':
        """public javax.swing.JPanel com.badlogic.gdx.tools.flame.EditorPanel.getAdvancedPanel()"""
        return 'JPanel'._wrap(super(EditorPanel, self).getAdvancedPanel())

    @override
    @overload
    def getContainerListeners(self) -> List['ContainerListener']:
        """public synchronized java.awt.event.ContainerListener[] java.awt.Container.getContainerListeners()"""
        return List['ContainerListener']._wrap(super(Container, self).getContainerListeners())

    @override
    @overload
    def setLocation(self, arg0: 'Point'):
        """public void java.awt.Component.setLocation(java.awt.Point)"""
        super(_Component, self).setLocation(arg0)

    @override
    @overload
    def setSize(self, arg0: 'Dimension'):
        """public void java.awt.Component.setSize(java.awt.Dimension)"""
        super(_Component, self).setSize(arg0)

    @override
    @overload
    def removeAll(self):
        """public void java.awt.Container.removeAll()"""
        super(Container, self).removeAll()

    @overload
    def getPopupLocation(self, arg0: 'MouseEvent') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getPopupLocation(java.awt.event.MouseEvent)"""
        return 'Point'._wrap(super(_JComponent, self).getPopupLocation(arg0))

    @overload
    def isAncestorOf(self, arg0: 'Component') -> bool:
        """public boolean java.awt.Container.isAncestorOf(java.awt.Component)"""
        return bool._wrap(super(_Container, self).isAncestorOf(arg0))

    @override
    @overload
    def setOpaque(self, arg0: bool):
        """public void javax.swing.JComponent.setOpaque(boolean)"""
        super(_JComponent, self).setOpaque(_boolean.valueOf(arg0))

    @overload
    def contains(self, arg0: int, arg1: int) -> bool:
        """public boolean javax.swing.JComponent.contains(int,int)"""
        return bool._wrap(super(_JComponent, self).contains(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def setCursor(self, arg0: 'Cursor'):
        """public void java.awt.Component.setCursor(java.awt.Cursor)"""
        super(_Component, self).setCursor(arg0)

    @override
    @overload
    def validate(self):
        """public void java.awt.Container.validate()"""
        super(Container, self).validate()

    @override
    @overload
    def getMaximumSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getMaximumSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getMaximumSize())

    @override
    @overload
    def getBackground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getBackground()"""
        return 'Color'._wrap(super(Component, self).getBackground())

    @overload
    def createImage(self, arg0: 'ImageProducer') -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(java.awt.image.ImageProducer)"""
        return 'Image'._wrap(super(_Component, self).createImage(arg0))

    @override
    @overload
    def setVerifyInputWhenFocusTarget(self, arg0: bool):
        """public void javax.swing.JComponent.setVerifyInputWhenFocusTarget(boolean)"""
        super(_JComponent, self).setVerifyInputWhenFocusTarget(_boolean.valueOf(arg0))

    @override
    @overload
    def removePropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0, arg1)

    @override
    @overload
    def countComponents(self) -> int:
        """public int java.awt.Container.countComponents()"""
        return int._wrap(super(Container, self).countComponents()) 
 
 
# CLASS: com.badlogic.gdx.tools.flame.TexturePanel
from pyquantum_helper import import_once as _import_once
import javax.accessibility.AccessibleContext as AccessibleContext
import javax.swing.JToolTip as JToolTip
import java.awt.event.HierarchyBoundsListener as HierarchyBoundsListener
import java.awt.event.ActionListener as _ActionListener
_ActionListener = _ActionListener
import java.awt.ComponentOrientation as _ComponentOrientation
_ComponentOrientation = _ComponentOrientation
import java.awt.image.ImageProducer as ImageProducer
import java.awt.GraphicsConfiguration as GraphicsConfiguration
import java.awt.Graphics as _Graphics
_Graphics = _Graphics
import javax.swing.JToolTip as _JToolTip
_JToolTip = _JToolTip
import java.awt.Container as _Container
_Container = _Container
import java.awt.MenuComponent as MenuComponent
import java.awt.im.InputMethodRequests as _InputMethodRequests
_InputMethodRequests = _InputMethodRequests
import java.awt.FocusTraversalPolicy as _FocusTraversalPolicy
_FocusTraversalPolicy = _FocusTraversalPolicy
import java.lang.Byte as _byte
import java.awt.Dimension as Dimension
import java.awt.Font as _Font
_Font = _Font
import javax.swing.plaf.PanelUI as _PanelUI
_PanelUI = _PanelUI
import java.awt.event.ContainerListener as ContainerListener
import javax.swing.event.AncestorListener as AncestorListener
import com.badlogic.gdx.tools.flame.ImagePanel as _ImagePanel
_ImagePanel = _ImagePanel
import java.awt.AWTEvent as AWTEvent
import java.awt.image.ColorModel as _ColorModel
_ColorModel = _ColorModel
import java.lang.Object as _object
import java.awt.ComponentOrientation as ComponentOrientation
import java.awt.im.InputContext as _InputContext
_InputContext = _InputContext
from builtins import float
import java.awt.event.HierarchyListener as HierarchyListener
import java.awt.event.InputMethodListener as InputMethodListener
from typing import List
import java.awt.event.MouseWheelListener as _MouseWheelListener
_MouseWheelListener = _MouseWheelListener
import java.awt.event.KeyListener as KeyListener
import java.awt.Component as Component
try:
    from pygdx import graphics
except ImportError:
    graphics = _import_once("pygdx.graphics")

from builtins import int
import java.awt.LayoutManager as LayoutManager
import java.awt.FontMetrics as _FontMetrics
_FontMetrics = _FontMetrics
import java.awt.Container as Container
try:
    from pygdx.graphics import g2d
except ImportError:
    g2d = _import_once("pygdx.graphics.g2d")

from builtins import type
import java.awt.image.VolatileImage as _VolatileImage
_VolatileImage = _VolatileImage
import java.awt.Shape as Shape
import java.awt.Rectangle as Rectangle
import java.awt.event.ContainerListener as _ContainerListener
_ContainerListener = _ContainerListener
import java.awt.event.HierarchyListener as _HierarchyListener
_HierarchyListener = _HierarchyListener
import java.lang.String as _string
import javax.swing.InputVerifier as _InputVerifier
_InputVerifier = _InputVerifier
import com.badlogic.gdx.tools.flame.TexturePanel as _TexturePanel
_TexturePanel = _TexturePanel
import java.awt.Insets as _Insets
_Insets = _Insets
import javax.swing.border.Border as _Border
_Border = _Border
import java.awt.event.ComponentListener as _ComponentListener
_ComponentListener = _ComponentListener
import javax.swing.ActionMap as ActionMap
import java.beans.VetoableChangeListener as VetoableChangeListener
import java.awt.event.ComponentListener as ComponentListener
import javax.swing.KeyStroke as KeyStroke
import java.beans.VetoableChangeListener as _VetoableChangeListener
_VetoableChangeListener = _VetoableChangeListener
from builtins import object
import java.awt.event.KeyListener as _KeyListener
_KeyListener = _KeyListener
import java.awt.Component.BaselineResizeBehavior as BaselineResizeBehavior
import java.awt.Component as _Component_BaselineResizeBehavior
_BaselineResizeBehavior = _Component_BaselineResizeBehavior.BaselineResizeBehavior
import java.awt.Cursor as _Cursor
_Cursor = _Cursor
import java.awt.im.InputMethodRequests as InputMethodRequests
import java.lang.Long as _long
import javax.swing.JPanel as _JPanel
_JPanel = _JPanel
import java.awt.event.FocusListener as _FocusListener
_FocusListener = _FocusListener
import java.lang.Character as _char
import javax.swing.TransferHandler as TransferHandler
import java.awt.event.FocusEvent.Cause as Cause
import javax.accessibility.AccessibleContext as _AccessibleContext
_AccessibleContext = _AccessibleContext
import java.awt.event.MouseWheelListener as MouseWheelListener
import java.util.Set as _Set
_Set = _Set
import java.awt.image.ColorModel as ColorModel
import java.lang.Boolean as _boolean
import java.awt.event.MouseMotionListener as MouseMotionListener
import java.util.EventListener as EventListener
import java.awt.Insets as Insets
import javax.swing.KeyStroke as _KeyStroke
_KeyStroke = _KeyStroke
import java.awt.GraphicsConfiguration as _GraphicsConfiguration
_GraphicsConfiguration = _GraphicsConfiguration
import java.awt.dnd.DropTarget as _DropTarget
_DropTarget = _DropTarget
from builtins import bool
import java.beans.PropertyChangeListener as _PropertyChangeListener
_PropertyChangeListener = _PropertyChangeListener
try:
    from pygdx import utils
except ImportError:
    utils = _import_once("pygdx.utils")

import java.awt.LayoutManager as _LayoutManager
_LayoutManager = _LayoutManager
import java.awt.PopupMenu as PopupMenu
import java.util.EventListener as _EventListener
_EventListener = _EventListener
import com.badlogic.gdx.graphics.Texture as _Texture
_Texture = _Texture
import java.awt.im.InputContext as InputContext
import java.awt.Component as _Component
_Component = _Component
import java.awt.Font as Font
import java.awt.image.VolatileImage as VolatileImage
import java.awt.dnd.DropTarget as DropTarget
import java.lang.String as _String
_String = _String
import java.lang.Float as _float
import java.awt.Cursor as Cursor
import java.awt.event.MouseListener as _MouseListener
_MouseListener = _MouseListener
import java.awt.Toolkit as _Toolkit
_Toolkit = _Toolkit
import java.io.PrintStream as PrintStream
import javax.swing.JRootPane as _JRootPane
_JRootPane = _JRootPane
import java.awt.Dimension as _Dimension
_Dimension = _Dimension
import java.awt.event.ActionListener as ActionListener
import java.awt.event.MouseEvent as MouseEvent
import java.awt.Color as _Color
_Color = _Color
import javax.swing.JPopupMenu as _JPopupMenu
_JPopupMenu = _JPopupMenu
import javax.swing.InputMap as _InputMap
_InputMap = _InputMap
import java.awt.event.MouseListener as MouseListener
import java.lang.Class as _Class
_Class = _Class
import java.util.Locale as Locale
import java.lang.Double as _double
import javax.swing.plaf.PanelUI as PanelUI
import java.awt.Point as _Point
_Point = _Point
import java.lang.Object as _Object
_Object = _Object
import java.beans.PropertyChangeListener as PropertyChangeListener
import javax.swing.border.Border as Border
import javax.swing.JComponent as _JComponent
_JComponent = _JComponent
import javax.swing.InputVerifier as InputVerifier
import java.io.PrintWriter as PrintWriter
import java.awt.Point as Point
import javax.swing.event.AncestorListener as _AncestorListener
_AncestorListener = _AncestorListener
import java.lang.Short as _short
import java.awt.Toolkit as Toolkit
import java.awt.event.HierarchyBoundsListener as _HierarchyBoundsListener
_HierarchyBoundsListener = _HierarchyBoundsListener
import javax.swing.TransferHandler as _TransferHandler
_TransferHandler = _TransferHandler
import javax.swing.InputMap as InputMap
import java.awt.Rectangle as _Rectangle
_Rectangle = _Rectangle
import javax.swing.JRootPane as JRootPane
import java.awt.Event as Event
import java.awt.event.FocusListener as FocusListener
import java.awt.image.ImageObserver as ImageObserver
from builtins import str
from pyquantum_helper import override
import javax.swing.ActionMap as _ActionMap
_ActionMap = _ActionMap
import java.awt.FocusTraversalPolicy as FocusTraversalPolicy
import java.awt.event.MouseMotionListener as _MouseMotionListener
_MouseMotionListener = _MouseMotionListener
import java.awt.event.InputMethodListener as _InputMethodListener
_InputMethodListener = _InputMethodListener
import javax.swing.JPopupMenu as JPopupMenu
import java.util.Set as Set
import java.lang.Integer as _int
import java.awt.Image as _Image
_Image = _Image
import java.awt.FontMetrics as FontMetrics
import java.awt.Color as Color
import java.awt.image.BufferedImage as BufferedImage
import java.awt.Image as Image
import java.awt.Graphics as Graphics
import java.awt.ImageCapabilities as ImageCapabilities
import java.util.Locale as _Locale
_Locale = _Locale
 
class TexturePanel():
    """com.badlogic.gdx.tools.flame.TexturePanel"""
 
    @staticmethod
    def _wrap(java_value: _TexturePanel) -> 'TexturePanel':
        return TexturePanel(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _TexturePanel):
        """
        Dynamic initializer for TexturePanel.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_TexturePanel__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_TexturePanel__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def removeVetoableChangeListener(self, arg0: 'VetoableChangeListener'):
        """public synchronized void javax.swing.JComponent.removeVetoableChangeListener(java.beans.VetoableChangeListener)"""
        super(_JComponent, self).removeVetoableChangeListener(arg0)

    @override
    @overload
    def getComponents(self) -> List['Component']:
        """public java.awt.Component[] java.awt.Container.getComponents()"""
        return List['Component']._wrap(super(Container, self).getComponents())

    @override
    @overload
    def setDebugGraphicsOptions(self, arg0: int):
        """public void javax.swing.JComponent.setDebugGraphicsOptions(int)"""
        super(_JComponent, self).setDebugGraphicsOptions(_int.valueOf(arg0))

    @override
    @overload
    def isValid(self) -> bool:
        """public boolean java.awt.Component.isValid()"""
        return bool._wrap(super(Component, self).isValid())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def getDefaultLocale() -> 'Locale':
        """public static java.util.Locale javax.swing.JComponent.getDefaultLocale()"""
        return Locale._wrap(_JComponent.getDefaultLocale())

    @override
    @overload
    def getInputVerifier(self) -> 'InputVerifier':
        """public javax.swing.InputVerifier javax.swing.JComponent.getInputVerifier()"""
        return 'InputVerifier'._wrap(super(JComponent, self).getInputVerifier())

    @override
    @overload
    def list(self, arg0: 'PrintStream', arg1: int):
        """public void java.awt.Container.list(java.io.PrintStream,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @override
    @overload
    def setUI(self, arg0: 'PanelUI'):
        """public void javax.swing.JPanel.setUI(javax.swing.plaf.PanelUI)"""
        super(_JPanel, self).setUI(arg0)

    @override
    @overload
    def getFocusTraversalPolicy(self) -> 'FocusTraversalPolicy':
        """public java.awt.FocusTraversalPolicy java.awt.Container.getFocusTraversalPolicy()"""
        return 'FocusTraversalPolicy'._wrap(super(Container, self).getFocusTraversalPolicy())

    @override
    @overload
    def getParent(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getParent()"""
        return 'Container'._wrap(super(Component, self).getParent())

    @override
    @overload
    def paintImmediately(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.paintImmediately(java.awt.Rectangle)"""
        super(_JComponent, self).paintImmediately(arg0)

    @staticmethod
    @overload
    def setDefaultLocale(arg0: 'Locale'):
        """public static void javax.swing.JComponent.setDefaultLocale(java.util.Locale)"""
        _JComponent.setDefaultLocale(arg0)

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,float,float)"""
        super(_Component, self).firePropertyChange(arg0, _float.valueOf(arg1), _float.valueOf(arg2))

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object)"""
        super(_Container, self).add(arg0, arg1)

    @override
    @overload
    def getLocale(self) -> 'Locale':
        """public java.util.Locale java.awt.Component.getLocale()"""
        return 'Locale'._wrap(super(Component, self).getLocale())

    @override
    @overload
    def setInheritsPopupMenu(self, arg0: bool):
        """public void javax.swing.JComponent.setInheritsPopupMenu(boolean)"""
        super(_JComponent, self).setInheritsPopupMenu(_boolean.valueOf(arg0))

    @override
    @overload
    def getHierarchyListeners(self) -> List['HierarchyListener']:
        """public synchronized java.awt.event.HierarchyListener[] java.awt.Component.getHierarchyListeners()"""
        return List['HierarchyListener']._wrap(super(Component, self).getHierarchyListeners())

    @override
    @overload
    def nextFocus(self):
        """public void java.awt.Component.nextFocus()"""
        super(Component, self).nextFocus()

    @override
    @overload
    def isPaintingTile(self) -> bool:
        """public boolean javax.swing.JComponent.isPaintingTile()"""
        return bool._wrap(super(JComponent, self).isPaintingTile())

    @override
    @overload
    def isDisplayable(self) -> bool:
        """public boolean java.awt.Component.isDisplayable()"""
        return bool._wrap(super(Component, self).isDisplayable())

    @override
    @overload
    def getBounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.getBounds()"""
        return 'Rectangle'._wrap(super(Component, self).getBounds())

    @override
    @overload
    def removeMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.removeMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).removeMouseMotionListener(arg0)

    @override
    @overload
    def isShowing(self) -> bool:
        """public boolean java.awt.Component.isShowing()"""
        return bool._wrap(super(Component, self).isShowing())

    @override
    @overload
    def getDropTarget(self) -> 'DropTarget':
        """public synchronized java.awt.dnd.DropTarget java.awt.Component.getDropTarget()"""
        return 'DropTarget'._wrap(super(Component, self).getDropTarget())

    @override
    @overload
    def isFontSet(self) -> bool:
        """public boolean java.awt.Component.isFontSet()"""
        return bool._wrap(super(Component, self).isFontSet())

    @overload
    def mouseUp(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseUp(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseUp(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def setIgnoreRepaint(self, arg0: bool):
        """public void java.awt.Component.setIgnoreRepaint(boolean)"""
        super(_Component, self).setIgnoreRepaint(_boolean.valueOf(arg0))

    @override
    @overload
    def getPropertyChangeListeners(self) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners()"""
        return List['PropertyChangeListener']._wrap(super(Component, self).getPropertyChangeListeners())

    @override
    @overload
    def isBackgroundSet(self) -> bool:
        """public boolean java.awt.Component.isBackgroundSet()"""
        return bool._wrap(super(Component, self).isBackgroundSet())

    @override
    @overload
    def getLocation(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocation()"""
        return 'Point'._wrap(super(Component, self).getLocation())

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int._wrap(super(object, self).hashCode())

    @override
    @overload
    def location(self) -> 'Point':
        """public java.awt.Point java.awt.Component.location()"""
        return 'Point'._wrap(super(Component, self).location())

    @override
    @overload
    def getComponentOrientation(self) -> 'ComponentOrientation':
        """public java.awt.ComponentOrientation java.awt.Component.getComponentOrientation()"""
        return 'ComponentOrientation'._wrap(super(Component, self).getComponentOrientation())

    @override
    @overload
    def addHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.addHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).addHierarchyListener(arg0)

    @override
    @overload
    def getInheritsPopupMenu(self) -> bool:
        """public boolean javax.swing.JComponent.getInheritsPopupMenu()"""
        return bool._wrap(super(JComponent, self).getInheritsPopupMenu())

    @override
    @overload
    def setComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Component.setComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Component, self).setComponentOrientation(arg0)

    @override
    @overload
    def getFocusCycleRootAncestor(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getFocusCycleRootAncestor()"""
        return 'Container'._wrap(super(Component, self).getFocusCycleRootAncestor())

    @override
    @overload
    def show(self, arg0: bool):
        """public void java.awt.Component.show(boolean)"""
        super(_Component, self).show(_boolean.valueOf(arg0))

    @override
    @overload
    def grabFocus(self):
        """public void javax.swing.JComponent.grabFocus()"""
        super(JComponent, self).grabFocus()

    @overload
    def locate(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.locate(int,int)"""
        return 'Component'._wrap(super(_Container, self).locate(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def isPaintingForPrint(self) -> bool:
        """public final boolean javax.swing.JComponent.isPaintingForPrint()"""
        return bool._wrap(super(JComponent, self).isPaintingForPrint())

    @overload
    def keyDown(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyDown(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyDown(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,int,int)"""
        super(_JComponent, self).firePropertyChange(arg0, _int.valueOf(arg1), _int.valueOf(arg2))

    @override
    @overload
    def getLayout(self) -> 'LayoutManager':
        """public java.awt.LayoutManager java.awt.Container.getLayout()"""
        return 'LayoutManager'._wrap(super(Container, self).getLayout())

    @override
    @overload
    def preferredSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.preferredSize()"""
        return 'Dimension'._wrap(super(Container, self).preferredSize())

    @override
    @overload
    def addNotify(self):
        """public void javax.swing.JComponent.addNotify()"""
        super(JComponent, self).addNotify()

    @override
    @overload
    def setImage(self, arg0: 'BufferedImage'):
        """public void com.badlogic.gdx.tools.flame.ImagePanel.setImage(java.awt.image.BufferedImage)"""
        super(_ImagePanel, self).setImage(arg0)

    @override
    @overload
    def setSize(self, arg0: int, arg1: int):
        """public void java.awt.Component.setSize(int,int)"""
        super(_Component, self).setSize(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.repaint(int,int,int,int)"""
        super(_Component, self).repaint(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @overload
    def requestFocusInWindow(self, arg0: 'Cause') -> bool:
        """public boolean java.awt.Component.requestFocusInWindow(java.awt.event.FocusEvent$Cause)"""
        return bool._wrap(super(_Component, self).requestFocusInWindow(arg0))

    @override
    @overload
    def remove(self, arg0: int):
        """public void java.awt.Container.remove(int)"""
        super(_Container, self).remove(_int.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,long,long)"""
        super(_Component, self).firePropertyChange(arg0, _long.valueOf(arg1), _long.valueOf(arg2))

    @overload
    def __init__(self, arg0: 'Texture', arg1: 'Array'):
        """public com.badlogic.gdx.tools.flame.TexturePanel(com.badlogic.gdx.graphics.Texture,com.badlogic.gdx.utils.Array<com.badlogic.gdx.graphics.g2d.TextureRegion>)"""
        val = _TexturePanel(arg0, arg1)
        self.__wrapper = val

    @override
    @overload
    def setFocusCycleRoot(self, arg0: bool):
        """public void java.awt.Container.setFocusCycleRoot(boolean)"""
        super(_Container, self).setFocusCycleRoot(_boolean.valueOf(arg0))

    @overload
    def keyUp(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyUp(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyUp(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def setBackground(self, arg0: 'Color'):
        """public void javax.swing.JComponent.setBackground(java.awt.Color)"""
        super(_JComponent, self).setBackground(arg0)

    @override
    @overload
    def doLayout(self):
        """public void java.awt.Container.doLayout()"""
        super(Container, self).doLayout()

    @override
    @overload
    def enable(self):
        """public void javax.swing.JComponent.enable()"""
        super(JComponent, self).enable()

    @override
    @overload
    def getInsets(self) -> 'Insets':
        """public java.awt.Insets javax.swing.JComponent.getInsets()"""
        return 'Insets'._wrap(super(JComponent, self).getInsets())

    @override
    @overload
    def setNextFocusableComponent(self, arg0: 'Component'):
        """public void javax.swing.JComponent.setNextFocusableComponent(java.awt.Component)"""
        super(_JComponent, self).setNextFocusableComponent(arg0)

    @override
    @overload
    def getAlignmentY(self) -> float:
        """public float javax.swing.JComponent.getAlignmentY()"""
        return float._wrap(super(JComponent, self).getAlignmentY())

    @overload
    def checkImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @override
    @overload
    def getFocusTraversalKeysEnabled(self) -> bool:
        """public boolean java.awt.Component.getFocusTraversalKeysEnabled()"""
        return bool._wrap(super(Component, self).getFocusTraversalKeysEnabled())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getRootPane(self) -> 'JRootPane':
        """public javax.swing.JRootPane javax.swing.JComponent.getRootPane()"""
        return 'JRootPane'._wrap(super(JComponent, self).getRootPane())

    @override
    @overload
    def invalidate(self):
        """public void java.awt.Container.invalidate()"""
        super(Container, self).invalidate()

    @override
    @overload
    def resetKeyboardActions(self):
        """public void javax.swing.JComponent.resetKeyboardActions()"""
        super(JComponent, self).resetKeyboardActions()

    @overload
    def getComponent(self, arg0: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponent(int)"""
        return 'Component'._wrap(super(_Container, self).getComponent(_int.valueOf(arg0)))

    @overload
    def clearSelection(self):
        """public void com.badlogic.gdx.tools.flame.TexturePanel.clearSelection()"""
        super(TexturePanel, self).clearSelection()

    @override
    @overload
    def addPropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Container.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Container, self).addPropertyChangeListener(arg0, arg1)

    @override
    @overload
    def setInputMap(self, arg0: int, arg1: 'InputMap'):
        """public final void javax.swing.JComponent.setInputMap(int,javax.swing.InputMap)"""
        super(_JComponent, self).setInputMap(_int.valueOf(arg0), arg1)

    @override
    @overload
    def removePropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0)

    @override
    @overload
    def applyComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Container.applyComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Container, self).applyComponentOrientation(arg0)

    @override
    @overload
    def setBorder(self, arg0: 'Border'):
        """public void javax.swing.JComponent.setBorder(javax.swing.border.Border)"""
        super(_JComponent, self).setBorder(arg0)

    @override
    @overload
    def remove(self, arg0: 'MenuComponent'):
        """public void java.awt.Component.remove(java.awt.MenuComponent)"""
        super(_Component, self).remove(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintStream'):
        """public void java.awt.Component.list(java.io.PrintStream)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def removeMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.removeMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).removeMouseListener(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintWriter'):
        """public void java.awt.Component.list(java.io.PrintWriter)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def getKeyListeners(self) -> List['KeyListener']:
        """public synchronized java.awt.event.KeyListener[] java.awt.Component.getKeyListeners()"""
        return List['KeyListener']._wrap(super(Component, self).getKeyListeners())

    @override
    @overload
    def getInputContext(self) -> 'InputContext':
        """public java.awt.im.InputContext java.awt.Component.getInputContext()"""
        return 'InputContext'._wrap(super(Component, self).getInputContext())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,double,double)"""
        super(_Component, self).firePropertyChange(arg0, _double.valueOf(arg1), _double.valueOf(arg2))

    @override
    @overload
    def removeAncestorListener(self, arg0: 'AncestorListener'):
        """public void javax.swing.JComponent.removeAncestorListener(javax.swing.event.AncestorListener)"""
        super(_JComponent, self).removeAncestorListener(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintWriter', arg1: int):
        """public void java.awt.Container.list(java.io.PrintWriter,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @overload
    def checkImage(self, arg0: 'Image', arg1: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, arg1))

    @override
    @overload
    def removeFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.removeFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).removeFocusListener(arg0)

    @overload
    def mouseDown(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDown(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDown(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getConditionForKeyStroke(self, arg0: 'KeyStroke') -> int:
        """public int javax.swing.JComponent.getConditionForKeyStroke(javax.swing.KeyStroke)"""
        return int._wrap(super(_JComponent, self).getConditionForKeyStroke(arg0))

    @override
    @overload
    def getTreeLock(self) -> object:
        """public final java.lang.Object java.awt.Component.getTreeLock()"""
        return object._wrap(super(Component, self).getTreeLock())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @override
    @overload
    def addVetoableChangeListener(self, arg0: 'VetoableChangeListener'):
        """public synchronized void javax.swing.JComponent.addVetoableChangeListener(java.beans.VetoableChangeListener)"""
        super(_JComponent, self).addVetoableChangeListener(arg0)

    @overload
    def contains(self, arg0: 'Point') -> bool:
        """public boolean java.awt.Component.contains(java.awt.Point)"""
        return bool._wrap(super(_Component, self).contains(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,short,short)"""
        super(_Component, self).firePropertyChange(arg0, _short.valueOf(arg1), _short.valueOf(arg2))

    @override
    @overload
    def dispatchEvent(self, arg0: 'AWTEvent'):
        """public final void java.awt.Component.dispatchEvent(java.awt.AWTEvent)"""
        super(_Component, self).dispatchEvent(arg0)

    @override
    @overload
    def removeContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.removeContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).removeContainerListener(arg0)

    @override
    @overload
    def getGraphicsConfiguration(self) -> 'GraphicsConfiguration':
        """public java.awt.GraphicsConfiguration java.awt.Component.getGraphicsConfiguration()"""
        return 'GraphicsConfiguration'._wrap(super(Component, self).getGraphicsConfiguration())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: bool, arg2: bool):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,boolean,boolean)"""
        super(_JComponent, self).firePropertyChange(arg0, _boolean.valueOf(arg1), _boolean.valueOf(arg2))

    @overload
    def getTexture(self) -> 'graphics.Texture':
        """public com.badlogic.gdx.graphics.Texture com.badlogic.gdx.tools.flame.TexturePanel.getTexture()"""
        return 'graphics.Texture'._wrap(super(TexturePanel, self).getTexture())

    @override
    @overload
    def registerKeyboardAction(self, arg0: 'ActionListener', arg1: str, arg2: 'KeyStroke', arg3: int):
        """public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,java.lang.String,javax.swing.KeyStroke,int)"""
        super(_JComponent, self).registerKeyboardAction(arg0, arg1, arg2, _int.valueOf(arg3))

    @overload
    def findComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(arg0))

    @override
    @overload
    def resize(self, arg0: int, arg1: int):
        """public void java.awt.Component.resize(int,int)"""
        super(_Component, self).resize(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getHeight(self) -> int:
        """public int javax.swing.JComponent.getHeight()"""
        return int._wrap(super(JComponent, self).getHeight())

    @override
    @overload
    def getTransferHandler(self) -> 'TransferHandler':
        """public javax.swing.TransferHandler javax.swing.JComponent.getTransferHandler()"""
        return 'TransferHandler'._wrap(super(JComponent, self).getTransferHandler())

    @overload
    def imageUpdate(self, arg0: 'Image', arg1: int, arg2: int, arg3: int, arg4: int, arg5: int) -> bool:
        """public boolean java.awt.Component.imageUpdate(java.awt.Image,int,int,int,int,int)"""
        return bool._wrap(super(_Component, self).imageUpdate(arg0, _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4), _int.valueOf(arg5)))

    @override
    @overload
    def getWidth(self) -> int:
        """public int javax.swing.JComponent.getWidth()"""
        return int._wrap(super(JComponent, self).getWidth())

    @override
    @overload
    def transferFocusBackward(self):
        """public void java.awt.Component.transferFocusBackward()"""
        super(Component, self).transferFocusBackward()

    @overload
    def getPropertyChangeListeners(self, arg0: str) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners(java.lang.String)"""
        return List['PropertyChangeListener']._wrap(super(_Component, self).getPropertyChangeListeners(arg0))

    @staticmethod
    @overload
    def isLightweightComponent(arg0: 'Component') -> bool:
        """public static boolean javax.swing.JComponent.isLightweightComponent(java.awt.Component)"""
        return bool._wrap(_JComponent.isLightweightComponent(arg0))

    @override
    @overload
    def getBorder(self) -> 'Border':
        """public javax.swing.border.Border javax.swing.JComponent.getBorder()"""
        return 'Border'._wrap(super(JComponent, self).getBorder())

    @override
    @overload
    def printAll(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.printAll(java.awt.Graphics)"""
        super(_JComponent, self).printAll(arg0)

    @override
    @overload
    def addComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.addComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).addComponentListener(arg0)

    @override
    @overload
    def getBaselineResizeBehavior(self) -> 'BaselineResizeBehavior.Component$BaselineResizeBehavior':
        """public java.awt.Component$BaselineResizeBehavior javax.swing.JComponent.getBaselineResizeBehavior()"""
        return 'BaselineResizeBehavior.Component$BaselineResizeBehavior'._wrap(super(JComponent, self).getBaselineResizeBehavior())

    @override
    @overload
    def print(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.print(java.awt.Graphics)"""
        super(_JComponent, self).print(arg0)

    @override
    @overload
    def setInputVerifier(self, arg0: 'InputVerifier'):
        """public void javax.swing.JComponent.setInputVerifier(javax.swing.InputVerifier)"""
        super(_JComponent, self).setInputVerifier(arg0)

    @override
    @overload
    def addAncestorListener(self, arg0: 'AncestorListener'):
        """public void javax.swing.JComponent.addAncestorListener(javax.swing.event.AncestorListener)"""
        super(_JComponent, self).addAncestorListener(arg0)

    @override
    @overload
    def getFont(self) -> 'Font':
        """public java.awt.Font java.awt.Component.getFont()"""
        return 'Font'._wrap(super(Component, self).getFont())

    @override
    @overload
    def setFont(self, arg0: 'Font'):
        """public void javax.swing.JComponent.setFont(java.awt.Font)"""
        super(_JComponent, self).setFont(arg0)

    @override
    @overload
    def isOptimizedDrawingEnabled(self) -> bool:
        """public boolean javax.swing.JComponent.isOptimizedDrawingEnabled()"""
        return bool._wrap(super(JComponent, self).isOptimizedDrawingEnabled())

    @override
    @overload
    def isValidateRoot(self) -> bool:
        """public boolean javax.swing.JComponent.isValidateRoot()"""
        return bool._wrap(super(JComponent, self).isValidateRoot())

    @overload
    def prepareImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @override
    @overload
    def setForeground(self, arg0: 'Color'):
        """public void javax.swing.JComponent.setForeground(java.awt.Color)"""
        super(_JComponent, self).setForeground(arg0)

    @overload
    def mouseDrag(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDrag(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDrag(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def isOpaque(self) -> bool:
        """public boolean javax.swing.JComponent.isOpaque()"""
        return bool._wrap(super(JComponent, self).isOpaque())

    @overload
    def createVolatileImage(self, arg0: int, arg1: int, arg2: 'ImageCapabilities') -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int,java.awt.ImageCapabilities) throws java.awt.AWTException"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1), arg2))

    @override
    @overload
    def bounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.bounds()"""
        return 'Rectangle'._wrap(super(Component, self).bounds())

    @override
    @overload
    def update(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.update(java.awt.Graphics)"""
        super(_JComponent, self).update(arg0)

    @override
    @overload
    def add(self, arg0: 'PopupMenu'):
        """public void java.awt.Component.add(java.awt.PopupMenu)"""
        super(_Component, self).add(arg0)

    @override
    @overload
    def getToolTipText(self) -> str:
        """public java.lang.String javax.swing.JComponent.getToolTipText()"""
        return str._wrap(super(JComponent, self).getToolTipText())

    @override
    @overload
    def isVisible(self) -> bool:
        """public boolean java.awt.Component.isVisible()"""
        return bool._wrap(super(Component, self).isVisible())

    @override
    @overload
    def setDropTarget(self, arg0: 'DropTarget'):
        """public synchronized void java.awt.Component.setDropTarget(java.awt.dnd.DropTarget)"""
        super(_Component, self).setDropTarget(arg0)

    @override
    @overload
    def getLocationOnScreen(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocationOnScreen()"""
        return 'Point'._wrap(super(Component, self).getLocationOnScreen())

    @override
    @overload
    def getY(self) -> int:
        """public int javax.swing.JComponent.getY()"""
        return int._wrap(super(JComponent, self).getY())

    @overload
    def getComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def isMaximumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMaximumSizeSet()"""
        return bool._wrap(super(Component, self).isMaximumSizeSet())

    @override
    @overload
    def setAlignmentY(self, arg0: float):
        """public void javax.swing.JComponent.setAlignmentY(float)"""
        super(_JComponent, self).setAlignmentY(_float.valueOf(arg0))

    @override
    @overload
    def getRegisteredKeyStrokes(self) -> List['KeyStroke']:
        """public javax.swing.KeyStroke[] javax.swing.JComponent.getRegisteredKeyStrokes()"""
        return List['KeyStroke']._wrap(super(JComponent, self).getRegisteredKeyStrokes())

    @override
    @overload
    def isFocusable(self) -> bool:
        """public boolean java.awt.Component.isFocusable()"""
        return bool._wrap(super(Component, self).isFocusable())

    @override
    @overload
    def isFocusTraversalPolicyProvider(self) -> bool:
        """public final boolean java.awt.Container.isFocusTraversalPolicyProvider()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicyProvider())

    @override
    @overload
    def getMouseListeners(self) -> List['MouseListener']:
        """public synchronized java.awt.event.MouseListener[] java.awt.Component.getMouseListeners()"""
        return List['MouseListener']._wrap(super(Component, self).getMouseListeners())

    @override
    @overload
    def registerKeyboardAction(self, arg0: 'ActionListener', arg1: 'KeyStroke', arg2: int):
        """public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,javax.swing.KeyStroke,int)"""
        super(_JComponent, self).registerKeyboardAction(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def transferFocusUpCycle(self):
        """public void java.awt.Component.transferFocusUpCycle()"""
        super(Component, self).transferFocusUpCycle()

    @override
    @overload
    def setImage(self, arg0: str):
        """public void com.badlogic.gdx.tools.flame.ImagePanel.setImage(java.lang.String)"""
        super(_ImagePanel, self).setImage(arg0)

    @override
    @overload
    def removeKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.removeKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).removeKeyListener(arg0)

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: str, arg2: str):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,char,char)"""
        super(_JComponent, self).firePropertyChange(arg0, _char.valueOf(arg1), _char.valueOf(arg2))

    @override
    @overload
    def getMouseMotionListeners(self) -> List['MouseMotionListener']:
        """public synchronized java.awt.event.MouseMotionListener[] java.awt.Component.getMouseMotionListeners()"""
        return List['MouseMotionListener']._wrap(super(Component, self).getMouseMotionListeners())

    @override
    @overload
    def getAutoscrolls(self) -> bool:
        """public boolean javax.swing.JComponent.getAutoscrolls()"""
        return bool._wrap(super(JComponent, self).getAutoscrolls())

    @override
    @overload
    def addContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.addContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).addContainerListener(arg0)

    @override
    @overload
    def isFocusTraversable(self) -> bool:
        """public boolean java.awt.Component.isFocusTraversable()"""
        return bool._wrap(super(Component, self).isFocusTraversable())

    @overload
    def mouseExit(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseExit(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseExit(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getBounds(self, arg0: 'Rectangle') -> 'Rectangle':
        """public java.awt.Rectangle javax.swing.JComponent.getBounds(java.awt.Rectangle)"""
        return 'Rectangle'._wrap(super(_JComponent, self).getBounds(arg0))

    @override
    @overload
    def setToolTipText(self, arg0: str):
        """public void javax.swing.JComponent.setToolTipText(java.lang.String)"""
        super(_JComponent, self).setToolTipText(arg0)

    @override
    @overload
    def setAutoscrolls(self, arg0: bool):
        """public void javax.swing.JComponent.setAutoscrolls(boolean)"""
        super(_JComponent, self).setAutoscrolls(_boolean.valueOf(arg0))

    @override
    @overload
    def setComponentPopupMenu(self, arg0: 'JPopupMenu'):
        """public void javax.swing.JComponent.setComponentPopupMenu(javax.swing.JPopupMenu)"""
        super(_JComponent, self).setComponentPopupMenu(arg0)

    @override
    @overload
    def setMixingCutoutShape(self, arg0: 'Shape'):
        """public void java.awt.Component.setMixingCutoutShape(java.awt.Shape)"""
        super(_Component, self).setMixingCutoutShape(arg0)

    @override
    @overload
    def getVisibleRect(self) -> 'Rectangle':
        """public java.awt.Rectangle javax.swing.JComponent.getVisibleRect()"""
        return 'Rectangle'._wrap(super(JComponent, self).getVisibleRect())

    @override
    @overload
    def requestFocus(self, arg0: 'Cause'):
        """public void java.awt.Component.requestFocus(java.awt.event.FocusEvent$Cause)"""
        super(_Component, self).requestFocus(arg0)

    @overload
    def createImage(self, arg0: int, arg1: int) -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(int,int)"""
        return 'Image'._wrap(super(_Component, self).createImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def putClientProperty(self, arg0: object, arg1: object):
        """public final void javax.swing.JComponent.putClientProperty(java.lang.Object,java.lang.Object)"""
        super(_JComponent, self).putClientProperty(arg0, arg1)

    @override
    @overload
    def getVetoableChangeListeners(self) -> List['VetoableChangeListener']:
        """public synchronized java.beans.VetoableChangeListener[] javax.swing.JComponent.getVetoableChangeListeners()"""
        return List['VetoableChangeListener']._wrap(super(JComponent, self).getVetoableChangeListeners())

    @overload
    def select(self, arg0: 'TextureRegion'):
        """public void com.badlogic.gdx.tools.flame.TexturePanel.select(com.badlogic.gdx.graphics.g2d.TextureRegion)"""
        super(_TexturePanel, self).select(arg0)

    @override
    @overload
    def scrollRectToVisible(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.scrollRectToVisible(java.awt.Rectangle)"""
        super(_JComponent, self).scrollRectToVisible(arg0)

    @override
    @overload
    def getTopLevelAncestor(self) -> 'Container':
        """public java.awt.Container javax.swing.JComponent.getTopLevelAncestor()"""
        return 'Container'._wrap(super(JComponent, self).getTopLevelAncestor())

    @override
    @overload
    def isRequestFocusEnabled(self) -> bool:
        """public boolean javax.swing.JComponent.isRequestFocusEnabled()"""
        return bool._wrap(super(JComponent, self).isRequestFocusEnabled())

    @override
    @overload
    def getFocusListeners(self) -> List['FocusListener']:
        """public synchronized java.awt.event.FocusListener[] java.awt.Component.getFocusListeners()"""
        return List['FocusListener']._wrap(super(Component, self).getFocusListeners())

    @override
    @overload
    def setLayout(self, arg0: 'LayoutManager'):
        """public void java.awt.Container.setLayout(java.awt.LayoutManager)"""
        super(_Container, self).setLayout(arg0)

    @overload
    def add(self, arg0: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0))

    @override
    @overload
    def getMouseWheelListeners(self) -> List['MouseWheelListener']:
        """public synchronized java.awt.event.MouseWheelListener[] java.awt.Component.getMouseWheelListeners()"""
        return List['MouseWheelListener']._wrap(super(Component, self).getMouseWheelListeners())

    @override
    @overload
    def reshape(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void javax.swing.JComponent.reshape(int,int,int,int)"""
        super(_JComponent, self).reshape(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def setTransferHandler(self, arg0: 'TransferHandler'):
        """public void javax.swing.JComponent.setTransferHandler(javax.swing.TransferHandler)"""
        super(_JComponent, self).setTransferHandler(arg0)

    @override
    @overload
    def setLocation(self, arg0: int, arg1: int):
        """public void java.awt.Component.setLocation(int,int)"""
        super(_Component, self).setLocation(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def removeInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.removeInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).removeInputMethodListener(arg0)

    @override
    @overload
    def setFocusable(self, arg0: bool):
        """public void java.awt.Component.setFocusable(boolean)"""
        super(_Component, self).setFocusable(_boolean.valueOf(arg0))

    @override
    @overload
    def paintComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.paintComponents(java.awt.Graphics)"""
        super(_Container, self).paintComponents(arg0)

    @override
    @overload
    def addFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.addFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).addFocusListener(arg0)

    @overload
    def prepareImage(self, arg0: 'Image', arg1: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, arg1))

    @override
    @overload
    def addKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.addKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).addKeyListener(arg0)

    @override
    @overload
    def resize(self, arg0: 'Dimension'):
        """public void java.awt.Component.resize(java.awt.Dimension)"""
        super(_Component, self).resize(arg0)

    @override
    @overload
    def setComponentZOrder(self, arg0: 'Component', arg1: int):
        """public void java.awt.Container.setComponentZOrder(java.awt.Component,int)"""
        super(_Container, self).setComponentZOrder(arg0, _int.valueOf(arg1))

    @override
    @overload
    def list(self):
        """public void java.awt.Component.list()"""
        super(Component, self).list()

    @overload
    def add(self, arg0: str, arg1: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.lang.String,java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, arg1))

    @override
    @overload
    def paintImmediately(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void javax.swing.JComponent.paintImmediately(int,int,int,int)"""
        super(_JComponent, self).paintImmediately(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def getMinimumSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getMinimumSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getMinimumSize())

    @override
    @overload
    def setEnabled(self, arg0: bool):
        """public void javax.swing.JComponent.setEnabled(boolean)"""
        super(_JComponent, self).setEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def hasFocus(self) -> bool:
        """public boolean java.awt.Component.hasFocus()"""
        return bool._wrap(super(Component, self).hasFocus())

    @overload
    def createVolatileImage(self, arg0: int, arg1: int) -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int)"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.removeHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).removeHierarchyListener(arg0)

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.awt.Component.toString()"""
        return str._wrap(super(Component, self).toString())

    @override
    @overload
    def addMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.addMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).addMouseListener(arg0)

    @override
    @overload
    def isFocusOwner(self) -> bool:
        """public boolean java.awt.Component.isFocusOwner()"""
        return bool._wrap(super(Component, self).isFocusOwner())

    @override
    @overload
    def getAccessibleContext(self) -> 'AccessibleContext':
        """public javax.accessibility.AccessibleContext javax.swing.JPanel.getAccessibleContext()"""
        return 'AccessibleContext'._wrap(super(JPanel, self).getAccessibleContext())

    @overload
    def postEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.postEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).postEvent(arg0))

    @overload
    def getLocation(self, arg0: 'Point') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getLocation(java.awt.Point)"""
        return 'Point'._wrap(super(_JComponent, self).getLocation(arg0))

    @overload
    def unselect(self, arg0: 'TextureRegion'):
        """public void com.badlogic.gdx.tools.flame.TexturePanel.unselect(com.badlogic.gdx.graphics.g2d.TextureRegion)"""
        super(_TexturePanel, self).unselect(arg0)

    @overload
    def getBaseline(self, arg0: int, arg1: int) -> int:
        """public int javax.swing.JComponent.getBaseline(int,int)"""
        return int._wrap(super(_JComponent, self).getBaseline(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def findComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeNotify(self):
        """public void javax.swing.JComponent.removeNotify()"""
        super(JComponent, self).removeNotify()

    @override
    @overload
    def getForeground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getForeground()"""
        return 'Color'._wrap(super(Component, self).getForeground())

    @override
    @overload
    def show(self):
        """public void java.awt.Component.show()"""
        super(Component, self).show()

    @override
    @overload
    def isDoubleBuffered(self) -> bool:
        """public boolean javax.swing.JComponent.isDoubleBuffered()"""
        return bool._wrap(super(JComponent, self).isDoubleBuffered())

    @override
    @overload
    def isFocusCycleRoot(self) -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot()"""
        return bool._wrap(super(Container, self).isFocusCycleRoot())

    @override
    @overload
    def addMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.addMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).addMouseWheelListener(arg0)

    @override
    @overload
    def hide(self):
        """public void javax.swing.JComponent.hide()"""
        super(JComponent, self).hide()

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def revalidate(self):
        """public void javax.swing.JComponent.revalidate()"""
        super(JComponent, self).revalidate()

    @override
    @overload
    def getActionMap(self) -> 'ActionMap':
        """public final javax.swing.ActionMap javax.swing.JComponent.getActionMap()"""
        return 'ActionMap'._wrap(super(JComponent, self).getActionMap())

    @override
    @overload
    def requestFocusInWindow(self) -> bool:
        """public boolean javax.swing.JComponent.requestFocusInWindow()"""
        return bool._wrap(super(JComponent, self).requestFocusInWindow())

    @overload
    def action(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.action(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).action(arg0, arg1))

    @override
    @overload
    def isManagingFocus(self) -> bool:
        """public boolean javax.swing.JComponent.isManagingFocus()"""
        return bool._wrap(super(JComponent, self).isManagingFocus())

    @override
    @overload
    def isLightweight(self) -> bool:
        """public boolean java.awt.Component.isLightweight()"""
        return bool._wrap(super(Component, self).isLightweight())

    @override
    @overload
    def setAlignmentX(self, arg0: float):
        """public void javax.swing.JComponent.setAlignmentX(float)"""
        super(_JComponent, self).setAlignmentX(_float.valueOf(arg0))

    @overload
    def getFocusTraversalKeys(self, arg0: int) -> 'Set':
        """public java.util.Set<java.awt.AWTKeyStroke> java.awt.Container.getFocusTraversalKeys(int)"""
        return 'Set'._wrap(super(_Container, self).getFocusTraversalKeys(_int.valueOf(arg0)))

    @override
    @overload
    def setFocusTraversalKeysEnabled(self, arg0: bool):
        """public void java.awt.Component.setFocusTraversalKeysEnabled(boolean)"""
        super(_Component, self).setFocusTraversalKeysEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def remove(self, arg0: 'Component'):
        """public void java.awt.Container.remove(java.awt.Component)"""
        super(_Container, self).remove(arg0)

    @overload
    def getInsets(self, arg0: 'Insets') -> 'Insets':
        """public java.awt.Insets javax.swing.JComponent.getInsets(java.awt.Insets)"""
        return 'Insets'._wrap(super(_JComponent, self).getInsets(arg0))

    @override
    @overload
    def insets(self) -> 'Insets':
        """public java.awt.Insets java.awt.Container.insets()"""
        return 'Insets'._wrap(super(Container, self).insets())

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int):
        """public void javax.swing.JComponent.repaint(long,int,int,int,int)"""
        super(_JComponent, self).repaint(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4))

    @override
    @overload
    def setFocusTraversalPolicy(self, arg0: 'FocusTraversalPolicy'):
        """public void java.awt.Container.setFocusTraversalPolicy(java.awt.FocusTraversalPolicy)"""
        super(_Container, self).setFocusTraversalPolicy(arg0)

    @overload
    def getSize(self, arg0: 'Dimension') -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getSize(java.awt.Dimension)"""
        return 'Dimension'._wrap(super(_JComponent, self).getSize(arg0))

    @override
    @overload
    def enable(self, arg0: bool):
        """public void java.awt.Component.enable(boolean)"""
        super(_Component, self).enable(_boolean.valueOf(arg0))

    @overload
    def getToolTipLocation(self, arg0: 'MouseEvent') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getToolTipLocation(java.awt.event.MouseEvent)"""
        return 'Point'._wrap(super(_JComponent, self).getToolTipLocation(arg0))

    @overload
    def setTexture(self, arg0: 'Texture'):
        """public void com.badlogic.gdx.tools.flame.TexturePanel.setTexture(com.badlogic.gdx.graphics.Texture)"""
        super(_TexturePanel, self).setTexture(arg0)

    @override
    @overload
    def addPropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Container.addPropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Container, self).addPropertyChangeListener(arg0)

    @overload
    def getComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(arg0))

    @override
    @overload
    def size(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.size()"""
        return 'Dimension'._wrap(super(Component, self).size())

    @override
    @overload
    def getVerifyInputWhenFocusTarget(self) -> bool:
        """public boolean javax.swing.JComponent.getVerifyInputWhenFocusTarget()"""
        return bool._wrap(super(JComponent, self).getVerifyInputWhenFocusTarget())

    @overload
    def mouseMove(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseMove(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseMove(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getActionForKeyStroke(self, arg0: 'KeyStroke') -> 'ActionListener':
        """public java.awt.event.ActionListener javax.swing.JComponent.getActionForKeyStroke(javax.swing.KeyStroke)"""
        return 'ActionListener'._wrap(super(_JComponent, self).getActionForKeyStroke(arg0))

    @overload
    def lostFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.lostFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).lostFocus(arg0, arg1))

    @override
    @overload
    def isMinimumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMinimumSizeSet()"""
        return bool._wrap(super(Component, self).isMinimumSizeSet())

    @override
    @overload
    def isForegroundSet(self) -> bool:
        """public boolean java.awt.Component.isForegroundSet()"""
        return bool._wrap(super(Component, self).isForegroundSet())

    @overload
    def getMousePosition(self, arg0: bool) -> 'Point':
        """public java.awt.Point java.awt.Container.getMousePosition(boolean) throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(_Container, self).getMousePosition(_boolean.valueOf(arg0)))

    @overload
    def getFontMetrics(self, arg0: 'Font') -> 'FontMetrics':
        """public java.awt.FontMetrics javax.swing.JComponent.getFontMetrics(java.awt.Font)"""
        return 'FontMetrics'._wrap(super(_JComponent, self).getFontMetrics(arg0))

    @overload
    def getListeners(self, arg0: 'Class') -> List['EventListener']:
        """public <T extends java.util.EventListener> T[] javax.swing.JComponent.getListeners(java.lang.Class<T>)"""
        return List['EventListener']._wrap(super(_JComponent, self).getListeners(arg0))

    @override
    @overload
    def getHierarchyBoundsListeners(self) -> List['HierarchyBoundsListener']:
        """public synchronized java.awt.event.HierarchyBoundsListener[] java.awt.Component.getHierarchyBoundsListeners()"""
        return List['HierarchyBoundsListener']._wrap(super(Component, self).getHierarchyBoundsListeners())

    @override
    @overload
    def minimumSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.minimumSize()"""
        return 'Dimension'._wrap(super(Container, self).minimumSize())

    @overload
    def handleEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.handleEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).handleEvent(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @override
    @overload
    def getComponentListeners(self) -> List['ComponentListener']:
        """public synchronized java.awt.event.ComponentListener[] java.awt.Component.getComponentListeners()"""
        return List['ComponentListener']._wrap(super(Component, self).getComponentListeners())

    @override
    @overload
    def computeVisibleRect(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.computeVisibleRect(java.awt.Rectangle)"""
        super(_JComponent, self).computeVisibleRect(arg0)

    @override
    @overload
    def deliverEvent(self, arg0: 'Event'):
        """public void java.awt.Container.deliverEvent(java.awt.Event)"""
        super(_Container, self).deliverEvent(arg0)

    @override
    @overload
    def addHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.addHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).addHierarchyBoundsListener(arg0)

    @override
    @overload
    def getAlignmentX(self) -> float:
        """public float javax.swing.JComponent.getAlignmentX()"""
        return float._wrap(super(JComponent, self).getAlignmentX())

    @overload
    def add(self, arg0: 'Component', arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component,int)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def repaint(self):
        """public void java.awt.Component.repaint()"""
        super(Component, self).repaint()

    @overload
    def gotFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.gotFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).gotFocus(arg0, arg1))

    @override
    @overload
    def createToolTip(self) -> 'JToolTip':
        """public javax.swing.JToolTip javax.swing.JComponent.createToolTip()"""
        return 'JToolTip'._wrap(super(JComponent, self).createToolTip())

    @overload
    def setRegions(self, arg0: 'Array'):
        """public void com.badlogic.gdx.tools.flame.TexturePanel.setRegions(com.badlogic.gdx.utils.Array<com.badlogic.gdx.graphics.g2d.TextureRegion>)"""
        super(_TexturePanel, self).setRegions(arg0)

    @overload
    def getToolTipText(self, arg0: 'MouseEvent') -> str:
        """public java.lang.String javax.swing.JComponent.getToolTipText(java.awt.event.MouseEvent)"""
        return str._wrap(super(_JComponent, self).getToolTipText(arg0))

    @override
    @overload
    def printComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.printComponents(java.awt.Graphics)"""
        super(_Container, self).printComponents(arg0)

    @override
    @overload
    def getColorModel(self) -> 'ColorModel':
        """public java.awt.image.ColorModel java.awt.Component.getColorModel()"""
        return 'ColorModel'._wrap(super(Component, self).getColorModel())

    @override
    @overload
    def setFocusTraversalPolicyProvider(self, arg0: bool):
        """public final void java.awt.Container.setFocusTraversalPolicyProvider(boolean)"""
        super(_Container, self).setFocusTraversalPolicyProvider(_boolean.valueOf(arg0))

    @overload
    def getComponentZOrder(self, arg0: 'Component') -> int:
        """public int java.awt.Container.getComponentZOrder(java.awt.Component)"""
        return int._wrap(super(_Container, self).getComponentZOrder(arg0))

    @override
    @overload
    def getDebugGraphicsOptions(self) -> int:
        """public int javax.swing.JComponent.getDebugGraphicsOptions()"""
        return int._wrap(super(JComponent, self).getDebugGraphicsOptions())

    @overload
    def areFocusTraversalKeysSet(self, arg0: int) -> bool:
        """public boolean java.awt.Container.areFocusTraversalKeysSet(int)"""
        return bool._wrap(super(_Container, self).areFocusTraversalKeysSet(_int.valueOf(arg0)))

    @override
    @overload
    def getSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.getSize()"""
        return 'Dimension'._wrap(super(Component, self).getSize())

    @override
    @overload
    def setName(self, arg0: str):
        """public void java.awt.Component.setName(java.lang.String)"""
        super(_Component, self).setName(arg0)

    @override
    @overload
    def repaint(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.repaint(java.awt.Rectangle)"""
        super(_JComponent, self).repaint(arg0)

    @overload
    def getClientProperty(self, arg0: object) -> object:
        """public final java.lang.Object javax.swing.JComponent.getClientProperty(java.lang.Object)"""
        return object._wrap(super(_JComponent, self).getClientProperty(arg0))

    @override
    @overload
    def unregisterKeyboardAction(self, arg0: 'KeyStroke'):
        """public void javax.swing.JComponent.unregisterKeyboardAction(javax.swing.KeyStroke)"""
        super(_JComponent, self).unregisterKeyboardAction(arg0)

    @overload
    def requestFocus(self, arg0: bool) -> bool:
        """public boolean javax.swing.JComponent.requestFocus(boolean)"""
        return bool._wrap(super(_JComponent, self).requestFocus(_boolean.valueOf(arg0)))

    @override
    @overload
    def setActionMap(self, arg0: 'ActionMap'):
        """public final void javax.swing.JComponent.setActionMap(javax.swing.ActionMap)"""
        super(_JComponent, self).setActionMap(arg0)

    @override
    @overload
    def getX(self) -> int:
        """public int javax.swing.JComponent.getX()"""
        return int._wrap(super(JComponent, self).getX())

    @overload
    def mouseEnter(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseEnter(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseEnter(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def updateUI(self):
        """public void javax.swing.JPanel.updateUI()"""
        super(JPanel, self).updateUI()

    @override
    @overload
    def getToolkit(self) -> 'Toolkit':
        """public java.awt.Toolkit java.awt.Component.getToolkit()"""
        return 'Toolkit'._wrap(super(Component, self).getToolkit())

    @overload
    def __init__(self, ):
        """public com.badlogic.gdx.tools.flame.TexturePanel()"""
        val = _TexturePanel()
        self.__wrapper = val

    @override
    @overload
    def isCursorSet(self) -> bool:
        """public boolean java.awt.Component.isCursorSet()"""
        return bool._wrap(super(Component, self).isCursorSet())

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object, arg2: int):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object,int)"""
        super(_Container, self).add(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def setPreferredSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setPreferredSize(java.awt.Dimension)"""
        super(_JComponent, self).setPreferredSize(arg0)

    @override
    @overload
    def setBounds(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.setBounds(int,int,int,int)"""
        super(_Component, self).setBounds(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def isFocusTraversalPolicySet(self) -> bool:
        """public boolean java.awt.Container.isFocusTraversalPolicySet()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicySet())

    @override
    @overload
    def requestFocus(self):
        """public void javax.swing.JComponent.requestFocus()"""
        super(JComponent, self).requestFocus()

    @override
    @overload
    def getAncestorListeners(self) -> List['AncestorListener']:
        """public javax.swing.event.AncestorListener[] javax.swing.JComponent.getAncestorListeners()"""
        return List['AncestorListener']._wrap(super(JComponent, self).getAncestorListeners())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool._wrap(super(_object, self).equals(arg0))

    @overload
    def getInputMap(self, arg0: int) -> 'InputMap':
        """public final javax.swing.InputMap javax.swing.JComponent.getInputMap(int)"""
        return 'InputMap'._wrap(super(_JComponent, self).getInputMap(_int.valueOf(arg0)))

    @override
    @overload
    def isEnabled(self) -> bool:
        """public boolean java.awt.Component.isEnabled()"""
        return bool._wrap(super(Component, self).isEnabled())

    @override
    @overload
    def move(self, arg0: int, arg1: int):
        """public void java.awt.Component.move(int,int)"""
        super(_Component, self).move(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getName(self) -> str:
        """public java.lang.String java.awt.Component.getName()"""
        return str._wrap(super(Component, self).getName())

    @override
    @overload
    def addMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.addMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).addMouseMotionListener(arg0)

    @override
    @overload
    def getIgnoreRepaint(self) -> bool:
        """public boolean java.awt.Component.getIgnoreRepaint()"""
        return bool._wrap(super(Component, self).getIgnoreRepaint())

    @overload
    def isFocusCycleRoot(self, arg0: 'Container') -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot(java.awt.Container)"""
        return bool._wrap(super(_Container, self).isFocusCycleRoot(arg0))

    @override
    @overload
    def getGraphics(self) -> 'Graphics':
        """public java.awt.Graphics javax.swing.JComponent.getGraphics()"""
        return 'Graphics'._wrap(super(JComponent, self).getGraphics())

    @override
    @overload
    def getPreferredSize(self) -> 'Dimension':
        """public java.awt.Dimension com.badlogic.gdx.tools.flame.ImagePanel.getPreferredSize()"""
        return 'Dimension'._wrap(super(ImagePanel, self).getPreferredSize())

    @override
    @overload
    def setLocale(self, arg0: 'Locale'):
        """public void java.awt.Component.setLocale(java.util.Locale)"""
        super(_Component, self).setLocale(arg0)

    @override
    @overload
    def paintAll(self, arg0: 'Graphics'):
        """public void java.awt.Component.paintAll(java.awt.Graphics)"""
        super(_Component, self).paintAll(arg0)

    @override
    @overload
    def setDoubleBuffered(self, arg0: bool):
        """public void javax.swing.JComponent.setDoubleBuffered(boolean)"""
        super(_JComponent, self).setDoubleBuffered(_boolean.valueOf(arg0))

    @override
    @overload
    def isPreferredSizeSet(self) -> bool:
        """public boolean java.awt.Component.isPreferredSizeSet()"""
        return bool._wrap(super(Component, self).isPreferredSizeSet())

    @override
    @overload
    def addInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.addInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).addInputMethodListener(arg0)

    @override
    @overload
    def removeMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.removeMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).removeMouseWheelListener(arg0)

    @override
    @overload
    def getInputMap(self) -> 'InputMap':
        """public final javax.swing.InputMap javax.swing.JComponent.getInputMap()"""
        return 'InputMap'._wrap(super(JComponent, self).getInputMap())

    @override
    @overload
    def setVisible(self, arg0: bool):
        """public void javax.swing.JComponent.setVisible(boolean)"""
        super(_JComponent, self).setVisible(_boolean.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,byte,byte)"""
        super(_Component, self).firePropertyChange(arg0, _byte.valueOf(arg1), _byte.valueOf(arg2))

    @override
    @overload
    def getUIClassID(self) -> str:
        """public java.lang.String javax.swing.JPanel.getUIClassID()"""
        return str._wrap(super(JPanel, self).getUIClassID())

    @override
    @overload
    def transferFocusDownCycle(self):
        """public void java.awt.Container.transferFocusDownCycle()"""
        super(Container, self).transferFocusDownCycle()

    @override
    @overload
    def getNextFocusableComponent(self) -> 'Component':
        """public java.awt.Component javax.swing.JComponent.getNextFocusableComponent()"""
        return 'Component'._wrap(super(JComponent, self).getNextFocusableComponent())

    @override
    @overload
    def getUI(self) -> 'PanelUI':
        """public javax.swing.plaf.PanelUI javax.swing.JPanel.getUI()"""
        return 'PanelUI'._wrap(super(JPanel, self).getUI())

    @override
    @overload
    def setBounds(self, arg0: 'Rectangle'):
        """public void java.awt.Component.setBounds(java.awt.Rectangle)"""
        super(_Component, self).setBounds(arg0)

    @override
    @overload
    def repaint(self, arg0: int):
        """public void java.awt.Component.repaint(long)"""
        super(_Component, self).repaint(_long.valueOf(arg0))

    @override
    @overload
    def removeHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.removeHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).removeHierarchyBoundsListener(arg0)

    @override
    @overload
    def getComponentPopupMenu(self) -> 'JPopupMenu':
        """public javax.swing.JPopupMenu javax.swing.JComponent.getComponentPopupMenu()"""
        return 'JPopupMenu'._wrap(super(JComponent, self).getComponentPopupMenu())

    @override
    @overload
    def getMousePosition(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getMousePosition() throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(Component, self).getMousePosition())

    @override
    @overload
    def getComponentCount(self) -> int:
        """public int java.awt.Container.getComponentCount()"""
        return int._wrap(super(Container, self).getComponentCount())

    @override
    @overload
    def getInputMethodRequests(self) -> 'InputMethodRequests':
        """public java.awt.im.InputMethodRequests java.awt.Component.getInputMethodRequests()"""
        return 'InputMethodRequests'._wrap(super(Component, self).getInputMethodRequests())

    @override
    @overload
    def setMaximumSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setMaximumSize(java.awt.Dimension)"""
        super(_JComponent, self).setMaximumSize(arg0)

    @override
    @overload
    def setRequestFocusEnabled(self, arg0: bool):
        """public void javax.swing.JComponent.setRequestFocusEnabled(boolean)"""
        super(_JComponent, self).setRequestFocusEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def setFocusTraversalKeys(self, arg0: int, arg1: 'Set'):
        """public void javax.swing.JComponent.setFocusTraversalKeys(int,java.util.Set<? extends java.awt.AWTKeyStroke>)"""
        super(_JComponent, self).setFocusTraversalKeys(_int.valueOf(arg0), arg1)

    @overload
    def inside(self, arg0: int, arg1: int) -> bool:
        """public boolean java.awt.Component.inside(int,int)"""
        return bool._wrap(super(_Component, self).inside(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def requestDefaultFocus(self) -> bool:
        """public boolean javax.swing.JComponent.requestDefaultFocus()"""
        return bool._wrap(super(JComponent, self).requestDefaultFocus())

    @override
    @overload
    def disable(self):
        """public void javax.swing.JComponent.disable()"""
        super(JComponent, self).disable()

    @override
    @overload
    def enableInputMethods(self, arg0: bool):
        """public void java.awt.Component.enableInputMethods(boolean)"""
        super(_Component, self).enableInputMethods(_boolean.valueOf(arg0))

    @override
    @overload
    def layout(self):
        """public void java.awt.Container.layout()"""
        super(Container, self).layout()

    @override
    @overload
    def getInputMethodListeners(self) -> List['InputMethodListener']:
        """public synchronized java.awt.event.InputMethodListener[] java.awt.Component.getInputMethodListeners()"""
        return List['InputMethodListener']._wrap(super(Component, self).getInputMethodListeners())

    @override
    @overload
    def paint(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.paint(java.awt.Graphics)"""
        super(_JComponent, self).paint(arg0)

    @override
    @overload
    def transferFocus(self):
        """public void java.awt.Component.transferFocus()"""
        super(Component, self).transferFocus()

    @overload
    def __init__(self):
        """public com.badlogic.gdx.tools.flame.TexturePanel()"""
        val = _TexturePanel()
        self.__wrapper = val

    @override
    @overload
    def removeComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.removeComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).removeComponentListener(arg0)

    @override
    @overload
    def getCursor(self) -> 'Cursor':
        """public java.awt.Cursor java.awt.Component.getCursor()"""
        return 'Cursor'._wrap(super(Component, self).getCursor())

    @override
    @overload
    def setMinimumSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setMinimumSize(java.awt.Dimension)"""
        super(_JComponent, self).setMinimumSize(arg0)

    @override
    @overload
    def getContainerListeners(self) -> List['ContainerListener']:
        """public synchronized java.awt.event.ContainerListener[] java.awt.Container.getContainerListeners()"""
        return List['ContainerListener']._wrap(super(Container, self).getContainerListeners())

    @overload
    def selectAll(self):
        """public void com.badlogic.gdx.tools.flame.TexturePanel.selectAll()"""
        super(TexturePanel, self).selectAll()

    @overload
    def clear(self):
        """public void com.badlogic.gdx.tools.flame.TexturePanel.clear()"""
        super(TexturePanel, self).clear()

    @override
    @overload
    def setLocation(self, arg0: 'Point'):
        """public void java.awt.Component.setLocation(java.awt.Point)"""
        super(_Component, self).setLocation(arg0)

    @override
    @overload
    def setSize(self, arg0: 'Dimension'):
        """public void java.awt.Component.setSize(java.awt.Dimension)"""
        super(_Component, self).setSize(arg0)

    @override
    @overload
    def removeAll(self):
        """public void java.awt.Container.removeAll()"""
        super(Container, self).removeAll()

    @overload
    def getPopupLocation(self, arg0: 'MouseEvent') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getPopupLocation(java.awt.event.MouseEvent)"""
        return 'Point'._wrap(super(_JComponent, self).getPopupLocation(arg0))

    @overload
    def isAncestorOf(self, arg0: 'Component') -> bool:
        """public boolean java.awt.Container.isAncestorOf(java.awt.Component)"""
        return bool._wrap(super(_Container, self).isAncestorOf(arg0))

    @override
    @overload
    def setOpaque(self, arg0: bool):
        """public void javax.swing.JComponent.setOpaque(boolean)"""
        super(_JComponent, self).setOpaque(_boolean.valueOf(arg0))

    @overload
    def contains(self, arg0: int, arg1: int) -> bool:
        """public boolean javax.swing.JComponent.contains(int,int)"""
        return bool._wrap(super(_JComponent, self).contains(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def setCursor(self, arg0: 'Cursor'):
        """public void java.awt.Component.setCursor(java.awt.Cursor)"""
        super(_Component, self).setCursor(arg0)

    @override
    @overload
    def validate(self):
        """public void java.awt.Container.validate()"""
        super(Container, self).validate()

    @override
    @overload
    def getMaximumSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getMaximumSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getMaximumSize())

    @override
    @overload
    def getBackground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getBackground()"""
        return 'Color'._wrap(super(Component, self).getBackground())

    @overload
    def createImage(self, arg0: 'ImageProducer') -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(java.awt.image.ImageProducer)"""
        return 'Image'._wrap(super(_Component, self).createImage(arg0))

    @override
    @overload
    def setVerifyInputWhenFocusTarget(self, arg0: bool):
        """public void javax.swing.JComponent.setVerifyInputWhenFocusTarget(boolean)"""
        super(_JComponent, self).setVerifyInputWhenFocusTarget(_boolean.valueOf(arg0))

    @override
    @overload
    def removePropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0, arg1)

    @override
    @overload
    def countComponents(self) -> int:
        """public int java.awt.Container.countComponents()"""
        return int._wrap(super(Container, self).countComponents()) 
 
 
# CLASS: com.badlogic.gdx.tools.flame.FlameMain
from pyquantum_helper import import_once as _import_once
import javax.accessibility.AccessibleContext as AccessibleContext
try:
    from pygdx.graphics.g3d import particles
except ImportError:
    particles = _import_once("pygdx.graphics.g3d.particles")

import java.awt.event.HierarchyBoundsListener as HierarchyBoundsListener
import java.awt.ComponentOrientation as _ComponentOrientation
_ComponentOrientation = _ComponentOrientation
import java.awt.image.ImageProducer as ImageProducer
import com.badlogic.gdx.graphics.g3d.particles.batches.PointSpriteParticleBatch as _PointSpriteParticleBatch
_PointSpriteParticleBatch = _PointSpriteParticleBatch
import java.awt.BufferCapabilities as BufferCapabilities
import java.awt.Window as _Window
_Window = _Window
import com.badlogic.gdx.utils.Array as _Array
_Array = _Array
import java.awt.GraphicsConfiguration as GraphicsConfiguration
import java.awt.Graphics as _Graphics
_Graphics = _Graphics
import com.badlogic.gdx.tools.flame.FlameMain as _FlameMain_ControllerType
_ControllerType = _FlameMain_ControllerType.ControllerType
import com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch as _BillboardParticleBatch
_BillboardParticleBatch = _BillboardParticleBatch
import java.awt.Container as _Container
_Container = _Container
import java.awt.MenuComponent as MenuComponent
import java.awt.im.InputMethodRequests as _InputMethodRequests
_InputMethodRequests = _InputMethodRequests
import java.awt.FocusTraversalPolicy as _FocusTraversalPolicy
_FocusTraversalPolicy = _FocusTraversalPolicy
import java.lang.Byte as _byte
import java.awt.Dimension as Dimension
import java.awt.Font as _Font
_Font = _Font
import java.awt.event.ContainerListener as ContainerListener
import java.awt.AWTEvent as AWTEvent
import java.awt.image.ColorModel as _ColorModel
_ColorModel = _ColorModel
import java.lang.Object as _object
import java.awt.ComponentOrientation as ComponentOrientation
import java.awt.im.InputContext as _InputContext
_InputContext = _InputContext
from builtins import float
import java.awt.event.HierarchyListener as HierarchyListener
import com.badlogic.gdx.graphics.g2d.TextureAtlas as _TextureAtlas
_TextureAtlas = _TextureAtlas
import java.awt.event.InputMethodListener as InputMethodListener
from typing import List
import com.badlogic.gdx.graphics.g3d.particles.ParticleController as _ParticleController
_ParticleController = _ParticleController
import java.awt.event.MouseWheelListener as _MouseWheelListener
_MouseWheelListener = _MouseWheelListener
import java.awt.Window.Type as Type
import java.awt.event.KeyListener as KeyListener
import java.awt.Component as Component
try:
    from pygdx import graphics
except ImportError:
    graphics = _import_once("pygdx.graphics")

import java.awt.MenuBar as _MenuBar
_MenuBar = _MenuBar
from builtins import int
import java.awt.Frame as Frame
import java.awt.LayoutManager as LayoutManager
import java.awt.FontMetrics as _FontMetrics
_FontMetrics = _FontMetrics
import java.awt.Container as Container
try:
    from pygdx.graphics import g2d
except ImportError:
    g2d = _import_once("pygdx.graphics.g2d")

from builtins import type
import javax.swing.JMenuBar as JMenuBar
import java.awt.image.VolatileImage as _VolatileImage
_VolatileImage = _VolatileImage
import java.awt.Shape as Shape
import java.util.ResourceBundle as ResourceBundle
import java.awt.Rectangle as Rectangle
import java.awt.event.ContainerListener as _ContainerListener
_ContainerListener = _ContainerListener
import java.awt.event.HierarchyListener as _HierarchyListener
_HierarchyListener = _HierarchyListener
import java.lang.String as _string
import java.awt.Insets as _Insets
_Insets = _Insets
import java.awt.event.ComponentListener as _ComponentListener
_ComponentListener = _ComponentListener
import java.awt.event.ComponentListener as ComponentListener
import java.awt.Frame as _Frame
_Frame = _Frame
import java.awt.event.WindowFocusListener as WindowFocusListener
from builtins import object
import java.awt.event.WindowFocusListener as _WindowFocusListener
_WindowFocusListener = _WindowFocusListener
import java.awt.event.KeyListener as _KeyListener
_KeyListener = _KeyListener
import com.badlogic.gdx.tools.flame.FlameMain as _FlameMain
_FlameMain = _FlameMain
import java.awt.MenuBar as MenuBar
import java.awt.Component.BaselineResizeBehavior as BaselineResizeBehavior
import java.awt.Component as _Component_BaselineResizeBehavior
_BaselineResizeBehavior = _Component_BaselineResizeBehavior.BaselineResizeBehavior
import java.awt.Shape as _Shape
_Shape = _Shape
import java.awt.Cursor as _Cursor
_Cursor = _Cursor
import com.badlogic.gdx.tools.flame.FlameMain as _FlameMain_AppRenderer
_AppRenderer = _FlameMain_AppRenderer.AppRenderer
import java.awt.im.InputMethodRequests as InputMethodRequests
import java.lang.Long as _long
import javax.swing.JLayeredPane as JLayeredPane
import java.util.List as List
import java.awt.event.FocusListener as _FocusListener
_FocusListener = _FocusListener
import javax.swing.TransferHandler as TransferHandler
import java.lang.Character as _char
import java.io.File as File
import java.awt.event.FocusEvent.Cause as Cause
try:
    from pygdx import assets
except ImportError:
    assets = _import_once("pygdx.assets")

import javax.accessibility.AccessibleContext as _AccessibleContext
_AccessibleContext = _AccessibleContext
import java.awt.event.MouseWheelListener as MouseWheelListener
try:
    from pygdx.assets import loaders
except ImportError:
    loaders = _import_once("pygdx.assets.loaders")

import java.util.Set as _Set
_Set = _Set
import java.awt.event.WindowStateListener as _WindowStateListener
_WindowStateListener = _WindowStateListener
import java.awt.image.ColorModel as ColorModel
import java.lang.Boolean as _boolean
import java.awt.event.WindowStateListener as WindowStateListener
import java.awt.event.MouseMotionListener as MouseMotionListener
import java.util.EventListener as EventListener
import javax.swing.JLayeredPane as _JLayeredPane
_JLayeredPane = _JLayeredPane
import javax.swing.JFrame as _JFrame
_JFrame = _JFrame
import java.awt.Insets as Insets
import java.awt.GraphicsConfiguration as _GraphicsConfiguration
_GraphicsConfiguration = _GraphicsConfiguration
import java.awt.dnd.DropTarget as _DropTarget
_DropTarget = _DropTarget
from builtins import bool
import java.awt.Window as Window
import java.beans.PropertyChangeListener as _PropertyChangeListener
_PropertyChangeListener = _PropertyChangeListener
try:
    from pygdx import utils
except ImportError:
    utils = _import_once("pygdx.utils")

import java.awt.LayoutManager as _LayoutManager
_LayoutManager = _LayoutManager
import java.awt.PopupMenu as PopupMenu
import java.util.EventListener as _EventListener
_EventListener = _EventListener
import com.badlogic.gdx.graphics.Texture as _Texture
_Texture = _Texture
import java.awt.im.InputContext as InputContext
import com.badlogic.gdx.graphics.g3d.particles.batches.ModelInstanceParticleBatch as _ModelInstanceParticleBatch
_ModelInstanceParticleBatch = _ModelInstanceParticleBatch
import java.awt.Component as _Component
_Component = _Component
import java.awt.Font as Font
import java.awt.image.VolatileImage as VolatileImage
import java.awt.dnd.DropTarget as DropTarget
import java.lang.String as _String
_String = _String
import java.awt.Dialog as _Dialog_ModalExclusionType
_ModalExclusionType = _Dialog_ModalExclusionType.ModalExclusionType
import java.util.List as _List
_List = _List
import java.lang.Float as _float
import java.awt.Cursor as Cursor
import java.awt.event.MouseListener as _MouseListener
_MouseListener = _MouseListener
import java.io.File as _File
_File = _File
import java.awt.Toolkit as _Toolkit
_Toolkit = _Toolkit
import java.io.PrintStream as PrintStream
import javax.swing.JRootPane as _JRootPane
_JRootPane = _JRootPane
import java.awt.Dimension as _Dimension
_Dimension = _Dimension
import java.awt.Color as _Color
_Color = _Color
import java.awt.image.BufferStrategy as BufferStrategy
import java.awt.Dialog.ModalExclusionType as ModalExclusionType
import java.awt.event.MouseListener as MouseListener
import java.lang.Class as _Class
_Class = _Class
import java.awt.event.WindowListener as _WindowListener
_WindowListener = _WindowListener
import java.util.Locale as Locale
import java.lang.Double as _double
import java.lang.Object as _Object
_Object = _Object
import java.beans.PropertyChangeListener as PropertyChangeListener
import java.awt.Point as _Point
_Point = _Point
import java.io.PrintWriter as PrintWriter
import java.awt.Point as Point
import java.lang.Short as _short
import java.awt.Toolkit as Toolkit
import java.awt.event.HierarchyBoundsListener as _HierarchyBoundsListener
_HierarchyBoundsListener = _HierarchyBoundsListener
import javax.swing.TransferHandler as _TransferHandler
_TransferHandler = _TransferHandler
import com.badlogic.gdx.graphics.g3d.particles.ParticleEffect as _ParticleEffect
_ParticleEffect = _ParticleEffect
import javax.swing.JRootPane as JRootPane
import java.awt.Rectangle as _Rectangle
_Rectangle = _Rectangle
import java.awt.Event as Event
import java.awt.event.FocusListener as FocusListener
import java.awt.image.ImageObserver as ImageObserver
from builtins import str
from pyquantum_helper import override
import java.awt.event.WindowListener as WindowListener
import java.awt.FocusTraversalPolicy as FocusTraversalPolicy
import java.awt.image.BufferStrategy as _BufferStrategy
_BufferStrategy = _BufferStrategy
import java.awt.event.MouseMotionListener as _MouseMotionListener
_MouseMotionListener = _MouseMotionListener
try:
    from pygdx.graphics.g3d.particles import batches
except ImportError:
    batches = _import_once("pygdx.graphics.g3d.particles.batches")

import java.awt.event.InputMethodListener as _InputMethodListener
_InputMethodListener = _InputMethodListener
import javax.swing.JMenuBar as _JMenuBar
_JMenuBar = _JMenuBar
import java.util.Set as Set
import java.lang.Integer as _int
import java.awt.Image as _Image
_Image = _Image
import java.awt.FontMetrics as FontMetrics
import java.awt.Color as Color
import java.awt.Window as _Window_Type
_Type = _Window_Type.Type
import java.lang.Throwable as Throwable
import java.awt.Image as Image
import java.awt.Graphics as Graphics
import java.awt.ImageCapabilities as ImageCapabilities
import java.util.Locale as _Locale
_Locale = _Locale
 
class FlameMain():
    """com.badlogic.gdx.tools.flame.FlameMain"""
 
    @staticmethod
    def _wrap(java_value: _FlameMain) -> 'FlameMain':
        return FlameMain(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _FlameMain):
        """
        Dynamic initializer for FlameMain.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_FlameMain__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_FlameMain__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def getAlignmentY(self) -> float:
        """public float java.awt.Container.getAlignmentY()"""
        return float._wrap(super(Container, self).getAlignmentY())

    @override
    @overload
    def getComponents(self) -> List['Component']:
        """public java.awt.Component[] java.awt.Container.getComponents()"""
        return List['Component']._wrap(super(Container, self).getComponents())

    @override
    @overload
    def isValid(self) -> bool:
        """public boolean java.awt.Component.isValid()"""
        return bool._wrap(super(Component, self).isValid())

    @override
    @overload
    def removeNotify(self):
        """public void java.awt.Frame.removeNotify()"""
        super(Frame, self).removeNotify()

    @override
    @overload
    def setFocusTraversalKeys(self, arg0: int, arg1: 'Set'):
        """public void java.awt.Container.setFocusTraversalKeys(int,java.util.Set<? extends java.awt.AWTKeyStroke>)"""
        super(_Container, self).setFocusTraversalKeys(_int.valueOf(arg0), arg1)

    @override
    @overload
    def getWidth(self) -> int:
        """public int java.awt.Component.getWidth()"""
        return int._wrap(super(Component, self).getWidth())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def addPropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Window.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Window, self).addPropertyChangeListener(arg0, arg1)

    @override
    @overload
    def getIconImages(self) -> 'List':
        """public java.util.List<java.awt.Image> java.awt.Window.getIconImages()"""
        return 'List'._wrap(super(Window, self).getIconImages())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: str, arg2: str):
        """public void java.awt.Component.firePropertyChange(java.lang.String,char,char)"""
        super(_Component, self).firePropertyChange(arg0, _char.valueOf(arg1), _char.valueOf(arg2))

    @overload
    def getBounds(self, arg0: 'Rectangle') -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.getBounds(java.awt.Rectangle)"""
        return 'Rectangle'._wrap(super(_Component, self).getBounds(arg0))

    @overload
    def openEffect(self, arg0: 'File', arg1: bool) -> 'particles.ParticleEffect':
        """public com.badlogic.gdx.graphics.g3d.particles.ParticleEffect com.badlogic.gdx.tools.flame.FlameMain.openEffect(java.io.File,boolean)"""
        return 'particles.ParticleEffect'._wrap(super(_FlameMain, self).openEffect(arg0, _boolean.valueOf(arg1)))

    @override
    @overload
    def remove(self, arg0: 'MenuComponent'):
        """public void java.awt.Frame.remove(java.awt.MenuComponent)"""
        super(_Frame, self).remove(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintStream', arg1: int):
        """public void java.awt.Container.list(java.io.PrintStream,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @override
    @overload
    def setLocation(self, arg0: 'Point'):
        """public void java.awt.Window.setLocation(java.awt.Point)"""
        super(_Window, self).setLocation(arg0)

    @override
    @overload
    def getFocusTraversalPolicy(self) -> 'FocusTraversalPolicy':
        """public java.awt.FocusTraversalPolicy java.awt.Container.getFocusTraversalPolicy()"""
        return 'FocusTraversalPolicy'._wrap(super(Container, self).getFocusTraversalPolicy())

    @override
    @overload
    def getParent(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getParent()"""
        return 'Container'._wrap(super(Component, self).getParent())

    @override
    @overload
    def getInputContext(self) -> 'InputContext':
        """public java.awt.im.InputContext java.awt.Window.getInputContext()"""
        return 'InputContext'._wrap(super(Window, self).getInputContext())

    @override
    @overload
    def getLayeredPane(self) -> 'JLayeredPane':
        """public javax.swing.JLayeredPane javax.swing.JFrame.getLayeredPane()"""
        return 'JLayeredPane'._wrap(super(JFrame, self).getLayeredPane())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,float,float)"""
        super(_Component, self).firePropertyChange(arg0, _float.valueOf(arg1), _float.valueOf(arg2))

    @override
    @overload
    def disable(self):
        """public void java.awt.Component.disable()"""
        super(Component, self).disable()

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object)"""
        super(_Container, self).add(arg0, arg1)

    @override
    @overload
    def dispose(self):
        """public void java.awt.Window.dispose()"""
        super(Window, self).dispose()

    @override
    @overload
    def setGlassPane(self, arg0: 'Component'):
        """public void javax.swing.JFrame.setGlassPane(java.awt.Component)"""
        super(_JFrame, self).setGlassPane(arg0)

    @override
    @overload
    def getHierarchyListeners(self) -> List['HierarchyListener']:
        """public synchronized java.awt.event.HierarchyListener[] java.awt.Component.getHierarchyListeners()"""
        return List['HierarchyListener']._wrap(super(Component, self).getHierarchyListeners())

    @override
    @overload
    def getLocale(self) -> 'Locale':
        """public java.util.Locale java.awt.Window.getLocale()"""
        return 'Locale'._wrap(super(Window, self).getLocale())

    @override
    @overload
    def nextFocus(self):
        """public void java.awt.Component.nextFocus()"""
        super(Component, self).nextFocus()

    @override
    @overload
    def isAlwaysOnTopSupported(self) -> bool:
        """public boolean java.awt.Window.isAlwaysOnTopSupported()"""
        return bool._wrap(super(Window, self).isAlwaysOnTopSupported())

    @override
    @overload
    def revalidate(self):
        """public void java.awt.Component.revalidate()"""
        super(Component, self).revalidate()

    @override
    @overload
    def getDefaultCloseOperation(self) -> int:
        """public int javax.swing.JFrame.getDefaultCloseOperation()"""
        return int._wrap(super(JFrame, self).getDefaultCloseOperation())

    @override
    @overload
    def getFocusableWindowState(self) -> bool:
        """public boolean java.awt.Window.getFocusableWindowState()"""
        return bool._wrap(super(Window, self).getFocusableWindowState())

    @override
    @overload
    def isDisplayable(self) -> bool:
        """public boolean java.awt.Component.isDisplayable()"""
        return bool._wrap(super(Component, self).isDisplayable())

    @staticmethod
    @overload
    def setDefaultLookAndFeelDecorated(arg0: bool):
        """public static void javax.swing.JFrame.setDefaultLookAndFeelDecorated(boolean)"""
        _JFrame.setDefaultLookAndFeelDecorated(_boolean.valueOf(arg0))

    @override
    @overload
    def getBounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.getBounds()"""
        return 'Rectangle'._wrap(super(Component, self).getBounds())

    @override
    @overload
    def removeMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.removeMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).removeMouseMotionListener(arg0)

    @override
    @overload
    def getDropTarget(self) -> 'DropTarget':
        """public synchronized java.awt.dnd.DropTarget java.awt.Component.getDropTarget()"""
        return 'DropTarget'._wrap(super(Component, self).getDropTarget())

    @override
    @overload
    def isFontSet(self) -> bool:
        """public boolean java.awt.Component.isFontSet()"""
        return bool._wrap(super(Component, self).isFontSet())

    @overload
    def mouseUp(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseUp(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseUp(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def setIgnoreRepaint(self, arg0: bool):
        """public void java.awt.Component.setIgnoreRepaint(boolean)"""
        super(_Component, self).setIgnoreRepaint(_boolean.valueOf(arg0))

    @override
    @overload
    def getPropertyChangeListeners(self) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners()"""
        return List['PropertyChangeListener']._wrap(super(Component, self).getPropertyChangeListeners())

    @override
    @overload
    def isBackgroundSet(self) -> bool:
        """public boolean java.awt.Component.isBackgroundSet()"""
        return bool._wrap(super(Component, self).isBackgroundSet())

    @override
    @overload
    def getLocation(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocation()"""
        return 'Point'._wrap(super(Component, self).getLocation())

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int._wrap(super(object, self).hashCode())

    @override
    @overload
    def location(self) -> 'Point':
        """public java.awt.Point java.awt.Component.location()"""
        return 'Point'._wrap(super(Component, self).location())

    @override
    @overload
    def getComponentOrientation(self) -> 'ComponentOrientation':
        """public java.awt.ComponentOrientation java.awt.Component.getComponentOrientation()"""
        return 'ComponentOrientation'._wrap(super(Component, self).getComponentOrientation())

    @override
    @overload
    def addHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.addHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).addHierarchyListener(arg0)

    @override
    @overload
    def setExtendedState(self, arg0: int):
        """public void java.awt.Frame.setExtendedState(int)"""
        super(_Frame, self).setExtendedState(_int.valueOf(arg0))

    @override
    @overload
    def setComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Component.setComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Component, self).setComponentOrientation(arg0)

    @override
    @overload
    def show(self, arg0: bool):
        """public void java.awt.Component.show(boolean)"""
        super(_Component, self).show(_boolean.valueOf(arg0))

    @override
    @overload
    def setAutoRequestFocus(self, arg0: bool):
        """public void java.awt.Window.setAutoRequestFocus(boolean)"""
        super(_Window, self).setAutoRequestFocus(_boolean.valueOf(arg0))

    @overload
    def locate(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.locate(int,int)"""
        return 'Component'._wrap(super(_Container, self).locate(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def keyDown(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyDown(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyDown(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def setBackground(self, arg0: 'Color'):
        """public void java.awt.Frame.setBackground(java.awt.Color)"""
        super(_Frame, self).setBackground(arg0)

    @override
    @overload
    def getLayout(self) -> 'LayoutManager':
        """public java.awt.LayoutManager java.awt.Container.getLayout()"""
        return 'LayoutManager'._wrap(super(Container, self).getLayout())

    @override
    @overload
    def preferredSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.preferredSize()"""
        return 'Dimension'._wrap(super(Container, self).preferredSize())

    @override
    @overload
    def reshape(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Window.reshape(int,int,int,int)"""
        super(_Window, self).reshape(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.repaint(int,int,int,int)"""
        super(_Component, self).repaint(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @overload
    def requestFocusInWindow(self, arg0: 'Cause') -> bool:
        """public boolean java.awt.Component.requestFocusInWindow(java.awt.event.FocusEvent$Cause)"""
        return bool._wrap(super(_Component, self).requestFocusInWindow(arg0))

    @override
    @overload
    def remove(self, arg0: int):
        """public void java.awt.Container.remove(int)"""
        super(_Container, self).remove(_int.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,long,long)"""
        super(_Component, self).firePropertyChange(arg0, _long.valueOf(arg1), _long.valueOf(arg2))

    @override
    @overload
    def getBaselineResizeBehavior(self) -> 'BaselineResizeBehavior.Component$BaselineResizeBehavior':
        """public java.awt.Component$BaselineResizeBehavior java.awt.Component.getBaselineResizeBehavior()"""
        return 'BaselineResizeBehavior.Component$BaselineResizeBehavior'._wrap(super(Component, self).getBaselineResizeBehavior())

    @override
    @overload
    def setLayout(self, arg0: 'LayoutManager'):
        """public void javax.swing.JFrame.setLayout(java.awt.LayoutManager)"""
        super(_JFrame, self).setLayout(arg0)

    @overload
    def keyUp(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyUp(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyUp(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def getToolkit(self) -> 'Toolkit':
        """public java.awt.Toolkit java.awt.Window.getToolkit()"""
        return 'Toolkit'._wrap(super(Window, self).getToolkit())

    @override
    @overload
    def getCursorType(self) -> int:
        """public int java.awt.Frame.getCursorType()"""
        return int._wrap(super(Frame, self).getCursorType())

    @override
    @overload
    def getFocusOwner(self) -> 'Component':
        """public java.awt.Component java.awt.Window.getFocusOwner()"""
        return 'Component'._wrap(super(Window, self).getFocusOwner())

    @staticmethod
    @overload
    def getWindows() -> List['Window']:
        """public static java.awt.Window[] java.awt.Window.getWindows()"""
        return List[Window]._wrap(_Window.getWindows())

    @override
    @overload
    def doLayout(self):
        """public void java.awt.Container.doLayout()"""
        super(Container, self).doLayout()

    @overload
    def getPointSpriteBatch(self) -> 'batches.PointSpriteParticleBatch':
        """public com.badlogic.gdx.graphics.g3d.particles.batches.PointSpriteParticleBatch com.badlogic.gdx.tools.flame.FlameMain.getPointSpriteBatch()"""
        return 'batches.PointSpriteParticleBatch'._wrap(super(FlameMain, self).getPointSpriteBatch())

    @override
    @overload
    def getBackground(self) -> 'Color':
        """public java.awt.Color java.awt.Window.getBackground()"""
        return 'Color'._wrap(super(Window, self).getBackground())

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int):
        """public void javax.swing.JFrame.repaint(long,int,int,int,int)"""
        super(_JFrame, self).repaint(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4))

    @override
    @overload
    def setTitle(self, arg0: str):
        """public void java.awt.Frame.setTitle(java.lang.String)"""
        super(_Frame, self).setTitle(arg0)

    @override
    @overload
    def getFocusCycleRootAncestor(self) -> 'Container':
        """public final java.awt.Container java.awt.Window.getFocusCycleRootAncestor()"""
        return 'Container'._wrap(super(Window, self).getFocusCycleRootAncestor())

    @overload
    def checkImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @override
    @overload
    def setAlwaysOnTop(self, arg0: bool):
        """public final void java.awt.Window.setAlwaysOnTop(boolean) throws java.lang.SecurityException"""
        super(_Window, self).setAlwaysOnTop(_boolean.valueOf(arg0))

    @override
    @overload
    def getFocusTraversalKeysEnabled(self) -> bool:
        """public boolean java.awt.Component.getFocusTraversalKeysEnabled()"""
        return bool._wrap(super(Component, self).getFocusTraversalKeysEnabled())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getHeight(self) -> int:
        """public int java.awt.Component.getHeight()"""
        return int._wrap(super(Component, self).getHeight())

    @override
    @overload
    def invalidate(self):
        """public void java.awt.Container.invalidate()"""
        super(Container, self).invalidate()

    @override
    @overload
    def createBufferStrategy(self, arg0: int, arg1: 'BufferCapabilities'):
        """public void java.awt.Window.createBufferStrategy(int,java.awt.BufferCapabilities) throws java.awt.AWTException"""
        super(_Window, self).createBufferStrategy(_int.valueOf(arg0), arg1)

    @overload
    def getComponent(self, arg0: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponent(int)"""
        return 'Component'._wrap(super(_Container, self).getComponent(_int.valueOf(arg0)))

    @override
    @overload
    def setResizable(self, arg0: bool):
        """public void java.awt.Frame.setResizable(boolean)"""
        super(_Frame, self).setResizable(_boolean.valueOf(arg0))

    @override
    @overload
    def setMaximizedBounds(self, arg0: 'Rectangle'):
        """public void java.awt.Frame.setMaximizedBounds(java.awt.Rectangle)"""
        super(_Frame, self).setMaximizedBounds(arg0)

    @overload
    def getListeners(self, arg0: 'Class') -> List['EventListener']:
        """public <T extends java.util.EventListener> T[] java.awt.Window.getListeners(java.lang.Class<T>)"""
        return List['EventListener']._wrap(super(_Window, self).getListeners(arg0))

    @override
    @overload
    def toBack(self):
        """public void java.awt.Window.toBack()"""
        super(Window, self).toBack()

    @override
    @overload
    def isFocused(self) -> bool:
        """public boolean java.awt.Window.isFocused()"""
        return bool._wrap(super(Window, self).isFocused())

    @override
    @overload
    def removePropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0)

    @override
    @overload
    def applyComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Container.applyComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Container, self).applyComponentOrientation(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintStream'):
        """public void java.awt.Component.list(java.io.PrintStream)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def removeMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.removeMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).removeMouseListener(arg0)

    @override
    @overload
    def getMostRecentFocusOwner(self) -> 'Component':
        """public java.awt.Component java.awt.Window.getMostRecentFocusOwner()"""
        return 'Component'._wrap(super(Window, self).getMostRecentFocusOwner())

    @override
    @overload
    def list(self, arg0: 'PrintWriter'):
        """public void java.awt.Component.list(java.io.PrintWriter)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def getKeyListeners(self) -> List['KeyListener']:
        """public synchronized java.awt.event.KeyListener[] java.awt.Component.getKeyListeners()"""
        return List['KeyListener']._wrap(super(Component, self).getKeyListeners())

    @overload
    def getAtlas(self, arg0: 'Texture') -> 'g2d.TextureAtlas':
        """public com.badlogic.gdx.graphics.g2d.TextureAtlas com.badlogic.gdx.tools.flame.FlameMain.getAtlas(com.badlogic.gdx.graphics.Texture)"""
        return 'g2d.TextureAtlas'._wrap(super(_FlameMain, self).getAtlas(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,double,double)"""
        super(_Component, self).firePropertyChange(arg0, _double.valueOf(arg1), _double.valueOf(arg2))

    @override
    @overload
    def list(self, arg0: 'PrintWriter', arg1: int):
        """public void java.awt.Container.list(java.io.PrintWriter,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @override
    @overload
    def createBufferStrategy(self, arg0: int):
        """public void java.awt.Window.createBufferStrategy(int)"""
        super(_Window, self).createBufferStrategy(_int.valueOf(arg0))

    @overload
    def checkImage(self, arg0: 'Image', arg1: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, arg1))

    @override
    @overload
    def removeFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.removeFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).removeFocusListener(arg0)

    @overload
    def mouseDown(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDown(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDown(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def restart(self):
        """public void com.badlogic.gdx.tools.flame.FlameMain.restart()"""
        super(FlameMain, self).restart()

    @override
    @overload
    def setState(self, arg0: int):
        """public synchronized void java.awt.Frame.setState(int)"""
        super(_Frame, self).setState(_int.valueOf(arg0))

    @override
    @overload
    def getMenuBar(self) -> 'MenuBar':
        """public java.awt.MenuBar java.awt.Frame.getMenuBar()"""
        return 'MenuBar'._wrap(super(Frame, self).getMenuBar())

    @staticmethod
    @overload
    def getFrames() -> List['Frame']:
        """public static java.awt.Frame[] java.awt.Frame.getFrames()"""
        return List[Frame]._wrap(_Frame.getFrames())

    @override
    @overload
    def setIconImages(self, arg0: 'List'):
        """public synchronized void java.awt.Window.setIconImages(java.util.List<? extends java.awt.Image>)"""
        super(_Window, self).setIconImages(arg0)

    @override
    @overload
    def getTreeLock(self) -> object:
        """public final java.lang.Object java.awt.Component.getTreeLock()"""
        return object._wrap(super(Component, self).getTreeLock())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def getFocusTraversalKeys(self, arg0: int) -> 'Set':
        """public java.util.Set<java.awt.AWTKeyStroke> java.awt.Window.getFocusTraversalKeys(int)"""
        return 'Set'._wrap(super(_Window, self).getFocusTraversalKeys(_int.valueOf(arg0)))

    @overload
    def contains(self, arg0: 'Point') -> bool:
        """public boolean java.awt.Component.contains(java.awt.Point)"""
        return bool._wrap(super(_Component, self).contains(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def setFocusCycleRoot(self, arg0: bool):
        """public final void java.awt.Window.setFocusCycleRoot(boolean)"""
        super(_Window, self).setFocusCycleRoot(_boolean.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,short,short)"""
        super(_Component, self).firePropertyChange(arg0, _short.valueOf(arg1), _short.valueOf(arg2))

    @override
    @overload
    def removeWindowListener(self, arg0: 'WindowListener'):
        """public synchronized void java.awt.Window.removeWindowListener(java.awt.event.WindowListener)"""
        super(_Window, self).removeWindowListener(arg0)

    @override
    @overload
    def dispatchEvent(self, arg0: 'AWTEvent'):
        """public final void java.awt.Component.dispatchEvent(java.awt.AWTEvent)"""
        super(_Component, self).dispatchEvent(arg0)

    @override
    @overload
    def removeContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.removeContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).removeContainerListener(arg0)

    @override
    @overload
    def getGraphicsConfiguration(self) -> 'GraphicsConfiguration':
        """public java.awt.GraphicsConfiguration java.awt.Component.getGraphicsConfiguration()"""
        return 'GraphicsConfiguration'._wrap(super(Component, self).getGraphicsConfiguration())

    @override
    @overload
    def getShape(self) -> 'Shape':
        """public java.awt.Shape java.awt.Window.getShape()"""
        return 'Shape'._wrap(super(Window, self).getShape())

    @override
    @overload
    def pack(self):
        """public void java.awt.Window.pack()"""
        super(Window, self).pack()

    @overload
    def getBillboardBatch(self) -> 'batches.BillboardParticleBatch':
        """public com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch com.badlogic.gdx.tools.flame.FlameMain.getBillboardBatch()"""
        return 'batches.BillboardParticleBatch'._wrap(super(FlameMain, self).getBillboardBatch())

    @override
    @overload
    def removeWindowFocusListener(self, arg0: 'WindowFocusListener'):
        """public synchronized void java.awt.Window.removeWindowFocusListener(java.awt.event.WindowFocusListener)"""
        super(_Window, self).removeWindowFocusListener(arg0)

    @overload
    def findComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(arg0))

    @override
    @overload
    def resize(self, arg0: int, arg1: int):
        """public void java.awt.Component.resize(int,int)"""
        super(_Component, self).resize(_int.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def imageUpdate(self, arg0: 'Image', arg1: int, arg2: int, arg3: int, arg4: int, arg5: int) -> bool:
        """public boolean java.awt.Component.imageUpdate(java.awt.Image,int,int,int,int,int)"""
        return bool._wrap(super(_Component, self).imageUpdate(arg0, _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4), _int.valueOf(arg5)))

    @override
    @overload
    def getGraphics(self) -> 'Graphics':
        """public java.awt.Graphics javax.swing.JFrame.getGraphics()"""
        return 'Graphics'._wrap(super(JFrame, self).getGraphics())

    @override
    @overload
    def transferFocusBackward(self):
        """public void java.awt.Component.transferFocusBackward()"""
        super(Component, self).transferFocusBackward()

    @override
    @overload
    def isOpaque(self) -> bool:
        """public boolean java.awt.Window.isOpaque()"""
        return bool._wrap(super(Window, self).isOpaque())

    @override
    @overload
    def getOwnedWindows(self) -> List['Window']:
        """public java.awt.Window[] java.awt.Window.getOwnedWindows()"""
        return List['Window']._wrap(super(Window, self).getOwnedWindows())

    @overload
    def getPropertyChangeListeners(self, arg0: str) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners(java.lang.String)"""
        return List['PropertyChangeListener']._wrap(super(_Component, self).getPropertyChangeListeners(arg0))

    @override
    @overload
    def remove(self, arg0: 'Component'):
        """public void javax.swing.JFrame.remove(java.awt.Component)"""
        super(_JFrame, self).remove(arg0)

    @override
    @overload
    def isLocationByPlatform(self) -> bool:
        """public boolean java.awt.Window.isLocationByPlatform()"""
        return bool._wrap(super(Window, self).isLocationByPlatform())

    @override
    @overload
    def addComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.addComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).addComponentListener(arg0)

    @override
    @overload
    def setCursor(self, arg0: 'Cursor'):
        """public void java.awt.Window.setCursor(java.awt.Cursor)"""
        super(_Window, self).setCursor(arg0)

    @override
    @overload
    def addNotify(self):
        """public void java.awt.Frame.addNotify()"""
        super(Frame, self).addNotify()

    @override
    @overload
    def getFont(self) -> 'Font':
        """public java.awt.Font java.awt.Component.getFont()"""
        return 'Font'._wrap(super(Component, self).getFont())

    @staticmethod
    @overload
    def isDefaultLookAndFeelDecorated() -> bool:
        """public static boolean javax.swing.JFrame.isDefaultLookAndFeelDecorated()"""
        return bool._wrap(_JFrame.isDefaultLookAndFeelDecorated())

    @overload
    def prepareImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @override
    @overload
    def setMaximumSize(self, arg0: 'Dimension'):
        """public void java.awt.Component.setMaximumSize(java.awt.Dimension)"""
        super(_Component, self).setMaximumSize(arg0)

    @override
    @overload
    def setForeground(self, arg0: 'Color'):
        """public void java.awt.Component.setForeground(java.awt.Color)"""
        super(_Component, self).setForeground(arg0)

    @overload
    def mouseDrag(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDrag(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDrag(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def setSize(self, arg0: 'Dimension'):
        """public void java.awt.Window.setSize(java.awt.Dimension)"""
        super(_Window, self).setSize(arg0)

    @overload
    def getControllerType(self) -> 'ControllerType':
        """public com.badlogic.gdx.tools.flame.FlameMain$ControllerType com.badlogic.gdx.tools.flame.FlameMain.getControllerType()"""
        return 'ControllerType'._wrap(super(FlameMain, self).getControllerType())

    @overload
    def addEmitter(self, arg0: 'ParticleController'):
        """public void com.badlogic.gdx.tools.flame.FlameMain.addEmitter(com.badlogic.gdx.graphics.g3d.particles.ParticleController)"""
        super(_FlameMain, self).addEmitter(arg0)

    @overload
    def createVolatileImage(self, arg0: int, arg1: int, arg2: 'ImageCapabilities') -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int,java.awt.ImageCapabilities) throws java.awt.AWTException"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1), arg2))

    @override
    @overload
    def bounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.bounds()"""
        return 'Rectangle'._wrap(super(Component, self).bounds())

    @override
    @overload
    def add(self, arg0: 'PopupMenu'):
        """public void java.awt.Component.add(java.awt.PopupMenu)"""
        super(_Component, self).add(arg0)

    @override
    @overload
    def isVisible(self) -> bool:
        """public boolean java.awt.Component.isVisible()"""
        return bool._wrap(super(Component, self).isVisible())

    @override
    @overload
    def setDropTarget(self, arg0: 'DropTarget'):
        """public synchronized void java.awt.Component.setDropTarget(java.awt.dnd.DropTarget)"""
        super(_Component, self).setDropTarget(arg0)

    @override
    @overload
    def isFocusableWindow(self) -> bool:
        """public final boolean java.awt.Window.isFocusableWindow()"""
        return bool._wrap(super(Window, self).isFocusableWindow())

    @override
    @overload
    def getLocationOnScreen(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocationOnScreen()"""
        return 'Point'._wrap(super(Component, self).getLocationOnScreen())

    @overload
    def getAtlasFilename(self) -> str:
        """public java.lang.String com.badlogic.gdx.tools.flame.FlameMain.getAtlasFilename()"""
        return str._wrap(super(FlameMain, self).getAtlasFilename())

    @overload
    def getComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def getParticleEffects(self, arg0: 'Array', arg1: 'Array') -> 'utils.Array':
        """public com.badlogic.gdx.utils.Array<com.badlogic.gdx.graphics.g3d.particles.ParticleEffect> com.badlogic.gdx.tools.flame.FlameMain.getParticleEffects(com.badlogic.gdx.utils.Array<com.badlogic.gdx.graphics.g3d.particles.ParticleController>,com.badlogic.gdx.utils.Array<com.badlogic.gdx.graphics.g3d.particles.ParticleEffect>)"""
        return 'utils.Array'._wrap(super(_FlameMain, self).getParticleEffects(arg0, arg1))

    @override
    @overload
    def isAlwaysOnTop(self) -> bool:
        """public final boolean java.awt.Window.isAlwaysOnTop()"""
        return bool._wrap(super(Window, self).isAlwaysOnTop())

    @staticmethod
    @overload
    def getOwnerlessWindows() -> List['Window']:
        """public static java.awt.Window[] java.awt.Window.getOwnerlessWindows()"""
        return List[Window]._wrap(_Window.getOwnerlessWindows())

    @override
    @overload
    def getIconImage(self) -> 'Image':
        """public java.awt.Image java.awt.Frame.getIconImage()"""
        return 'Image'._wrap(super(Frame, self).getIconImage())

    @override
    @overload
    def isMaximumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMaximumSizeSet()"""
        return bool._wrap(super(Component, self).isMaximumSizeSet())

    @override
    @overload
    def isFocusable(self) -> bool:
        """public boolean java.awt.Component.isFocusable()"""
        return bool._wrap(super(Component, self).isFocusable())

    @override
    @overload
    def requestFocusInWindow(self) -> bool:
        """public boolean java.awt.Component.requestFocusInWindow()"""
        return bool._wrap(super(Component, self).requestFocusInWindow())

    @overload
    def setVisible(self, arg0: str, arg1: bool):
        """public void com.badlogic.gdx.tools.flame.FlameMain.setVisible(java.lang.String,boolean)"""
        super(_FlameMain, self).setVisible(arg0, _boolean.valueOf(arg1))

    @override
    @overload
    def isFocusTraversalPolicyProvider(self) -> bool:
        """public final boolean java.awt.Container.isFocusTraversalPolicyProvider()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicyProvider())

    @override
    @overload
    def getMouseListeners(self) -> List['MouseListener']:
        """public synchronized java.awt.event.MouseListener[] java.awt.Component.getMouseListeners()"""
        return List['MouseListener']._wrap(super(Component, self).getMouseListeners())

    @override
    @overload
    def setFont(self, arg0: 'Font'):
        """public void java.awt.Container.setFont(java.awt.Font)"""
        super(_Container, self).setFont(arg0)

    @override
    @overload
    def transferFocusUpCycle(self):
        """public void java.awt.Component.transferFocusUpCycle()"""
        super(Component, self).transferFocusUpCycle()

    @override
    @overload
    def removeKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.removeKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).removeKeyListener(arg0)

    @override
    @overload
    def getMouseMotionListeners(self) -> List['MouseMotionListener']:
        """public synchronized java.awt.event.MouseMotionListener[] java.awt.Component.getMouseMotionListeners()"""
        return List['MouseMotionListener']._wrap(super(Component, self).getMouseMotionListeners())

    @override
    @overload
    def setIconImage(self, arg0: 'Image'):
        """public void javax.swing.JFrame.setIconImage(java.awt.Image)"""
        super(_JFrame, self).setIconImage(arg0)

    @override
    @overload
    def addContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.addContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).addContainerListener(arg0)

    @override
    @overload
    def isFocusTraversable(self) -> bool:
        """public boolean java.awt.Component.isFocusTraversable()"""
        return bool._wrap(super(Component, self).isFocusTraversable())

    @overload
    def mouseExit(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseExit(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseExit(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def load(self, arg0: str, arg1: 'Class', arg2: 'AssetLoader', arg3: 'AssetLoaderParameters') -> object:
        """public <T> T com.badlogic.gdx.tools.flame.FlameMain.load(java.lang.String,java.lang.Class<T>,com.badlogic.gdx.assets.loaders.AssetLoader,com.badlogic.gdx.assets.AssetLoaderParameters<T>)"""
        return object._wrap(super(_FlameMain, self).load(arg0, arg1, arg2, arg3))

    @override
    @overload
    def setMixingCutoutShape(self, arg0: 'Shape'):
        """public void java.awt.Component.setMixingCutoutShape(java.awt.Shape)"""
        super(_Component, self).setMixingCutoutShape(arg0)

    @override
    @overload
    def toFront(self):
        """public void java.awt.Window.toFront()"""
        super(Window, self).toFront()

    @override
    @overload
    def addWindowStateListener(self, arg0: 'WindowStateListener'):
        """public synchronized void java.awt.Window.addWindowStateListener(java.awt.event.WindowStateListener)"""
        super(_Window, self).addWindowStateListener(arg0)

    @overload
    def getSize(self, arg0: 'Dimension') -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.getSize(java.awt.Dimension)"""
        return 'Dimension'._wrap(super(_Component, self).getSize(arg0))

    @override
    @overload
    def requestFocus(self, arg0: 'Cause'):
        """public void java.awt.Component.requestFocus(java.awt.event.FocusEvent$Cause)"""
        super(_Component, self).requestFocus(arg0)

    @overload
    def createImage(self, arg0: int, arg1: int) -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(int,int)"""
        return 'Image'._wrap(super(_Component, self).createImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def setUndecorated(self, arg0: bool):
        """public void java.awt.Frame.setUndecorated(boolean)"""
        super(_Frame, self).setUndecorated(_boolean.valueOf(arg0))

    @override
    @overload
    def getFocusListeners(self) -> List['FocusListener']:
        """public synchronized java.awt.event.FocusListener[] java.awt.Component.getFocusListeners()"""
        return List['FocusListener']._wrap(super(Component, self).getFocusListeners())

    @override
    @overload
    def setJMenuBar(self, arg0: 'JMenuBar'):
        """public void javax.swing.JFrame.setJMenuBar(javax.swing.JMenuBar)"""
        super(_JFrame, self).setJMenuBar(arg0)

    @overload
    def add(self, arg0: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0))

    @override
    @overload
    def getMouseWheelListeners(self) -> List['MouseWheelListener']:
        """public synchronized java.awt.event.MouseWheelListener[] java.awt.Component.getMouseWheelListeners()"""
        return List['MouseWheelListener']._wrap(super(Component, self).getMouseWheelListeners())

    @overload
    def contains(self, arg0: int, arg1: int) -> bool:
        """public boolean java.awt.Component.contains(int,int)"""
        return bool._wrap(super(_Component, self).contains(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.removeInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).removeInputMethodListener(arg0)

    @overload
    def isUsingDefaultTexture(self) -> bool:
        """public boolean com.badlogic.gdx.tools.flame.FlameMain.isUsingDefaultTexture()"""
        return bool._wrap(super(FlameMain, self).isUsingDefaultTexture())

    @override
    @overload
    def setFocusable(self, arg0: bool):
        """public void java.awt.Component.setFocusable(boolean)"""
        super(_Component, self).setFocusable(_boolean.valueOf(arg0))

    @override
    @overload
    def setBounds(self, arg0: 'Rectangle'):
        """public void java.awt.Window.setBounds(java.awt.Rectangle)"""
        super(_Window, self).setBounds(arg0)

    @override
    @overload
    def getJMenuBar(self) -> 'JMenuBar':
        """public javax.swing.JMenuBar javax.swing.JFrame.getJMenuBar()"""
        return 'JMenuBar'._wrap(super(JFrame, self).getJMenuBar())

    @override
    @overload
    def paintComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.paintComponents(java.awt.Graphics)"""
        super(_Container, self).paintComponents(arg0)

    @override
    @overload
    def hide(self):
        """public void java.awt.Window.hide()"""
        super(Window, self).hide()

    @override
    @overload
    def applyResourceBundle(self, arg0: str):
        """public void java.awt.Window.applyResourceBundle(java.lang.String)"""
        super(_Window, self).applyResourceBundle(arg0)

    @override
    @overload
    def addFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.addFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).addFocusListener(arg0)

    @overload
    def prepareImage(self, arg0: 'Image', arg1: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, arg1))

    @override
    @overload
    def isFocusCycleRoot(self) -> bool:
        """public final boolean java.awt.Window.isFocusCycleRoot()"""
        return bool._wrap(super(Window, self).isFocusCycleRoot())

    @override
    @overload
    def addKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.addKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).addKeyListener(arg0)

    @override
    @overload
    def getBufferStrategy(self) -> 'BufferStrategy':
        """public java.awt.image.BufferStrategy java.awt.Window.getBufferStrategy()"""
        return 'BufferStrategy'._wrap(super(Window, self).getBufferStrategy())

    @override
    @overload
    def isUndecorated(self) -> bool:
        """public boolean java.awt.Frame.isUndecorated()"""
        return bool._wrap(super(Frame, self).isUndecorated())

    @override
    @overload
    def resize(self, arg0: 'Dimension'):
        """public void java.awt.Component.resize(java.awt.Dimension)"""
        super(_Component, self).resize(arg0)

    @override
    @overload
    def setComponentZOrder(self, arg0: 'Component', arg1: int):
        """public void java.awt.Container.setComponentZOrder(java.awt.Component,int)"""
        super(_Container, self).setComponentZOrder(arg0, _int.valueOf(arg1))

    @override
    @overload
    def list(self):
        """public void java.awt.Component.list()"""
        super(Component, self).list()

    @overload
    def add(self, arg0: str, arg1: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.lang.String,java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, arg1))

    @overload
    def showFileSaveDialog(self) -> 'File':
        """public java.io.File com.badlogic.gdx.tools.flame.FlameMain.showFileSaveDialog()"""
        return 'File'._wrap(super(FlameMain, self).showFileSaveDialog())

    @override
    @overload
    def setShape(self, arg0: 'Shape'):
        """public void java.awt.Frame.setShape(java.awt.Shape)"""
        super(_Frame, self).setShape(arg0)

    @override
    @overload
    def hasFocus(self) -> bool:
        """public boolean java.awt.Component.hasFocus()"""
        return bool._wrap(super(Component, self).hasFocus())

    @overload
    def setAtlas(self, arg0: 'TextureAtlas'):
        """public void com.badlogic.gdx.tools.flame.FlameMain.setAtlas(com.badlogic.gdx.graphics.g2d.TextureAtlas)"""
        super(_FlameMain, self).setAtlas(arg0)

    @override
    @overload
    def applyResourceBundle(self, arg0: 'ResourceBundle'):
        """public void java.awt.Window.applyResourceBundle(java.util.ResourceBundle)"""
        super(_Window, self).applyResourceBundle(arg0)

    @override
    @overload
    def setEnabled(self, arg0: bool):
        """public void java.awt.Component.setEnabled(boolean)"""
        super(_Component, self).setEnabled(_boolean.valueOf(arg0))

    @overload
    def createVolatileImage(self, arg0: int, arg1: int) -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int)"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.removeHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).removeHierarchyListener(arg0)

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.awt.Component.toString()"""
        return str._wrap(super(Component, self).toString())

    @override
    @overload
    def addMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.addMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).addMouseListener(arg0)

    @override
    @overload
    def getTransferHandler(self) -> 'TransferHandler':
        """public javax.swing.TransferHandler javax.swing.JFrame.getTransferHandler()"""
        return 'TransferHandler'._wrap(super(JFrame, self).getTransferHandler())

    @override
    @overload
    def isFocusOwner(self) -> bool:
        """public boolean java.awt.Component.isFocusOwner()"""
        return bool._wrap(super(Component, self).isFocusOwner())

    @override
    @overload
    def getWindowFocusListeners(self) -> List['WindowFocusListener']:
        """public synchronized java.awt.event.WindowFocusListener[] java.awt.Window.getWindowFocusListeners()"""
        return List['WindowFocusListener']._wrap(super(Window, self).getWindowFocusListeners())

    @overload
    def __init__(self, ):
        """public com.badlogic.gdx.tools.flame.FlameMain()"""
        val = _FlameMain()
        self.__wrapper = val

    @override
    @overload
    def enable(self):
        """public void java.awt.Component.enable()"""
        super(Component, self).enable()

    @overload
    def findComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def requestFocus(self):
        """public void java.awt.Component.requestFocus()"""
        super(Component, self).requestFocus()

    @override
    @overload
    def setModalExclusionType(self, arg0: 'ModalExclusionType'):
        """public void java.awt.Window.setModalExclusionType(java.awt.Dialog$ModalExclusionType)"""
        super(_Window, self).setModalExclusionType(arg0)

    @override
    @overload
    def getForeground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getForeground()"""
        return 'Color'._wrap(super(Component, self).getForeground())

    @override
    @overload
    def isAutoRequestFocus(self) -> bool:
        """public boolean java.awt.Window.isAutoRequestFocus()"""
        return bool._wrap(super(Window, self).isAutoRequestFocus())

    @override
    @overload
    def addMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.addMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).addMouseWheelListener(arg0)

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def addWindowListener(self, arg0: 'WindowListener'):
        """public synchronized void java.awt.Window.addWindowListener(java.awt.event.WindowListener)"""
        super(_Window, self).addWindowListener(arg0)

    @overload
    def getModelInstanceParticleBatch(self) -> 'batches.ModelInstanceParticleBatch':
        """public com.badlogic.gdx.graphics.g3d.particles.batches.ModelInstanceParticleBatch com.badlogic.gdx.tools.flame.FlameMain.getModelInstanceParticleBatch()"""
        return 'batches.ModelInstanceParticleBatch'._wrap(super(FlameMain, self).getModelInstanceParticleBatch())

    @override
    @overload
    def setLocationByPlatform(self, arg0: bool):
        """public void java.awt.Window.setLocationByPlatform(boolean)"""
        super(_Window, self).setLocationByPlatform(_boolean.valueOf(arg0))

    @override
    @overload
    def addWindowFocusListener(self, arg0: 'WindowFocusListener'):
        """public synchronized void java.awt.Window.addWindowFocusListener(java.awt.event.WindowFocusListener)"""
        super(_Window, self).addWindowFocusListener(arg0)

    @overload
    def action(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.action(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).action(arg0, arg1))

    @staticmethod
    @overload
    def main(arg0: 'String'):
        """public static void com.badlogic.gdx.tools.flame.FlameMain.main(java.lang.String[])"""
        _FlameMain.main(arg0)

    @override
    @overload
    def isLightweight(self) -> bool:
        """public boolean java.awt.Component.isLightweight()"""
        return bool._wrap(super(Component, self).isLightweight())

    @override
    @overload
    def setContentPane(self, arg0: 'Container'):
        """public void javax.swing.JFrame.setContentPane(java.awt.Container)"""
        super(_JFrame, self).setContentPane(arg0)

    @override
    @overload
    def setFocusTraversalKeysEnabled(self, arg0: bool):
        """public void java.awt.Component.setFocusTraversalKeysEnabled(boolean)"""
        super(_Component, self).setFocusTraversalKeysEnabled(_boolean.valueOf(arg0))

    @overload
    def showFileLoadDialog(self) -> 'File':
        """public java.io.File com.badlogic.gdx.tools.flame.FlameMain.showFileLoadDialog()"""
        return 'File'._wrap(super(FlameMain, self).showFileLoadDialog())

    @override
    @overload
    def update(self, arg0: 'Graphics'):
        """public void javax.swing.JFrame.update(java.awt.Graphics)"""
        super(_JFrame, self).update(arg0)

    @override
    @overload
    def setLayeredPane(self, arg0: 'JLayeredPane'):
        """public void javax.swing.JFrame.setLayeredPane(javax.swing.JLayeredPane)"""
        super(_JFrame, self).setLayeredPane(arg0)

    @override
    @overload
    def getAlignmentX(self) -> float:
        """public float java.awt.Container.getAlignmentX()"""
        return float._wrap(super(Container, self).getAlignmentX())

    @override
    @overload
    def getModalExclusionType(self) -> 'ModalExclusionType.Dialog$ModalExclusionType':
        """public java.awt.Dialog$ModalExclusionType java.awt.Window.getModalExclusionType()"""
        return 'ModalExclusionType.Dialog$ModalExclusionType'._wrap(super(Window, self).getModalExclusionType())

    @override
    @overload
    def insets(self) -> 'Insets':
        """public java.awt.Insets java.awt.Container.insets()"""
        return 'Insets'._wrap(super(Container, self).insets())

    @override
    @overload
    def setVisible(self, arg0: bool):
        """public void java.awt.Window.setVisible(boolean)"""
        super(_Window, self).setVisible(_boolean.valueOf(arg0))

    @override
    @overload
    def getOpacity(self) -> float:
        """public float java.awt.Window.getOpacity()"""
        return float._wrap(super(Window, self).getOpacity())

    @override
    @overload
    def setFocusTraversalPolicy(self, arg0: 'FocusTraversalPolicy'):
        """public void java.awt.Container.setFocusTraversalPolicy(java.awt.FocusTraversalPolicy)"""
        super(_Container, self).setFocusTraversalPolicy(arg0)

    @override
    @overload
    def enable(self, arg0: bool):
        """public void java.awt.Component.enable(boolean)"""
        super(_Component, self).enable(_boolean.valueOf(arg0))

    @override
    @overload
    def setSize(self, arg0: int, arg1: int):
        """public void java.awt.Window.setSize(int,int)"""
        super(_Window, self).setSize(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def printAll(self, arg0: 'Graphics'):
        """public void java.awt.Component.printAll(java.awt.Graphics)"""
        super(_Component, self).printAll(arg0)

    @override
    @overload
    def setCursor(self, arg0: int):
        """public void java.awt.Frame.setCursor(int)"""
        super(_Frame, self).setCursor(_int.valueOf(arg0))

    @overload
    def getAtlas(self) -> 'g2d.TextureAtlas':
        """public com.badlogic.gdx.graphics.g2d.TextureAtlas com.badlogic.gdx.tools.flame.FlameMain.getAtlas()"""
        return 'g2d.TextureAtlas'._wrap(super(FlameMain, self).getAtlas())

    @override
    @overload
    def getWarningString(self) -> str:
        """public final java.lang.String java.awt.Window.getWarningString()"""
        return str._wrap(super(Window, self).getWarningString())

    @override
    @overload
    def setOpacity(self, arg0: float):
        """public void java.awt.Frame.setOpacity(float)"""
        super(_Frame, self).setOpacity(_float.valueOf(arg0))

    @override
    @overload
    def getInsets(self) -> 'Insets':
        """public java.awt.Insets java.awt.Container.getInsets()"""
        return 'Insets'._wrap(super(Container, self).getInsets())

    @override
    @overload
    def setLocation(self, arg0: int, arg1: int):
        """public void java.awt.Window.setLocation(int,int)"""
        super(_Window, self).setLocation(_int.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def getComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(arg0))

    @override
    @overload
    def size(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.size()"""
        return 'Dimension'._wrap(super(Component, self).size())

    @overload
    def mouseMove(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseMove(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseMove(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def lostFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.lostFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).lostFocus(arg0, arg1))

    @override
    @overload
    def getMaximizedBounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Frame.getMaximizedBounds()"""
        return 'Rectangle'._wrap(super(Frame, self).getMaximizedBounds())

    @override
    @overload
    def isMinimumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMinimumSizeSet()"""
        return bool._wrap(super(Component, self).isMinimumSizeSet())

    @override
    @overload
    def isForegroundSet(self) -> bool:
        """public boolean java.awt.Component.isForegroundSet()"""
        return bool._wrap(super(Component, self).isForegroundSet())

    @override
    @overload
    def getWindowListeners(self) -> List['WindowListener']:
        """public synchronized java.awt.event.WindowListener[] java.awt.Window.getWindowListeners()"""
        return List['WindowListener']._wrap(super(Window, self).getWindowListeners())

    @overload
    def getMousePosition(self, arg0: bool) -> 'Point':
        """public java.awt.Point java.awt.Container.getMousePosition(boolean) throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(_Container, self).getMousePosition(_boolean.valueOf(arg0)))

    @override
    @overload
    def show(self):
        """public void java.awt.Window.show()"""
        super(Window, self).show()

    @override
    @overload
    def getHierarchyBoundsListeners(self) -> List['HierarchyBoundsListener']:
        """public synchronized java.awt.event.HierarchyBoundsListener[] java.awt.Component.getHierarchyBoundsListeners()"""
        return List['HierarchyBoundsListener']._wrap(super(Component, self).getHierarchyBoundsListeners())

    @overload
    def removeEmitter(self, arg0: int):
        """public void com.badlogic.gdx.tools.flame.FlameMain.removeEmitter(int)"""
        super(_FlameMain, self).removeEmitter(_int.valueOf(arg0))

    @override
    @overload
    def minimumSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.minimumSize()"""
        return 'Dimension'._wrap(super(Container, self).minimumSize())

    @override
    @overload
    def error(self, arg0: 'AssetDescriptor', arg1: 'Throwable'):
        """public void com.badlogic.gdx.tools.flame.FlameMain.error(com.badlogic.gdx.assets.AssetDescriptor,java.lang.Throwable)"""
        super(_FlameMain, self).error(arg0, arg1)

    @overload
    def handleEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.handleEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).handleEvent(arg0))

    @override
    @overload
    def getExtendedState(self) -> int:
        """public int java.awt.Frame.getExtendedState()"""
        return int._wrap(super(Frame, self).getExtendedState())

    @override
    @overload
    def isValidateRoot(self) -> bool:
        """public boolean java.awt.Window.isValidateRoot()"""
        return bool._wrap(super(Window, self).isValidateRoot())

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def getLocation(self, arg0: 'Point') -> 'Point':
        """public java.awt.Point java.awt.Component.getLocation(java.awt.Point)"""
        return 'Point'._wrap(super(_Component, self).getLocation(arg0))

    @override
    @overload
    def getComponentListeners(self) -> List['ComponentListener']:
        """public synchronized java.awt.event.ComponentListener[] java.awt.Component.getComponentListeners()"""
        return List['ComponentListener']._wrap(super(Component, self).getComponentListeners())

    @override
    @overload
    def deliverEvent(self, arg0: 'Event'):
        """public void java.awt.Container.deliverEvent(java.awt.Event)"""
        super(_Container, self).deliverEvent(arg0)

    @override
    @overload
    def getMinimumSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.getMinimumSize()"""
        return 'Dimension'._wrap(super(Container, self).getMinimumSize())

    @override
    @overload
    def addHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.addHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).addHierarchyBoundsListener(arg0)

    @override
    @overload
    def isResizable(self) -> bool:
        """public boolean java.awt.Frame.isResizable()"""
        return bool._wrap(super(Frame, self).isResizable())

    @override
    @overload
    def getY(self) -> int:
        """public int java.awt.Component.getY()"""
        return int._wrap(super(Component, self).getY())

    @override
    @overload
    def getOwner(self) -> 'Window':
        """public java.awt.Window java.awt.Window.getOwner()"""
        return 'Window'._wrap(super(Window, self).getOwner())

    @overload
    def add(self, arg0: 'Component', arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component,int)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def repaint(self):
        """public void java.awt.Component.repaint()"""
        super(Component, self).repaint()

    @overload
    def gotFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.gotFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).gotFocus(arg0, arg1))

    @overload
    def postEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Window.postEvent(java.awt.Event)"""
        return bool._wrap(super(_Window, self).postEvent(arg0))

    @override
    @overload
    def printComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.printComponents(java.awt.Graphics)"""
        super(_Container, self).printComponents(arg0)

    @override
    @overload
    def getColorModel(self) -> 'ColorModel':
        """public java.awt.image.ColorModel java.awt.Component.getColorModel()"""
        return 'ColorModel'._wrap(super(Component, self).getColorModel())

    @override
    @overload
    def setFocusTraversalPolicyProvider(self, arg0: bool):
        """public final void java.awt.Container.setFocusTraversalPolicyProvider(boolean)"""
        super(_Container, self).setFocusTraversalPolicyProvider(_boolean.valueOf(arg0))

    @overload
    def getComponentZOrder(self, arg0: 'Component') -> int:
        """public int java.awt.Container.getComponentZOrder(java.awt.Component)"""
        return int._wrap(super(_Container, self).getComponentZOrder(arg0))

    @overload
    def areFocusTraversalKeysSet(self, arg0: int) -> bool:
        """public boolean java.awt.Container.areFocusTraversalKeysSet(int)"""
        return bool._wrap(super(_Container, self).areFocusTraversalKeysSet(_int.valueOf(arg0)))

    @override
    @overload
    def getSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.getSize()"""
        return 'Dimension'._wrap(super(Component, self).getSize())

    @override
    @overload
    def setName(self, arg0: str):
        """public void java.awt.Component.setName(java.lang.String)"""
        super(_Component, self).setName(arg0)

    @overload
    def mouseEnter(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseEnter(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseEnter(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def setMinimumSize(self, arg0: 'Dimension'):
        """public void java.awt.Window.setMinimumSize(java.awt.Dimension)"""
        super(_Window, self).setMinimumSize(arg0)

    @override
    @overload
    def isCursorSet(self) -> bool:
        """public boolean java.awt.Component.isCursorSet()"""
        return bool._wrap(super(Component, self).isCursorSet())

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object, arg2: int):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object,int)"""
        super(_Container, self).add(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def paint(self, arg0: 'Graphics'):
        """public void java.awt.Window.paint(java.awt.Graphics)"""
        super(_Window, self).paint(arg0)

    @override
    @overload
    def isFocusTraversalPolicySet(self) -> bool:
        """public boolean java.awt.Container.isFocusTraversalPolicySet()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicySet())

    @override
    @overload
    def isDoubleBuffered(self) -> bool:
        """public boolean java.awt.Component.isDoubleBuffered()"""
        return bool._wrap(super(Component, self).isDoubleBuffered())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool._wrap(super(_object, self).equals(arg0))

    @overload
    def getBaseline(self, arg0: int, arg1: int) -> int:
        """public int java.awt.Component.getBaseline(int,int)"""
        return int._wrap(super(_Component, self).getBaseline(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def getTexture(self) -> 'graphics.Texture':
        """public com.badlogic.gdx.graphics.Texture com.badlogic.gdx.tools.flame.FlameMain.getTexture()"""
        return 'graphics.Texture'._wrap(super(FlameMain, self).getTexture())

    @override
    @overload
    def isEnabled(self) -> bool:
        """public boolean java.awt.Component.isEnabled()"""
        return bool._wrap(super(Component, self).isEnabled())

    @override
    @overload
    def move(self, arg0: int, arg1: int):
        """public void java.awt.Component.move(int,int)"""
        super(_Component, self).move(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getName(self) -> str:
        """public java.lang.String java.awt.Component.getName()"""
        return str._wrap(super(Component, self).getName())

    @override
    @overload
    def getX(self) -> int:
        """public int java.awt.Component.getX()"""
        return int._wrap(super(Component, self).getX())

    @override
    @overload
    def addMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.addMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).addMouseMotionListener(arg0)

    @override
    @overload
    def addPropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Window.addPropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Window, self).addPropertyChangeListener(arg0)

    @override
    @overload
    def getIgnoreRepaint(self) -> bool:
        """public boolean java.awt.Component.getIgnoreRepaint()"""
        return bool._wrap(super(Component, self).getIgnoreRepaint())

    @overload
    def isFocusCycleRoot(self, arg0: 'Container') -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot(java.awt.Container)"""
        return bool._wrap(super(_Container, self).isFocusCycleRoot(arg0))

    @override
    @overload
    def setLocale(self, arg0: 'Locale'):
        """public void java.awt.Component.setLocale(java.util.Locale)"""
        super(_Component, self).setLocale(arg0)

    @override
    @overload
    def paintAll(self, arg0: 'Graphics'):
        """public void java.awt.Component.paintAll(java.awt.Graphics)"""
        super(_Component, self).paintAll(arg0)

    @override
    @overload
    def getContentPane(self) -> 'Container':
        """public java.awt.Container javax.swing.JFrame.getContentPane()"""
        return 'Container'._wrap(super(JFrame, self).getContentPane())

    @override
    @overload
    def getState(self) -> int:
        """public synchronized int java.awt.Frame.getState()"""
        return int._wrap(super(Frame, self).getState())

    @override
    @overload
    def setPreferredSize(self, arg0: 'Dimension'):
        """public void java.awt.Component.setPreferredSize(java.awt.Dimension)"""
        super(_Component, self).setPreferredSize(arg0)

    @override
    @overload
    def isPreferredSizeSet(self) -> bool:
        """public boolean java.awt.Component.isPreferredSizeSet()"""
        return bool._wrap(super(Component, self).isPreferredSizeSet())

    @override
    @overload
    def addInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.addInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).addInputMethodListener(arg0)

    @override
    @overload
    def removeMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.removeMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).removeMouseWheelListener(arg0)

    @override
    @overload
    def print(self, arg0: 'Graphics'):
        """public void java.awt.Container.print(java.awt.Graphics)"""
        super(_Container, self).print(arg0)

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,byte,byte)"""
        super(_Component, self).firePropertyChange(arg0, _byte.valueOf(arg1), _byte.valueOf(arg2))

    @override
    @overload
    def transferFocusDownCycle(self):
        """public void java.awt.Container.transferFocusDownCycle()"""
        super(Container, self).transferFocusDownCycle()

    @override
    @overload
    def setBounds(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Window.setBounds(int,int,int,int)"""
        super(_Window, self).setBounds(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def removeWindowStateListener(self, arg0: 'WindowStateListener'):
        """public synchronized void java.awt.Window.removeWindowStateListener(java.awt.event.WindowStateListener)"""
        super(_Window, self).removeWindowStateListener(arg0)

    @override
    @overload
    def getAccessibleContext(self) -> 'AccessibleContext':
        """public javax.accessibility.AccessibleContext javax.swing.JFrame.getAccessibleContext()"""
        return 'AccessibleContext'._wrap(super(JFrame, self).getAccessibleContext())

    @override
    @overload
    def setType(self, arg0: 'Type'):
        """public void java.awt.Window.setType(java.awt.Window$Type)"""
        super(_Window, self).setType(arg0)

    @override
    @overload
    def getGlassPane(self) -> 'Component':
        """public java.awt.Component javax.swing.JFrame.getGlassPane()"""
        return 'Component'._wrap(super(JFrame, self).getGlassPane())

    @override
    @overload
    def setFocusableWindowState(self, arg0: bool):
        """public void java.awt.Window.setFocusableWindowState(boolean)"""
        super(_Window, self).setFocusableWindowState(_boolean.valueOf(arg0))

    @override
    @overload
    def repaint(self, arg0: int):
        """public void java.awt.Component.repaint(long)"""
        super(_Component, self).repaint(_long.valueOf(arg0))

    @override
    @overload
    def removeHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.removeHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).removeHierarchyBoundsListener(arg0)

    @override
    @overload
    def getMousePosition(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getMousePosition() throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(Component, self).getMousePosition())

    @override
    @overload
    def getType(self) -> 'Type.Window$Type':
        """public java.awt.Window$Type java.awt.Window.getType()"""
        return 'Type.Window$Type'._wrap(super(Window, self).getType())

    @override
    @overload
    def getComponentCount(self) -> int:
        """public int java.awt.Container.getComponentCount()"""
        return int._wrap(super(Container, self).getComponentCount())

    @override
    @overload
    def getPreferredSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.getPreferredSize()"""
        return 'Dimension'._wrap(super(Container, self).getPreferredSize())

    @overload
    def getRenderer(self) -> 'AppRenderer':
        """public com.badlogic.gdx.tools.flame.FlameMain$AppRenderer com.badlogic.gdx.tools.flame.FlameMain.getRenderer()"""
        return 'AppRenderer'._wrap(super(FlameMain, self).getRenderer())

    @override
    @overload
    def getInputMethodRequests(self) -> 'InputMethodRequests':
        """public java.awt.im.InputMethodRequests java.awt.Component.getInputMethodRequests()"""
        return 'InputMethodRequests'._wrap(super(Component, self).getInputMethodRequests())

    @override
    @overload
    def getRootPane(self) -> 'JRootPane':
        """public javax.swing.JRootPane javax.swing.JFrame.getRootPane()"""
        return 'JRootPane'._wrap(super(JFrame, self).getRootPane())

    @override
    @overload
    def getWindowStateListeners(self) -> List['WindowStateListener']:
        """public synchronized java.awt.event.WindowStateListener[] java.awt.Window.getWindowStateListeners()"""
        return List['WindowStateListener']._wrap(super(Window, self).getWindowStateListeners())

    @override
    @overload
    def isActive(self) -> bool:
        """public boolean java.awt.Window.isActive()"""
        return bool._wrap(super(Window, self).isActive())

    @overload
    def getFontMetrics(self, arg0: 'Font') -> 'FontMetrics':
        """public java.awt.FontMetrics java.awt.Component.getFontMetrics(java.awt.Font)"""
        return 'FontMetrics'._wrap(super(_Component, self).getFontMetrics(arg0))

    @override
    @overload
    def setTransferHandler(self, arg0: 'TransferHandler'):
        """public void javax.swing.JFrame.setTransferHandler(javax.swing.TransferHandler)"""
        super(_JFrame, self).setTransferHandler(arg0)

    @overload
    def inside(self, arg0: int, arg1: int) -> bool:
        """public boolean java.awt.Component.inside(int,int)"""
        return bool._wrap(super(_Component, self).inside(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def setDefaultCloseOperation(self, arg0: int):
        """public void javax.swing.JFrame.setDefaultCloseOperation(int)"""
        super(_JFrame, self).setDefaultCloseOperation(_int.valueOf(arg0))

    @overload
    def setEnabled(self, arg0: int, arg1: bool):
        """public void com.badlogic.gdx.tools.flame.FlameMain.setEnabled(int,boolean)"""
        super(_FlameMain, self).setEnabled(_int.valueOf(arg0), _boolean.valueOf(arg1))

    @override
    @overload
    def enableInputMethods(self, arg0: bool):
        """public void java.awt.Component.enableInputMethods(boolean)"""
        super(_Component, self).enableInputMethods(_boolean.valueOf(arg0))

    @override
    @overload
    def layout(self):
        """public void java.awt.Container.layout()"""
        super(Container, self).layout()

    @override
    @overload
    def getInputMethodListeners(self) -> List['InputMethodListener']:
        """public synchronized java.awt.event.InputMethodListener[] java.awt.Component.getInputMethodListeners()"""
        return List['InputMethodListener']._wrap(super(Component, self).getInputMethodListeners())

    @override
    @overload
    def transferFocus(self):
        """public void java.awt.Component.transferFocus()"""
        super(Component, self).transferFocus()

    @override
    @overload
    def isShowing(self) -> bool:
        """public boolean java.awt.Window.isShowing()"""
        return bool._wrap(super(Window, self).isShowing())

    @override
    @overload
    def removeComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.removeComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).removeComponentListener(arg0)

    @override
    @overload
    def getCursor(self) -> 'Cursor':
        """public java.awt.Cursor java.awt.Component.getCursor()"""
        return 'Cursor'._wrap(super(Component, self).getCursor())

    @overload
    def isEnabled(self, arg0: int) -> bool:
        """public boolean com.badlogic.gdx.tools.flame.FlameMain.isEnabled(int)"""
        return bool._wrap(super(_FlameMain, self).isEnabled(_int.valueOf(arg0)))

    @override
    @overload
    def setMenuBar(self, arg0: 'MenuBar'):
        """public void java.awt.Frame.setMenuBar(java.awt.MenuBar)"""
        super(_Frame, self).setMenuBar(arg0)

    @override
    @overload
    def getContainerListeners(self) -> List['ContainerListener']:
        """public synchronized java.awt.event.ContainerListener[] java.awt.Container.getContainerListeners()"""
        return List['ContainerListener']._wrap(super(Container, self).getContainerListeners())

    @override
    @overload
    def getMaximumSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.getMaximumSize()"""
        return 'Dimension'._wrap(super(Container, self).getMaximumSize())

    @overload
    def __init__(self):
        """public com.badlogic.gdx.tools.flame.FlameMain()"""
        val = _FlameMain()
        self.__wrapper = val

    @override
    @overload
    def removeAll(self):
        """public void java.awt.Container.removeAll()"""
        super(Container, self).removeAll()

    @overload
    def saveEffect(self, arg0: 'File'):
        """public void com.badlogic.gdx.tools.flame.FlameMain.saveEffect(java.io.File)"""
        super(_FlameMain, self).saveEffect(arg0)

    @overload
    def isAncestorOf(self, arg0: 'Component') -> bool:
        """public boolean java.awt.Container.isAncestorOf(java.awt.Component)"""
        return bool._wrap(super(_Container, self).isAncestorOf(arg0))

    @overload
    def getEmitter(self) -> 'particles.ParticleController':
        """public com.badlogic.gdx.graphics.g3d.particles.ParticleController com.badlogic.gdx.tools.flame.FlameMain.getEmitter()"""
        return 'particles.ParticleController'._wrap(super(FlameMain, self).getEmitter())

    @overload
    def setTexture(self, arg0: 'Texture'):
        """public void com.badlogic.gdx.tools.flame.FlameMain.setTexture(com.badlogic.gdx.graphics.Texture)"""
        super(_FlameMain, self).setTexture(arg0)

    @override
    @overload
    def validate(self):
        """public void java.awt.Container.validate()"""
        super(Container, self).validate()

    @overload
    def createImage(self, arg0: 'ImageProducer') -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(java.awt.image.ImageProducer)"""
        return 'Image'._wrap(super(_Component, self).createImage(arg0))

    @override
    @overload
    def setLocationRelativeTo(self, arg0: 'Component'):
        """public void java.awt.Window.setLocationRelativeTo(java.awt.Component)"""
        super(_Window, self).setLocationRelativeTo(arg0)

    @override
    @overload
    def removePropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0, arg1)

    @override
    @overload
    def countComponents(self) -> int:
        """public int java.awt.Container.countComponents()"""
        return int._wrap(super(Container, self).countComponents())

    @override
    @overload
    def getTitle(self) -> str:
        """public java.lang.String java.awt.Frame.getTitle()"""
        return str._wrap(super(Frame, self).getTitle()) 
 
 
# CLASS: com.badlogic.gdx.tools.flame.CustomCardLayout
from builtins import str
from pyquantum_helper import override
import java.awt.Container as Container
import java.lang.Object as _Object
_Object = _Object
import java.lang.Object as _object
from builtins import type
from builtins import float
import java.awt.CardLayout as _CardLayout
_CardLayout = _CardLayout
from builtins import object
import java.lang.String as _String
_String = _String
import java.lang.String as _string
import java.lang.Integer as _int
import java.awt.Dimension as _Dimension
_Dimension = _Dimension
import com.badlogic.gdx.tools.flame.CustomCardLayout as _CustomCardLayout
_CustomCardLayout = _CustomCardLayout
import java.awt.Dimension as Dimension
import java.awt.Component as Component
from builtins import bool
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class CustomCardLayout():
    """com.badlogic.gdx.tools.flame.CustomCardLayout"""
 
    @staticmethod
    def _wrap(java_value: _CustomCardLayout) -> 'CustomCardLayout':
        return CustomCardLayout(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _CustomCardLayout):
        """
        Dynamic initializer for CustomCardLayout.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_CustomCardLayout__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_CustomCardLayout__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def addLayoutComponent(self, arg0: str, arg1: 'Component'):
        """public void java.awt.CardLayout.addLayoutComponent(java.lang.String,java.awt.Component)"""
        super(_CardLayout, self).addLayoutComponent(arg0, arg1)

    @override
    @overload
    def next(self, arg0: 'Container'):
        """public void java.awt.CardLayout.next(java.awt.Container)"""
        super(_CardLayout, self).next(arg0)

    @overload
    def getLayoutAlignmentY(self, arg0: 'Container') -> float:
        """public float java.awt.CardLayout.getLayoutAlignmentY(java.awt.Container)"""
        return float._wrap(super(_CardLayout, self).getLayoutAlignmentY(arg0))

    @overload
    def getCurrentCard(self, arg0: 'Container') -> object:
        """public <K> K com.badlogic.gdx.tools.flame.CustomCardLayout.getCurrentCard(java.awt.Container)"""
        return object._wrap(super(_CustomCardLayout, self).getCurrentCard(arg0))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def addLayoutComponent(self, arg0: 'Component', arg1: object):
        """public void java.awt.CardLayout.addLayoutComponent(java.awt.Component,java.lang.Object)"""
        super(_CardLayout, self).addLayoutComponent(arg0, arg1)

    @overload
    def getLayoutAlignmentX(self, arg0: 'Container') -> float:
        """public float java.awt.CardLayout.getLayoutAlignmentX(java.awt.Container)"""
        return float._wrap(super(_CardLayout, self).getLayoutAlignmentX(arg0))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def previous(self, arg0: 'Container'):
        """public void java.awt.CardLayout.previous(java.awt.Container)"""
        super(_CardLayout, self).previous(arg0)

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.awt.CardLayout.toString()"""
        return str._wrap(super(CardLayout, self).toString())

    @override
    @overload
    def invalidateLayout(self, arg0: 'Container'):
        """public void java.awt.CardLayout.invalidateLayout(java.awt.Container)"""
        super(_CardLayout, self).invalidateLayout(arg0)

    @override
    @overload
    def getHgap(self) -> int:
        """public int java.awt.CardLayout.getHgap()"""
        return int._wrap(super(CardLayout, self).getHgap())

    @override
    @overload
    def getVgap(self) -> int:
        """public int java.awt.CardLayout.getVgap()"""
        return int._wrap(super(CardLayout, self).getVgap())

    @overload
    def minimumLayoutSize(self, arg0: 'Container') -> 'Dimension':
        """public java.awt.Dimension java.awt.CardLayout.minimumLayoutSize(java.awt.Container)"""
        return 'Dimension'._wrap(super(_CardLayout, self).minimumLayoutSize(arg0))

    @override
    @overload
    def layoutContainer(self, arg0: 'Container'):
        """public void java.awt.CardLayout.layoutContainer(java.awt.Container)"""
        super(_CardLayout, self).layoutContainer(arg0)

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool._wrap(super(_object, self).equals(arg0))

    @override
    @overload
    def last(self, arg0: 'Container'):
        """public void java.awt.CardLayout.last(java.awt.Container)"""
        super(_CardLayout, self).last(arg0)

    @overload
    def __init__(self):
        """public com.badlogic.gdx.tools.flame.CustomCardLayout()"""
        val = _CustomCardLayout()
        self.__wrapper = val

    @override
    @overload
    def setHgap(self, arg0: int):
        """public void java.awt.CardLayout.setHgap(int)"""
        super(_CardLayout, self).setHgap(_int.valueOf(arg0))

    @override
    @overload
    def show(self, arg0: 'Container', arg1: str):
        """public void java.awt.CardLayout.show(java.awt.Container,java.lang.String)"""
        super(_CardLayout, self).show(arg0, arg1)

    @overload
    def __init__(self, ):
        """public com.badlogic.gdx.tools.flame.CustomCardLayout()"""
        val = _CustomCardLayout()
        self.__wrapper = val

    @overload
    def maximumLayoutSize(self, arg0: 'Container') -> 'Dimension':
        """public java.awt.Dimension java.awt.CardLayout.maximumLayoutSize(java.awt.Container)"""
        return 'Dimension'._wrap(super(_CardLayout, self).maximumLayoutSize(arg0))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def removeLayoutComponent(self, arg0: 'Component'):
        """public void java.awt.CardLayout.removeLayoutComponent(java.awt.Component)"""
        super(_CardLayout, self).removeLayoutComponent(arg0)

    @override
    @overload
    def first(self, arg0: 'Container'):
        """public void java.awt.CardLayout.first(java.awt.Container)"""
        super(_CardLayout, self).first(arg0)

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @override
    @overload
    def setVgap(self, arg0: int):
        """public void java.awt.CardLayout.setVgap(int)"""
        super(_CardLayout, self).setVgap(_int.valueOf(arg0))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def preferredLayoutSize(self, arg0: 'Container') -> 'Dimension':
        """public java.awt.Dimension com.badlogic.gdx.tools.flame.CustomCardLayout.preferredLayoutSize(java.awt.Container)"""
        return 'Dimension'._wrap(super(_CustomCardLayout, self).preferredLayoutSize(arg0))

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int._wrap(super(object, self).hashCode()) 
 
 
# CLASS: com.badlogic.gdx.tools.flame.GradientPanel$ColorSlider
import javax.accessibility.AccessibleContext as AccessibleContext
import javax.swing.JToolTip as JToolTip
import java.awt.event.HierarchyBoundsListener as HierarchyBoundsListener
import java.awt.event.ActionListener as _ActionListener
_ActionListener = _ActionListener
import java.awt.ComponentOrientation as _ComponentOrientation
_ComponentOrientation = _ComponentOrientation
import java.awt.image.ImageProducer as ImageProducer
import java.awt.GraphicsConfiguration as GraphicsConfiguration
import java.awt.Graphics as _Graphics
_Graphics = _Graphics
import javax.swing.JToolTip as _JToolTip
_JToolTip = _JToolTip
import java.awt.Container as _Container
_Container = _Container
import java.awt.MenuComponent as MenuComponent
import java.awt.im.InputMethodRequests as _InputMethodRequests
_InputMethodRequests = _InputMethodRequests
import java.awt.FocusTraversalPolicy as _FocusTraversalPolicy
_FocusTraversalPolicy = _FocusTraversalPolicy
import java.lang.Byte as _byte
import java.awt.Dimension as Dimension
import java.awt.Font as _Font
_Font = _Font
import javax.swing.plaf.PanelUI as _PanelUI
_PanelUI = _PanelUI
import java.awt.event.ContainerListener as ContainerListener
import javax.swing.event.AncestorListener as AncestorListener
import java.awt.AWTEvent as AWTEvent
import java.awt.image.ColorModel as _ColorModel
_ColorModel = _ColorModel
import java.lang.Object as _object
import java.awt.ComponentOrientation as ComponentOrientation
import java.awt.im.InputContext as _InputContext
_InputContext = _InputContext
from builtins import float
import java.awt.event.HierarchyListener as HierarchyListener
import java.awt.event.InputMethodListener as InputMethodListener
from typing import List
import java.awt.event.MouseWheelListener as _MouseWheelListener
_MouseWheelListener = _MouseWheelListener
import java.awt.event.KeyListener as KeyListener
import java.awt.Component as Component
from builtins import int
import java.awt.LayoutManager as LayoutManager
import java.awt.FontMetrics as _FontMetrics
_FontMetrics = _FontMetrics
import java.awt.Container as Container
from builtins import type
import java.awt.image.VolatileImage as _VolatileImage
_VolatileImage = _VolatileImage
import java.awt.Shape as Shape
import java.awt.Rectangle as Rectangle
import java.awt.event.ContainerListener as _ContainerListener
_ContainerListener = _ContainerListener
import java.awt.event.HierarchyListener as _HierarchyListener
_HierarchyListener = _HierarchyListener
import java.lang.String as _string
import javax.swing.InputVerifier as _InputVerifier
_InputVerifier = _InputVerifier
import java.awt.Insets as _Insets
_Insets = _Insets
import javax.swing.border.Border as _Border
_Border = _Border
import java.awt.event.ComponentListener as _ComponentListener
_ComponentListener = _ComponentListener
import javax.swing.ActionMap as ActionMap
import java.beans.VetoableChangeListener as VetoableChangeListener
import java.awt.event.ComponentListener as ComponentListener
import com.badlogic.gdx.tools.flame.GradientPanel as _GradientPanel_ColorSlider
_ColorSlider = _GradientPanel_ColorSlider.ColorSlider
import javax.swing.KeyStroke as KeyStroke
import java.beans.VetoableChangeListener as _VetoableChangeListener
_VetoableChangeListener = _VetoableChangeListener
from builtins import object
import java.awt.event.KeyListener as _KeyListener
_KeyListener = _KeyListener
import java.awt.Component.BaselineResizeBehavior as BaselineResizeBehavior
import java.awt.Component as _Component_BaselineResizeBehavior
_BaselineResizeBehavior = _Component_BaselineResizeBehavior.BaselineResizeBehavior
import java.awt.Cursor as _Cursor
_Cursor = _Cursor
import java.awt.im.InputMethodRequests as InputMethodRequests
import java.lang.Long as _long
import javax.swing.JPanel as _JPanel
_JPanel = _JPanel
import java.awt.event.FocusListener as _FocusListener
_FocusListener = _FocusListener
import java.lang.Character as _char
import javax.swing.TransferHandler as TransferHandler
import java.awt.event.FocusEvent.Cause as Cause
import javax.accessibility.AccessibleContext as _AccessibleContext
_AccessibleContext = _AccessibleContext
import java.awt.event.MouseWheelListener as MouseWheelListener
import java.util.Set as _Set
_Set = _Set
import java.awt.image.ColorModel as ColorModel
import java.lang.Boolean as _boolean
import java.awt.event.MouseMotionListener as MouseMotionListener
import java.util.EventListener as EventListener
import java.awt.Insets as Insets
import javax.swing.KeyStroke as _KeyStroke
_KeyStroke = _KeyStroke
import java.awt.GraphicsConfiguration as _GraphicsConfiguration
_GraphicsConfiguration = _GraphicsConfiguration
import java.awt.dnd.DropTarget as _DropTarget
_DropTarget = _DropTarget
from builtins import bool
import java.beans.PropertyChangeListener as _PropertyChangeListener
_PropertyChangeListener = _PropertyChangeListener
import java.awt.LayoutManager as _LayoutManager
_LayoutManager = _LayoutManager
import java.awt.PopupMenu as PopupMenu
import java.util.EventListener as _EventListener
_EventListener = _EventListener
import java.awt.im.InputContext as InputContext
import java.awt.Component as _Component
_Component = _Component
import java.awt.Font as Font
import java.awt.image.VolatileImage as VolatileImage
import java.awt.dnd.DropTarget as DropTarget
import java.lang.String as _String
_String = _String
import java.lang.Float as _float
import java.awt.Cursor as Cursor
import java.awt.event.MouseListener as _MouseListener
_MouseListener = _MouseListener
import java.awt.Toolkit as _Toolkit
_Toolkit = _Toolkit
import java.io.PrintStream as PrintStream
import javax.swing.JRootPane as _JRootPane
_JRootPane = _JRootPane
import java.awt.Dimension as _Dimension
_Dimension = _Dimension
import java.awt.event.ActionListener as ActionListener
import java.awt.event.MouseEvent as MouseEvent
import java.awt.Color as _Color
_Color = _Color
import javax.swing.JPopupMenu as _JPopupMenu
_JPopupMenu = _JPopupMenu
import javax.swing.InputMap as _InputMap
_InputMap = _InputMap
import java.awt.event.MouseListener as MouseListener
import java.lang.Class as _Class
_Class = _Class
import java.util.Locale as Locale
import java.lang.Double as _double
import javax.swing.plaf.PanelUI as PanelUI
import java.awt.Point as _Point
_Point = _Point
import java.lang.Object as _Object
_Object = _Object
import java.beans.PropertyChangeListener as PropertyChangeListener
import javax.swing.border.Border as Border
import javax.swing.JComponent as _JComponent
_JComponent = _JComponent
import javax.swing.InputVerifier as InputVerifier
import java.io.PrintWriter as PrintWriter
import java.awt.Point as Point
import javax.swing.event.AncestorListener as _AncestorListener
_AncestorListener = _AncestorListener
import java.lang.Short as _short
import java.awt.Toolkit as Toolkit
import java.awt.event.HierarchyBoundsListener as _HierarchyBoundsListener
_HierarchyBoundsListener = _HierarchyBoundsListener
import javax.swing.TransferHandler as _TransferHandler
_TransferHandler = _TransferHandler
import javax.swing.InputMap as InputMap
import java.awt.Rectangle as _Rectangle
_Rectangle = _Rectangle
import javax.swing.JRootPane as JRootPane
import java.awt.Event as Event
import java.awt.event.FocusListener as FocusListener
import java.awt.image.ImageObserver as ImageObserver
from builtins import str
from pyquantum_helper import override
import javax.swing.ActionMap as _ActionMap
_ActionMap = _ActionMap
import java.awt.FocusTraversalPolicy as FocusTraversalPolicy
import java.awt.event.MouseMotionListener as _MouseMotionListener
_MouseMotionListener = _MouseMotionListener
import java.awt.event.InputMethodListener as _InputMethodListener
_InputMethodListener = _InputMethodListener
import javax.swing.JPopupMenu as JPopupMenu
import java.util.Set as Set
import java.lang.Integer as _int
import java.awt.Image as _Image
_Image = _Image
import java.awt.FontMetrics as FontMetrics
import java.awt.Color as Color
import java.awt.Image as Image
import java.awt.Graphics as Graphics
import java.awt.ImageCapabilities as ImageCapabilities
import java.util.Locale as _Locale
_Locale = _Locale
 
class ColorSlider():
    """com.badlogic.gdx.tools.flame.GradientPanel.ColorSlider"""
 
    @staticmethod
    def _wrap(java_value: _ColorSlider) -> 'ColorSlider':
        return ColorSlider(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _ColorSlider):
        """
        Dynamic initializer for ColorSlider.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_ColorSlider__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_ColorSlider__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def removeVetoableChangeListener(self, arg0: 'VetoableChangeListener'):
        """public synchronized void javax.swing.JComponent.removeVetoableChangeListener(java.beans.VetoableChangeListener)"""
        super(_JComponent, self).removeVetoableChangeListener(arg0)

    @override
    @overload
    def getComponents(self) -> List['Component']:
        """public java.awt.Component[] java.awt.Container.getComponents()"""
        return List['Component']._wrap(super(Container, self).getComponents())

    @override
    @overload
    def setDebugGraphicsOptions(self, arg0: int):
        """public void javax.swing.JComponent.setDebugGraphicsOptions(int)"""
        super(_JComponent, self).setDebugGraphicsOptions(_int.valueOf(arg0))

    @override
    @overload
    def isValid(self) -> bool:
        """public boolean java.awt.Component.isValid()"""
        return bool._wrap(super(Component, self).isValid())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def getDefaultLocale() -> 'Locale':
        """public static java.util.Locale javax.swing.JComponent.getDefaultLocale()"""
        return Locale._wrap(_JComponent.getDefaultLocale())

    @override
    @overload
    def getInputVerifier(self) -> 'InputVerifier':
        """public javax.swing.InputVerifier javax.swing.JComponent.getInputVerifier()"""
        return 'InputVerifier'._wrap(super(JComponent, self).getInputVerifier())

    @override
    @overload
    def list(self, arg0: 'PrintStream', arg1: int):
        """public void java.awt.Container.list(java.io.PrintStream,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @override
    @overload
    def setUI(self, arg0: 'PanelUI'):
        """public void javax.swing.JPanel.setUI(javax.swing.plaf.PanelUI)"""
        super(_JPanel, self).setUI(arg0)

    @override
    @overload
    def getFocusTraversalPolicy(self) -> 'FocusTraversalPolicy':
        """public java.awt.FocusTraversalPolicy java.awt.Container.getFocusTraversalPolicy()"""
        return 'FocusTraversalPolicy'._wrap(super(Container, self).getFocusTraversalPolicy())

    @override
    @overload
    def getParent(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getParent()"""
        return 'Container'._wrap(super(Component, self).getParent())

    @override
    @overload
    def paintImmediately(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.paintImmediately(java.awt.Rectangle)"""
        super(_JComponent, self).paintImmediately(arg0)

    @staticmethod
    @overload
    def setDefaultLocale(arg0: 'Locale'):
        """public static void javax.swing.JComponent.setDefaultLocale(java.util.Locale)"""
        _JComponent.setDefaultLocale(arg0)

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,float,float)"""
        super(_Component, self).firePropertyChange(arg0, _float.valueOf(arg1), _float.valueOf(arg2))

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object)"""
        super(_Container, self).add(arg0, arg1)

    @override
    @overload
    def getLocale(self) -> 'Locale':
        """public java.util.Locale java.awt.Component.getLocale()"""
        return 'Locale'._wrap(super(Component, self).getLocale())

    @override
    @overload
    def setInheritsPopupMenu(self, arg0: bool):
        """public void javax.swing.JComponent.setInheritsPopupMenu(boolean)"""
        super(_JComponent, self).setInheritsPopupMenu(_boolean.valueOf(arg0))

    @override
    @overload
    def getHierarchyListeners(self) -> List['HierarchyListener']:
        """public synchronized java.awt.event.HierarchyListener[] java.awt.Component.getHierarchyListeners()"""
        return List['HierarchyListener']._wrap(super(Component, self).getHierarchyListeners())

    @override
    @overload
    def nextFocus(self):
        """public void java.awt.Component.nextFocus()"""
        super(Component, self).nextFocus()

    @override
    @overload
    def isPaintingTile(self) -> bool:
        """public boolean javax.swing.JComponent.isPaintingTile()"""
        return bool._wrap(super(JComponent, self).isPaintingTile())

    @override
    @overload
    def isDisplayable(self) -> bool:
        """public boolean java.awt.Component.isDisplayable()"""
        return bool._wrap(super(Component, self).isDisplayable())

    @override
    @overload
    def getBounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.getBounds()"""
        return 'Rectangle'._wrap(super(Component, self).getBounds())

    @override
    @overload
    def removeMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.removeMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).removeMouseMotionListener(arg0)

    @override
    @overload
    def isShowing(self) -> bool:
        """public boolean java.awt.Component.isShowing()"""
        return bool._wrap(super(Component, self).isShowing())

    @override
    @overload
    def getDropTarget(self) -> 'DropTarget':
        """public synchronized java.awt.dnd.DropTarget java.awt.Component.getDropTarget()"""
        return 'DropTarget'._wrap(super(Component, self).getDropTarget())

    @override
    @overload
    def isFontSet(self) -> bool:
        """public boolean java.awt.Component.isFontSet()"""
        return bool._wrap(super(Component, self).isFontSet())

    @overload
    def mouseUp(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseUp(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseUp(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def setIgnoreRepaint(self, arg0: bool):
        """public void java.awt.Component.setIgnoreRepaint(boolean)"""
        super(_Component, self).setIgnoreRepaint(_boolean.valueOf(arg0))

    @override
    @overload
    def getPropertyChangeListeners(self) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners()"""
        return List['PropertyChangeListener']._wrap(super(Component, self).getPropertyChangeListeners())

    @override
    @overload
    def isBackgroundSet(self) -> bool:
        """public boolean java.awt.Component.isBackgroundSet()"""
        return bool._wrap(super(Component, self).isBackgroundSet())

    @override
    @overload
    def getLocation(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocation()"""
        return 'Point'._wrap(super(Component, self).getLocation())

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int._wrap(super(object, self).hashCode())

    @override
    @overload
    def location(self) -> 'Point':
        """public java.awt.Point java.awt.Component.location()"""
        return 'Point'._wrap(super(Component, self).location())

    @override
    @overload
    def getComponentOrientation(self) -> 'ComponentOrientation':
        """public java.awt.ComponentOrientation java.awt.Component.getComponentOrientation()"""
        return 'ComponentOrientation'._wrap(super(Component, self).getComponentOrientation())

    @override
    @overload
    def addHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.addHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).addHierarchyListener(arg0)

    @override
    @overload
    def getInheritsPopupMenu(self) -> bool:
        """public boolean javax.swing.JComponent.getInheritsPopupMenu()"""
        return bool._wrap(super(JComponent, self).getInheritsPopupMenu())

    @override
    @overload
    def setComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Component.setComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Component, self).setComponentOrientation(arg0)

    @override
    @overload
    def getFocusCycleRootAncestor(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getFocusCycleRootAncestor()"""
        return 'Container'._wrap(super(Component, self).getFocusCycleRootAncestor())

    @override
    @overload
    def show(self, arg0: bool):
        """public void java.awt.Component.show(boolean)"""
        super(_Component, self).show(_boolean.valueOf(arg0))

    @override
    @overload
    def grabFocus(self):
        """public void javax.swing.JComponent.grabFocus()"""
        super(JComponent, self).grabFocus()

    @overload
    def locate(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.locate(int,int)"""
        return 'Component'._wrap(super(_Container, self).locate(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def isPaintingForPrint(self) -> bool:
        """public final boolean javax.swing.JComponent.isPaintingForPrint()"""
        return bool._wrap(super(JComponent, self).isPaintingForPrint())

    @overload
    def keyDown(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyDown(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyDown(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,int,int)"""
        super(_JComponent, self).firePropertyChange(arg0, _int.valueOf(arg1), _int.valueOf(arg2))

    @override
    @overload
    def getLayout(self) -> 'LayoutManager':
        """public java.awt.LayoutManager java.awt.Container.getLayout()"""
        return 'LayoutManager'._wrap(super(Container, self).getLayout())

    @override
    @overload
    def preferredSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.preferredSize()"""
        return 'Dimension'._wrap(super(Container, self).preferredSize())

    @override
    @overload
    def addNotify(self):
        """public void javax.swing.JComponent.addNotify()"""
        super(JComponent, self).addNotify()

    @override
    @overload
    def setSize(self, arg0: int, arg1: int):
        """public void java.awt.Component.setSize(int,int)"""
        super(_Component, self).setSize(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.repaint(int,int,int,int)"""
        super(_Component, self).repaint(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @overload
    def requestFocusInWindow(self, arg0: 'Cause') -> bool:
        """public boolean java.awt.Component.requestFocusInWindow(java.awt.event.FocusEvent$Cause)"""
        return bool._wrap(super(_Component, self).requestFocusInWindow(arg0))

    @override
    @overload
    def remove(self, arg0: int):
        """public void java.awt.Container.remove(int)"""
        super(_Container, self).remove(_int.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,long,long)"""
        super(_Component, self).firePropertyChange(arg0, _long.valueOf(arg1), _long.valueOf(arg2))

    @override
    @overload
    def setFocusCycleRoot(self, arg0: bool):
        """public void java.awt.Container.setFocusCycleRoot(boolean)"""
        super(_Container, self).setFocusCycleRoot(_boolean.valueOf(arg0))

    @overload
    def keyUp(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyUp(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyUp(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def setBackground(self, arg0: 'Color'):
        """public void javax.swing.JComponent.setBackground(java.awt.Color)"""
        super(_JComponent, self).setBackground(arg0)

    @override
    @overload
    def doLayout(self):
        """public void java.awt.Container.doLayout()"""
        super(Container, self).doLayout()

    @overload
    def setPercentage(self, arg0: float):
        """public void com.badlogic.gdx.tools.flame.GradientPanel$ColorSlider.setPercentage(float)"""
        super(_ColorSlider, self).setPercentage(_float.valueOf(arg0))

    @override
    @overload
    def enable(self):
        """public void javax.swing.JComponent.enable()"""
        super(JComponent, self).enable()

    @override
    @overload
    def getInsets(self) -> 'Insets':
        """public java.awt.Insets javax.swing.JComponent.getInsets()"""
        return 'Insets'._wrap(super(JComponent, self).getInsets())

    @override
    @overload
    def setNextFocusableComponent(self, arg0: 'Component'):
        """public void javax.swing.JComponent.setNextFocusableComponent(java.awt.Component)"""
        super(_JComponent, self).setNextFocusableComponent(arg0)

    @override
    @overload
    def getAlignmentY(self) -> float:
        """public float javax.swing.JComponent.getAlignmentY()"""
        return float._wrap(super(JComponent, self).getAlignmentY())

    @overload
    def checkImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @override
    @overload
    def getFocusTraversalKeysEnabled(self) -> bool:
        """public boolean java.awt.Component.getFocusTraversalKeysEnabled()"""
        return bool._wrap(super(Component, self).getFocusTraversalKeysEnabled())

    @overload
    def setColors(self, arg0: 'Color'):
        """public void com.badlogic.gdx.tools.flame.GradientPanel$ColorSlider.setColors(java.awt.Color[])"""
        super(_ColorSlider, self).setColors(arg0)

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getRootPane(self) -> 'JRootPane':
        """public javax.swing.JRootPane javax.swing.JComponent.getRootPane()"""
        return 'JRootPane'._wrap(super(JComponent, self).getRootPane())

    @override
    @overload
    def invalidate(self):
        """public void java.awt.Container.invalidate()"""
        super(Container, self).invalidate()

    @override
    @overload
    def resetKeyboardActions(self):
        """public void javax.swing.JComponent.resetKeyboardActions()"""
        super(JComponent, self).resetKeyboardActions()

    @overload
    def getComponent(self, arg0: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponent(int)"""
        return 'Component'._wrap(super(_Container, self).getComponent(_int.valueOf(arg0)))

    @override
    @overload
    def addPropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Container.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Container, self).addPropertyChangeListener(arg0, arg1)

    @override
    @overload
    def setInputMap(self, arg0: int, arg1: 'InputMap'):
        """public final void javax.swing.JComponent.setInputMap(int,javax.swing.InputMap)"""
        super(_JComponent, self).setInputMap(_int.valueOf(arg0), arg1)

    @override
    @overload
    def removePropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0)

    @override
    @overload
    def applyComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Container.applyComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Container, self).applyComponentOrientation(arg0)

    @override
    @overload
    def setBorder(self, arg0: 'Border'):
        """public void javax.swing.JComponent.setBorder(javax.swing.border.Border)"""
        super(_JComponent, self).setBorder(arg0)

    @override
    @overload
    def remove(self, arg0: 'MenuComponent'):
        """public void java.awt.Component.remove(java.awt.MenuComponent)"""
        super(_Component, self).remove(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintStream'):
        """public void java.awt.Component.list(java.io.PrintStream)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def removeMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.removeMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).removeMouseListener(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintWriter'):
        """public void java.awt.Component.list(java.io.PrintWriter)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def getKeyListeners(self) -> List['KeyListener']:
        """public synchronized java.awt.event.KeyListener[] java.awt.Component.getKeyListeners()"""
        return List['KeyListener']._wrap(super(Component, self).getKeyListeners())

    @override
    @overload
    def getInputContext(self) -> 'InputContext':
        """public java.awt.im.InputContext java.awt.Component.getInputContext()"""
        return 'InputContext'._wrap(super(Component, self).getInputContext())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,double,double)"""
        super(_Component, self).firePropertyChange(arg0, _double.valueOf(arg1), _double.valueOf(arg2))

    @override
    @overload
    def removeAncestorListener(self, arg0: 'AncestorListener'):
        """public void javax.swing.JComponent.removeAncestorListener(javax.swing.event.AncestorListener)"""
        super(_JComponent, self).removeAncestorListener(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintWriter', arg1: int):
        """public void java.awt.Container.list(java.io.PrintWriter,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @overload
    def checkImage(self, arg0: 'Image', arg1: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, arg1))

    @override
    @overload
    def removeFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.removeFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).removeFocusListener(arg0)

    @overload
    def mouseDown(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDown(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDown(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getConditionForKeyStroke(self, arg0: 'KeyStroke') -> int:
        """public int javax.swing.JComponent.getConditionForKeyStroke(javax.swing.KeyStroke)"""
        return int._wrap(super(_JComponent, self).getConditionForKeyStroke(arg0))

    @override
    @overload
    def getTreeLock(self) -> object:
        """public final java.lang.Object java.awt.Component.getTreeLock()"""
        return object._wrap(super(Component, self).getTreeLock())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @override
    @overload
    def addVetoableChangeListener(self, arg0: 'VetoableChangeListener'):
        """public synchronized void javax.swing.JComponent.addVetoableChangeListener(java.beans.VetoableChangeListener)"""
        super(_JComponent, self).addVetoableChangeListener(arg0)

    @overload
    def contains(self, arg0: 'Point') -> bool:
        """public boolean java.awt.Component.contains(java.awt.Point)"""
        return bool._wrap(super(_Component, self).contains(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,short,short)"""
        super(_Component, self).firePropertyChange(arg0, _short.valueOf(arg1), _short.valueOf(arg2))

    @override
    @overload
    def dispatchEvent(self, arg0: 'AWTEvent'):
        """public final void java.awt.Component.dispatchEvent(java.awt.AWTEvent)"""
        super(_Component, self).dispatchEvent(arg0)

    @override
    @overload
    def removeContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.removeContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).removeContainerListener(arg0)

    @override
    @overload
    def getGraphicsConfiguration(self) -> 'GraphicsConfiguration':
        """public java.awt.GraphicsConfiguration java.awt.Component.getGraphicsConfiguration()"""
        return 'GraphicsConfiguration'._wrap(super(Component, self).getGraphicsConfiguration())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: bool, arg2: bool):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,boolean,boolean)"""
        super(_JComponent, self).firePropertyChange(arg0, _boolean.valueOf(arg1), _boolean.valueOf(arg2))

    @override
    @overload
    def registerKeyboardAction(self, arg0: 'ActionListener', arg1: str, arg2: 'KeyStroke', arg3: int):
        """public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,java.lang.String,javax.swing.KeyStroke,int)"""
        super(_JComponent, self).registerKeyboardAction(arg0, arg1, arg2, _int.valueOf(arg3))

    @overload
    def findComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(arg0))

    @override
    @overload
    def resize(self, arg0: int, arg1: int):
        """public void java.awt.Component.resize(int,int)"""
        super(_Component, self).resize(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getHeight(self) -> int:
        """public int javax.swing.JComponent.getHeight()"""
        return int._wrap(super(JComponent, self).getHeight())

    @override
    @overload
    def getTransferHandler(self) -> 'TransferHandler':
        """public javax.swing.TransferHandler javax.swing.JComponent.getTransferHandler()"""
        return 'TransferHandler'._wrap(super(JComponent, self).getTransferHandler())

    @overload
    def imageUpdate(self, arg0: 'Image', arg1: int, arg2: int, arg3: int, arg4: int, arg5: int) -> bool:
        """public boolean java.awt.Component.imageUpdate(java.awt.Image,int,int,int,int,int)"""
        return bool._wrap(super(_Component, self).imageUpdate(arg0, _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4), _int.valueOf(arg5)))

    @override
    @overload
    def getWidth(self) -> int:
        """public int javax.swing.JComponent.getWidth()"""
        return int._wrap(super(JComponent, self).getWidth())

    @override
    @overload
    def transferFocusBackward(self):
        """public void java.awt.Component.transferFocusBackward()"""
        super(Component, self).transferFocusBackward()

    @overload
    def getPropertyChangeListeners(self, arg0: str) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners(java.lang.String)"""
        return List['PropertyChangeListener']._wrap(super(_Component, self).getPropertyChangeListeners(arg0))

    @staticmethod
    @overload
    def isLightweightComponent(arg0: 'Component') -> bool:
        """public static boolean javax.swing.JComponent.isLightweightComponent(java.awt.Component)"""
        return bool._wrap(_JComponent.isLightweightComponent(arg0))

    @override
    @overload
    def getBorder(self) -> 'Border':
        """public javax.swing.border.Border javax.swing.JComponent.getBorder()"""
        return 'Border'._wrap(super(JComponent, self).getBorder())

    @override
    @overload
    def printAll(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.printAll(java.awt.Graphics)"""
        super(_JComponent, self).printAll(arg0)

    @override
    @overload
    def addComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.addComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).addComponentListener(arg0)

    @override
    @overload
    def getBaselineResizeBehavior(self) -> 'BaselineResizeBehavior.Component$BaselineResizeBehavior':
        """public java.awt.Component$BaselineResizeBehavior javax.swing.JComponent.getBaselineResizeBehavior()"""
        return 'BaselineResizeBehavior.Component$BaselineResizeBehavior'._wrap(super(JComponent, self).getBaselineResizeBehavior())

    @override
    @overload
    def print(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.print(java.awt.Graphics)"""
        super(_JComponent, self).print(arg0)

    @override
    @overload
    def setInputVerifier(self, arg0: 'InputVerifier'):
        """public void javax.swing.JComponent.setInputVerifier(javax.swing.InputVerifier)"""
        super(_JComponent, self).setInputVerifier(arg0)

    @override
    @overload
    def addAncestorListener(self, arg0: 'AncestorListener'):
        """public void javax.swing.JComponent.addAncestorListener(javax.swing.event.AncestorListener)"""
        super(_JComponent, self).addAncestorListener(arg0)

    @override
    @overload
    def getFont(self) -> 'Font':
        """public java.awt.Font java.awt.Component.getFont()"""
        return 'Font'._wrap(super(Component, self).getFont())

    @override
    @overload
    def setFont(self, arg0: 'Font'):
        """public void javax.swing.JComponent.setFont(java.awt.Font)"""
        super(_JComponent, self).setFont(arg0)

    @override
    @overload
    def isOptimizedDrawingEnabled(self) -> bool:
        """public boolean javax.swing.JComponent.isOptimizedDrawingEnabled()"""
        return bool._wrap(super(JComponent, self).isOptimizedDrawingEnabled())

    @override
    @overload
    def isValidateRoot(self) -> bool:
        """public boolean javax.swing.JComponent.isValidateRoot()"""
        return bool._wrap(super(JComponent, self).isValidateRoot())

    @overload
    def prepareImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @override
    @overload
    def setForeground(self, arg0: 'Color'):
        """public void javax.swing.JComponent.setForeground(java.awt.Color)"""
        super(_JComponent, self).setForeground(arg0)

    @overload
    def mouseDrag(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDrag(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDrag(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def isOpaque(self) -> bool:
        """public boolean javax.swing.JComponent.isOpaque()"""
        return bool._wrap(super(JComponent, self).isOpaque())

    @overload
    def createVolatileImage(self, arg0: int, arg1: int, arg2: 'ImageCapabilities') -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int,java.awt.ImageCapabilities) throws java.awt.AWTException"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1), arg2))

    @override
    @overload
    def bounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.bounds()"""
        return 'Rectangle'._wrap(super(Component, self).bounds())

    @override
    @overload
    def update(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.update(java.awt.Graphics)"""
        super(_JComponent, self).update(arg0)

    @override
    @overload
    def add(self, arg0: 'PopupMenu'):
        """public void java.awt.Component.add(java.awt.PopupMenu)"""
        super(_Component, self).add(arg0)

    @overload
    def __init__(self, arg0: 'Color'):
        """public com.badlogic.gdx.tools.flame.GradientPanel$ColorSlider(java.awt.Color[])"""
        val = _ColorSlider(arg0)
        self.__wrapper = val

    @override
    @overload
    def getToolTipText(self) -> str:
        """public java.lang.String javax.swing.JComponent.getToolTipText()"""
        return str._wrap(super(JComponent, self).getToolTipText())

    @override
    @overload
    def isVisible(self) -> bool:
        """public boolean java.awt.Component.isVisible()"""
        return bool._wrap(super(Component, self).isVisible())

    @override
    @overload
    def setDropTarget(self, arg0: 'DropTarget'):
        """public synchronized void java.awt.Component.setDropTarget(java.awt.dnd.DropTarget)"""
        super(_Component, self).setDropTarget(arg0)

    @override
    @overload
    def getLocationOnScreen(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocationOnScreen()"""
        return 'Point'._wrap(super(Component, self).getLocationOnScreen())

    @override
    @overload
    def getY(self) -> int:
        """public int javax.swing.JComponent.getY()"""
        return int._wrap(super(JComponent, self).getY())

    @overload
    def getComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def isMaximumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMaximumSizeSet()"""
        return bool._wrap(super(Component, self).isMaximumSizeSet())

    @override
    @overload
    def setAlignmentY(self, arg0: float):
        """public void javax.swing.JComponent.setAlignmentY(float)"""
        super(_JComponent, self).setAlignmentY(_float.valueOf(arg0))

    @override
    @overload
    def getRegisteredKeyStrokes(self) -> List['KeyStroke']:
        """public javax.swing.KeyStroke[] javax.swing.JComponent.getRegisteredKeyStrokes()"""
        return List['KeyStroke']._wrap(super(JComponent, self).getRegisteredKeyStrokes())

    @override
    @overload
    def isFocusable(self) -> bool:
        """public boolean java.awt.Component.isFocusable()"""
        return bool._wrap(super(Component, self).isFocusable())

    @override
    @overload
    def isFocusTraversalPolicyProvider(self) -> bool:
        """public final boolean java.awt.Container.isFocusTraversalPolicyProvider()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicyProvider())

    @override
    @overload
    def getMouseListeners(self) -> List['MouseListener']:
        """public synchronized java.awt.event.MouseListener[] java.awt.Component.getMouseListeners()"""
        return List['MouseListener']._wrap(super(Component, self).getMouseListeners())

    @override
    @overload
    def registerKeyboardAction(self, arg0: 'ActionListener', arg1: 'KeyStroke', arg2: int):
        """public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,javax.swing.KeyStroke,int)"""
        super(_JComponent, self).registerKeyboardAction(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def transferFocusUpCycle(self):
        """public void java.awt.Component.transferFocusUpCycle()"""
        super(Component, self).transferFocusUpCycle()

    @override
    @overload
    def removeKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.removeKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).removeKeyListener(arg0)

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: str, arg2: str):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,char,char)"""
        super(_JComponent, self).firePropertyChange(arg0, _char.valueOf(arg1), _char.valueOf(arg2))

    @override
    @overload
    def getMouseMotionListeners(self) -> List['MouseMotionListener']:
        """public synchronized java.awt.event.MouseMotionListener[] java.awt.Component.getMouseMotionListeners()"""
        return List['MouseMotionListener']._wrap(super(Component, self).getMouseMotionListeners())

    @override
    @overload
    def getAutoscrolls(self) -> bool:
        """public boolean javax.swing.JComponent.getAutoscrolls()"""
        return bool._wrap(super(JComponent, self).getAutoscrolls())

    @override
    @overload
    def addContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.addContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).addContainerListener(arg0)

    @override
    @overload
    def isFocusTraversable(self) -> bool:
        """public boolean java.awt.Component.isFocusTraversable()"""
        return bool._wrap(super(Component, self).isFocusTraversable())

    @overload
    def mouseExit(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseExit(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseExit(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getBounds(self, arg0: 'Rectangle') -> 'Rectangle':
        """public java.awt.Rectangle javax.swing.JComponent.getBounds(java.awt.Rectangle)"""
        return 'Rectangle'._wrap(super(_JComponent, self).getBounds(arg0))

    @override
    @overload
    def setToolTipText(self, arg0: str):
        """public void javax.swing.JComponent.setToolTipText(java.lang.String)"""
        super(_JComponent, self).setToolTipText(arg0)

    @override
    @overload
    def setAutoscrolls(self, arg0: bool):
        """public void javax.swing.JComponent.setAutoscrolls(boolean)"""
        super(_JComponent, self).setAutoscrolls(_boolean.valueOf(arg0))

    @override
    @overload
    def setComponentPopupMenu(self, arg0: 'JPopupMenu'):
        """public void javax.swing.JComponent.setComponentPopupMenu(javax.swing.JPopupMenu)"""
        super(_JComponent, self).setComponentPopupMenu(arg0)

    @override
    @overload
    def setMixingCutoutShape(self, arg0: 'Shape'):
        """public void java.awt.Component.setMixingCutoutShape(java.awt.Shape)"""
        super(_Component, self).setMixingCutoutShape(arg0)

    @override
    @overload
    def getVisibleRect(self) -> 'Rectangle':
        """public java.awt.Rectangle javax.swing.JComponent.getVisibleRect()"""
        return 'Rectangle'._wrap(super(JComponent, self).getVisibleRect())

    @override
    @overload
    def requestFocus(self, arg0: 'Cause'):
        """public void java.awt.Component.requestFocus(java.awt.event.FocusEvent$Cause)"""
        super(_Component, self).requestFocus(arg0)

    @overload
    def createImage(self, arg0: int, arg1: int) -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(int,int)"""
        return 'Image'._wrap(super(_Component, self).createImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def putClientProperty(self, arg0: object, arg1: object):
        """public final void javax.swing.JComponent.putClientProperty(java.lang.Object,java.lang.Object)"""
        super(_JComponent, self).putClientProperty(arg0, arg1)

    @override
    @overload
    def getVetoableChangeListeners(self) -> List['VetoableChangeListener']:
        """public synchronized java.beans.VetoableChangeListener[] javax.swing.JComponent.getVetoableChangeListeners()"""
        return List['VetoableChangeListener']._wrap(super(JComponent, self).getVetoableChangeListeners())

    @override
    @overload
    def scrollRectToVisible(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.scrollRectToVisible(java.awt.Rectangle)"""
        super(_JComponent, self).scrollRectToVisible(arg0)

    @override
    @overload
    def getTopLevelAncestor(self) -> 'Container':
        """public java.awt.Container javax.swing.JComponent.getTopLevelAncestor()"""
        return 'Container'._wrap(super(JComponent, self).getTopLevelAncestor())

    @override
    @overload
    def isRequestFocusEnabled(self) -> bool:
        """public boolean javax.swing.JComponent.isRequestFocusEnabled()"""
        return bool._wrap(super(JComponent, self).isRequestFocusEnabled())

    @override
    @overload
    def getFocusListeners(self) -> List['FocusListener']:
        """public synchronized java.awt.event.FocusListener[] java.awt.Component.getFocusListeners()"""
        return List['FocusListener']._wrap(super(Component, self).getFocusListeners())

    @override
    @overload
    def setLayout(self, arg0: 'LayoutManager'):
        """public void java.awt.Container.setLayout(java.awt.LayoutManager)"""
        super(_Container, self).setLayout(arg0)

    @overload
    def add(self, arg0: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0))

    @override
    @overload
    def getMouseWheelListeners(self) -> List['MouseWheelListener']:
        """public synchronized java.awt.event.MouseWheelListener[] java.awt.Component.getMouseWheelListeners()"""
        return List['MouseWheelListener']._wrap(super(Component, self).getMouseWheelListeners())

    @override
    @overload
    def reshape(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void javax.swing.JComponent.reshape(int,int,int,int)"""
        super(_JComponent, self).reshape(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def setTransferHandler(self, arg0: 'TransferHandler'):
        """public void javax.swing.JComponent.setTransferHandler(javax.swing.TransferHandler)"""
        super(_JComponent, self).setTransferHandler(arg0)

    @override
    @overload
    def setLocation(self, arg0: int, arg1: int):
        """public void java.awt.Component.setLocation(int,int)"""
        super(_Component, self).setLocation(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def removeInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.removeInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).removeInputMethodListener(arg0)

    @override
    @overload
    def setFocusable(self, arg0: bool):
        """public void java.awt.Component.setFocusable(boolean)"""
        super(_Component, self).setFocusable(_boolean.valueOf(arg0))

    @override
    @overload
    def paintComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.paintComponents(java.awt.Graphics)"""
        super(_Container, self).paintComponents(arg0)

    @override
    @overload
    def addFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.addFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).addFocusListener(arg0)

    @overload
    def prepareImage(self, arg0: 'Image', arg1: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, arg1))

    @override
    @overload
    def addKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.addKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).addKeyListener(arg0)

    @override
    @overload
    def resize(self, arg0: 'Dimension'):
        """public void java.awt.Component.resize(java.awt.Dimension)"""
        super(_Component, self).resize(arg0)

    @override
    @overload
    def setComponentZOrder(self, arg0: 'Component', arg1: int):
        """public void java.awt.Container.setComponentZOrder(java.awt.Component,int)"""
        super(_Container, self).setComponentZOrder(arg0, _int.valueOf(arg1))

    @override
    @overload
    def list(self):
        """public void java.awt.Component.list()"""
        super(Component, self).list()

    @overload
    def add(self, arg0: str, arg1: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.lang.String,java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, arg1))

    @override
    @overload
    def paintImmediately(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void javax.swing.JComponent.paintImmediately(int,int,int,int)"""
        super(_JComponent, self).paintImmediately(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def getMinimumSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getMinimumSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getMinimumSize())

    @override
    @overload
    def setEnabled(self, arg0: bool):
        """public void javax.swing.JComponent.setEnabled(boolean)"""
        super(_JComponent, self).setEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def hasFocus(self) -> bool:
        """public boolean java.awt.Component.hasFocus()"""
        return bool._wrap(super(Component, self).hasFocus())

    @overload
    def createVolatileImage(self, arg0: int, arg1: int) -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int)"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.removeHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).removeHierarchyListener(arg0)

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.awt.Component.toString()"""
        return str._wrap(super(Component, self).toString())

    @override
    @overload
    def addMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.addMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).addMouseListener(arg0)

    @override
    @overload
    def isFocusOwner(self) -> bool:
        """public boolean java.awt.Component.isFocusOwner()"""
        return bool._wrap(super(Component, self).isFocusOwner())

    @override
    @overload
    def getAccessibleContext(self) -> 'AccessibleContext':
        """public javax.accessibility.AccessibleContext javax.swing.JPanel.getAccessibleContext()"""
        return 'AccessibleContext'._wrap(super(JPanel, self).getAccessibleContext())

    @overload
    def postEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.postEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).postEvent(arg0))

    @overload
    def getLocation(self, arg0: 'Point') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getLocation(java.awt.Point)"""
        return 'Point'._wrap(super(_JComponent, self).getLocation(arg0))

    @overload
    def getBaseline(self, arg0: int, arg1: int) -> int:
        """public int javax.swing.JComponent.getBaseline(int,int)"""
        return int._wrap(super(_JComponent, self).getBaseline(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def findComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeNotify(self):
        """public void javax.swing.JComponent.removeNotify()"""
        super(JComponent, self).removeNotify()

    @override
    @overload
    def getForeground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getForeground()"""
        return 'Color'._wrap(super(Component, self).getForeground())

    @override
    @overload
    def show(self):
        """public void java.awt.Component.show()"""
        super(Component, self).show()

    @override
    @overload
    def isDoubleBuffered(self) -> bool:
        """public boolean javax.swing.JComponent.isDoubleBuffered()"""
        return bool._wrap(super(JComponent, self).isDoubleBuffered())

    @override
    @overload
    def isFocusCycleRoot(self) -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot()"""
        return bool._wrap(super(Container, self).isFocusCycleRoot())

    @override
    @overload
    def addMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.addMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).addMouseWheelListener(arg0)

    @override
    @overload
    def hide(self):
        """public void javax.swing.JComponent.hide()"""
        super(JComponent, self).hide()

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def revalidate(self):
        """public void javax.swing.JComponent.revalidate()"""
        super(JComponent, self).revalidate()

    @override
    @overload
    def getActionMap(self) -> 'ActionMap':
        """public final javax.swing.ActionMap javax.swing.JComponent.getActionMap()"""
        return 'ActionMap'._wrap(super(JComponent, self).getActionMap())

    @override
    @overload
    def requestFocusInWindow(self) -> bool:
        """public boolean javax.swing.JComponent.requestFocusInWindow()"""
        return bool._wrap(super(JComponent, self).requestFocusInWindow())

    @overload
    def action(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.action(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).action(arg0, arg1))

    @override
    @overload
    def isManagingFocus(self) -> bool:
        """public boolean javax.swing.JComponent.isManagingFocus()"""
        return bool._wrap(super(JComponent, self).isManagingFocus())

    @override
    @overload
    def isLightweight(self) -> bool:
        """public boolean java.awt.Component.isLightweight()"""
        return bool._wrap(super(Component, self).isLightweight())

    @override
    @overload
    def setAlignmentX(self, arg0: float):
        """public void javax.swing.JComponent.setAlignmentX(float)"""
        super(_JComponent, self).setAlignmentX(_float.valueOf(arg0))

    @overload
    def getFocusTraversalKeys(self, arg0: int) -> 'Set':
        """public java.util.Set<java.awt.AWTKeyStroke> java.awt.Container.getFocusTraversalKeys(int)"""
        return 'Set'._wrap(super(_Container, self).getFocusTraversalKeys(_int.valueOf(arg0)))

    @override
    @overload
    def setFocusTraversalKeysEnabled(self, arg0: bool):
        """public void java.awt.Component.setFocusTraversalKeysEnabled(boolean)"""
        super(_Component, self).setFocusTraversalKeysEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def remove(self, arg0: 'Component'):
        """public void java.awt.Container.remove(java.awt.Component)"""
        super(_Container, self).remove(arg0)

    @overload
    def getInsets(self, arg0: 'Insets') -> 'Insets':
        """public java.awt.Insets javax.swing.JComponent.getInsets(java.awt.Insets)"""
        return 'Insets'._wrap(super(_JComponent, self).getInsets(arg0))

    @overload
    def getPercentage(self) -> float:
        """public float com.badlogic.gdx.tools.flame.GradientPanel$ColorSlider.getPercentage()"""
        return float._wrap(super(ColorSlider, self).getPercentage())

    @override
    @overload
    def insets(self) -> 'Insets':
        """public java.awt.Insets java.awt.Container.insets()"""
        return 'Insets'._wrap(super(Container, self).insets())

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int):
        """public void javax.swing.JComponent.repaint(long,int,int,int,int)"""
        super(_JComponent, self).repaint(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4))

    @override
    @overload
    def setFocusTraversalPolicy(self, arg0: 'FocusTraversalPolicy'):
        """public void java.awt.Container.setFocusTraversalPolicy(java.awt.FocusTraversalPolicy)"""
        super(_Container, self).setFocusTraversalPolicy(arg0)

    @overload
    def getSize(self, arg0: 'Dimension') -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getSize(java.awt.Dimension)"""
        return 'Dimension'._wrap(super(_JComponent, self).getSize(arg0))

    @override
    @overload
    def enable(self, arg0: bool):
        """public void java.awt.Component.enable(boolean)"""
        super(_Component, self).enable(_boolean.valueOf(arg0))

    @overload
    def getToolTipLocation(self, arg0: 'MouseEvent') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getToolTipLocation(java.awt.event.MouseEvent)"""
        return 'Point'._wrap(super(_JComponent, self).getToolTipLocation(arg0))

    @override
    @overload
    def addPropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Container.addPropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Container, self).addPropertyChangeListener(arg0)

    @overload
    def getComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(arg0))

    @override
    @overload
    def size(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.size()"""
        return 'Dimension'._wrap(super(Component, self).size())

    @override
    @overload
    def getVerifyInputWhenFocusTarget(self) -> bool:
        """public boolean javax.swing.JComponent.getVerifyInputWhenFocusTarget()"""
        return bool._wrap(super(JComponent, self).getVerifyInputWhenFocusTarget())

    @overload
    def mouseMove(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseMove(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseMove(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getActionForKeyStroke(self, arg0: 'KeyStroke') -> 'ActionListener':
        """public java.awt.event.ActionListener javax.swing.JComponent.getActionForKeyStroke(javax.swing.KeyStroke)"""
        return 'ActionListener'._wrap(super(_JComponent, self).getActionForKeyStroke(arg0))

    @overload
    def lostFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.lostFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).lostFocus(arg0, arg1))

    @override
    @overload
    def isMinimumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMinimumSizeSet()"""
        return bool._wrap(super(Component, self).isMinimumSizeSet())

    @override
    @overload
    def isForegroundSet(self) -> bool:
        """public boolean java.awt.Component.isForegroundSet()"""
        return bool._wrap(super(Component, self).isForegroundSet())

    @overload
    def getMousePosition(self, arg0: bool) -> 'Point':
        """public java.awt.Point java.awt.Container.getMousePosition(boolean) throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(_Container, self).getMousePosition(_boolean.valueOf(arg0)))

    @overload
    def getFontMetrics(self, arg0: 'Font') -> 'FontMetrics':
        """public java.awt.FontMetrics javax.swing.JComponent.getFontMetrics(java.awt.Font)"""
        return 'FontMetrics'._wrap(super(_JComponent, self).getFontMetrics(arg0))

    @overload
    def getListeners(self, arg0: 'Class') -> List['EventListener']:
        """public <T extends java.util.EventListener> T[] javax.swing.JComponent.getListeners(java.lang.Class<T>)"""
        return List['EventListener']._wrap(super(_JComponent, self).getListeners(arg0))

    @override
    @overload
    def getHierarchyBoundsListeners(self) -> List['HierarchyBoundsListener']:
        """public synchronized java.awt.event.HierarchyBoundsListener[] java.awt.Component.getHierarchyBoundsListeners()"""
        return List['HierarchyBoundsListener']._wrap(super(Component, self).getHierarchyBoundsListeners())

    @override
    @overload
    def minimumSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.minimumSize()"""
        return 'Dimension'._wrap(super(Container, self).minimumSize())

    @overload
    def handleEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.handleEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).handleEvent(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @override
    @overload
    def getComponentListeners(self) -> List['ComponentListener']:
        """public synchronized java.awt.event.ComponentListener[] java.awt.Component.getComponentListeners()"""
        return List['ComponentListener']._wrap(super(Component, self).getComponentListeners())

    @override
    @overload
    def computeVisibleRect(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.computeVisibleRect(java.awt.Rectangle)"""
        super(_JComponent, self).computeVisibleRect(arg0)

    @override
    @overload
    def deliverEvent(self, arg0: 'Event'):
        """public void java.awt.Container.deliverEvent(java.awt.Event)"""
        super(_Container, self).deliverEvent(arg0)

    @override
    @overload
    def addHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.addHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).addHierarchyBoundsListener(arg0)

    @override
    @overload
    def getAlignmentX(self) -> float:
        """public float javax.swing.JComponent.getAlignmentX()"""
        return float._wrap(super(JComponent, self).getAlignmentX())

    @overload
    def add(self, arg0: 'Component', arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component,int)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def repaint(self):
        """public void java.awt.Component.repaint()"""
        super(Component, self).repaint()

    @overload
    def gotFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.gotFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).gotFocus(arg0, arg1))

    @override
    @overload
    def createToolTip(self) -> 'JToolTip':
        """public javax.swing.JToolTip javax.swing.JComponent.createToolTip()"""
        return 'JToolTip'._wrap(super(JComponent, self).createToolTip())

    @overload
    def getToolTipText(self, arg0: 'MouseEvent') -> str:
        """public java.lang.String javax.swing.JComponent.getToolTipText(java.awt.event.MouseEvent)"""
        return str._wrap(super(_JComponent, self).getToolTipText(arg0))

    @override
    @overload
    def printComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.printComponents(java.awt.Graphics)"""
        super(_Container, self).printComponents(arg0)

    @override
    @overload
    def getColorModel(self) -> 'ColorModel':
        """public java.awt.image.ColorModel java.awt.Component.getColorModel()"""
        return 'ColorModel'._wrap(super(Component, self).getColorModel())

    @override
    @overload
    def setFocusTraversalPolicyProvider(self, arg0: bool):
        """public final void java.awt.Container.setFocusTraversalPolicyProvider(boolean)"""
        super(_Container, self).setFocusTraversalPolicyProvider(_boolean.valueOf(arg0))

    @overload
    def getComponentZOrder(self, arg0: 'Component') -> int:
        """public int java.awt.Container.getComponentZOrder(java.awt.Component)"""
        return int._wrap(super(_Container, self).getComponentZOrder(arg0))

    @override
    @overload
    def getDebugGraphicsOptions(self) -> int:
        """public int javax.swing.JComponent.getDebugGraphicsOptions()"""
        return int._wrap(super(JComponent, self).getDebugGraphicsOptions())

    @overload
    def areFocusTraversalKeysSet(self, arg0: int) -> bool:
        """public boolean java.awt.Container.areFocusTraversalKeysSet(int)"""
        return bool._wrap(super(_Container, self).areFocusTraversalKeysSet(_int.valueOf(arg0)))

    @override
    @overload
    def getSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.getSize()"""
        return 'Dimension'._wrap(super(Component, self).getSize())

    @override
    @overload
    def setName(self, arg0: str):
        """public void java.awt.Component.setName(java.lang.String)"""
        super(_Component, self).setName(arg0)

    @override
    @overload
    def repaint(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.repaint(java.awt.Rectangle)"""
        super(_JComponent, self).repaint(arg0)

    @overload
    def getClientProperty(self, arg0: object) -> object:
        """public final java.lang.Object javax.swing.JComponent.getClientProperty(java.lang.Object)"""
        return object._wrap(super(_JComponent, self).getClientProperty(arg0))

    @override
    @overload
    def unregisterKeyboardAction(self, arg0: 'KeyStroke'):
        """public void javax.swing.JComponent.unregisterKeyboardAction(javax.swing.KeyStroke)"""
        super(_JComponent, self).unregisterKeyboardAction(arg0)

    @overload
    def requestFocus(self, arg0: bool) -> bool:
        """public boolean javax.swing.JComponent.requestFocus(boolean)"""
        return bool._wrap(super(_JComponent, self).requestFocus(_boolean.valueOf(arg0)))

    @override
    @overload
    def setActionMap(self, arg0: 'ActionMap'):
        """public final void javax.swing.JComponent.setActionMap(javax.swing.ActionMap)"""
        super(_JComponent, self).setActionMap(arg0)

    @override
    @overload
    def getX(self) -> int:
        """public int javax.swing.JComponent.getX()"""
        return int._wrap(super(JComponent, self).getX())

    @overload
    def mouseEnter(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseEnter(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseEnter(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def updateUI(self):
        """public void javax.swing.JPanel.updateUI()"""
        super(JPanel, self).updateUI()

    @override
    @overload
    def getToolkit(self) -> 'Toolkit':
        """public java.awt.Toolkit java.awt.Component.getToolkit()"""
        return 'Toolkit'._wrap(super(Component, self).getToolkit())

    @override
    @overload
    def isCursorSet(self) -> bool:
        """public boolean java.awt.Component.isCursorSet()"""
        return bool._wrap(super(Component, self).isCursorSet())

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object, arg2: int):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object,int)"""
        super(_Container, self).add(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def setPreferredSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setPreferredSize(java.awt.Dimension)"""
        super(_JComponent, self).setPreferredSize(arg0)

    @override
    @overload
    def setBounds(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.setBounds(int,int,int,int)"""
        super(_Component, self).setBounds(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def isFocusTraversalPolicySet(self) -> bool:
        """public boolean java.awt.Container.isFocusTraversalPolicySet()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicySet())

    @override
    @overload
    def requestFocus(self):
        """public void javax.swing.JComponent.requestFocus()"""
        super(JComponent, self).requestFocus()

    @override
    @overload
    def getAncestorListeners(self) -> List['AncestorListener']:
        """public javax.swing.event.AncestorListener[] javax.swing.JComponent.getAncestorListeners()"""
        return List['AncestorListener']._wrap(super(JComponent, self).getAncestorListeners())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool._wrap(super(_object, self).equals(arg0))

    @overload
    def getInputMap(self, arg0: int) -> 'InputMap':
        """public final javax.swing.InputMap javax.swing.JComponent.getInputMap(int)"""
        return 'InputMap'._wrap(super(_JComponent, self).getInputMap(_int.valueOf(arg0)))

    @override
    @overload
    def isEnabled(self) -> bool:
        """public boolean java.awt.Component.isEnabled()"""
        return bool._wrap(super(Component, self).isEnabled())

    @override
    @overload
    def move(self, arg0: int, arg1: int):
        """public void java.awt.Component.move(int,int)"""
        super(_Component, self).move(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getName(self) -> str:
        """public java.lang.String java.awt.Component.getName()"""
        return str._wrap(super(Component, self).getName())

    @override
    @overload
    def addMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.addMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).addMouseMotionListener(arg0)

    @override
    @overload
    def getIgnoreRepaint(self) -> bool:
        """public boolean java.awt.Component.getIgnoreRepaint()"""
        return bool._wrap(super(Component, self).getIgnoreRepaint())

    @overload
    def isFocusCycleRoot(self, arg0: 'Container') -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot(java.awt.Container)"""
        return bool._wrap(super(_Container, self).isFocusCycleRoot(arg0))

    @override
    @overload
    def getGraphics(self) -> 'Graphics':
        """public java.awt.Graphics javax.swing.JComponent.getGraphics()"""
        return 'Graphics'._wrap(super(JComponent, self).getGraphics())

    @override
    @overload
    def setLocale(self, arg0: 'Locale'):
        """public void java.awt.Component.setLocale(java.util.Locale)"""
        super(_Component, self).setLocale(arg0)

    @override
    @overload
    def paintAll(self, arg0: 'Graphics'):
        """public void java.awt.Component.paintAll(java.awt.Graphics)"""
        super(_Component, self).paintAll(arg0)

    @override
    @overload
    def setDoubleBuffered(self, arg0: bool):
        """public void javax.swing.JComponent.setDoubleBuffered(boolean)"""
        super(_JComponent, self).setDoubleBuffered(_boolean.valueOf(arg0))

    @override
    @overload
    def isPreferredSizeSet(self) -> bool:
        """public boolean java.awt.Component.isPreferredSizeSet()"""
        return bool._wrap(super(Component, self).isPreferredSizeSet())

    @override
    @overload
    def addInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.addInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).addInputMethodListener(arg0)

    @override
    @overload
    def removeMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.removeMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).removeMouseWheelListener(arg0)

    @override
    @overload
    def getInputMap(self) -> 'InputMap':
        """public final javax.swing.InputMap javax.swing.JComponent.getInputMap()"""
        return 'InputMap'._wrap(super(JComponent, self).getInputMap())

    @override
    @overload
    def setVisible(self, arg0: bool):
        """public void javax.swing.JComponent.setVisible(boolean)"""
        super(_JComponent, self).setVisible(_boolean.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,byte,byte)"""
        super(_Component, self).firePropertyChange(arg0, _byte.valueOf(arg1), _byte.valueOf(arg2))

    @override
    @overload
    def getUIClassID(self) -> str:
        """public java.lang.String javax.swing.JPanel.getUIClassID()"""
        return str._wrap(super(JPanel, self).getUIClassID())

    @override
    @overload
    def transferFocusDownCycle(self):
        """public void java.awt.Container.transferFocusDownCycle()"""
        super(Container, self).transferFocusDownCycle()

    @override
    @overload
    def getNextFocusableComponent(self) -> 'Component':
        """public java.awt.Component javax.swing.JComponent.getNextFocusableComponent()"""
        return 'Component'._wrap(super(JComponent, self).getNextFocusableComponent())

    @override
    @overload
    def getUI(self) -> 'PanelUI':
        """public javax.swing.plaf.PanelUI javax.swing.JPanel.getUI()"""
        return 'PanelUI'._wrap(super(JPanel, self).getUI())

    @override
    @overload
    def setBounds(self, arg0: 'Rectangle'):
        """public void java.awt.Component.setBounds(java.awt.Rectangle)"""
        super(_Component, self).setBounds(arg0)

    @override
    @overload
    def repaint(self, arg0: int):
        """public void java.awt.Component.repaint(long)"""
        super(_Component, self).repaint(_long.valueOf(arg0))

    @override
    @overload
    def removeHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.removeHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).removeHierarchyBoundsListener(arg0)

    @override
    @overload
    def getComponentPopupMenu(self) -> 'JPopupMenu':
        """public javax.swing.JPopupMenu javax.swing.JComponent.getComponentPopupMenu()"""
        return 'JPopupMenu'._wrap(super(JComponent, self).getComponentPopupMenu())

    @override
    @overload
    def getMousePosition(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getMousePosition() throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(Component, self).getMousePosition())

    @override
    @overload
    def getComponentCount(self) -> int:
        """public int java.awt.Container.getComponentCount()"""
        return int._wrap(super(Container, self).getComponentCount())

    @override
    @overload
    def getInputMethodRequests(self) -> 'InputMethodRequests':
        """public java.awt.im.InputMethodRequests java.awt.Component.getInputMethodRequests()"""
        return 'InputMethodRequests'._wrap(super(Component, self).getInputMethodRequests())

    @override
    @overload
    def setMaximumSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setMaximumSize(java.awt.Dimension)"""
        super(_JComponent, self).setMaximumSize(arg0)

    @override
    @overload
    def setRequestFocusEnabled(self, arg0: bool):
        """public void javax.swing.JComponent.setRequestFocusEnabled(boolean)"""
        super(_JComponent, self).setRequestFocusEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def setFocusTraversalKeys(self, arg0: int, arg1: 'Set'):
        """public void javax.swing.JComponent.setFocusTraversalKeys(int,java.util.Set<? extends java.awt.AWTKeyStroke>)"""
        super(_JComponent, self).setFocusTraversalKeys(_int.valueOf(arg0), arg1)

    @overload
    def inside(self, arg0: int, arg1: int) -> bool:
        """public boolean java.awt.Component.inside(int,int)"""
        return bool._wrap(super(_Component, self).inside(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def requestDefaultFocus(self) -> bool:
        """public boolean javax.swing.JComponent.requestDefaultFocus()"""
        return bool._wrap(super(JComponent, self).requestDefaultFocus())

    @override
    @overload
    def disable(self):
        """public void javax.swing.JComponent.disable()"""
        super(JComponent, self).disable()

    @override
    @overload
    def enableInputMethods(self, arg0: bool):
        """public void java.awt.Component.enableInputMethods(boolean)"""
        super(_Component, self).enableInputMethods(_boolean.valueOf(arg0))

    @override
    @overload
    def layout(self):
        """public void java.awt.Container.layout()"""
        super(Container, self).layout()

    @override
    @overload
    def getInputMethodListeners(self) -> List['InputMethodListener']:
        """public synchronized java.awt.event.InputMethodListener[] java.awt.Component.getInputMethodListeners()"""
        return List['InputMethodListener']._wrap(super(Component, self).getInputMethodListeners())

    @override
    @overload
    def paint(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.paint(java.awt.Graphics)"""
        super(_JComponent, self).paint(arg0)

    @override
    @overload
    def transferFocus(self):
        """public void java.awt.Component.transferFocus()"""
        super(Component, self).transferFocus()

    @override
    @overload
    def removeComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.removeComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).removeComponentListener(arg0)

    @override
    @overload
    def getCursor(self) -> 'Cursor':
        """public java.awt.Cursor java.awt.Component.getCursor()"""
        return 'Cursor'._wrap(super(Component, self).getCursor())

    @override
    @overload
    def setMinimumSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setMinimumSize(java.awt.Dimension)"""
        super(_JComponent, self).setMinimumSize(arg0)

    @override
    @overload
    def getContainerListeners(self) -> List['ContainerListener']:
        """public synchronized java.awt.event.ContainerListener[] java.awt.Container.getContainerListeners()"""
        return List['ContainerListener']._wrap(super(Container, self).getContainerListeners())

    @override
    @overload
    def setLocation(self, arg0: 'Point'):
        """public void java.awt.Component.setLocation(java.awt.Point)"""
        super(_Component, self).setLocation(arg0)

    @override
    @overload
    def setSize(self, arg0: 'Dimension'):
        """public void java.awt.Component.setSize(java.awt.Dimension)"""
        super(_Component, self).setSize(arg0)

    @override
    @overload
    def removeAll(self):
        """public void java.awt.Container.removeAll()"""
        super(Container, self).removeAll()

    @overload
    def getPopupLocation(self, arg0: 'MouseEvent') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getPopupLocation(java.awt.event.MouseEvent)"""
        return 'Point'._wrap(super(_JComponent, self).getPopupLocation(arg0))

    @overload
    def isAncestorOf(self, arg0: 'Component') -> bool:
        """public boolean java.awt.Container.isAncestorOf(java.awt.Component)"""
        return bool._wrap(super(_Container, self).isAncestorOf(arg0))

    @override
    @overload
    def setOpaque(self, arg0: bool):
        """public void javax.swing.JComponent.setOpaque(boolean)"""
        super(_JComponent, self).setOpaque(_boolean.valueOf(arg0))

    @override
    @overload
    def getPreferredSize(self) -> 'Dimension':
        """public java.awt.Dimension com.badlogic.gdx.tools.flame.GradientPanel$ColorSlider.getPreferredSize()"""
        return 'Dimension'._wrap(super(ColorSlider, self).getPreferredSize())

    @overload
    def contains(self, arg0: int, arg1: int) -> bool:
        """public boolean javax.swing.JComponent.contains(int,int)"""
        return bool._wrap(super(_JComponent, self).contains(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def setCursor(self, arg0: 'Cursor'):
        """public void java.awt.Component.setCursor(java.awt.Cursor)"""
        super(_Component, self).setCursor(arg0)

    @override
    @overload
    def validate(self):
        """public void java.awt.Container.validate()"""
        super(Container, self).validate()

    @override
    @overload
    def getMaximumSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getMaximumSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getMaximumSize())

    @override
    @overload
    def getBackground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getBackground()"""
        return 'Color'._wrap(super(Component, self).getBackground())

    @overload
    def createImage(self, arg0: 'ImageProducer') -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(java.awt.image.ImageProducer)"""
        return 'Image'._wrap(super(_Component, self).createImage(arg0))

    @override
    @overload
    def setVerifyInputWhenFocusTarget(self, arg0: bool):
        """public void javax.swing.JComponent.setVerifyInputWhenFocusTarget(boolean)"""
        super(_JComponent, self).setVerifyInputWhenFocusTarget(_boolean.valueOf(arg0))

    @override
    @overload
    def removePropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0, arg1)

    @override
    @overload
    def countComponents(self) -> int:
        """public int java.awt.Container.countComponents()"""
        return int._wrap(super(Container, self).countComponents()) 
 
 
# CLASS: com.badlogic.gdx.tools.flame.LoaderButton$ParticleEffectLoaderButton
import javax.swing.Action as _Action
_Action = _Action
import javax.accessibility.AccessibleContext as AccessibleContext
import javax.swing.JToolTip as JToolTip
import java.awt.event.HierarchyBoundsListener as HierarchyBoundsListener
import java.awt.event.ActionListener as _ActionListener
_ActionListener = _ActionListener
import java.awt.ComponentOrientation as _ComponentOrientation
_ComponentOrientation = _ComponentOrientation
import java.awt.image.ImageProducer as ImageProducer
import java.awt.GraphicsConfiguration as GraphicsConfiguration
import java.awt.Graphics as _Graphics
_Graphics = _Graphics
import javax.swing.JToolTip as _JToolTip
_JToolTip = _JToolTip
import java.awt.Container as _Container
_Container = _Container
import java.awt.MenuComponent as MenuComponent
import java.awt.im.InputMethodRequests as _InputMethodRequests
_InputMethodRequests = _InputMethodRequests
import java.awt.FocusTraversalPolicy as _FocusTraversalPolicy
_FocusTraversalPolicy = _FocusTraversalPolicy
import java.lang.Byte as _byte
import java.awt.Dimension as Dimension
import java.awt.Font as _Font
_Font = _Font
import java.awt.event.ContainerListener as ContainerListener
import javax.swing.event.AncestorListener as AncestorListener
import java.awt.AWTEvent as AWTEvent
import java.awt.image.ColorModel as _ColorModel
_ColorModel = _ColorModel
import java.lang.Object as _object
import java.awt.ComponentOrientation as ComponentOrientation
import java.awt.im.InputContext as _InputContext
_InputContext = _InputContext
from builtins import float
import java.awt.event.HierarchyListener as HierarchyListener
import com.badlogic.gdx.tools.flame.LoaderButton as _LoaderButton
_LoaderButton = _LoaderButton
import java.awt.event.InputMethodListener as InputMethodListener
from typing import List
import javax.swing.event.ChangeListener as ChangeListener
import java.awt.event.MouseWheelListener as _MouseWheelListener
_MouseWheelListener = _MouseWheelListener
import javax.swing.JButton as _JButton
_JButton = _JButton
import java.awt.event.KeyListener as KeyListener
import java.awt.Component as Component
from builtins import int
import java.awt.LayoutManager as LayoutManager
import java.awt.FontMetrics as _FontMetrics
_FontMetrics = _FontMetrics
import java.awt.Container as Container
from builtins import type
import java.awt.image.VolatileImage as _VolatileImage
_VolatileImage = _VolatileImage
import java.awt.Shape as Shape
import java.awt.Rectangle as Rectangle
import java.awt.event.ContainerListener as _ContainerListener
_ContainerListener = _ContainerListener
import java.awt.event.HierarchyListener as _HierarchyListener
_HierarchyListener = _HierarchyListener
import java.lang.String as _string
import javax.swing.InputVerifier as _InputVerifier
_InputVerifier = _InputVerifier
import java.awt.Insets as _Insets
_Insets = _Insets
import javax.swing.Icon as Icon
import javax.swing.event.ChangeListener as _ChangeListener
_ChangeListener = _ChangeListener
import javax.swing.border.Border as _Border
_Border = _Border
import java.awt.event.ComponentListener as _ComponentListener
_ComponentListener = _ComponentListener
import javax.swing.ActionMap as ActionMap
import java.beans.VetoableChangeListener as VetoableChangeListener
import javax.swing.Icon as _Icon
_Icon = _Icon
import java.awt.event.ComponentListener as ComponentListener
import javax.swing.KeyStroke as KeyStroke
import java.beans.VetoableChangeListener as _VetoableChangeListener
_VetoableChangeListener = _VetoableChangeListener
from builtins import object
import java.awt.event.KeyListener as _KeyListener
_KeyListener = _KeyListener
import java.awt.Component.BaselineResizeBehavior as BaselineResizeBehavior
import java.awt.Component as _Component_BaselineResizeBehavior
_BaselineResizeBehavior = _Component_BaselineResizeBehavior.BaselineResizeBehavior
import javax.swing.plaf.ButtonUI as _ButtonUI
_ButtonUI = _ButtonUI
import javax.swing.ButtonModel as _ButtonModel
_ButtonModel = _ButtonModel
import java.awt.Cursor as _Cursor
_Cursor = _Cursor
import java.awt.im.InputMethodRequests as InputMethodRequests
import java.lang.Long as _long
import java.awt.event.FocusListener as _FocusListener
_FocusListener = _FocusListener
import java.lang.Character as _char
import javax.swing.TransferHandler as TransferHandler
import java.awt.event.ItemListener as ItemListener
import java.awt.event.FocusEvent.Cause as Cause
import javax.accessibility.AccessibleContext as _AccessibleContext
_AccessibleContext = _AccessibleContext
import java.awt.event.MouseWheelListener as MouseWheelListener
import java.util.Set as _Set
_Set = _Set
import java.awt.image.ColorModel as ColorModel
import java.lang.Boolean as _boolean
import java.awt.event.MouseMotionListener as MouseMotionListener
import java.util.EventListener as EventListener
import java.awt.Insets as Insets
import javax.swing.Action as Action
import javax.swing.KeyStroke as _KeyStroke
_KeyStroke = _KeyStroke
import java.awt.GraphicsConfiguration as _GraphicsConfiguration
_GraphicsConfiguration = _GraphicsConfiguration
import java.awt.dnd.DropTarget as _DropTarget
_DropTarget = _DropTarget
from builtins import bool
import java.beans.PropertyChangeListener as _PropertyChangeListener
_PropertyChangeListener = _PropertyChangeListener
import java.awt.LayoutManager as _LayoutManager
_LayoutManager = _LayoutManager
import java.awt.PopupMenu as PopupMenu
import java.util.EventListener as _EventListener
_EventListener = _EventListener
import java.awt.im.InputContext as InputContext
import java.awt.event.ItemListener as _ItemListener
_ItemListener = _ItemListener
import java.awt.Component as _Component
_Component = _Component
import java.awt.Font as Font
import com.badlogic.gdx.tools.flame.LoaderButton as _LoaderButton_ParticleEffectLoaderButton
_ParticleEffectLoaderButton = _LoaderButton_ParticleEffectLoaderButton.ParticleEffectLoaderButton
import java.awt.image.VolatileImage as VolatileImage
import javax.swing.plaf.ButtonUI as ButtonUI
import java.awt.dnd.DropTarget as DropTarget
import java.lang.String as _String
_String = _String
import java.lang.Float as _float
import java.awt.Cursor as Cursor
import java.awt.event.MouseListener as _MouseListener
_MouseListener = _MouseListener
import java.awt.Toolkit as _Toolkit
_Toolkit = _Toolkit
import java.io.PrintStream as PrintStream
import javax.swing.JRootPane as _JRootPane
_JRootPane = _JRootPane
import java.awt.event.ActionListener as ActionListener
import java.awt.Dimension as _Dimension
_Dimension = _Dimension
import java.awt.event.MouseEvent as MouseEvent
import java.awt.Color as _Color
_Color = _Color
import javax.swing.JPopupMenu as _JPopupMenu
_JPopupMenu = _JPopupMenu
import javax.swing.InputMap as _InputMap
_InputMap = _InputMap
import java.awt.event.MouseListener as MouseListener
import java.lang.Class as _Class
_Class = _Class
import java.util.Locale as Locale
import java.lang.Double as _double
import java.lang.Object as _Object
_Object = _Object
import java.awt.Point as _Point
_Point = _Point
import java.beans.PropertyChangeListener as PropertyChangeListener
import javax.swing.border.Border as Border
import javax.swing.ButtonModel as ButtonModel
import javax.swing.JComponent as _JComponent
_JComponent = _JComponent
import javax.swing.InputVerifier as InputVerifier
import java.io.PrintWriter as PrintWriter
import java.awt.Point as Point
import javax.swing.event.AncestorListener as _AncestorListener
_AncestorListener = _AncestorListener
import java.lang.Short as _short
import java.awt.Toolkit as Toolkit
import java.awt.event.HierarchyBoundsListener as _HierarchyBoundsListener
_HierarchyBoundsListener = _HierarchyBoundsListener
import javax.swing.TransferHandler as _TransferHandler
_TransferHandler = _TransferHandler
import javax.swing.InputMap as InputMap
import java.awt.Rectangle as _Rectangle
_Rectangle = _Rectangle
import javax.swing.JRootPane as JRootPane
import java.awt.Event as Event
import java.awt.event.FocusListener as FocusListener
import java.awt.image.ImageObserver as ImageObserver
from builtins import str
from pyquantum_helper import override
import javax.swing.ActionMap as _ActionMap
_ActionMap = _ActionMap
import java.awt.FocusTraversalPolicy as FocusTraversalPolicy
import java.awt.event.MouseMotionListener as _MouseMotionListener
_MouseMotionListener = _MouseMotionListener
import java.awt.event.InputMethodListener as _InputMethodListener
_InputMethodListener = _InputMethodListener
import javax.swing.AbstractButton as _AbstractButton
_AbstractButton = _AbstractButton
import javax.swing.JPopupMenu as JPopupMenu
import java.util.Set as Set
import java.lang.Integer as _int
import java.awt.Image as _Image
_Image = _Image
import java.awt.FontMetrics as FontMetrics
import java.awt.Color as Color
import java.awt.Image as Image
import java.awt.Graphics as Graphics
import java.awt.ImageCapabilities as ImageCapabilities
import java.util.Locale as _Locale
_Locale = _Locale
 
class ParticleEffectLoaderButton():
    """com.badlogic.gdx.tools.flame.LoaderButton.ParticleEffectLoaderButton"""
 
    @staticmethod
    def _wrap(java_value: _ParticleEffectLoaderButton) -> 'ParticleEffectLoaderButton':
        return ParticleEffectLoaderButton(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _ParticleEffectLoaderButton):
        """
        Dynamic initializer for ParticleEffectLoaderButton.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_ParticleEffectLoaderButton__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_ParticleEffectLoaderButton__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def isValid(self) -> bool:
        """public boolean java.awt.Component.isValid()"""
        return bool._wrap(super(Component, self).isValid())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def getDefaultLocale() -> 'Locale':
        """public static java.util.Locale javax.swing.JComponent.getDefaultLocale()"""
        return Locale._wrap(_JComponent.getDefaultLocale())

    @override
    @overload
    def getInputVerifier(self) -> 'InputVerifier':
        """public javax.swing.InputVerifier javax.swing.JComponent.getInputVerifier()"""
        return 'InputVerifier'._wrap(super(JComponent, self).getInputVerifier())

    @override
    @overload
    def getParent(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getParent()"""
        return 'Container'._wrap(super(Component, self).getParent())

    @override
    @overload
    def paintImmediately(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.paintImmediately(java.awt.Rectangle)"""
        super(_JComponent, self).paintImmediately(arg0)

    @staticmethod
    @overload
    def setDefaultLocale(arg0: 'Locale'):
        """public static void javax.swing.JComponent.setDefaultLocale(java.util.Locale)"""
        _JComponent.setDefaultLocale(arg0)

    @override
    @overload
    def getLocale(self) -> 'Locale':
        """public java.util.Locale java.awt.Component.getLocale()"""
        return 'Locale'._wrap(super(Component, self).getLocale())

    @override
    @overload
    def setInheritsPopupMenu(self, arg0: bool):
        """public void javax.swing.JComponent.setInheritsPopupMenu(boolean)"""
        super(_JComponent, self).setInheritsPopupMenu(_boolean.valueOf(arg0))

    @override
    @overload
    def getHierarchyListeners(self) -> List['HierarchyListener']:
        """public synchronized java.awt.event.HierarchyListener[] java.awt.Component.getHierarchyListeners()"""
        return List['HierarchyListener']._wrap(super(Component, self).getHierarchyListeners())

    @override
    @overload
    def isPaintingTile(self) -> bool:
        """public boolean javax.swing.JComponent.isPaintingTile()"""
        return bool._wrap(super(JComponent, self).isPaintingTile())

    @override
    @overload
    def isDisplayable(self) -> bool:
        """public boolean java.awt.Component.isDisplayable()"""
        return bool._wrap(super(Component, self).isDisplayable())

    @override
    @overload
    def getHideActionText(self) -> bool:
        """public boolean javax.swing.AbstractButton.getHideActionText()"""
        return bool._wrap(super(AbstractButton, self).getHideActionText())

    @override
    @overload
    def getBounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.getBounds()"""
        return 'Rectangle'._wrap(super(Component, self).getBounds())

    @override
    @overload
    def removeMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.removeMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).removeMouseMotionListener(arg0)

    @override
    @overload
    def isShowing(self) -> bool:
        """public boolean java.awt.Component.isShowing()"""
        return bool._wrap(super(Component, self).isShowing())

    @override
    @overload
    def getDropTarget(self) -> 'DropTarget':
        """public synchronized java.awt.dnd.DropTarget java.awt.Component.getDropTarget()"""
        return 'DropTarget'._wrap(super(Component, self).getDropTarget())

    @override
    @overload
    def isFontSet(self) -> bool:
        """public boolean java.awt.Component.isFontSet()"""
        return bool._wrap(super(Component, self).isFontSet())

    @override
    @overload
    def getDisplayedMnemonicIndex(self) -> int:
        """public int javax.swing.AbstractButton.getDisplayedMnemonicIndex()"""
        return int._wrap(super(AbstractButton, self).getDisplayedMnemonicIndex())

    @override
    @overload
    def setIgnoreRepaint(self, arg0: bool):
        """public void java.awt.Component.setIgnoreRepaint(boolean)"""
        super(_Component, self).setIgnoreRepaint(_boolean.valueOf(arg0))

    @override
    @overload
    def getPropertyChangeListeners(self) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners()"""
        return List['PropertyChangeListener']._wrap(super(Component, self).getPropertyChangeListeners())

    @override
    @overload
    def isBackgroundSet(self) -> bool:
        """public boolean java.awt.Component.isBackgroundSet()"""
        return bool._wrap(super(Component, self).isBackgroundSet())

    @override
    @overload
    def location(self) -> 'Point':
        """public java.awt.Point java.awt.Component.location()"""
        return 'Point'._wrap(super(Component, self).location())

    @override
    @overload
    def getComponentOrientation(self) -> 'ComponentOrientation':
        """public java.awt.ComponentOrientation java.awt.Component.getComponentOrientation()"""
        return 'ComponentOrientation'._wrap(super(Component, self).getComponentOrientation())

    @overload
    def __init__(self, arg0: 'FlameMain'):
        """public com.badlogic.gdx.tools.flame.LoaderButton$ParticleEffectLoaderButton(com.badlogic.gdx.tools.flame.FlameMain)"""
        val = _ParticleEffectLoaderButton(arg0)
        self.__wrapper = val

    @override
    @overload
    def addHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.addHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).addHierarchyListener(arg0)

    @override
    @overload
    def getInheritsPopupMenu(self) -> bool:
        """public boolean javax.swing.JComponent.getInheritsPopupMenu()"""
        return bool._wrap(super(JComponent, self).getInheritsPopupMenu())

    @override
    @overload
    def getFocusCycleRootAncestor(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getFocusCycleRootAncestor()"""
        return 'Container'._wrap(super(Component, self).getFocusCycleRootAncestor())

    @override
    @overload
    def show(self, arg0: bool):
        """public void java.awt.Component.show(boolean)"""
        super(_Component, self).show(_boolean.valueOf(arg0))

    @overload
    def locate(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.locate(int,int)"""
        return 'Component'._wrap(super(_Container, self).locate(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def isPaintingForPrint(self) -> bool:
        """public final boolean javax.swing.JComponent.isPaintingForPrint()"""
        return bool._wrap(super(JComponent, self).isPaintingForPrint())

    @override
    @overload
    def preferredSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.preferredSize()"""
        return 'Dimension'._wrap(super(Container, self).preferredSize())

    @overload
    def requestFocusInWindow(self, arg0: 'Cause') -> bool:
        """public boolean java.awt.Component.requestFocusInWindow(java.awt.event.FocusEvent$Cause)"""
        return bool._wrap(super(_Component, self).requestFocusInWindow(arg0))

    @override
    @overload
    def remove(self, arg0: int):
        """public void java.awt.Container.remove(int)"""
        super(_Container, self).remove(_int.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,long,long)"""
        super(_Component, self).firePropertyChange(arg0, _long.valueOf(arg1), _long.valueOf(arg2))

    @override
    @overload
    def setFocusCycleRoot(self, arg0: bool):
        """public void java.awt.Container.setFocusCycleRoot(boolean)"""
        super(_Container, self).setFocusCycleRoot(_boolean.valueOf(arg0))

    @override
    @overload
    def enable(self):
        """public void javax.swing.JComponent.enable()"""
        super(JComponent, self).enable()

    @overload
    def checkImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @override
    @overload
    def getFocusTraversalKeysEnabled(self) -> bool:
        """public boolean java.awt.Component.getFocusTraversalKeysEnabled()"""
        return bool._wrap(super(Component, self).getFocusTraversalKeysEnabled())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def setDisabledSelectedIcon(self, arg0: 'Icon'):
        """public void javax.swing.AbstractButton.setDisabledSelectedIcon(javax.swing.Icon)"""
        super(_AbstractButton, self).setDisabledSelectedIcon(arg0)

    @override
    @overload
    def getRootPane(self) -> 'JRootPane':
        """public javax.swing.JRootPane javax.swing.JComponent.getRootPane()"""
        return 'JRootPane'._wrap(super(JComponent, self).getRootPane())

    @override
    @overload
    def invalidate(self):
        """public void java.awt.Container.invalidate()"""
        super(Container, self).invalidate()

    @overload
    def getComponent(self, arg0: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponent(int)"""
        return 'Component'._wrap(super(_Container, self).getComponent(_int.valueOf(arg0)))

    @override
    @overload
    def setLayout(self, arg0: 'LayoutManager'):
        """public void javax.swing.AbstractButton.setLayout(java.awt.LayoutManager)"""
        super(_AbstractButton, self).setLayout(arg0)

    @override
    @overload
    def setInputMap(self, arg0: int, arg1: 'InputMap'):
        """public final void javax.swing.JComponent.setInputMap(int,javax.swing.InputMap)"""
        super(_JComponent, self).setInputMap(_int.valueOf(arg0), arg1)

    @override
    @overload
    def removePropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0)

    @override
    @overload
    def setBorder(self, arg0: 'Border'):
        """public void javax.swing.JComponent.setBorder(javax.swing.border.Border)"""
        super(_JComponent, self).setBorder(arg0)

    @override
    @overload
    def remove(self, arg0: 'MenuComponent'):
        """public void java.awt.Component.remove(java.awt.MenuComponent)"""
        super(_Component, self).remove(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintStream'):
        """public void java.awt.Component.list(java.io.PrintStream)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintWriter'):
        """public void java.awt.Component.list(java.io.PrintWriter)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def setEnabled(self, arg0: bool):
        """public void javax.swing.AbstractButton.setEnabled(boolean)"""
        super(_AbstractButton, self).setEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def getKeyListeners(self) -> List['KeyListener']:
        """public synchronized java.awt.event.KeyListener[] java.awt.Component.getKeyListeners()"""
        return List['KeyListener']._wrap(super(Component, self).getKeyListeners())

    @overload
    def mouseDown(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDown(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDown(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def addChangeListener(self, arg0: 'ChangeListener'):
        """public void javax.swing.AbstractButton.addChangeListener(javax.swing.event.ChangeListener)"""
        super(_AbstractButton, self).addChangeListener(arg0)

    @override
    @overload
    def getIconTextGap(self) -> int:
        """public int javax.swing.AbstractButton.getIconTextGap()"""
        return int._wrap(super(AbstractButton, self).getIconTextGap())

    @override
    @overload
    def addVetoableChangeListener(self, arg0: 'VetoableChangeListener'):
        """public synchronized void javax.swing.JComponent.addVetoableChangeListener(java.beans.VetoableChangeListener)"""
        super(_JComponent, self).addVetoableChangeListener(arg0)

    @overload
    def contains(self, arg0: 'Point') -> bool:
        """public boolean java.awt.Component.contains(java.awt.Point)"""
        return bool._wrap(super(_Component, self).contains(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,short,short)"""
        super(_Component, self).firePropertyChange(arg0, _short.valueOf(arg1), _short.valueOf(arg2))

    @override
    @overload
    def dispatchEvent(self, arg0: 'AWTEvent'):
        """public final void java.awt.Component.dispatchEvent(java.awt.AWTEvent)"""
        super(_Component, self).dispatchEvent(arg0)

    @override
    @overload
    def setHorizontalTextPosition(self, arg0: int):
        """public void javax.swing.AbstractButton.setHorizontalTextPosition(int)"""
        super(_AbstractButton, self).setHorizontalTextPosition(_int.valueOf(arg0))

    @override
    @overload
    def getWidth(self) -> int:
        """public int javax.swing.JComponent.getWidth()"""
        return int._wrap(super(JComponent, self).getWidth())

    @override
    @overload
    def setActionCommand(self, arg0: str):
        """public void javax.swing.AbstractButton.setActionCommand(java.lang.String)"""
        super(_AbstractButton, self).setActionCommand(arg0)

    @override
    @overload
    def getBorder(self) -> 'Border':
        """public javax.swing.border.Border javax.swing.JComponent.getBorder()"""
        return 'Border'._wrap(super(JComponent, self).getBorder())

    @override
    @overload
    def setFocusPainted(self, arg0: bool):
        """public void javax.swing.AbstractButton.setFocusPainted(boolean)"""
        super(_AbstractButton, self).setFocusPainted(_boolean.valueOf(arg0))

    @override
    @overload
    def addComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.addComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).addComponentListener(arg0)

    @override
    @overload
    def getBaselineResizeBehavior(self) -> 'BaselineResizeBehavior.Component$BaselineResizeBehavior':
        """public java.awt.Component$BaselineResizeBehavior javax.swing.JComponent.getBaselineResizeBehavior()"""
        return 'BaselineResizeBehavior.Component$BaselineResizeBehavior'._wrap(super(JComponent, self).getBaselineResizeBehavior())

    @override
    @overload
    def addAncestorListener(self, arg0: 'AncestorListener'):
        """public void javax.swing.JComponent.addAncestorListener(javax.swing.event.AncestorListener)"""
        super(_JComponent, self).addAncestorListener(arg0)

    @overload
    def prepareImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @overload
    def mouseDrag(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDrag(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDrag(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def isOpaque(self) -> bool:
        """public boolean javax.swing.JComponent.isOpaque()"""
        return bool._wrap(super(JComponent, self).isOpaque())

    @override
    @overload
    def update(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.update(java.awt.Graphics)"""
        super(_JComponent, self).update(arg0)

    @override
    @overload
    def getToolTipText(self) -> str:
        """public java.lang.String javax.swing.JComponent.getToolTipText()"""
        return str._wrap(super(JComponent, self).getToolTipText())

    @override
    @overload
    def getMnemonic(self) -> int:
        """public int javax.swing.AbstractButton.getMnemonic()"""
        return int._wrap(super(AbstractButton, self).getMnemonic())

    @override
    @overload
    def getLocationOnScreen(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocationOnScreen()"""
        return 'Point'._wrap(super(Component, self).getLocationOnScreen())

    @overload
    def getComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def getVerticalTextPosition(self) -> int:
        """public int javax.swing.AbstractButton.getVerticalTextPosition()"""
        return int._wrap(super(AbstractButton, self).getVerticalTextPosition())

    @override
    @overload
    def isMaximumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMaximumSizeSet()"""
        return bool._wrap(super(Component, self).isMaximumSizeSet())

    @override
    @overload
    def setAlignmentY(self, arg0: float):
        """public void javax.swing.JComponent.setAlignmentY(float)"""
        super(_JComponent, self).setAlignmentY(_float.valueOf(arg0))

    @override
    @overload
    def getRegisteredKeyStrokes(self) -> List['KeyStroke']:
        """public javax.swing.KeyStroke[] javax.swing.JComponent.getRegisteredKeyStrokes()"""
        return List['KeyStroke']._wrap(super(JComponent, self).getRegisteredKeyStrokes())

    @override
    @overload
    def isFocusTraversalPolicyProvider(self) -> bool:
        """public final boolean java.awt.Container.isFocusTraversalPolicyProvider()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicyProvider())

    @override
    @overload
    def getMouseListeners(self) -> List['MouseListener']:
        """public synchronized java.awt.event.MouseListener[] java.awt.Component.getMouseListeners()"""
        return List['MouseListener']._wrap(super(Component, self).getMouseListeners())

    @override
    @overload
    def registerKeyboardAction(self, arg0: 'ActionListener', arg1: 'KeyStroke', arg2: int):
        """public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,javax.swing.KeyStroke,int)"""
        super(_JComponent, self).registerKeyboardAction(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def removeKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.removeKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).removeKeyListener(arg0)

    @override
    @overload
    def getMouseMotionListeners(self) -> List['MouseMotionListener']:
        """public synchronized java.awt.event.MouseMotionListener[] java.awt.Component.getMouseMotionListeners()"""
        return List['MouseMotionListener']._wrap(super(Component, self).getMouseMotionListeners())

    @override
    @overload
    def addContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.addContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).addContainerListener(arg0)

    @override
    @overload
    def isFocusTraversable(self) -> bool:
        """public boolean java.awt.Component.isFocusTraversable()"""
        return bool._wrap(super(Component, self).isFocusTraversable())

    @override
    @overload
    def setVerticalAlignment(self, arg0: int):
        """public void javax.swing.AbstractButton.setVerticalAlignment(int)"""
        super(_AbstractButton, self).setVerticalAlignment(_int.valueOf(arg0))

    @overload
    def mouseExit(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseExit(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseExit(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getBounds(self, arg0: 'Rectangle') -> 'Rectangle':
        """public java.awt.Rectangle javax.swing.JComponent.getBounds(java.awt.Rectangle)"""
        return 'Rectangle'._wrap(super(_JComponent, self).getBounds(arg0))

    @override
    @overload
    def setAutoscrolls(self, arg0: bool):
        """public void javax.swing.JComponent.setAutoscrolls(boolean)"""
        super(_JComponent, self).setAutoscrolls(_boolean.valueOf(arg0))

    @override
    @overload
    def setComponentPopupMenu(self, arg0: 'JPopupMenu'):
        """public void javax.swing.JComponent.setComponentPopupMenu(javax.swing.JPopupMenu)"""
        super(_JComponent, self).setComponentPopupMenu(arg0)

    @override
    @overload
    def getVisibleRect(self) -> 'Rectangle':
        """public java.awt.Rectangle javax.swing.JComponent.getVisibleRect()"""
        return 'Rectangle'._wrap(super(JComponent, self).getVisibleRect())

    @overload
    def createImage(self, arg0: int, arg1: int) -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(int,int)"""
        return 'Image'._wrap(super(_Component, self).createImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeNotify(self):
        """public void javax.swing.JButton.removeNotify()"""
        super(JButton, self).removeNotify()

    @override
    @overload
    def scrollRectToVisible(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.scrollRectToVisible(java.awt.Rectangle)"""
        super(_JComponent, self).scrollRectToVisible(arg0)

    @override
    @overload
    def getRolloverSelectedIcon(self) -> 'Icon':
        """public javax.swing.Icon javax.swing.AbstractButton.getRolloverSelectedIcon()"""
        return 'Icon'._wrap(super(AbstractButton, self).getRolloverSelectedIcon())

    @override
    @overload
    def getMouseWheelListeners(self) -> List['MouseWheelListener']:
        """public synchronized java.awt.event.MouseWheelListener[] java.awt.Component.getMouseWheelListeners()"""
        return List['MouseWheelListener']._wrap(super(Component, self).getMouseWheelListeners())

    @override
    @overload
    def reshape(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void javax.swing.JComponent.reshape(int,int,int,int)"""
        super(_JComponent, self).reshape(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def setTransferHandler(self, arg0: 'TransferHandler'):
        """public void javax.swing.JComponent.setTransferHandler(javax.swing.TransferHandler)"""
        super(_JComponent, self).setTransferHandler(arg0)

    @override
    @overload
    def setSelected(self, arg0: bool):
        """public void javax.swing.AbstractButton.setSelected(boolean)"""
        super(_AbstractButton, self).setSelected(_boolean.valueOf(arg0))

    @override
    @overload
    def getPreferredSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getPreferredSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getPreferredSize())

    @override
    @overload
    def addFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.addFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).addFocusListener(arg0)

    @override
    @overload
    def addKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.addKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).addKeyListener(arg0)

    @override
    @overload
    def resize(self, arg0: 'Dimension'):
        """public void java.awt.Component.resize(java.awt.Dimension)"""
        super(_Component, self).resize(arg0)

    @override
    @overload
    def setComponentZOrder(self, arg0: 'Component', arg1: int):
        """public void java.awt.Container.setComponentZOrder(java.awt.Component,int)"""
        super(_Container, self).setComponentZOrder(arg0, _int.valueOf(arg1))

    @override
    @overload
    def list(self):
        """public void java.awt.Component.list()"""
        super(Component, self).list()

    @override
    @overload
    def getSelectedObjects(self) -> List[object]:
        """public java.lang.Object[] javax.swing.AbstractButton.getSelectedObjects()"""
        return List[object]._wrap(super(AbstractButton, self).getSelectedObjects())

    @override
    @overload
    def updateUI(self):
        """public void javax.swing.JButton.updateUI()"""
        super(JButton, self).updateUI()

    @override
    @overload
    def hasFocus(self) -> bool:
        """public boolean java.awt.Component.hasFocus()"""
        return bool._wrap(super(Component, self).hasFocus())

    @override
    @overload
    def setMargin(self, arg0: 'Insets'):
        """public void javax.swing.AbstractButton.setMargin(java.awt.Insets)"""
        super(_AbstractButton, self).setMargin(arg0)

    @override
    @overload
    def addMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.addMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).addMouseListener(arg0)

    @overload
    def postEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.postEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).postEvent(arg0))

    @overload
    def getLocation(self, arg0: 'Point') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getLocation(java.awt.Point)"""
        return 'Point'._wrap(super(_JComponent, self).getLocation(arg0))

    @overload
    def getBaseline(self, arg0: int, arg1: int) -> int:
        """public int javax.swing.JComponent.getBaseline(int,int)"""
        return int._wrap(super(_JComponent, self).getBaseline(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def findComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def setPressedIcon(self, arg0: 'Icon'):
        """public void javax.swing.AbstractButton.setPressedIcon(javax.swing.Icon)"""
        super(_AbstractButton, self).setPressedIcon(arg0)

    @override
    @overload
    def setListener(self, arg0: 'Listener'):
        """public void com.badlogic.gdx.tools.flame.LoaderButton.setListener(com.badlogic.gdx.tools.flame.LoaderButton$Listener)"""
        super(_LoaderButton, self).setListener(arg0)

    @override
    @overload
    def getForeground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getForeground()"""
        return 'Color'._wrap(super(Component, self).getForeground())

    @override
    @overload
    def show(self):
        """public void java.awt.Component.show()"""
        super(Component, self).show()

    @override
    @overload
    def isDoubleBuffered(self) -> bool:
        """public boolean javax.swing.JComponent.isDoubleBuffered()"""
        return bool._wrap(super(JComponent, self).isDoubleBuffered())

    @override
    @overload
    def addMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.addMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).addMouseWheelListener(arg0)

    @override
    @overload
    def getMargin(self) -> 'Insets':
        """public java.awt.Insets javax.swing.AbstractButton.getMargin()"""
        return 'Insets'._wrap(super(AbstractButton, self).getMargin())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def setRolloverSelectedIcon(self, arg0: 'Icon'):
        """public void javax.swing.AbstractButton.setRolloverSelectedIcon(javax.swing.Icon)"""
        super(_AbstractButton, self).setRolloverSelectedIcon(arg0)

    @override
    @overload
    def setRolloverEnabled(self, arg0: bool):
        """public void javax.swing.AbstractButton.setRolloverEnabled(boolean)"""
        super(_AbstractButton, self).setRolloverEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def isLightweight(self) -> bool:
        """public boolean java.awt.Component.isLightweight()"""
        return bool._wrap(super(Component, self).isLightweight())

    @override
    @overload
    def setAlignmentX(self, arg0: float):
        """public void javax.swing.JComponent.setAlignmentX(float)"""
        super(_JComponent, self).setAlignmentX(_float.valueOf(arg0))

    @override
    @overload
    def setFocusTraversalKeysEnabled(self, arg0: bool):
        """public void java.awt.Component.setFocusTraversalKeysEnabled(boolean)"""
        super(_Component, self).setFocusTraversalKeysEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def getMultiClickThreshhold(self) -> int:
        """public long javax.swing.AbstractButton.getMultiClickThreshhold()"""
        return int._wrap(super(AbstractButton, self).getMultiClickThreshhold())

    @overload
    def getInsets(self, arg0: 'Insets') -> 'Insets':
        """public java.awt.Insets javax.swing.JComponent.getInsets(java.awt.Insets)"""
        return 'Insets'._wrap(super(_JComponent, self).getInsets(arg0))

    @override
    @overload
    def getAction(self) -> 'Action':
        """public javax.swing.Action javax.swing.AbstractButton.getAction()"""
        return 'Action'._wrap(super(AbstractButton, self).getAction())

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int):
        """public void javax.swing.JComponent.repaint(long,int,int,int,int)"""
        super(_JComponent, self).repaint(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4))

    @overload
    def getToolTipLocation(self, arg0: 'MouseEvent') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getToolTipLocation(java.awt.event.MouseEvent)"""
        return 'Point'._wrap(super(_JComponent, self).getToolTipLocation(arg0))

    @override
    @overload
    def getIcon(self) -> 'Icon':
        """public javax.swing.Icon javax.swing.AbstractButton.getIcon()"""
        return 'Icon'._wrap(super(AbstractButton, self).getIcon())

    @override
    @overload
    def setUI(self, arg0: 'ButtonUI'):
        """public void javax.swing.AbstractButton.setUI(javax.swing.plaf.ButtonUI)"""
        super(_AbstractButton, self).setUI(arg0)

    @override
    @overload
    def removeActionListener(self, arg0: 'ActionListener'):
        """public void javax.swing.AbstractButton.removeActionListener(java.awt.event.ActionListener)"""
        super(_AbstractButton, self).removeActionListener(arg0)

    @override
    @overload
    def getVerifyInputWhenFocusTarget(self) -> bool:
        """public boolean javax.swing.JComponent.getVerifyInputWhenFocusTarget()"""
        return bool._wrap(super(JComponent, self).getVerifyInputWhenFocusTarget())

    @overload
    def mouseMove(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseMove(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseMove(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def removeItemListener(self, arg0: 'ItemListener'):
        """public void javax.swing.AbstractButton.removeItemListener(java.awt.event.ItemListener)"""
        super(_AbstractButton, self).removeItemListener(arg0)

    @overload
    def getListeners(self, arg0: 'Class') -> List['EventListener']:
        """public <T extends java.util.EventListener> T[] javax.swing.JComponent.getListeners(java.lang.Class<T>)"""
        return List['EventListener']._wrap(super(_JComponent, self).getListeners(arg0))

    @override
    @overload
    def setSelectedIcon(self, arg0: 'Icon'):
        """public void javax.swing.AbstractButton.setSelectedIcon(javax.swing.Icon)"""
        super(_AbstractButton, self).setSelectedIcon(arg0)

    @override
    @overload
    def addHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.addHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).addHierarchyBoundsListener(arg0)

    @override
    @overload
    def isBorderPainted(self) -> bool:
        """public boolean javax.swing.AbstractButton.isBorderPainted()"""
        return bool._wrap(super(AbstractButton, self).isBorderPainted())

    @overload
    def imageUpdate(self, arg0: 'Image', arg1: int, arg2: int, arg3: int, arg4: int, arg5: int) -> bool:
        """public boolean javax.swing.AbstractButton.imageUpdate(java.awt.Image,int,int,int,int,int)"""
        return bool._wrap(super(_AbstractButton, self).imageUpdate(arg0, _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4), _int.valueOf(arg5)))

    @override
    @overload
    def getHorizontalAlignment(self) -> int:
        """public int javax.swing.AbstractButton.getHorizontalAlignment()"""
        return int._wrap(super(AbstractButton, self).getHorizontalAlignment())

    @overload
    def add(self, arg0: 'Component', arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component,int)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def repaint(self):
        """public void java.awt.Component.repaint()"""
        super(Component, self).repaint()

    @override
    @overload
    def createToolTip(self) -> 'JToolTip':
        """public javax.swing.JToolTip javax.swing.JComponent.createToolTip()"""
        return 'JToolTip'._wrap(super(JComponent, self).createToolTip())

    @overload
    def getToolTipText(self, arg0: 'MouseEvent') -> str:
        """public java.lang.String javax.swing.JComponent.getToolTipText(java.awt.event.MouseEvent)"""
        return str._wrap(super(_JComponent, self).getToolTipText(arg0))

    @override
    @overload
    def setFocusTraversalPolicyProvider(self, arg0: bool):
        """public final void java.awt.Container.setFocusTraversalPolicyProvider(boolean)"""
        super(_Container, self).setFocusTraversalPolicyProvider(_boolean.valueOf(arg0))

    @overload
    def getComponentZOrder(self, arg0: 'Component') -> int:
        """public int java.awt.Container.getComponentZOrder(java.awt.Component)"""
        return int._wrap(super(_Container, self).getComponentZOrder(arg0))

    @override
    @overload
    def getSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.getSize()"""
        return 'Dimension'._wrap(super(Component, self).getSize())

    @override
    @overload
    def setName(self, arg0: str):
        """public void java.awt.Component.setName(java.lang.String)"""
        super(_Component, self).setName(arg0)

    @override
    @overload
    def unregisterKeyboardAction(self, arg0: 'KeyStroke'):
        """public void javax.swing.JComponent.unregisterKeyboardAction(javax.swing.KeyStroke)"""
        super(_JComponent, self).unregisterKeyboardAction(arg0)

    @overload
    def requestFocus(self, arg0: bool) -> bool:
        """public boolean javax.swing.JComponent.requestFocus(boolean)"""
        return bool._wrap(super(_JComponent, self).requestFocus(_boolean.valueOf(arg0)))

    @override
    @overload
    def setActionMap(self, arg0: 'ActionMap'):
        """public final void javax.swing.JComponent.setActionMap(javax.swing.ActionMap)"""
        super(_JComponent, self).setActionMap(arg0)

    @overload
    def mouseEnter(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseEnter(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseEnter(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object, arg2: int):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object,int)"""
        super(_Container, self).add(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def isFocusTraversalPolicySet(self) -> bool:
        """public boolean java.awt.Container.isFocusTraversalPolicySet()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicySet())

    @override
    @overload
    def getItemListeners(self) -> List['ItemListener']:
        """public java.awt.event.ItemListener[] javax.swing.AbstractButton.getItemListeners()"""
        return List['ItemListener']._wrap(super(AbstractButton, self).getItemListeners())

    @override
    @overload
    def getAncestorListeners(self) -> List['AncestorListener']:
        """public javax.swing.event.AncestorListener[] javax.swing.JComponent.getAncestorListeners()"""
        return List['AncestorListener']._wrap(super(JComponent, self).getAncestorListeners())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool._wrap(super(_object, self).equals(arg0))

    @overload
    def getInputMap(self, arg0: int) -> 'InputMap':
        """public final javax.swing.InputMap javax.swing.JComponent.getInputMap(int)"""
        return 'InputMap'._wrap(super(_JComponent, self).getInputMap(_int.valueOf(arg0)))

    @override
    @overload
    def getName(self) -> str:
        """public java.lang.String java.awt.Component.getName()"""
        return str._wrap(super(Component, self).getName())

    @override
    @overload
    def addMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.addMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).addMouseMotionListener(arg0)

    @override
    @overload
    def getActionListeners(self) -> List['ActionListener']:
        """public java.awt.event.ActionListener[] javax.swing.AbstractButton.getActionListeners()"""
        return List['ActionListener']._wrap(super(AbstractButton, self).getActionListeners())

    @override
    @overload
    def setDisabledIcon(self, arg0: 'Icon'):
        """public void javax.swing.AbstractButton.setDisabledIcon(javax.swing.Icon)"""
        super(_AbstractButton, self).setDisabledIcon(arg0)

    @override
    @overload
    def getIgnoreRepaint(self) -> bool:
        """public boolean java.awt.Component.getIgnoreRepaint()"""
        return bool._wrap(super(Component, self).getIgnoreRepaint())

    @override
    @overload
    def setVerticalTextPosition(self, arg0: int):
        """public void javax.swing.AbstractButton.setVerticalTextPosition(int)"""
        super(_AbstractButton, self).setVerticalTextPosition(_int.valueOf(arg0))

    @override
    @overload
    def getGraphics(self) -> 'Graphics':
        """public java.awt.Graphics javax.swing.JComponent.getGraphics()"""
        return 'Graphics'._wrap(super(JComponent, self).getGraphics())

    @override
    @overload
    def getDisabledIcon(self) -> 'Icon':
        """public javax.swing.Icon javax.swing.AbstractButton.getDisabledIcon()"""
        return 'Icon'._wrap(super(AbstractButton, self).getDisabledIcon())

    @override
    @overload
    def setDoubleBuffered(self, arg0: bool):
        """public void javax.swing.JComponent.setDoubleBuffered(boolean)"""
        super(_JComponent, self).setDoubleBuffered(_boolean.valueOf(arg0))

    @override
    @overload
    def isPreferredSizeSet(self) -> bool:
        """public boolean java.awt.Component.isPreferredSizeSet()"""
        return bool._wrap(super(Component, self).isPreferredSizeSet())

    @override
    @overload
    def addInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.addInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).addInputMethodListener(arg0)

    @override
    @overload
    def getInputMap(self) -> 'InputMap':
        """public final javax.swing.InputMap javax.swing.JComponent.getInputMap()"""
        return 'InputMap'._wrap(super(JComponent, self).getInputMap())

    @override
    @overload
    def setVisible(self, arg0: bool):
        """public void javax.swing.JComponent.setVisible(boolean)"""
        super(_JComponent, self).setVisible(_boolean.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,byte,byte)"""
        super(_Component, self).firePropertyChange(arg0, _byte.valueOf(arg1), _byte.valueOf(arg2))

    @override
    @overload
    def setBounds(self, arg0: 'Rectangle'):
        """public void java.awt.Component.setBounds(java.awt.Rectangle)"""
        super(_Component, self).setBounds(arg0)

    @override
    @overload
    def setBorderPainted(self, arg0: bool):
        """public void javax.swing.AbstractButton.setBorderPainted(boolean)"""
        super(_AbstractButton, self).setBorderPainted(_boolean.valueOf(arg0))

    @override
    @overload
    def getActionCommand(self) -> str:
        """public java.lang.String javax.swing.AbstractButton.getActionCommand()"""
        return str._wrap(super(AbstractButton, self).getActionCommand())

    @override
    @overload
    def getInputMethodRequests(self) -> 'InputMethodRequests':
        """public java.awt.im.InputMethodRequests java.awt.Component.getInputMethodRequests()"""
        return 'InputMethodRequests'._wrap(super(Component, self).getInputMethodRequests())

    @override
    @overload
    def getChangeListeners(self) -> List['ChangeListener']:
        """public javax.swing.event.ChangeListener[] javax.swing.AbstractButton.getChangeListeners()"""
        return List['ChangeListener']._wrap(super(AbstractButton, self).getChangeListeners())

    @override
    @overload
    def setRequestFocusEnabled(self, arg0: bool):
        """public void javax.swing.JComponent.setRequestFocusEnabled(boolean)"""
        super(_JComponent, self).setRequestFocusEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def setMultiClickThreshhold(self, arg0: int):
        """public void javax.swing.AbstractButton.setMultiClickThreshhold(long)"""
        super(_AbstractButton, self).setMultiClickThreshhold(_long.valueOf(arg0))

    @override
    @overload
    def setFocusTraversalKeys(self, arg0: int, arg1: 'Set'):
        """public void javax.swing.JComponent.setFocusTraversalKeys(int,java.util.Set<? extends java.awt.AWTKeyStroke>)"""
        super(_JComponent, self).setFocusTraversalKeys(_int.valueOf(arg0), arg1)

    @overload
    def inside(self, arg0: int, arg1: int) -> bool:
        """public boolean java.awt.Component.inside(int,int)"""
        return bool._wrap(super(_Component, self).inside(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def requestDefaultFocus(self) -> bool:
        """public boolean javax.swing.JComponent.requestDefaultFocus()"""
        return bool._wrap(super(JComponent, self).requestDefaultFocus())

    @override
    @overload
    def getRolloverIcon(self) -> 'Icon':
        """public javax.swing.Icon javax.swing.AbstractButton.getRolloverIcon()"""
        return 'Icon'._wrap(super(AbstractButton, self).getRolloverIcon())

    @override
    @overload
    def layout(self):
        """public void java.awt.Container.layout()"""
        super(Container, self).layout()

    @override
    @overload
    def getInputMethodListeners(self) -> List['InputMethodListener']:
        """public synchronized java.awt.event.InputMethodListener[] java.awt.Component.getInputMethodListeners()"""
        return List['InputMethodListener']._wrap(super(Component, self).getInputMethodListeners())

    @override
    @overload
    def paint(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.paint(java.awt.Graphics)"""
        super(_JComponent, self).paint(arg0)

    @override
    @overload
    def transferFocus(self):
        """public void java.awt.Component.transferFocus()"""
        super(Component, self).transferFocus()

    @override
    @overload
    def removeComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.removeComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).removeComponentListener(arg0)

    @override
    @overload
    def isFocusPainted(self) -> bool:
        """public boolean javax.swing.AbstractButton.isFocusPainted()"""
        return bool._wrap(super(AbstractButton, self).isFocusPainted())

    @override
    @overload
    def setMinimumSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setMinimumSize(java.awt.Dimension)"""
        super(_JComponent, self).setMinimumSize(arg0)

    @override
    @overload
    def setLocation(self, arg0: 'Point'):
        """public void java.awt.Component.setLocation(java.awt.Point)"""
        super(_Component, self).setLocation(arg0)

    @override
    @overload
    def getLabel(self) -> str:
        """public java.lang.String javax.swing.AbstractButton.getLabel()"""
        return str._wrap(super(AbstractButton, self).getLabel())

    @override
    @overload
    def setSize(self, arg0: 'Dimension'):
        """public void java.awt.Component.setSize(java.awt.Dimension)"""
        super(_Component, self).setSize(arg0)

    @overload
    def getPopupLocation(self, arg0: 'MouseEvent') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getPopupLocation(java.awt.event.MouseEvent)"""
        return 'Point'._wrap(super(_JComponent, self).getPopupLocation(arg0))

    @overload
    def isAncestorOf(self, arg0: 'Component') -> bool:
        """public boolean java.awt.Container.isAncestorOf(java.awt.Component)"""
        return bool._wrap(super(_Container, self).isAncestorOf(arg0))

    @overload
    def contains(self, arg0: int, arg1: int) -> bool:
        """public boolean javax.swing.JComponent.contains(int,int)"""
        return bool._wrap(super(_JComponent, self).contains(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def validate(self):
        """public void java.awt.Container.validate()"""
        super(Container, self).validate()

    @override
    @overload
    def getMaximumSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getMaximumSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getMaximumSize())

    @override
    @overload
    def setLabel(self, arg0: str):
        """public void javax.swing.AbstractButton.setLabel(java.lang.String)"""
        super(_AbstractButton, self).setLabel(arg0)

    @override
    @overload
    def countComponents(self) -> int:
        """public int java.awt.Container.countComponents()"""
        return int._wrap(super(Container, self).countComponents())

    @override
    @overload
    def isDefaultButton(self) -> bool:
        """public boolean javax.swing.JButton.isDefaultButton()"""
        return bool._wrap(super(JButton, self).isDefaultButton())

    @override
    @overload
    def removeVetoableChangeListener(self, arg0: 'VetoableChangeListener'):
        """public synchronized void javax.swing.JComponent.removeVetoableChangeListener(java.beans.VetoableChangeListener)"""
        super(_JComponent, self).removeVetoableChangeListener(arg0)

    @override
    @overload
    def getComponents(self) -> List['Component']:
        """public java.awt.Component[] java.awt.Container.getComponents()"""
        return List['Component']._wrap(super(Container, self).getComponents())

    @override
    @overload
    def setDebugGraphicsOptions(self, arg0: int):
        """public void javax.swing.JComponent.setDebugGraphicsOptions(int)"""
        super(_JComponent, self).setDebugGraphicsOptions(_int.valueOf(arg0))

    @override
    @overload
    def list(self, arg0: 'PrintStream', arg1: int):
        """public void java.awt.Container.list(java.io.PrintStream,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @override
    @overload
    def getFocusTraversalPolicy(self) -> 'FocusTraversalPolicy':
        """public java.awt.FocusTraversalPolicy java.awt.Container.getFocusTraversalPolicy()"""
        return 'FocusTraversalPolicy'._wrap(super(Container, self).getFocusTraversalPolicy())

    @override
    @overload
    def setHorizontalAlignment(self, arg0: int):
        """public void javax.swing.AbstractButton.setHorizontalAlignment(int)"""
        super(_AbstractButton, self).setHorizontalAlignment(_int.valueOf(arg0))

    @override
    @overload
    def setContentAreaFilled(self, arg0: bool):
        """public void javax.swing.AbstractButton.setContentAreaFilled(boolean)"""
        super(_AbstractButton, self).setContentAreaFilled(_boolean.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,float,float)"""
        super(_Component, self).firePropertyChange(arg0, _float.valueOf(arg1), _float.valueOf(arg2))

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object)"""
        super(_Container, self).add(arg0, arg1)

    @override
    @overload
    def nextFocus(self):
        """public void java.awt.Component.nextFocus()"""
        super(Component, self).nextFocus()

    @override
    @overload
    def doClick(self, arg0: int):
        """public void javax.swing.AbstractButton.doClick(int)"""
        super(_AbstractButton, self).doClick(_int.valueOf(arg0))

    @overload
    def mouseUp(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseUp(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseUp(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def doClick(self):
        """public void javax.swing.AbstractButton.doClick()"""
        super(AbstractButton, self).doClick()

    @override
    @overload
    def getLocation(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocation()"""
        return 'Point'._wrap(super(Component, self).getLocation())

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int._wrap(super(object, self).hashCode())

    @override
    @overload
    def setComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Component.setComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Component, self).setComponentOrientation(arg0)

    @override
    @overload
    def grabFocus(self):
        """public void javax.swing.JComponent.grabFocus()"""
        super(JComponent, self).grabFocus()

    @overload
    def keyDown(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyDown(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyDown(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,int,int)"""
        super(_JComponent, self).firePropertyChange(arg0, _int.valueOf(arg1), _int.valueOf(arg2))

    @override
    @overload
    def getLayout(self) -> 'LayoutManager':
        """public java.awt.LayoutManager java.awt.Container.getLayout()"""
        return 'LayoutManager'._wrap(super(Container, self).getLayout())

    @override
    @overload
    def setText(self, arg0: str):
        """public void javax.swing.AbstractButton.setText(java.lang.String)"""
        super(_AbstractButton, self).setText(arg0)

    @override
    @overload
    def setRolloverIcon(self, arg0: 'Icon'):
        """public void javax.swing.AbstractButton.setRolloverIcon(javax.swing.Icon)"""
        super(_AbstractButton, self).setRolloverIcon(arg0)

    @override
    @overload
    def addNotify(self):
        """public void javax.swing.JComponent.addNotify()"""
        super(JComponent, self).addNotify()

    @override
    @overload
    def setSize(self, arg0: int, arg1: int):
        """public void java.awt.Component.setSize(int,int)"""
        super(_Component, self).setSize(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.repaint(int,int,int,int)"""
        super(_Component, self).repaint(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @overload
    def keyUp(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyUp(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyUp(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def setBackground(self, arg0: 'Color'):
        """public void javax.swing.JComponent.setBackground(java.awt.Color)"""
        super(_JComponent, self).setBackground(arg0)

    @override
    @overload
    def doLayout(self):
        """public void java.awt.Container.doLayout()"""
        super(Container, self).doLayout()

    @override
    @overload
    def getInsets(self) -> 'Insets':
        """public java.awt.Insets javax.swing.JComponent.getInsets()"""
        return 'Insets'._wrap(super(JComponent, self).getInsets())

    @override
    @overload
    def setNextFocusableComponent(self, arg0: 'Component'):
        """public void javax.swing.JComponent.setNextFocusableComponent(java.awt.Component)"""
        super(_JComponent, self).setNextFocusableComponent(arg0)

    @override
    @overload
    def getAlignmentY(self) -> float:
        """public float javax.swing.JComponent.getAlignmentY()"""
        return float._wrap(super(JComponent, self).getAlignmentY())

    @override
    @overload
    def resetKeyboardActions(self):
        """public void javax.swing.JComponent.resetKeyboardActions()"""
        super(JComponent, self).resetKeyboardActions()

    @override
    @overload
    def addPropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Container.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Container, self).addPropertyChangeListener(arg0, arg1)

    @override
    @overload
    def applyComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Container.applyComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Container, self).applyComponentOrientation(arg0)

    @override
    @overload
    def setDefaultCapable(self, arg0: bool):
        """public void javax.swing.JButton.setDefaultCapable(boolean)"""
        super(_JButton, self).setDefaultCapable(_boolean.valueOf(arg0))

    @override
    @overload
    def removeMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.removeMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).removeMouseListener(arg0)

    @override
    @overload
    def getInputContext(self) -> 'InputContext':
        """public java.awt.im.InputContext java.awt.Component.getInputContext()"""
        return 'InputContext'._wrap(super(Component, self).getInputContext())

    @override
    @overload
    def getVerticalAlignment(self) -> int:
        """public int javax.swing.AbstractButton.getVerticalAlignment()"""
        return int._wrap(super(AbstractButton, self).getVerticalAlignment())

    @override
    @overload
    def getPressedIcon(self) -> 'Icon':
        """public javax.swing.Icon javax.swing.AbstractButton.getPressedIcon()"""
        return 'Icon'._wrap(super(AbstractButton, self).getPressedIcon())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,double,double)"""
        super(_Component, self).firePropertyChange(arg0, _double.valueOf(arg1), _double.valueOf(arg2))

    @override
    @overload
    def isSelected(self) -> bool:
        """public boolean javax.swing.AbstractButton.isSelected()"""
        return bool._wrap(super(AbstractButton, self).isSelected())

    @override
    @overload
    def removeAncestorListener(self, arg0: 'AncestorListener'):
        """public void javax.swing.JComponent.removeAncestorListener(javax.swing.event.AncestorListener)"""
        super(_JComponent, self).removeAncestorListener(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintWriter', arg1: int):
        """public void java.awt.Container.list(java.io.PrintWriter,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @overload
    def checkImage(self, arg0: 'Image', arg1: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, arg1))

    @override
    @overload
    def removeFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.removeFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).removeFocusListener(arg0)

    @overload
    def getConditionForKeyStroke(self, arg0: 'KeyStroke') -> int:
        """public int javax.swing.JComponent.getConditionForKeyStroke(javax.swing.KeyStroke)"""
        return int._wrap(super(_JComponent, self).getConditionForKeyStroke(arg0))

    @override
    @overload
    def getTreeLock(self) -> object:
        """public final java.lang.Object java.awt.Component.getTreeLock()"""
        return object._wrap(super(Component, self).getTreeLock())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def removeContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.removeContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).removeContainerListener(arg0)

    @override
    @overload
    def getGraphicsConfiguration(self) -> 'GraphicsConfiguration':
        """public java.awt.GraphicsConfiguration java.awt.Component.getGraphicsConfiguration()"""
        return 'GraphicsConfiguration'._wrap(super(Component, self).getGraphicsConfiguration())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: bool, arg2: bool):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,boolean,boolean)"""
        super(_JComponent, self).firePropertyChange(arg0, _boolean.valueOf(arg1), _boolean.valueOf(arg2))

    @override
    @overload
    def isRolloverEnabled(self) -> bool:
        """public boolean javax.swing.AbstractButton.isRolloverEnabled()"""
        return bool._wrap(super(AbstractButton, self).isRolloverEnabled())

    @override
    @overload
    def registerKeyboardAction(self, arg0: 'ActionListener', arg1: str, arg2: 'KeyStroke', arg3: int):
        """public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,java.lang.String,javax.swing.KeyStroke,int)"""
        super(_JComponent, self).registerKeyboardAction(arg0, arg1, arg2, _int.valueOf(arg3))

    @overload
    def findComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(arg0))

    @override
    @overload
    def resize(self, arg0: int, arg1: int):
        """public void java.awt.Component.resize(int,int)"""
        super(_Component, self).resize(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getHeight(self) -> int:
        """public int javax.swing.JComponent.getHeight()"""
        return int._wrap(super(JComponent, self).getHeight())

    @override
    @overload
    def getTransferHandler(self) -> 'TransferHandler':
        """public javax.swing.TransferHandler javax.swing.JComponent.getTransferHandler()"""
        return 'TransferHandler'._wrap(super(JComponent, self).getTransferHandler())

    @override
    @overload
    def transferFocusBackward(self):
        """public void java.awt.Component.transferFocusBackward()"""
        super(Component, self).transferFocusBackward()

    @overload
    def getPropertyChangeListeners(self, arg0: str) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners(java.lang.String)"""
        return List['PropertyChangeListener']._wrap(super(_Component, self).getPropertyChangeListeners(arg0))

    @staticmethod
    @overload
    def isLightweightComponent(arg0: 'Component') -> bool:
        """public static boolean javax.swing.JComponent.isLightweightComponent(java.awt.Component)"""
        return bool._wrap(_JComponent.isLightweightComponent(arg0))

    @override
    @overload
    def setAction(self, arg0: 'Action'):
        """public void javax.swing.AbstractButton.setAction(javax.swing.Action)"""
        super(_AbstractButton, self).setAction(arg0)

    @override
    @overload
    def printAll(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.printAll(java.awt.Graphics)"""
        super(_JComponent, self).printAll(arg0)

    @override
    @overload
    def print(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.print(java.awt.Graphics)"""
        super(_JComponent, self).print(arg0)

    @override
    @overload
    def setInputVerifier(self, arg0: 'InputVerifier'):
        """public void javax.swing.JComponent.setInputVerifier(javax.swing.InputVerifier)"""
        super(_JComponent, self).setInputVerifier(arg0)

    @override
    @overload
    def getFont(self) -> 'Font':
        """public java.awt.Font java.awt.Component.getFont()"""
        return 'Font'._wrap(super(Component, self).getFont())

    @override
    @overload
    def setFont(self, arg0: 'Font'):
        """public void javax.swing.JComponent.setFont(java.awt.Font)"""
        super(_JComponent, self).setFont(arg0)

    @override
    @overload
    def isOptimizedDrawingEnabled(self) -> bool:
        """public boolean javax.swing.JComponent.isOptimizedDrawingEnabled()"""
        return bool._wrap(super(JComponent, self).isOptimizedDrawingEnabled())

    @override
    @overload
    def setMnemonic(self, arg0: str):
        """public void javax.swing.AbstractButton.setMnemonic(char)"""
        super(_AbstractButton, self).setMnemonic(_char.valueOf(arg0))

    @override
    @overload
    def isValidateRoot(self) -> bool:
        """public boolean javax.swing.JComponent.isValidateRoot()"""
        return bool._wrap(super(JComponent, self).isValidateRoot())

    @override
    @overload
    def setForeground(self, arg0: 'Color'):
        """public void javax.swing.JComponent.setForeground(java.awt.Color)"""
        super(_JComponent, self).setForeground(arg0)

    @overload
    def createVolatileImage(self, arg0: int, arg1: int, arg2: 'ImageCapabilities') -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int,java.awt.ImageCapabilities) throws java.awt.AWTException"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1), arg2))

    @override
    @overload
    def bounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.bounds()"""
        return 'Rectangle'._wrap(super(Component, self).bounds())

    @override
    @overload
    def getSelectedIcon(self) -> 'Icon':
        """public javax.swing.Icon javax.swing.AbstractButton.getSelectedIcon()"""
        return 'Icon'._wrap(super(AbstractButton, self).getSelectedIcon())

    @override
    @overload
    def add(self, arg0: 'PopupMenu'):
        """public void java.awt.Component.add(java.awt.PopupMenu)"""
        super(_Component, self).add(arg0)

    @override
    @overload
    def isVisible(self) -> bool:
        """public boolean java.awt.Component.isVisible()"""
        return bool._wrap(super(Component, self).isVisible())

    @override
    @overload
    def setDropTarget(self, arg0: 'DropTarget'):
        """public synchronized void java.awt.Component.setDropTarget(java.awt.dnd.DropTarget)"""
        super(_Component, self).setDropTarget(arg0)

    @override
    @overload
    def getY(self) -> int:
        """public int javax.swing.JComponent.getY()"""
        return int._wrap(super(JComponent, self).getY())

    @override
    @overload
    def isFocusable(self) -> bool:
        """public boolean java.awt.Component.isFocusable()"""
        return bool._wrap(super(Component, self).isFocusable())

    @override
    @overload
    def getDisabledSelectedIcon(self) -> 'Icon':
        """public javax.swing.Icon javax.swing.AbstractButton.getDisabledSelectedIcon()"""
        return 'Icon'._wrap(super(AbstractButton, self).getDisabledSelectedIcon())

    @override
    @overload
    def transferFocusUpCycle(self):
        """public void java.awt.Component.transferFocusUpCycle()"""
        super(Component, self).transferFocusUpCycle()

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: str, arg2: str):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,char,char)"""
        super(_JComponent, self).firePropertyChange(arg0, _char.valueOf(arg1), _char.valueOf(arg2))

    @override
    @overload
    def getAutoscrolls(self) -> bool:
        """public boolean javax.swing.JComponent.getAutoscrolls()"""
        return bool._wrap(super(JComponent, self).getAutoscrolls())

    @override
    @overload
    def setModel(self, arg0: 'ButtonModel'):
        """public void javax.swing.AbstractButton.setModel(javax.swing.ButtonModel)"""
        super(_AbstractButton, self).setModel(arg0)

    @override
    @overload
    def setHideActionText(self, arg0: bool):
        """public void javax.swing.AbstractButton.setHideActionText(boolean)"""
        super(_AbstractButton, self).setHideActionText(_boolean.valueOf(arg0))

    @override
    @overload
    def setIconTextGap(self, arg0: int):
        """public void javax.swing.AbstractButton.setIconTextGap(int)"""
        super(_AbstractButton, self).setIconTextGap(_int.valueOf(arg0))

    @override
    @overload
    def setToolTipText(self, arg0: str):
        """public void javax.swing.JComponent.setToolTipText(java.lang.String)"""
        super(_JComponent, self).setToolTipText(arg0)

    @override
    @overload
    def setMixingCutoutShape(self, arg0: 'Shape'):
        """public void java.awt.Component.setMixingCutoutShape(java.awt.Shape)"""
        super(_Component, self).setMixingCutoutShape(arg0)

    @override
    @overload
    def requestFocus(self, arg0: 'Cause'):
        """public void java.awt.Component.requestFocus(java.awt.event.FocusEvent$Cause)"""
        super(_Component, self).requestFocus(arg0)

    @override
    @overload
    def putClientProperty(self, arg0: object, arg1: object):
        """public final void javax.swing.JComponent.putClientProperty(java.lang.Object,java.lang.Object)"""
        super(_JComponent, self).putClientProperty(arg0, arg1)

    @override
    @overload
    def getVetoableChangeListeners(self) -> List['VetoableChangeListener']:
        """public synchronized java.beans.VetoableChangeListener[] javax.swing.JComponent.getVetoableChangeListeners()"""
        return List['VetoableChangeListener']._wrap(super(JComponent, self).getVetoableChangeListeners())

    @override
    @overload
    def getTopLevelAncestor(self) -> 'Container':
        """public java.awt.Container javax.swing.JComponent.getTopLevelAncestor()"""
        return 'Container'._wrap(super(JComponent, self).getTopLevelAncestor())

    @override
    @overload
    def isRequestFocusEnabled(self) -> bool:
        """public boolean javax.swing.JComponent.isRequestFocusEnabled()"""
        return bool._wrap(super(JComponent, self).isRequestFocusEnabled())

    @override
    @overload
    def getFocusListeners(self) -> List['FocusListener']:
        """public synchronized java.awt.event.FocusListener[] java.awt.Component.getFocusListeners()"""
        return List['FocusListener']._wrap(super(Component, self).getFocusListeners())

    @overload
    def add(self, arg0: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0))

    @override
    @overload
    def setLocation(self, arg0: int, arg1: int):
        """public void java.awt.Component.setLocation(int,int)"""
        super(_Component, self).setLocation(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def removeInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.removeInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).removeInputMethodListener(arg0)

    @override
    @overload
    def setFocusable(self, arg0: bool):
        """public void java.awt.Component.setFocusable(boolean)"""
        super(_Component, self).setFocusable(_boolean.valueOf(arg0))

    @override
    @overload
    def paintComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.paintComponents(java.awt.Graphics)"""
        super(_Container, self).paintComponents(arg0)

    @overload
    def prepareImage(self, arg0: 'Image', arg1: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, arg1))

    @overload
    def add(self, arg0: str, arg1: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.lang.String,java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, arg1))

    @override
    @overload
    def paintImmediately(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void javax.swing.JComponent.paintImmediately(int,int,int,int)"""
        super(_JComponent, self).paintImmediately(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def getMinimumSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getMinimumSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getMinimumSize())

    @overload
    def createVolatileImage(self, arg0: int, arg1: int) -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int)"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.removeHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).removeHierarchyListener(arg0)

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.awt.Component.toString()"""
        return str._wrap(super(Component, self).toString())

    @override
    @overload
    def isFocusOwner(self) -> bool:
        """public boolean java.awt.Component.isFocusOwner()"""
        return bool._wrap(super(Component, self).isFocusOwner())

    @override
    @overload
    def getUIClassID(self) -> str:
        """public java.lang.String javax.swing.JButton.getUIClassID()"""
        return str._wrap(super(JButton, self).getUIClassID())

    @override
    @overload
    def isDefaultCapable(self) -> bool:
        """public boolean javax.swing.JButton.isDefaultCapable()"""
        return bool._wrap(super(JButton, self).isDefaultCapable())

    @override
    @overload
    def getHorizontalTextPosition(self) -> int:
        """public int javax.swing.AbstractButton.getHorizontalTextPosition()"""
        return int._wrap(super(AbstractButton, self).getHorizontalTextPosition())

    @override
    @overload
    def setIcon(self, arg0: 'Icon'):
        """public void javax.swing.AbstractButton.setIcon(javax.swing.Icon)"""
        super(_AbstractButton, self).setIcon(arg0)

    @override
    @overload
    def isFocusCycleRoot(self) -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot()"""
        return bool._wrap(super(Container, self).isFocusCycleRoot())

    @overload
    def __init__(self, arg0: 'FlameMain', arg1: 'Listener'):
        """public com.badlogic.gdx.tools.flame.LoaderButton$ParticleEffectLoaderButton(com.badlogic.gdx.tools.flame.FlameMain,com.badlogic.gdx.tools.flame.LoaderButton$Listener<com.badlogic.gdx.graphics.g3d.particles.ParticleEffect>)"""
        val = _ParticleEffectLoaderButton(arg0, arg1)
        self.__wrapper = val

    @override
    @overload
    def hide(self):
        """public void javax.swing.JComponent.hide()"""
        super(JComponent, self).hide()

    @override
    @overload
    def revalidate(self):
        """public void javax.swing.JComponent.revalidate()"""
        super(JComponent, self).revalidate()

    @override
    @overload
    def getActionMap(self) -> 'ActionMap':
        """public final javax.swing.ActionMap javax.swing.JComponent.getActionMap()"""
        return 'ActionMap'._wrap(super(JComponent, self).getActionMap())

    @override
    @overload
    def requestFocusInWindow(self) -> bool:
        """public boolean javax.swing.JComponent.requestFocusInWindow()"""
        return bool._wrap(super(JComponent, self).requestFocusInWindow())

    @overload
    def action(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.action(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).action(arg0, arg1))

    @override
    @overload
    def isManagingFocus(self) -> bool:
        """public boolean javax.swing.JComponent.isManagingFocus()"""
        return bool._wrap(super(JComponent, self).isManagingFocus())

    @overload
    def getFocusTraversalKeys(self, arg0: int) -> 'Set':
        """public java.util.Set<java.awt.AWTKeyStroke> java.awt.Container.getFocusTraversalKeys(int)"""
        return 'Set'._wrap(super(_Container, self).getFocusTraversalKeys(_int.valueOf(arg0)))

    @override
    @overload
    def remove(self, arg0: 'Component'):
        """public void java.awt.Container.remove(java.awt.Component)"""
        super(_Container, self).remove(arg0)

    @override
    @overload
    def isContentAreaFilled(self) -> bool:
        """public boolean javax.swing.AbstractButton.isContentAreaFilled()"""
        return bool._wrap(super(AbstractButton, self).isContentAreaFilled())

    @override
    @overload
    def insets(self) -> 'Insets':
        """public java.awt.Insets java.awt.Container.insets()"""
        return 'Insets'._wrap(super(Container, self).insets())

    @override
    @overload
    def setFocusTraversalPolicy(self, arg0: 'FocusTraversalPolicy'):
        """public void java.awt.Container.setFocusTraversalPolicy(java.awt.FocusTraversalPolicy)"""
        super(_Container, self).setFocusTraversalPolicy(arg0)

    @overload
    def getSize(self, arg0: 'Dimension') -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getSize(java.awt.Dimension)"""
        return 'Dimension'._wrap(super(_JComponent, self).getSize(arg0))

    @override
    @overload
    def enable(self, arg0: bool):
        """public void java.awt.Component.enable(boolean)"""
        super(_Component, self).enable(_boolean.valueOf(arg0))

    @override
    @overload
    def addPropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Container.addPropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Container, self).addPropertyChangeListener(arg0)

    @overload
    def getComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(arg0))

    @override
    @overload
    def size(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.size()"""
        return 'Dimension'._wrap(super(Component, self).size())

    @overload
    def getActionForKeyStroke(self, arg0: 'KeyStroke') -> 'ActionListener':
        """public java.awt.event.ActionListener javax.swing.JComponent.getActionForKeyStroke(javax.swing.KeyStroke)"""
        return 'ActionListener'._wrap(super(_JComponent, self).getActionForKeyStroke(arg0))

    @overload
    def lostFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.lostFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).lostFocus(arg0, arg1))

    @override
    @overload
    def setDisplayedMnemonicIndex(self, arg0: int):
        """public void javax.swing.AbstractButton.setDisplayedMnemonicIndex(int) throws java.lang.IllegalArgumentException"""
        super(_AbstractButton, self).setDisplayedMnemonicIndex(_int.valueOf(arg0))

    @override
    @overload
    def isMinimumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMinimumSizeSet()"""
        return bool._wrap(super(Component, self).isMinimumSizeSet())

    @override
    @overload
    def isForegroundSet(self) -> bool:
        """public boolean java.awt.Component.isForegroundSet()"""
        return bool._wrap(super(Component, self).isForegroundSet())

    @overload
    def getMousePosition(self, arg0: bool) -> 'Point':
        """public java.awt.Point java.awt.Container.getMousePosition(boolean) throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(_Container, self).getMousePosition(_boolean.valueOf(arg0)))

    @overload
    def getFontMetrics(self, arg0: 'Font') -> 'FontMetrics':
        """public java.awt.FontMetrics javax.swing.JComponent.getFontMetrics(java.awt.Font)"""
        return 'FontMetrics'._wrap(super(_JComponent, self).getFontMetrics(arg0))

    @override
    @overload
    def getHierarchyBoundsListeners(self) -> List['HierarchyBoundsListener']:
        """public synchronized java.awt.event.HierarchyBoundsListener[] java.awt.Component.getHierarchyBoundsListeners()"""
        return List['HierarchyBoundsListener']._wrap(super(Component, self).getHierarchyBoundsListeners())

    @override
    @overload
    def getModel(self) -> 'ButtonModel':
        """public javax.swing.ButtonModel javax.swing.AbstractButton.getModel()"""
        return 'ButtonModel'._wrap(super(AbstractButton, self).getModel())

    @override
    @overload
    def minimumSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.minimumSize()"""
        return 'Dimension'._wrap(super(Container, self).minimumSize())

    @override
    @overload
    def getUI(self) -> 'ButtonUI':
        """public javax.swing.plaf.ButtonUI javax.swing.AbstractButton.getUI()"""
        return 'ButtonUI'._wrap(super(AbstractButton, self).getUI())

    @overload
    def handleEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.handleEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).handleEvent(arg0))

    @override
    @overload
    def setMnemonic(self, arg0: int):
        """public void javax.swing.AbstractButton.setMnemonic(int)"""
        super(_AbstractButton, self).setMnemonic(_int.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @override
    @overload
    def getComponentListeners(self) -> List['ComponentListener']:
        """public synchronized java.awt.event.ComponentListener[] java.awt.Component.getComponentListeners()"""
        return List['ComponentListener']._wrap(super(Component, self).getComponentListeners())

    @override
    @overload
    def computeVisibleRect(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.computeVisibleRect(java.awt.Rectangle)"""
        super(_JComponent, self).computeVisibleRect(arg0)

    @override
    @overload
    def deliverEvent(self, arg0: 'Event'):
        """public void java.awt.Container.deliverEvent(java.awt.Event)"""
        super(_Container, self).deliverEvent(arg0)

    @override
    @overload
    def getAlignmentX(self) -> float:
        """public float javax.swing.JComponent.getAlignmentX()"""
        return float._wrap(super(JComponent, self).getAlignmentX())

    @overload
    def gotFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.gotFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).gotFocus(arg0, arg1))

    @override
    @overload
    def printComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.printComponents(java.awt.Graphics)"""
        super(_Container, self).printComponents(arg0)

    @override
    @overload
    def getColorModel(self) -> 'ColorModel':
        """public java.awt.image.ColorModel java.awt.Component.getColorModel()"""
        return 'ColorModel'._wrap(super(Component, self).getColorModel())

    @override
    @overload
    def getDebugGraphicsOptions(self) -> int:
        """public int javax.swing.JComponent.getDebugGraphicsOptions()"""
        return int._wrap(super(JComponent, self).getDebugGraphicsOptions())

    @overload
    def areFocusTraversalKeysSet(self, arg0: int) -> bool:
        """public boolean java.awt.Container.areFocusTraversalKeysSet(int)"""
        return bool._wrap(super(_Container, self).areFocusTraversalKeysSet(_int.valueOf(arg0)))

    @override
    @overload
    def repaint(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.repaint(java.awt.Rectangle)"""
        super(_JComponent, self).repaint(arg0)

    @overload
    def getClientProperty(self, arg0: object) -> object:
        """public final java.lang.Object javax.swing.JComponent.getClientProperty(java.lang.Object)"""
        return object._wrap(super(_JComponent, self).getClientProperty(arg0))

    @override
    @overload
    def getX(self) -> int:
        """public int javax.swing.JComponent.getX()"""
        return int._wrap(super(JComponent, self).getX())

    @override
    @overload
    def getToolkit(self) -> 'Toolkit':
        """public java.awt.Toolkit java.awt.Component.getToolkit()"""
        return 'Toolkit'._wrap(super(Component, self).getToolkit())

    @override
    @overload
    def isCursorSet(self) -> bool:
        """public boolean java.awt.Component.isCursorSet()"""
        return bool._wrap(super(Component, self).isCursorSet())

    @override
    @overload
    def setPreferredSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setPreferredSize(java.awt.Dimension)"""
        super(_JComponent, self).setPreferredSize(arg0)

    @override
    @overload
    def setBounds(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.setBounds(int,int,int,int)"""
        super(_Component, self).setBounds(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def requestFocus(self):
        """public void javax.swing.JComponent.requestFocus()"""
        super(JComponent, self).requestFocus()

    @override
    @overload
    def getText(self) -> str:
        """public java.lang.String javax.swing.AbstractButton.getText()"""
        return str._wrap(super(AbstractButton, self).getText())

    @override
    @overload
    def isEnabled(self) -> bool:
        """public boolean java.awt.Component.isEnabled()"""
        return bool._wrap(super(Component, self).isEnabled())

    @override
    @overload
    def move(self, arg0: int, arg1: int):
        """public void java.awt.Component.move(int,int)"""
        super(_Component, self).move(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def addActionListener(self, arg0: 'ActionListener'):
        """public void javax.swing.AbstractButton.addActionListener(java.awt.event.ActionListener)"""
        super(_AbstractButton, self).addActionListener(arg0)

    @override
    @overload
    def getAccessibleContext(self) -> 'AccessibleContext':
        """public javax.accessibility.AccessibleContext javax.swing.JButton.getAccessibleContext()"""
        return 'AccessibleContext'._wrap(super(JButton, self).getAccessibleContext())

    @overload
    def isFocusCycleRoot(self, arg0: 'Container') -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot(java.awt.Container)"""
        return bool._wrap(super(_Container, self).isFocusCycleRoot(arg0))

    @override
    @overload
    def setLocale(self, arg0: 'Locale'):
        """public void java.awt.Component.setLocale(java.util.Locale)"""
        super(_Component, self).setLocale(arg0)

    @override
    @overload
    def paintAll(self, arg0: 'Graphics'):
        """public void java.awt.Component.paintAll(java.awt.Graphics)"""
        super(_Component, self).paintAll(arg0)

    @override
    @overload
    def removeMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.removeMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).removeMouseWheelListener(arg0)

    @override
    @overload
    def transferFocusDownCycle(self):
        """public void java.awt.Container.transferFocusDownCycle()"""
        super(Container, self).transferFocusDownCycle()

    @override
    @overload
    def getNextFocusableComponent(self) -> 'Component':
        """public java.awt.Component javax.swing.JComponent.getNextFocusableComponent()"""
        return 'Component'._wrap(super(JComponent, self).getNextFocusableComponent())

    @override
    @overload
    def removeChangeListener(self, arg0: 'ChangeListener'):
        """public void javax.swing.AbstractButton.removeChangeListener(javax.swing.event.ChangeListener)"""
        super(_AbstractButton, self).removeChangeListener(arg0)

    @override
    @overload
    def repaint(self, arg0: int):
        """public void java.awt.Component.repaint(long)"""
        super(_Component, self).repaint(_long.valueOf(arg0))

    @override
    @overload
    def removeHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.removeHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).removeHierarchyBoundsListener(arg0)

    @override
    @overload
    def getComponentPopupMenu(self) -> 'JPopupMenu':
        """public javax.swing.JPopupMenu javax.swing.JComponent.getComponentPopupMenu()"""
        return 'JPopupMenu'._wrap(super(JComponent, self).getComponentPopupMenu())

    @override
    @overload
    def getMousePosition(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getMousePosition() throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(Component, self).getMousePosition())

    @override
    @overload
    def getComponentCount(self) -> int:
        """public int java.awt.Container.getComponentCount()"""
        return int._wrap(super(Container, self).getComponentCount())

    @override
    @overload
    def setMaximumSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setMaximumSize(java.awt.Dimension)"""
        super(_JComponent, self).setMaximumSize(arg0)

    @override
    @overload
    def addItemListener(self, arg0: 'ItemListener'):
        """public void javax.swing.AbstractButton.addItemListener(java.awt.event.ItemListener)"""
        super(_AbstractButton, self).addItemListener(arg0)

    @override
    @overload
    def disable(self):
        """public void javax.swing.JComponent.disable()"""
        super(JComponent, self).disable()

    @override
    @overload
    def enableInputMethods(self, arg0: bool):
        """public void java.awt.Component.enableInputMethods(boolean)"""
        super(_Component, self).enableInputMethods(_boolean.valueOf(arg0))

    @override
    @overload
    def getCursor(self) -> 'Cursor':
        """public java.awt.Cursor java.awt.Component.getCursor()"""
        return 'Cursor'._wrap(super(Component, self).getCursor())

    @override
    @overload
    def getContainerListeners(self) -> List['ContainerListener']:
        """public synchronized java.awt.event.ContainerListener[] java.awt.Container.getContainerListeners()"""
        return List['ContainerListener']._wrap(super(Container, self).getContainerListeners())

    @override
    @overload
    def removeAll(self):
        """public void java.awt.Container.removeAll()"""
        super(Container, self).removeAll()

    @override
    @overload
    def setOpaque(self, arg0: bool):
        """public void javax.swing.JComponent.setOpaque(boolean)"""
        super(_JComponent, self).setOpaque(_boolean.valueOf(arg0))

    @override
    @overload
    def setCursor(self, arg0: 'Cursor'):
        """public void java.awt.Component.setCursor(java.awt.Cursor)"""
        super(_Component, self).setCursor(arg0)

    @override
    @overload
    def getBackground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getBackground()"""
        return 'Color'._wrap(super(Component, self).getBackground())

    @overload
    def createImage(self, arg0: 'ImageProducer') -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(java.awt.image.ImageProducer)"""
        return 'Image'._wrap(super(_Component, self).createImage(arg0))

    @override
    @overload
    def setVerifyInputWhenFocusTarget(self, arg0: bool):
        """public void javax.swing.JComponent.setVerifyInputWhenFocusTarget(boolean)"""
        super(_JComponent, self).setVerifyInputWhenFocusTarget(_boolean.valueOf(arg0))

    @override
    @overload
    def removePropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0, arg1) 
 
 
# CLASS: com.badlogic.gdx.tools.flame.RegionPickerPanel
from pyquantum_helper import import_once as _import_once
import javax.accessibility.AccessibleContext as AccessibleContext
import javax.swing.JToolTip as JToolTip
import java.awt.event.HierarchyBoundsListener as HierarchyBoundsListener
import java.awt.event.ActionListener as _ActionListener
_ActionListener = _ActionListener
import java.awt.ComponentOrientation as _ComponentOrientation
_ComponentOrientation = _ComponentOrientation
import java.awt.image.ImageProducer as ImageProducer
import java.awt.GraphicsConfiguration as GraphicsConfiguration
import java.awt.Graphics as _Graphics
_Graphics = _Graphics
import javax.swing.JToolTip as _JToolTip
_JToolTip = _JToolTip
import java.awt.Container as _Container
_Container = _Container
import java.awt.MenuComponent as MenuComponent
import java.awt.im.InputMethodRequests as _InputMethodRequests
_InputMethodRequests = _InputMethodRequests
import java.awt.FocusTraversalPolicy as _FocusTraversalPolicy
_FocusTraversalPolicy = _FocusTraversalPolicy
import java.lang.Byte as _byte
import java.awt.Dimension as Dimension
import java.awt.Font as _Font
_Font = _Font
import javax.swing.plaf.PanelUI as _PanelUI
_PanelUI = _PanelUI
import java.awt.event.ContainerListener as ContainerListener
import javax.swing.event.AncestorListener as AncestorListener
import java.awt.AWTEvent as AWTEvent
import java.awt.image.ColorModel as _ColorModel
_ColorModel = _ColorModel
import java.lang.Object as _object
import java.awt.ComponentOrientation as ComponentOrientation
import java.awt.im.InputContext as _InputContext
_InputContext = _InputContext
from builtins import float
import java.awt.event.HierarchyListener as HierarchyListener
import java.awt.event.InputMethodListener as InputMethodListener
from typing import List
import java.awt.event.MouseWheelListener as _MouseWheelListener
_MouseWheelListener = _MouseWheelListener
import java.awt.event.KeyListener as KeyListener
import java.awt.Component as Component
try:
    from pygdx import graphics
except ImportError:
    graphics = _import_once("pygdx.graphics")

from builtins import int
import java.awt.LayoutManager as LayoutManager
import java.awt.FontMetrics as _FontMetrics
_FontMetrics = _FontMetrics
import java.awt.Container as Container
try:
    from pygdx.graphics import g2d
except ImportError:
    g2d = _import_once("pygdx.graphics.g2d")

from builtins import type
import java.awt.image.VolatileImage as _VolatileImage
_VolatileImage = _VolatileImage
import java.awt.Shape as Shape
import java.awt.Rectangle as Rectangle
import java.awt.event.ContainerListener as _ContainerListener
_ContainerListener = _ContainerListener
import java.awt.event.HierarchyListener as _HierarchyListener
_HierarchyListener = _HierarchyListener
import java.lang.String as _string
import javax.swing.InputVerifier as _InputVerifier
_InputVerifier = _InputVerifier
import java.awt.Insets as _Insets
_Insets = _Insets
import javax.swing.border.Border as _Border
_Border = _Border
import java.awt.event.ComponentListener as _ComponentListener
_ComponentListener = _ComponentListener
import com.badlogic.gdx.tools.flame.RegionPickerPanel as _RegionPickerPanel
_RegionPickerPanel = _RegionPickerPanel
import javax.swing.ActionMap as ActionMap
import java.beans.VetoableChangeListener as VetoableChangeListener
import java.awt.event.ComponentListener as ComponentListener
import javax.swing.KeyStroke as KeyStroke
import java.beans.VetoableChangeListener as _VetoableChangeListener
_VetoableChangeListener = _VetoableChangeListener
from builtins import object
import java.awt.event.KeyListener as _KeyListener
_KeyListener = _KeyListener
import java.awt.Component.BaselineResizeBehavior as BaselineResizeBehavior
import java.awt.Component as _Component_BaselineResizeBehavior
_BaselineResizeBehavior = _Component_BaselineResizeBehavior.BaselineResizeBehavior
import java.awt.Cursor as _Cursor
_Cursor = _Cursor
import java.awt.im.InputMethodRequests as InputMethodRequests
import java.lang.Long as _long
import javax.swing.JPanel as _JPanel
_JPanel = _JPanel
import java.awt.event.FocusListener as _FocusListener
_FocusListener = _FocusListener
import java.lang.Character as _char
import javax.swing.TransferHandler as TransferHandler
import java.awt.event.FocusEvent.Cause as Cause
import javax.accessibility.AccessibleContext as _AccessibleContext
_AccessibleContext = _AccessibleContext
import java.awt.event.MouseWheelListener as MouseWheelListener
import java.util.Set as _Set
_Set = _Set
import java.awt.image.ColorModel as ColorModel
import java.lang.Boolean as _boolean
import java.awt.event.MouseMotionListener as MouseMotionListener
import java.util.EventListener as EventListener
import java.awt.Insets as Insets
import javax.swing.KeyStroke as _KeyStroke
_KeyStroke = _KeyStroke
import java.awt.GraphicsConfiguration as _GraphicsConfiguration
_GraphicsConfiguration = _GraphicsConfiguration
import java.awt.dnd.DropTarget as _DropTarget
_DropTarget = _DropTarget
from builtins import bool
import java.beans.PropertyChangeListener as _PropertyChangeListener
_PropertyChangeListener = _PropertyChangeListener
import java.awt.LayoutManager as _LayoutManager
_LayoutManager = _LayoutManager
import java.awt.PopupMenu as PopupMenu
import java.util.EventListener as _EventListener
_EventListener = _EventListener
import java.awt.im.InputContext as InputContext
import java.awt.Component as _Component
_Component = _Component
import java.awt.Font as Font
import java.awt.image.VolatileImage as VolatileImage
import java.awt.dnd.DropTarget as DropTarget
import java.lang.String as _String
_String = _String
import java.lang.Float as _float
import java.awt.Cursor as Cursor
import java.awt.event.MouseListener as _MouseListener
_MouseListener = _MouseListener
import java.awt.Toolkit as _Toolkit
_Toolkit = _Toolkit
import java.io.PrintStream as PrintStream
import javax.swing.JRootPane as _JRootPane
_JRootPane = _JRootPane
import java.awt.Dimension as _Dimension
_Dimension = _Dimension
import java.awt.event.ActionListener as ActionListener
import java.awt.event.MouseEvent as MouseEvent
import java.awt.Color as _Color
_Color = _Color
import javax.swing.JPopupMenu as _JPopupMenu
_JPopupMenu = _JPopupMenu
import javax.swing.InputMap as _InputMap
_InputMap = _InputMap
import java.awt.event.MouseListener as MouseListener
import java.lang.Class as _Class
_Class = _Class
import java.util.Locale as Locale
import java.lang.Double as _double
import javax.swing.plaf.PanelUI as PanelUI
import java.awt.Point as _Point
_Point = _Point
import java.lang.Object as _Object
_Object = _Object
import java.beans.PropertyChangeListener as PropertyChangeListener
import javax.swing.border.Border as Border
import javax.swing.JComponent as _JComponent
_JComponent = _JComponent
import javax.swing.InputVerifier as InputVerifier
import java.io.PrintWriter as PrintWriter
import java.awt.Point as Point
import javax.swing.event.AncestorListener as _AncestorListener
_AncestorListener = _AncestorListener
import java.lang.Short as _short
import java.awt.Toolkit as Toolkit
import java.awt.event.HierarchyBoundsListener as _HierarchyBoundsListener
_HierarchyBoundsListener = _HierarchyBoundsListener
import javax.swing.TransferHandler as _TransferHandler
_TransferHandler = _TransferHandler
import javax.swing.InputMap as InputMap
import java.awt.Rectangle as _Rectangle
_Rectangle = _Rectangle
import javax.swing.JRootPane as JRootPane
import java.awt.Event as Event
import java.awt.event.FocusListener as FocusListener
import java.awt.image.ImageObserver as ImageObserver
from builtins import str
from pyquantum_helper import override
import javax.swing.ActionMap as _ActionMap
_ActionMap = _ActionMap
import java.awt.FocusTraversalPolicy as FocusTraversalPolicy
import java.awt.event.MouseMotionListener as _MouseMotionListener
_MouseMotionListener = _MouseMotionListener
import java.awt.event.InputMethodListener as _InputMethodListener
_InputMethodListener = _InputMethodListener
import javax.swing.JPopupMenu as JPopupMenu
import java.util.Set as Set
import java.lang.Integer as _int
import java.awt.Image as _Image
_Image = _Image
import java.awt.FontMetrics as FontMetrics
import java.awt.Color as Color
import java.awt.Image as Image
import java.awt.Graphics as Graphics
import java.awt.ImageCapabilities as ImageCapabilities
import java.util.Locale as _Locale
_Locale = _Locale
 
class RegionPickerPanel():
    """com.badlogic.gdx.tools.flame.RegionPickerPanel"""
 
    @staticmethod
    def _wrap(java_value: _RegionPickerPanel) -> 'RegionPickerPanel':
        return RegionPickerPanel(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _RegionPickerPanel):
        """
        Dynamic initializer for RegionPickerPanel.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_RegionPickerPanel__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_RegionPickerPanel__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def removeVetoableChangeListener(self, arg0: 'VetoableChangeListener'):
        """public synchronized void javax.swing.JComponent.removeVetoableChangeListener(java.beans.VetoableChangeListener)"""
        super(_JComponent, self).removeVetoableChangeListener(arg0)

    @override
    @overload
    def getComponents(self) -> List['Component']:
        """public java.awt.Component[] java.awt.Container.getComponents()"""
        return List['Component']._wrap(super(Container, self).getComponents())

    @override
    @overload
    def setDebugGraphicsOptions(self, arg0: int):
        """public void javax.swing.JComponent.setDebugGraphicsOptions(int)"""
        super(_JComponent, self).setDebugGraphicsOptions(_int.valueOf(arg0))

    @override
    @overload
    def isValid(self) -> bool:
        """public boolean java.awt.Component.isValid()"""
        return bool._wrap(super(Component, self).isValid())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def getDefaultLocale() -> 'Locale':
        """public static java.util.Locale javax.swing.JComponent.getDefaultLocale()"""
        return Locale._wrap(_JComponent.getDefaultLocale())

    @override
    @overload
    def getInputVerifier(self) -> 'InputVerifier':
        """public javax.swing.InputVerifier javax.swing.JComponent.getInputVerifier()"""
        return 'InputVerifier'._wrap(super(JComponent, self).getInputVerifier())

    @override
    @overload
    def list(self, arg0: 'PrintStream', arg1: int):
        """public void java.awt.Container.list(java.io.PrintStream,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @override
    @overload
    def setUI(self, arg0: 'PanelUI'):
        """public void javax.swing.JPanel.setUI(javax.swing.plaf.PanelUI)"""
        super(_JPanel, self).setUI(arg0)

    @override
    @overload
    def getFocusTraversalPolicy(self) -> 'FocusTraversalPolicy':
        """public java.awt.FocusTraversalPolicy java.awt.Container.getFocusTraversalPolicy()"""
        return 'FocusTraversalPolicy'._wrap(super(Container, self).getFocusTraversalPolicy())

    @override
    @overload
    def getParent(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getParent()"""
        return 'Container'._wrap(super(Component, self).getParent())

    @override
    @overload
    def paintImmediately(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.paintImmediately(java.awt.Rectangle)"""
        super(_JComponent, self).paintImmediately(arg0)

    @staticmethod
    @overload
    def setDefaultLocale(arg0: 'Locale'):
        """public static void javax.swing.JComponent.setDefaultLocale(java.util.Locale)"""
        _JComponent.setDefaultLocale(arg0)

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,float,float)"""
        super(_Component, self).firePropertyChange(arg0, _float.valueOf(arg1), _float.valueOf(arg2))

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object)"""
        super(_Container, self).add(arg0, arg1)

    @override
    @overload
    def getLocale(self) -> 'Locale':
        """public java.util.Locale java.awt.Component.getLocale()"""
        return 'Locale'._wrap(super(Component, self).getLocale())

    @override
    @overload
    def setInheritsPopupMenu(self, arg0: bool):
        """public void javax.swing.JComponent.setInheritsPopupMenu(boolean)"""
        super(_JComponent, self).setInheritsPopupMenu(_boolean.valueOf(arg0))

    @override
    @overload
    def getHierarchyListeners(self) -> List['HierarchyListener']:
        """public synchronized java.awt.event.HierarchyListener[] java.awt.Component.getHierarchyListeners()"""
        return List['HierarchyListener']._wrap(super(Component, self).getHierarchyListeners())

    @override
    @overload
    def nextFocus(self):
        """public void java.awt.Component.nextFocus()"""
        super(Component, self).nextFocus()

    @override
    @overload
    def isPaintingTile(self) -> bool:
        """public boolean javax.swing.JComponent.isPaintingTile()"""
        return bool._wrap(super(JComponent, self).isPaintingTile())

    @override
    @overload
    def isDisplayable(self) -> bool:
        """public boolean java.awt.Component.isDisplayable()"""
        return bool._wrap(super(Component, self).isDisplayable())

    @override
    @overload
    def getBounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.getBounds()"""
        return 'Rectangle'._wrap(super(Component, self).getBounds())

    @override
    @overload
    def removeMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.removeMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).removeMouseMotionListener(arg0)

    @override
    @overload
    def isShowing(self) -> bool:
        """public boolean java.awt.Component.isShowing()"""
        return bool._wrap(super(Component, self).isShowing())

    @override
    @overload
    def getDropTarget(self) -> 'DropTarget':
        """public synchronized java.awt.dnd.DropTarget java.awt.Component.getDropTarget()"""
        return 'DropTarget'._wrap(super(Component, self).getDropTarget())

    @override
    @overload
    def isFontSet(self) -> bool:
        """public boolean java.awt.Component.isFontSet()"""
        return bool._wrap(super(Component, self).isFontSet())

    @overload
    def mouseUp(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseUp(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseUp(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def setIgnoreRepaint(self, arg0: bool):
        """public void java.awt.Component.setIgnoreRepaint(boolean)"""
        super(_Component, self).setIgnoreRepaint(_boolean.valueOf(arg0))

    @override
    @overload
    def getPropertyChangeListeners(self) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners()"""
        return List['PropertyChangeListener']._wrap(super(Component, self).getPropertyChangeListeners())

    @override
    @overload
    def isBackgroundSet(self) -> bool:
        """public boolean java.awt.Component.isBackgroundSet()"""
        return bool._wrap(super(Component, self).isBackgroundSet())

    @override
    @overload
    def getLocation(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocation()"""
        return 'Point'._wrap(super(Component, self).getLocation())

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int._wrap(super(object, self).hashCode())

    @override
    @overload
    def location(self) -> 'Point':
        """public java.awt.Point java.awt.Component.location()"""
        return 'Point'._wrap(super(Component, self).location())

    @override
    @overload
    def getComponentOrientation(self) -> 'ComponentOrientation':
        """public java.awt.ComponentOrientation java.awt.Component.getComponentOrientation()"""
        return 'ComponentOrientation'._wrap(super(Component, self).getComponentOrientation())

    @override
    @overload
    def addHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.addHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).addHierarchyListener(arg0)

    @override
    @overload
    def getInheritsPopupMenu(self) -> bool:
        """public boolean javax.swing.JComponent.getInheritsPopupMenu()"""
        return bool._wrap(super(JComponent, self).getInheritsPopupMenu())

    @override
    @overload
    def setComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Component.setComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Component, self).setComponentOrientation(arg0)

    @override
    @overload
    def getFocusCycleRootAncestor(self) -> 'Container':
        """public java.awt.Container java.awt.Component.getFocusCycleRootAncestor()"""
        return 'Container'._wrap(super(Component, self).getFocusCycleRootAncestor())

    @override
    @overload
    def show(self, arg0: bool):
        """public void java.awt.Component.show(boolean)"""
        super(_Component, self).show(_boolean.valueOf(arg0))

    @override
    @overload
    def grabFocus(self):
        """public void javax.swing.JComponent.grabFocus()"""
        super(JComponent, self).grabFocus()

    @overload
    def locate(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.locate(int,int)"""
        return 'Component'._wrap(super(_Container, self).locate(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def isPaintingForPrint(self) -> bool:
        """public final boolean javax.swing.JComponent.isPaintingForPrint()"""
        return bool._wrap(super(JComponent, self).isPaintingForPrint())

    @overload
    def keyDown(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyDown(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyDown(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,int,int)"""
        super(_JComponent, self).firePropertyChange(arg0, _int.valueOf(arg1), _int.valueOf(arg2))

    @override
    @overload
    def getLayout(self) -> 'LayoutManager':
        """public java.awt.LayoutManager java.awt.Container.getLayout()"""
        return 'LayoutManager'._wrap(super(Container, self).getLayout())

    @override
    @overload
    def preferredSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.preferredSize()"""
        return 'Dimension'._wrap(super(Container, self).preferredSize())

    @override
    @overload
    def addNotify(self):
        """public void javax.swing.JComponent.addNotify()"""
        super(JComponent, self).addNotify()

    @override
    @overload
    def setSize(self, arg0: int, arg1: int):
        """public void java.awt.Component.setSize(int,int)"""
        super(_Component, self).setSize(_int.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def __init__(self, arg0: 'Listener'):
        """public com.badlogic.gdx.tools.flame.RegionPickerPanel(com.badlogic.gdx.tools.flame.RegionPickerPanel$Listener)"""
        val = _RegionPickerPanel(arg0)
        self.__wrapper = val

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.repaint(int,int,int,int)"""
        super(_Component, self).repaint(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @overload
    def requestFocusInWindow(self, arg0: 'Cause') -> bool:
        """public boolean java.awt.Component.requestFocusInWindow(java.awt.event.FocusEvent$Cause)"""
        return bool._wrap(super(_Component, self).requestFocusInWindow(arg0))

    @override
    @overload
    def remove(self, arg0: int):
        """public void java.awt.Container.remove(int)"""
        super(_Container, self).remove(_int.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,long,long)"""
        super(_Component, self).firePropertyChange(arg0, _long.valueOf(arg1), _long.valueOf(arg2))

    @override
    @overload
    def setFocusCycleRoot(self, arg0: bool):
        """public void java.awt.Container.setFocusCycleRoot(boolean)"""
        super(_Container, self).setFocusCycleRoot(_boolean.valueOf(arg0))

    @overload
    def keyUp(self, arg0: 'Event', arg1: int) -> bool:
        """public boolean java.awt.Component.keyUp(java.awt.Event,int)"""
        return bool._wrap(super(_Component, self).keyUp(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def setBackground(self, arg0: 'Color'):
        """public void javax.swing.JComponent.setBackground(java.awt.Color)"""
        super(_JComponent, self).setBackground(arg0)

    @override
    @overload
    def doLayout(self):
        """public void java.awt.Container.doLayout()"""
        super(Container, self).doLayout()

    @override
    @overload
    def enable(self):
        """public void javax.swing.JComponent.enable()"""
        super(JComponent, self).enable()

    @override
    @overload
    def getInsets(self) -> 'Insets':
        """public java.awt.Insets javax.swing.JComponent.getInsets()"""
        return 'Insets'._wrap(super(JComponent, self).getInsets())

    @override
    @overload
    def setNextFocusableComponent(self, arg0: 'Component'):
        """public void javax.swing.JComponent.setNextFocusableComponent(java.awt.Component)"""
        super(_JComponent, self).setNextFocusableComponent(arg0)

    @override
    @overload
    def getAlignmentY(self) -> float:
        """public float javax.swing.JComponent.getAlignmentY()"""
        return float._wrap(super(JComponent, self).getAlignmentY())

    @overload
    def checkImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @override
    @overload
    def getFocusTraversalKeysEnabled(self) -> bool:
        """public boolean java.awt.Component.getFocusTraversalKeysEnabled()"""
        return bool._wrap(super(Component, self).getFocusTraversalKeysEnabled())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getRootPane(self) -> 'JRootPane':
        """public javax.swing.JRootPane javax.swing.JComponent.getRootPane()"""
        return 'JRootPane'._wrap(super(JComponent, self).getRootPane())

    @override
    @overload
    def invalidate(self):
        """public void java.awt.Container.invalidate()"""
        super(Container, self).invalidate()

    @override
    @overload
    def resetKeyboardActions(self):
        """public void javax.swing.JComponent.resetKeyboardActions()"""
        super(JComponent, self).resetKeyboardActions()

    @overload
    def getComponent(self, arg0: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponent(int)"""
        return 'Component'._wrap(super(_Container, self).getComponent(_int.valueOf(arg0)))

    @override
    @overload
    def addPropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Container.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Container, self).addPropertyChangeListener(arg0, arg1)

    @override
    @overload
    def setInputMap(self, arg0: int, arg1: 'InputMap'):
        """public final void javax.swing.JComponent.setInputMap(int,javax.swing.InputMap)"""
        super(_JComponent, self).setInputMap(_int.valueOf(arg0), arg1)

    @override
    @overload
    def removePropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0)

    @override
    @overload
    def applyComponentOrientation(self, arg0: 'ComponentOrientation'):
        """public void java.awt.Container.applyComponentOrientation(java.awt.ComponentOrientation)"""
        super(_Container, self).applyComponentOrientation(arg0)

    @override
    @overload
    def setBorder(self, arg0: 'Border'):
        """public void javax.swing.JComponent.setBorder(javax.swing.border.Border)"""
        super(_JComponent, self).setBorder(arg0)

    @override
    @overload
    def remove(self, arg0: 'MenuComponent'):
        """public void java.awt.Component.remove(java.awt.MenuComponent)"""
        super(_Component, self).remove(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintStream'):
        """public void java.awt.Component.list(java.io.PrintStream)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def removeMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.removeMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).removeMouseListener(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintWriter'):
        """public void java.awt.Component.list(java.io.PrintWriter)"""
        super(_Component, self).list(arg0)

    @override
    @overload
    def getKeyListeners(self) -> List['KeyListener']:
        """public synchronized java.awt.event.KeyListener[] java.awt.Component.getKeyListeners()"""
        return List['KeyListener']._wrap(super(Component, self).getKeyListeners())

    @override
    @overload
    def getInputContext(self) -> 'InputContext':
        """public java.awt.im.InputContext java.awt.Component.getInputContext()"""
        return 'InputContext'._wrap(super(Component, self).getInputContext())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float):
        """public void java.awt.Component.firePropertyChange(java.lang.String,double,double)"""
        super(_Component, self).firePropertyChange(arg0, _double.valueOf(arg1), _double.valueOf(arg2))

    @override
    @overload
    def removeAncestorListener(self, arg0: 'AncestorListener'):
        """public void javax.swing.JComponent.removeAncestorListener(javax.swing.event.AncestorListener)"""
        super(_JComponent, self).removeAncestorListener(arg0)

    @override
    @overload
    def list(self, arg0: 'PrintWriter', arg1: int):
        """public void java.awt.Container.list(java.io.PrintWriter,int)"""
        super(_Container, self).list(arg0, _int.valueOf(arg1))

    @overload
    def checkImage(self, arg0: 'Image', arg1: 'ImageObserver') -> int:
        """public int java.awt.Component.checkImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return int._wrap(super(_Component, self).checkImage(arg0, arg1))

    @override
    @overload
    def removeFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.removeFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).removeFocusListener(arg0)

    @overload
    def mouseDown(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDown(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDown(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getConditionForKeyStroke(self, arg0: 'KeyStroke') -> int:
        """public int javax.swing.JComponent.getConditionForKeyStroke(javax.swing.KeyStroke)"""
        return int._wrap(super(_JComponent, self).getConditionForKeyStroke(arg0))

    @override
    @overload
    def getTreeLock(self) -> object:
        """public final java.lang.Object java.awt.Component.getTreeLock()"""
        return object._wrap(super(Component, self).getTreeLock())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @override
    @overload
    def addVetoableChangeListener(self, arg0: 'VetoableChangeListener'):
        """public synchronized void javax.swing.JComponent.addVetoableChangeListener(java.beans.VetoableChangeListener)"""
        super(_JComponent, self).addVetoableChangeListener(arg0)

    @overload
    def contains(self, arg0: 'Point') -> bool:
        """public boolean java.awt.Component.contains(java.awt.Point)"""
        return bool._wrap(super(_Component, self).contains(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,short,short)"""
        super(_Component, self).firePropertyChange(arg0, _short.valueOf(arg1), _short.valueOf(arg2))

    @override
    @overload
    def dispatchEvent(self, arg0: 'AWTEvent'):
        """public final void java.awt.Component.dispatchEvent(java.awt.AWTEvent)"""
        super(_Component, self).dispatchEvent(arg0)

    @override
    @overload
    def removeContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.removeContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).removeContainerListener(arg0)

    @override
    @overload
    def getGraphicsConfiguration(self) -> 'GraphicsConfiguration':
        """public java.awt.GraphicsConfiguration java.awt.Component.getGraphicsConfiguration()"""
        return 'GraphicsConfiguration'._wrap(super(Component, self).getGraphicsConfiguration())

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: bool, arg2: bool):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,boolean,boolean)"""
        super(_JComponent, self).firePropertyChange(arg0, _boolean.valueOf(arg1), _boolean.valueOf(arg2))

    @override
    @overload
    def registerKeyboardAction(self, arg0: 'ActionListener', arg1: str, arg2: 'KeyStroke', arg3: int):
        """public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,java.lang.String,javax.swing.KeyStroke,int)"""
        super(_JComponent, self).registerKeyboardAction(arg0, arg1, arg2, _int.valueOf(arg3))

    @overload
    def findComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(arg0))

    @override
    @overload
    def resize(self, arg0: int, arg1: int):
        """public void java.awt.Component.resize(int,int)"""
        super(_Component, self).resize(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getHeight(self) -> int:
        """public int javax.swing.JComponent.getHeight()"""
        return int._wrap(super(JComponent, self).getHeight())

    @override
    @overload
    def getTransferHandler(self) -> 'TransferHandler':
        """public javax.swing.TransferHandler javax.swing.JComponent.getTransferHandler()"""
        return 'TransferHandler'._wrap(super(JComponent, self).getTransferHandler())

    @overload
    def imageUpdate(self, arg0: 'Image', arg1: int, arg2: int, arg3: int, arg4: int, arg5: int) -> bool:
        """public boolean java.awt.Component.imageUpdate(java.awt.Image,int,int,int,int,int)"""
        return bool._wrap(super(_Component, self).imageUpdate(arg0, _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4), _int.valueOf(arg5)))

    @override
    @overload
    def getWidth(self) -> int:
        """public int javax.swing.JComponent.getWidth()"""
        return int._wrap(super(JComponent, self).getWidth())

    @override
    @overload
    def transferFocusBackward(self):
        """public void java.awt.Component.transferFocusBackward()"""
        super(Component, self).transferFocusBackward()

    @overload
    def getPropertyChangeListeners(self, arg0: str) -> List['PropertyChangeListener']:
        """public java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners(java.lang.String)"""
        return List['PropertyChangeListener']._wrap(super(_Component, self).getPropertyChangeListeners(arg0))

    @staticmethod
    @overload
    def isLightweightComponent(arg0: 'Component') -> bool:
        """public static boolean javax.swing.JComponent.isLightweightComponent(java.awt.Component)"""
        return bool._wrap(_JComponent.isLightweightComponent(arg0))

    @override
    @overload
    def getBorder(self) -> 'Border':
        """public javax.swing.border.Border javax.swing.JComponent.getBorder()"""
        return 'Border'._wrap(super(JComponent, self).getBorder())

    @override
    @overload
    def printAll(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.printAll(java.awt.Graphics)"""
        super(_JComponent, self).printAll(arg0)

    @override
    @overload
    def addComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.addComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).addComponentListener(arg0)

    @override
    @overload
    def getBaselineResizeBehavior(self) -> 'BaselineResizeBehavior.Component$BaselineResizeBehavior':
        """public java.awt.Component$BaselineResizeBehavior javax.swing.JComponent.getBaselineResizeBehavior()"""
        return 'BaselineResizeBehavior.Component$BaselineResizeBehavior'._wrap(super(JComponent, self).getBaselineResizeBehavior())

    @override
    @overload
    def print(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.print(java.awt.Graphics)"""
        super(_JComponent, self).print(arg0)

    @override
    @overload
    def setInputVerifier(self, arg0: 'InputVerifier'):
        """public void javax.swing.JComponent.setInputVerifier(javax.swing.InputVerifier)"""
        super(_JComponent, self).setInputVerifier(arg0)

    @override
    @overload
    def addAncestorListener(self, arg0: 'AncestorListener'):
        """public void javax.swing.JComponent.addAncestorListener(javax.swing.event.AncestorListener)"""
        super(_JComponent, self).addAncestorListener(arg0)

    @override
    @overload
    def getFont(self) -> 'Font':
        """public java.awt.Font java.awt.Component.getFont()"""
        return 'Font'._wrap(super(Component, self).getFont())

    @override
    @overload
    def setFont(self, arg0: 'Font'):
        """public void javax.swing.JComponent.setFont(java.awt.Font)"""
        super(_JComponent, self).setFont(arg0)

    @override
    @overload
    def isOptimizedDrawingEnabled(self) -> bool:
        """public boolean javax.swing.JComponent.isOptimizedDrawingEnabled()"""
        return bool._wrap(super(JComponent, self).isOptimizedDrawingEnabled())

    @override
    @overload
    def isValidateRoot(self) -> bool:
        """public boolean javax.swing.JComponent.isValidateRoot()"""
        return bool._wrap(super(JComponent, self).isValidateRoot())

    @overload
    def prepareImage(self, arg0: 'Image', arg1: int, arg2: int, arg3: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @override
    @overload
    def setForeground(self, arg0: 'Color'):
        """public void javax.swing.JComponent.setForeground(java.awt.Color)"""
        super(_JComponent, self).setForeground(arg0)

    @overload
    def mouseDrag(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseDrag(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseDrag(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def isOpaque(self) -> bool:
        """public boolean javax.swing.JComponent.isOpaque()"""
        return bool._wrap(super(JComponent, self).isOpaque())

    @overload
    def createVolatileImage(self, arg0: int, arg1: int, arg2: 'ImageCapabilities') -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int,java.awt.ImageCapabilities) throws java.awt.AWTException"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1), arg2))

    @override
    @overload
    def bounds(self) -> 'Rectangle':
        """public java.awt.Rectangle java.awt.Component.bounds()"""
        return 'Rectangle'._wrap(super(Component, self).bounds())

    @override
    @overload
    def update(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.update(java.awt.Graphics)"""
        super(_JComponent, self).update(arg0)

    @override
    @overload
    def add(self, arg0: 'PopupMenu'):
        """public void java.awt.Component.add(java.awt.PopupMenu)"""
        super(_Component, self).add(arg0)

    @override
    @overload
    def getToolTipText(self) -> str:
        """public java.lang.String javax.swing.JComponent.getToolTipText()"""
        return str._wrap(super(JComponent, self).getToolTipText())

    @override
    @overload
    def isVisible(self) -> bool:
        """public boolean java.awt.Component.isVisible()"""
        return bool._wrap(super(Component, self).isVisible())

    @override
    @overload
    def setDropTarget(self, arg0: 'DropTarget'):
        """public synchronized void java.awt.Component.setDropTarget(java.awt.dnd.DropTarget)"""
        super(_Component, self).setDropTarget(arg0)

    @override
    @overload
    def getLocationOnScreen(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getLocationOnScreen()"""
        return 'Point'._wrap(super(Component, self).getLocationOnScreen())

    @override
    @overload
    def getY(self) -> int:
        """public int javax.swing.JComponent.getY()"""
        return int._wrap(super(JComponent, self).getY())

    @overload
    def getComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def isMaximumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMaximumSizeSet()"""
        return bool._wrap(super(Component, self).isMaximumSizeSet())

    @override
    @overload
    def setAlignmentY(self, arg0: float):
        """public void javax.swing.JComponent.setAlignmentY(float)"""
        super(_JComponent, self).setAlignmentY(_float.valueOf(arg0))

    @override
    @overload
    def getRegisteredKeyStrokes(self) -> List['KeyStroke']:
        """public javax.swing.KeyStroke[] javax.swing.JComponent.getRegisteredKeyStrokes()"""
        return List['KeyStroke']._wrap(super(JComponent, self).getRegisteredKeyStrokes())

    @override
    @overload
    def isFocusable(self) -> bool:
        """public boolean java.awt.Component.isFocusable()"""
        return bool._wrap(super(Component, self).isFocusable())

    @override
    @overload
    def isFocusTraversalPolicyProvider(self) -> bool:
        """public final boolean java.awt.Container.isFocusTraversalPolicyProvider()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicyProvider())

    @override
    @overload
    def getMouseListeners(self) -> List['MouseListener']:
        """public synchronized java.awt.event.MouseListener[] java.awt.Component.getMouseListeners()"""
        return List['MouseListener']._wrap(super(Component, self).getMouseListeners())

    @override
    @overload
    def registerKeyboardAction(self, arg0: 'ActionListener', arg1: 'KeyStroke', arg2: int):
        """public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,javax.swing.KeyStroke,int)"""
        super(_JComponent, self).registerKeyboardAction(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def transferFocusUpCycle(self):
        """public void java.awt.Component.transferFocusUpCycle()"""
        super(Component, self).transferFocusUpCycle()

    @override
    @overload
    def removeKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.removeKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).removeKeyListener(arg0)

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: str, arg2: str):
        """public void javax.swing.JComponent.firePropertyChange(java.lang.String,char,char)"""
        super(_JComponent, self).firePropertyChange(arg0, _char.valueOf(arg1), _char.valueOf(arg2))

    @override
    @overload
    def getMouseMotionListeners(self) -> List['MouseMotionListener']:
        """public synchronized java.awt.event.MouseMotionListener[] java.awt.Component.getMouseMotionListeners()"""
        return List['MouseMotionListener']._wrap(super(Component, self).getMouseMotionListeners())

    @override
    @overload
    def getAutoscrolls(self) -> bool:
        """public boolean javax.swing.JComponent.getAutoscrolls()"""
        return bool._wrap(super(JComponent, self).getAutoscrolls())

    @override
    @overload
    def addContainerListener(self, arg0: 'ContainerListener'):
        """public synchronized void java.awt.Container.addContainerListener(java.awt.event.ContainerListener)"""
        super(_Container, self).addContainerListener(arg0)

    @override
    @overload
    def isFocusTraversable(self) -> bool:
        """public boolean java.awt.Component.isFocusTraversable()"""
        return bool._wrap(super(Component, self).isFocusTraversable())

    @overload
    def mouseExit(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseExit(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseExit(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getBounds(self, arg0: 'Rectangle') -> 'Rectangle':
        """public java.awt.Rectangle javax.swing.JComponent.getBounds(java.awt.Rectangle)"""
        return 'Rectangle'._wrap(super(_JComponent, self).getBounds(arg0))

    @override
    @overload
    def setToolTipText(self, arg0: str):
        """public void javax.swing.JComponent.setToolTipText(java.lang.String)"""
        super(_JComponent, self).setToolTipText(arg0)

    @override
    @overload
    def setAutoscrolls(self, arg0: bool):
        """public void javax.swing.JComponent.setAutoscrolls(boolean)"""
        super(_JComponent, self).setAutoscrolls(_boolean.valueOf(arg0))

    @override
    @overload
    def setComponentPopupMenu(self, arg0: 'JPopupMenu'):
        """public void javax.swing.JComponent.setComponentPopupMenu(javax.swing.JPopupMenu)"""
        super(_JComponent, self).setComponentPopupMenu(arg0)

    @override
    @overload
    def setMixingCutoutShape(self, arg0: 'Shape'):
        """public void java.awt.Component.setMixingCutoutShape(java.awt.Shape)"""
        super(_Component, self).setMixingCutoutShape(arg0)

    @override
    @overload
    def getVisibleRect(self) -> 'Rectangle':
        """public java.awt.Rectangle javax.swing.JComponent.getVisibleRect()"""
        return 'Rectangle'._wrap(super(JComponent, self).getVisibleRect())

    @override
    @overload
    def requestFocus(self, arg0: 'Cause'):
        """public void java.awt.Component.requestFocus(java.awt.event.FocusEvent$Cause)"""
        super(_Component, self).requestFocus(arg0)

    @overload
    def createImage(self, arg0: int, arg1: int) -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(int,int)"""
        return 'Image'._wrap(super(_Component, self).createImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def putClientProperty(self, arg0: object, arg1: object):
        """public final void javax.swing.JComponent.putClientProperty(java.lang.Object,java.lang.Object)"""
        super(_JComponent, self).putClientProperty(arg0, arg1)

    @override
    @overload
    def getVetoableChangeListeners(self) -> List['VetoableChangeListener']:
        """public synchronized java.beans.VetoableChangeListener[] javax.swing.JComponent.getVetoableChangeListeners()"""
        return List['VetoableChangeListener']._wrap(super(JComponent, self).getVetoableChangeListeners())

    @override
    @overload
    def scrollRectToVisible(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.scrollRectToVisible(java.awt.Rectangle)"""
        super(_JComponent, self).scrollRectToVisible(arg0)

    @override
    @overload
    def getTopLevelAncestor(self) -> 'Container':
        """public java.awt.Container javax.swing.JComponent.getTopLevelAncestor()"""
        return 'Container'._wrap(super(JComponent, self).getTopLevelAncestor())

    @override
    @overload
    def isRequestFocusEnabled(self) -> bool:
        """public boolean javax.swing.JComponent.isRequestFocusEnabled()"""
        return bool._wrap(super(JComponent, self).isRequestFocusEnabled())

    @override
    @overload
    def getFocusListeners(self) -> List['FocusListener']:
        """public synchronized java.awt.event.FocusListener[] java.awt.Component.getFocusListeners()"""
        return List['FocusListener']._wrap(super(Component, self).getFocusListeners())

    @override
    @overload
    def setLayout(self, arg0: 'LayoutManager'):
        """public void java.awt.Container.setLayout(java.awt.LayoutManager)"""
        super(_Container, self).setLayout(arg0)

    @overload
    def add(self, arg0: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0))

    @override
    @overload
    def getMouseWheelListeners(self) -> List['MouseWheelListener']:
        """public synchronized java.awt.event.MouseWheelListener[] java.awt.Component.getMouseWheelListeners()"""
        return List['MouseWheelListener']._wrap(super(Component, self).getMouseWheelListeners())

    @override
    @overload
    def reshape(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void javax.swing.JComponent.reshape(int,int,int,int)"""
        super(_JComponent, self).reshape(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def setTransferHandler(self, arg0: 'TransferHandler'):
        """public void javax.swing.JComponent.setTransferHandler(javax.swing.TransferHandler)"""
        super(_JComponent, self).setTransferHandler(arg0)

    @override
    @overload
    def getPreferredSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getPreferredSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getPreferredSize())

    @override
    @overload
    def setLocation(self, arg0: int, arg1: int):
        """public void java.awt.Component.setLocation(int,int)"""
        super(_Component, self).setLocation(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def removeInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.removeInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).removeInputMethodListener(arg0)

    @override
    @overload
    def setFocusable(self, arg0: bool):
        """public void java.awt.Component.setFocusable(boolean)"""
        super(_Component, self).setFocusable(_boolean.valueOf(arg0))

    @override
    @overload
    def paintComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.paintComponents(java.awt.Graphics)"""
        super(_Container, self).paintComponents(arg0)

    @override
    @overload
    def addFocusListener(self, arg0: 'FocusListener'):
        """public synchronized void java.awt.Component.addFocusListener(java.awt.event.FocusListener)"""
        super(_Component, self).addFocusListener(arg0)

    @overload
    def prepareImage(self, arg0: 'Image', arg1: 'ImageObserver') -> bool:
        """public boolean java.awt.Component.prepareImage(java.awt.Image,java.awt.image.ImageObserver)"""
        return bool._wrap(super(_Component, self).prepareImage(arg0, arg1))

    @override
    @overload
    def addKeyListener(self, arg0: 'KeyListener'):
        """public synchronized void java.awt.Component.addKeyListener(java.awt.event.KeyListener)"""
        super(_Component, self).addKeyListener(arg0)

    @override
    @overload
    def resize(self, arg0: 'Dimension'):
        """public void java.awt.Component.resize(java.awt.Dimension)"""
        super(_Component, self).resize(arg0)

    @override
    @overload
    def setComponentZOrder(self, arg0: 'Component', arg1: int):
        """public void java.awt.Container.setComponentZOrder(java.awt.Component,int)"""
        super(_Container, self).setComponentZOrder(arg0, _int.valueOf(arg1))

    @override
    @overload
    def list(self):
        """public void java.awt.Component.list()"""
        super(Component, self).list()

    @overload
    def add(self, arg0: str, arg1: 'Component') -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.lang.String,java.awt.Component)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, arg1))

    @override
    @overload
    def paintImmediately(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void javax.swing.JComponent.paintImmediately(int,int,int,int)"""
        super(_JComponent, self).paintImmediately(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def getMinimumSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getMinimumSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getMinimumSize())

    @override
    @overload
    def setEnabled(self, arg0: bool):
        """public void javax.swing.JComponent.setEnabled(boolean)"""
        super(_JComponent, self).setEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def hasFocus(self) -> bool:
        """public boolean java.awt.Component.hasFocus()"""
        return bool._wrap(super(Component, self).hasFocus())

    @overload
    def createVolatileImage(self, arg0: int, arg1: int) -> 'VolatileImage':
        """public java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int)"""
        return 'VolatileImage'._wrap(super(_Component, self).createVolatileImage(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeHierarchyListener(self, arg0: 'HierarchyListener'):
        """public void java.awt.Component.removeHierarchyListener(java.awt.event.HierarchyListener)"""
        super(_Component, self).removeHierarchyListener(arg0)

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.awt.Component.toString()"""
        return str._wrap(super(Component, self).toString())

    @override
    @overload
    def addMouseListener(self, arg0: 'MouseListener'):
        """public synchronized void java.awt.Component.addMouseListener(java.awt.event.MouseListener)"""
        super(_Component, self).addMouseListener(arg0)

    @override
    @overload
    def isFocusOwner(self) -> bool:
        """public boolean java.awt.Component.isFocusOwner()"""
        return bool._wrap(super(Component, self).isFocusOwner())

    @override
    @overload
    def getAccessibleContext(self) -> 'AccessibleContext':
        """public javax.accessibility.AccessibleContext javax.swing.JPanel.getAccessibleContext()"""
        return 'AccessibleContext'._wrap(super(JPanel, self).getAccessibleContext())

    @overload
    def postEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.postEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).postEvent(arg0))

    @overload
    def getLocation(self, arg0: 'Point') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getLocation(java.awt.Point)"""
        return 'Point'._wrap(super(_JComponent, self).getLocation(arg0))

    @overload
    def getBaseline(self, arg0: int, arg1: int) -> int:
        """public int javax.swing.JComponent.getBaseline(int,int)"""
        return int._wrap(super(_JComponent, self).getBaseline(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def findComponentAt(self, arg0: int, arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.findComponentAt(int,int)"""
        return 'Component'._wrap(super(_Container, self).findComponentAt(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def removeNotify(self):
        """public void javax.swing.JComponent.removeNotify()"""
        super(JComponent, self).removeNotify()

    @override
    @overload
    def getForeground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getForeground()"""
        return 'Color'._wrap(super(Component, self).getForeground())

    @override
    @overload
    def show(self):
        """public void java.awt.Component.show()"""
        super(Component, self).show()

    @override
    @overload
    def isDoubleBuffered(self) -> bool:
        """public boolean javax.swing.JComponent.isDoubleBuffered()"""
        return bool._wrap(super(JComponent, self).isDoubleBuffered())

    @override
    @overload
    def isFocusCycleRoot(self) -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot()"""
        return bool._wrap(super(Container, self).isFocusCycleRoot())

    @override
    @overload
    def addMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.addMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).addMouseWheelListener(arg0)

    @override
    @overload
    def hide(self):
        """public void javax.swing.JComponent.hide()"""
        super(JComponent, self).hide()

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def revalidate(self):
        """public void javax.swing.JComponent.revalidate()"""
        super(JComponent, self).revalidate()

    @override
    @overload
    def getActionMap(self) -> 'ActionMap':
        """public final javax.swing.ActionMap javax.swing.JComponent.getActionMap()"""
        return 'ActionMap'._wrap(super(JComponent, self).getActionMap())

    @override
    @overload
    def requestFocusInWindow(self) -> bool:
        """public boolean javax.swing.JComponent.requestFocusInWindow()"""
        return bool._wrap(super(JComponent, self).requestFocusInWindow())

    @overload
    def action(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.action(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).action(arg0, arg1))

    @override
    @overload
    def isManagingFocus(self) -> bool:
        """public boolean javax.swing.JComponent.isManagingFocus()"""
        return bool._wrap(super(JComponent, self).isManagingFocus())

    @override
    @overload
    def isLightweight(self) -> bool:
        """public boolean java.awt.Component.isLightweight()"""
        return bool._wrap(super(Component, self).isLightweight())

    @override
    @overload
    def setAlignmentX(self, arg0: float):
        """public void javax.swing.JComponent.setAlignmentX(float)"""
        super(_JComponent, self).setAlignmentX(_float.valueOf(arg0))

    @overload
    def getFocusTraversalKeys(self, arg0: int) -> 'Set':
        """public java.util.Set<java.awt.AWTKeyStroke> java.awt.Container.getFocusTraversalKeys(int)"""
        return 'Set'._wrap(super(_Container, self).getFocusTraversalKeys(_int.valueOf(arg0)))

    @override
    @overload
    def setFocusTraversalKeysEnabled(self, arg0: bool):
        """public void java.awt.Component.setFocusTraversalKeysEnabled(boolean)"""
        super(_Component, self).setFocusTraversalKeysEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def remove(self, arg0: 'Component'):
        """public void java.awt.Container.remove(java.awt.Component)"""
        super(_Container, self).remove(arg0)

    @overload
    def setTexture(self, arg0: 'Texture'):
        """public void com.badlogic.gdx.tools.flame.RegionPickerPanel.setTexture(com.badlogic.gdx.graphics.Texture)"""
        super(_RegionPickerPanel, self).setTexture(arg0)

    @overload
    def getInsets(self, arg0: 'Insets') -> 'Insets':
        """public java.awt.Insets javax.swing.JComponent.getInsets(java.awt.Insets)"""
        return 'Insets'._wrap(super(_JComponent, self).getInsets(arg0))

    @override
    @overload
    def insets(self) -> 'Insets':
        """public java.awt.Insets java.awt.Container.insets()"""
        return 'Insets'._wrap(super(Container, self).insets())

    @override
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int):
        """public void javax.swing.JComponent.repaint(long,int,int,int,int)"""
        super(_JComponent, self).repaint(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4))

    @override
    @overload
    def setFocusTraversalPolicy(self, arg0: 'FocusTraversalPolicy'):
        """public void java.awt.Container.setFocusTraversalPolicy(java.awt.FocusTraversalPolicy)"""
        super(_Container, self).setFocusTraversalPolicy(arg0)

    @overload
    def getSize(self, arg0: 'Dimension') -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getSize(java.awt.Dimension)"""
        return 'Dimension'._wrap(super(_JComponent, self).getSize(arg0))

    @override
    @overload
    def enable(self, arg0: bool):
        """public void java.awt.Component.enable(boolean)"""
        super(_Component, self).enable(_boolean.valueOf(arg0))

    @overload
    def getToolTipLocation(self, arg0: 'MouseEvent') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getToolTipLocation(java.awt.event.MouseEvent)"""
        return 'Point'._wrap(super(_JComponent, self).getToolTipLocation(arg0))

    @override
    @overload
    def addPropertyChangeListener(self, arg0: 'PropertyChangeListener'):
        """public void java.awt.Container.addPropertyChangeListener(java.beans.PropertyChangeListener)"""
        super(_Container, self).addPropertyChangeListener(arg0)

    @overload
    def getComponentAt(self, arg0: 'Point') -> 'Component':
        """public java.awt.Component java.awt.Container.getComponentAt(java.awt.Point)"""
        return 'Component'._wrap(super(_Container, self).getComponentAt(arg0))

    @override
    @overload
    def size(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.size()"""
        return 'Dimension'._wrap(super(Component, self).size())

    @override
    @overload
    def getVerifyInputWhenFocusTarget(self) -> bool:
        """public boolean javax.swing.JComponent.getVerifyInputWhenFocusTarget()"""
        return bool._wrap(super(JComponent, self).getVerifyInputWhenFocusTarget())

    @overload
    def mouseMove(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseMove(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseMove(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @overload
    def getActionForKeyStroke(self, arg0: 'KeyStroke') -> 'ActionListener':
        """public java.awt.event.ActionListener javax.swing.JComponent.getActionForKeyStroke(javax.swing.KeyStroke)"""
        return 'ActionListener'._wrap(super(_JComponent, self).getActionForKeyStroke(arg0))

    @overload
    def lostFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.lostFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).lostFocus(arg0, arg1))

    @override
    @overload
    def isMinimumSizeSet(self) -> bool:
        """public boolean java.awt.Component.isMinimumSizeSet()"""
        return bool._wrap(super(Component, self).isMinimumSizeSet())

    @override
    @overload
    def isForegroundSet(self) -> bool:
        """public boolean java.awt.Component.isForegroundSet()"""
        return bool._wrap(super(Component, self).isForegroundSet())

    @overload
    def getMousePosition(self, arg0: bool) -> 'Point':
        """public java.awt.Point java.awt.Container.getMousePosition(boolean) throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(_Container, self).getMousePosition(_boolean.valueOf(arg0)))

    @overload
    def getFontMetrics(self, arg0: 'Font') -> 'FontMetrics':
        """public java.awt.FontMetrics javax.swing.JComponent.getFontMetrics(java.awt.Font)"""
        return 'FontMetrics'._wrap(super(_JComponent, self).getFontMetrics(arg0))

    @overload
    def getListeners(self, arg0: 'Class') -> List['EventListener']:
        """public <T extends java.util.EventListener> T[] javax.swing.JComponent.getListeners(java.lang.Class<T>)"""
        return List['EventListener']._wrap(super(_JComponent, self).getListeners(arg0))

    @override
    @overload
    def getHierarchyBoundsListeners(self) -> List['HierarchyBoundsListener']:
        """public synchronized java.awt.event.HierarchyBoundsListener[] java.awt.Component.getHierarchyBoundsListeners()"""
        return List['HierarchyBoundsListener']._wrap(super(Component, self).getHierarchyBoundsListeners())

    @override
    @overload
    def minimumSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Container.minimumSize()"""
        return 'Dimension'._wrap(super(Container, self).minimumSize())

    @overload
    def handleEvent(self, arg0: 'Event') -> bool:
        """public boolean java.awt.Component.handleEvent(java.awt.Event)"""
        return bool._wrap(super(_Component, self).handleEvent(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @override
    @overload
    def getComponentListeners(self) -> List['ComponentListener']:
        """public synchronized java.awt.event.ComponentListener[] java.awt.Component.getComponentListeners()"""
        return List['ComponentListener']._wrap(super(Component, self).getComponentListeners())

    @override
    @overload
    def computeVisibleRect(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.computeVisibleRect(java.awt.Rectangle)"""
        super(_JComponent, self).computeVisibleRect(arg0)

    @override
    @overload
    def deliverEvent(self, arg0: 'Event'):
        """public void java.awt.Container.deliverEvent(java.awt.Event)"""
        super(_Container, self).deliverEvent(arg0)

    @override
    @overload
    def addHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.addHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).addHierarchyBoundsListener(arg0)

    @override
    @overload
    def getAlignmentX(self) -> float:
        """public float javax.swing.JComponent.getAlignmentX()"""
        return float._wrap(super(JComponent, self).getAlignmentX())

    @overload
    def add(self, arg0: 'Component', arg1: int) -> 'Component':
        """public java.awt.Component java.awt.Container.add(java.awt.Component,int)"""
        return 'Component'._wrap(super(_Container, self).add(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def repaint(self):
        """public void java.awt.Component.repaint()"""
        super(Component, self).repaint()

    @overload
    def gotFocus(self, arg0: 'Event', arg1: object) -> bool:
        """public boolean java.awt.Component.gotFocus(java.awt.Event,java.lang.Object)"""
        return bool._wrap(super(_Component, self).gotFocus(arg0, arg1))

    @override
    @overload
    def createToolTip(self) -> 'JToolTip':
        """public javax.swing.JToolTip javax.swing.JComponent.createToolTip()"""
        return 'JToolTip'._wrap(super(JComponent, self).createToolTip())

    @overload
    def getToolTipText(self, arg0: 'MouseEvent') -> str:
        """public java.lang.String javax.swing.JComponent.getToolTipText(java.awt.event.MouseEvent)"""
        return str._wrap(super(_JComponent, self).getToolTipText(arg0))

    @override
    @overload
    def printComponents(self, arg0: 'Graphics'):
        """public void java.awt.Container.printComponents(java.awt.Graphics)"""
        super(_Container, self).printComponents(arg0)

    @override
    @overload
    def getColorModel(self) -> 'ColorModel':
        """public java.awt.image.ColorModel java.awt.Component.getColorModel()"""
        return 'ColorModel'._wrap(super(Component, self).getColorModel())

    @override
    @overload
    def setFocusTraversalPolicyProvider(self, arg0: bool):
        """public final void java.awt.Container.setFocusTraversalPolicyProvider(boolean)"""
        super(_Container, self).setFocusTraversalPolicyProvider(_boolean.valueOf(arg0))

    @overload
    def getComponentZOrder(self, arg0: 'Component') -> int:
        """public int java.awt.Container.getComponentZOrder(java.awt.Component)"""
        return int._wrap(super(_Container, self).getComponentZOrder(arg0))

    @override
    @overload
    def getDebugGraphicsOptions(self) -> int:
        """public int javax.swing.JComponent.getDebugGraphicsOptions()"""
        return int._wrap(super(JComponent, self).getDebugGraphicsOptions())

    @overload
    def areFocusTraversalKeysSet(self, arg0: int) -> bool:
        """public boolean java.awt.Container.areFocusTraversalKeysSet(int)"""
        return bool._wrap(super(_Container, self).areFocusTraversalKeysSet(_int.valueOf(arg0)))

    @override
    @overload
    def getSize(self) -> 'Dimension':
        """public java.awt.Dimension java.awt.Component.getSize()"""
        return 'Dimension'._wrap(super(Component, self).getSize())

    @override
    @overload
    def setName(self, arg0: str):
        """public void java.awt.Component.setName(java.lang.String)"""
        super(_Component, self).setName(arg0)

    @override
    @overload
    def repaint(self, arg0: 'Rectangle'):
        """public void javax.swing.JComponent.repaint(java.awt.Rectangle)"""
        super(_JComponent, self).repaint(arg0)

    @overload
    def getClientProperty(self, arg0: object) -> object:
        """public final java.lang.Object javax.swing.JComponent.getClientProperty(java.lang.Object)"""
        return object._wrap(super(_JComponent, self).getClientProperty(arg0))

    @override
    @overload
    def unregisterKeyboardAction(self, arg0: 'KeyStroke'):
        """public void javax.swing.JComponent.unregisterKeyboardAction(javax.swing.KeyStroke)"""
        super(_JComponent, self).unregisterKeyboardAction(arg0)

    @overload
    def requestFocus(self, arg0: bool) -> bool:
        """public boolean javax.swing.JComponent.requestFocus(boolean)"""
        return bool._wrap(super(_JComponent, self).requestFocus(_boolean.valueOf(arg0)))

    @override
    @overload
    def setActionMap(self, arg0: 'ActionMap'):
        """public final void javax.swing.JComponent.setActionMap(javax.swing.ActionMap)"""
        super(_JComponent, self).setActionMap(arg0)

    @override
    @overload
    def getX(self) -> int:
        """public int javax.swing.JComponent.getX()"""
        return int._wrap(super(JComponent, self).getX())

    @overload
    def mouseEnter(self, arg0: 'Event', arg1: int, arg2: int) -> bool:
        """public boolean java.awt.Component.mouseEnter(java.awt.Event,int,int)"""
        return bool._wrap(super(_Component, self).mouseEnter(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def updateUI(self):
        """public void javax.swing.JPanel.updateUI()"""
        super(JPanel, self).updateUI()

    @override
    @overload
    def getToolkit(self) -> 'Toolkit':
        """public java.awt.Toolkit java.awt.Component.getToolkit()"""
        return 'Toolkit'._wrap(super(Component, self).getToolkit())

    @override
    @overload
    def isCursorSet(self) -> bool:
        """public boolean java.awt.Component.isCursorSet()"""
        return bool._wrap(super(Component, self).isCursorSet())

    @override
    @overload
    def add(self, arg0: 'Component', arg1: object, arg2: int):
        """public void java.awt.Container.add(java.awt.Component,java.lang.Object,int)"""
        super(_Container, self).add(arg0, arg1, _int.valueOf(arg2))

    @override
    @overload
    def setPreferredSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setPreferredSize(java.awt.Dimension)"""
        super(_JComponent, self).setPreferredSize(arg0)

    @override
    @overload
    def setBounds(self, arg0: int, arg1: int, arg2: int, arg3: int):
        """public void java.awt.Component.setBounds(int,int,int,int)"""
        super(_Component, self).setBounds(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3))

    @override
    @overload
    def isFocusTraversalPolicySet(self) -> bool:
        """public boolean java.awt.Container.isFocusTraversalPolicySet()"""
        return bool._wrap(super(Container, self).isFocusTraversalPolicySet())

    @override
    @overload
    def requestFocus(self):
        """public void javax.swing.JComponent.requestFocus()"""
        super(JComponent, self).requestFocus()

    @override
    @overload
    def getAncestorListeners(self) -> List['AncestorListener']:
        """public javax.swing.event.AncestorListener[] javax.swing.JComponent.getAncestorListeners()"""
        return List['AncestorListener']._wrap(super(JComponent, self).getAncestorListeners())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool._wrap(super(_object, self).equals(arg0))

    @overload
    def getInputMap(self, arg0: int) -> 'InputMap':
        """public final javax.swing.InputMap javax.swing.JComponent.getInputMap(int)"""
        return 'InputMap'._wrap(super(_JComponent, self).getInputMap(_int.valueOf(arg0)))

    @override
    @overload
    def isEnabled(self) -> bool:
        """public boolean java.awt.Component.isEnabled()"""
        return bool._wrap(super(Component, self).isEnabled())

    @override
    @overload
    def move(self, arg0: int, arg1: int):
        """public void java.awt.Component.move(int,int)"""
        super(_Component, self).move(_int.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getName(self) -> str:
        """public java.lang.String java.awt.Component.getName()"""
        return str._wrap(super(Component, self).getName())

    @override
    @overload
    def addMouseMotionListener(self, arg0: 'MouseMotionListener'):
        """public synchronized void java.awt.Component.addMouseMotionListener(java.awt.event.MouseMotionListener)"""
        super(_Component, self).addMouseMotionListener(arg0)

    @override
    @overload
    def getIgnoreRepaint(self) -> bool:
        """public boolean java.awt.Component.getIgnoreRepaint()"""
        return bool._wrap(super(Component, self).getIgnoreRepaint())

    @overload
    def isFocusCycleRoot(self, arg0: 'Container') -> bool:
        """public boolean java.awt.Container.isFocusCycleRoot(java.awt.Container)"""
        return bool._wrap(super(_Container, self).isFocusCycleRoot(arg0))

    @override
    @overload
    def getGraphics(self) -> 'Graphics':
        """public java.awt.Graphics javax.swing.JComponent.getGraphics()"""
        return 'Graphics'._wrap(super(JComponent, self).getGraphics())

    @override
    @overload
    def setLocale(self, arg0: 'Locale'):
        """public void java.awt.Component.setLocale(java.util.Locale)"""
        super(_Component, self).setLocale(arg0)

    @override
    @overload
    def paintAll(self, arg0: 'Graphics'):
        """public void java.awt.Component.paintAll(java.awt.Graphics)"""
        super(_Component, self).paintAll(arg0)

    @override
    @overload
    def setDoubleBuffered(self, arg0: bool):
        """public void javax.swing.JComponent.setDoubleBuffered(boolean)"""
        super(_JComponent, self).setDoubleBuffered(_boolean.valueOf(arg0))

    @override
    @overload
    def isPreferredSizeSet(self) -> bool:
        """public boolean java.awt.Component.isPreferredSizeSet()"""
        return bool._wrap(super(Component, self).isPreferredSizeSet())

    @override
    @overload
    def addInputMethodListener(self, arg0: 'InputMethodListener'):
        """public synchronized void java.awt.Component.addInputMethodListener(java.awt.event.InputMethodListener)"""
        super(_Component, self).addInputMethodListener(arg0)

    @override
    @overload
    def removeMouseWheelListener(self, arg0: 'MouseWheelListener'):
        """public synchronized void java.awt.Component.removeMouseWheelListener(java.awt.event.MouseWheelListener)"""
        super(_Component, self).removeMouseWheelListener(arg0)

    @override
    @overload
    def getInputMap(self) -> 'InputMap':
        """public final javax.swing.InputMap javax.swing.JComponent.getInputMap()"""
        return 'InputMap'._wrap(super(JComponent, self).getInputMap())

    @override
    @overload
    def setVisible(self, arg0: bool):
        """public void javax.swing.JComponent.setVisible(boolean)"""
        super(_JComponent, self).setVisible(_boolean.valueOf(arg0))

    @override
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int):
        """public void java.awt.Component.firePropertyChange(java.lang.String,byte,byte)"""
        super(_Component, self).firePropertyChange(arg0, _byte.valueOf(arg1), _byte.valueOf(arg2))

    @override
    @overload
    def getUIClassID(self) -> str:
        """public java.lang.String javax.swing.JPanel.getUIClassID()"""
        return str._wrap(super(JPanel, self).getUIClassID())

    @override
    @overload
    def transferFocusDownCycle(self):
        """public void java.awt.Container.transferFocusDownCycle()"""
        super(Container, self).transferFocusDownCycle()

    @override
    @overload
    def getNextFocusableComponent(self) -> 'Component':
        """public java.awt.Component javax.swing.JComponent.getNextFocusableComponent()"""
        return 'Component'._wrap(super(JComponent, self).getNextFocusableComponent())

    @override
    @overload
    def getUI(self) -> 'PanelUI':
        """public javax.swing.plaf.PanelUI javax.swing.JPanel.getUI()"""
        return 'PanelUI'._wrap(super(JPanel, self).getUI())

    @override
    @overload
    def setBounds(self, arg0: 'Rectangle'):
        """public void java.awt.Component.setBounds(java.awt.Rectangle)"""
        super(_Component, self).setBounds(arg0)

    @override
    @overload
    def repaint(self, arg0: int):
        """public void java.awt.Component.repaint(long)"""
        super(_Component, self).repaint(_long.valueOf(arg0))

    @override
    @overload
    def removeHierarchyBoundsListener(self, arg0: 'HierarchyBoundsListener'):
        """public void java.awt.Component.removeHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)"""
        super(_Component, self).removeHierarchyBoundsListener(arg0)

    @override
    @overload
    def getComponentPopupMenu(self) -> 'JPopupMenu':
        """public javax.swing.JPopupMenu javax.swing.JComponent.getComponentPopupMenu()"""
        return 'JPopupMenu'._wrap(super(JComponent, self).getComponentPopupMenu())

    @override
    @overload
    def getMousePosition(self) -> 'Point':
        """public java.awt.Point java.awt.Component.getMousePosition() throws java.awt.HeadlessException"""
        return 'Point'._wrap(super(Component, self).getMousePosition())

    @override
    @overload
    def getComponentCount(self) -> int:
        """public int java.awt.Container.getComponentCount()"""
        return int._wrap(super(Container, self).getComponentCount())

    @override
    @overload
    def getInputMethodRequests(self) -> 'InputMethodRequests':
        """public java.awt.im.InputMethodRequests java.awt.Component.getInputMethodRequests()"""
        return 'InputMethodRequests'._wrap(super(Component, self).getInputMethodRequests())

    @override
    @overload
    def setMaximumSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setMaximumSize(java.awt.Dimension)"""
        super(_JComponent, self).setMaximumSize(arg0)

    @override
    @overload
    def setRequestFocusEnabled(self, arg0: bool):
        """public void javax.swing.JComponent.setRequestFocusEnabled(boolean)"""
        super(_JComponent, self).setRequestFocusEnabled(_boolean.valueOf(arg0))

    @override
    @overload
    def setFocusTraversalKeys(self, arg0: int, arg1: 'Set'):
        """public void javax.swing.JComponent.setFocusTraversalKeys(int,java.util.Set<? extends java.awt.AWTKeyStroke>)"""
        super(_JComponent, self).setFocusTraversalKeys(_int.valueOf(arg0), arg1)

    @overload
    def inside(self, arg0: int, arg1: int) -> bool:
        """public boolean java.awt.Component.inside(int,int)"""
        return bool._wrap(super(_Component, self).inside(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def requestDefaultFocus(self) -> bool:
        """public boolean javax.swing.JComponent.requestDefaultFocus()"""
        return bool._wrap(super(JComponent, self).requestDefaultFocus())

    @override
    @overload
    def disable(self):
        """public void javax.swing.JComponent.disable()"""
        super(JComponent, self).disable()

    @override
    @overload
    def enableInputMethods(self, arg0: bool):
        """public void java.awt.Component.enableInputMethods(boolean)"""
        super(_Component, self).enableInputMethods(_boolean.valueOf(arg0))

    @override
    @overload
    def layout(self):
        """public void java.awt.Container.layout()"""
        super(Container, self).layout()

    @override
    @overload
    def getInputMethodListeners(self) -> List['InputMethodListener']:
        """public synchronized java.awt.event.InputMethodListener[] java.awt.Component.getInputMethodListeners()"""
        return List['InputMethodListener']._wrap(super(Component, self).getInputMethodListeners())

    @override
    @overload
    def paint(self, arg0: 'Graphics'):
        """public void javax.swing.JComponent.paint(java.awt.Graphics)"""
        super(_JComponent, self).paint(arg0)

    @override
    @overload
    def transferFocus(self):
        """public void java.awt.Component.transferFocus()"""
        super(Component, self).transferFocus()

    @overload
    def setAtlas(self, arg0: 'TextureAtlas', arg1: str):
        """public void com.badlogic.gdx.tools.flame.RegionPickerPanel.setAtlas(com.badlogic.gdx.graphics.g2d.TextureAtlas,java.lang.String)"""
        super(_RegionPickerPanel, self).setAtlas(arg0, arg1)

    @override
    @overload
    def removeComponentListener(self, arg0: 'ComponentListener'):
        """public synchronized void java.awt.Component.removeComponentListener(java.awt.event.ComponentListener)"""
        super(_Component, self).removeComponentListener(arg0)

    @override
    @overload
    def getCursor(self) -> 'Cursor':
        """public java.awt.Cursor java.awt.Component.getCursor()"""
        return 'Cursor'._wrap(super(Component, self).getCursor())

    @override
    @overload
    def setMinimumSize(self, arg0: 'Dimension'):
        """public void javax.swing.JComponent.setMinimumSize(java.awt.Dimension)"""
        super(_JComponent, self).setMinimumSize(arg0)

    @override
    @overload
    def getContainerListeners(self) -> List['ContainerListener']:
        """public synchronized java.awt.event.ContainerListener[] java.awt.Container.getContainerListeners()"""
        return List['ContainerListener']._wrap(super(Container, self).getContainerListeners())

    @override
    @overload
    def setLocation(self, arg0: 'Point'):
        """public void java.awt.Component.setLocation(java.awt.Point)"""
        super(_Component, self).setLocation(arg0)

    @override
    @overload
    def setSize(self, arg0: 'Dimension'):
        """public void java.awt.Component.setSize(java.awt.Dimension)"""
        super(_Component, self).setSize(arg0)

    @override
    @overload
    def removeAll(self):
        """public void java.awt.Container.removeAll()"""
        super(Container, self).removeAll()

    @overload
    def getPopupLocation(self, arg0: 'MouseEvent') -> 'Point':
        """public java.awt.Point javax.swing.JComponent.getPopupLocation(java.awt.event.MouseEvent)"""
        return 'Point'._wrap(super(_JComponent, self).getPopupLocation(arg0))

    @overload
    def isAncestorOf(self, arg0: 'Component') -> bool:
        """public boolean java.awt.Container.isAncestorOf(java.awt.Component)"""
        return bool._wrap(super(_Container, self).isAncestorOf(arg0))

    @override
    @overload
    def setOpaque(self, arg0: bool):
        """public void javax.swing.JComponent.setOpaque(boolean)"""
        super(_JComponent, self).setOpaque(_boolean.valueOf(arg0))

    @overload
    def contains(self, arg0: int, arg1: int) -> bool:
        """public boolean javax.swing.JComponent.contains(int,int)"""
        return bool._wrap(super(_JComponent, self).contains(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def setCursor(self, arg0: 'Cursor'):
        """public void java.awt.Component.setCursor(java.awt.Cursor)"""
        super(_Component, self).setCursor(arg0)

    @override
    @overload
    def validate(self):
        """public void java.awt.Container.validate()"""
        super(Container, self).validate()

    @override
    @overload
    def getMaximumSize(self) -> 'Dimension':
        """public java.awt.Dimension javax.swing.JComponent.getMaximumSize()"""
        return 'Dimension'._wrap(super(JComponent, self).getMaximumSize())

    @override
    @overload
    def getBackground(self) -> 'Color':
        """public java.awt.Color java.awt.Component.getBackground()"""
        return 'Color'._wrap(super(Component, self).getBackground())

    @overload
    def createImage(self, arg0: 'ImageProducer') -> 'Image':
        """public java.awt.Image java.awt.Component.createImage(java.awt.image.ImageProducer)"""
        return 'Image'._wrap(super(_Component, self).createImage(arg0))

    @override
    @overload
    def setVerifyInputWhenFocusTarget(self, arg0: bool):
        """public void javax.swing.JComponent.setVerifyInputWhenFocusTarget(boolean)"""
        super(_JComponent, self).setVerifyInputWhenFocusTarget(_boolean.valueOf(arg0))

    @override
    @overload
    def removePropertyChangeListener(self, arg0: str, arg1: 'PropertyChangeListener'):
        """public void java.awt.Component.removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"""
        super(_Component, self).removePropertyChangeListener(arg0, arg1)

    @override
    @overload
    def countComponents(self) -> int:
        """public int java.awt.Container.countComponents()"""
        return int._wrap(super(Container, self).countComponents())