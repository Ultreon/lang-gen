from __future__ import annotations
from overload import overload


 
from pyquantum_helper import import_once as __import_once__
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import java.nio.ByteBuffer as __ByteBuffer
__ByteBuffer = __ByteBuffer
import java.util.stream.Stream as __Stream
__Stream = __Stream
import org.lwjgl.system.StructBuffer as __StructBuffer
__StructBuffer = __StructBuffer
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Class as __Class
__Class = __Class
import java.lang.Byte as __byte
import org.lwjgl.system.CustomBuffer as __CustomBuffer
__CustomBuffer = __CustomBuffer
import java.lang.Short as __short
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.util.Iterator as __Iterator
__Iterator = __Iterator
import java.lang.Object as __object
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import org.lwjgl.system.linux.Sockaddr as __Sockaddr_Buffer
__Buffer = __Sockaddr_Buffer.Buffer
import java.util.Iterator as Iterator
import java.util.Spliterator as __Spliterator
__Spliterator = __Spliterator
import java.lang.Long as __long
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import java.util.stream.Stream as Stream
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import int
 
class Buffer(pyglsystem.__StructBuffer, pyglsystem.StructBuffer, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.Sockaddr.Buffer"""
 
    @staticmethod
    def __wrap(java_value: __Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(__pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0), arg1))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int.__wrap(super(__pyglsystem.CustomBuffer, self).address(__int.valueOf(arg0)))

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(__int.valueOf(arg0), arg1))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int.__wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(arg0))

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def sa_family(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Sockaddr$Buffer org.lwjgl.system.linux.Sockaddr$Buffer.sa_family(short)"""
        return 'Buffer'.__wrap(super(__Buffer, self).sa_family(__short.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool.__wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @overload
    def sa_data(self, arg0: int) -> int:
        """public byte org.lwjgl.system.linux.Sockaddr$Buffer.sa_data(int)"""
        return int.__wrap(super(__Buffer, self).sa_data(__int.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).position(__int.valueOf(arg0)))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0)))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).clear())

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(__int.valueOf(arg0), arg1))

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).slice())

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def sa_data(self, arg0: 'ByteBuffer') -> 'Buffer':
        """public org.lwjgl.system.linux.Sockaddr$Buffer org.lwjgl.system.linux.Sockaddr$Buffer.sa_data(java.nio.ByteBuffer)"""
        return 'Buffer'.__wrap(super(__Buffer, self).sa_data(arg0))

    @overload
    def sa_family(self) -> int:
        """public short org.lwjgl.system.linux.Sockaddr$Buffer.sa_family()"""
        return int.__wrap(super(Buffer, self).sa_family())

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'.__wrap(super(pyglsystem.StructBuffer, self).get())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).limit(__int.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'.__wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str.__wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def sa_data(self, arg0: int, arg1: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Sockaddr$Buffer org.lwjgl.system.linux.Sockaddr$Buffer.sa_data(int,byte)"""
        return 'Buffer'.__wrap(super(__Buffer, self).sa_data(__int.valueOf(arg0), __byte.valueOf(arg1)))

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.Sockaddr$Buffer(long,int)"""
        val = __Buffer(__long.valueOf(arg0), __int.valueOf(arg1))
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(arg0))

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).stream())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.Sockaddr$Buffer(java.nio.ByteBuffer)"""
        val = __Buffer(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def sa_data(self) -> 'ByteBuffer':
        """public java.nio.ByteBuffer org.lwjgl.system.linux.Sockaddr$Buffer.sa_data()"""
        return 'ByteBuffer'.__wrap(super(Buffer, self).sa_data())

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'.__wrap(super(pyglsystem.StructBuffer, self).iterator())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).slice(__int.valueOf(arg0), __int.valueOf(arg1)))

 
 
 
# CLASS: org.lwjgl.system.linux.Sockaddr$Buffer
from pyquantum_helper import import_once as __import_once__
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import java.nio.ByteBuffer as __ByteBuffer
__ByteBuffer = __ByteBuffer
import java.util.stream.Stream as __Stream
__Stream = __Stream
import org.lwjgl.system.StructBuffer as __StructBuffer
__StructBuffer = __StructBuffer
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Class as __Class
__Class = __Class
import java.lang.Byte as __byte
import org.lwjgl.system.CustomBuffer as __CustomBuffer
__CustomBuffer = __CustomBuffer
import java.lang.Short as __short
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.util.Iterator as __Iterator
__Iterator = __Iterator
import java.lang.Object as __object
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import org.lwjgl.system.linux.Sockaddr as __Sockaddr_Buffer
__Buffer = __Sockaddr_Buffer.Buffer
import java.util.Iterator as Iterator
import java.util.Spliterator as __Spliterator
__Spliterator = __Spliterator
import java.lang.Long as __long
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import java.util.stream.Stream as Stream
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import int
 
class Buffer(pyglsystem.__StructBuffer, pyglsystem.StructBuffer, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.Sockaddr.Buffer"""
 
    @staticmethod
    def __wrap(java_value: __Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(__pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0), arg1))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int.__wrap(super(__pyglsystem.CustomBuffer, self).address(__int.valueOf(arg0)))

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(__int.valueOf(arg0), arg1))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int.__wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(arg0))

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def sa_family(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Sockaddr$Buffer org.lwjgl.system.linux.Sockaddr$Buffer.sa_family(short)"""
        return 'Buffer'.__wrap(super(__Buffer, self).sa_family(__short.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool.__wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @overload
    def sa_data(self, arg0: int) -> int:
        """public byte org.lwjgl.system.linux.Sockaddr$Buffer.sa_data(int)"""
        return int.__wrap(super(__Buffer, self).sa_data(__int.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).position(__int.valueOf(arg0)))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0)))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).clear())

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(__int.valueOf(arg0), arg1))

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).slice())

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def sa_data(self, arg0: 'ByteBuffer') -> 'Buffer':
        """public org.lwjgl.system.linux.Sockaddr$Buffer org.lwjgl.system.linux.Sockaddr$Buffer.sa_data(java.nio.ByteBuffer)"""
        return 'Buffer'.__wrap(super(__Buffer, self).sa_data(arg0))

    @overload
    def sa_family(self) -> int:
        """public short org.lwjgl.system.linux.Sockaddr$Buffer.sa_family()"""
        return int.__wrap(super(Buffer, self).sa_family())

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'.__wrap(super(pyglsystem.StructBuffer, self).get())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).limit(__int.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'.__wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str.__wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def sa_data(self, arg0: int, arg1: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Sockaddr$Buffer org.lwjgl.system.linux.Sockaddr$Buffer.sa_data(int,byte)"""
        return 'Buffer'.__wrap(super(__Buffer, self).sa_data(__int.valueOf(arg0), __byte.valueOf(arg1)))

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.Sockaddr$Buffer(long,int)"""
        val = __Buffer(__long.valueOf(arg0), __int.valueOf(arg1))
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(arg0))

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).stream())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.Sockaddr$Buffer(java.nio.ByteBuffer)"""
        val = __Buffer(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def sa_data(self) -> 'ByteBuffer':
        """public java.nio.ByteBuffer org.lwjgl.system.linux.Sockaddr$Buffer.sa_data()"""
        return 'ByteBuffer'.__wrap(super(Buffer, self).sa_data())

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'.__wrap(super(pyglsystem.StructBuffer, self).iterator())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).slice(__int.valueOf(arg0), __int.valueOf(arg1)))

 
 
 
# CLASS: org.lwjgl.system.linux.Sockaddr$Buffer 
 
 
# CLASS: org.lwjgl.system.linux.XKeymapEvent
from pyquantum_helper import import_once as __import_once__
import org.lwjgl.system.linux.XKeymapEvent as __XKeymapEvent
__XKeymapEvent = __XKeymapEvent
from builtins import str
import java.lang.Boolean as __boolean
from pyquantum_helper import override
import java.lang.Object as __object
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import java.nio.ByteBuffer as __ByteBuffer
__ByteBuffer = __ByteBuffer
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import org.lwjgl.system.linux.XKeymapEvent as __XKeymapEvent_Buffer
__Buffer = __XKeymapEvent_Buffer.Buffer
import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.Byte as __byte
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
from builtins import int
 
class XKeymapEvent(pyglsystem.__Struct, pyglsystem.Struct, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XKeymapEvent"""
 
    @staticmethod
    def __wrap(java_value: __XKeymapEvent) -> 'XKeymapEvent':
        return XKeymapEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __XKeymapEvent):
        """
        Dynamic initializer for XKeymapEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def nwindow(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XKeymapEvent.nwindow(long)"""
        return int.__wrap(__XKeymapEvent.nwindow(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nwindow(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XKeymapEvent.nwindow(long,long)"""
        __XKeymapEvent.nwindow(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def callocStack() -> 'XKeymapEvent':
        """public static org.lwjgl.system.linux.XKeymapEvent org.lwjgl.system.linux.XKeymapEvent.callocStack()"""
        return XKeymapEvent.__wrap(__XKeymapEvent.callocStack())

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XKeymapEvent$Buffer org.lwjgl.system.linux.XKeymapEvent.calloc(int)"""
        return Buffer.__wrap(__XKeymapEvent.calloc(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack() -> 'XKeymapEvent':
        """public static org.lwjgl.system.linux.XKeymapEvent org.lwjgl.system.linux.XKeymapEvent.mallocStack()"""
        return XKeymapEvent.__wrap(__XKeymapEvent.mallocStack())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def send_event(self, arg0: bool) -> 'XKeymapEvent':
        """public org.lwjgl.system.linux.XKeymapEvent org.lwjgl.system.linux.XKeymapEvent.send_event(boolean)"""
        return 'XKeymapEvent'.__wrap(super(__XKeymapEvent, self).send_event(__boolean.valueOf(arg0)))

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool.__wrap(super(__pyglsystem.Struct, self).isNull(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XKeymapEvent$Buffer org.lwjgl.system.linux.XKeymapEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XKeymapEvent.calloc(__int.valueOf(arg0), arg1))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @staticmethod
    @overload
    def nkey_vector(arg0: int) -> 'ByteBuffer':
        """public static java.nio.ByteBuffer org.lwjgl.system.linux.XKeymapEvent.nkey_vector(long)"""
        return ByteBuffer.__wrap(__XKeymapEvent.nkey_vector(__long.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XKeymapEvent.ndisplay(long)"""
        return int.__wrap(__XKeymapEvent.ndisplay(__long.valueOf(arg0)))

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XKeymapEvent.window()"""
        return int.__wrap(super(XKeymapEvent, self).window())

    @overload
    def key_vector(self, arg0: int) -> int:
        """public byte org.lwjgl.system.linux.XKeymapEvent.key_vector(int)"""
        return int.__wrap(super(__XKeymapEvent, self).key_vector(__int.valueOf(arg0)))

    @overload
    def window(self, arg0: int) -> 'XKeymapEvent':
        """public org.lwjgl.system.linux.XKeymapEvent org.lwjgl.system.linux.XKeymapEvent.window(long)"""
        return 'XKeymapEvent'.__wrap(super(__XKeymapEvent, self).window(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XKeymapEvent.validate(long)"""
        __XKeymapEvent.validate(__long.valueOf(arg0))

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XKeymapEvent$Buffer org.lwjgl.system.linux.XKeymapEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XKeymapEvent.mallocStack(__int.valueOf(arg0), arg1))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XKeymapEvent.type()"""
        return int.__wrap(super(XKeymapEvent, self).type())

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XKeymapEvent.send_event()"""
        return bool.__wrap(super(XKeymapEvent, self).send_event())

    @overload
    def display(self, arg0: int) -> 'XKeymapEvent':
        """public org.lwjgl.system.linux.XKeymapEvent org.lwjgl.system.linux.XKeymapEvent.display(long)"""
        return 'XKeymapEvent'.__wrap(super(__XKeymapEvent, self).display(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XKeymapEvent$Buffer org.lwjgl.system.linux.XKeymapEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XKeymapEvent.callocStack(__int.valueOf(arg0), arg1))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XKeymapEvent.display()"""
        return int.__wrap(super(XKeymapEvent, self).display())

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @staticmethod
    @overload
    def nkey_vector(arg0: int, arg1: int) -> int:
        """public static byte org.lwjgl.system.linux.XKeymapEvent.nkey_vector(long,int)"""
        return int.__wrap(__XKeymapEvent.nkey_vector(__long.valueOf(arg0), __int.valueOf(arg1)))

    @staticmethod
    @overload
    def nkey_vector(arg0: int, arg1: 'ByteBuffer'):
        """public static void org.lwjgl.system.linux.XKeymapEvent.nkey_vector(long,java.nio.ByteBuffer)"""
        __XKeymapEvent.nkey_vector(__long.valueOf(arg0), arg1)

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XKeymapEvent':
        """public static org.lwjgl.system.linux.XKeymapEvent org.lwjgl.system.linux.XKeymapEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XKeymapEvent.__wrap(__XKeymapEvent.calloc(arg0))

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XKeymapEvent$Buffer org.lwjgl.system.linux.XKeymapEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XKeymapEvent.malloc(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XKeymapEvent.ntype(long)"""
        return int.__wrap(__XKeymapEvent.ntype(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XKeymapEvent.ndisplay(long,long)"""
        __XKeymapEvent.ndisplay(__long.valueOf(arg0), __long.valueOf(arg1))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XKeymapEvent.nserial(long)"""
        return int.__wrap(__XKeymapEvent.nserial(__long.valueOf(arg0)))

    @overload
    def key_vector(self, arg0: int, arg1: int) -> 'XKeymapEvent':
        """public org.lwjgl.system.linux.XKeymapEvent org.lwjgl.system.linux.XKeymapEvent.key_vector(int,byte)"""
        return 'XKeymapEvent'.__wrap(super(__XKeymapEvent, self).key_vector(__int.valueOf(arg0), __byte.valueOf(arg1)))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).address())

    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XKeymapEvent.nsend_event(long,int)"""
        __XKeymapEvent.nsend_event(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def malloc() -> 'XKeymapEvent':
        """public static org.lwjgl.system.linux.XKeymapEvent org.lwjgl.system.linux.XKeymapEvent.malloc()"""
        return XKeymapEvent.__wrap(__XKeymapEvent.malloc())

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XKeymapEvent.serial()"""
        return int.__wrap(super(XKeymapEvent, self).serial())

    @staticmethod
    @overload
    def calloc() -> 'XKeymapEvent':
        """public static org.lwjgl.system.linux.XKeymapEvent org.lwjgl.system.linux.XKeymapEvent.calloc()"""
        return XKeymapEvent.__wrap(__XKeymapEvent.calloc())

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XKeymapEvent':
        """public static org.lwjgl.system.linux.XKeymapEvent org.lwjgl.system.linux.XKeymapEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XKeymapEvent.__wrap(__XKeymapEvent.mallocStack(arg0))

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XKeymapEvent$Buffer org.lwjgl.system.linux.XKeymapEvent.malloc(int)"""
        return Buffer.__wrap(__XKeymapEvent.malloc(__int.valueOf(arg0)))

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int, arg5: 'ByteBuffer') -> 'XKeymapEvent':
        """public org.lwjgl.system.linux.XKeymapEvent org.lwjgl.system.linux.XKeymapEvent.set(int,long,boolean,long,long,java.nio.ByteBuffer)"""
        return 'XKeymapEvent'.__wrap(super(__XKeymapEvent, self).set(__int.valueOf(arg0), __long.valueOf(arg1), __boolean.valueOf(arg2), __long.valueOf(arg3), __long.valueOf(arg4), arg5))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XKeymapEvent$Buffer org.lwjgl.system.linux.XKeymapEvent.createSafe(long,int)"""
        return Buffer.__wrap(__XKeymapEvent.createSafe(__long.valueOf(arg0), __int.valueOf(arg1)))

    @overload
    def key_vector(self, arg0: 'ByteBuffer') -> 'XKeymapEvent':
        """public org.lwjgl.system.linux.XKeymapEvent org.lwjgl.system.linux.XKeymapEvent.key_vector(java.nio.ByteBuffer)"""
        return 'XKeymapEvent'.__wrap(super(__XKeymapEvent, self).key_vector(arg0))

    @staticmethod
    @overload
    def create(arg0: int) -> 'XKeymapEvent':
        """public static org.lwjgl.system.linux.XKeymapEvent org.lwjgl.system.linux.XKeymapEvent.create(long)"""
        return XKeymapEvent.__wrap(__XKeymapEvent.create(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def create() -> 'XKeymapEvent':
        """public static org.lwjgl.system.linux.XKeymapEvent org.lwjgl.system.linux.XKeymapEvent.create()"""
        return XKeymapEvent.__wrap(__XKeymapEvent.create())

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XKeymapEvent':
        """public static org.lwjgl.system.linux.XKeymapEvent org.lwjgl.system.linux.XKeymapEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XKeymapEvent.__wrap(__XKeymapEvent.malloc(arg0))

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XKeymapEvent.ntype(long,int)"""
        __XKeymapEvent.ntype(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str.__wrap(super(pyglsystem.Pointer$Default, self).toString())

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XKeymapEvent$Buffer org.lwjgl.system.linux.XKeymapEvent.create(int)"""
        return Buffer.__wrap(__XKeymapEvent.create(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nkey_vector(arg0: int, arg1: int, arg2: int):
        """public static void org.lwjgl.system.linux.XKeymapEvent.nkey_vector(long,int,byte)"""
        __XKeymapEvent.nkey_vector(__long.valueOf(arg0), __int.valueOf(arg1), __byte.valueOf(arg2))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XKeymapEvent.sizeof()"""
        return int.__wrap(super(XKeymapEvent, self).sizeof())

    @overload
    def type(self, arg0: int) -> 'XKeymapEvent':
        """public org.lwjgl.system.linux.XKeymapEvent org.lwjgl.system.linux.XKeymapEvent.type(int)"""
        return 'XKeymapEvent'.__wrap(super(__XKeymapEvent, self).type(__int.valueOf(arg0)))

    @overload
    def serial(self, arg0: int) -> 'XKeymapEvent':
        """public org.lwjgl.system.linux.XKeymapEvent org.lwjgl.system.linux.XKeymapEvent.serial(long)"""
        return 'XKeymapEvent'.__wrap(super(__XKeymapEvent, self).serial(__long.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XKeymapEvent':
        """public static org.lwjgl.system.linux.XKeymapEvent org.lwjgl.system.linux.XKeymapEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XKeymapEvent.__wrap(__XKeymapEvent.callocStack(arg0))

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XKeymapEvent.nserial(long,long)"""
        __XKeymapEvent.nserial(__long.valueOf(arg0), __long.valueOf(arg1))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XKeymapEvent.nsend_event(long)"""
        return int.__wrap(__XKeymapEvent.nsend_event(__long.valueOf(arg0)))

    @overload
    def set(self, arg0: 'XKeymapEvent') -> 'XKeymapEvent':
        """public org.lwjgl.system.linux.XKeymapEvent org.lwjgl.system.linux.XKeymapEvent.set(org.lwjgl.system.linux.XKeymapEvent)"""
        return 'XKeymapEvent'.__wrap(super(__XKeymapEvent, self).set(arg0))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XKeymapEvent$Buffer org.lwjgl.system.linux.XKeymapEvent.create(long,int)"""
        return Buffer.__wrap(__XKeymapEvent.create(__long.valueOf(arg0), __int.valueOf(arg1)))

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XKeymapEvent$Buffer org.lwjgl.system.linux.XKeymapEvent.mallocStack(int)"""
        return Buffer.__wrap(__XKeymapEvent.mallocStack(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        __Struct.validate(__long.valueOf(arg0), __int.valueOf(arg1), __int.valueOf(arg2), arg3)

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XKeymapEvent$Buffer org.lwjgl.system.linux.XKeymapEvent.callocStack(int)"""
        return Buffer.__wrap(__XKeymapEvent.callocStack(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XKeymapEvent':
        """public static org.lwjgl.system.linux.XKeymapEvent org.lwjgl.system.linux.XKeymapEvent.createSafe(long)"""
        return XKeymapEvent.__wrap(__XKeymapEvent.createSafe(__long.valueOf(arg0)))

    @overload
    def key_vector(self) -> 'ByteBuffer':
        """public java.nio.ByteBuffer org.lwjgl.system.linux.XKeymapEvent.key_vector()"""
        return 'ByteBuffer'.__wrap(super(XKeymapEvent, self).key_vector())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XKeymapEvent(java.nio.ByteBuffer)"""
        val = __XKeymapEvent(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val 
 
 
# CLASS: org.lwjgl.system.linux.XNoExposeEvent$Buffer
from pyquantum_helper import import_once as __import_once__
import java.lang.Boolean as __boolean
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import java.util.stream.Stream as __Stream
__Stream = __Stream
import org.lwjgl.system.StructBuffer as __StructBuffer
__StructBuffer = __StructBuffer
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.CustomBuffer as __CustomBuffer
__CustomBuffer = __CustomBuffer
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.util.Iterator as __Iterator
__Iterator = __Iterator
import java.lang.Object as __object
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.util.Iterator as Iterator
import java.util.Spliterator as __Spliterator
__Spliterator = __Spliterator
import java.lang.Long as __long
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import java.util.stream.Stream as Stream
import org.lwjgl.system.linux.XNoExposeEvent as __XNoExposeEvent_Buffer
__Buffer = __XNoExposeEvent_Buffer.Buffer
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import int
 
class Buffer(pyglsystem.__StructBuffer, pyglsystem.StructBuffer, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XNoExposeEvent.Buffer"""
 
    @staticmethod
    def __wrap(java_value: __Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(__pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0), arg1))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XNoExposeEvent$Buffer.type()"""
        return int.__wrap(super(Buffer, self).type())

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int.__wrap(super(__pyglsystem.CustomBuffer, self).address(__int.valueOf(arg0)))

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(__int.valueOf(arg0), arg1))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int.__wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(arg0))

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XNoExposeEvent$Buffer(long,int)"""
        val = __Buffer(__long.valueOf(arg0), __int.valueOf(arg1))
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def drawable(self) -> int:
        """public long org.lwjgl.system.linux.XNoExposeEvent$Buffer.drawable()"""
        return int.__wrap(super(Buffer, self).drawable())

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XNoExposeEvent$Buffer.send_event()"""
        return bool.__wrap(super(Buffer, self).send_event())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool.__wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @overload
    def major_code(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XNoExposeEvent$Buffer org.lwjgl.system.linux.XNoExposeEvent$Buffer.major_code(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).major_code(__int.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def drawable(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XNoExposeEvent$Buffer org.lwjgl.system.linux.XNoExposeEvent$Buffer.drawable(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).drawable(__long.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).position(__int.valueOf(arg0)))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XNoExposeEvent$Buffer(java.nio.ByteBuffer)"""
        val = __Buffer(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0)))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).clear())

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(__int.valueOf(arg0), arg1))

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XNoExposeEvent$Buffer org.lwjgl.system.linux.XNoExposeEvent$Buffer.type(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).type(__int.valueOf(arg0)))

    @overload
    def major_code(self) -> int:
        """public int org.lwjgl.system.linux.XNoExposeEvent$Buffer.major_code()"""
        return int.__wrap(super(Buffer, self).major_code())

    @overload
    def minor_code(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XNoExposeEvent$Buffer org.lwjgl.system.linux.XNoExposeEvent$Buffer.minor_code(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).minor_code(__int.valueOf(arg0)))

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @overload
    def minor_code(self) -> int:
        """public int org.lwjgl.system.linux.XNoExposeEvent$Buffer.minor_code()"""
        return int.__wrap(super(Buffer, self).minor_code())

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).slice())

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XNoExposeEvent$Buffer org.lwjgl.system.linux.XNoExposeEvent$Buffer.serial(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).serial(__long.valueOf(arg0)))

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XNoExposeEvent$Buffer org.lwjgl.system.linux.XNoExposeEvent$Buffer.send_event(boolean)"""
        return 'Buffer'.__wrap(super(__Buffer, self).send_event(__boolean.valueOf(arg0)))

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'.__wrap(super(pyglsystem.StructBuffer, self).get())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).limit(__int.valueOf(arg0)))

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XNoExposeEvent$Buffer.display()"""
        return int.__wrap(super(Buffer, self).display())

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'.__wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str.__wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XNoExposeEvent$Buffer.serial()"""
        return int.__wrap(super(Buffer, self).serial())

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XNoExposeEvent$Buffer org.lwjgl.system.linux.XNoExposeEvent$Buffer.display(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).display(__long.valueOf(arg0)))

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(arg0))

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).stream())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'.__wrap(super(pyglsystem.StructBuffer, self).iterator())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).slice(__int.valueOf(arg0), __int.valueOf(arg1))) 
 
 
# CLASS: org.lwjgl.system.linux.Statx$Buffer
from pyquantum_helper import import_once as __import_once__
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import java.util.stream.Stream as __Stream
__Stream = __Stream
import org.lwjgl.system.StructBuffer as __StructBuffer
__StructBuffer = __StructBuffer
import org.lwjgl.system.linux.StatxTimestamp as __StatxTimestamp
__StatxTimestamp = __StatxTimestamp
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.CustomBuffer as __CustomBuffer
__CustomBuffer = __CustomBuffer
import java.lang.Short as __short
from builtins import bool
import org.lwjgl.system.linux.Statx as __Statx_Buffer
__Buffer = __Statx_Buffer.Buffer
from builtins import str
from pyquantum_helper import override
import java.util.Iterator as __Iterator
__Iterator = __Iterator
import java.lang.Object as __object
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.util.Iterator as Iterator
import java.util.Spliterator as __Spliterator
__Spliterator = __Spliterator
import java.lang.Long as __long
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import java.util.stream.Stream as Stream
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import int
 
class Buffer(pyglsystem.__StructBuffer, pyglsystem.StructBuffer, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.Statx.Buffer"""
 
    @staticmethod
    def __wrap(java_value: __Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def stx_blocks(self) -> int:
        """public long org.lwjgl.system.linux.Statx$Buffer.stx_blocks()"""
        return int.__wrap(super(Buffer, self).stx_blocks())

    @overload
    def stx_blksize(self) -> int:
        """public int org.lwjgl.system.linux.Statx$Buffer.stx_blksize()"""
        return int.__wrap(super(Buffer, self).stx_blksize())

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(__pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0), arg1))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address0())

    @overload
    def stx_uid(self) -> int:
        """public int org.lwjgl.system.linux.Statx$Buffer.stx_uid()"""
        return int.__wrap(super(Buffer, self).stx_uid())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def stx_atime(self) -> 'StatxTimestamp':
        """public org.lwjgl.system.linux.StatxTimestamp org.lwjgl.system.linux.Statx$Buffer.stx_atime()"""
        return 'StatxTimestamp'.__wrap(super(Buffer, self).stx_atime())

    @overload
    def stx_mtime(self, arg0: 'Consumer') -> 'Buffer':
        """public org.lwjgl.system.linux.Statx$Buffer org.lwjgl.system.linux.Statx$Buffer.stx_mtime(java.util.function.Consumer<org.lwjgl.system.linux.StatxTimestamp>)"""
        return 'Buffer'.__wrap(super(__Buffer, self).stx_mtime(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def stx_ctime(self, arg0: 'Consumer') -> 'Buffer':
        """public org.lwjgl.system.linux.Statx$Buffer org.lwjgl.system.linux.Statx$Buffer.stx_ctime(java.util.function.Consumer<org.lwjgl.system.linux.StatxTimestamp>)"""
        return 'Buffer'.__wrap(super(__Buffer, self).stx_ctime(arg0))

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int.__wrap(super(__pyglsystem.CustomBuffer, self).address(__int.valueOf(arg0)))

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def stx_blksize(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Statx$Buffer org.lwjgl.system.linux.Statx$Buffer.stx_blksize(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).stx_blksize(__int.valueOf(arg0)))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(__int.valueOf(arg0), arg1))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int.__wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @overload
    def stx_blocks(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Statx$Buffer org.lwjgl.system.linux.Statx$Buffer.stx_blocks(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).stx_blocks(__long.valueOf(arg0)))

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(arg0))

    @overload
    def stx_ino(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Statx$Buffer org.lwjgl.system.linux.Statx$Buffer.stx_ino(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).stx_ino(__long.valueOf(arg0)))

    @overload
    def stx_mtime(self) -> 'StatxTimestamp':
        """public org.lwjgl.system.linux.StatxTimestamp org.lwjgl.system.linux.Statx$Buffer.stx_mtime()"""
        return 'StatxTimestamp'.__wrap(super(Buffer, self).stx_mtime())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @overload
    def stx_btime(self, arg0: 'Consumer') -> 'Buffer':
        """public org.lwjgl.system.linux.Statx$Buffer org.lwjgl.system.linux.Statx$Buffer.stx_btime(java.util.function.Consumer<org.lwjgl.system.linux.StatxTimestamp>)"""
        return 'Buffer'.__wrap(super(__Buffer, self).stx_btime(arg0))

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def stx_uid(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Statx$Buffer org.lwjgl.system.linux.Statx$Buffer.stx_uid(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).stx_uid(__int.valueOf(arg0)))

    @overload
    def stx_mask(self) -> int:
        """public int org.lwjgl.system.linux.Statx$Buffer.stx_mask()"""
        return int.__wrap(super(Buffer, self).stx_mask())

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool.__wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @overload
    def stx_attributes(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Statx$Buffer org.lwjgl.system.linux.Statx$Buffer.stx_attributes(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).stx_attributes(__long.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def stx_btime(self) -> 'StatxTimestamp':
        """public org.lwjgl.system.linux.StatxTimestamp org.lwjgl.system.linux.Statx$Buffer.stx_btime()"""
        return 'StatxTimestamp'.__wrap(super(Buffer, self).stx_btime())

    @overload
    def stx_atime(self, arg0: 'Consumer') -> 'Buffer':
        """public org.lwjgl.system.linux.Statx$Buffer org.lwjgl.system.linux.Statx$Buffer.stx_atime(java.util.function.Consumer<org.lwjgl.system.linux.StatxTimestamp>)"""
        return 'Buffer'.__wrap(super(__Buffer, self).stx_atime(arg0))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).position(__int.valueOf(arg0)))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.Statx$Buffer(java.nio.ByteBuffer)"""
        val = __Buffer(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0)))

    @overload
    def stx_dev_major(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Statx$Buffer org.lwjgl.system.linux.Statx$Buffer.stx_dev_major(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).stx_dev_major(__int.valueOf(arg0)))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).clear())

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.Statx$Buffer(long,int)"""
        val = __Buffer(__long.valueOf(arg0), __int.valueOf(arg1))
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def stx_attributes_mask(self) -> int:
        """public long org.lwjgl.system.linux.Statx$Buffer.stx_attributes_mask()"""
        return int.__wrap(super(Buffer, self).stx_attributes_mask())

    @overload
    def stx_ctime(self) -> 'StatxTimestamp':
        """public org.lwjgl.system.linux.StatxTimestamp org.lwjgl.system.linux.Statx$Buffer.stx_ctime()"""
        return 'StatxTimestamp'.__wrap(super(Buffer, self).stx_ctime())

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(__int.valueOf(arg0), arg1))

    @overload
    def stx_mtime(self, arg0: 'StatxTimestamp') -> 'Buffer':
        """public org.lwjgl.system.linux.Statx$Buffer org.lwjgl.system.linux.Statx$Buffer.stx_mtime(org.lwjgl.system.linux.StatxTimestamp)"""
        return 'Buffer'.__wrap(super(__Buffer, self).stx_mtime(arg0))

    @overload
    def stx_rdev_minor(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Statx$Buffer org.lwjgl.system.linux.Statx$Buffer.stx_rdev_minor(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).stx_rdev_minor(__int.valueOf(arg0)))

    @overload
    def stx_ino(self) -> int:
        """public long org.lwjgl.system.linux.Statx$Buffer.stx_ino()"""
        return int.__wrap(super(Buffer, self).stx_ino())

    @overload
    def stx_mnt_id(self) -> int:
        """public long org.lwjgl.system.linux.Statx$Buffer.stx_mnt_id()"""
        return int.__wrap(super(Buffer, self).stx_mnt_id())

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @overload
    def stx_dev_minor(self) -> int:
        """public int org.lwjgl.system.linux.Statx$Buffer.stx_dev_minor()"""
        return int.__wrap(super(Buffer, self).stx_dev_minor())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address())

    @overload
    def stx_rdev_major(self) -> int:
        """public int org.lwjgl.system.linux.Statx$Buffer.stx_rdev_major()"""
        return int.__wrap(super(Buffer, self).stx_rdev_major())

    @overload
    def stx_rdev_major(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Statx$Buffer org.lwjgl.system.linux.Statx$Buffer.stx_rdev_major(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).stx_rdev_major(__int.valueOf(arg0)))

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).slice())

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def stx_mode(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Statx$Buffer org.lwjgl.system.linux.Statx$Buffer.stx_mode(short)"""
        return 'Buffer'.__wrap(super(__Buffer, self).stx_mode(__short.valueOf(arg0)))

    @overload
    def stx_attributes(self) -> int:
        """public long org.lwjgl.system.linux.Statx$Buffer.stx_attributes()"""
        return int.__wrap(super(Buffer, self).stx_attributes())

    @overload
    def stx_size(self) -> int:
        """public long org.lwjgl.system.linux.Statx$Buffer.stx_size()"""
        return int.__wrap(super(Buffer, self).stx_size())

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'.__wrap(super(pyglsystem.StructBuffer, self).get())

    @overload
    def stx_dev_major(self) -> int:
        """public int org.lwjgl.system.linux.Statx$Buffer.stx_dev_major()"""
        return int.__wrap(super(Buffer, self).stx_dev_major())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).limit(__int.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).reset())

    @overload
    def stx_gid(self) -> int:
        """public int org.lwjgl.system.linux.Statx$Buffer.stx_gid()"""
        return int.__wrap(super(Buffer, self).stx_gid())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'.__wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str.__wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @overload
    def stx_atime(self, arg0: 'StatxTimestamp') -> 'Buffer':
        """public org.lwjgl.system.linux.Statx$Buffer org.lwjgl.system.linux.Statx$Buffer.stx_atime(org.lwjgl.system.linux.StatxTimestamp)"""
        return 'Buffer'.__wrap(super(__Buffer, self).stx_atime(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def stx_mask(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Statx$Buffer org.lwjgl.system.linux.Statx$Buffer.stx_mask(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).stx_mask(__int.valueOf(arg0)))

    @overload
    def stx_size(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Statx$Buffer org.lwjgl.system.linux.Statx$Buffer.stx_size(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).stx_size(__long.valueOf(arg0)))

    @overload
    def stx_rdev_minor(self) -> int:
        """public int org.lwjgl.system.linux.Statx$Buffer.stx_rdev_minor()"""
        return int.__wrap(super(Buffer, self).stx_rdev_minor())

    @overload
    def stx_gid(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Statx$Buffer org.lwjgl.system.linux.Statx$Buffer.stx_gid(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).stx_gid(__int.valueOf(arg0)))

    @overload
    def stx_dev_minor(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Statx$Buffer org.lwjgl.system.linux.Statx$Buffer.stx_dev_minor(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).stx_dev_minor(__int.valueOf(arg0)))

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(arg0))

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).stream())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @overload
    def stx_nlink(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Statx$Buffer org.lwjgl.system.linux.Statx$Buffer.stx_nlink(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).stx_nlink(__int.valueOf(arg0)))

    @overload
    def stx_ctime(self, arg0: 'StatxTimestamp') -> 'Buffer':
        """public org.lwjgl.system.linux.Statx$Buffer org.lwjgl.system.linux.Statx$Buffer.stx_ctime(org.lwjgl.system.linux.StatxTimestamp)"""
        return 'Buffer'.__wrap(super(__Buffer, self).stx_ctime(arg0))

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'.__wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def stx_attributes_mask(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Statx$Buffer org.lwjgl.system.linux.Statx$Buffer.stx_attributes_mask(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).stx_attributes_mask(__long.valueOf(arg0)))

    @overload
    def stx_btime(self, arg0: 'StatxTimestamp') -> 'Buffer':
        """public org.lwjgl.system.linux.Statx$Buffer org.lwjgl.system.linux.Statx$Buffer.stx_btime(org.lwjgl.system.linux.StatxTimestamp)"""
        return 'Buffer'.__wrap(super(__Buffer, self).stx_btime(arg0))

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def stx_nlink(self) -> int:
        """public int org.lwjgl.system.linux.Statx$Buffer.stx_nlink()"""
        return int.__wrap(super(Buffer, self).stx_nlink())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).slice(__int.valueOf(arg0), __int.valueOf(arg1)))

    @overload
    def stx_mode(self) -> int:
        """public short org.lwjgl.system.linux.Statx$Buffer.stx_mode()"""
        return int.__wrap(super(Buffer, self).stx_mode())

    @overload
    def stx_mnt_id(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Statx$Buffer org.lwjgl.system.linux.Statx$Buffer.stx_mnt_id(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).stx_mnt_id(__long.valueOf(arg0))) 
 
 
# CLASS: org.lwjgl.system.linux.EpollEvent$Buffer
from pyquantum_helper import import_once as __import_once__
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import java.util.stream.Stream as __Stream
__Stream = __Stream
import org.lwjgl.system.StructBuffer as __StructBuffer
__StructBuffer = __StructBuffer
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.CustomBuffer as __CustomBuffer
__CustomBuffer = __CustomBuffer
import org.lwjgl.system.linux.EpollEvent as __EpollEvent_Buffer
__Buffer = __EpollEvent_Buffer.Buffer
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.util.Iterator as __Iterator
__Iterator = __Iterator
import java.lang.Object as __object
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.util.Iterator as Iterator
import org.lwjgl.system.linux.EpollData as __EpollData
__EpollData = __EpollData
import java.util.Spliterator as __Spliterator
__Spliterator = __Spliterator
import java.lang.Long as __long
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import java.util.stream.Stream as Stream
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import int
 
class Buffer(pyglsystem.__StructBuffer, pyglsystem.StructBuffer, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.EpollEvent.Buffer"""
 
    @staticmethod
    def __wrap(java_value: __Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(__pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0), arg1))

    @overload
    def data(self) -> 'EpollData':
        """public org.lwjgl.system.linux.EpollData org.lwjgl.system.linux.EpollEvent$Buffer.data()"""
        return 'EpollData'.__wrap(super(Buffer, self).data())

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int.__wrap(super(__pyglsystem.CustomBuffer, self).address(__int.valueOf(arg0)))

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(__int.valueOf(arg0), arg1))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int.__wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(arg0))

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.EpollEvent$Buffer(long,int)"""
        val = __Buffer(__long.valueOf(arg0), __int.valueOf(arg1))
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.EpollEvent$Buffer(java.nio.ByteBuffer)"""
        val = __Buffer(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @overload
    def events(self) -> int:
        """public int org.lwjgl.system.linux.EpollEvent$Buffer.events()"""
        return int.__wrap(super(Buffer, self).events())

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool.__wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).position(__int.valueOf(arg0)))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0)))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).clear())

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(__int.valueOf(arg0), arg1))

    @overload
    def events(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.EpollEvent$Buffer org.lwjgl.system.linux.EpollEvent$Buffer.events(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).events(__int.valueOf(arg0)))

    @overload
    def data(self, arg0: 'EpollData') -> 'Buffer':
        """public org.lwjgl.system.linux.EpollEvent$Buffer org.lwjgl.system.linux.EpollEvent$Buffer.data(org.lwjgl.system.linux.EpollData)"""
        return 'Buffer'.__wrap(super(__Buffer, self).data(arg0))

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).slice())

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).compact())

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'.__wrap(super(pyglsystem.StructBuffer, self).get())

    @overload
    def data(self, arg0: 'Consumer') -> 'Buffer':
        """public org.lwjgl.system.linux.EpollEvent$Buffer org.lwjgl.system.linux.EpollEvent$Buffer.data(java.util.function.Consumer<org.lwjgl.system.linux.EpollData>)"""
        return 'Buffer'.__wrap(super(__Buffer, self).data(arg0))

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).limit(__int.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'.__wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str.__wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(arg0))

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).stream())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'.__wrap(super(pyglsystem.StructBuffer, self).iterator())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).slice(__int.valueOf(arg0), __int.valueOf(arg1))) 
 
 
# CLASS: org.lwjgl.system.linux.XColormapEvent
from pyquantum_helper import import_once as __import_once__
from builtins import str
import java.lang.Boolean as __boolean
from pyquantum_helper import override
import org.lwjgl.system.linux.XColormapEvent as __XColormapEvent
__XColormapEvent = __XColormapEvent
import java.lang.Object as __object
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import org.lwjgl.system.linux.XColormapEvent as __XColormapEvent_Buffer
__Buffer = __XColormapEvent_Buffer.Buffer
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
from builtins import int
 
class XColormapEvent(pyglsystem.__Struct, pyglsystem.Struct, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XColormapEvent"""
 
    @staticmethod
    def __wrap(java_value: __XColormapEvent) -> 'XColormapEvent':
        return XColormapEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __XColormapEvent):
        """
        Dynamic initializer for XColormapEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XColormapEvent':
        """public static org.lwjgl.system.linux.XColormapEvent org.lwjgl.system.linux.XColormapEvent.createSafe(long)"""
        return XColormapEvent.__wrap(__XColormapEvent.createSafe(__long.valueOf(arg0)))

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int) -> 'XColormapEvent':
        """public org.lwjgl.system.linux.XColormapEvent org.lwjgl.system.linux.XColormapEvent.set(int,long,boolean,long,long,long,int,int)"""
        return 'XColormapEvent'.__wrap(super(__XColormapEvent, self).set(__int.valueOf(arg0), __long.valueOf(arg1), __boolean.valueOf(arg2), __long.valueOf(arg3), __long.valueOf(arg4), __long.valueOf(arg5), __int.valueOf(arg6), __int.valueOf(arg7)))

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XColormapEvent':
        """public static org.lwjgl.system.linux.XColormapEvent org.lwjgl.system.linux.XColormapEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XColormapEvent.__wrap(__XColormapEvent.mallocStack(arg0))

    @staticmethod
    @overload
    def create(arg0: int) -> 'XColormapEvent':
        """public static org.lwjgl.system.linux.XColormapEvent org.lwjgl.system.linux.XColormapEvent.create(long)"""
        return XColormapEvent.__wrap(__XColormapEvent.create(__long.valueOf(arg0)))

    @overload
    def type(self, arg0: int) -> 'XColormapEvent':
        """public org.lwjgl.system.linux.XColormapEvent org.lwjgl.system.linux.XColormapEvent.type(int)"""
        return 'XColormapEvent'.__wrap(super(__XColormapEvent, self).type(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XColormapEvent.ndisplay(long)"""
        return int.__wrap(__XColormapEvent.ndisplay(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nwindow(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XColormapEvent.nwindow(long,long)"""
        __XColormapEvent.nwindow(__long.valueOf(arg0), __long.valueOf(arg1))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XColormapEvent$Buffer org.lwjgl.system.linux.XColormapEvent.malloc(int)"""
        return Buffer.__wrap(__XColormapEvent.malloc(__int.valueOf(arg0)))

    @overload
    def state(self) -> int:
        """public int org.lwjgl.system.linux.XColormapEvent.state()"""
        return int.__wrap(super(XColormapEvent, self).state())

    @overload
    def send_event(self, arg0: bool) -> 'XColormapEvent':
        """public org.lwjgl.system.linux.XColormapEvent org.lwjgl.system.linux.XColormapEvent.send_event(boolean)"""
        return 'XColormapEvent'.__wrap(super(__XColormapEvent, self).send_event(__boolean.valueOf(arg0)))

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool.__wrap(super(__pyglsystem.Struct, self).isNull(__int.valueOf(arg0)))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @staticmethod
    @overload
    def create() -> 'XColormapEvent':
        """public static org.lwjgl.system.linux.XColormapEvent org.lwjgl.system.linux.XColormapEvent.create()"""
        return XColormapEvent.__wrap(__XColormapEvent.create())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XColormapEvent.validate(long)"""
        __XColormapEvent.validate(__long.valueOf(arg0))

    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XColormapEvent.nsend_event(long,int)"""
        __XColormapEvent.nsend_event(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XColormapEvent$Buffer org.lwjgl.system.linux.XColormapEvent.calloc(int)"""
        return Buffer.__wrap(__XColormapEvent.calloc(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack() -> 'XColormapEvent':
        """public static org.lwjgl.system.linux.XColormapEvent org.lwjgl.system.linux.XColormapEvent.callocStack()"""
        return XColormapEvent.__wrap(__XColormapEvent.callocStack())

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XColormapEvent$Buffer org.lwjgl.system.linux.XColormapEvent.create(long,int)"""
        return Buffer.__wrap(__XColormapEvent.create(__long.valueOf(arg0), __int.valueOf(arg1)))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @staticmethod
    @overload
    def nstate(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XColormapEvent.nstate(long,int)"""
        __XColormapEvent.nstate(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XColormapEvent.nserial(long,long)"""
        __XColormapEvent.nserial(__long.valueOf(arg0), __long.valueOf(arg1))

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @staticmethod
    @overload
    def calloc() -> 'XColormapEvent':
        """public static org.lwjgl.system.linux.XColormapEvent org.lwjgl.system.linux.XColormapEvent.calloc()"""
        return XColormapEvent.__wrap(__XColormapEvent.calloc())

    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XColormapEvent.nsend_event(long)"""
        return int.__wrap(__XColormapEvent.nsend_event(__long.valueOf(arg0)))

    @overload
    def set(self, arg0: 'XColormapEvent') -> 'XColormapEvent':
        """public org.lwjgl.system.linux.XColormapEvent org.lwjgl.system.linux.XColormapEvent.set(org.lwjgl.system.linux.XColormapEvent)"""
        return 'XColormapEvent'.__wrap(super(__XColormapEvent, self).set(arg0))

    @overload
    def new$(self) -> int:
        """public int org.lwjgl.system.linux.XColormapEvent.new$()"""
        return int.__wrap(super(XColormapEvent, self).new$())

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XColormapEvent':
        """public static org.lwjgl.system.linux.XColormapEvent org.lwjgl.system.linux.XColormapEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XColormapEvent.__wrap(__XColormapEvent.malloc(arg0))

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XColormapEvent.window()"""
        return int.__wrap(super(XColormapEvent, self).window())

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XColormapEvent.type()"""
        return int.__wrap(super(XColormapEvent, self).type())

    @overload
    def display(self, arg0: int) -> 'XColormapEvent':
        """public org.lwjgl.system.linux.XColormapEvent org.lwjgl.system.linux.XColormapEvent.display(long)"""
        return 'XColormapEvent'.__wrap(super(__XColormapEvent, self).display(__long.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XColormapEvent.ntype(long,int)"""
        __XColormapEvent.ntype(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XColormapEvent$Buffer org.lwjgl.system.linux.XColormapEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XColormapEvent.mallocStack(__int.valueOf(arg0), arg1))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def serial(self, arg0: int) -> 'XColormapEvent':
        """public org.lwjgl.system.linux.XColormapEvent org.lwjgl.system.linux.XColormapEvent.serial(long)"""
        return 'XColormapEvent'.__wrap(super(__XColormapEvent, self).serial(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def ncolormap(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XColormapEvent.ncolormap(long)"""
        return int.__wrap(__XColormapEvent.ncolormap(__long.valueOf(arg0)))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).address())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XColormapEvent(java.nio.ByteBuffer)"""
        val = __XColormapEvent(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XColormapEvent.ndisplay(long,long)"""
        __XColormapEvent.ndisplay(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XColormapEvent':
        """public static org.lwjgl.system.linux.XColormapEvent org.lwjgl.system.linux.XColormapEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XColormapEvent.__wrap(__XColormapEvent.callocStack(arg0))

    @staticmethod
    @overload
    def malloc() -> 'XColormapEvent':
        """public static org.lwjgl.system.linux.XColormapEvent org.lwjgl.system.linux.XColormapEvent.malloc()"""
        return XColormapEvent.__wrap(__XColormapEvent.malloc())

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XColormapEvent$Buffer org.lwjgl.system.linux.XColormapEvent.callocStack(int)"""
        return Buffer.__wrap(__XColormapEvent.callocStack(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XColormapEvent':
        """public static org.lwjgl.system.linux.XColormapEvent org.lwjgl.system.linux.XColormapEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XColormapEvent.__wrap(__XColormapEvent.calloc(arg0))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XColormapEvent.send_event()"""
        return bool.__wrap(super(XColormapEvent, self).send_event())

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XColormapEvent$Buffer org.lwjgl.system.linux.XColormapEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XColormapEvent.callocStack(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XColormapEvent$Buffer org.lwjgl.system.linux.XColormapEvent.createSafe(long,int)"""
        return Buffer.__wrap(__XColormapEvent.createSafe(__long.valueOf(arg0), __int.valueOf(arg1)))

    @overload
    def colormap(self, arg0: int) -> 'XColormapEvent':
        """public org.lwjgl.system.linux.XColormapEvent org.lwjgl.system.linux.XColormapEvent.colormap(long)"""
        return 'XColormapEvent'.__wrap(super(__XColormapEvent, self).colormap(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nnew$(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XColormapEvent.nnew$(long)"""
        return int.__wrap(__XColormapEvent.nnew$(__long.valueOf(arg0)))

    @overload
    def new$(self, arg0: int) -> 'XColormapEvent':
        """public org.lwjgl.system.linux.XColormapEvent org.lwjgl.system.linux.XColormapEvent.new$(int)"""
        return 'XColormapEvent'.__wrap(super(__XColormapEvent, self).new$(__int.valueOf(arg0)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str.__wrap(super(pyglsystem.Pointer$Default, self).toString())

    @overload
    def window(self, arg0: int) -> 'XColormapEvent':
        """public org.lwjgl.system.linux.XColormapEvent org.lwjgl.system.linux.XColormapEvent.window(long)"""
        return 'XColormapEvent'.__wrap(super(__XColormapEvent, self).window(__long.valueOf(arg0)))

    @overload
    def state(self, arg0: int) -> 'XColormapEvent':
        """public org.lwjgl.system.linux.XColormapEvent org.lwjgl.system.linux.XColormapEvent.state(int)"""
        return 'XColormapEvent'.__wrap(super(__XColormapEvent, self).state(__int.valueOf(arg0)))

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XColormapEvent.display()"""
        return int.__wrap(super(XColormapEvent, self).display())

    @staticmethod
    @overload
    def mallocStack() -> 'XColormapEvent':
        """public static org.lwjgl.system.linux.XColormapEvent org.lwjgl.system.linux.XColormapEvent.mallocStack()"""
        return XColormapEvent.__wrap(__XColormapEvent.mallocStack())

    @staticmethod
    @overload
    def nstate(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XColormapEvent.nstate(long)"""
        return int.__wrap(__XColormapEvent.nstate(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XColormapEvent$Buffer org.lwjgl.system.linux.XColormapEvent.create(int)"""
        return Buffer.__wrap(__XColormapEvent.create(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XColormapEvent$Buffer org.lwjgl.system.linux.XColormapEvent.mallocStack(int)"""
        return Buffer.__wrap(__XColormapEvent.mallocStack(__int.valueOf(arg0)))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XColormapEvent$Buffer org.lwjgl.system.linux.XColormapEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XColormapEvent.malloc(__int.valueOf(arg0), arg1))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XColormapEvent.sizeof()"""
        return int.__wrap(super(XColormapEvent, self).sizeof())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XColormapEvent.nserial(long)"""
        return int.__wrap(__XColormapEvent.nserial(__long.valueOf(arg0)))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XColormapEvent.serial()"""
        return int.__wrap(super(XColormapEvent, self).serial())

    @staticmethod
    @overload
    def nwindow(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XColormapEvent.nwindow(long)"""
        return int.__wrap(__XColormapEvent.nwindow(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XColormapEvent$Buffer org.lwjgl.system.linux.XColormapEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XColormapEvent.calloc(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def ncolormap(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XColormapEvent.ncolormap(long,long)"""
        __XColormapEvent.ncolormap(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        __Struct.validate(__long.valueOf(arg0), __int.valueOf(arg1), __int.valueOf(arg2), arg3)

    @overload
    def colormap(self) -> int:
        """public long org.lwjgl.system.linux.XColormapEvent.colormap()"""
        return int.__wrap(super(XColormapEvent, self).colormap())

    @staticmethod
    @overload
    def nnew$(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XColormapEvent.nnew$(long,int)"""
        __XColormapEvent.nnew$(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XColormapEvent.ntype(long)"""
        return int.__wrap(__XColormapEvent.ntype(__long.valueOf(arg0))) 
 
 
# CLASS: org.lwjgl.system.linux.XSelectionRequestEvent$Buffer
from pyquantum_helper import import_once as __import_once__
import java.lang.Boolean as __boolean
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import java.util.stream.Stream as __Stream
__Stream = __Stream
import org.lwjgl.system.StructBuffer as __StructBuffer
__StructBuffer = __StructBuffer
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.CustomBuffer as __CustomBuffer
__CustomBuffer = __CustomBuffer
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.util.Iterator as __Iterator
__Iterator = __Iterator
import java.lang.Object as __object
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.util.Iterator as Iterator
import java.util.Spliterator as __Spliterator
__Spliterator = __Spliterator
import java.lang.Long as __long
import org.lwjgl.system.linux.XSelectionRequestEvent as __XSelectionRequestEvent_Buffer
__Buffer = __XSelectionRequestEvent_Buffer.Buffer
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import java.util.stream.Stream as Stream
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import int
 
class Buffer(pyglsystem.__StructBuffer, pyglsystem.StructBuffer, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XSelectionRequestEvent.Buffer"""
 
    @staticmethod
    def __wrap(java_value: __Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def target(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionRequestEvent$Buffer.target()"""
        return int.__wrap(super(Buffer, self).target())

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(__pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0), arg1))

    @overload
    def selection(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSelectionRequestEvent$Buffer org.lwjgl.system.linux.XSelectionRequestEvent$Buffer.selection(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).selection(__long.valueOf(arg0)))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address0())

    @overload
    def time(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionRequestEvent$Buffer.time()"""
        return int.__wrap(super(Buffer, self).time())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XSelectionRequestEvent$Buffer(long,int)"""
        val = __Buffer(__long.valueOf(arg0), __int.valueOf(arg1))
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int.__wrap(super(__pyglsystem.CustomBuffer, self).address(__int.valueOf(arg0)))

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(__int.valueOf(arg0), arg1))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int.__wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @overload
    def target(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSelectionRequestEvent$Buffer org.lwjgl.system.linux.XSelectionRequestEvent$Buffer.target(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).target(__long.valueOf(arg0)))

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(arg0))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XSelectionRequestEvent$Buffer(java.nio.ByteBuffer)"""
        val = __Buffer(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def requestor(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSelectionRequestEvent$Buffer org.lwjgl.system.linux.XSelectionRequestEvent$Buffer.requestor(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).requestor(__long.valueOf(arg0)))

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).position())

    @overload
    def owner(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionRequestEvent$Buffer.owner()"""
        return int.__wrap(super(Buffer, self).owner())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @overload
    def property(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSelectionRequestEvent$Buffer org.lwjgl.system.linux.XSelectionRequestEvent$Buffer.property(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).property(__long.valueOf(arg0)))

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSelectionRequestEvent$Buffer org.lwjgl.system.linux.XSelectionRequestEvent$Buffer.serial(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).serial(__long.valueOf(arg0)))

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool.__wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSelectionRequestEvent$Buffer org.lwjgl.system.linux.XSelectionRequestEvent$Buffer.type(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).type(__int.valueOf(arg0)))

    @overload
    def selection(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionRequestEvent$Buffer.selection()"""
        return int.__wrap(super(Buffer, self).selection())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def property(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionRequestEvent$Buffer.property()"""
        return int.__wrap(super(Buffer, self).property())

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).position(__int.valueOf(arg0)))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0)))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).clear())

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(__int.valueOf(arg0), arg1))

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSelectionRequestEvent$Buffer org.lwjgl.system.linux.XSelectionRequestEvent$Buffer.display(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).display(__long.valueOf(arg0)))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionRequestEvent$Buffer.serial()"""
        return int.__wrap(super(Buffer, self).serial())

    @overload
    def owner(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSelectionRequestEvent$Buffer org.lwjgl.system.linux.XSelectionRequestEvent$Buffer.owner(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).owner(__long.valueOf(arg0)))

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XSelectionRequestEvent$Buffer.send_event()"""
        return bool.__wrap(super(Buffer, self).send_event())

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XSelectionRequestEvent$Buffer.type()"""
        return int.__wrap(super(Buffer, self).type())

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).slice())

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).compact())

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'.__wrap(super(pyglsystem.StructBuffer, self).get())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).limit(__int.valueOf(arg0)))

    @overload
    def requestor(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionRequestEvent$Buffer.requestor()"""
        return int.__wrap(super(Buffer, self).requestor())

    @overload
    def time(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSelectionRequestEvent$Buffer org.lwjgl.system.linux.XSelectionRequestEvent$Buffer.time(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).time(__long.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'.__wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str.__wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(arg0))

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).stream())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionRequestEvent$Buffer.display()"""
        return int.__wrap(super(Buffer, self).display())

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XSelectionRequestEvent$Buffer org.lwjgl.system.linux.XSelectionRequestEvent$Buffer.send_event(boolean)"""
        return 'Buffer'.__wrap(super(__Buffer, self).send_event(__boolean.valueOf(arg0)))

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'.__wrap(super(pyglsystem.StructBuffer, self).iterator())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).slice(__int.valueOf(arg0), __int.valueOf(arg1))) 
 
 
# CLASS: org.lwjgl.system.linux.Statx
from pyquantum_helper import import_once as __import_once__
import org.lwjgl.system.linux.Statx as __Statx
__Statx = __Statx
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import java.nio.ShortBuffer as ShortBuffer
import org.lwjgl.system.linux.StatxTimestamp as __StatxTimestamp
__StatxTimestamp = __StatxTimestamp
import java.util.function.Consumer as Consumer
import java.lang.Class as __Class
__Class = __Class
import java.lang.Short as __short
from builtins import bool
import org.lwjgl.system.linux.Statx as __Statx_Buffer
__Buffer = __Statx_Buffer.Buffer
from builtins import str
from pyquantum_helper import override
import java.nio.ShortBuffer as __ShortBuffer
__ShortBuffer = __ShortBuffer
import java.lang.Object as __object
import java.nio.LongBuffer as LongBuffer
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.lang.Long as __long
import java.nio.LongBuffer as __LongBuffer
__LongBuffer = __LongBuffer
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import int
 
class Statx(pyglsystem.__Struct, pyglsystem.Struct, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.Statx"""
 
    @staticmethod
    def __wrap(java_value: __Statx) -> 'Statx':
        return Statx(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Statx):
        """
        Dynamic initializer for Statx.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def n__spare3(arg0: int, arg1: int, arg2: int):
        """public static void org.lwjgl.system.linux.Statx.n__spare3(long,int,long)"""
        __Statx.n__spare3(__long.valueOf(arg0), __int.valueOf(arg1), __long.valueOf(arg2))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.Statx$Buffer org.lwjgl.system.linux.Statx.create(long,int)"""
        return Buffer.__wrap(__Statx.create(__long.valueOf(arg0), __int.valueOf(arg1)))

    @overload
    def stx_attributes_mask(self, arg0: int) -> 'Statx':
        """public org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.stx_attributes_mask(long)"""
        return 'Statx'.__wrap(super(__Statx, self).stx_attributes_mask(__long.valueOf(arg0)))

    @overload
    def stx_ctime(self) -> 'StatxTimestamp':
        """public org.lwjgl.system.linux.StatxTimestamp org.lwjgl.system.linux.Statx.stx_ctime()"""
        return 'StatxTimestamp'.__wrap(super(Statx, self).stx_ctime())

    @staticmethod
    @overload
    def create() -> 'Statx':
        """public static org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.create()"""
        return Statx.__wrap(__Statx.create())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def nstx_ino(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.Statx.nstx_ino(long)"""
        return int.__wrap(__Statx.nstx_ino(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def n__spare0(arg0: int, arg1: 'ShortBuffer'):
        """public static void org.lwjgl.system.linux.Statx.n__spare0(long,java.nio.ShortBuffer)"""
        __Statx.n__spare0(__long.valueOf(arg0), arg1)

    @overload
    def stx_mode(self, arg0: int) -> 'Statx':
        """public org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.stx_mode(short)"""
        return 'Statx'.__wrap(super(__Statx, self).stx_mode(__short.valueOf(arg0)))

    @overload
    def stx_dev_major(self, arg0: int) -> 'Statx':
        """public org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.stx_dev_major(int)"""
        return 'Statx'.__wrap(super(__Statx, self).stx_dev_major(__int.valueOf(arg0)))

    @overload
    def stx_atime(self, arg0: 'Consumer') -> 'Statx':
        """public org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.stx_atime(java.util.function.Consumer<org.lwjgl.system.linux.StatxTimestamp>)"""
        return 'Statx'.__wrap(super(__Statx, self).stx_atime(arg0))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def stx_mask(self) -> int:
        """public int org.lwjgl.system.linux.Statx.stx_mask()"""
        return int.__wrap(super(Statx, self).stx_mask())

    @overload
    def stx_btime(self, arg0: 'StatxTimestamp') -> 'Statx':
        """public org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.stx_btime(org.lwjgl.system.linux.StatxTimestamp)"""
        return 'Statx'.__wrap(super(__Statx, self).stx_btime(arg0))

    @staticmethod
    @overload
    def n__spare2(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Statx.n__spare2(long,long)"""
        __Statx.n__spare2(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def nstx_nlink(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.Statx.nstx_nlink(long)"""
        return int.__wrap(__Statx.nstx_nlink(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nstx_atime(arg0: int, arg1: 'StatxTimestamp'):
        """public static void org.lwjgl.system.linux.Statx.nstx_atime(long,org.lwjgl.system.linux.StatxTimestamp)"""
        __Statx.nstx_atime(__long.valueOf(arg0), arg1)

    @staticmethod
    @overload
    def nstx_mtime(arg0: int) -> 'StatxTimestamp':
        """public static org.lwjgl.system.linux.StatxTimestamp org.lwjgl.system.linux.Statx.nstx_mtime(long)"""
        return StatxTimestamp.__wrap(__Statx.nstx_mtime(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def n__spare0(arg0: int, arg1: int) -> int:
        """public static short org.lwjgl.system.linux.Statx.n__spare0(long,int)"""
        return int.__wrap(__Statx.n__spare0(__long.valueOf(arg0), __int.valueOf(arg1)))

    @overload
    def stx_size(self) -> int:
        """public long org.lwjgl.system.linux.Statx.stx_size()"""
        return int.__wrap(super(Statx, self).stx_size())

    @staticmethod
    @overload
    def nstx_attributes(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.Statx.nstx_attributes(long)"""
        return int.__wrap(__Statx.nstx_attributes(__long.valueOf(arg0)))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @staticmethod
    @overload
    def nstx_mnt_id(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.Statx.nstx_mnt_id(long)"""
        return int.__wrap(__Statx.nstx_mnt_id(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nstx_uid(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.Statx.nstx_uid(long)"""
        return int.__wrap(__Statx.nstx_uid(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nstx_size(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Statx.nstx_size(long,long)"""
        __Statx.nstx_size(__long.valueOf(arg0), __long.valueOf(arg1))

    @overload
    def stx_rdev_minor(self, arg0: int) -> 'Statx':
        """public org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.stx_rdev_minor(int)"""
        return 'Statx'.__wrap(super(__Statx, self).stx_rdev_minor(__int.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.Statx$Buffer org.lwjgl.system.linux.Statx.malloc(int)"""
        return Buffer.__wrap(__Statx.malloc(__int.valueOf(arg0)))

    @overload
    def stx_gid(self, arg0: int) -> 'Statx':
        """public org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.stx_gid(int)"""
        return 'Statx'.__wrap(super(__Statx, self).stx_gid(__int.valueOf(arg0)))

    @overload
    def stx_mtime(self) -> 'StatxTimestamp':
        """public org.lwjgl.system.linux.StatxTimestamp org.lwjgl.system.linux.Statx.stx_mtime()"""
        return 'StatxTimestamp'.__wrap(super(Statx, self).stx_mtime())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def nstx_mtime(arg0: int, arg1: 'StatxTimestamp'):
        """public static void org.lwjgl.system.linux.Statx.nstx_mtime(long,org.lwjgl.system.linux.StatxTimestamp)"""
        __Statx.nstx_mtime(__long.valueOf(arg0), arg1)

    @overload
    def stx_mask(self, arg0: int) -> 'Statx':
        """public org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.stx_mask(int)"""
        return 'Statx'.__wrap(super(__Statx, self).stx_mask(__int.valueOf(arg0)))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).address())

    @overload
    def set(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: int, arg10: int, arg11: 'StatxTimestamp', arg12: 'StatxTimestamp', arg13: 'StatxTimestamp', arg14: 'StatxTimestamp', arg15: int, arg16: int, arg17: int, arg18: int, arg19: int) -> 'Statx':
        """public org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.set(int,int,long,int,int,int,short,long,long,long,long,org.lwjgl.system.linux.StatxTimestamp,org.lwjgl.system.linux.StatxTimestamp,org.lwjgl.system.linux.StatxTimestamp,org.lwjgl.system.linux.StatxTimestamp,int,int,int,int,long)"""
        return 'Statx'.__wrap(super(__Statx, self).set(__int.valueOf(arg0), __int.valueOf(arg1), __long.valueOf(arg2), __int.valueOf(arg3), __int.valueOf(arg4), __int.valueOf(arg5), __short.valueOf(arg6), __long.valueOf(arg7), __long.valueOf(arg8), __long.valueOf(arg9), __long.valueOf(arg10), arg11, arg12, arg13, arg14, __int.valueOf(arg15), __int.valueOf(arg16), __int.valueOf(arg17), __int.valueOf(arg18), __long.valueOf(arg19)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'Statx':
        """public static org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.create(long)"""
        return Statx.__wrap(__Statx.create(__long.valueOf(arg0)))

    @overload
    def stx_attributes(self) -> int:
        """public long org.lwjgl.system.linux.Statx.stx_attributes()"""
        return int.__wrap(super(Statx, self).stx_attributes())

    @staticmethod
    @overload
    def n__spare2(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.Statx.n__spare2(long)"""
        return int.__wrap(__Statx.n__spare2(__long.valueOf(arg0)))

    @overload
    def stx_ctime(self, arg0: 'Consumer') -> 'Statx':
        """public org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.stx_ctime(java.util.function.Consumer<org.lwjgl.system.linux.StatxTimestamp>)"""
        return 'Statx'.__wrap(super(__Statx, self).stx_ctime(arg0))

    @staticmethod
    @overload
    def nstx_ctime(arg0: int, arg1: 'StatxTimestamp'):
        """public static void org.lwjgl.system.linux.Statx.nstx_ctime(long,org.lwjgl.system.linux.StatxTimestamp)"""
        __Statx.nstx_ctime(__long.valueOf(arg0), arg1)

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.Statx$Buffer org.lwjgl.system.linux.Statx.calloc(int)"""
        return Buffer.__wrap(__Statx.calloc(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.Statx$Buffer org.lwjgl.system.linux.Statx.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__Statx.malloc(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def nstx_gid(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Statx.nstx_gid(long,int)"""
        __Statx.nstx_gid(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def stx_btime(self) -> 'StatxTimestamp':
        """public org.lwjgl.system.linux.StatxTimestamp org.lwjgl.system.linux.Statx.stx_btime()"""
        return 'StatxTimestamp'.__wrap(super(Statx, self).stx_btime())

    @overload
    def stx_dev_minor(self, arg0: int) -> 'Statx':
        """public org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.stx_dev_minor(int)"""
        return 'Statx'.__wrap(super(__Statx, self).stx_dev_minor(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def n__spare3(arg0: int, arg1: int) -> int:
        """public static long org.lwjgl.system.linux.Statx.n__spare3(long,int)"""
        return int.__wrap(__Statx.n__spare3(__long.valueOf(arg0), __int.valueOf(arg1)))

    @staticmethod
    @overload
    def n__spare0(arg0: int) -> 'ShortBuffer':
        """public static java.nio.ShortBuffer org.lwjgl.system.linux.Statx.n__spare0(long)"""
        return ShortBuffer.__wrap(__Statx.n__spare0(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def n__spare3(arg0: int) -> 'LongBuffer':
        """public static java.nio.LongBuffer org.lwjgl.system.linux.Statx.n__spare3(long)"""
        return LongBuffer.__wrap(__Statx.n__spare3(__long.valueOf(arg0)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str.__wrap(super(pyglsystem.Pointer$Default, self).toString())

    @staticmethod
    @overload
    def malloc() -> 'Statx':
        """public static org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.malloc()"""
        return Statx.__wrap(__Statx.malloc())

    @overload
    def stx_size(self, arg0: int) -> 'Statx':
        """public org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.stx_size(long)"""
        return 'Statx'.__wrap(super(__Statx, self).stx_size(__long.valueOf(arg0)))

    @overload
    def stx_atime(self) -> 'StatxTimestamp':
        """public org.lwjgl.system.linux.StatxTimestamp org.lwjgl.system.linux.Statx.stx_atime()"""
        return 'StatxTimestamp'.__wrap(super(Statx, self).stx_atime())

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'Statx':
        """public static org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.calloc(org.lwjgl.system.MemoryStack)"""
        return Statx.__wrap(__Statx.calloc(arg0))

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'Statx':
        """public static org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.malloc(org.lwjgl.system.MemoryStack)"""
        return Statx.__wrap(__Statx.malloc(arg0))

    @overload
    def stx_rdev_minor(self) -> int:
        """public int org.lwjgl.system.linux.Statx.stx_rdev_minor()"""
        return int.__wrap(super(Statx, self).stx_rdev_minor())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @staticmethod
    @overload
    def nstx_rdev_minor(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Statx.nstx_rdev_minor(long,int)"""
        __Statx.nstx_rdev_minor(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def stx_blksize(self, arg0: int) -> 'Statx':
        """public org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.stx_blksize(int)"""
        return 'Statx'.__wrap(super(__Statx, self).stx_blksize(__int.valueOf(arg0)))

    @overload
    def stx_attributes(self, arg0: int) -> 'Statx':
        """public org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.stx_attributes(long)"""
        return 'Statx'.__wrap(super(__Statx, self).stx_attributes(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nstx_nlink(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Statx.nstx_nlink(long,int)"""
        __Statx.nstx_nlink(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def nstx_dev_minor(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.Statx.nstx_dev_minor(long)"""
        return int.__wrap(__Statx.nstx_dev_minor(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def n__spare3(arg0: int, arg1: 'LongBuffer'):
        """public static void org.lwjgl.system.linux.Statx.n__spare3(long,java.nio.LongBuffer)"""
        __Statx.n__spare3(__long.valueOf(arg0), arg1)

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @overload
    def stx_atime(self, arg0: 'StatxTimestamp') -> 'Statx':
        """public org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.stx_atime(org.lwjgl.system.linux.StatxTimestamp)"""
        return 'Statx'.__wrap(super(__Statx, self).stx_atime(arg0))

    @overload
    def stx_rdev_major(self, arg0: int) -> 'Statx':
        """public org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.stx_rdev_major(int)"""
        return 'Statx'.__wrap(super(__Statx, self).stx_rdev_major(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nstx_attributes_mask(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Statx.nstx_attributes_mask(long,long)"""
        __Statx.nstx_attributes_mask(__long.valueOf(arg0), __long.valueOf(arg1))

    @overload
    def stx_btime(self, arg0: 'Consumer') -> 'Statx':
        """public org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.stx_btime(java.util.function.Consumer<org.lwjgl.system.linux.StatxTimestamp>)"""
        return 'Statx'.__wrap(super(__Statx, self).stx_btime(arg0))

    @staticmethod
    @overload
    def nstx_btime(arg0: int) -> 'StatxTimestamp':
        """public static org.lwjgl.system.linux.StatxTimestamp org.lwjgl.system.linux.Statx.nstx_btime(long)"""
        return StatxTimestamp.__wrap(__Statx.nstx_btime(__long.valueOf(arg0)))

    @overload
    def stx_blksize(self) -> int:
        """public int org.lwjgl.system.linux.Statx.stx_blksize()"""
        return int.__wrap(super(Statx, self).stx_blksize())

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        __Struct.validate(__long.valueOf(arg0), __int.valueOf(arg1), __int.valueOf(arg2), arg3)

    @staticmethod
    @overload
    def n__spare0(arg0: int, arg1: int, arg2: int):
        """public static void org.lwjgl.system.linux.Statx.n__spare0(long,int,short)"""
        __Statx.n__spare0(__long.valueOf(arg0), __int.valueOf(arg1), __short.valueOf(arg2))

    @staticmethod
    @overload
    def nstx_rdev_major(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Statx.nstx_rdev_major(long,int)"""
        __Statx.nstx_rdev_major(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def nstx_uid(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Statx.nstx_uid(long,int)"""
        __Statx.nstx_uid(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def stx_dev_minor(self) -> int:
        """public int org.lwjgl.system.linux.Statx.stx_dev_minor()"""
        return int.__wrap(super(Statx, self).stx_dev_minor())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.Statx.sizeof()"""
        return int.__wrap(super(Statx, self).sizeof())

    @staticmethod
    @overload
    def nstx_gid(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.Statx.nstx_gid(long)"""
        return int.__wrap(__Statx.nstx_gid(__long.valueOf(arg0)))

    @overload
    def stx_uid(self, arg0: int) -> 'Statx':
        """public org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.stx_uid(int)"""
        return 'Statx'.__wrap(super(__Statx, self).stx_uid(__int.valueOf(arg0)))

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool.__wrap(super(__pyglsystem.Struct, self).isNull(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nstx_rdev_major(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.Statx.nstx_rdev_major(long)"""
        return int.__wrap(__Statx.nstx_rdev_major(__long.valueOf(arg0)))

    @overload
    def stx_mtime(self, arg0: 'Consumer') -> 'Statx':
        """public org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.stx_mtime(java.util.function.Consumer<org.lwjgl.system.linux.StatxTimestamp>)"""
        return 'Statx'.__wrap(super(__Statx, self).stx_mtime(arg0))

    @overload
    def stx_mode(self) -> int:
        """public short org.lwjgl.system.linux.Statx.stx_mode()"""
        return int.__wrap(super(Statx, self).stx_mode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.Statx$Buffer org.lwjgl.system.linux.Statx.create(int)"""
        return Buffer.__wrap(__Statx.create(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nstx_mode(arg0: int) -> int:
        """public static short org.lwjgl.system.linux.Statx.nstx_mode(long)"""
        return int.__wrap(__Statx.nstx_mode(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nstx_blocks(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.Statx.nstx_blocks(long)"""
        return int.__wrap(__Statx.nstx_blocks(__long.valueOf(arg0)))

    @overload
    def stx_dev_major(self) -> int:
        """public int org.lwjgl.system.linux.Statx.stx_dev_major()"""
        return int.__wrap(super(Statx, self).stx_dev_major())

    @overload
    def stx_ino(self, arg0: int) -> 'Statx':
        """public org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.stx_ino(long)"""
        return 'Statx'.__wrap(super(__Statx, self).stx_ino(__long.valueOf(arg0)))

    @overload
    def stx_ino(self) -> int:
        """public long org.lwjgl.system.linux.Statx.stx_ino()"""
        return int.__wrap(super(Statx, self).stx_ino())

    @staticmethod
    @overload
    def nstx_rdev_minor(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.Statx.nstx_rdev_minor(long)"""
        return int.__wrap(__Statx.nstx_rdev_minor(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nstx_mask(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.Statx.nstx_mask(long)"""
        return int.__wrap(__Statx.nstx_mask(__long.valueOf(arg0)))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.Statx$Buffer org.lwjgl.system.linux.Statx.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__Statx.calloc(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def nstx_attributes_mask(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.Statx.nstx_attributes_mask(long)"""
        return int.__wrap(__Statx.nstx_attributes_mask(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nstx_blocks(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Statx.nstx_blocks(long,long)"""
        __Statx.nstx_blocks(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def nstx_ino(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Statx.nstx_ino(long,long)"""
        __Statx.nstx_ino(__long.valueOf(arg0), __long.valueOf(arg1))

    @overload
    def stx_blocks(self) -> int:
        """public long org.lwjgl.system.linux.Statx.stx_blocks()"""
        return int.__wrap(super(Statx, self).stx_blocks())

    @staticmethod
    @overload
    def nstx_blksize(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.Statx.nstx_blksize(long)"""
        return int.__wrap(__Statx.nstx_blksize(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc() -> 'Statx':
        """public static org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.calloc()"""
        return Statx.__wrap(__Statx.calloc())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.Statx(java.nio.ByteBuffer)"""
        val = __Statx(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def stx_mtime(self, arg0: 'StatxTimestamp') -> 'Statx':
        """public org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.stx_mtime(org.lwjgl.system.linux.StatxTimestamp)"""
        return 'Statx'.__wrap(super(__Statx, self).stx_mtime(arg0))

    @staticmethod
    @overload
    def nstx_attributes(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Statx.nstx_attributes(long,long)"""
        __Statx.nstx_attributes(__long.valueOf(arg0), __long.valueOf(arg1))

    @overload
    def stx_mnt_id(self) -> int:
        """public long org.lwjgl.system.linux.Statx.stx_mnt_id()"""
        return int.__wrap(super(Statx, self).stx_mnt_id())

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.Statx$Buffer org.lwjgl.system.linux.Statx.createSafe(long,int)"""
        return Buffer.__wrap(__Statx.createSafe(__long.valueOf(arg0), __int.valueOf(arg1)))

    @overload
    def stx_nlink(self) -> int:
        """public int org.lwjgl.system.linux.Statx.stx_nlink()"""
        return int.__wrap(super(Statx, self).stx_nlink())

    @overload
    def stx_gid(self) -> int:
        """public int org.lwjgl.system.linux.Statx.stx_gid()"""
        return int.__wrap(super(Statx, self).stx_gid())

    @overload
    def stx_ctime(self, arg0: 'StatxTimestamp') -> 'Statx':
        """public org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.stx_ctime(org.lwjgl.system.linux.StatxTimestamp)"""
        return 'Statx'.__wrap(super(__Statx, self).stx_ctime(arg0))

    @overload
    def stx_blocks(self, arg0: int) -> 'Statx':
        """public org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.stx_blocks(long)"""
        return 'Statx'.__wrap(super(__Statx, self).stx_blocks(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nstx_size(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.Statx.nstx_size(long)"""
        return int.__wrap(__Statx.nstx_size(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'Statx':
        """public static org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.createSafe(long)"""
        return Statx.__wrap(__Statx.createSafe(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nstx_btime(arg0: int, arg1: 'StatxTimestamp'):
        """public static void org.lwjgl.system.linux.Statx.nstx_btime(long,org.lwjgl.system.linux.StatxTimestamp)"""
        __Statx.nstx_btime(__long.valueOf(arg0), arg1)

    @overload
    def stx_mnt_id(self, arg0: int) -> 'Statx':
        """public org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.stx_mnt_id(long)"""
        return 'Statx'.__wrap(super(__Statx, self).stx_mnt_id(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nstx_mode(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Statx.nstx_mode(long,short)"""
        __Statx.nstx_mode(__long.valueOf(arg0), __short.valueOf(arg1))

    @overload
    def set(self, arg0: 'Statx') -> 'Statx':
        """public org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.set(org.lwjgl.system.linux.Statx)"""
        return 'Statx'.__wrap(super(__Statx, self).set(arg0))

    @staticmethod
    @overload
    def nstx_blksize(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Statx.nstx_blksize(long,int)"""
        __Statx.nstx_blksize(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def nstx_dev_minor(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Statx.nstx_dev_minor(long,int)"""
        __Statx.nstx_dev_minor(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def nstx_mnt_id(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Statx.nstx_mnt_id(long,long)"""
        __Statx.nstx_mnt_id(__long.valueOf(arg0), __long.valueOf(arg1))

    @overload
    def stx_uid(self) -> int:
        """public int org.lwjgl.system.linux.Statx.stx_uid()"""
        return int.__wrap(super(Statx, self).stx_uid())

    @staticmethod
    @overload
    def nstx_mask(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Statx.nstx_mask(long,int)"""
        __Statx.nstx_mask(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def stx_rdev_major(self) -> int:
        """public int org.lwjgl.system.linux.Statx.stx_rdev_major()"""
        return int.__wrap(super(Statx, self).stx_rdev_major())

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def stx_nlink(self, arg0: int) -> 'Statx':
        """public org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.stx_nlink(int)"""
        return 'Statx'.__wrap(super(__Statx, self).stx_nlink(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nstx_dev_major(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.Statx.nstx_dev_major(long)"""
        return int.__wrap(__Statx.nstx_dev_major(__long.valueOf(arg0)))

    @overload
    def stx_attributes_mask(self) -> int:
        """public long org.lwjgl.system.linux.Statx.stx_attributes_mask()"""
        return int.__wrap(super(Statx, self).stx_attributes_mask())

    @staticmethod
    @overload
    def nstx_atime(arg0: int) -> 'StatxTimestamp':
        """public static org.lwjgl.system.linux.StatxTimestamp org.lwjgl.system.linux.Statx.nstx_atime(long)"""
        return StatxTimestamp.__wrap(__Statx.nstx_atime(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nstx_ctime(arg0: int) -> 'StatxTimestamp':
        """public static org.lwjgl.system.linux.StatxTimestamp org.lwjgl.system.linux.Statx.nstx_ctime(long)"""
        return StatxTimestamp.__wrap(__Statx.nstx_ctime(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nstx_dev_major(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Statx.nstx_dev_major(long,int)"""
        __Statx.nstx_dev_major(__long.valueOf(arg0), __int.valueOf(arg1)) 
 
 
# CLASS: org.lwjgl.system.linux.DynamicLinkLoader
import org.lwjgl.system.linux.DynamicLinkLoader as __DynamicLinkLoader
__DynamicLinkLoader = __DynamicLinkLoader
from builtins import str
import java.lang.CharSequence as CharSequence
from pyquantum_helper import override
import java.lang.Object as __object
from builtins import type
import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
from builtins import int
 
class DynamicLinkLoader():
    """org.lwjgl.system.linux.DynamicLinkLoader"""
 
    @staticmethod
    def __wrap(java_value: __DynamicLinkLoader) -> 'DynamicLinkLoader':
        return DynamicLinkLoader(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __DynamicLinkLoader):
        """
        Dynamic initializer for DynamicLinkLoader.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.lang.Object.toString()"""
        return str.__wrap(super(object, self).toString())

    @staticmethod
    @overload
    def dlerror() -> str:
        """public static java.lang.String org.lwjgl.system.linux.DynamicLinkLoader.dlerror()"""
        return str.__wrap(__DynamicLinkLoader.dlerror())

    @staticmethod
    @overload
    def ndlsym(arg0: int, arg1: int) -> int:
        """public static native long org.lwjgl.system.linux.DynamicLinkLoader.ndlsym(long,long)"""
        return int.__wrap(__DynamicLinkLoader.ndlsym(__long.valueOf(arg0), __long.valueOf(arg1)))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def ndlclose(arg0: int) -> int:
        """public static native int org.lwjgl.system.linux.DynamicLinkLoader.ndlclose(long)"""
        return int.__wrap(__DynamicLinkLoader.ndlclose(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def dlclose(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.DynamicLinkLoader.dlclose(long)"""
        return int.__wrap(__DynamicLinkLoader.dlclose(__long.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @staticmethod
    @overload
    def dlsym(arg0: int, arg1: 'CharSequence') -> int:
        """public static long org.lwjgl.system.linux.DynamicLinkLoader.dlsym(long,java.lang.CharSequence)"""
        return int.__wrap(__DynamicLinkLoader.dlsym(__long.valueOf(arg0), arg1))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @staticmethod
    @overload
    def dlsym(arg0: int, arg1: 'ByteBuffer') -> int:
        """public static long org.lwjgl.system.linux.DynamicLinkLoader.dlsym(long,java.nio.ByteBuffer)"""
        return int.__wrap(__DynamicLinkLoader.dlsym(__long.valueOf(arg0), arg1))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def dlopen(arg0: 'ByteBuffer', arg1: int) -> int:
        """public static long org.lwjgl.system.linux.DynamicLinkLoader.dlopen(java.nio.ByteBuffer,int)"""
        return int.__wrap(__DynamicLinkLoader.dlopen(arg0, __int.valueOf(arg1)))

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @staticmethod
    @overload
    def dlopen(arg0: 'CharSequence', arg1: int) -> int:
        """public static long org.lwjgl.system.linux.DynamicLinkLoader.dlopen(java.lang.CharSequence,int)"""
        return int.__wrap(__DynamicLinkLoader.dlopen(arg0, __int.valueOf(arg1)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def ndlopen(arg0: int, arg1: int) -> int:
        """public static native long org.lwjgl.system.linux.DynamicLinkLoader.ndlopen(long,int)"""
        return int.__wrap(__DynamicLinkLoader.ndlopen(__long.valueOf(arg0), __int.valueOf(arg1)))

    @staticmethod
    @overload
    def ndlerror() -> int:
        """public static native long org.lwjgl.system.linux.DynamicLinkLoader.ndlerror()"""
        return int.__wrap(__DynamicLinkLoader.ndlerror())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0)) 
 
 
# CLASS: org.lwjgl.system.linux.XResizeRequestEvent$Buffer
from pyquantum_helper import import_once as __import_once__
import java.lang.Boolean as __boolean
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import java.util.stream.Stream as __Stream
__Stream = __Stream
import org.lwjgl.system.StructBuffer as __StructBuffer
__StructBuffer = __StructBuffer
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.CustomBuffer as __CustomBuffer
__CustomBuffer = __CustomBuffer
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.util.Iterator as __Iterator
__Iterator = __Iterator
import java.lang.Object as __object
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.util.Iterator as Iterator
import java.util.Spliterator as __Spliterator
__Spliterator = __Spliterator
import java.lang.Long as __long
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import java.util.stream.Stream as Stream
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
import org.lwjgl.system.linux.XResizeRequestEvent as __XResizeRequestEvent_Buffer
__Buffer = __XResizeRequestEvent_Buffer.Buffer
from builtins import int
 
class Buffer(pyglsystem.__StructBuffer, pyglsystem.StructBuffer, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XResizeRequestEvent.Buffer"""
 
    @staticmethod
    def __wrap(java_value: __Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def width(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XResizeRequestEvent$Buffer org.lwjgl.system.linux.XResizeRequestEvent$Buffer.width(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).width(__int.valueOf(arg0)))

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(__pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XResizeRequestEvent$Buffer org.lwjgl.system.linux.XResizeRequestEvent$Buffer.serial(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).serial(__long.valueOf(arg0)))

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XResizeRequestEvent$Buffer.send_event()"""
        return bool.__wrap(super(Buffer, self).send_event())

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0), arg1))

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XResizeRequestEvent$Buffer.display()"""
        return int.__wrap(super(Buffer, self).display())

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int.__wrap(super(__pyglsystem.CustomBuffer, self).address(__int.valueOf(arg0)))

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(__int.valueOf(arg0), arg1))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int.__wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(arg0))

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XResizeRequestEvent$Buffer org.lwjgl.system.linux.XResizeRequestEvent$Buffer.display(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).display(__long.valueOf(arg0)))

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def width(self) -> int:
        """public int org.lwjgl.system.linux.XResizeRequestEvent$Buffer.width()"""
        return int.__wrap(super(Buffer, self).width())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XResizeRequestEvent$Buffer.window()"""
        return int.__wrap(super(Buffer, self).window())

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XResizeRequestEvent$Buffer(long,int)"""
        val = __Buffer(__long.valueOf(arg0), __int.valueOf(arg1))
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XResizeRequestEvent$Buffer.type()"""
        return int.__wrap(super(Buffer, self).type())

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool.__wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).position(__int.valueOf(arg0)))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0)))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XResizeRequestEvent$Buffer.serial()"""
        return int.__wrap(super(Buffer, self).serial())

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).clear())

    @overload
    def window(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XResizeRequestEvent$Buffer org.lwjgl.system.linux.XResizeRequestEvent$Buffer.window(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).window(__long.valueOf(arg0)))

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(__int.valueOf(arg0), arg1))

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).slice())

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XResizeRequestEvent$Buffer org.lwjgl.system.linux.XResizeRequestEvent$Buffer.send_event(boolean)"""
        return 'Buffer'.__wrap(super(__Buffer, self).send_event(__boolean.valueOf(arg0)))

    @overload
    def height(self) -> int:
        """public int org.lwjgl.system.linux.XResizeRequestEvent$Buffer.height()"""
        return int.__wrap(super(Buffer, self).height())

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'.__wrap(super(pyglsystem.StructBuffer, self).get())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XResizeRequestEvent$Buffer(java.nio.ByteBuffer)"""
        val = __Buffer(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).limit(__int.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'.__wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str.__wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(arg0))

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).stream())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @overload
    def height(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XResizeRequestEvent$Buffer org.lwjgl.system.linux.XResizeRequestEvent$Buffer.height(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).height(__int.valueOf(arg0)))

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XResizeRequestEvent$Buffer org.lwjgl.system.linux.XResizeRequestEvent$Buffer.type(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).type(__int.valueOf(arg0)))

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'.__wrap(super(pyglsystem.StructBuffer, self).iterator())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).slice(__int.valueOf(arg0), __int.valueOf(arg1))) 
 
 
# CLASS: org.lwjgl.system.linux.XCirculateEvent
from pyquantum_helper import import_once as __import_once__
from builtins import str
import java.lang.Boolean as __boolean
from pyquantum_helper import override
import java.lang.Object as __object
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import org.lwjgl.system.linux.XCirculateEvent as __XCirculateEvent
__XCirculateEvent = __XCirculateEvent
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.lang.Long as __long
import org.lwjgl.system.linux.XCirculateEvent as __XCirculateEvent_Buffer
__Buffer = __XCirculateEvent_Buffer.Buffer
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
from builtins import int
 
class XCirculateEvent(pyglsystem.__Struct, pyglsystem.Struct, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XCirculateEvent"""
 
    @staticmethod
    def __wrap(java_value: __XCirculateEvent) -> 'XCirculateEvent':
        return XCirculateEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __XCirculateEvent):
        """
        Dynamic initializer for XCirculateEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def create() -> 'XCirculateEvent':
        """public static org.lwjgl.system.linux.XCirculateEvent org.lwjgl.system.linux.XCirculateEvent.create()"""
        return XCirculateEvent.__wrap(__XCirculateEvent.create())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XCirculateEvent(java.nio.ByteBuffer)"""
        val = __XCirculateEvent(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCirculateEvent.ntype(long,int)"""
        __XCirculateEvent.ntype(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCirculateEvent.nserial(long,long)"""
        __XCirculateEvent.nserial(__long.valueOf(arg0), __long.valueOf(arg1))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def nplace(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCirculateEvent.nplace(long,int)"""
        __XCirculateEvent.nplace(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool.__wrap(super(__pyglsystem.Struct, self).isNull(__int.valueOf(arg0)))

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int, arg5: int, arg6: int) -> 'XCirculateEvent':
        """public org.lwjgl.system.linux.XCirculateEvent org.lwjgl.system.linux.XCirculateEvent.set(int,long,boolean,long,long,long,int)"""
        return 'XCirculateEvent'.__wrap(super(__XCirculateEvent, self).set(__int.valueOf(arg0), __long.valueOf(arg1), __boolean.valueOf(arg2), __long.valueOf(arg3), __long.valueOf(arg4), __long.valueOf(arg5), __int.valueOf(arg6)))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XCirculateEvent.serial()"""
        return int.__wrap(super(XCirculateEvent, self).serial())

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XCirculateEvent':
        """public static org.lwjgl.system.linux.XCirculateEvent org.lwjgl.system.linux.XCirculateEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XCirculateEvent.__wrap(__XCirculateEvent.mallocStack(arg0))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def nwindow(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCirculateEvent.nwindow(long,long)"""
        __XCirculateEvent.nwindow(__long.valueOf(arg0), __long.valueOf(arg1))

    @overload
    def event(self) -> int:
        """public long org.lwjgl.system.linux.XCirculateEvent.event()"""
        return int.__wrap(super(XCirculateEvent, self).event())

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XCirculateEvent$Buffer org.lwjgl.system.linux.XCirculateEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XCirculateEvent.mallocStack(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def nevent(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XCirculateEvent.nevent(long)"""
        return int.__wrap(__XCirculateEvent.nevent(__long.valueOf(arg0)))

    @overload
    def set(self, arg0: 'XCirculateEvent') -> 'XCirculateEvent':
        """public org.lwjgl.system.linux.XCirculateEvent org.lwjgl.system.linux.XCirculateEvent.set(org.lwjgl.system.linux.XCirculateEvent)"""
        return 'XCirculateEvent'.__wrap(super(__XCirculateEvent, self).set(arg0))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XCirculateEvent':
        """public static org.lwjgl.system.linux.XCirculateEvent org.lwjgl.system.linux.XCirculateEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XCirculateEvent.__wrap(__XCirculateEvent.calloc(arg0))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @staticmethod
    @overload
    def malloc() -> 'XCirculateEvent':
        """public static org.lwjgl.system.linux.XCirculateEvent org.lwjgl.system.linux.XCirculateEvent.malloc()"""
        return XCirculateEvent.__wrap(__XCirculateEvent.malloc())

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XCirculateEvent.window()"""
        return int.__wrap(super(XCirculateEvent, self).window())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XCirculateEvent.sizeof()"""
        return int.__wrap(super(XCirculateEvent, self).sizeof())

    @staticmethod
    @overload
    def callocStack() -> 'XCirculateEvent':
        """public static org.lwjgl.system.linux.XCirculateEvent org.lwjgl.system.linux.XCirculateEvent.callocStack()"""
        return XCirculateEvent.__wrap(__XCirculateEvent.callocStack())

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XCirculateEvent.nserial(long)"""
        return int.__wrap(__XCirculateEvent.nserial(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XCirculateEvent$Buffer org.lwjgl.system.linux.XCirculateEvent.mallocStack(int)"""
        return Buffer.__wrap(__XCirculateEvent.mallocStack(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack() -> 'XCirculateEvent':
        """public static org.lwjgl.system.linux.XCirculateEvent org.lwjgl.system.linux.XCirculateEvent.mallocStack()"""
        return XCirculateEvent.__wrap(__XCirculateEvent.mallocStack())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XCirculateEvent$Buffer org.lwjgl.system.linux.XCirculateEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XCirculateEvent.callocStack(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def nwindow(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XCirculateEvent.nwindow(long)"""
        return int.__wrap(__XCirculateEvent.nwindow(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XCirculateEvent$Buffer org.lwjgl.system.linux.XCirculateEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XCirculateEvent.malloc(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XCirculateEvent':
        """public static org.lwjgl.system.linux.XCirculateEvent org.lwjgl.system.linux.XCirculateEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XCirculateEvent.__wrap(__XCirculateEvent.callocStack(arg0))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).address())

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XCirculateEvent$Buffer org.lwjgl.system.linux.XCirculateEvent.create(long,int)"""
        return Buffer.__wrap(__XCirculateEvent.create(__long.valueOf(arg0), __int.valueOf(arg1)))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XCirculateEvent$Buffer org.lwjgl.system.linux.XCirculateEvent.createSafe(long,int)"""
        return Buffer.__wrap(__XCirculateEvent.createSafe(__long.valueOf(arg0), __int.valueOf(arg1)))

    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XCirculateEvent.nsend_event(long)"""
        return int.__wrap(__XCirculateEvent.nsend_event(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XCirculateEvent$Buffer org.lwjgl.system.linux.XCirculateEvent.malloc(int)"""
        return Buffer.__wrap(__XCirculateEvent.malloc(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XCirculateEvent$Buffer org.lwjgl.system.linux.XCirculateEvent.calloc(int)"""
        return Buffer.__wrap(__XCirculateEvent.calloc(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'XCirculateEvent':
        """public static org.lwjgl.system.linux.XCirculateEvent org.lwjgl.system.linux.XCirculateEvent.create(long)"""
        return XCirculateEvent.__wrap(__XCirculateEvent.create(__long.valueOf(arg0)))

    @overload
    def display(self, arg0: int) -> 'XCirculateEvent':
        """public org.lwjgl.system.linux.XCirculateEvent org.lwjgl.system.linux.XCirculateEvent.display(long)"""
        return 'XCirculateEvent'.__wrap(super(__XCirculateEvent, self).display(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCirculateEvent.nsend_event(long,int)"""
        __XCirculateEvent.nsend_event(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XCirculateEvent.send_event()"""
        return bool.__wrap(super(XCirculateEvent, self).send_event())

    @overload
    def place(self) -> int:
        """public int org.lwjgl.system.linux.XCirculateEvent.place()"""
        return int.__wrap(super(XCirculateEvent, self).place())

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XCirculateEvent$Buffer org.lwjgl.system.linux.XCirculateEvent.create(int)"""
        return Buffer.__wrap(__XCirculateEvent.create(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XCirculateEvent':
        """public static org.lwjgl.system.linux.XCirculateEvent org.lwjgl.system.linux.XCirculateEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XCirculateEvent.__wrap(__XCirculateEvent.malloc(arg0))

    @overload
    def event(self, arg0: int) -> 'XCirculateEvent':
        """public org.lwjgl.system.linux.XCirculateEvent org.lwjgl.system.linux.XCirculateEvent.event(long)"""
        return 'XCirculateEvent'.__wrap(super(__XCirculateEvent, self).event(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nplace(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XCirculateEvent.nplace(long)"""
        return int.__wrap(__XCirculateEvent.nplace(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XCirculateEvent':
        """public static org.lwjgl.system.linux.XCirculateEvent org.lwjgl.system.linux.XCirculateEvent.createSafe(long)"""
        return XCirculateEvent.__wrap(__XCirculateEvent.createSafe(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nevent(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCirculateEvent.nevent(long,long)"""
        __XCirculateEvent.nevent(__long.valueOf(arg0), __long.valueOf(arg1))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XCirculateEvent.type()"""
        return int.__wrap(super(XCirculateEvent, self).type())

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XCirculateEvent.ntype(long)"""
        return int.__wrap(__XCirculateEvent.ntype(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCirculateEvent.ndisplay(long,long)"""
        __XCirculateEvent.ndisplay(__long.valueOf(arg0), __long.valueOf(arg1))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str.__wrap(super(pyglsystem.Pointer$Default, self).toString())

    @overload
    def send_event(self, arg0: bool) -> 'XCirculateEvent':
        """public org.lwjgl.system.linux.XCirculateEvent org.lwjgl.system.linux.XCirculateEvent.send_event(boolean)"""
        return 'XCirculateEvent'.__wrap(super(__XCirculateEvent, self).send_event(__boolean.valueOf(arg0)))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XCirculateEvent.validate(long)"""
        __XCirculateEvent.validate(__long.valueOf(arg0))

    @staticmethod
    @overload
    def calloc() -> 'XCirculateEvent':
        """public static org.lwjgl.system.linux.XCirculateEvent org.lwjgl.system.linux.XCirculateEvent.calloc()"""
        return XCirculateEvent.__wrap(__XCirculateEvent.calloc())

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XCirculateEvent.ndisplay(long)"""
        return int.__wrap(__XCirculateEvent.ndisplay(__long.valueOf(arg0)))

    @overload
    def place(self, arg0: int) -> 'XCirculateEvent':
        """public org.lwjgl.system.linux.XCirculateEvent org.lwjgl.system.linux.XCirculateEvent.place(int)"""
        return 'XCirculateEvent'.__wrap(super(__XCirculateEvent, self).place(__int.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @overload
    def serial(self, arg0: int) -> 'XCirculateEvent':
        """public org.lwjgl.system.linux.XCirculateEvent org.lwjgl.system.linux.XCirculateEvent.serial(long)"""
        return 'XCirculateEvent'.__wrap(super(__XCirculateEvent, self).serial(__long.valueOf(arg0)))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XCirculateEvent.display()"""
        return int.__wrap(super(XCirculateEvent, self).display())

    @overload
    def type(self, arg0: int) -> 'XCirculateEvent':
        """public org.lwjgl.system.linux.XCirculateEvent org.lwjgl.system.linux.XCirculateEvent.type(int)"""
        return 'XCirculateEvent'.__wrap(super(__XCirculateEvent, self).type(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XCirculateEvent$Buffer org.lwjgl.system.linux.XCirculateEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XCirculateEvent.calloc(__int.valueOf(arg0), arg1))

    @overload
    def window(self, arg0: int) -> 'XCirculateEvent':
        """public org.lwjgl.system.linux.XCirculateEvent org.lwjgl.system.linux.XCirculateEvent.window(long)"""
        return 'XCirculateEvent'.__wrap(super(__XCirculateEvent, self).window(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        __Struct.validate(__long.valueOf(arg0), __int.valueOf(arg1), __int.valueOf(arg2), arg3)

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XCirculateEvent$Buffer org.lwjgl.system.linux.XCirculateEvent.callocStack(int)"""
        return Buffer.__wrap(__XCirculateEvent.callocStack(__int.valueOf(arg0))) 
 
 
# CLASS: org.lwjgl.system.linux.Flock$Buffer
from pyquantum_helper import import_once as __import_once__
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import java.util.stream.Stream as __Stream
__Stream = __Stream
import org.lwjgl.system.StructBuffer as __StructBuffer
__StructBuffer = __StructBuffer
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.CustomBuffer as __CustomBuffer
__CustomBuffer = __CustomBuffer
import java.lang.Short as __short
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.util.Iterator as __Iterator
__Iterator = __Iterator
import java.lang.Object as __object
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.util.Iterator as Iterator
import java.util.Spliterator as __Spliterator
__Spliterator = __Spliterator
import java.lang.Long as __long
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import java.util.stream.Stream as Stream
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
import org.lwjgl.system.linux.Flock as __Flock_Buffer
__Buffer = __Flock_Buffer.Buffer
from builtins import int
 
class Buffer(pyglsystem.__StructBuffer, pyglsystem.StructBuffer, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.Flock.Buffer"""
 
    @staticmethod
    def __wrap(java_value: __Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(__pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0), arg1))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int.__wrap(super(__pyglsystem.CustomBuffer, self).address(__int.valueOf(arg0)))

    @overload
    def l_start(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Flock$Buffer org.lwjgl.system.linux.Flock$Buffer.l_start(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).l_start(__long.valueOf(arg0)))

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(__int.valueOf(arg0), arg1))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int.__wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(arg0))

    @overload
    def l_len(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Flock$Buffer org.lwjgl.system.linux.Flock$Buffer.l_len(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).l_len(__long.valueOf(arg0)))

    @overload
    def l_start(self) -> int:
        """public long org.lwjgl.system.linux.Flock$Buffer.l_start()"""
        return int.__wrap(super(Buffer, self).l_start())

    @overload
    def l_pid(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Flock$Buffer org.lwjgl.system.linux.Flock$Buffer.l_pid(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).l_pid(__int.valueOf(arg0)))

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.Flock$Buffer(java.nio.ByteBuffer)"""
        val = __Buffer(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def l_type(self) -> int:
        """public short org.lwjgl.system.linux.Flock$Buffer.l_type()"""
        return int.__wrap(super(Buffer, self).l_type())

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool.__wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def l_type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Flock$Buffer org.lwjgl.system.linux.Flock$Buffer.l_type(short)"""
        return 'Buffer'.__wrap(super(__Buffer, self).l_type(__short.valueOf(arg0)))

    @overload
    def l_len(self) -> int:
        """public long org.lwjgl.system.linux.Flock$Buffer.l_len()"""
        return int.__wrap(super(Buffer, self).l_len())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).position(__int.valueOf(arg0)))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0)))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).clear())

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(__int.valueOf(arg0), arg1))

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @overload
    def l_pid(self) -> int:
        """public int org.lwjgl.system.linux.Flock$Buffer.l_pid()"""
        return int.__wrap(super(Buffer, self).l_pid())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address())

    @overload
    def l_whence(self) -> int:
        """public short org.lwjgl.system.linux.Flock$Buffer.l_whence()"""
        return int.__wrap(super(Buffer, self).l_whence())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.Flock$Buffer(long,int)"""
        val = __Buffer(__long.valueOf(arg0), __int.valueOf(arg1))
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).slice())

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).compact())

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'.__wrap(super(pyglsystem.StructBuffer, self).get())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).limit(__int.valueOf(arg0)))

    @overload
    def l_whence(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Flock$Buffer org.lwjgl.system.linux.Flock$Buffer.l_whence(short)"""
        return 'Buffer'.__wrap(super(__Buffer, self).l_whence(__short.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'.__wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str.__wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(arg0))

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).stream())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'.__wrap(super(pyglsystem.StructBuffer, self).iterator())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).slice(__int.valueOf(arg0), __int.valueOf(arg1))) 
 
 
# CLASS: org.lwjgl.system.linux.Visual$Buffer
from pyquantum_helper import import_once as __import_once__
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import java.util.stream.Stream as __Stream
__Stream = __Stream
import org.lwjgl.system.StructBuffer as __StructBuffer
__StructBuffer = __StructBuffer
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.CustomBuffer as __CustomBuffer
__CustomBuffer = __CustomBuffer
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.util.Iterator as __Iterator
__Iterator = __Iterator
import java.lang.Object as __object
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import org.lwjgl.system.linux.Visual as __Visual_Buffer
__Buffer = __Visual_Buffer.Buffer
import java.util.Iterator as Iterator
import java.util.Spliterator as __Spliterator
__Spliterator = __Spliterator
import java.lang.Long as __long
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import java.util.stream.Stream as Stream
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import int
 
class Buffer(pyglsystem.__StructBuffer, pyglsystem.StructBuffer, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.Visual.Buffer"""
 
    @staticmethod
    def __wrap(java_value: __Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def blue_mask(self) -> int:
        """public long org.lwjgl.system.linux.Visual$Buffer.blue_mask()"""
        return int.__wrap(super(Buffer, self).blue_mask())

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(__pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def visualid(self) -> int:
        """public long org.lwjgl.system.linux.Visual$Buffer.visualid()"""
        return int.__wrap(super(Buffer, self).visualid())

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0), arg1))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address0())

    @overload
    def class$(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Visual$Buffer org.lwjgl.system.linux.Visual$Buffer.class$(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).class$(__int.valueOf(arg0)))

    @overload
    def blue_mask(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Visual$Buffer org.lwjgl.system.linux.Visual$Buffer.blue_mask(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).blue_mask(__long.valueOf(arg0)))

    @overload
    def ext_data(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Visual$Buffer org.lwjgl.system.linux.Visual$Buffer.ext_data(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).ext_data(__long.valueOf(arg0)))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int.__wrap(super(__pyglsystem.CustomBuffer, self).address(__int.valueOf(arg0)))

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(__int.valueOf(arg0), arg1))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int.__wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(arg0))

    @overload
    def map_entries(self) -> int:
        """public int org.lwjgl.system.linux.Visual$Buffer.map_entries()"""
        return int.__wrap(super(Buffer, self).map_entries())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool.__wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def visualid(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Visual$Buffer org.lwjgl.system.linux.Visual$Buffer.visualid(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).visualid(__long.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).position(__int.valueOf(arg0)))

    @overload
    def class$(self) -> int:
        """public int org.lwjgl.system.linux.Visual$Buffer.class$()"""
        return int.__wrap(super(Buffer, self).class$())

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0)))

    @overload
    def map_entries(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Visual$Buffer org.lwjgl.system.linux.Visual$Buffer.map_entries(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).map_entries(__int.valueOf(arg0)))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).clear())

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(__int.valueOf(arg0), arg1))

    @overload
    def red_mask(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Visual$Buffer org.lwjgl.system.linux.Visual$Buffer.red_mask(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).red_mask(__long.valueOf(arg0)))

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.Visual$Buffer(long,int)"""
        val = __Buffer(__long.valueOf(arg0), __int.valueOf(arg1))
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).slice())

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.Visual$Buffer(java.nio.ByteBuffer)"""
        val = __Buffer(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def bits_per_rgb(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Visual$Buffer org.lwjgl.system.linux.Visual$Buffer.bits_per_rgb(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).bits_per_rgb(__int.valueOf(arg0)))

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'.__wrap(super(pyglsystem.StructBuffer, self).get())

    @overload
    def green_mask(self) -> int:
        """public long org.lwjgl.system.linux.Visual$Buffer.green_mask()"""
        return int.__wrap(super(Buffer, self).green_mask())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).limit(__int.valueOf(arg0)))

    @overload
    def bits_per_rgb(self) -> int:
        """public int org.lwjgl.system.linux.Visual$Buffer.bits_per_rgb()"""
        return int.__wrap(super(Buffer, self).bits_per_rgb())

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'.__wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str.__wrap(super(pyglsystem.CustomBuffer, self).toString())

    @overload
    def red_mask(self) -> int:
        """public long org.lwjgl.system.linux.Visual$Buffer.red_mask()"""
        return int.__wrap(super(Buffer, self).red_mask())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def ext_data(self) -> int:
        """public long org.lwjgl.system.linux.Visual$Buffer.ext_data()"""
        return int.__wrap(super(Buffer, self).ext_data())

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(arg0))

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).stream())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @overload
    def green_mask(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Visual$Buffer org.lwjgl.system.linux.Visual$Buffer.green_mask(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).green_mask(__long.valueOf(arg0)))

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'.__wrap(super(pyglsystem.StructBuffer, self).iterator())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).slice(__int.valueOf(arg0), __int.valueOf(arg1))) 
 
 
# CLASS: org.lwjgl.system.linux.XCirculateEvent$Buffer
from pyquantum_helper import import_once as __import_once__
import java.lang.Boolean as __boolean
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import java.util.stream.Stream as __Stream
__Stream = __Stream
import org.lwjgl.system.StructBuffer as __StructBuffer
__StructBuffer = __StructBuffer
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.CustomBuffer as __CustomBuffer
__CustomBuffer = __CustomBuffer
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.util.Iterator as __Iterator
__Iterator = __Iterator
import java.lang.Object as __object
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.util.Iterator as Iterator
import java.util.Spliterator as __Spliterator
__Spliterator = __Spliterator
import java.lang.Long as __long
import org.lwjgl.system.linux.XCirculateEvent as __XCirculateEvent_Buffer
__Buffer = __XCirculateEvent_Buffer.Buffer
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import java.util.stream.Stream as Stream
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import int
 
class Buffer(pyglsystem.__StructBuffer, pyglsystem.StructBuffer, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XCirculateEvent.Buffer"""
 
    @staticmethod
    def __wrap(java_value: __Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XCirculateEvent$Buffer.send_event()"""
        return bool.__wrap(super(Buffer, self).send_event())

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCirculateEvent$Buffer org.lwjgl.system.linux.XCirculateEvent$Buffer.type(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).type(__int.valueOf(arg0)))

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(__pyglsystem.StructBuffer, self).forEach(arg0)

    @overload
    def event(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCirculateEvent$Buffer org.lwjgl.system.linux.XCirculateEvent$Buffer.event(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).event(__long.valueOf(arg0)))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0), arg1))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XCirculateEvent$Buffer.display()"""
        return int.__wrap(super(Buffer, self).display())

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int.__wrap(super(__pyglsystem.CustomBuffer, self).address(__int.valueOf(arg0)))

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(__int.valueOf(arg0), arg1))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int.__wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(arg0))

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XCirculateEvent$Buffer.type()"""
        return int.__wrap(super(Buffer, self).type())

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XCirculateEvent$Buffer(long,int)"""
        val = __Buffer(__long.valueOf(arg0), __int.valueOf(arg1))
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool.__wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XCirculateEvent$Buffer.serial()"""
        return int.__wrap(super(Buffer, self).serial())

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XCirculateEvent$Buffer org.lwjgl.system.linux.XCirculateEvent$Buffer.send_event(boolean)"""
        return 'Buffer'.__wrap(super(__Buffer, self).send_event(__boolean.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XCirculateEvent$Buffer(java.nio.ByteBuffer)"""
        val = __Buffer(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).position(__int.valueOf(arg0)))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0)))

    @overload
    def place(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCirculateEvent$Buffer org.lwjgl.system.linux.XCirculateEvent$Buffer.place(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).place(__int.valueOf(arg0)))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).clear())

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(__int.valueOf(arg0), arg1))

    @overload
    def place(self) -> int:
        """public int org.lwjgl.system.linux.XCirculateEvent$Buffer.place()"""
        return int.__wrap(super(Buffer, self).place())

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @overload
    def event(self) -> int:
        """public long org.lwjgl.system.linux.XCirculateEvent$Buffer.event()"""
        return int.__wrap(super(Buffer, self).event())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @overload
    def window(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCirculateEvent$Buffer org.lwjgl.system.linux.XCirculateEvent$Buffer.window(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).window(__long.valueOf(arg0)))

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).slice())

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCirculateEvent$Buffer org.lwjgl.system.linux.XCirculateEvent$Buffer.serial(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).serial(__long.valueOf(arg0)))

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XCirculateEvent$Buffer.window()"""
        return int.__wrap(super(Buffer, self).window())

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'.__wrap(super(pyglsystem.StructBuffer, self).get())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).limit(__int.valueOf(arg0)))

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCirculateEvent$Buffer org.lwjgl.system.linux.XCirculateEvent$Buffer.display(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).display(__long.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'.__wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str.__wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(arg0))

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).stream())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'.__wrap(super(pyglsystem.StructBuffer, self).iterator())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).slice(__int.valueOf(arg0), __int.valueOf(arg1))) 
 
 
# CLASS: org.lwjgl.system.linux.XErrorEvent
from pyquantum_helper import import_once as __import_once__
from builtins import str
from pyquantum_helper import override
import java.lang.Object as __object
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import org.lwjgl.system.linux.XErrorEvent as __XErrorEvent_Buffer
__Buffer = __XErrorEvent_Buffer.Buffer
import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.Byte as __byte
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import org.lwjgl.system.linux.XErrorEvent as __XErrorEvent
__XErrorEvent = __XErrorEvent
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
from builtins import int
 
class XErrorEvent(pyglsystem.__Struct, pyglsystem.Struct, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XErrorEvent"""
 
    @staticmethod
    def __wrap(java_value: __XErrorEvent) -> 'XErrorEvent':
        return XErrorEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __XErrorEvent):
        """
        Dynamic initializer for XErrorEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def display(self, arg0: int) -> 'XErrorEvent':
        """public org.lwjgl.system.linux.XErrorEvent org.lwjgl.system.linux.XErrorEvent.display(long)"""
        return 'XErrorEvent'.__wrap(super(__XErrorEvent, self).display(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XErrorEvent.ndisplay(long)"""
        return int.__wrap(__XErrorEvent.ndisplay(__long.valueOf(arg0)))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def nrequest_code(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XErrorEvent.nrequest_code(long,byte)"""
        __XErrorEvent.nrequest_code(__long.valueOf(arg0), __byte.valueOf(arg1))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XErrorEvent(java.nio.ByteBuffer)"""
        val = __XErrorEvent(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XErrorEvent':
        """public static org.lwjgl.system.linux.XErrorEvent org.lwjgl.system.linux.XErrorEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XErrorEvent.__wrap(__XErrorEvent.callocStack(arg0))

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XErrorEvent$Buffer org.lwjgl.system.linux.XErrorEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XErrorEvent.mallocStack(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XErrorEvent.nserial(long)"""
        return int.__wrap(__XErrorEvent.nserial(__long.valueOf(arg0)))

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool.__wrap(super(__pyglsystem.Struct, self).isNull(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc() -> 'XErrorEvent':
        """public static org.lwjgl.system.linux.XErrorEvent org.lwjgl.system.linux.XErrorEvent.malloc()"""
        return XErrorEvent.__wrap(__XErrorEvent.malloc())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XErrorEvent$Buffer org.lwjgl.system.linux.XErrorEvent.calloc(int)"""
        return Buffer.__wrap(__XErrorEvent.calloc(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XErrorEvent$Buffer org.lwjgl.system.linux.XErrorEvent.malloc(int)"""
        return Buffer.__wrap(__XErrorEvent.malloc(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XErrorEvent.ntype(long,int)"""
        __XErrorEvent.ntype(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XErrorEvent$Buffer org.lwjgl.system.linux.XErrorEvent.create(int)"""
        return Buffer.__wrap(__XErrorEvent.create(__int.valueOf(arg0)))

    @overload
    def set(self, arg0: 'XErrorEvent') -> 'XErrorEvent':
        """public org.lwjgl.system.linux.XErrorEvent org.lwjgl.system.linux.XErrorEvent.set(org.lwjgl.system.linux.XErrorEvent)"""
        return 'XErrorEvent'.__wrap(super(__XErrorEvent, self).set(arg0))

    @staticmethod
    @overload
    def create(arg0: int) -> 'XErrorEvent':
        """public static org.lwjgl.system.linux.XErrorEvent org.lwjgl.system.linux.XErrorEvent.create(long)"""
        return XErrorEvent.__wrap(__XErrorEvent.create(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XErrorEvent$Buffer org.lwjgl.system.linux.XErrorEvent.callocStack(int)"""
        return Buffer.__wrap(__XErrorEvent.callocStack(__int.valueOf(arg0)))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XErrorEvent$Buffer org.lwjgl.system.linux.XErrorEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XErrorEvent.malloc(__int.valueOf(arg0), arg1))

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XErrorEvent$Buffer org.lwjgl.system.linux.XErrorEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XErrorEvent.callocStack(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def nminor_code(arg0: int) -> int:
        """public static byte org.lwjgl.system.linux.XErrorEvent.nminor_code(long)"""
        return int.__wrap(__XErrorEvent.nminor_code(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nminor_code(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XErrorEvent.nminor_code(long,byte)"""
        __XErrorEvent.nminor_code(__long.valueOf(arg0), __byte.valueOf(arg1))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XErrorEvent':
        """public static org.lwjgl.system.linux.XErrorEvent org.lwjgl.system.linux.XErrorEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XErrorEvent.__wrap(__XErrorEvent.calloc(arg0))

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XErrorEvent$Buffer org.lwjgl.system.linux.XErrorEvent.mallocStack(int)"""
        return Buffer.__wrap(__XErrorEvent.mallocStack(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nrequest_code(arg0: int) -> int:
        """public static byte org.lwjgl.system.linux.XErrorEvent.nrequest_code(long)"""
        return int.__wrap(__XErrorEvent.nrequest_code(__long.valueOf(arg0)))

    @overload
    def minor_code(self, arg0: int) -> 'XErrorEvent':
        """public org.lwjgl.system.linux.XErrorEvent org.lwjgl.system.linux.XErrorEvent.minor_code(byte)"""
        return 'XErrorEvent'.__wrap(super(__XErrorEvent, self).minor_code(__byte.valueOf(arg0)))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XErrorEvent.type()"""
        return int.__wrap(super(XErrorEvent, self).type())

    @staticmethod
    @overload
    def create() -> 'XErrorEvent':
        """public static org.lwjgl.system.linux.XErrorEvent org.lwjgl.system.linux.XErrorEvent.create()"""
        return XErrorEvent.__wrap(__XErrorEvent.create())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XErrorEvent$Buffer org.lwjgl.system.linux.XErrorEvent.createSafe(long,int)"""
        return Buffer.__wrap(__XErrorEvent.createSafe(__long.valueOf(arg0), __int.valueOf(arg1)))

    @overload
    def set(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int) -> 'XErrorEvent':
        """public org.lwjgl.system.linux.XErrorEvent org.lwjgl.system.linux.XErrorEvent.set(int,long,long,long,byte,byte,byte)"""
        return 'XErrorEvent'.__wrap(super(__XErrorEvent, self).set(__int.valueOf(arg0), __long.valueOf(arg1), __long.valueOf(arg2), __long.valueOf(arg3), __byte.valueOf(arg4), __byte.valueOf(arg5), __byte.valueOf(arg6)))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XErrorEvent.serial()"""
        return int.__wrap(super(XErrorEvent, self).serial())

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XErrorEvent':
        """public static org.lwjgl.system.linux.XErrorEvent org.lwjgl.system.linux.XErrorEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XErrorEvent.__wrap(__XErrorEvent.malloc(arg0))

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XErrorEvent.nserial(long,long)"""
        __XErrorEvent.nserial(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def nresourceid(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XErrorEvent.nresourceid(long)"""
        return int.__wrap(__XErrorEvent.nresourceid(__long.valueOf(arg0)))

    @overload
    def minor_code(self) -> int:
        """public byte org.lwjgl.system.linux.XErrorEvent.minor_code()"""
        return int.__wrap(super(XErrorEvent, self).minor_code())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).address())

    @staticmethod
    @overload
    def calloc() -> 'XErrorEvent':
        """public static org.lwjgl.system.linux.XErrorEvent org.lwjgl.system.linux.XErrorEvent.calloc()"""
        return XErrorEvent.__wrap(__XErrorEvent.calloc())

    @overload
    def error_code(self) -> int:
        """public byte org.lwjgl.system.linux.XErrorEvent.error_code()"""
        return int.__wrap(super(XErrorEvent, self).error_code())

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XErrorEvent.display()"""
        return int.__wrap(super(XErrorEvent, self).display())

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XErrorEvent':
        """public static org.lwjgl.system.linux.XErrorEvent org.lwjgl.system.linux.XErrorEvent.createSafe(long)"""
        return XErrorEvent.__wrap(__XErrorEvent.createSafe(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XErrorEvent$Buffer org.lwjgl.system.linux.XErrorEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XErrorEvent.calloc(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XErrorEvent.ntype(long)"""
        return int.__wrap(__XErrorEvent.ntype(__long.valueOf(arg0)))

    @overload
    def type(self, arg0: int) -> 'XErrorEvent':
        """public org.lwjgl.system.linux.XErrorEvent org.lwjgl.system.linux.XErrorEvent.type(int)"""
        return 'XErrorEvent'.__wrap(super(__XErrorEvent, self).type(__int.valueOf(arg0)))

    @overload
    def request_code(self) -> int:
        """public byte org.lwjgl.system.linux.XErrorEvent.request_code()"""
        return int.__wrap(super(XErrorEvent, self).request_code())

    @staticmethod
    @overload
    def callocStack() -> 'XErrorEvent':
        """public static org.lwjgl.system.linux.XErrorEvent org.lwjgl.system.linux.XErrorEvent.callocStack()"""
        return XErrorEvent.__wrap(__XErrorEvent.callocStack())

    @overload
    def serial(self, arg0: int) -> 'XErrorEvent':
        """public org.lwjgl.system.linux.XErrorEvent org.lwjgl.system.linux.XErrorEvent.serial(long)"""
        return 'XErrorEvent'.__wrap(super(__XErrorEvent, self).serial(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XErrorEvent.validate(long)"""
        __XErrorEvent.validate(__long.valueOf(arg0))

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XErrorEvent':
        """public static org.lwjgl.system.linux.XErrorEvent org.lwjgl.system.linux.XErrorEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XErrorEvent.__wrap(__XErrorEvent.mallocStack(arg0))

    @overload
    def request_code(self, arg0: int) -> 'XErrorEvent':
        """public org.lwjgl.system.linux.XErrorEvent org.lwjgl.system.linux.XErrorEvent.request_code(byte)"""
        return 'XErrorEvent'.__wrap(super(__XErrorEvent, self).request_code(__byte.valueOf(arg0)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str.__wrap(super(pyglsystem.Pointer$Default, self).toString())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XErrorEvent.sizeof()"""
        return int.__wrap(super(XErrorEvent, self).sizeof())

    @overload
    def error_code(self, arg0: int) -> 'XErrorEvent':
        """public org.lwjgl.system.linux.XErrorEvent org.lwjgl.system.linux.XErrorEvent.error_code(byte)"""
        return 'XErrorEvent'.__wrap(super(__XErrorEvent, self).error_code(__byte.valueOf(arg0)))

    @staticmethod
    @overload
    def nerror_code(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XErrorEvent.nerror_code(long,byte)"""
        __XErrorEvent.nerror_code(__long.valueOf(arg0), __byte.valueOf(arg1))

    @overload
    def resourceid(self, arg0: int) -> 'XErrorEvent':
        """public org.lwjgl.system.linux.XErrorEvent org.lwjgl.system.linux.XErrorEvent.resourceid(long)"""
        return 'XErrorEvent'.__wrap(super(__XErrorEvent, self).resourceid(__long.valueOf(arg0)))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XErrorEvent.ndisplay(long,long)"""
        __XErrorEvent.ndisplay(__long.valueOf(arg0), __long.valueOf(arg1))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @staticmethod
    @overload
    def mallocStack() -> 'XErrorEvent':
        """public static org.lwjgl.system.linux.XErrorEvent org.lwjgl.system.linux.XErrorEvent.mallocStack()"""
        return XErrorEvent.__wrap(__XErrorEvent.mallocStack())

    @staticmethod
    @overload
    def nresourceid(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XErrorEvent.nresourceid(long,long)"""
        __XErrorEvent.nresourceid(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        __Struct.validate(__long.valueOf(arg0), __int.valueOf(arg1), __int.valueOf(arg2), arg3)

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XErrorEvent$Buffer org.lwjgl.system.linux.XErrorEvent.create(long,int)"""
        return Buffer.__wrap(__XErrorEvent.create(__long.valueOf(arg0), __int.valueOf(arg1)))

    @overload
    def resourceid(self) -> int:
        """public long org.lwjgl.system.linux.XErrorEvent.resourceid()"""
        return int.__wrap(super(XErrorEvent, self).resourceid())

    @staticmethod
    @overload
    def nerror_code(arg0: int) -> int:
        """public static byte org.lwjgl.system.linux.XErrorEvent.nerror_code(long)"""
        return int.__wrap(__XErrorEvent.nerror_code(__long.valueOf(arg0))) 
 
 
# CLASS: org.lwjgl.system.linux.XSetWindowAttributes
from pyquantum_helper import import_once as __import_once__
from builtins import str
import java.lang.Boolean as __boolean
from pyquantum_helper import override
import java.lang.Object as __object
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import org.lwjgl.system.linux.XSetWindowAttributes as __XSetWindowAttributes
__XSetWindowAttributes = __XSetWindowAttributes
import java.lang.Long as __long
import org.lwjgl.system.linux.XSetWindowAttributes as __XSetWindowAttributes_Buffer
__Buffer = __XSetWindowAttributes_Buffer.Buffer
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
from builtins import int
 
class XSetWindowAttributes(pyglsystem.__Struct, pyglsystem.Struct, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XSetWindowAttributes"""
 
    @staticmethod
    def __wrap(java_value: __XSetWindowAttributes) -> 'XSetWindowAttributes':
        return XSetWindowAttributes(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __XSetWindowAttributes):
        """
        Dynamic initializer for XSetWindowAttributes.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def bit_gravity(self) -> int:
        """public int org.lwjgl.system.linux.XSetWindowAttributes.bit_gravity()"""
        return int.__wrap(super(XSetWindowAttributes, self).bit_gravity())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def nbit_gravity(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XSetWindowAttributes.nbit_gravity(long)"""
        return int.__wrap(__XSetWindowAttributes.nbit_gravity(__long.valueOf(arg0)))

    @overload
    def cursor(self) -> int:
        """public long org.lwjgl.system.linux.XSetWindowAttributes.cursor()"""
        return int.__wrap(super(XSetWindowAttributes, self).cursor())

    @overload
    def set(self, arg0: 'XSetWindowAttributes') -> 'XSetWindowAttributes':
        """public org.lwjgl.system.linux.XSetWindowAttributes org.lwjgl.system.linux.XSetWindowAttributes.set(org.lwjgl.system.linux.XSetWindowAttributes)"""
        return 'XSetWindowAttributes'.__wrap(super(__XSetWindowAttributes, self).set(arg0))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XSetWindowAttributes.sizeof()"""
        return int.__wrap(super(XSetWindowAttributes, self).sizeof())

    @staticmethod
    @overload
    def nbacking_store(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSetWindowAttributes.nbacking_store(long,int)"""
        __XSetWindowAttributes.nbacking_store(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def border_pixel(self, arg0: int) -> 'XSetWindowAttributes':
        """public org.lwjgl.system.linux.XSetWindowAttributes org.lwjgl.system.linux.XSetWindowAttributes.border_pixel(long)"""
        return 'XSetWindowAttributes'.__wrap(super(__XSetWindowAttributes, self).border_pixel(__long.valueOf(arg0)))

    @overload
    def override_redirect(self) -> bool:
        """public boolean org.lwjgl.system.linux.XSetWindowAttributes.override_redirect()"""
        return bool.__wrap(super(XSetWindowAttributes, self).override_redirect())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def border_pixmap(self) -> int:
        """public long org.lwjgl.system.linux.XSetWindowAttributes.border_pixmap()"""
        return int.__wrap(super(XSetWindowAttributes, self).border_pixmap())

    @overload
    def backing_store(self) -> int:
        """public int org.lwjgl.system.linux.XSetWindowAttributes.backing_store()"""
        return int.__wrap(super(XSetWindowAttributes, self).backing_store())

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XSetWindowAttributes':
        """public static org.lwjgl.system.linux.XSetWindowAttributes org.lwjgl.system.linux.XSetWindowAttributes.callocStack(org.lwjgl.system.MemoryStack)"""
        return XSetWindowAttributes.__wrap(__XSetWindowAttributes.callocStack(arg0))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XSetWindowAttributes$Buffer org.lwjgl.system.linux.XSetWindowAttributes.create(long,int)"""
        return Buffer.__wrap(__XSetWindowAttributes.create(__long.valueOf(arg0), __int.valueOf(arg1)))

    @overload
    def backing_pixel(self) -> int:
        """public long org.lwjgl.system.linux.XSetWindowAttributes.backing_pixel()"""
        return int.__wrap(super(XSetWindowAttributes, self).backing_pixel())

    @overload
    def background_pixmap(self) -> int:
        """public long org.lwjgl.system.linux.XSetWindowAttributes.background_pixmap()"""
        return int.__wrap(super(XSetWindowAttributes, self).background_pixmap())

    @overload
    def backing_pixel(self, arg0: int) -> 'XSetWindowAttributes':
        """public org.lwjgl.system.linux.XSetWindowAttributes org.lwjgl.system.linux.XSetWindowAttributes.backing_pixel(long)"""
        return 'XSetWindowAttributes'.__wrap(super(__XSetWindowAttributes, self).backing_pixel(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XSetWindowAttributes$Buffer org.lwjgl.system.linux.XSetWindowAttributes.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XSetWindowAttributes.calloc(__int.valueOf(arg0), arg1))

    @overload
    def win_gravity(self, arg0: int) -> 'XSetWindowAttributes':
        """public org.lwjgl.system.linux.XSetWindowAttributes org.lwjgl.system.linux.XSetWindowAttributes.win_gravity(int)"""
        return 'XSetWindowAttributes'.__wrap(super(__XSetWindowAttributes, self).win_gravity(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def ncolormap(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSetWindowAttributes.ncolormap(long,long)"""
        __XSetWindowAttributes.ncolormap(__long.valueOf(arg0), __long.valueOf(arg1))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def border_pixmap(self, arg0: int) -> 'XSetWindowAttributes':
        """public org.lwjgl.system.linux.XSetWindowAttributes org.lwjgl.system.linux.XSetWindowAttributes.border_pixmap(long)"""
        return 'XSetWindowAttributes'.__wrap(super(__XSetWindowAttributes, self).border_pixmap(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nbacking_store(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XSetWindowAttributes.nbacking_store(long)"""
        return int.__wrap(__XSetWindowAttributes.nbacking_store(__long.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def noverride_redirect(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XSetWindowAttributes.noverride_redirect(long)"""
        return int.__wrap(__XSetWindowAttributes.noverride_redirect(__long.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XSetWindowAttributes':
        """public static org.lwjgl.system.linux.XSetWindowAttributes org.lwjgl.system.linux.XSetWindowAttributes.createSafe(long)"""
        return XSetWindowAttributes.__wrap(__XSetWindowAttributes.createSafe(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def ncolormap(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XSetWindowAttributes.ncolormap(long)"""
        return int.__wrap(__XSetWindowAttributes.ncolormap(__long.valueOf(arg0)))

    @overload
    def backing_store(self, arg0: int) -> 'XSetWindowAttributes':
        """public org.lwjgl.system.linux.XSetWindowAttributes org.lwjgl.system.linux.XSetWindowAttributes.backing_store(int)"""
        return 'XSetWindowAttributes'.__wrap(super(__XSetWindowAttributes, self).backing_store(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XSetWindowAttributes$Buffer org.lwjgl.system.linux.XSetWindowAttributes.malloc(int)"""
        return Buffer.__wrap(__XSetWindowAttributes.malloc(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XSetWindowAttributes$Buffer org.lwjgl.system.linux.XSetWindowAttributes.calloc(int)"""
        return Buffer.__wrap(__XSetWindowAttributes.calloc(__int.valueOf(arg0)))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).address())

    @staticmethod
    @overload
    def nbacking_planes(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSetWindowAttributes.nbacking_planes(long,long)"""
        __XSetWindowAttributes.nbacking_planes(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XSetWindowAttributes':
        """public static org.lwjgl.system.linux.XSetWindowAttributes org.lwjgl.system.linux.XSetWindowAttributes.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XSetWindowAttributes.__wrap(__XSetWindowAttributes.mallocStack(arg0))

    @overload
    def bit_gravity(self, arg0: int) -> 'XSetWindowAttributes':
        """public org.lwjgl.system.linux.XSetWindowAttributes org.lwjgl.system.linux.XSetWindowAttributes.bit_gravity(int)"""
        return 'XSetWindowAttributes'.__wrap(super(__XSetWindowAttributes, self).bit_gravity(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nbit_gravity(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSetWindowAttributes.nbit_gravity(long,int)"""
        __XSetWindowAttributes.nbit_gravity(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def nbacking_planes(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XSetWindowAttributes.nbacking_planes(long)"""
        return int.__wrap(__XSetWindowAttributes.nbacking_planes(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nwin_gravity(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XSetWindowAttributes.nwin_gravity(long)"""
        return int.__wrap(__XSetWindowAttributes.nwin_gravity(__long.valueOf(arg0)))

    @overload
    def win_gravity(self) -> int:
        """public int org.lwjgl.system.linux.XSetWindowAttributes.win_gravity()"""
        return int.__wrap(super(XSetWindowAttributes, self).win_gravity())

    @staticmethod
    @overload
    def nborder_pixel(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSetWindowAttributes.nborder_pixel(long,long)"""
        __XSetWindowAttributes.nborder_pixel(__long.valueOf(arg0), __long.valueOf(arg1))

    @overload
    def event_mask(self) -> int:
        """public long org.lwjgl.system.linux.XSetWindowAttributes.event_mask()"""
        return int.__wrap(super(XSetWindowAttributes, self).event_mask())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XSetWindowAttributes(java.nio.ByteBuffer)"""
        val = __XSetWindowAttributes(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XSetWindowAttributes$Buffer org.lwjgl.system.linux.XSetWindowAttributes.mallocStack(int)"""
        return Buffer.__wrap(__XSetWindowAttributes.mallocStack(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XSetWindowAttributes$Buffer org.lwjgl.system.linux.XSetWindowAttributes.create(int)"""
        return Buffer.__wrap(__XSetWindowAttributes.create(__int.valueOf(arg0)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str.__wrap(super(pyglsystem.Pointer$Default, self).toString())

    @overload
    def backing_planes(self) -> int:
        """public long org.lwjgl.system.linux.XSetWindowAttributes.backing_planes()"""
        return int.__wrap(super(XSetWindowAttributes, self).backing_planes())

    @overload
    def save_under(self, arg0: bool) -> 'XSetWindowAttributes':
        """public org.lwjgl.system.linux.XSetWindowAttributes org.lwjgl.system.linux.XSetWindowAttributes.save_under(boolean)"""
        return 'XSetWindowAttributes'.__wrap(super(__XSetWindowAttributes, self).save_under(__boolean.valueOf(arg0)))

    @overload
    def event_mask(self, arg0: int) -> 'XSetWindowAttributes':
        """public org.lwjgl.system.linux.XSetWindowAttributes org.lwjgl.system.linux.XSetWindowAttributes.event_mask(long)"""
        return 'XSetWindowAttributes'.__wrap(super(__XSetWindowAttributes, self).event_mask(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XSetWindowAttributes':
        """public static org.lwjgl.system.linux.XSetWindowAttributes org.lwjgl.system.linux.XSetWindowAttributes.calloc(org.lwjgl.system.MemoryStack)"""
        return XSetWindowAttributes.__wrap(__XSetWindowAttributes.calloc(arg0))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @staticmethod
    @overload
    def nborder_pixel(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XSetWindowAttributes.nborder_pixel(long)"""
        return int.__wrap(__XSetWindowAttributes.nborder_pixel(__long.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @staticmethod
    @overload
    def nbacking_pixel(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSetWindowAttributes.nbacking_pixel(long,long)"""
        __XSetWindowAttributes.nbacking_pixel(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def mallocStack() -> 'XSetWindowAttributes':
        """public static org.lwjgl.system.linux.XSetWindowAttributes org.lwjgl.system.linux.XSetWindowAttributes.mallocStack()"""
        return XSetWindowAttributes.__wrap(__XSetWindowAttributes.mallocStack())

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        __Struct.validate(__long.valueOf(arg0), __int.valueOf(arg1), __int.valueOf(arg2), arg3)

    @staticmethod
    @overload
    def calloc() -> 'XSetWindowAttributes':
        """public static org.lwjgl.system.linux.XSetWindowAttributes org.lwjgl.system.linux.XSetWindowAttributes.calloc()"""
        return XSetWindowAttributes.__wrap(__XSetWindowAttributes.calloc())

    @overload
    def background_pixmap(self, arg0: int) -> 'XSetWindowAttributes':
        """public org.lwjgl.system.linux.XSetWindowAttributes org.lwjgl.system.linux.XSetWindowAttributes.background_pixmap(long)"""
        return 'XSetWindowAttributes'.__wrap(super(__XSetWindowAttributes, self).background_pixmap(__long.valueOf(arg0)))

    @overload
    def colormap(self) -> int:
        """public long org.lwjgl.system.linux.XSetWindowAttributes.colormap()"""
        return int.__wrap(super(XSetWindowAttributes, self).colormap())

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XSetWindowAttributes$Buffer org.lwjgl.system.linux.XSetWindowAttributes.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XSetWindowAttributes.mallocStack(__int.valueOf(arg0), arg1))

    @overload
    def border_pixel(self) -> int:
        """public long org.lwjgl.system.linux.XSetWindowAttributes.border_pixel()"""
        return int.__wrap(super(XSetWindowAttributes, self).border_pixel())

    @overload
    def backing_planes(self, arg0: int) -> 'XSetWindowAttributes':
        """public org.lwjgl.system.linux.XSetWindowAttributes org.lwjgl.system.linux.XSetWindowAttributes.backing_planes(long)"""
        return 'XSetWindowAttributes'.__wrap(super(__XSetWindowAttributes, self).backing_planes(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def ndo_not_propagate_mask(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XSetWindowAttributes.ndo_not_propagate_mask(long)"""
        return int.__wrap(__XSetWindowAttributes.ndo_not_propagate_mask(__long.valueOf(arg0)))

    @overload
    def do_not_propagate_mask(self) -> int:
        """public long org.lwjgl.system.linux.XSetWindowAttributes.do_not_propagate_mask()"""
        return int.__wrap(super(XSetWindowAttributes, self).do_not_propagate_mask())

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool.__wrap(super(__pyglsystem.Struct, self).isNull(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nbackground_pixmap(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSetWindowAttributes.nbackground_pixmap(long,long)"""
        __XSetWindowAttributes.nbackground_pixmap(__long.valueOf(arg0), __long.valueOf(arg1))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def ndo_not_propagate_mask(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSetWindowAttributes.ndo_not_propagate_mask(long,long)"""
        __XSetWindowAttributes.ndo_not_propagate_mask(__long.valueOf(arg0), __long.valueOf(arg1))

    @overload
    def save_under(self) -> bool:
        """public boolean org.lwjgl.system.linux.XSetWindowAttributes.save_under()"""
        return bool.__wrap(super(XSetWindowAttributes, self).save_under())

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XSetWindowAttributes$Buffer org.lwjgl.system.linux.XSetWindowAttributes.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XSetWindowAttributes.malloc(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def nborder_pixmap(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XSetWindowAttributes.nborder_pixmap(long)"""
        return int.__wrap(__XSetWindowAttributes.nborder_pixmap(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XSetWindowAttributes$Buffer org.lwjgl.system.linux.XSetWindowAttributes.callocStack(int)"""
        return Buffer.__wrap(__XSetWindowAttributes.callocStack(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def create() -> 'XSetWindowAttributes':
        """public static org.lwjgl.system.linux.XSetWindowAttributes org.lwjgl.system.linux.XSetWindowAttributes.create()"""
        return XSetWindowAttributes.__wrap(__XSetWindowAttributes.create())

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XSetWindowAttributes':
        """public static org.lwjgl.system.linux.XSetWindowAttributes org.lwjgl.system.linux.XSetWindowAttributes.malloc(org.lwjgl.system.MemoryStack)"""
        return XSetWindowAttributes.__wrap(__XSetWindowAttributes.malloc(arg0))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @overload
    def background_pixel(self) -> int:
        """public long org.lwjgl.system.linux.XSetWindowAttributes.background_pixel()"""
        return int.__wrap(super(XSetWindowAttributes, self).background_pixel())

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @overload
    def set(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: bool, arg10: int, arg11: int, arg12: bool, arg13: int, arg14: int) -> 'XSetWindowAttributes':
        """public org.lwjgl.system.linux.XSetWindowAttributes org.lwjgl.system.linux.XSetWindowAttributes.set(long,long,long,long,int,int,int,long,long,boolean,long,long,boolean,long,long)"""
        return 'XSetWindowAttributes'.__wrap(super(__XSetWindowAttributes, self).set(__long.valueOf(arg0), __long.valueOf(arg1), __long.valueOf(arg2), __long.valueOf(arg3), __int.valueOf(arg4), __int.valueOf(arg5), __int.valueOf(arg6), __long.valueOf(arg7), __long.valueOf(arg8), __boolean.valueOf(arg9), __long.valueOf(arg10), __long.valueOf(arg11), __boolean.valueOf(arg12), __long.valueOf(arg13), __long.valueOf(arg14)))

    @overload
    def do_not_propagate_mask(self, arg0: int) -> 'XSetWindowAttributes':
        """public org.lwjgl.system.linux.XSetWindowAttributes org.lwjgl.system.linux.XSetWindowAttributes.do_not_propagate_mask(long)"""
        return 'XSetWindowAttributes'.__wrap(super(__XSetWindowAttributes, self).do_not_propagate_mask(__long.valueOf(arg0)))

    @overload
    def colormap(self, arg0: int) -> 'XSetWindowAttributes':
        """public org.lwjgl.system.linux.XSetWindowAttributes org.lwjgl.system.linux.XSetWindowAttributes.colormap(long)"""
        return 'XSetWindowAttributes'.__wrap(super(__XSetWindowAttributes, self).colormap(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack() -> 'XSetWindowAttributes':
        """public static org.lwjgl.system.linux.XSetWindowAttributes org.lwjgl.system.linux.XSetWindowAttributes.callocStack()"""
        return XSetWindowAttributes.__wrap(__XSetWindowAttributes.callocStack())

    @staticmethod
    @overload
    def nsave_under(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XSetWindowAttributes.nsave_under(long)"""
        return int.__wrap(__XSetWindowAttributes.nsave_under(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nbackground_pixmap(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XSetWindowAttributes.nbackground_pixmap(long)"""
        return int.__wrap(__XSetWindowAttributes.nbackground_pixmap(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def ncursor(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSetWindowAttributes.ncursor(long,long)"""
        __XSetWindowAttributes.ncursor(__long.valueOf(arg0), __long.valueOf(arg1))

    @overload
    def override_redirect(self, arg0: bool) -> 'XSetWindowAttributes':
        """public org.lwjgl.system.linux.XSetWindowAttributes org.lwjgl.system.linux.XSetWindowAttributes.override_redirect(boolean)"""
        return 'XSetWindowAttributes'.__wrap(super(__XSetWindowAttributes, self).override_redirect(__boolean.valueOf(arg0)))

    @staticmethod
    @overload
    def nevent_mask(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSetWindowAttributes.nevent_mask(long,long)"""
        __XSetWindowAttributes.nevent_mask(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def nborder_pixmap(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSetWindowAttributes.nborder_pixmap(long,long)"""
        __XSetWindowAttributes.nborder_pixmap(__long.valueOf(arg0), __long.valueOf(arg1))

    @overload
    def background_pixel(self, arg0: int) -> 'XSetWindowAttributes':
        """public org.lwjgl.system.linux.XSetWindowAttributes org.lwjgl.system.linux.XSetWindowAttributes.background_pixel(long)"""
        return 'XSetWindowAttributes'.__wrap(super(__XSetWindowAttributes, self).background_pixel(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nbacking_pixel(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XSetWindowAttributes.nbacking_pixel(long)"""
        return int.__wrap(__XSetWindowAttributes.nbacking_pixel(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nbackground_pixel(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XSetWindowAttributes.nbackground_pixel(long)"""
        return int.__wrap(__XSetWindowAttributes.nbackground_pixel(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def noverride_redirect(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSetWindowAttributes.noverride_redirect(long,int)"""
        __XSetWindowAttributes.noverride_redirect(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def create(arg0: int) -> 'XSetWindowAttributes':
        """public static org.lwjgl.system.linux.XSetWindowAttributes org.lwjgl.system.linux.XSetWindowAttributes.create(long)"""
        return XSetWindowAttributes.__wrap(__XSetWindowAttributes.create(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nbackground_pixel(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSetWindowAttributes.nbackground_pixel(long,long)"""
        __XSetWindowAttributes.nbackground_pixel(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def nwin_gravity(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSetWindowAttributes.nwin_gravity(long,int)"""
        __XSetWindowAttributes.nwin_gravity(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def cursor(self, arg0: int) -> 'XSetWindowAttributes':
        """public org.lwjgl.system.linux.XSetWindowAttributes org.lwjgl.system.linux.XSetWindowAttributes.cursor(long)"""
        return 'XSetWindowAttributes'.__wrap(super(__XSetWindowAttributes, self).cursor(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XSetWindowAttributes$Buffer org.lwjgl.system.linux.XSetWindowAttributes.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XSetWindowAttributes.callocStack(__int.valueOf(arg0), arg1))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @staticmethod
    @overload
    def malloc() -> 'XSetWindowAttributes':
        """public static org.lwjgl.system.linux.XSetWindowAttributes org.lwjgl.system.linux.XSetWindowAttributes.malloc()"""
        return XSetWindowAttributes.__wrap(__XSetWindowAttributes.malloc())

    @staticmethod
    @overload
    def nsave_under(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSetWindowAttributes.nsave_under(long,int)"""
        __XSetWindowAttributes.nsave_under(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def ncursor(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XSetWindowAttributes.ncursor(long)"""
        return int.__wrap(__XSetWindowAttributes.ncursor(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nevent_mask(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XSetWindowAttributes.nevent_mask(long)"""
        return int.__wrap(__XSetWindowAttributes.nevent_mask(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XSetWindowAttributes$Buffer org.lwjgl.system.linux.XSetWindowAttributes.createSafe(long,int)"""
        return Buffer.__wrap(__XSetWindowAttributes.createSafe(__long.valueOf(arg0), __int.valueOf(arg1))) 
 
 
# CLASS: org.lwjgl.system.linux.XCreateWindowEvent$Buffer
from pyquantum_helper import import_once as __import_once__
import java.lang.Boolean as __boolean
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import java.util.stream.Stream as __Stream
__Stream = __Stream
import org.lwjgl.system.StructBuffer as __StructBuffer
__StructBuffer = __StructBuffer
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.CustomBuffer as __CustomBuffer
__CustomBuffer = __CustomBuffer
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.util.Iterator as __Iterator
__Iterator = __Iterator
import java.lang.Object as __object
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.util.Iterator as Iterator
import java.util.Spliterator as __Spliterator
__Spliterator = __Spliterator
import java.lang.Long as __long
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import org.lwjgl.system.linux.XCreateWindowEvent as __XCreateWindowEvent_Buffer
__Buffer = __XCreateWindowEvent_Buffer.Buffer
import java.lang.Object as __Object
__Object = __Object
import java.util.stream.Stream as Stream
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import int
 
class Buffer(pyglsystem.__StructBuffer, pyglsystem.StructBuffer, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XCreateWindowEvent.Buffer"""
 
    @staticmethod
    def __wrap(java_value: __Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def width(self) -> int:
        """public int org.lwjgl.system.linux.XCreateWindowEvent$Buffer.width()"""
        return int.__wrap(super(Buffer, self).width())

    @overload
    def override_redirect(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCreateWindowEvent$Buffer org.lwjgl.system.linux.XCreateWindowEvent$Buffer.override_redirect(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).override_redirect(__int.valueOf(arg0)))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XCreateWindowEvent$Buffer(java.nio.ByteBuffer)"""
        val = __Buffer(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(arg0))

    @overload
    def parent(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCreateWindowEvent$Buffer org.lwjgl.system.linux.XCreateWindowEvent$Buffer.parent(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).parent(__long.valueOf(arg0)))

    @overload
    def border_width(self) -> int:
        """public int org.lwjgl.system.linux.XCreateWindowEvent$Buffer.border_width()"""
        return int.__wrap(super(Buffer, self).border_width())

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(__pyglsystem.StructBuffer, self).forEach(arg0)

    @overload
    def y(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCreateWindowEvent$Buffer org.lwjgl.system.linux.XCreateWindowEvent$Buffer.y(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).y(__int.valueOf(arg0)))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def border_width(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCreateWindowEvent$Buffer org.lwjgl.system.linux.XCreateWindowEvent$Buffer.border_width(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).border_width(__int.valueOf(arg0)))

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0), arg1))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int.__wrap(super(__pyglsystem.CustomBuffer, self).address(__int.valueOf(arg0)))

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XCreateWindowEvent$Buffer(long,int)"""
        val = __Buffer(__long.valueOf(arg0), __int.valueOf(arg1))
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(__int.valueOf(arg0), arg1))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int.__wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(arg0))

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def height(self) -> int:
        """public int org.lwjgl.system.linux.XCreateWindowEvent$Buffer.height()"""
        return int.__wrap(super(Buffer, self).height())

    @overload
    def window(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCreateWindowEvent$Buffer org.lwjgl.system.linux.XCreateWindowEvent$Buffer.window(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).window(__long.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool.__wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCreateWindowEvent$Buffer org.lwjgl.system.linux.XCreateWindowEvent$Buffer.serial(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).serial(__long.valueOf(arg0)))

    @overload
    def height(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCreateWindowEvent$Buffer org.lwjgl.system.linux.XCreateWindowEvent$Buffer.height(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).height(__int.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XCreateWindowEvent$Buffer.type()"""
        return int.__wrap(super(Buffer, self).type())

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).position(__int.valueOf(arg0)))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0)))

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCreateWindowEvent$Buffer org.lwjgl.system.linux.XCreateWindowEvent$Buffer.display(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).display(__long.valueOf(arg0)))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).clear())

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XCreateWindowEvent$Buffer.send_event()"""
        return bool.__wrap(super(Buffer, self).send_event())

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(__int.valueOf(arg0), arg1))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XCreateWindowEvent$Buffer.serial()"""
        return int.__wrap(super(Buffer, self).serial())

    @overload
    def x(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCreateWindowEvent$Buffer org.lwjgl.system.linux.XCreateWindowEvent$Buffer.x(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).x(__int.valueOf(arg0)))

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XCreateWindowEvent$Buffer org.lwjgl.system.linux.XCreateWindowEvent$Buffer.send_event(boolean)"""
        return 'Buffer'.__wrap(super(__Buffer, self).send_event(__boolean.valueOf(arg0)))

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address())

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XCreateWindowEvent$Buffer.display()"""
        return int.__wrap(super(Buffer, self).display())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @overload
    def override_redirect(self) -> int:
        """public int org.lwjgl.system.linux.XCreateWindowEvent$Buffer.override_redirect()"""
        return int.__wrap(super(Buffer, self).override_redirect())

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).slice())

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def y(self) -> int:
        """public int org.lwjgl.system.linux.XCreateWindowEvent$Buffer.y()"""
        return int.__wrap(super(Buffer, self).y())

    @overload
    def width(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCreateWindowEvent$Buffer org.lwjgl.system.linux.XCreateWindowEvent$Buffer.width(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).width(__int.valueOf(arg0)))

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'.__wrap(super(pyglsystem.StructBuffer, self).get())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).limit(__int.valueOf(arg0)))

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XCreateWindowEvent$Buffer.window()"""
        return int.__wrap(super(Buffer, self).window())

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'.__wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str.__wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def parent(self) -> int:
        """public long org.lwjgl.system.linux.XCreateWindowEvent$Buffer.parent()"""
        return int.__wrap(super(Buffer, self).parent())

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(arg0))

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).stream())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'.__wrap(super(pyglsystem.StructBuffer, self).iterator())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCreateWindowEvent$Buffer org.lwjgl.system.linux.XCreateWindowEvent$Buffer.type(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).type(__int.valueOf(arg0)))

    @overload
    def x(self) -> int:
        """public int org.lwjgl.system.linux.XCreateWindowEvent$Buffer.x()"""
        return int.__wrap(super(Buffer, self).x())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).slice(__int.valueOf(arg0), __int.valueOf(arg1))) 
 
 
# CLASS: org.lwjgl.system.linux.XGravityEvent
from pyquantum_helper import import_once as __import_once__
from builtins import str
import java.lang.Boolean as __boolean
from pyquantum_helper import override
import java.lang.Object as __object
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import org.lwjgl.system.linux.XGravityEvent as __XGravityEvent
__XGravityEvent = __XGravityEvent
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
import org.lwjgl.system.linux.XGravityEvent as __XGravityEvent_Buffer
__Buffer = __XGravityEvent_Buffer.Buffer
from builtins import bool
from builtins import int
 
class XGravityEvent(pyglsystem.__Struct, pyglsystem.Struct, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XGravityEvent"""
 
    @staticmethod
    def __wrap(java_value: __XGravityEvent) -> 'XGravityEvent':
        return XGravityEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __XGravityEvent):
        """
        Dynamic initializer for XGravityEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def y(self, arg0: int) -> 'XGravityEvent':
        """public org.lwjgl.system.linux.XGravityEvent org.lwjgl.system.linux.XGravityEvent.y(int)"""
        return 'XGravityEvent'.__wrap(super(__XGravityEvent, self).y(__int.valueOf(arg0)))

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XGravityEvent.window()"""
        return int.__wrap(super(XGravityEvent, self).window())

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XGravityEvent$Buffer org.lwjgl.system.linux.XGravityEvent.calloc(int)"""
        return Buffer.__wrap(__XGravityEvent.calloc(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nx(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGravityEvent.nx(long,int)"""
        __XGravityEvent.nx(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def nx(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XGravityEvent.nx(long)"""
        return int.__wrap(__XGravityEvent.nx(__long.valueOf(arg0)))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XGravityEvent.sizeof()"""
        return int.__wrap(super(XGravityEvent, self).sizeof())

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGravityEvent.ntype(long,int)"""
        __XGravityEvent.ntype(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool.__wrap(super(__pyglsystem.Struct, self).isNull(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nwindow(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGravityEvent.nwindow(long,long)"""
        __XGravityEvent.nwindow(__long.valueOf(arg0), __long.valueOf(arg1))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XGravityEvent.send_event()"""
        return bool.__wrap(super(XGravityEvent, self).send_event())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XGravityEvent$Buffer org.lwjgl.system.linux.XGravityEvent.create(long,int)"""
        return Buffer.__wrap(__XGravityEvent.create(__long.valueOf(arg0), __int.valueOf(arg1)))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XGravityEvent(java.nio.ByteBuffer)"""
        val = __XGravityEvent(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def send_event(self, arg0: bool) -> 'XGravityEvent':
        """public org.lwjgl.system.linux.XGravityEvent org.lwjgl.system.linux.XGravityEvent.send_event(boolean)"""
        return 'XGravityEvent'.__wrap(super(__XGravityEvent, self).send_event(__boolean.valueOf(arg0)))

    @overload
    def event(self, arg0: int) -> 'XGravityEvent':
        """public org.lwjgl.system.linux.XGravityEvent org.lwjgl.system.linux.XGravityEvent.event(long)"""
        return 'XGravityEvent'.__wrap(super(__XGravityEvent, self).event(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGravityEvent.ndisplay(long,long)"""
        __XGravityEvent.ndisplay(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def create() -> 'XGravityEvent':
        """public static org.lwjgl.system.linux.XGravityEvent org.lwjgl.system.linux.XGravityEvent.create()"""
        return XGravityEvent.__wrap(__XGravityEvent.create())

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XGravityEvent$Buffer org.lwjgl.system.linux.XGravityEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XGravityEvent.calloc(__int.valueOf(arg0), arg1))

    @overload
    def set(self, arg0: 'XGravityEvent') -> 'XGravityEvent':
        """public org.lwjgl.system.linux.XGravityEvent org.lwjgl.system.linux.XGravityEvent.set(org.lwjgl.system.linux.XGravityEvent)"""
        return 'XGravityEvent'.__wrap(super(__XGravityEvent, self).set(arg0))

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XGravityEvent$Buffer org.lwjgl.system.linux.XGravityEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XGravityEvent.callocStack(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XGravityEvent.validate(long)"""
        __XGravityEvent.validate(__long.valueOf(arg0))

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XGravityEvent$Buffer org.lwjgl.system.linux.XGravityEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XGravityEvent.mallocStack(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def callocStack() -> 'XGravityEvent':
        """public static org.lwjgl.system.linux.XGravityEvent org.lwjgl.system.linux.XGravityEvent.callocStack()"""
        return XGravityEvent.__wrap(__XGravityEvent.callocStack())

    @staticmethod
    @overload
    def mallocStack() -> 'XGravityEvent':
        """public static org.lwjgl.system.linux.XGravityEvent org.lwjgl.system.linux.XGravityEvent.mallocStack()"""
        return XGravityEvent.__wrap(__XGravityEvent.mallocStack())

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XGravityEvent.nserial(long)"""
        return int.__wrap(__XGravityEvent.nserial(__long.valueOf(arg0)))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def event(self) -> int:
        """public long org.lwjgl.system.linux.XGravityEvent.event()"""
        return int.__wrap(super(XGravityEvent, self).event())

    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XGravityEvent.nsend_event(long)"""
        return int.__wrap(__XGravityEvent.nsend_event(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XGravityEvent':
        """public static org.lwjgl.system.linux.XGravityEvent org.lwjgl.system.linux.XGravityEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XGravityEvent.__wrap(__XGravityEvent.malloc(arg0))

    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGravityEvent.nsend_event(long,int)"""
        __XGravityEvent.nsend_event(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def y(self) -> int:
        """public int org.lwjgl.system.linux.XGravityEvent.y()"""
        return int.__wrap(super(XGravityEvent, self).y())

    @staticmethod
    @overload
    def malloc() -> 'XGravityEvent':
        """public static org.lwjgl.system.linux.XGravityEvent org.lwjgl.system.linux.XGravityEvent.malloc()"""
        return XGravityEvent.__wrap(__XGravityEvent.malloc())

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XGravityEvent$Buffer org.lwjgl.system.linux.XGravityEvent.createSafe(long,int)"""
        return Buffer.__wrap(__XGravityEvent.createSafe(__long.valueOf(arg0), __int.valueOf(arg1)))

    @staticmethod
    @overload
    def ny(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGravityEvent.ny(long,int)"""
        __XGravityEvent.ny(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XGravityEvent.serial()"""
        return int.__wrap(super(XGravityEvent, self).serial())

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XGravityEvent.ntype(long)"""
        return int.__wrap(__XGravityEvent.ntype(__long.valueOf(arg0)))

    @overload
    def window(self, arg0: int) -> 'XGravityEvent':
        """public org.lwjgl.system.linux.XGravityEvent org.lwjgl.system.linux.XGravityEvent.window(long)"""
        return 'XGravityEvent'.__wrap(super(__XGravityEvent, self).window(__long.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def x(self) -> int:
        """public int org.lwjgl.system.linux.XGravityEvent.x()"""
        return int.__wrap(super(XGravityEvent, self).x())

    @staticmethod
    @overload
    def nwindow(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XGravityEvent.nwindow(long)"""
        return int.__wrap(__XGravityEvent.nwindow(__long.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def calloc() -> 'XGravityEvent':
        """public static org.lwjgl.system.linux.XGravityEvent org.lwjgl.system.linux.XGravityEvent.calloc()"""
        return XGravityEvent.__wrap(__XGravityEvent.calloc())

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XGravityEvent$Buffer org.lwjgl.system.linux.XGravityEvent.create(int)"""
        return Buffer.__wrap(__XGravityEvent.create(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XGravityEvent':
        """public static org.lwjgl.system.linux.XGravityEvent org.lwjgl.system.linux.XGravityEvent.createSafe(long)"""
        return XGravityEvent.__wrap(__XGravityEvent.createSafe(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XGravityEvent':
        """public static org.lwjgl.system.linux.XGravityEvent org.lwjgl.system.linux.XGravityEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XGravityEvent.__wrap(__XGravityEvent.mallocStack(arg0))

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGravityEvent.nserial(long,long)"""
        __XGravityEvent.nserial(__long.valueOf(arg0), __long.valueOf(arg1))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).address())

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XGravityEvent':
        """public static org.lwjgl.system.linux.XGravityEvent org.lwjgl.system.linux.XGravityEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XGravityEvent.__wrap(__XGravityEvent.calloc(arg0))

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XGravityEvent.ndisplay(long)"""
        return int.__wrap(__XGravityEvent.ndisplay(__long.valueOf(arg0)))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XGravityEvent.type()"""
        return int.__wrap(super(XGravityEvent, self).type())

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XGravityEvent$Buffer org.lwjgl.system.linux.XGravityEvent.mallocStack(int)"""
        return Buffer.__wrap(__XGravityEvent.mallocStack(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XGravityEvent$Buffer org.lwjgl.system.linux.XGravityEvent.callocStack(int)"""
        return Buffer.__wrap(__XGravityEvent.callocStack(__int.valueOf(arg0)))

    @overload
    def type(self, arg0: int) -> 'XGravityEvent':
        """public org.lwjgl.system.linux.XGravityEvent org.lwjgl.system.linux.XGravityEvent.type(int)"""
        return 'XGravityEvent'.__wrap(super(__XGravityEvent, self).type(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'XGravityEvent':
        """public static org.lwjgl.system.linux.XGravityEvent org.lwjgl.system.linux.XGravityEvent.create(long)"""
        return XGravityEvent.__wrap(__XGravityEvent.create(__long.valueOf(arg0)))

    @overload
    def display(self, arg0: int) -> 'XGravityEvent':
        """public org.lwjgl.system.linux.XGravityEvent org.lwjgl.system.linux.XGravityEvent.display(long)"""
        return 'XGravityEvent'.__wrap(super(__XGravityEvent, self).display(__long.valueOf(arg0)))

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XGravityEvent.display()"""
        return int.__wrap(super(XGravityEvent, self).display())

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XGravityEvent$Buffer org.lwjgl.system.linux.XGravityEvent.malloc(int)"""
        return Buffer.__wrap(__XGravityEvent.malloc(__int.valueOf(arg0)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str.__wrap(super(pyglsystem.Pointer$Default, self).toString())

    @overload
    def x(self, arg0: int) -> 'XGravityEvent':
        """public org.lwjgl.system.linux.XGravityEvent org.lwjgl.system.linux.XGravityEvent.x(int)"""
        return 'XGravityEvent'.__wrap(super(__XGravityEvent, self).x(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nevent(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGravityEvent.nevent(long,long)"""
        __XGravityEvent.nevent(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def nevent(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XGravityEvent.nevent(long)"""
        return int.__wrap(__XGravityEvent.nevent(__long.valueOf(arg0)))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XGravityEvent$Buffer org.lwjgl.system.linux.XGravityEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XGravityEvent.malloc(__int.valueOf(arg0), arg1))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XGravityEvent':
        """public static org.lwjgl.system.linux.XGravityEvent org.lwjgl.system.linux.XGravityEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XGravityEvent.__wrap(__XGravityEvent.callocStack(arg0))

    @overload
    def serial(self, arg0: int) -> 'XGravityEvent':
        """public org.lwjgl.system.linux.XGravityEvent org.lwjgl.system.linux.XGravityEvent.serial(long)"""
        return 'XGravityEvent'.__wrap(super(__XGravityEvent, self).serial(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        __Struct.validate(__long.valueOf(arg0), __int.valueOf(arg1), __int.valueOf(arg2), arg3)

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int) -> 'XGravityEvent':
        """public org.lwjgl.system.linux.XGravityEvent org.lwjgl.system.linux.XGravityEvent.set(int,long,boolean,long,long,long,int,int)"""
        return 'XGravityEvent'.__wrap(super(__XGravityEvent, self).set(__int.valueOf(arg0), __long.valueOf(arg1), __boolean.valueOf(arg2), __long.valueOf(arg3), __long.valueOf(arg4), __long.valueOf(arg5), __int.valueOf(arg6), __int.valueOf(arg7)))

    @staticmethod
    @overload
    def ny(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XGravityEvent.ny(long)"""
        return int.__wrap(__XGravityEvent.ny(__long.valueOf(arg0))) 
 
 
# CLASS: org.lwjgl.system.linux.X11
from pyquantum_helper import import_once as __import_once__
from builtins import str
import java.lang.CharSequence as CharSequence
import java.lang.Boolean as __boolean
from pyquantum_helper import override
import java.lang.Object as __object
try:
    import pygl
except ImportError:
    pygl = __import_once__("pygl")

import java.nio.IntBuffer as IntBuffer
from builtins import type
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import org.lwjgl.system.SharedLibrary as __SharedLibrary
__SharedLibrary = __SharedLibrary
import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import org.lwjgl.system.linux.X11 as __X11
__X11 = __X11
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Integer as __int
from builtins import bool
import org.lwjgl.system.linux.XTimeCoord as __XTimeCoord_Buffer
__Buffer = __XTimeCoord_Buffer.Buffer
from builtins import int
 
class X11():
    """org.lwjgl.system.linux.X11"""
 
    @staticmethod
    def __wrap(java_value: __X11) -> 'X11':
        return X11(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __X11):
        """
        Dynamic initializer for X11.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def XRootWindow(arg0: int, arg1: int) -> int:
        """public static long org.lwjgl.system.linux.X11.XRootWindow(long,int)"""
        return int.__wrap(__X11.XRootWindow(__long.valueOf(arg0), __int.valueOf(arg1)))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def XDestroyWindow(arg0: int, arg1: int) -> int:
        """public static int org.lwjgl.system.linux.X11.XDestroyWindow(long,long)"""
        return int.__wrap(__X11.XDestroyWindow(__long.valueOf(arg0), __long.valueOf(arg1)))

    @staticmethod
    @overload
    def nXOpenDisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.X11.nXOpenDisplay(long)"""
        return int.__wrap(__X11.nXOpenDisplay(__long.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def XOpenDisplay(arg0: 'ByteBuffer') -> int:
        """public static long org.lwjgl.system.linux.X11.XOpenDisplay(java.nio.ByteBuffer)"""
        return int.__wrap(__X11.XOpenDisplay(arg0))

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @staticmethod
    @overload
    def XCreateWindow(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: 'Visual', arg10: int, arg11: 'XSetWindowAttributes') -> int:
        """public static long org.lwjgl.system.linux.X11.XCreateWindow(long,long,int,int,int,int,int,int,int,org.lwjgl.system.linux.Visual,long,org.lwjgl.system.linux.XSetWindowAttributes)"""
        return int.__wrap(__X11.XCreateWindow(__long.valueOf(arg0), __long.valueOf(arg1), __int.valueOf(arg2), __int.valueOf(arg3), __int.valueOf(arg4), __int.valueOf(arg5), __int.valueOf(arg6), __int.valueOf(arg7), __int.valueOf(arg8), arg9, __long.valueOf(arg10), arg11))

    @staticmethod
    @overload
    def XTranslateCoordinates(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: 'int', arg6: 'int', arg7: 'CLongBuffer') -> bool:
        """public static boolean org.lwjgl.system.linux.X11.XTranslateCoordinates(long,long,long,int,int,int[],int[],org.lwjgl.CLongBuffer)"""
        return bool.__wrap(__X11.XTranslateCoordinates(__long.valueOf(arg0), __long.valueOf(arg1), __long.valueOf(arg2), __int.valueOf(arg3), __int.valueOf(arg4), arg5, arg6, arg7))

    @staticmethod
    @overload
    def XGetMotionEvents(arg0: int, arg1: int, arg2: int, arg3: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XTimeCoord$Buffer org.lwjgl.system.linux.X11.XGetMotionEvents(long,long,long,long)"""
        return Buffer.__wrap(__X11.XGetMotionEvents(__long.valueOf(arg0), __long.valueOf(arg1), __long.valueOf(arg2), __long.valueOf(arg3)))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0))

    @staticmethod
    @overload
    def XCreateColormap(arg0: int, arg1: int, arg2: 'Visual', arg3: int) -> int:
        """public static long org.lwjgl.system.linux.X11.XCreateColormap(long,long,org.lwjgl.system.linux.Visual,int)"""
        return int.__wrap(__X11.XCreateColormap(__long.valueOf(arg0), __long.valueOf(arg1), arg2, __int.valueOf(arg3)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.lang.Object.toString()"""
        return str.__wrap(super(object, self).toString())

    @staticmethod
    @overload
    def XSendEvent(arg0: int, arg1: int, arg2: bool, arg3: int, arg4: 'XEvent') -> int:
        """public static int org.lwjgl.system.linux.X11.XSendEvent(long,long,boolean,long,org.lwjgl.system.linux.XEvent)"""
        return int.__wrap(__X11.XSendEvent(__long.valueOf(arg0), __long.valueOf(arg1), __boolean.valueOf(arg2), __long.valueOf(arg3), arg4))

    @staticmethod
    @overload
    def XDefaultScreen(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.X11.XDefaultScreen(long)"""
        return int.__wrap(__X11.XDefaultScreen(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nXSendEvent(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int) -> int:
        """public static int org.lwjgl.system.linux.X11.nXSendEvent(long,long,int,long,long)"""
        return int.__wrap(__X11.nXSendEvent(__long.valueOf(arg0), __long.valueOf(arg1), __int.valueOf(arg2), __long.valueOf(arg3), __long.valueOf(arg4)))

    @staticmethod
    @overload
    def nXGetMotionEvents(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int) -> int:
        """public static long org.lwjgl.system.linux.X11.nXGetMotionEvents(long,long,long,long,long)"""
        return int.__wrap(__X11.nXGetMotionEvents(__long.valueOf(arg0), __long.valueOf(arg1), __long.valueOf(arg2), __long.valueOf(arg3), __long.valueOf(arg4)))

    @staticmethod
    @overload
    def nXTranslateCoordinates(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int) -> int:
        """public static int org.lwjgl.system.linux.X11.nXTranslateCoordinates(long,long,long,int,int,long,long,long)"""
        return int.__wrap(__X11.nXTranslateCoordinates(__long.valueOf(arg0), __long.valueOf(arg1), __long.valueOf(arg2), __int.valueOf(arg3), __int.valueOf(arg4), __long.valueOf(arg5), __long.valueOf(arg6), __long.valueOf(arg7)))

    @staticmethod
    @overload
    def XFree(arg0: 'ByteBuffer') -> int:
        """public static int org.lwjgl.system.linux.X11.XFree(java.nio.ByteBuffer)"""
        return int.__wrap(__X11.XFree(arg0))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @staticmethod
    @overload
    def nXCreateColormap(arg0: int, arg1: int, arg2: int, arg3: int) -> int:
        """public static long org.lwjgl.system.linux.X11.nXCreateColormap(long,long,long,int)"""
        return int.__wrap(__X11.nXCreateColormap(__long.valueOf(arg0), __long.valueOf(arg1), __long.valueOf(arg2), __int.valueOf(arg3)))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @staticmethod
    @overload
    def XCloseDisplay(arg0: int):
        """public static void org.lwjgl.system.linux.X11.XCloseDisplay(long)"""
        __X11.XCloseDisplay(__long.valueOf(arg0))

    @staticmethod
    @overload
    def XFreeColormap(arg0: int, arg1: int) -> int:
        """public static int org.lwjgl.system.linux.X11.XFreeColormap(long,long)"""
        return int.__wrap(__X11.XFreeColormap(__long.valueOf(arg0), __long.valueOf(arg1)))

    @staticmethod
    @overload
    def nXCreateWindow(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: int, arg10: int, arg11: int) -> int:
        """public static long org.lwjgl.system.linux.X11.nXCreateWindow(long,long,int,int,int,int,int,int,int,long,long,long)"""
        return int.__wrap(__X11.nXCreateWindow(__long.valueOf(arg0), __long.valueOf(arg1), __int.valueOf(arg2), __int.valueOf(arg3), __int.valueOf(arg4), __int.valueOf(arg5), __int.valueOf(arg6), __int.valueOf(arg7), __int.valueOf(arg8), __long.valueOf(arg9), __long.valueOf(arg10), __long.valueOf(arg11)))

    @staticmethod
    @overload
    def nXFree(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.X11.nXFree(long)"""
        return int.__wrap(__X11.nXFree(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def XFree(arg0: 'PointerBuffer') -> int:
        """public static int org.lwjgl.system.linux.X11.XFree(org.lwjgl.PointerBuffer)"""
        return int.__wrap(__X11.XFree(arg0))

    @staticmethod
    @overload
    def getLibrary() -> 'pyglsystem.SharedLibrary':
        """public static org.lwjgl.system.SharedLibrary org.lwjgl.system.linux.X11.getLibrary()"""
        return pyglsystem.SharedLibrary.__wrap(__X11.getLibrary())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def XOpenDisplay(arg0: 'CharSequence') -> int:
        """public static long org.lwjgl.system.linux.X11.XOpenDisplay(java.lang.CharSequence)"""
        return int.__wrap(__X11.XOpenDisplay(arg0))

    @staticmethod
    @overload
    def XTranslateCoordinates(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: 'IntBuffer', arg6: 'IntBuffer', arg7: 'CLongBuffer') -> bool:
        """public static boolean org.lwjgl.system.linux.X11.XTranslateCoordinates(long,long,long,int,int,java.nio.IntBuffer,java.nio.IntBuffer,org.lwjgl.CLongBuffer)"""
        return bool.__wrap(__X11.XTranslateCoordinates(__long.valueOf(arg0), __long.valueOf(arg1), __long.valueOf(arg2), __int.valueOf(arg3), __int.valueOf(arg4), arg5, arg6, arg7))

    @staticmethod
    @overload
    def XDisplayMotionBufferSize(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.X11.XDisplayMotionBufferSize(long)"""
        return int.__wrap(__X11.XDisplayMotionBufferSize(__long.valueOf(arg0))) 
 
 
# CLASS: org.lwjgl.system.linux.XDestroyWindowEvent
from pyquantum_helper import import_once as __import_once__
from builtins import str
import java.lang.Boolean as __boolean
from pyquantum_helper import override
import java.lang.Object as __object
import org.lwjgl.system.linux.XDestroyWindowEvent as __XDestroyWindowEvent
__XDestroyWindowEvent = __XDestroyWindowEvent
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.linux.XDestroyWindowEvent as __XDestroyWindowEvent_Buffer
__Buffer = __XDestroyWindowEvent_Buffer.Buffer
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
from builtins import int
 
class XDestroyWindowEvent(pyglsystem.__Struct, pyglsystem.Struct, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XDestroyWindowEvent"""
 
    @staticmethod
    def __wrap(java_value: __XDestroyWindowEvent) -> 'XDestroyWindowEvent':
        return XDestroyWindowEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __XDestroyWindowEvent):
        """
        Dynamic initializer for XDestroyWindowEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XDestroyWindowEvent':
        """public static org.lwjgl.system.linux.XDestroyWindowEvent org.lwjgl.system.linux.XDestroyWindowEvent.createSafe(long)"""
        return XDestroyWindowEvent.__wrap(__XDestroyWindowEvent.createSafe(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XDestroyWindowEvent$Buffer org.lwjgl.system.linux.XDestroyWindowEvent.mallocStack(int)"""
        return Buffer.__wrap(__XDestroyWindowEvent.mallocStack(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XDestroyWindowEvent':
        """public static org.lwjgl.system.linux.XDestroyWindowEvent org.lwjgl.system.linux.XDestroyWindowEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XDestroyWindowEvent.__wrap(__XDestroyWindowEvent.malloc(arg0))

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XDestroyWindowEvent$Buffer org.lwjgl.system.linux.XDestroyWindowEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XDestroyWindowEvent.malloc(__int.valueOf(arg0), arg1))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XDestroyWindowEvent.validate(long)"""
        __XDestroyWindowEvent.validate(__long.valueOf(arg0))

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XDestroyWindowEvent.ndisplay(long,long)"""
        __XDestroyWindowEvent.ndisplay(__long.valueOf(arg0), __long.valueOf(arg1))

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XDestroyWindowEvent.display()"""
        return int.__wrap(super(XDestroyWindowEvent, self).display())

    @overload
    def send_event(self, arg0: bool) -> 'XDestroyWindowEvent':
        """public org.lwjgl.system.linux.XDestroyWindowEvent org.lwjgl.system.linux.XDestroyWindowEvent.send_event(boolean)"""
        return 'XDestroyWindowEvent'.__wrap(super(__XDestroyWindowEvent, self).send_event(__boolean.valueOf(arg0)))

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int, arg5: int) -> 'XDestroyWindowEvent':
        """public org.lwjgl.system.linux.XDestroyWindowEvent org.lwjgl.system.linux.XDestroyWindowEvent.set(int,long,boolean,long,long,long)"""
        return 'XDestroyWindowEvent'.__wrap(super(__XDestroyWindowEvent, self).set(__int.valueOf(arg0), __long.valueOf(arg1), __boolean.valueOf(arg2), __long.valueOf(arg3), __long.valueOf(arg4), __long.valueOf(arg5)))

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool.__wrap(super(__pyglsystem.Struct, self).isNull(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nevent(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XDestroyWindowEvent.nevent(long)"""
        return int.__wrap(__XDestroyWindowEvent.nevent(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XDestroyWindowEvent.nserial(long,long)"""
        __XDestroyWindowEvent.nserial(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def callocStack() -> 'XDestroyWindowEvent':
        """public static org.lwjgl.system.linux.XDestroyWindowEvent org.lwjgl.system.linux.XDestroyWindowEvent.callocStack()"""
        return XDestroyWindowEvent.__wrap(__XDestroyWindowEvent.callocStack())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @staticmethod
    @overload
    def nwindow(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XDestroyWindowEvent.nwindow(long,long)"""
        __XDestroyWindowEvent.nwindow(__long.valueOf(arg0), __long.valueOf(arg1))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def create(arg0: int) -> 'XDestroyWindowEvent':
        """public static org.lwjgl.system.linux.XDestroyWindowEvent org.lwjgl.system.linux.XDestroyWindowEvent.create(long)"""
        return XDestroyWindowEvent.__wrap(__XDestroyWindowEvent.create(__long.valueOf(arg0)))

    @overload
    def display(self, arg0: int) -> 'XDestroyWindowEvent':
        """public org.lwjgl.system.linux.XDestroyWindowEvent org.lwjgl.system.linux.XDestroyWindowEvent.display(long)"""
        return 'XDestroyWindowEvent'.__wrap(super(__XDestroyWindowEvent, self).display(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc() -> 'XDestroyWindowEvent':
        """public static org.lwjgl.system.linux.XDestroyWindowEvent org.lwjgl.system.linux.XDestroyWindowEvent.malloc()"""
        return XDestroyWindowEvent.__wrap(__XDestroyWindowEvent.malloc())

    @overload
    def set(self, arg0: 'XDestroyWindowEvent') -> 'XDestroyWindowEvent':
        """public org.lwjgl.system.linux.XDestroyWindowEvent org.lwjgl.system.linux.XDestroyWindowEvent.set(org.lwjgl.system.linux.XDestroyWindowEvent)"""
        return 'XDestroyWindowEvent'.__wrap(super(__XDestroyWindowEvent, self).set(arg0))

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XDestroyWindowEvent$Buffer org.lwjgl.system.linux.XDestroyWindowEvent.calloc(int)"""
        return Buffer.__wrap(__XDestroyWindowEvent.calloc(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XDestroyWindowEvent.nserial(long)"""
        return int.__wrap(__XDestroyWindowEvent.nserial(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XDestroyWindowEvent':
        """public static org.lwjgl.system.linux.XDestroyWindowEvent org.lwjgl.system.linux.XDestroyWindowEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XDestroyWindowEvent.__wrap(__XDestroyWindowEvent.callocStack(arg0))

    @overload
    def window(self, arg0: int) -> 'XDestroyWindowEvent':
        """public org.lwjgl.system.linux.XDestroyWindowEvent org.lwjgl.system.linux.XDestroyWindowEvent.window(long)"""
        return 'XDestroyWindowEvent'.__wrap(super(__XDestroyWindowEvent, self).window(__long.valueOf(arg0)))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XDestroyWindowEvent.send_event()"""
        return bool.__wrap(super(XDestroyWindowEvent, self).send_event())

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XDestroyWindowEvent':
        """public static org.lwjgl.system.linux.XDestroyWindowEvent org.lwjgl.system.linux.XDestroyWindowEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XDestroyWindowEvent.__wrap(__XDestroyWindowEvent.mallocStack(arg0))

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XDestroyWindowEvent$Buffer org.lwjgl.system.linux.XDestroyWindowEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XDestroyWindowEvent.callocStack(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def mallocStack() -> 'XDestroyWindowEvent':
        """public static org.lwjgl.system.linux.XDestroyWindowEvent org.lwjgl.system.linux.XDestroyWindowEvent.mallocStack()"""
        return XDestroyWindowEvent.__wrap(__XDestroyWindowEvent.mallocStack())

    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XDestroyWindowEvent.nsend_event(long)"""
        return int.__wrap(__XDestroyWindowEvent.nsend_event(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XDestroyWindowEvent':
        """public static org.lwjgl.system.linux.XDestroyWindowEvent org.lwjgl.system.linux.XDestroyWindowEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XDestroyWindowEvent.__wrap(__XDestroyWindowEvent.calloc(arg0))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XDestroyWindowEvent$Buffer org.lwjgl.system.linux.XDestroyWindowEvent.callocStack(int)"""
        return Buffer.__wrap(__XDestroyWindowEvent.callocStack(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nwindow(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XDestroyWindowEvent.nwindow(long)"""
        return int.__wrap(__XDestroyWindowEvent.nwindow(__long.valueOf(arg0)))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XDestroyWindowEvent.sizeof()"""
        return int.__wrap(super(XDestroyWindowEvent, self).sizeof())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XDestroyWindowEvent$Buffer org.lwjgl.system.linux.XDestroyWindowEvent.createSafe(long,int)"""
        return Buffer.__wrap(__XDestroyWindowEvent.createSafe(__long.valueOf(arg0), __int.valueOf(arg1)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XDestroyWindowEvent$Buffer org.lwjgl.system.linux.XDestroyWindowEvent.create(int)"""
        return Buffer.__wrap(__XDestroyWindowEvent.create(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XDestroyWindowEvent.ntype(long,int)"""
        __XDestroyWindowEvent.ntype(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XDestroyWindowEvent$Buffer org.lwjgl.system.linux.XDestroyWindowEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XDestroyWindowEvent.mallocStack(__int.valueOf(arg0), arg1))

    @overload
    def event(self, arg0: int) -> 'XDestroyWindowEvent':
        """public org.lwjgl.system.linux.XDestroyWindowEvent org.lwjgl.system.linux.XDestroyWindowEvent.event(long)"""
        return 'XDestroyWindowEvent'.__wrap(super(__XDestroyWindowEvent, self).event(__long.valueOf(arg0)))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).address())

    @overload
    def type(self, arg0: int) -> 'XDestroyWindowEvent':
        """public org.lwjgl.system.linux.XDestroyWindowEvent org.lwjgl.system.linux.XDestroyWindowEvent.type(int)"""
        return 'XDestroyWindowEvent'.__wrap(super(__XDestroyWindowEvent, self).type(__int.valueOf(arg0)))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XDestroyWindowEvent(java.nio.ByteBuffer)"""
        val = __XDestroyWindowEvent(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @staticmethod
    @overload
    def create() -> 'XDestroyWindowEvent':
        """public static org.lwjgl.system.linux.XDestroyWindowEvent org.lwjgl.system.linux.XDestroyWindowEvent.create()"""
        return XDestroyWindowEvent.__wrap(__XDestroyWindowEvent.create())

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XDestroyWindowEvent$Buffer org.lwjgl.system.linux.XDestroyWindowEvent.malloc(int)"""
        return Buffer.__wrap(__XDestroyWindowEvent.malloc(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XDestroyWindowEvent.ndisplay(long)"""
        return int.__wrap(__XDestroyWindowEvent.ndisplay(__long.valueOf(arg0)))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XDestroyWindowEvent.serial()"""
        return int.__wrap(super(XDestroyWindowEvent, self).serial())

    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XDestroyWindowEvent.nsend_event(long,int)"""
        __XDestroyWindowEvent.nsend_event(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str.__wrap(super(pyglsystem.Pointer$Default, self).toString())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XDestroyWindowEvent.type()"""
        return int.__wrap(super(XDestroyWindowEvent, self).type())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XDestroyWindowEvent$Buffer org.lwjgl.system.linux.XDestroyWindowEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XDestroyWindowEvent.calloc(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XDestroyWindowEvent.ntype(long)"""
        return int.__wrap(__XDestroyWindowEvent.ntype(__long.valueOf(arg0)))

    @overload
    def serial(self, arg0: int) -> 'XDestroyWindowEvent':
        """public org.lwjgl.system.linux.XDestroyWindowEvent org.lwjgl.system.linux.XDestroyWindowEvent.serial(long)"""
        return 'XDestroyWindowEvent'.__wrap(super(__XDestroyWindowEvent, self).serial(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XDestroyWindowEvent$Buffer org.lwjgl.system.linux.XDestroyWindowEvent.create(long,int)"""
        return Buffer.__wrap(__XDestroyWindowEvent.create(__long.valueOf(arg0), __int.valueOf(arg1)))

    @staticmethod
    @overload
    def nevent(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XDestroyWindowEvent.nevent(long,long)"""
        __XDestroyWindowEvent.nevent(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def calloc() -> 'XDestroyWindowEvent':
        """public static org.lwjgl.system.linux.XDestroyWindowEvent org.lwjgl.system.linux.XDestroyWindowEvent.calloc()"""
        return XDestroyWindowEvent.__wrap(__XDestroyWindowEvent.calloc())

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XDestroyWindowEvent.window()"""
        return int.__wrap(super(XDestroyWindowEvent, self).window())

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        __Struct.validate(__long.valueOf(arg0), __int.valueOf(arg1), __int.valueOf(arg2), arg3)

    @overload
    def event(self) -> int:
        """public long org.lwjgl.system.linux.XDestroyWindowEvent.event()"""
        return int.__wrap(super(XDestroyWindowEvent, self).event()) 
 
 
# CLASS: org.lwjgl.system.linux.XMappingEvent
from pyquantum_helper import import_once as __import_once__
from builtins import str
import java.lang.Boolean as __boolean
from pyquantum_helper import override
import java.lang.Object as __object
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import org.lwjgl.system.linux.XMappingEvent as __XMappingEvent_Buffer
__Buffer = __XMappingEvent_Buffer.Buffer
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import org.lwjgl.system.linux.XMappingEvent as __XMappingEvent
__XMappingEvent = __XMappingEvent
import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
from builtins import int
 
class XMappingEvent(pyglsystem.__Struct, pyglsystem.Struct, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XMappingEvent"""
 
    @staticmethod
    def __wrap(java_value: __XMappingEvent) -> 'XMappingEvent':
        return XMappingEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __XMappingEvent):
        """
        Dynamic initializer for XMappingEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XMappingEvent.ntype(long)"""
        return int.__wrap(__XMappingEvent.ntype(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XMappingEvent$Buffer org.lwjgl.system.linux.XMappingEvent.create(int)"""
        return Buffer.__wrap(__XMappingEvent.create(__int.valueOf(arg0)))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XMappingEvent.type()"""
        return int.__wrap(super(XMappingEvent, self).type())

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool.__wrap(super(__pyglsystem.Struct, self).isNull(__int.valueOf(arg0)))

    @overload
    def send_event(self, arg0: bool) -> 'XMappingEvent':
        """public org.lwjgl.system.linux.XMappingEvent org.lwjgl.system.linux.XMappingEvent.send_event(boolean)"""
        return 'XMappingEvent'.__wrap(super(__XMappingEvent, self).send_event(__boolean.valueOf(arg0)))

    @staticmethod
    @overload
    def nfirst_keycode(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XMappingEvent.nfirst_keycode(long)"""
        return int.__wrap(__XMappingEvent.nfirst_keycode(__long.valueOf(arg0)))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def callocStack() -> 'XMappingEvent':
        """public static org.lwjgl.system.linux.XMappingEvent org.lwjgl.system.linux.XMappingEvent.callocStack()"""
        return XMappingEvent.__wrap(__XMappingEvent.callocStack())

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XMappingEvent$Buffer org.lwjgl.system.linux.XMappingEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XMappingEvent.mallocStack(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XMappingEvent$Buffer org.lwjgl.system.linux.XMappingEvent.malloc(int)"""
        return Buffer.__wrap(__XMappingEvent.malloc(__int.valueOf(arg0)))

    @overload
    def request(self) -> int:
        """public int org.lwjgl.system.linux.XMappingEvent.request()"""
        return int.__wrap(super(XMappingEvent, self).request())

    @staticmethod
    @overload
    def create() -> 'XMappingEvent':
        """public static org.lwjgl.system.linux.XMappingEvent org.lwjgl.system.linux.XMappingEvent.create()"""
        return XMappingEvent.__wrap(__XMappingEvent.create())

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XMappingEvent$Buffer org.lwjgl.system.linux.XMappingEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XMappingEvent.malloc(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMappingEvent.ndisplay(long,long)"""
        __XMappingEvent.ndisplay(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XMappingEvent$Buffer org.lwjgl.system.linux.XMappingEvent.mallocStack(int)"""
        return Buffer.__wrap(__XMappingEvent.mallocStack(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nrequest(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMappingEvent.nrequest(long,int)"""
        __XMappingEvent.nrequest(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def nwindow(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMappingEvent.nwindow(long,long)"""
        __XMappingEvent.nwindow(__long.valueOf(arg0), __long.valueOf(arg1))

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XMappingEvent.display()"""
        return int.__wrap(super(XMappingEvent, self).display())

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XMappingEvent.window()"""
        return int.__wrap(super(XMappingEvent, self).window())

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int) -> 'XMappingEvent':
        """public org.lwjgl.system.linux.XMappingEvent org.lwjgl.system.linux.XMappingEvent.set(int,long,boolean,long,long,int,int,int)"""
        return 'XMappingEvent'.__wrap(super(__XMappingEvent, self).set(__int.valueOf(arg0), __long.valueOf(arg1), __boolean.valueOf(arg2), __long.valueOf(arg3), __long.valueOf(arg4), __int.valueOf(arg5), __int.valueOf(arg6), __int.valueOf(arg7)))

    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XMappingEvent.nsend_event(long)"""
        return int.__wrap(__XMappingEvent.nsend_event(__long.valueOf(arg0)))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XMappingEvent.validate(long)"""
        __XMappingEvent.validate(__long.valueOf(arg0))

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XMappingEvent':
        """public static org.lwjgl.system.linux.XMappingEvent org.lwjgl.system.linux.XMappingEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XMappingEvent.__wrap(__XMappingEvent.malloc(arg0))

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def count(self, arg0: int) -> 'XMappingEvent':
        """public org.lwjgl.system.linux.XMappingEvent org.lwjgl.system.linux.XMappingEvent.count(int)"""
        return 'XMappingEvent'.__wrap(super(__XMappingEvent, self).count(__int.valueOf(arg0)))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XMappingEvent.sizeof()"""
        return int.__wrap(super(XMappingEvent, self).sizeof())

    @overload
    def type(self, arg0: int) -> 'XMappingEvent':
        """public org.lwjgl.system.linux.XMappingEvent org.lwjgl.system.linux.XMappingEvent.type(int)"""
        return 'XMappingEvent'.__wrap(super(__XMappingEvent, self).type(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XMappingEvent':
        """public static org.lwjgl.system.linux.XMappingEvent org.lwjgl.system.linux.XMappingEvent.createSafe(long)"""
        return XMappingEvent.__wrap(__XMappingEvent.createSafe(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XMappingEvent$Buffer org.lwjgl.system.linux.XMappingEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XMappingEvent.callocStack(__int.valueOf(arg0), arg1))

    @overload
    def window(self, arg0: int) -> 'XMappingEvent':
        """public org.lwjgl.system.linux.XMappingEvent org.lwjgl.system.linux.XMappingEvent.window(long)"""
        return 'XMappingEvent'.__wrap(super(__XMappingEvent, self).window(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc() -> 'XMappingEvent':
        """public static org.lwjgl.system.linux.XMappingEvent org.lwjgl.system.linux.XMappingEvent.malloc()"""
        return XMappingEvent.__wrap(__XMappingEvent.malloc())

    @staticmethod
    @overload
    def ncount(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XMappingEvent.ncount(long)"""
        return int.__wrap(__XMappingEvent.ncount(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'XMappingEvent':
        """public static org.lwjgl.system.linux.XMappingEvent org.lwjgl.system.linux.XMappingEvent.create(long)"""
        return XMappingEvent.__wrap(__XMappingEvent.create(__long.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XMappingEvent$Buffer org.lwjgl.system.linux.XMappingEvent.create(long,int)"""
        return Buffer.__wrap(__XMappingEvent.create(__long.valueOf(arg0), __int.valueOf(arg1)))

    @staticmethod
    @overload
    def ncount(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMappingEvent.ncount(long,int)"""
        __XMappingEvent.ncount(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMappingEvent.ntype(long,int)"""
        __XMappingEvent.ntype(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XMappingEvent(java.nio.ByteBuffer)"""
        val = __XMappingEvent(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XMappingEvent.nserial(long)"""
        return int.__wrap(__XMappingEvent.nserial(__long.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def set(self, arg0: 'XMappingEvent') -> 'XMappingEvent':
        """public org.lwjgl.system.linux.XMappingEvent org.lwjgl.system.linux.XMappingEvent.set(org.lwjgl.system.linux.XMappingEvent)"""
        return 'XMappingEvent'.__wrap(super(__XMappingEvent, self).set(arg0))

    @staticmethod
    @overload
    def nfirst_keycode(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMappingEvent.nfirst_keycode(long,int)"""
        __XMappingEvent.nfirst_keycode(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).address())

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XMappingEvent.ndisplay(long)"""
        return int.__wrap(__XMappingEvent.ndisplay(__long.valueOf(arg0)))

    @overload
    def display(self, arg0: int) -> 'XMappingEvent':
        """public org.lwjgl.system.linux.XMappingEvent org.lwjgl.system.linux.XMappingEvent.display(long)"""
        return 'XMappingEvent'.__wrap(super(__XMappingEvent, self).display(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc() -> 'XMappingEvent':
        """public static org.lwjgl.system.linux.XMappingEvent org.lwjgl.system.linux.XMappingEvent.calloc()"""
        return XMappingEvent.__wrap(__XMappingEvent.calloc())

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XMappingEvent':
        """public static org.lwjgl.system.linux.XMappingEvent org.lwjgl.system.linux.XMappingEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XMappingEvent.__wrap(__XMappingEvent.callocStack(arg0))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XMappingEvent.serial()"""
        return int.__wrap(super(XMappingEvent, self).serial())

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XMappingEvent$Buffer org.lwjgl.system.linux.XMappingEvent.createSafe(long,int)"""
        return Buffer.__wrap(__XMappingEvent.createSafe(__long.valueOf(arg0), __int.valueOf(arg1)))

    @overload
    def first_keycode(self) -> int:
        """public int org.lwjgl.system.linux.XMappingEvent.first_keycode()"""
        return int.__wrap(super(XMappingEvent, self).first_keycode())

    @overload
    def first_keycode(self, arg0: int) -> 'XMappingEvent':
        """public org.lwjgl.system.linux.XMappingEvent org.lwjgl.system.linux.XMappingEvent.first_keycode(int)"""
        return 'XMappingEvent'.__wrap(super(__XMappingEvent, self).first_keycode(__int.valueOf(arg0)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str.__wrap(super(pyglsystem.Pointer$Default, self).toString())

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XMappingEvent':
        """public static org.lwjgl.system.linux.XMappingEvent org.lwjgl.system.linux.XMappingEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XMappingEvent.__wrap(__XMappingEvent.calloc(arg0))

    @overload
    def request(self, arg0: int) -> 'XMappingEvent':
        """public org.lwjgl.system.linux.XMappingEvent org.lwjgl.system.linux.XMappingEvent.request(int)"""
        return 'XMappingEvent'.__wrap(super(__XMappingEvent, self).request(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XMappingEvent':
        """public static org.lwjgl.system.linux.XMappingEvent org.lwjgl.system.linux.XMappingEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XMappingEvent.__wrap(__XMappingEvent.mallocStack(arg0))

    @staticmethod
    @overload
    def mallocStack() -> 'XMappingEvent':
        """public static org.lwjgl.system.linux.XMappingEvent org.lwjgl.system.linux.XMappingEvent.mallocStack()"""
        return XMappingEvent.__wrap(__XMappingEvent.mallocStack())

    @staticmethod
    @overload
    def nwindow(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XMappingEvent.nwindow(long)"""
        return int.__wrap(__XMappingEvent.nwindow(__long.valueOf(arg0)))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMappingEvent.nserial(long,long)"""
        __XMappingEvent.nserial(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XMappingEvent$Buffer org.lwjgl.system.linux.XMappingEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XMappingEvent.calloc(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def nrequest(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XMappingEvent.nrequest(long)"""
        return int.__wrap(__XMappingEvent.nrequest(__long.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def serial(self, arg0: int) -> 'XMappingEvent':
        """public org.lwjgl.system.linux.XMappingEvent org.lwjgl.system.linux.XMappingEvent.serial(long)"""
        return 'XMappingEvent'.__wrap(super(__XMappingEvent, self).serial(__long.valueOf(arg0)))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XMappingEvent.send_event()"""
        return bool.__wrap(super(XMappingEvent, self).send_event())

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        __Struct.validate(__long.valueOf(arg0), __int.valueOf(arg1), __int.valueOf(arg2), arg3)

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XMappingEvent$Buffer org.lwjgl.system.linux.XMappingEvent.calloc(int)"""
        return Buffer.__wrap(__XMappingEvent.calloc(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XMappingEvent$Buffer org.lwjgl.system.linux.XMappingEvent.callocStack(int)"""
        return Buffer.__wrap(__XMappingEvent.callocStack(__int.valueOf(arg0)))

    @overload
    def count(self) -> int:
        """public int org.lwjgl.system.linux.XMappingEvent.count()"""
        return int.__wrap(super(XMappingEvent, self).count())

    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMappingEvent.nsend_event(long,int)"""
        __XMappingEvent.nsend_event(__long.valueOf(arg0), __int.valueOf(arg1)) 
 
 
# CLASS: org.lwjgl.system.linux.KernelTimespec$Buffer
from pyquantum_helper import import_once as __import_once__
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import java.util.stream.Stream as __Stream
__Stream = __Stream
import org.lwjgl.system.StructBuffer as __StructBuffer
__StructBuffer = __StructBuffer
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.CustomBuffer as __CustomBuffer
__CustomBuffer = __CustomBuffer
import org.lwjgl.system.linux.KernelTimespec as __KernelTimespec_Buffer
__Buffer = __KernelTimespec_Buffer.Buffer
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.util.Iterator as __Iterator
__Iterator = __Iterator
import java.lang.Object as __object
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.util.Iterator as Iterator
import java.util.Spliterator as __Spliterator
__Spliterator = __Spliterator
import java.lang.Long as __long
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import java.util.stream.Stream as Stream
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import int
 
class Buffer(pyglsystem.__StructBuffer, pyglsystem.StructBuffer, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.KernelTimespec.Buffer"""
 
    @staticmethod
    def __wrap(java_value: __Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(__pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0), arg1))

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.KernelTimespec$Buffer(long,int)"""
        val = __Buffer(__long.valueOf(arg0), __int.valueOf(arg1))
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int.__wrap(super(__pyglsystem.CustomBuffer, self).address(__int.valueOf(arg0)))

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(__int.valueOf(arg0), arg1))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int.__wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @overload
    def tv_sec(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.KernelTimespec$Buffer org.lwjgl.system.linux.KernelTimespec$Buffer.tv_sec(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).tv_sec(__long.valueOf(arg0)))

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(arg0))

    @overload
    def tv_sec(self) -> int:
        """public long org.lwjgl.system.linux.KernelTimespec$Buffer.tv_sec()"""
        return int.__wrap(super(Buffer, self).tv_sec())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool.__wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).position(__int.valueOf(arg0)))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0)))

    @overload
    def tv_nsec(self) -> int:
        """public long org.lwjgl.system.linux.KernelTimespec$Buffer.tv_nsec()"""
        return int.__wrap(super(Buffer, self).tv_nsec())

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).clear())

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(__int.valueOf(arg0), arg1))

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).slice())

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def tv_nsec(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.KernelTimespec$Buffer org.lwjgl.system.linux.KernelTimespec$Buffer.tv_nsec(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).tv_nsec(__long.valueOf(arg0)))

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'.__wrap(super(pyglsystem.StructBuffer, self).get())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.KernelTimespec$Buffer(java.nio.ByteBuffer)"""
        val = __Buffer(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).limit(__int.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'.__wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str.__wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(arg0))

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).stream())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'.__wrap(super(pyglsystem.StructBuffer, self).iterator())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).slice(__int.valueOf(arg0), __int.valueOf(arg1))) 
 
 
# CLASS: org.lwjgl.system.linux.XVisibilityEvent
from pyquantum_helper import import_once as __import_once__
from builtins import str
import java.lang.Boolean as __boolean
from pyquantum_helper import override
import java.lang.Object as __object
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import org.lwjgl.system.linux.XVisibilityEvent as __XVisibilityEvent_Buffer
__Buffer = __XVisibilityEvent_Buffer.Buffer
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import org.lwjgl.system.linux.XVisibilityEvent as __XVisibilityEvent
__XVisibilityEvent = __XVisibilityEvent
import java.lang.Object as __Object
__Object = __Object
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
from builtins import int
 
class XVisibilityEvent(pyglsystem.__Struct, pyglsystem.Struct, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XVisibilityEvent"""
 
    @staticmethod
    def __wrap(java_value: __XVisibilityEvent) -> 'XVisibilityEvent':
        return XVisibilityEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __XVisibilityEvent):
        """
        Dynamic initializer for XVisibilityEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XVisibilityEvent.ntype(long,int)"""
        __XVisibilityEvent.ntype(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XVisibilityEvent$Buffer org.lwjgl.system.linux.XVisibilityEvent.create(long,int)"""
        return Buffer.__wrap(__XVisibilityEvent.create(__long.valueOf(arg0), __int.valueOf(arg1)))

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XVisibilityEvent.display()"""
        return int.__wrap(super(XVisibilityEvent, self).display())

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XVisibilityEvent':
        """public static org.lwjgl.system.linux.XVisibilityEvent org.lwjgl.system.linux.XVisibilityEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XVisibilityEvent.__wrap(__XVisibilityEvent.callocStack(arg0))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XVisibilityEvent.type()"""
        return int.__wrap(super(XVisibilityEvent, self).type())

    @overload
    def state(self) -> int:
        """public int org.lwjgl.system.linux.XVisibilityEvent.state()"""
        return int.__wrap(super(XVisibilityEvent, self).state())

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool.__wrap(super(__pyglsystem.Struct, self).isNull(__int.valueOf(arg0)))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XVisibilityEvent.validate(long)"""
        __XVisibilityEvent.validate(__long.valueOf(arg0))

    @overload
    def serial(self, arg0: int) -> 'XVisibilityEvent':
        """public org.lwjgl.system.linux.XVisibilityEvent org.lwjgl.system.linux.XVisibilityEvent.serial(long)"""
        return 'XVisibilityEvent'.__wrap(super(__XVisibilityEvent, self).serial(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def create() -> 'XVisibilityEvent':
        """public static org.lwjgl.system.linux.XVisibilityEvent org.lwjgl.system.linux.XVisibilityEvent.create()"""
        return XVisibilityEvent.__wrap(__XVisibilityEvent.create())

    @overload
    def send_event(self, arg0: bool) -> 'XVisibilityEvent':
        """public org.lwjgl.system.linux.XVisibilityEvent org.lwjgl.system.linux.XVisibilityEvent.send_event(boolean)"""
        return 'XVisibilityEvent'.__wrap(super(__XVisibilityEvent, self).send_event(__boolean.valueOf(arg0)))

    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XVisibilityEvent.nsend_event(long,int)"""
        __XVisibilityEvent.nsend_event(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def window(self, arg0: int) -> 'XVisibilityEvent':
        """public org.lwjgl.system.linux.XVisibilityEvent org.lwjgl.system.linux.XVisibilityEvent.window(long)"""
        return 'XVisibilityEvent'.__wrap(super(__XVisibilityEvent, self).window(__long.valueOf(arg0)))

    @overload
    def state(self, arg0: int) -> 'XVisibilityEvent':
        """public org.lwjgl.system.linux.XVisibilityEvent org.lwjgl.system.linux.XVisibilityEvent.state(int)"""
        return 'XVisibilityEvent'.__wrap(super(__XVisibilityEvent, self).state(__int.valueOf(arg0)))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XVisibilityEvent.sizeof()"""
        return int.__wrap(super(XVisibilityEvent, self).sizeof())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XVisibilityEvent(java.nio.ByteBuffer)"""
        val = __XVisibilityEvent(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XVisibilityEvent':
        """public static org.lwjgl.system.linux.XVisibilityEvent org.lwjgl.system.linux.XVisibilityEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XVisibilityEvent.__wrap(__XVisibilityEvent.calloc(arg0))

    @staticmethod
    @overload
    def callocStack() -> 'XVisibilityEvent':
        """public static org.lwjgl.system.linux.XVisibilityEvent org.lwjgl.system.linux.XVisibilityEvent.callocStack()"""
        return XVisibilityEvent.__wrap(__XVisibilityEvent.callocStack())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XVisibilityEvent.ndisplay(long)"""
        return int.__wrap(__XVisibilityEvent.ndisplay(__long.valueOf(arg0)))

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int, arg5: int) -> 'XVisibilityEvent':
        """public org.lwjgl.system.linux.XVisibilityEvent org.lwjgl.system.linux.XVisibilityEvent.set(int,long,boolean,long,long,int)"""
        return 'XVisibilityEvent'.__wrap(super(__XVisibilityEvent, self).set(__int.valueOf(arg0), __long.valueOf(arg1), __boolean.valueOf(arg2), __long.valueOf(arg3), __long.valueOf(arg4), __int.valueOf(arg5)))

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XVisibilityEvent':
        """public static org.lwjgl.system.linux.XVisibilityEvent org.lwjgl.system.linux.XVisibilityEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XVisibilityEvent.__wrap(__XVisibilityEvent.mallocStack(arg0))

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XVisibilityEvent$Buffer org.lwjgl.system.linux.XVisibilityEvent.malloc(int)"""
        return Buffer.__wrap(__XVisibilityEvent.malloc(__int.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def calloc() -> 'XVisibilityEvent':
        """public static org.lwjgl.system.linux.XVisibilityEvent org.lwjgl.system.linux.XVisibilityEvent.calloc()"""
        return XVisibilityEvent.__wrap(__XVisibilityEvent.calloc())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XVisibilityEvent$Buffer org.lwjgl.system.linux.XVisibilityEvent.callocStack(int)"""
        return Buffer.__wrap(__XVisibilityEvent.callocStack(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XVisibilityEvent.nserial(long)"""
        return int.__wrap(__XVisibilityEvent.nserial(__long.valueOf(arg0)))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XVisibilityEvent.serial()"""
        return int.__wrap(super(XVisibilityEvent, self).serial())

    @staticmethod
    @overload
    def create(arg0: int) -> 'XVisibilityEvent':
        """public static org.lwjgl.system.linux.XVisibilityEvent org.lwjgl.system.linux.XVisibilityEvent.create(long)"""
        return XVisibilityEvent.__wrap(__XVisibilityEvent.create(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XVisibilityEvent':
        """public static org.lwjgl.system.linux.XVisibilityEvent org.lwjgl.system.linux.XVisibilityEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XVisibilityEvent.__wrap(__XVisibilityEvent.malloc(arg0))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).address())

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XVisibilityEvent$Buffer org.lwjgl.system.linux.XVisibilityEvent.calloc(int)"""
        return Buffer.__wrap(__XVisibilityEvent.calloc(__int.valueOf(arg0)))

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XVisibilityEvent.window()"""
        return int.__wrap(super(XVisibilityEvent, self).window())

    @overload
    def display(self, arg0: int) -> 'XVisibilityEvent':
        """public org.lwjgl.system.linux.XVisibilityEvent org.lwjgl.system.linux.XVisibilityEvent.display(long)"""
        return 'XVisibilityEvent'.__wrap(super(__XVisibilityEvent, self).display(__long.valueOf(arg0)))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XVisibilityEvent.send_event()"""
        return bool.__wrap(super(XVisibilityEvent, self).send_event())

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XVisibilityEvent':
        """public static org.lwjgl.system.linux.XVisibilityEvent org.lwjgl.system.linux.XVisibilityEvent.createSafe(long)"""
        return XVisibilityEvent.__wrap(__XVisibilityEvent.createSafe(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nwindow(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XVisibilityEvent.nwindow(long,long)"""
        __XVisibilityEvent.nwindow(__long.valueOf(arg0), __long.valueOf(arg1))

    @overload
    def type(self, arg0: int) -> 'XVisibilityEvent':
        """public org.lwjgl.system.linux.XVisibilityEvent org.lwjgl.system.linux.XVisibilityEvent.type(int)"""
        return 'XVisibilityEvent'.__wrap(super(__XVisibilityEvent, self).type(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XVisibilityEvent$Buffer org.lwjgl.system.linux.XVisibilityEvent.createSafe(long,int)"""
        return Buffer.__wrap(__XVisibilityEvent.createSafe(__long.valueOf(arg0), __int.valueOf(arg1)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str.__wrap(super(pyglsystem.Pointer$Default, self).toString())

    @staticmethod
    @overload
    def nwindow(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XVisibilityEvent.nwindow(long)"""
        return int.__wrap(__XVisibilityEvent.nwindow(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XVisibilityEvent$Buffer org.lwjgl.system.linux.XVisibilityEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XVisibilityEvent.malloc(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def nstate(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XVisibilityEvent.nstate(long,int)"""
        __XVisibilityEvent.nstate(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XVisibilityEvent$Buffer org.lwjgl.system.linux.XVisibilityEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XVisibilityEvent.callocStack(__int.valueOf(arg0), arg1))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @staticmethod
    @overload
    def malloc() -> 'XVisibilityEvent':
        """public static org.lwjgl.system.linux.XVisibilityEvent org.lwjgl.system.linux.XVisibilityEvent.malloc()"""
        return XVisibilityEvent.__wrap(__XVisibilityEvent.malloc())

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XVisibilityEvent.ntype(long)"""
        return int.__wrap(__XVisibilityEvent.ntype(__long.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def set(self, arg0: 'XVisibilityEvent') -> 'XVisibilityEvent':
        """public org.lwjgl.system.linux.XVisibilityEvent org.lwjgl.system.linux.XVisibilityEvent.set(org.lwjgl.system.linux.XVisibilityEvent)"""
        return 'XVisibilityEvent'.__wrap(super(__XVisibilityEvent, self).set(arg0))

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XVisibilityEvent$Buffer org.lwjgl.system.linux.XVisibilityEvent.create(int)"""
        return Buffer.__wrap(__XVisibilityEvent.create(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XVisibilityEvent.ndisplay(long,long)"""
        __XVisibilityEvent.ndisplay(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XVisibilityEvent$Buffer org.lwjgl.system.linux.XVisibilityEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XVisibilityEvent.mallocStack(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XVisibilityEvent.nsend_event(long)"""
        return int.__wrap(__XVisibilityEvent.nsend_event(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack() -> 'XVisibilityEvent':
        """public static org.lwjgl.system.linux.XVisibilityEvent org.lwjgl.system.linux.XVisibilityEvent.mallocStack()"""
        return XVisibilityEvent.__wrap(__XVisibilityEvent.mallocStack())

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XVisibilityEvent$Buffer org.lwjgl.system.linux.XVisibilityEvent.mallocStack(int)"""
        return Buffer.__wrap(__XVisibilityEvent.mallocStack(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        __Struct.validate(__long.valueOf(arg0), __int.valueOf(arg1), __int.valueOf(arg2), arg3)

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XVisibilityEvent$Buffer org.lwjgl.system.linux.XVisibilityEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XVisibilityEvent.calloc(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XVisibilityEvent.nserial(long,long)"""
        __XVisibilityEvent.nserial(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def nstate(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XVisibilityEvent.nstate(long)"""
        return int.__wrap(__XVisibilityEvent.nstate(__long.valueOf(arg0))) 
 
 
# CLASS: org.lwjgl.system.linux.CMsghdr$Buffer
from pyquantum_helper import import_once as __import_once__
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import java.nio.ByteBuffer as __ByteBuffer
__ByteBuffer = __ByteBuffer
import java.util.stream.Stream as __Stream
__Stream = __Stream
import org.lwjgl.system.StructBuffer as __StructBuffer
__StructBuffer = __StructBuffer
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Class as __Class
__Class = __Class
import java.lang.Byte as __byte
import org.lwjgl.system.CustomBuffer as __CustomBuffer
__CustomBuffer = __CustomBuffer
import org.lwjgl.system.linux.CMsghdr as __CMsghdr_Buffer
__Buffer = __CMsghdr_Buffer.Buffer
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.util.Iterator as __Iterator
__Iterator = __Iterator
import java.lang.Object as __object
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.util.Iterator as Iterator
import java.util.Spliterator as __Spliterator
__Spliterator = __Spliterator
import java.lang.Long as __long
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import java.util.stream.Stream as Stream
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import int
 
class Buffer(pyglsystem.__StructBuffer, pyglsystem.StructBuffer, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.CMsghdr.Buffer"""
 
    @staticmethod
    def __wrap(java_value: __Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(__pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def cmsg_level(self) -> int:
        """public int org.lwjgl.system.linux.CMsghdr$Buffer.cmsg_level()"""
        return int.__wrap(super(Buffer, self).cmsg_level())

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0), arg1))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address0())

    @overload
    def cmsg_len(self) -> int:
        """public int org.lwjgl.system.linux.CMsghdr$Buffer.cmsg_len()"""
        return int.__wrap(super(Buffer, self).cmsg_len())

    @overload
    def cmsg_data(self) -> 'ByteBuffer':
        """public java.nio.ByteBuffer org.lwjgl.system.linux.CMsghdr$Buffer.cmsg_data()"""
        return 'ByteBuffer'.__wrap(super(Buffer, self).cmsg_data())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int.__wrap(super(__pyglsystem.CustomBuffer, self).address(__int.valueOf(arg0)))

    @overload
    def cmsg_level(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.CMsghdr$Buffer org.lwjgl.system.linux.CMsghdr$Buffer.cmsg_level(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).cmsg_level(__int.valueOf(arg0)))

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(__int.valueOf(arg0), arg1))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int.__wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @overload
    def cmsg_type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.CMsghdr$Buffer org.lwjgl.system.linux.CMsghdr$Buffer.cmsg_type(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).cmsg_type(__int.valueOf(arg0)))

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(arg0))

    @overload
    def cmsg_type(self) -> int:
        """public int org.lwjgl.system.linux.CMsghdr$Buffer.cmsg_type()"""
        return int.__wrap(super(Buffer, self).cmsg_type())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @overload
    def cmsg_data(self, arg0: 'ByteBuffer') -> 'Buffer':
        """public org.lwjgl.system.linux.CMsghdr$Buffer org.lwjgl.system.linux.CMsghdr$Buffer.cmsg_data(java.nio.ByteBuffer)"""
        return 'Buffer'.__wrap(super(__Buffer, self).cmsg_data(arg0))

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.CMsghdr$Buffer(java.nio.ByteBuffer)"""
        val = __Buffer(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool.__wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def cmsg_data(self, arg0: int) -> int:
        """public byte org.lwjgl.system.linux.CMsghdr$Buffer.cmsg_data(int)"""
        return int.__wrap(super(__Buffer, self).cmsg_data(__int.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).position(__int.valueOf(arg0)))

    @overload
    def cmsg_len(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.CMsghdr$Buffer org.lwjgl.system.linux.CMsghdr$Buffer.cmsg_len(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).cmsg_len(__int.valueOf(arg0)))

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.CMsghdr$Buffer(long,int)"""
        val = __Buffer(__long.valueOf(arg0), __int.valueOf(arg1))
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0)))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).clear())

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(__int.valueOf(arg0), arg1))

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).slice())

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).compact())

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'.__wrap(super(pyglsystem.StructBuffer, self).get())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).limit(__int.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'.__wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str.__wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(arg0))

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).stream())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @overload
    def cmsg_data(self, arg0: int, arg1: int) -> 'Buffer':
        """public org.lwjgl.system.linux.CMsghdr$Buffer org.lwjgl.system.linux.CMsghdr$Buffer.cmsg_data(int,byte)"""
        return 'Buffer'.__wrap(super(__Buffer, self).cmsg_data(__int.valueOf(arg0), __byte.valueOf(arg1)))

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'.__wrap(super(pyglsystem.StructBuffer, self).iterator())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).slice(__int.valueOf(arg0), __int.valueOf(arg1))) 
 
 
# CLASS: org.lwjgl.system.linux.XUnmapEvent
from pyquantum_helper import import_once as __import_once__
from builtins import str
import java.lang.Boolean as __boolean
from pyquantum_helper import override
import java.lang.Object as __object
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import org.lwjgl.system.linux.XUnmapEvent as __XUnmapEvent
__XUnmapEvent = __XUnmapEvent
import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import org.lwjgl.system.linux.XUnmapEvent as __XUnmapEvent_Buffer
__Buffer = __XUnmapEvent_Buffer.Buffer
import java.lang.Object as __Object
__Object = __Object
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
from builtins import int
 
class XUnmapEvent(pyglsystem.__Struct, pyglsystem.Struct, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XUnmapEvent"""
 
    @staticmethod
    def __wrap(java_value: __XUnmapEvent) -> 'XUnmapEvent':
        return XUnmapEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __XUnmapEvent):
        """
        Dynamic initializer for XUnmapEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def nwindow(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XUnmapEvent.nwindow(long)"""
        return int.__wrap(__XUnmapEvent.nwindow(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XUnmapEvent.ndisplay(long)"""
        return int.__wrap(__XUnmapEvent.ndisplay(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nevent(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XUnmapEvent.nevent(long,long)"""
        __XUnmapEvent.nevent(__long.valueOf(arg0), __long.valueOf(arg1))

    @overload
    def serial(self, arg0: int) -> 'XUnmapEvent':
        """public org.lwjgl.system.linux.XUnmapEvent org.lwjgl.system.linux.XUnmapEvent.serial(long)"""
        return 'XUnmapEvent'.__wrap(super(__XUnmapEvent, self).serial(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc() -> 'XUnmapEvent':
        """public static org.lwjgl.system.linux.XUnmapEvent org.lwjgl.system.linux.XUnmapEvent.malloc()"""
        return XUnmapEvent.__wrap(__XUnmapEvent.malloc())

    @staticmethod
    @overload
    def callocStack() -> 'XUnmapEvent':
        """public static org.lwjgl.system.linux.XUnmapEvent org.lwjgl.system.linux.XUnmapEvent.callocStack()"""
        return XUnmapEvent.__wrap(__XUnmapEvent.callocStack())

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XUnmapEvent.ndisplay(long,long)"""
        __XUnmapEvent.ndisplay(__long.valueOf(arg0), __long.valueOf(arg1))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XUnmapEvent$Buffer org.lwjgl.system.linux.XUnmapEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XUnmapEvent.calloc(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XUnmapEvent.nserial(long)"""
        return int.__wrap(__XUnmapEvent.nserial(__long.valueOf(arg0)))

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool.__wrap(super(__pyglsystem.Struct, self).isNull(__int.valueOf(arg0)))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XUnmapEvent.ntype(long,int)"""
        __XUnmapEvent.ntype(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XUnmapEvent.sizeof()"""
        return int.__wrap(super(XUnmapEvent, self).sizeof())

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XUnmapEvent.display()"""
        return int.__wrap(super(XUnmapEvent, self).display())

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XUnmapEvent':
        """public static org.lwjgl.system.linux.XUnmapEvent org.lwjgl.system.linux.XUnmapEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XUnmapEvent.__wrap(__XUnmapEvent.calloc(arg0))

    @staticmethod
    @overload
    def nfrom_configure(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XUnmapEvent.nfrom_configure(long)"""
        return int.__wrap(__XUnmapEvent.nfrom_configure(__long.valueOf(arg0)))

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XUnmapEvent.window()"""
        return int.__wrap(super(XUnmapEvent, self).window())

    @staticmethod
    @overload
    def nfrom_configure(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XUnmapEvent.nfrom_configure(long,int)"""
        __XUnmapEvent.nfrom_configure(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def display(self, arg0: int) -> 'XUnmapEvent':
        """public org.lwjgl.system.linux.XUnmapEvent org.lwjgl.system.linux.XUnmapEvent.display(long)"""
        return 'XUnmapEvent'.__wrap(super(__XUnmapEvent, self).display(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def create() -> 'XUnmapEvent':
        """public static org.lwjgl.system.linux.XUnmapEvent org.lwjgl.system.linux.XUnmapEvent.create()"""
        return XUnmapEvent.__wrap(__XUnmapEvent.create())

    @staticmethod
    @overload
    def nevent(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XUnmapEvent.nevent(long)"""
        return int.__wrap(__XUnmapEvent.nevent(__long.valueOf(arg0)))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @overload
    def type(self, arg0: int) -> 'XUnmapEvent':
        """public org.lwjgl.system.linux.XUnmapEvent org.lwjgl.system.linux.XUnmapEvent.type(int)"""
        return 'XUnmapEvent'.__wrap(super(__XUnmapEvent, self).type(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XUnmapEvent.nserial(long,long)"""
        __XUnmapEvent.nserial(__long.valueOf(arg0), __long.valueOf(arg1))

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XUnmapEvent':
        """public static org.lwjgl.system.linux.XUnmapEvent org.lwjgl.system.linux.XUnmapEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XUnmapEvent.__wrap(__XUnmapEvent.mallocStack(arg0))

    @overload
    def from_configure(self) -> int:
        """public int org.lwjgl.system.linux.XUnmapEvent.from_configure()"""
        return int.__wrap(super(XUnmapEvent, self).from_configure())

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XUnmapEvent$Buffer org.lwjgl.system.linux.XUnmapEvent.malloc(int)"""
        return Buffer.__wrap(__XUnmapEvent.malloc(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XUnmapEvent$Buffer org.lwjgl.system.linux.XUnmapEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XUnmapEvent.mallocStack(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XUnmapEvent$Buffer org.lwjgl.system.linux.XUnmapEvent.createSafe(long,int)"""
        return Buffer.__wrap(__XUnmapEvent.createSafe(__long.valueOf(arg0), __int.valueOf(arg1)))

    @staticmethod
    @overload
    def mallocStack() -> 'XUnmapEvent':
        """public static org.lwjgl.system.linux.XUnmapEvent org.lwjgl.system.linux.XUnmapEvent.mallocStack()"""
        return XUnmapEvent.__wrap(__XUnmapEvent.mallocStack())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XUnmapEvent$Buffer org.lwjgl.system.linux.XUnmapEvent.calloc(int)"""
        return Buffer.__wrap(__XUnmapEvent.calloc(__int.valueOf(arg0)))

    @overload
    def send_event(self, arg0: bool) -> 'XUnmapEvent':
        """public org.lwjgl.system.linux.XUnmapEvent org.lwjgl.system.linux.XUnmapEvent.send_event(boolean)"""
        return 'XUnmapEvent'.__wrap(super(__XUnmapEvent, self).send_event(__boolean.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def event(self, arg0: int) -> 'XUnmapEvent':
        """public org.lwjgl.system.linux.XUnmapEvent org.lwjgl.system.linux.XUnmapEvent.event(long)"""
        return 'XUnmapEvent'.__wrap(super(__XUnmapEvent, self).event(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XUnmapEvent$Buffer org.lwjgl.system.linux.XUnmapEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XUnmapEvent.callocStack(__int.valueOf(arg0), arg1))

    @overload
    def set(self, arg0: 'XUnmapEvent') -> 'XUnmapEvent':
        """public org.lwjgl.system.linux.XUnmapEvent org.lwjgl.system.linux.XUnmapEvent.set(org.lwjgl.system.linux.XUnmapEvent)"""
        return 'XUnmapEvent'.__wrap(super(__XUnmapEvent, self).set(arg0))

    @overload
    def window(self, arg0: int) -> 'XUnmapEvent':
        """public org.lwjgl.system.linux.XUnmapEvent org.lwjgl.system.linux.XUnmapEvent.window(long)"""
        return 'XUnmapEvent'.__wrap(super(__XUnmapEvent, self).window(__long.valueOf(arg0)))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).address())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XUnmapEvent(java.nio.ByteBuffer)"""
        val = __XUnmapEvent(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @staticmethod
    @overload
    def calloc() -> 'XUnmapEvent':
        """public static org.lwjgl.system.linux.XUnmapEvent org.lwjgl.system.linux.XUnmapEvent.calloc()"""
        return XUnmapEvent.__wrap(__XUnmapEvent.calloc())

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XUnmapEvent.type()"""
        return int.__wrap(super(XUnmapEvent, self).type())

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XUnmapEvent':
        """public static org.lwjgl.system.linux.XUnmapEvent org.lwjgl.system.linux.XUnmapEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XUnmapEvent.__wrap(__XUnmapEvent.callocStack(arg0))

    @overload
    def event(self) -> int:
        """public long org.lwjgl.system.linux.XUnmapEvent.event()"""
        return int.__wrap(super(XUnmapEvent, self).event())

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int, arg5: int, arg6: int) -> 'XUnmapEvent':
        """public org.lwjgl.system.linux.XUnmapEvent org.lwjgl.system.linux.XUnmapEvent.set(int,long,boolean,long,long,long,int)"""
        return 'XUnmapEvent'.__wrap(super(__XUnmapEvent, self).set(__int.valueOf(arg0), __long.valueOf(arg1), __boolean.valueOf(arg2), __long.valueOf(arg3), __long.valueOf(arg4), __long.valueOf(arg5), __int.valueOf(arg6)))

    @overload
    def from_configure(self, arg0: int) -> 'XUnmapEvent':
        """public org.lwjgl.system.linux.XUnmapEvent org.lwjgl.system.linux.XUnmapEvent.from_configure(int)"""
        return 'XUnmapEvent'.__wrap(super(__XUnmapEvent, self).from_configure(__int.valueOf(arg0)))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XUnmapEvent.send_event()"""
        return bool.__wrap(super(XUnmapEvent, self).send_event())

    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XUnmapEvent.nsend_event(long)"""
        return int.__wrap(__XUnmapEvent.nsend_event(__long.valueOf(arg0)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str.__wrap(super(pyglsystem.Pointer$Default, self).toString())

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XUnmapEvent.validate(long)"""
        __XUnmapEvent.validate(__long.valueOf(arg0))

    @staticmethod
    @overload
    def nwindow(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XUnmapEvent.nwindow(long,long)"""
        __XUnmapEvent.nwindow(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XUnmapEvent':
        """public static org.lwjgl.system.linux.XUnmapEvent org.lwjgl.system.linux.XUnmapEvent.createSafe(long)"""
        return XUnmapEvent.__wrap(__XUnmapEvent.createSafe(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XUnmapEvent$Buffer org.lwjgl.system.linux.XUnmapEvent.callocStack(int)"""
        return Buffer.__wrap(__XUnmapEvent.callocStack(__int.valueOf(arg0)))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XUnmapEvent$Buffer org.lwjgl.system.linux.XUnmapEvent.create(int)"""
        return Buffer.__wrap(__XUnmapEvent.create(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XUnmapEvent.nsend_event(long,int)"""
        __XUnmapEvent.nsend_event(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XUnmapEvent$Buffer org.lwjgl.system.linux.XUnmapEvent.create(long,int)"""
        return Buffer.__wrap(__XUnmapEvent.create(__long.valueOf(arg0), __int.valueOf(arg1)))

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XUnmapEvent$Buffer org.lwjgl.system.linux.XUnmapEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XUnmapEvent.malloc(__int.valueOf(arg0), arg1))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XUnmapEvent.serial()"""
        return int.__wrap(super(XUnmapEvent, self).serial())

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XUnmapEvent.ntype(long)"""
        return int.__wrap(__XUnmapEvent.ntype(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XUnmapEvent$Buffer org.lwjgl.system.linux.XUnmapEvent.mallocStack(int)"""
        return Buffer.__wrap(__XUnmapEvent.mallocStack(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        __Struct.validate(__long.valueOf(arg0), __int.valueOf(arg1), __int.valueOf(arg2), arg3)

    @staticmethod
    @overload
    def create(arg0: int) -> 'XUnmapEvent':
        """public static org.lwjgl.system.linux.XUnmapEvent org.lwjgl.system.linux.XUnmapEvent.create(long)"""
        return XUnmapEvent.__wrap(__XUnmapEvent.create(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XUnmapEvent':
        """public static org.lwjgl.system.linux.XUnmapEvent org.lwjgl.system.linux.XUnmapEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XUnmapEvent.__wrap(__XUnmapEvent.malloc(arg0)) 
 
 
# CLASS: org.lwjgl.system.linux.IOVec
from pyquantum_helper import import_once as __import_once__
from builtins import str
from pyquantum_helper import override
import org.lwjgl.system.linux.IOVec as __IOVec
__IOVec = __IOVec
import java.lang.Object as __object
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import java.nio.ByteBuffer as __ByteBuffer
__ByteBuffer = __ByteBuffer
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import org.lwjgl.system.linux.IOVec as __IOVec_Buffer
__Buffer = __IOVec_Buffer.Buffer
import java.lang.Object as __Object
__Object = __Object
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Integer as __int
from builtins import bool
from builtins import int
 
class IOVec(pyglsystem.__Struct, pyglsystem.Struct, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.IOVec"""
 
    @staticmethod
    def __wrap(java_value: __IOVec) -> 'IOVec':
        return IOVec(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __IOVec):
        """
        Dynamic initializer for IOVec.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.IOVec.sizeof()"""
        return int.__wrap(super(IOVec, self).sizeof())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.IOVec(java.nio.ByteBuffer)"""
        val = __IOVec(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def set(self, arg0: 'ByteBuffer', arg1: int) -> 'IOVec':
        """public org.lwjgl.system.linux.IOVec org.lwjgl.system.linux.IOVec.set(java.nio.ByteBuffer,long)"""
        return 'IOVec'.__wrap(super(__IOVec, self).set(arg0, __long.valueOf(arg1)))

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.IOVec$Buffer org.lwjgl.system.linux.IOVec.malloc(int)"""
        return Buffer.__wrap(__IOVec.malloc(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.IOVec$Buffer org.lwjgl.system.linux.IOVec.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__IOVec.malloc(__int.valueOf(arg0), arg1))

    @overload
    def iov_base(self, arg0: 'ByteBuffer') -> 'IOVec':
        """public org.lwjgl.system.linux.IOVec org.lwjgl.system.linux.IOVec.iov_base(java.nio.ByteBuffer)"""
        return 'IOVec'.__wrap(super(__IOVec, self).iov_base(arg0))

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.IOVec$Buffer org.lwjgl.system.linux.IOVec.create(int)"""
        return Buffer.__wrap(__IOVec.create(__int.valueOf(arg0)))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).address())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def iov_base(self) -> 'ByteBuffer':
        """public java.nio.ByteBuffer org.lwjgl.system.linux.IOVec.iov_base()"""
        return 'ByteBuffer'.__wrap(super(IOVec, self).iov_base())

    @overload
    def iov_len(self) -> int:
        """public long org.lwjgl.system.linux.IOVec.iov_len()"""
        return int.__wrap(super(IOVec, self).iov_len())

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool.__wrap(super(__pyglsystem.Struct, self).isNull(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def niov_base(arg0: int, arg1: 'ByteBuffer'):
        """public static void org.lwjgl.system.linux.IOVec.niov_base(long,java.nio.ByteBuffer)"""
        __IOVec.niov_base(__long.valueOf(arg0), arg1)

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @staticmethod
    @overload
    def calloc() -> 'IOVec':
        """public static org.lwjgl.system.linux.IOVec org.lwjgl.system.linux.IOVec.calloc()"""
        return IOVec.__wrap(__IOVec.calloc())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def niov_len(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.IOVec.niov_len(long,long)"""
        __IOVec.niov_len(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def create(arg0: int) -> 'IOVec':
        """public static org.lwjgl.system.linux.IOVec org.lwjgl.system.linux.IOVec.create(long)"""
        return IOVec.__wrap(__IOVec.create(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def niov_len(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.IOVec.niov_len(long)"""
        return int.__wrap(__IOVec.niov_len(__long.valueOf(arg0)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str.__wrap(super(pyglsystem.Pointer$Default, self).toString())

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'IOVec':
        """public static org.lwjgl.system.linux.IOVec org.lwjgl.system.linux.IOVec.calloc(org.lwjgl.system.MemoryStack)"""
        return IOVec.__wrap(__IOVec.calloc(arg0))

    @staticmethod
    @overload
    def niov_base(arg0: int) -> 'ByteBuffer':
        """public static java.nio.ByteBuffer org.lwjgl.system.linux.IOVec.niov_base(long)"""
        return ByteBuffer.__wrap(__IOVec.niov_base(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.IOVec$Buffer org.lwjgl.system.linux.IOVec.create(long,int)"""
        return Buffer.__wrap(__IOVec.create(__long.valueOf(arg0), __int.valueOf(arg1)))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @overload
    def set(self, arg0: 'IOVec') -> 'IOVec':
        """public org.lwjgl.system.linux.IOVec org.lwjgl.system.linux.IOVec.set(org.lwjgl.system.linux.IOVec)"""
        return 'IOVec'.__wrap(super(__IOVec, self).set(arg0))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.IOVec$Buffer org.lwjgl.system.linux.IOVec.createSafe(long,int)"""
        return Buffer.__wrap(__IOVec.createSafe(__long.valueOf(arg0), __int.valueOf(arg1)))

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @staticmethod
    @overload
    def create() -> 'IOVec':
        """public static org.lwjgl.system.linux.IOVec org.lwjgl.system.linux.IOVec.create()"""
        return IOVec.__wrap(__IOVec.create())

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.IOVec$Buffer org.lwjgl.system.linux.IOVec.calloc(int)"""
        return Buffer.__wrap(__IOVec.calloc(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'IOVec':
        """public static org.lwjgl.system.linux.IOVec org.lwjgl.system.linux.IOVec.createSafe(long)"""
        return IOVec.__wrap(__IOVec.createSafe(__long.valueOf(arg0)))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def iov_len(self, arg0: int) -> 'IOVec':
        """public org.lwjgl.system.linux.IOVec org.lwjgl.system.linux.IOVec.iov_len(long)"""
        return 'IOVec'.__wrap(super(__IOVec, self).iov_len(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'IOVec':
        """public static org.lwjgl.system.linux.IOVec org.lwjgl.system.linux.IOVec.malloc(org.lwjgl.system.MemoryStack)"""
        return IOVec.__wrap(__IOVec.malloc(arg0))

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.IOVec$Buffer org.lwjgl.system.linux.IOVec.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__IOVec.calloc(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        __Struct.validate(__long.valueOf(arg0), __int.valueOf(arg1), __int.valueOf(arg2), arg3)

    @staticmethod
    @overload
    def malloc() -> 'IOVec':
        """public static org.lwjgl.system.linux.IOVec org.lwjgl.system.linux.IOVec.malloc()"""
        return IOVec.__wrap(__IOVec.malloc())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait() 
 
 
# CLASS: org.lwjgl.system.linux.XMotionEvent$Buffer
from pyquantum_helper import import_once as __import_once__
import java.lang.Boolean as __boolean
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import java.util.stream.Stream as __Stream
__Stream = __Stream
import org.lwjgl.system.StructBuffer as __StructBuffer
__StructBuffer = __StructBuffer
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Class as __Class
__Class = __Class
import java.lang.Byte as __byte
import org.lwjgl.system.CustomBuffer as __CustomBuffer
__CustomBuffer = __CustomBuffer
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.util.Iterator as __Iterator
__Iterator = __Iterator
import java.lang.Object as __object
import org.lwjgl.system.linux.XMotionEvent as __XMotionEvent_Buffer
__Buffer = __XMotionEvent_Buffer.Buffer
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.util.Iterator as Iterator
import java.util.Spliterator as __Spliterator
__Spliterator = __Spliterator
import java.lang.Long as __long
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import java.util.stream.Stream as Stream
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import int
 
class Buffer(pyglsystem.__StructBuffer, pyglsystem.StructBuffer, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XMotionEvent.Buffer"""
 
    @staticmethod
    def __wrap(java_value: __Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def y(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XMotionEvent$Buffer org.lwjgl.system.linux.XMotionEvent$Buffer.y(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).y(__int.valueOf(arg0)))

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(__pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XMotionEvent$Buffer.window()"""
        return int.__wrap(super(Buffer, self).window())

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0), arg1))

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XMotionEvent$Buffer org.lwjgl.system.linux.XMotionEvent$Buffer.display(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).display(__long.valueOf(arg0)))

    @overload
    def x_root(self) -> int:
        """public int org.lwjgl.system.linux.XMotionEvent$Buffer.x_root()"""
        return int.__wrap(super(Buffer, self).x_root())

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address0())

    @overload
    def root(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XMotionEvent$Buffer org.lwjgl.system.linux.XMotionEvent$Buffer.root(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).root(__long.valueOf(arg0)))

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XMotionEvent$Buffer org.lwjgl.system.linux.XMotionEvent$Buffer.serial(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).serial(__long.valueOf(arg0)))

    @overload
    def y(self) -> int:
        """public int org.lwjgl.system.linux.XMotionEvent$Buffer.y()"""
        return int.__wrap(super(Buffer, self).y())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def x(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XMotionEvent$Buffer org.lwjgl.system.linux.XMotionEvent$Buffer.x(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).x(__int.valueOf(arg0)))

    @overload
    def y_root(self) -> int:
        """public int org.lwjgl.system.linux.XMotionEvent$Buffer.y_root()"""
        return int.__wrap(super(Buffer, self).y_root())

    @overload
    def is_hint(self) -> int:
        """public byte org.lwjgl.system.linux.XMotionEvent$Buffer.is_hint()"""
        return int.__wrap(super(Buffer, self).is_hint())

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int.__wrap(super(__pyglsystem.CustomBuffer, self).address(__int.valueOf(arg0)))

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XMotionEvent$Buffer(java.nio.ByteBuffer)"""
        val = __Buffer(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(__int.valueOf(arg0), arg1))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int.__wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XMotionEvent$Buffer.type()"""
        return int.__wrap(super(Buffer, self).type())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(arg0))

    @overload
    def y_root(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XMotionEvent$Buffer org.lwjgl.system.linux.XMotionEvent$Buffer.y_root(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).y_root(__int.valueOf(arg0)))

    @overload
    def same_screen(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XMotionEvent$Buffer org.lwjgl.system.linux.XMotionEvent$Buffer.same_screen(boolean)"""
        return 'Buffer'.__wrap(super(__Buffer, self).same_screen(__boolean.valueOf(arg0)))

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).position())

    @overload
    def subwindow(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XMotionEvent$Buffer org.lwjgl.system.linux.XMotionEvent$Buffer.subwindow(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).subwindow(__long.valueOf(arg0)))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @overload
    def root(self) -> int:
        """public long org.lwjgl.system.linux.XMotionEvent$Buffer.root()"""
        return int.__wrap(super(Buffer, self).root())

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool.__wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @overload
    def state(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XMotionEvent$Buffer org.lwjgl.system.linux.XMotionEvent$Buffer.state(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).state(__int.valueOf(arg0)))

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XMotionEvent$Buffer(long,int)"""
        val = __Buffer(__long.valueOf(arg0), __int.valueOf(arg1))
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XMotionEvent$Buffer.display()"""
        return int.__wrap(super(Buffer, self).display())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XMotionEvent$Buffer org.lwjgl.system.linux.XMotionEvent$Buffer.type(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).type(__int.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).position(__int.valueOf(arg0)))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0)))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).clear())

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(__int.valueOf(arg0), arg1))

    @overload
    def window(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XMotionEvent$Buffer org.lwjgl.system.linux.XMotionEvent$Buffer.window(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).window(__long.valueOf(arg0)))

    @overload
    def state(self) -> int:
        """public int org.lwjgl.system.linux.XMotionEvent$Buffer.state()"""
        return int.__wrap(super(Buffer, self).state())

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).slice())

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XMotionEvent$Buffer.send_event()"""
        return bool.__wrap(super(Buffer, self).send_event())

    @overload
    def time(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XMotionEvent$Buffer org.lwjgl.system.linux.XMotionEvent$Buffer.time(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).time(__long.valueOf(arg0)))

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'.__wrap(super(pyglsystem.StructBuffer, self).get())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).limit(__int.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'.__wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str.__wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XMotionEvent$Buffer org.lwjgl.system.linux.XMotionEvent$Buffer.send_event(boolean)"""
        return 'Buffer'.__wrap(super(__Buffer, self).send_event(__boolean.valueOf(arg0)))

    @overload
    def is_hint(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XMotionEvent$Buffer org.lwjgl.system.linux.XMotionEvent$Buffer.is_hint(byte)"""
        return 'Buffer'.__wrap(super(__Buffer, self).is_hint(__byte.valueOf(arg0)))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def x_root(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XMotionEvent$Buffer org.lwjgl.system.linux.XMotionEvent$Buffer.x_root(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).x_root(__int.valueOf(arg0)))

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(arg0))

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).stream())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @overload
    def time(self) -> int:
        """public long org.lwjgl.system.linux.XMotionEvent$Buffer.time()"""
        return int.__wrap(super(Buffer, self).time())

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'.__wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def x(self) -> int:
        """public int org.lwjgl.system.linux.XMotionEvent$Buffer.x()"""
        return int.__wrap(super(Buffer, self).x())

    @overload
    def same_screen(self) -> bool:
        """public boolean org.lwjgl.system.linux.XMotionEvent$Buffer.same_screen()"""
        return bool.__wrap(super(Buffer, self).same_screen())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).slice(__int.valueOf(arg0), __int.valueOf(arg1)))

    @overload
    def subwindow(self) -> int:
        """public long org.lwjgl.system.linux.XMotionEvent$Buffer.subwindow()"""
        return int.__wrap(super(Buffer, self).subwindow())

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XMotionEvent$Buffer.serial()"""
        return int.__wrap(super(Buffer, self).serial()) 
 
 
# CLASS: org.lwjgl.system.linux.XReparentEvent
from pyquantum_helper import import_once as __import_once__
from builtins import str
import java.lang.Boolean as __boolean
from pyquantum_helper import override
import java.lang.Object as __object
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import org.lwjgl.system.linux.XReparentEvent as __XReparentEvent_Buffer
__Buffer = __XReparentEvent_Buffer.Buffer
import org.lwjgl.system.linux.XReparentEvent as __XReparentEvent
__XReparentEvent = __XReparentEvent
import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
from builtins import int
 
class XReparentEvent(pyglsystem.__Struct, pyglsystem.Struct, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XReparentEvent"""
 
    @staticmethod
    def __wrap(java_value: __XReparentEvent) -> 'XReparentEvent':
        return XReparentEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __XReparentEvent):
        """
        Dynamic initializer for XReparentEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def display(self, arg0: int) -> 'XReparentEvent':
        """public org.lwjgl.system.linux.XReparentEvent org.lwjgl.system.linux.XReparentEvent.display(long)"""
        return 'XReparentEvent'.__wrap(super(__XReparentEvent, self).display(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XReparentEvent$Buffer org.lwjgl.system.linux.XReparentEvent.malloc(int)"""
        return Buffer.__wrap(__XReparentEvent.malloc(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XReparentEvent':
        """public static org.lwjgl.system.linux.XReparentEvent org.lwjgl.system.linux.XReparentEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XReparentEvent.__wrap(__XReparentEvent.malloc(arg0))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def malloc() -> 'XReparentEvent':
        """public static org.lwjgl.system.linux.XReparentEvent org.lwjgl.system.linux.XReparentEvent.malloc()"""
        return XReparentEvent.__wrap(__XReparentEvent.malloc())

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XReparentEvent$Buffer org.lwjgl.system.linux.XReparentEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XReparentEvent.mallocStack(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def calloc() -> 'XReparentEvent':
        """public static org.lwjgl.system.linux.XReparentEvent org.lwjgl.system.linux.XReparentEvent.calloc()"""
        return XReparentEvent.__wrap(__XReparentEvent.calloc())

    @overload
    def x(self) -> int:
        """public int org.lwjgl.system.linux.XReparentEvent.x()"""
        return int.__wrap(super(XReparentEvent, self).x())

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XReparentEvent$Buffer org.lwjgl.system.linux.XReparentEvent.calloc(int)"""
        return Buffer.__wrap(__XReparentEvent.calloc(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nevent(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XReparentEvent.nevent(long)"""
        return int.__wrap(__XReparentEvent.nevent(__long.valueOf(arg0)))

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool.__wrap(super(__pyglsystem.Struct, self).isNull(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XReparentEvent.ntype(long)"""
        return int.__wrap(__XReparentEvent.ntype(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nwindow(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XReparentEvent.nwindow(long)"""
        return int.__wrap(__XReparentEvent.nwindow(__long.valueOf(arg0)))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XReparentEvent.send_event()"""
        return bool.__wrap(super(XReparentEvent, self).send_event())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def y(self, arg0: int) -> 'XReparentEvent':
        """public org.lwjgl.system.linux.XReparentEvent org.lwjgl.system.linux.XReparentEvent.y(int)"""
        return 'XReparentEvent'.__wrap(super(__XReparentEvent, self).y(__int.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XReparentEvent.nserial(long)"""
        return int.__wrap(__XReparentEvent.nserial(__long.valueOf(arg0)))

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XReparentEvent.display()"""
        return int.__wrap(super(XReparentEvent, self).display())

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XReparentEvent$Buffer org.lwjgl.system.linux.XReparentEvent.createSafe(long,int)"""
        return Buffer.__wrap(__XReparentEvent.createSafe(__long.valueOf(arg0), __int.valueOf(arg1)))

    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XReparentEvent.nsend_event(long)"""
        return int.__wrap(__XReparentEvent.nsend_event(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def create() -> 'XReparentEvent':
        """public static org.lwjgl.system.linux.XReparentEvent org.lwjgl.system.linux.XReparentEvent.create()"""
        return XReparentEvent.__wrap(__XReparentEvent.create())

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XReparentEvent':
        """public static org.lwjgl.system.linux.XReparentEvent org.lwjgl.system.linux.XReparentEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XReparentEvent.__wrap(__XReparentEvent.callocStack(arg0))

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XReparentEvent.ndisplay(long,long)"""
        __XReparentEvent.ndisplay(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XReparentEvent':
        """public static org.lwjgl.system.linux.XReparentEvent org.lwjgl.system.linux.XReparentEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XReparentEvent.__wrap(__XReparentEvent.calloc(arg0))

    @overload
    def event(self) -> int:
        """public long org.lwjgl.system.linux.XReparentEvent.event()"""
        return int.__wrap(super(XReparentEvent, self).event())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @staticmethod
    @overload
    def noverride_redirect(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XReparentEvent.noverride_redirect(long)"""
        return int.__wrap(__XReparentEvent.noverride_redirect(__long.valueOf(arg0)))

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XReparentEvent':
        """public static org.lwjgl.system.linux.XReparentEvent org.lwjgl.system.linux.XReparentEvent.createSafe(long)"""
        return XReparentEvent.__wrap(__XReparentEvent.createSafe(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nparent(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XReparentEvent.nparent(long,long)"""
        __XReparentEvent.nparent(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XReparentEvent$Buffer org.lwjgl.system.linux.XReparentEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XReparentEvent.callocStack(__int.valueOf(arg0), arg1))

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XReparentEvent.window()"""
        return int.__wrap(super(XReparentEvent, self).window())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XReparentEvent(java.nio.ByteBuffer)"""
        val = __XReparentEvent(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def window(self, arg0: int) -> 'XReparentEvent':
        """public org.lwjgl.system.linux.XReparentEvent org.lwjgl.system.linux.XReparentEvent.window(long)"""
        return 'XReparentEvent'.__wrap(super(__XReparentEvent, self).window(__long.valueOf(arg0)))

    @overload
    def type(self, arg0: int) -> 'XReparentEvent':
        """public org.lwjgl.system.linux.XReparentEvent org.lwjgl.system.linux.XReparentEvent.type(int)"""
        return 'XReparentEvent'.__wrap(super(__XReparentEvent, self).type(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nparent(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XReparentEvent.nparent(long)"""
        return int.__wrap(__XReparentEvent.nparent(__long.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XReparentEvent':
        """public static org.lwjgl.system.linux.XReparentEvent org.lwjgl.system.linux.XReparentEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XReparentEvent.__wrap(__XReparentEvent.mallocStack(arg0))

    @overload
    def override_redirect(self) -> int:
        """public int org.lwjgl.system.linux.XReparentEvent.override_redirect()"""
        return int.__wrap(super(XReparentEvent, self).override_redirect())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).address())

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XReparentEvent$Buffer org.lwjgl.system.linux.XReparentEvent.mallocStack(int)"""
        return Buffer.__wrap(__XReparentEvent.mallocStack(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nwindow(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XReparentEvent.nwindow(long,long)"""
        __XReparentEvent.nwindow(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XReparentEvent.validate(long)"""
        __XReparentEvent.validate(__long.valueOf(arg0))

    @staticmethod
    @overload
    def create(arg0: int) -> 'XReparentEvent':
        """public static org.lwjgl.system.linux.XReparentEvent org.lwjgl.system.linux.XReparentEvent.create(long)"""
        return XReparentEvent.__wrap(__XReparentEvent.create(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XReparentEvent$Buffer org.lwjgl.system.linux.XReparentEvent.create(long,int)"""
        return Buffer.__wrap(__XReparentEvent.create(__long.valueOf(arg0), __int.valueOf(arg1)))

    @overload
    def event(self, arg0: int) -> 'XReparentEvent':
        """public org.lwjgl.system.linux.XReparentEvent org.lwjgl.system.linux.XReparentEvent.event(long)"""
        return 'XReparentEvent'.__wrap(super(__XReparentEvent, self).event(__long.valueOf(arg0)))

    @overload
    def set(self, arg0: 'XReparentEvent') -> 'XReparentEvent':
        """public org.lwjgl.system.linux.XReparentEvent org.lwjgl.system.linux.XReparentEvent.set(org.lwjgl.system.linux.XReparentEvent)"""
        return 'XReparentEvent'.__wrap(super(__XReparentEvent, self).set(arg0))

    @staticmethod
    @overload
    def callocStack() -> 'XReparentEvent':
        """public static org.lwjgl.system.linux.XReparentEvent org.lwjgl.system.linux.XReparentEvent.callocStack()"""
        return XReparentEvent.__wrap(__XReparentEvent.callocStack())

    @overload
    def parent(self, arg0: int) -> 'XReparentEvent':
        """public org.lwjgl.system.linux.XReparentEvent org.lwjgl.system.linux.XReparentEvent.parent(long)"""
        return 'XReparentEvent'.__wrap(super(__XReparentEvent, self).parent(__long.valueOf(arg0)))

    @overload
    def y(self) -> int:
        """public int org.lwjgl.system.linux.XReparentEvent.y()"""
        return int.__wrap(super(XReparentEvent, self).y())

    @staticmethod
    @overload
    def ny(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XReparentEvent.ny(long,int)"""
        __XReparentEvent.ny(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def nevent(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XReparentEvent.nevent(long,long)"""
        __XReparentEvent.nevent(__long.valueOf(arg0), __long.valueOf(arg1))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XReparentEvent.type()"""
        return int.__wrap(super(XReparentEvent, self).type())

    @overload
    def serial(self, arg0: int) -> 'XReparentEvent':
        """public org.lwjgl.system.linux.XReparentEvent org.lwjgl.system.linux.XReparentEvent.serial(long)"""
        return 'XReparentEvent'.__wrap(super(__XReparentEvent, self).serial(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nx(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XReparentEvent.nx(long,int)"""
        __XReparentEvent.nx(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str.__wrap(super(pyglsystem.Pointer$Default, self).toString())

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XReparentEvent$Buffer org.lwjgl.system.linux.XReparentEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XReparentEvent.malloc(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def nx(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XReparentEvent.nx(long)"""
        return int.__wrap(__XReparentEvent.nx(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XReparentEvent.ntype(long,int)"""
        __XReparentEvent.ntype(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def ny(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XReparentEvent.ny(long)"""
        return int.__wrap(__XReparentEvent.ny(__long.valueOf(arg0)))

    @overload
    def override_redirect(self, arg0: int) -> 'XReparentEvent':
        """public org.lwjgl.system.linux.XReparentEvent org.lwjgl.system.linux.XReparentEvent.override_redirect(int)"""
        return 'XReparentEvent'.__wrap(super(__XReparentEvent, self).override_redirect(__int.valueOf(arg0)))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: int) -> 'XReparentEvent':
        """public org.lwjgl.system.linux.XReparentEvent org.lwjgl.system.linux.XReparentEvent.set(int,long,boolean,long,long,long,long,int,int,int)"""
        return 'XReparentEvent'.__wrap(super(__XReparentEvent, self).set(__int.valueOf(arg0), __long.valueOf(arg1), __boolean.valueOf(arg2), __long.valueOf(arg3), __long.valueOf(arg4), __long.valueOf(arg5), __long.valueOf(arg6), __int.valueOf(arg7), __int.valueOf(arg8), __int.valueOf(arg9)))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XReparentEvent.nserial(long,long)"""
        __XReparentEvent.nserial(__long.valueOf(arg0), __long.valueOf(arg1))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XReparentEvent.sizeof()"""
        return int.__wrap(super(XReparentEvent, self).sizeof())

    @staticmethod
    @overload
    def mallocStack() -> 'XReparentEvent':
        """public static org.lwjgl.system.linux.XReparentEvent org.lwjgl.system.linux.XReparentEvent.mallocStack()"""
        return XReparentEvent.__wrap(__XReparentEvent.mallocStack())

    @overload
    def parent(self) -> int:
        """public long org.lwjgl.system.linux.XReparentEvent.parent()"""
        return int.__wrap(super(XReparentEvent, self).parent())

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XReparentEvent$Buffer org.lwjgl.system.linux.XReparentEvent.create(int)"""
        return Buffer.__wrap(__XReparentEvent.create(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XReparentEvent$Buffer org.lwjgl.system.linux.XReparentEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XReparentEvent.calloc(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XReparentEvent$Buffer org.lwjgl.system.linux.XReparentEvent.callocStack(int)"""
        return Buffer.__wrap(__XReparentEvent.callocStack(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XReparentEvent.nsend_event(long,int)"""
        __XReparentEvent.nsend_event(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def send_event(self, arg0: bool) -> 'XReparentEvent':
        """public org.lwjgl.system.linux.XReparentEvent org.lwjgl.system.linux.XReparentEvent.send_event(boolean)"""
        return 'XReparentEvent'.__wrap(super(__XReparentEvent, self).send_event(__boolean.valueOf(arg0)))

    @staticmethod
    @overload
    def noverride_redirect(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XReparentEvent.noverride_redirect(long,int)"""
        __XReparentEvent.noverride_redirect(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        __Struct.validate(__long.valueOf(arg0), __int.valueOf(arg1), __int.valueOf(arg2), arg3)

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XReparentEvent.serial()"""
        return int.__wrap(super(XReparentEvent, self).serial())

    @overload
    def x(self, arg0: int) -> 'XReparentEvent':
        """public org.lwjgl.system.linux.XReparentEvent org.lwjgl.system.linux.XReparentEvent.x(int)"""
        return 'XReparentEvent'.__wrap(super(__XReparentEvent, self).x(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XReparentEvent.ndisplay(long)"""
        return int.__wrap(__XReparentEvent.ndisplay(__long.valueOf(arg0))) 
 
 
# CLASS: org.lwjgl.system.linux.LinuxLibrary
from builtins import str
import java.lang.CharSequence as CharSequence
from pyquantum_helper import override
import java.lang.Object as __object
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import java.lang.String as __String
__String = __String
import java.lang.String as __string
import java.lang.Object as __Object
__Object = __Object
import org.lwjgl.system.FunctionProvider as __FunctionProvider
__FunctionProvider = __FunctionProvider
import org.lwjgl.system.SharedLibrary as __SharedLibrary_Default
__Default = __SharedLibrary_Default.Default
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import org.lwjgl.system.linux.LinuxLibrary as __LinuxLibrary
__LinuxLibrary = __LinuxLibrary
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Integer as __int
from builtins import bool
from builtins import int
 
class LinuxLibrary(pyglsystem.__SharedLibrary_Default, pyglsystem.SharedLibrary$Default):
    """org.lwjgl.system.linux.LinuxLibrary"""
 
    @staticmethod
    def __wrap(java_value: __LinuxLibrary) -> 'LinuxLibrary':
        return LinuxLibrary(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __LinuxLibrary):
        """
        Dynamic initializer for LinuxLibrary.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str.__wrap(super(pyglsystem.Pointer$Default, self).toString())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def getName(self) -> str:
        """public java.lang.String org.lwjgl.system.SharedLibrary$Default.getName()"""
        return str.__wrap(super(pyglsystem.SharedLibrary$Default, self).getName())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).address())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.linux.LinuxLibrary.free()"""
        super(LinuxLibrary, self).free()

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def getPath(self) -> str:
        """public java.lang.String org.lwjgl.system.linux.LinuxLibrary.getPath()"""
        return str.__wrap(super(LinuxLibrary, self).getPath())

    @overload
    def getFunctionAddress(self, arg0: 'ByteBuffer') -> int:
        """public long org.lwjgl.system.linux.LinuxLibrary.getFunctionAddress(java.nio.ByteBuffer)"""
        return int.__wrap(super(__LinuxLibrary, self).getFunctionAddress(arg0))

    @overload
    def getFunctionAddress(self, arg0: 'CharSequence') -> int:
        """public default long org.lwjgl.system.FunctionProvider.getFunctionAddress(java.lang.CharSequence)"""
        return int.__wrap(super(__pyglsystem.FunctionProvider, self).getFunctionAddress(arg0))

    @overload
    def __init__(self, arg0: str):
        """public org.lwjgl.system.linux.LinuxLibrary(java.lang.String)"""
        val = __LinuxLibrary(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def __init__(self, arg0: str, arg1: int):
        """public org.lwjgl.system.linux.LinuxLibrary(java.lang.String,long)"""
        val = __LinuxLibrary(arg0, __long.valueOf(arg1))
        self.__dict__ = val.__dict__
        self.__wrapper = val 
 
 
# CLASS: org.lwjgl.system.linux.UIO
from builtins import str
import java.lang.Long as __long
from pyquantum_helper import override
import java.lang.Class as __Class
__Class = __Class
import java.lang.Object as __object
import java.lang.String as __String
__String = __String
from builtins import type
import java.lang.Object as __Object
__Object = __Object
import org.lwjgl.system.linux.UIO as __UIO
__UIO = __UIO
import java.lang.Integer as __int
from builtins import bool
from builtins import int
 
class UIO():
    """org.lwjgl.system.linux.UIO"""
 
    @staticmethod
    def __wrap(java_value: __UIO) -> 'UIO':
        return UIO(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __UIO):
        """
        Dynamic initializer for UIO.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def nprocess_vm_readv(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int) -> int:
        """public static native long org.lwjgl.system.linux.UIO.nprocess_vm_readv(int,long,long,long,long,long)"""
        return int.__wrap(__UIO.nprocess_vm_readv(__int.valueOf(arg0), __long.valueOf(arg1), __long.valueOf(arg2), __long.valueOf(arg3), __long.valueOf(arg4), __long.valueOf(arg5)))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def nwritev(arg0: int, arg1: int, arg2: int) -> int:
        """public static native long org.lwjgl.system.linux.UIO.nwritev(int,long,int)"""
        return int.__wrap(__UIO.nwritev(__int.valueOf(arg0), __long.valueOf(arg1), __int.valueOf(arg2)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.lang.Object.toString()"""
        return str.__wrap(super(object, self).toString())

    @staticmethod
    @overload
    def preadv(arg0: int, arg1: 'IOVec', arg2: int, arg3: int) -> int:
        """public static long org.lwjgl.system.linux.UIO.preadv(int,org.lwjgl.system.linux.IOVec,int,long)"""
        return int.__wrap(__UIO.preadv(__int.valueOf(arg0), arg1, __int.valueOf(arg2), __long.valueOf(arg3)))

    @staticmethod
    @overload
    def readv(arg0: int, arg1: 'IOVec', arg2: int) -> int:
        """public static long org.lwjgl.system.linux.UIO.readv(int,org.lwjgl.system.linux.IOVec,int)"""
        return int.__wrap(__UIO.readv(__int.valueOf(arg0), arg1, __int.valueOf(arg2)))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def process_vm_readv(arg0: int, arg1: 'IOVec', arg2: int, arg3: 'IOVec', arg4: int, arg5: int) -> int:
        """public static long org.lwjgl.system.linux.UIO.process_vm_readv(int,org.lwjgl.system.linux.IOVec,long,org.lwjgl.system.linux.IOVec,long,long)"""
        return int.__wrap(__UIO.process_vm_readv(__int.valueOf(arg0), arg1, __long.valueOf(arg2), arg3, __long.valueOf(arg4), __long.valueOf(arg5)))

    @staticmethod
    @overload
    def nprocess_vm_writev(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int) -> int:
        """public static native long org.lwjgl.system.linux.UIO.nprocess_vm_writev(int,long,long,long,long,long)"""
        return int.__wrap(__UIO.nprocess_vm_writev(__int.valueOf(arg0), __long.valueOf(arg1), __long.valueOf(arg2), __long.valueOf(arg3), __long.valueOf(arg4), __long.valueOf(arg5)))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @staticmethod
    @overload
    def npwritev(arg0: int, arg1: int, arg2: int, arg3: int) -> int:
        """public static native long org.lwjgl.system.linux.UIO.npwritev(int,long,int,long)"""
        return int.__wrap(__UIO.npwritev(__int.valueOf(arg0), __long.valueOf(arg1), __int.valueOf(arg2), __long.valueOf(arg3)))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @staticmethod
    @overload
    def nreadv(arg0: int, arg1: int, arg2: int) -> int:
        """public static native long org.lwjgl.system.linux.UIO.nreadv(int,long,int)"""
        return int.__wrap(__UIO.nreadv(__int.valueOf(arg0), __long.valueOf(arg1), __int.valueOf(arg2)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def writev(arg0: int, arg1: 'IOVec', arg2: int) -> int:
        """public static long org.lwjgl.system.linux.UIO.writev(int,org.lwjgl.system.linux.IOVec,int)"""
        return int.__wrap(__UIO.writev(__int.valueOf(arg0), arg1, __int.valueOf(arg2)))

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @staticmethod
    @overload
    def process_vm_writev(arg0: int, arg1: 'IOVec', arg2: int, arg3: 'IOVec', arg4: int, arg5: int) -> int:
        """public static long org.lwjgl.system.linux.UIO.process_vm_writev(int,org.lwjgl.system.linux.IOVec,long,org.lwjgl.system.linux.IOVec,long,long)"""
        return int.__wrap(__UIO.process_vm_writev(__int.valueOf(arg0), arg1, __long.valueOf(arg2), arg3, __long.valueOf(arg4), __long.valueOf(arg5)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def npreadv(arg0: int, arg1: int, arg2: int, arg3: int) -> int:
        """public static native long org.lwjgl.system.linux.UIO.npreadv(int,long,int,long)"""
        return int.__wrap(__UIO.npreadv(__int.valueOf(arg0), __long.valueOf(arg1), __int.valueOf(arg2), __long.valueOf(arg3)))

    @staticmethod
    @overload
    def pwritev(arg0: int, arg1: 'IOVec', arg2: int, arg3: int) -> int:
        """public static long org.lwjgl.system.linux.UIO.pwritev(int,org.lwjgl.system.linux.IOVec,int,long)"""
        return int.__wrap(__UIO.pwritev(__int.valueOf(arg0), arg1, __int.valueOf(arg2), __long.valueOf(arg3)))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0)) 
 
 
# CLASS: org.lwjgl.system.linux.EpollData$Buffer
from pyquantum_helper import import_once as __import_once__
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import java.util.stream.Stream as __Stream
__Stream = __Stream
import org.lwjgl.system.StructBuffer as __StructBuffer
__StructBuffer = __StructBuffer
import org.lwjgl.system.linux.EpollData as __EpollData_Buffer
__Buffer = __EpollData_Buffer.Buffer
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.CustomBuffer as __CustomBuffer
__CustomBuffer = __CustomBuffer
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.util.Iterator as __Iterator
__Iterator = __Iterator
import java.lang.Object as __object
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.util.Iterator as Iterator
import java.util.Spliterator as __Spliterator
__Spliterator = __Spliterator
import java.lang.Long as __long
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import java.util.stream.Stream as Stream
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import int
 
class Buffer(pyglsystem.__StructBuffer, pyglsystem.StructBuffer, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.EpollData.Buffer"""
 
    @staticmethod
    def __wrap(java_value: __Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(__pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0), arg1))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int.__wrap(super(__pyglsystem.CustomBuffer, self).address(__int.valueOf(arg0)))

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(__int.valueOf(arg0), arg1))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int.__wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(arg0))

    @overload
    def ptr(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.EpollData$Buffer org.lwjgl.system.linux.EpollData$Buffer.ptr(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).ptr(__long.valueOf(arg0)))

    @overload
    def ptr(self) -> int:
        """public long org.lwjgl.system.linux.EpollData$Buffer.ptr()"""
        return int.__wrap(super(Buffer, self).ptr())

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.EpollData$Buffer(long,int)"""
        val = __Buffer(__long.valueOf(arg0), __int.valueOf(arg1))
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.EpollData$Buffer(java.nio.ByteBuffer)"""
        val = __Buffer(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool.__wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @overload
    def fd(self) -> int:
        """public int org.lwjgl.system.linux.EpollData$Buffer.fd()"""
        return int.__wrap(super(Buffer, self).fd())

    @overload
    def u32(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.EpollData$Buffer org.lwjgl.system.linux.EpollData$Buffer.u32(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).u32(__int.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def fd(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.EpollData$Buffer org.lwjgl.system.linux.EpollData$Buffer.fd(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).fd(__int.valueOf(arg0)))

    @overload
    def u64(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.EpollData$Buffer org.lwjgl.system.linux.EpollData$Buffer.u64(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).u64(__long.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).position(__int.valueOf(arg0)))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0)))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).clear())

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(__int.valueOf(arg0), arg1))

    @overload
    def u32(self) -> int:
        """public int org.lwjgl.system.linux.EpollData$Buffer.u32()"""
        return int.__wrap(super(Buffer, self).u32())

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).slice())

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).compact())

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'.__wrap(super(pyglsystem.StructBuffer, self).get())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).limit(__int.valueOf(arg0)))

    @overload
    def u64(self) -> int:
        """public long org.lwjgl.system.linux.EpollData$Buffer.u64()"""
        return int.__wrap(super(Buffer, self).u64())

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'.__wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str.__wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(arg0))

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).stream())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'.__wrap(super(pyglsystem.StructBuffer, self).iterator())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).slice(__int.valueOf(arg0), __int.valueOf(arg1))) 
 
 
# CLASS: org.lwjgl.system.linux.XPropertyEvent
from pyquantum_helper import import_once as __import_once__
from builtins import str
import java.lang.Boolean as __boolean
from pyquantum_helper import override
import java.lang.Object as __object
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import org.lwjgl.system.linux.XPropertyEvent as __XPropertyEvent_Buffer
__Buffer = __XPropertyEvent_Buffer.Buffer
import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import org.lwjgl.system.linux.XPropertyEvent as __XPropertyEvent
__XPropertyEvent = __XPropertyEvent
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
from builtins import int
 
class XPropertyEvent(pyglsystem.__Struct, pyglsystem.Struct, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XPropertyEvent"""
 
    @staticmethod
    def __wrap(java_value: __XPropertyEvent) -> 'XPropertyEvent':
        return XPropertyEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __XPropertyEvent):
        """
        Dynamic initializer for XPropertyEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def callocStack() -> 'XPropertyEvent':
        """public static org.lwjgl.system.linux.XPropertyEvent org.lwjgl.system.linux.XPropertyEvent.callocStack()"""
        return XPropertyEvent.__wrap(__XPropertyEvent.callocStack())

    @staticmethod
    @overload
    def mallocStack() -> 'XPropertyEvent':
        """public static org.lwjgl.system.linux.XPropertyEvent org.lwjgl.system.linux.XPropertyEvent.mallocStack()"""
        return XPropertyEvent.__wrap(__XPropertyEvent.mallocStack())

    @overload
    def serial(self, arg0: int) -> 'XPropertyEvent':
        """public org.lwjgl.system.linux.XPropertyEvent org.lwjgl.system.linux.XPropertyEvent.serial(long)"""
        return 'XPropertyEvent'.__wrap(super(__XPropertyEvent, self).serial(__long.valueOf(arg0)))

    @overload
    def state(self) -> int:
        """public int org.lwjgl.system.linux.XPropertyEvent.state()"""
        return int.__wrap(super(XPropertyEvent, self).state())

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XPropertyEvent':
        """public static org.lwjgl.system.linux.XPropertyEvent org.lwjgl.system.linux.XPropertyEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XPropertyEvent.__wrap(__XPropertyEvent.calloc(arg0))

    @overload
    def atom(self) -> int:
        """public long org.lwjgl.system.linux.XPropertyEvent.atom()"""
        return int.__wrap(super(XPropertyEvent, self).atom())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XPropertyEvent$Buffer org.lwjgl.system.linux.XPropertyEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XPropertyEvent.calloc(__int.valueOf(arg0), arg1))

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool.__wrap(super(__pyglsystem.Struct, self).isNull(__int.valueOf(arg0)))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XPropertyEvent':
        """public static org.lwjgl.system.linux.XPropertyEvent org.lwjgl.system.linux.XPropertyEvent.createSafe(long)"""
        return XPropertyEvent.__wrap(__XPropertyEvent.createSafe(__long.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def ntime(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XPropertyEvent.ntime(long,long)"""
        __XPropertyEvent.ntime(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XPropertyEvent$Buffer org.lwjgl.system.linux.XPropertyEvent.callocStack(int)"""
        return Buffer.__wrap(__XPropertyEvent.callocStack(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XPropertyEvent$Buffer org.lwjgl.system.linux.XPropertyEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XPropertyEvent.callocStack(__int.valueOf(arg0), arg1))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XPropertyEvent(java.nio.ByteBuffer)"""
        val = __XPropertyEvent(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int) -> 'XPropertyEvent':
        """public org.lwjgl.system.linux.XPropertyEvent org.lwjgl.system.linux.XPropertyEvent.set(int,long,boolean,long,long,long,long,int)"""
        return 'XPropertyEvent'.__wrap(super(__XPropertyEvent, self).set(__int.valueOf(arg0), __long.valueOf(arg1), __boolean.valueOf(arg2), __long.valueOf(arg3), __long.valueOf(arg4), __long.valueOf(arg5), __long.valueOf(arg6), __int.valueOf(arg7)))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XPropertyEvent.serial()"""
        return int.__wrap(super(XPropertyEvent, self).serial())

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XPropertyEvent.send_event()"""
        return bool.__wrap(super(XPropertyEvent, self).send_event())

    @staticmethod
    @overload
    def natom(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XPropertyEvent.natom(long,long)"""
        __XPropertyEvent.natom(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def natom(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XPropertyEvent.natom(long)"""
        return int.__wrap(__XPropertyEvent.natom(__long.valueOf(arg0)))

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XPropertyEvent.display()"""
        return int.__wrap(super(XPropertyEvent, self).display())

    @staticmethod
    @overload
    def calloc() -> 'XPropertyEvent':
        """public static org.lwjgl.system.linux.XPropertyEvent org.lwjgl.system.linux.XPropertyEvent.calloc()"""
        return XPropertyEvent.__wrap(__XPropertyEvent.calloc())

    @overload
    def set(self, arg0: 'XPropertyEvent') -> 'XPropertyEvent':
        """public org.lwjgl.system.linux.XPropertyEvent org.lwjgl.system.linux.XPropertyEvent.set(org.lwjgl.system.linux.XPropertyEvent)"""
        return 'XPropertyEvent'.__wrap(super(__XPropertyEvent, self).set(arg0))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def time(self, arg0: int) -> 'XPropertyEvent':
        """public org.lwjgl.system.linux.XPropertyEvent org.lwjgl.system.linux.XPropertyEvent.time(long)"""
        return 'XPropertyEvent'.__wrap(super(__XPropertyEvent, self).time(__long.valueOf(arg0)))

    @overload
    def time(self) -> int:
        """public long org.lwjgl.system.linux.XPropertyEvent.time()"""
        return int.__wrap(super(XPropertyEvent, self).time())

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XPropertyEvent.ndisplay(long)"""
        return int.__wrap(__XPropertyEvent.ndisplay(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc() -> 'XPropertyEvent':
        """public static org.lwjgl.system.linux.XPropertyEvent org.lwjgl.system.linux.XPropertyEvent.malloc()"""
        return XPropertyEvent.__wrap(__XPropertyEvent.malloc())

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XPropertyEvent$Buffer org.lwjgl.system.linux.XPropertyEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XPropertyEvent.malloc(__int.valueOf(arg0), arg1))

    @overload
    def send_event(self, arg0: bool) -> 'XPropertyEvent':
        """public org.lwjgl.system.linux.XPropertyEvent org.lwjgl.system.linux.XPropertyEvent.send_event(boolean)"""
        return 'XPropertyEvent'.__wrap(super(__XPropertyEvent, self).send_event(__boolean.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def window(self, arg0: int) -> 'XPropertyEvent':
        """public org.lwjgl.system.linux.XPropertyEvent org.lwjgl.system.linux.XPropertyEvent.window(long)"""
        return 'XPropertyEvent'.__wrap(super(__XPropertyEvent, self).window(__long.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def nwindow(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XPropertyEvent.nwindow(long)"""
        return int.__wrap(__XPropertyEvent.nwindow(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XPropertyEvent.ndisplay(long,long)"""
        __XPropertyEvent.ndisplay(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XPropertyEvent$Buffer org.lwjgl.system.linux.XPropertyEvent.createSafe(long,int)"""
        return Buffer.__wrap(__XPropertyEvent.createSafe(__long.valueOf(arg0), __int.valueOf(arg1)))

    @overload
    def type(self, arg0: int) -> 'XPropertyEvent':
        """public org.lwjgl.system.linux.XPropertyEvent org.lwjgl.system.linux.XPropertyEvent.type(int)"""
        return 'XPropertyEvent'.__wrap(super(__XPropertyEvent, self).type(__int.valueOf(arg0)))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XPropertyEvent.type()"""
        return int.__wrap(super(XPropertyEvent, self).type())

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XPropertyEvent.nserial(long)"""
        return int.__wrap(__XPropertyEvent.nserial(__long.valueOf(arg0)))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).address())

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XPropertyEvent':
        """public static org.lwjgl.system.linux.XPropertyEvent org.lwjgl.system.linux.XPropertyEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XPropertyEvent.__wrap(__XPropertyEvent.callocStack(arg0))

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XPropertyEvent$Buffer org.lwjgl.system.linux.XPropertyEvent.malloc(int)"""
        return Buffer.__wrap(__XPropertyEvent.malloc(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XPropertyEvent$Buffer org.lwjgl.system.linux.XPropertyEvent.create(long,int)"""
        return Buffer.__wrap(__XPropertyEvent.create(__long.valueOf(arg0), __int.valueOf(arg1)))

    @staticmethod
    @overload
    def ntime(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XPropertyEvent.ntime(long)"""
        return int.__wrap(__XPropertyEvent.ntime(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XPropertyEvent.ntype(long)"""
        return int.__wrap(__XPropertyEvent.ntype(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nstate(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XPropertyEvent.nstate(long,int)"""
        __XPropertyEvent.nstate(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XPropertyEvent$Buffer org.lwjgl.system.linux.XPropertyEvent.calloc(int)"""
        return Buffer.__wrap(__XPropertyEvent.calloc(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XPropertyEvent.nserial(long,long)"""
        __XPropertyEvent.nserial(__long.valueOf(arg0), __long.valueOf(arg1))

    @overload
    def state(self, arg0: int) -> 'XPropertyEvent':
        """public org.lwjgl.system.linux.XPropertyEvent org.lwjgl.system.linux.XPropertyEvent.state(int)"""
        return 'XPropertyEvent'.__wrap(super(__XPropertyEvent, self).state(__int.valueOf(arg0)))

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XPropertyEvent.window()"""
        return int.__wrap(super(XPropertyEvent, self).window())

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XPropertyEvent$Buffer org.lwjgl.system.linux.XPropertyEvent.create(int)"""
        return Buffer.__wrap(__XPropertyEvent.create(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XPropertyEvent.validate(long)"""
        __XPropertyEvent.validate(__long.valueOf(arg0))

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XPropertyEvent.ntype(long,int)"""
        __XPropertyEvent.ntype(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def nwindow(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XPropertyEvent.nwindow(long,long)"""
        __XPropertyEvent.nwindow(__long.valueOf(arg0), __long.valueOf(arg1))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XPropertyEvent.sizeof()"""
        return int.__wrap(super(XPropertyEvent, self).sizeof())

    @overload
    def display(self, arg0: int) -> 'XPropertyEvent':
        """public org.lwjgl.system.linux.XPropertyEvent org.lwjgl.system.linux.XPropertyEvent.display(long)"""
        return 'XPropertyEvent'.__wrap(super(__XPropertyEvent, self).display(__long.valueOf(arg0)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str.__wrap(super(pyglsystem.Pointer$Default, self).toString())

    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XPropertyEvent.nsend_event(long)"""
        return int.__wrap(__XPropertyEvent.nsend_event(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XPropertyEvent.nsend_event(long,int)"""
        __XPropertyEvent.nsend_event(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @staticmethod
    @overload
    def nstate(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XPropertyEvent.nstate(long)"""
        return int.__wrap(__XPropertyEvent.nstate(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XPropertyEvent$Buffer org.lwjgl.system.linux.XPropertyEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XPropertyEvent.mallocStack(__int.valueOf(arg0), arg1))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XPropertyEvent':
        """public static org.lwjgl.system.linux.XPropertyEvent org.lwjgl.system.linux.XPropertyEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XPropertyEvent.__wrap(__XPropertyEvent.mallocStack(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @staticmethod
    @overload
    def create() -> 'XPropertyEvent':
        """public static org.lwjgl.system.linux.XPropertyEvent org.lwjgl.system.linux.XPropertyEvent.create()"""
        return XPropertyEvent.__wrap(__XPropertyEvent.create())

    @staticmethod
    @overload
    def create(arg0: int) -> 'XPropertyEvent':
        """public static org.lwjgl.system.linux.XPropertyEvent org.lwjgl.system.linux.XPropertyEvent.create(long)"""
        return XPropertyEvent.__wrap(__XPropertyEvent.create(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        __Struct.validate(__long.valueOf(arg0), __int.valueOf(arg1), __int.valueOf(arg2), arg3)

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XPropertyEvent$Buffer org.lwjgl.system.linux.XPropertyEvent.mallocStack(int)"""
        return Buffer.__wrap(__XPropertyEvent.mallocStack(__int.valueOf(arg0)))

    @overload
    def atom(self, arg0: int) -> 'XPropertyEvent':
        """public org.lwjgl.system.linux.XPropertyEvent org.lwjgl.system.linux.XPropertyEvent.atom(long)"""
        return 'XPropertyEvent'.__wrap(super(__XPropertyEvent, self).atom(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XPropertyEvent':
        """public static org.lwjgl.system.linux.XPropertyEvent org.lwjgl.system.linux.XPropertyEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XPropertyEvent.__wrap(__XPropertyEvent.malloc(arg0)) 
 
 
# CLASS: org.lwjgl.system.linux.XSelectionEvent$Buffer
from pyquantum_helper import import_once as __import_once__
import java.lang.Boolean as __boolean
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import java.util.stream.Stream as __Stream
__Stream = __Stream
import org.lwjgl.system.linux.XSelectionEvent as __XSelectionEvent_Buffer
__Buffer = __XSelectionEvent_Buffer.Buffer
import org.lwjgl.system.StructBuffer as __StructBuffer
__StructBuffer = __StructBuffer
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.CustomBuffer as __CustomBuffer
__CustomBuffer = __CustomBuffer
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.util.Iterator as __Iterator
__Iterator = __Iterator
import java.lang.Object as __object
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.util.Iterator as Iterator
import java.util.Spliterator as __Spliterator
__Spliterator = __Spliterator
import java.lang.Long as __long
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import java.util.stream.Stream as Stream
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import int
 
class Buffer(pyglsystem.__StructBuffer, pyglsystem.StructBuffer, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XSelectionEvent.Buffer"""
 
    @staticmethod
    def __wrap(java_value: __Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def property(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionEvent$Buffer.property()"""
        return int.__wrap(super(Buffer, self).property())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(arg0))

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XSelectionEvent$Buffer org.lwjgl.system.linux.XSelectionEvent$Buffer.send_event(boolean)"""
        return 'Buffer'.__wrap(super(__Buffer, self).send_event(__boolean.valueOf(arg0)))

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(__pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def requestor(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionEvent$Buffer.requestor()"""
        return int.__wrap(super(Buffer, self).requestor())

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0), arg1))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSelectionEvent$Buffer org.lwjgl.system.linux.XSelectionEvent$Buffer.display(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).display(__long.valueOf(arg0)))

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int.__wrap(super(__pyglsystem.CustomBuffer, self).address(__int.valueOf(arg0)))

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(__int.valueOf(arg0), arg1))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int.__wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(arg0))

    @overload
    def selection(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionEvent$Buffer.selection()"""
        return int.__wrap(super(Buffer, self).selection())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool.__wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSelectionEvent$Buffer org.lwjgl.system.linux.XSelectionEvent$Buffer.type(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).type(__int.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def target(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionEvent$Buffer.target()"""
        return int.__wrap(super(Buffer, self).target())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).position(__int.valueOf(arg0)))

    @overload
    def property(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSelectionEvent$Buffer org.lwjgl.system.linux.XSelectionEvent$Buffer.property(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).property(__long.valueOf(arg0)))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XSelectionEvent$Buffer.send_event()"""
        return bool.__wrap(super(Buffer, self).send_event())

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0)))

    @overload
    def target(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSelectionEvent$Buffer org.lwjgl.system.linux.XSelectionEvent$Buffer.target(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).target(__long.valueOf(arg0)))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).clear())

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionEvent$Buffer.serial()"""
        return int.__wrap(super(Buffer, self).serial())

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(__int.valueOf(arg0), arg1))

    @overload
    def time(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSelectionEvent$Buffer org.lwjgl.system.linux.XSelectionEvent$Buffer.time(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).time(__long.valueOf(arg0)))

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XSelectionEvent$Buffer(long,int)"""
        val = __Buffer(__long.valueOf(arg0), __int.valueOf(arg1))
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XSelectionEvent$Buffer(java.nio.ByteBuffer)"""
        val = __Buffer(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).slice())

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSelectionEvent$Buffer org.lwjgl.system.linux.XSelectionEvent$Buffer.serial(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).serial(__long.valueOf(arg0)))

    @overload
    def requestor(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSelectionEvent$Buffer org.lwjgl.system.linux.XSelectionEvent$Buffer.requestor(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).requestor(__long.valueOf(arg0)))

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionEvent$Buffer.display()"""
        return int.__wrap(super(Buffer, self).display())

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'.__wrap(super(pyglsystem.StructBuffer, self).get())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).limit(__int.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'.__wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str.__wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @overload
    def selection(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSelectionEvent$Buffer org.lwjgl.system.linux.XSelectionEvent$Buffer.selection(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).selection(__long.valueOf(arg0)))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def time(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionEvent$Buffer.time()"""
        return int.__wrap(super(Buffer, self).time())

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(arg0))

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).stream())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'.__wrap(super(pyglsystem.StructBuffer, self).iterator())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).slice(__int.valueOf(arg0), __int.valueOf(arg1)))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XSelectionEvent$Buffer.type()"""
        return int.__wrap(super(Buffer, self).type()) 
 
 
# CLASS: org.lwjgl.system.linux.Msghdr$Buffer
from pyquantum_helper import import_once as __import_once__
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import java.nio.ByteBuffer as __ByteBuffer
__ByteBuffer = __ByteBuffer
import java.util.stream.Stream as __Stream
__Stream = __Stream
import org.lwjgl.system.StructBuffer as __StructBuffer
__StructBuffer = __StructBuffer
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.CustomBuffer as __CustomBuffer
__CustomBuffer = __CustomBuffer
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.util.Iterator as __Iterator
__Iterator = __Iterator
import java.lang.Object as __object
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.util.Iterator as Iterator
import java.util.Spliterator as __Spliterator
__Spliterator = __Spliterator
import java.lang.Long as __long
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import org.lwjgl.system.linux.IOVec as __IOVec_Buffer
__Buffer = __IOVec_Buffer.Buffer
import java.lang.Object as __Object
__Object = __Object
import org.lwjgl.system.linux.Msghdr as __Msghdr_Buffer
__Buffer = __Msghdr_Buffer.Buffer
import java.util.stream.Stream as Stream
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Integer as __int
from builtins import int
 
class Buffer(pyglsystem.__StructBuffer, pyglsystem.StructBuffer, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.Msghdr.Buffer"""
 
    @staticmethod
    def __wrap(java_value: __Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(__pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0), arg1))

    @overload
    def msg_namelen(self) -> int:
        """public int org.lwjgl.system.linux.Msghdr$Buffer.msg_namelen()"""
        return int.__wrap(super(Buffer, self).msg_namelen())

    @overload
    def msg_control(self) -> 'ByteBuffer':
        """public java.nio.ByteBuffer org.lwjgl.system.linux.Msghdr$Buffer.msg_control()"""
        return 'ByteBuffer'.__wrap(super(Buffer, self).msg_control())

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address0())

    @overload
    def msg_iov(self, arg0: 'Buffer') -> 'Buffer':
        """public org.lwjgl.system.linux.Msghdr$Buffer org.lwjgl.system.linux.Msghdr$Buffer.msg_iov(org.lwjgl.system.linux.IOVec$Buffer)"""
        return 'Buffer'.__wrap(super(__Buffer, self).msg_iov(arg0))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int.__wrap(super(__pyglsystem.CustomBuffer, self).address(__int.valueOf(arg0)))

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(__int.valueOf(arg0), arg1))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int.__wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(arg0))

    @overload
    def msg_iov(self) -> 'Buffer':
        """public org.lwjgl.system.linux.IOVec$Buffer org.lwjgl.system.linux.Msghdr$Buffer.msg_iov()"""
        return 'Buffer'.__wrap(super(Buffer, self).msg_iov())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool.__wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).position(__int.valueOf(arg0)))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0)))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).clear())

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(__int.valueOf(arg0), arg1))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.Msghdr$Buffer(java.nio.ByteBuffer)"""
        val = __Buffer(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def msg_iovlen(self) -> int:
        """public long org.lwjgl.system.linux.Msghdr$Buffer.msg_iovlen()"""
        return int.__wrap(super(Buffer, self).msg_iovlen())

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address())

    @overload
    def msg_flags(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Msghdr$Buffer org.lwjgl.system.linux.Msghdr$Buffer.msg_flags(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).msg_flags(__int.valueOf(arg0)))

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.Msghdr$Buffer(long,int)"""
        val = __Buffer(__long.valueOf(arg0), __int.valueOf(arg1))
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).slice())

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def msg_controllen(self) -> int:
        """public long org.lwjgl.system.linux.Msghdr$Buffer.msg_controllen()"""
        return int.__wrap(super(Buffer, self).msg_controllen())

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'.__wrap(super(pyglsystem.StructBuffer, self).get())

    @overload
    def msg_name(self) -> 'ByteBuffer':
        """public java.nio.ByteBuffer org.lwjgl.system.linux.Msghdr$Buffer.msg_name()"""
        return 'ByteBuffer'.__wrap(super(Buffer, self).msg_name())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).limit(__int.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'.__wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str.__wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @overload
    def msg_name(self, arg0: 'ByteBuffer') -> 'Buffer':
        """public org.lwjgl.system.linux.Msghdr$Buffer org.lwjgl.system.linux.Msghdr$Buffer.msg_name(java.nio.ByteBuffer)"""
        return 'Buffer'.__wrap(super(__Buffer, self).msg_name(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(arg0))

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).stream())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'.__wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def msg_flags(self) -> int:
        """public int org.lwjgl.system.linux.Msghdr$Buffer.msg_flags()"""
        return int.__wrap(super(Buffer, self).msg_flags())

    @overload
    def msg_control(self, arg0: 'ByteBuffer') -> 'Buffer':
        """public org.lwjgl.system.linux.Msghdr$Buffer org.lwjgl.system.linux.Msghdr$Buffer.msg_control(java.nio.ByteBuffer)"""
        return 'Buffer'.__wrap(super(__Buffer, self).msg_control(arg0))

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).slice(__int.valueOf(arg0), __int.valueOf(arg1))) 
 
 
# CLASS: org.lwjgl.system.linux.XGenericEvent
from pyquantum_helper import import_once as __import_once__
from builtins import str
import java.lang.Boolean as __boolean
from pyquantum_helper import override
import java.lang.Object as __object
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import org.lwjgl.system.linux.XGenericEvent as __XGenericEvent
__XGenericEvent = __XGenericEvent
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import org.lwjgl.system.linux.XGenericEvent as __XGenericEvent_Buffer
__Buffer = __XGenericEvent_Buffer.Buffer
import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
from builtins import int
 
class XGenericEvent(pyglsystem.__Struct, pyglsystem.Struct, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XGenericEvent"""
 
    @staticmethod
    def __wrap(java_value: __XGenericEvent) -> 'XGenericEvent':
        return XGenericEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __XGenericEvent):
        """
        Dynamic initializer for XGenericEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XGenericEvent.nsend_event(long)"""
        return int.__wrap(__XGenericEvent.nsend_event(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc() -> 'XGenericEvent':
        """public static org.lwjgl.system.linux.XGenericEvent org.lwjgl.system.linux.XGenericEvent.calloc()"""
        return XGenericEvent.__wrap(__XGenericEvent.calloc())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def display(self, arg0: int) -> 'XGenericEvent':
        """public org.lwjgl.system.linux.XGenericEvent org.lwjgl.system.linux.XGenericEvent.display(long)"""
        return 'XGenericEvent'.__wrap(super(__XGenericEvent, self).display(__long.valueOf(arg0)))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XGenericEvent.send_event()"""
        return bool.__wrap(super(XGenericEvent, self).send_event())

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool.__wrap(super(__pyglsystem.Struct, self).isNull(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nextension(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XGenericEvent.nextension(long)"""
        return int.__wrap(__XGenericEvent.nextension(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XGenericEvent':
        """public static org.lwjgl.system.linux.XGenericEvent org.lwjgl.system.linux.XGenericEvent.createSafe(long)"""
        return XGenericEvent.__wrap(__XGenericEvent.createSafe(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XGenericEvent$Buffer org.lwjgl.system.linux.XGenericEvent.callocStack(int)"""
        return Buffer.__wrap(__XGenericEvent.callocStack(__int.valueOf(arg0)))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XGenericEvent.sizeof()"""
        return int.__wrap(super(XGenericEvent, self).sizeof())

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XGenericEvent.ndisplay(long)"""
        return int.__wrap(__XGenericEvent.ndisplay(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc() -> 'XGenericEvent':
        """public static org.lwjgl.system.linux.XGenericEvent org.lwjgl.system.linux.XGenericEvent.malloc()"""
        return XGenericEvent.__wrap(__XGenericEvent.malloc())

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XGenericEvent':
        """public static org.lwjgl.system.linux.XGenericEvent org.lwjgl.system.linux.XGenericEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XGenericEvent.__wrap(__XGenericEvent.callocStack(arg0))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XGenericEvent':
        """public static org.lwjgl.system.linux.XGenericEvent org.lwjgl.system.linux.XGenericEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XGenericEvent.__wrap(__XGenericEvent.calloc(arg0))

    @staticmethod
    @overload
    def callocStack() -> 'XGenericEvent':
        """public static org.lwjgl.system.linux.XGenericEvent org.lwjgl.system.linux.XGenericEvent.callocStack()"""
        return XGenericEvent.__wrap(__XGenericEvent.callocStack())

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XGenericEvent$Buffer org.lwjgl.system.linux.XGenericEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XGenericEvent.callocStack(__int.valueOf(arg0), arg1))

    @overload
    def set(self, arg0: 'XGenericEvent') -> 'XGenericEvent':
        """public org.lwjgl.system.linux.XGenericEvent org.lwjgl.system.linux.XGenericEvent.set(org.lwjgl.system.linux.XGenericEvent)"""
        return 'XGenericEvent'.__wrap(super(__XGenericEvent, self).set(arg0))

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XGenericEvent.display()"""
        return int.__wrap(super(XGenericEvent, self).display())

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XGenericEvent$Buffer org.lwjgl.system.linux.XGenericEvent.calloc(int)"""
        return Buffer.__wrap(__XGenericEvent.calloc(__int.valueOf(arg0)))

    @overload
    def send_event(self, arg0: bool) -> 'XGenericEvent':
        """public org.lwjgl.system.linux.XGenericEvent org.lwjgl.system.linux.XGenericEvent.send_event(boolean)"""
        return 'XGenericEvent'.__wrap(super(__XGenericEvent, self).send_event(__boolean.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XGenericEvent$Buffer org.lwjgl.system.linux.XGenericEvent.create(int)"""
        return Buffer.__wrap(__XGenericEvent.create(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XGenericEvent.nserial(long)"""
        return int.__wrap(__XGenericEvent.nserial(__long.valueOf(arg0)))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XGenericEvent(java.nio.ByteBuffer)"""
        val = __XGenericEvent(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def extension(self, arg0: int) -> 'XGenericEvent':
        """public org.lwjgl.system.linux.XGenericEvent org.lwjgl.system.linux.XGenericEvent.extension(int)"""
        return 'XGenericEvent'.__wrap(super(__XGenericEvent, self).extension(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGenericEvent.ntype(long,int)"""
        __XGenericEvent.ntype(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XGenericEvent':
        """public static org.lwjgl.system.linux.XGenericEvent org.lwjgl.system.linux.XGenericEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XGenericEvent.__wrap(__XGenericEvent.malloc(arg0))

    @overload
    def evtype(self) -> int:
        """public int org.lwjgl.system.linux.XGenericEvent.evtype()"""
        return int.__wrap(super(XGenericEvent, self).evtype())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def create() -> 'XGenericEvent':
        """public static org.lwjgl.system.linux.XGenericEvent org.lwjgl.system.linux.XGenericEvent.create()"""
        return XGenericEvent.__wrap(__XGenericEvent.create())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGenericEvent.nsend_event(long,int)"""
        __XGenericEvent.nsend_event(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def evtype(self, arg0: int) -> 'XGenericEvent':
        """public org.lwjgl.system.linux.XGenericEvent org.lwjgl.system.linux.XGenericEvent.evtype(int)"""
        return 'XGenericEvent'.__wrap(super(__XGenericEvent, self).evtype(__int.valueOf(arg0)))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XGenericEvent.serial()"""
        return int.__wrap(super(XGenericEvent, self).serial())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).address())

    @overload
    def type(self, arg0: int) -> 'XGenericEvent':
        """public org.lwjgl.system.linux.XGenericEvent org.lwjgl.system.linux.XGenericEvent.type(int)"""
        return 'XGenericEvent'.__wrap(super(__XGenericEvent, self).type(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGenericEvent.ndisplay(long,long)"""
        __XGenericEvent.ndisplay(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XGenericEvent$Buffer org.lwjgl.system.linux.XGenericEvent.create(long,int)"""
        return Buffer.__wrap(__XGenericEvent.create(__long.valueOf(arg0), __int.valueOf(arg1)))

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XGenericEvent$Buffer org.lwjgl.system.linux.XGenericEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XGenericEvent.calloc(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def mallocStack() -> 'XGenericEvent':
        """public static org.lwjgl.system.linux.XGenericEvent org.lwjgl.system.linux.XGenericEvent.mallocStack()"""
        return XGenericEvent.__wrap(__XGenericEvent.mallocStack())

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XGenericEvent':
        """public static org.lwjgl.system.linux.XGenericEvent org.lwjgl.system.linux.XGenericEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XGenericEvent.__wrap(__XGenericEvent.mallocStack(arg0))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str.__wrap(super(pyglsystem.Pointer$Default, self).toString())

    @staticmethod
    @overload
    def create(arg0: int) -> 'XGenericEvent':
        """public static org.lwjgl.system.linux.XGenericEvent org.lwjgl.system.linux.XGenericEvent.create(long)"""
        return XGenericEvent.__wrap(__XGenericEvent.create(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nevtype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGenericEvent.nevtype(long,int)"""
        __XGenericEvent.nevtype(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XGenericEvent.type()"""
        return int.__wrap(super(XGenericEvent, self).type())

    @overload
    def serial(self, arg0: int) -> 'XGenericEvent':
        """public org.lwjgl.system.linux.XGenericEvent org.lwjgl.system.linux.XGenericEvent.serial(long)"""
        return 'XGenericEvent'.__wrap(super(__XGenericEvent, self).serial(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nextension(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGenericEvent.nextension(long,int)"""
        __XGenericEvent.nextension(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XGenericEvent.ntype(long)"""
        return int.__wrap(__XGenericEvent.ntype(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nevtype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XGenericEvent.nevtype(long)"""
        return int.__wrap(__XGenericEvent.nevtype(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XGenericEvent$Buffer org.lwjgl.system.linux.XGenericEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XGenericEvent.mallocStack(__int.valueOf(arg0), arg1))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int, arg5: int) -> 'XGenericEvent':
        """public org.lwjgl.system.linux.XGenericEvent org.lwjgl.system.linux.XGenericEvent.set(int,long,boolean,long,int,int)"""
        return 'XGenericEvent'.__wrap(super(__XGenericEvent, self).set(__int.valueOf(arg0), __long.valueOf(arg1), __boolean.valueOf(arg2), __long.valueOf(arg3), __int.valueOf(arg4), __int.valueOf(arg5)))

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XGenericEvent$Buffer org.lwjgl.system.linux.XGenericEvent.malloc(int)"""
        return Buffer.__wrap(__XGenericEvent.malloc(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XGenericEvent$Buffer org.lwjgl.system.linux.XGenericEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XGenericEvent.malloc(__int.valueOf(arg0), arg1))

    @overload
    def extension(self) -> int:
        """public int org.lwjgl.system.linux.XGenericEvent.extension()"""
        return int.__wrap(super(XGenericEvent, self).extension())

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        __Struct.validate(__long.valueOf(arg0), __int.valueOf(arg1), __int.valueOf(arg2), arg3)

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XGenericEvent$Buffer org.lwjgl.system.linux.XGenericEvent.mallocStack(int)"""
        return Buffer.__wrap(__XGenericEvent.mallocStack(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XGenericEvent$Buffer org.lwjgl.system.linux.XGenericEvent.createSafe(long,int)"""
        return Buffer.__wrap(__XGenericEvent.createSafe(__long.valueOf(arg0), __int.valueOf(arg1)))

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGenericEvent.nserial(long,long)"""
        __XGenericEvent.nserial(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XGenericEvent.validate(long)"""
        __XGenericEvent.validate(__long.valueOf(arg0)) 
 
 
# CLASS: org.lwjgl.system.linux.XVisibilityEvent$Buffer
from pyquantum_helper import import_once as __import_once__
import java.lang.Boolean as __boolean
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import java.util.stream.Stream as __Stream
__Stream = __Stream
import org.lwjgl.system.linux.XVisibilityEvent as __XVisibilityEvent_Buffer
__Buffer = __XVisibilityEvent_Buffer.Buffer
import org.lwjgl.system.StructBuffer as __StructBuffer
__StructBuffer = __StructBuffer
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.CustomBuffer as __CustomBuffer
__CustomBuffer = __CustomBuffer
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.util.Iterator as __Iterator
__Iterator = __Iterator
import java.lang.Object as __object
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.util.Iterator as Iterator
import java.util.Spliterator as __Spliterator
__Spliterator = __Spliterator
import java.lang.Long as __long
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import java.util.stream.Stream as Stream
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import int
 
class Buffer(pyglsystem.__StructBuffer, pyglsystem.StructBuffer, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XVisibilityEvent.Buffer"""
 
    @staticmethod
    def __wrap(java_value: __Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(__pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0), arg1))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XVisibilityEvent$Buffer org.lwjgl.system.linux.XVisibilityEvent$Buffer.display(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).display(__long.valueOf(arg0)))

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int.__wrap(super(__pyglsystem.CustomBuffer, self).address(__int.valueOf(arg0)))

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(__int.valueOf(arg0), arg1))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int.__wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(arg0))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XVisibilityEvent$Buffer.type()"""
        return int.__wrap(super(Buffer, self).type())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XVisibilityEvent$Buffer(long,int)"""
        val = __Buffer(__long.valueOf(arg0), __int.valueOf(arg1))
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def state(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XVisibilityEvent$Buffer org.lwjgl.system.linux.XVisibilityEvent$Buffer.state(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).state(__int.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool.__wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XVisibilityEvent$Buffer.display()"""
        return int.__wrap(super(Buffer, self).display())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).position(__int.valueOf(arg0)))

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XVisibilityEvent$Buffer org.lwjgl.system.linux.XVisibilityEvent$Buffer.type(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).type(__int.valueOf(arg0)))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XVisibilityEvent$Buffer.serial()"""
        return int.__wrap(super(Buffer, self).serial())

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XVisibilityEvent$Buffer.window()"""
        return int.__wrap(super(Buffer, self).window())

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XVisibilityEvent$Buffer org.lwjgl.system.linux.XVisibilityEvent$Buffer.serial(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).serial(__long.valueOf(arg0)))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0)))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).clear())

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(__int.valueOf(arg0), arg1))

    @overload
    def state(self) -> int:
        """public int org.lwjgl.system.linux.XVisibilityEvent$Buffer.state()"""
        return int.__wrap(super(Buffer, self).state())

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).slice())

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XVisibilityEvent$Buffer.send_event()"""
        return bool.__wrap(super(Buffer, self).send_event())

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XVisibilityEvent$Buffer org.lwjgl.system.linux.XVisibilityEvent$Buffer.send_event(boolean)"""
        return 'Buffer'.__wrap(super(__Buffer, self).send_event(__boolean.valueOf(arg0)))

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'.__wrap(super(pyglsystem.StructBuffer, self).get())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).limit(__int.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'.__wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str.__wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XVisibilityEvent$Buffer(java.nio.ByteBuffer)"""
        val = __Buffer(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def window(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XVisibilityEvent$Buffer org.lwjgl.system.linux.XVisibilityEvent$Buffer.window(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).window(__long.valueOf(arg0)))

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(arg0))

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).stream())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'.__wrap(super(pyglsystem.StructBuffer, self).iterator())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).slice(__int.valueOf(arg0), __int.valueOf(arg1))) 
 
 
# CLASS: org.lwjgl.system.linux.Visual
from pyquantum_helper import import_once as __import_once__
from builtins import str
import org.lwjgl.system.linux.Visual as __Visual
__Visual = __Visual
from pyquantum_helper import override
import java.lang.Object as __object
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import org.lwjgl.system.linux.Visual as __Visual_Buffer
__Buffer = __Visual_Buffer.Buffer
import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
from builtins import int
 
class Visual(pyglsystem.__Struct, pyglsystem.Struct, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.Visual"""
 
    @staticmethod
    def __wrap(java_value: __Visual) -> 'Visual':
        return Visual(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Visual):
        """
        Dynamic initializer for Visual.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def class$(self, arg0: int) -> 'Visual':
        """public org.lwjgl.system.linux.Visual org.lwjgl.system.linux.Visual.class$(int)"""
        return 'Visual'.__wrap(super(__Visual, self).class$(__int.valueOf(arg0)))

    @overload
    def visualid(self) -> int:
        """public long org.lwjgl.system.linux.Visual.visualid()"""
        return int.__wrap(super(Visual, self).visualid())

    @staticmethod
    @overload
    def nred_mask(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Visual.nred_mask(long,long)"""
        __Visual.nred_mask(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'Visual':
        """public static org.lwjgl.system.linux.Visual org.lwjgl.system.linux.Visual.callocStack(org.lwjgl.system.MemoryStack)"""
        return Visual.__wrap(__Visual.callocStack(arg0))

    @staticmethod
    @overload
    def nvisualid(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Visual.nvisualid(long,long)"""
        __Visual.nvisualid(__long.valueOf(arg0), __long.valueOf(arg1))

    @overload
    def map_entries(self, arg0: int) -> 'Visual':
        """public org.lwjgl.system.linux.Visual org.lwjgl.system.linux.Visual.map_entries(int)"""
        return 'Visual'.__wrap(super(__Visual, self).map_entries(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.Visual$Buffer org.lwjgl.system.linux.Visual.mallocStack(int)"""
        return Buffer.__wrap(__Visual.mallocStack(__int.valueOf(arg0)))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.Visual$Buffer org.lwjgl.system.linux.Visual.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__Visual.mallocStack(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.Visual$Buffer org.lwjgl.system.linux.Visual.calloc(int)"""
        return Buffer.__wrap(__Visual.calloc(__int.valueOf(arg0)))

    @overload
    def ext_data(self, arg0: int) -> 'Visual':
        """public org.lwjgl.system.linux.Visual org.lwjgl.system.linux.Visual.ext_data(long)"""
        return 'Visual'.__wrap(super(__Visual, self).ext_data(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.Visual$Buffer org.lwjgl.system.linux.Visual.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__Visual.malloc(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def nblue_mask(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.Visual.nblue_mask(long)"""
        return int.__wrap(__Visual.nblue_mask(__long.valueOf(arg0)))

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool.__wrap(super(__pyglsystem.Struct, self).isNull(__int.valueOf(arg0)))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def nbits_per_rgb(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.Visual.nbits_per_rgb(long)"""
        return int.__wrap(__Visual.nbits_per_rgb(__long.valueOf(arg0)))

    @overload
    def visualid(self, arg0: int) -> 'Visual':
        """public org.lwjgl.system.linux.Visual org.lwjgl.system.linux.Visual.visualid(long)"""
        return 'Visual'.__wrap(super(__Visual, self).visualid(__long.valueOf(arg0)))

    @overload
    def red_mask(self) -> int:
        """public long org.lwjgl.system.linux.Visual.red_mask()"""
        return int.__wrap(super(Visual, self).red_mask())

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.Visual$Buffer org.lwjgl.system.linux.Visual.callocStack(int)"""
        return Buffer.__wrap(__Visual.callocStack(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def next_data(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.Visual.next_data(long)"""
        return int.__wrap(__Visual.next_data(__long.valueOf(arg0)))

    @overload
    def bits_per_rgb(self, arg0: int) -> 'Visual':
        """public org.lwjgl.system.linux.Visual org.lwjgl.system.linux.Visual.bits_per_rgb(int)"""
        return 'Visual'.__wrap(super(__Visual, self).bits_per_rgb(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.Visual$Buffer org.lwjgl.system.linux.Visual.createSafe(long,int)"""
        return Buffer.__wrap(__Visual.createSafe(__long.valueOf(arg0), __int.valueOf(arg1)))

    @staticmethod
    @overload
    def ngreen_mask(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.Visual.ngreen_mask(long)"""
        return int.__wrap(__Visual.ngreen_mask(__long.valueOf(arg0)))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @overload
    def green_mask(self, arg0: int) -> 'Visual':
        """public org.lwjgl.system.linux.Visual org.lwjgl.system.linux.Visual.green_mask(long)"""
        return 'Visual'.__wrap(super(__Visual, self).green_mask(__long.valueOf(arg0)))

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'Visual':
        """public static org.lwjgl.system.linux.Visual org.lwjgl.system.linux.Visual.mallocStack(org.lwjgl.system.MemoryStack)"""
        return Visual.__wrap(__Visual.mallocStack(arg0))

    @staticmethod
    @overload
    def nbits_per_rgb(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Visual.nbits_per_rgb(long,int)"""
        __Visual.nbits_per_rgb(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def callocStack() -> 'Visual':
        """public static org.lwjgl.system.linux.Visual org.lwjgl.system.linux.Visual.callocStack()"""
        return Visual.__wrap(__Visual.callocStack())

    @staticmethod
    @overload
    def nclass$(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.Visual.nclass$(long)"""
        return int.__wrap(__Visual.nclass$(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'Visual':
        """public static org.lwjgl.system.linux.Visual org.lwjgl.system.linux.Visual.malloc(org.lwjgl.system.MemoryStack)"""
        return Visual.__wrap(__Visual.malloc(arg0))

    @staticmethod
    @overload
    def nclass$(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Visual.nclass$(long,int)"""
        __Visual.nclass$(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def class$(self) -> int:
        """public int org.lwjgl.system.linux.Visual.class$()"""
        return int.__wrap(super(Visual, self).class$())

    @staticmethod
    @overload
    def nred_mask(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.Visual.nred_mask(long)"""
        return int.__wrap(__Visual.nred_mask(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nblue_mask(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Visual.nblue_mask(long,long)"""
        __Visual.nblue_mask(__long.valueOf(arg0), __long.valueOf(arg1))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def bits_per_rgb(self) -> int:
        """public int org.lwjgl.system.linux.Visual.bits_per_rgb()"""
        return int.__wrap(super(Visual, self).bits_per_rgb())

    @overload
    def map_entries(self) -> int:
        """public int org.lwjgl.system.linux.Visual.map_entries()"""
        return int.__wrap(super(Visual, self).map_entries())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def set(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int) -> 'Visual':
        """public org.lwjgl.system.linux.Visual org.lwjgl.system.linux.Visual.set(long,long,int,long,long,long,int,int)"""
        return 'Visual'.__wrap(super(__Visual, self).set(__long.valueOf(arg0), __long.valueOf(arg1), __int.valueOf(arg2), __long.valueOf(arg3), __long.valueOf(arg4), __long.valueOf(arg5), __int.valueOf(arg6), __int.valueOf(arg7)))

    @staticmethod
    @overload
    def nvisualid(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.Visual.nvisualid(long)"""
        return int.__wrap(__Visual.nvisualid(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc() -> 'Visual':
        """public static org.lwjgl.system.linux.Visual org.lwjgl.system.linux.Visual.malloc()"""
        return Visual.__wrap(__Visual.malloc())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).address())

    @staticmethod
    @overload
    def create(arg0: int) -> 'Visual':
        """public static org.lwjgl.system.linux.Visual org.lwjgl.system.linux.Visual.create(long)"""
        return Visual.__wrap(__Visual.create(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.Visual$Buffer org.lwjgl.system.linux.Visual.create(long,int)"""
        return Buffer.__wrap(__Visual.create(__long.valueOf(arg0), __int.valueOf(arg1)))

    @overload
    def red_mask(self, arg0: int) -> 'Visual':
        """public org.lwjgl.system.linux.Visual org.lwjgl.system.linux.Visual.red_mask(long)"""
        return 'Visual'.__wrap(super(__Visual, self).red_mask(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def next_data(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Visual.next_data(long,long)"""
        __Visual.next_data(__long.valueOf(arg0), __long.valueOf(arg1))

    @overload
    def green_mask(self) -> int:
        """public long org.lwjgl.system.linux.Visual.green_mask()"""
        return int.__wrap(super(Visual, self).green_mask())

    @overload
    def blue_mask(self, arg0: int) -> 'Visual':
        """public org.lwjgl.system.linux.Visual org.lwjgl.system.linux.Visual.blue_mask(long)"""
        return 'Visual'.__wrap(super(__Visual, self).blue_mask(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nmap_entries(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Visual.nmap_entries(long,int)"""
        __Visual.nmap_entries(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.Visual$Buffer org.lwjgl.system.linux.Visual.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__Visual.calloc(__int.valueOf(arg0), arg1))

    @overload
    def set(self, arg0: 'Visual') -> 'Visual':
        """public org.lwjgl.system.linux.Visual org.lwjgl.system.linux.Visual.set(org.lwjgl.system.linux.Visual)"""
        return 'Visual'.__wrap(super(__Visual, self).set(arg0))

    @staticmethod
    @overload
    def calloc() -> 'Visual':
        """public static org.lwjgl.system.linux.Visual org.lwjgl.system.linux.Visual.calloc()"""
        return Visual.__wrap(__Visual.calloc())

    @overload
    def ext_data(self) -> int:
        """public long org.lwjgl.system.linux.Visual.ext_data()"""
        return int.__wrap(super(Visual, self).ext_data())

    @staticmethod
    @overload
    def create() -> 'Visual':
        """public static org.lwjgl.system.linux.Visual org.lwjgl.system.linux.Visual.create()"""
        return Visual.__wrap(__Visual.create())

    @staticmethod
    @overload
    def ngreen_mask(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Visual.ngreen_mask(long,long)"""
        __Visual.ngreen_mask(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def mallocStack() -> 'Visual':
        """public static org.lwjgl.system.linux.Visual org.lwjgl.system.linux.Visual.mallocStack()"""
        return Visual.__wrap(__Visual.mallocStack())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str.__wrap(super(pyglsystem.Pointer$Default, self).toString())

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.Visual$Buffer org.lwjgl.system.linux.Visual.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__Visual.callocStack(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.Visual$Buffer org.lwjgl.system.linux.Visual.create(int)"""
        return Buffer.__wrap(__Visual.create(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.Visual$Buffer org.lwjgl.system.linux.Visual.malloc(int)"""
        return Buffer.__wrap(__Visual.malloc(__int.valueOf(arg0)))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @staticmethod
    @overload
    def nmap_entries(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.Visual.nmap_entries(long)"""
        return int.__wrap(__Visual.nmap_entries(__long.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'Visual':
        """public static org.lwjgl.system.linux.Visual org.lwjgl.system.linux.Visual.createSafe(long)"""
        return Visual.__wrap(__Visual.createSafe(__long.valueOf(arg0)))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.Visual.sizeof()"""
        return int.__wrap(super(Visual, self).sizeof())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.Visual(java.nio.ByteBuffer)"""
        val = __Visual(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'Visual':
        """public static org.lwjgl.system.linux.Visual org.lwjgl.system.linux.Visual.calloc(org.lwjgl.system.MemoryStack)"""
        return Visual.__wrap(__Visual.calloc(arg0))

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        __Struct.validate(__long.valueOf(arg0), __int.valueOf(arg1), __int.valueOf(arg2), arg3)

    @overload
    def blue_mask(self) -> int:
        """public long org.lwjgl.system.linux.Visual.blue_mask()"""
        return int.__wrap(super(Visual, self).blue_mask()) 
 
 
# CLASS: org.lwjgl.system.linux.XClientMessageEvent$Buffer
from pyquantum_helper import import_once as __import_once__
import java.lang.Boolean as __boolean
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import java.nio.ByteBuffer as __ByteBuffer
__ByteBuffer = __ByteBuffer
import java.util.stream.Stream as __Stream
__Stream = __Stream
import java.nio.ShortBuffer as ShortBuffer
import org.lwjgl.system.StructBuffer as __StructBuffer
__StructBuffer = __StructBuffer
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Class as __Class
__Class = __Class
import java.lang.Byte as __byte
import org.lwjgl.CLongBuffer as __CLongBuffer
__CLongBuffer = __CLongBuffer
import org.lwjgl.system.CustomBuffer as __CustomBuffer
__CustomBuffer = __CustomBuffer
import java.lang.Short as __short
import org.lwjgl.system.linux.XClientMessageEvent as __XClientMessageEvent_Buffer
__Buffer = __XClientMessageEvent_Buffer.Buffer
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.nio.ShortBuffer as __ShortBuffer
__ShortBuffer = __ShortBuffer
import java.util.Iterator as __Iterator
__Iterator = __Iterator
import java.lang.Object as __object
try:
    import pygl
except ImportError:
    pygl = __import_once__("pygl")

try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.util.Iterator as Iterator
import java.util.Spliterator as __Spliterator
__Spliterator = __Spliterator
import java.lang.Long as __long
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import java.util.stream.Stream as Stream
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import int
 
class Buffer(pyglsystem.__StructBuffer, pyglsystem.StructBuffer, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XClientMessageEvent.Buffer"""
 
    @staticmethod
    def __wrap(java_value: __Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def data_l(self) -> 'pygl.CLongBuffer':
        """public org.lwjgl.CLongBuffer org.lwjgl.system.linux.XClientMessageEvent$Buffer.data_l()"""
        return 'pygl.CLongBuffer'.__wrap(super(Buffer, self).data_l())

    @overload
    def data_s(self) -> 'ShortBuffer':
        """public java.nio.ShortBuffer org.lwjgl.system.linux.XClientMessageEvent$Buffer.data_s()"""
        return 'ShortBuffer'.__wrap(super(Buffer, self).data_s())

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(arg0))

    @overload
    def data_b(self, arg0: int) -> int:
        """public byte org.lwjgl.system.linux.XClientMessageEvent$Buffer.data_b(int)"""
        return int.__wrap(super(__Buffer, self).data_b(__int.valueOf(arg0)))

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(__pyglsystem.StructBuffer, self).forEach(arg0)

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XClientMessageEvent$Buffer.serial()"""
        return int.__wrap(super(Buffer, self).serial())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XClientMessageEvent$Buffer org.lwjgl.system.linux.XClientMessageEvent$Buffer.send_event(boolean)"""
        return 'Buffer'.__wrap(super(__Buffer, self).send_event(__boolean.valueOf(arg0)))

    @overload
    def data_l(self, arg0: int) -> int:
        """public long org.lwjgl.system.linux.XClientMessageEvent$Buffer.data_l(int)"""
        return int.__wrap(super(__Buffer, self).data_l(__int.valueOf(arg0)))

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def message_type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XClientMessageEvent$Buffer org.lwjgl.system.linux.XClientMessageEvent$Buffer.message_type(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).message_type(__long.valueOf(arg0)))

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0), arg1))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XClientMessageEvent$Buffer(java.nio.ByteBuffer)"""
        val = __Buffer(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address0())

    @overload
    def data_b(self, arg0: 'ByteBuffer') -> 'Buffer':
        """public org.lwjgl.system.linux.XClientMessageEvent$Buffer org.lwjgl.system.linux.XClientMessageEvent$Buffer.data_b(java.nio.ByteBuffer)"""
        return 'Buffer'.__wrap(super(__Buffer, self).data_b(arg0))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def data_b(self) -> 'ByteBuffer':
        """public java.nio.ByteBuffer org.lwjgl.system.linux.XClientMessageEvent$Buffer.data_b()"""
        return 'ByteBuffer'.__wrap(super(Buffer, self).data_b())

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XClientMessageEvent$Buffer org.lwjgl.system.linux.XClientMessageEvent$Buffer.type(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).type(__int.valueOf(arg0)))

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int.__wrap(super(__pyglsystem.CustomBuffer, self).address(__int.valueOf(arg0)))

    @overload
    def format(self) -> int:
        """public int org.lwjgl.system.linux.XClientMessageEvent$Buffer.format()"""
        return int.__wrap(super(Buffer, self).format())

    @overload
    def window(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XClientMessageEvent$Buffer org.lwjgl.system.linux.XClientMessageEvent$Buffer.window(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).window(__long.valueOf(arg0)))

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(__int.valueOf(arg0), arg1))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int.__wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(arg0))

    @overload
    def data_s(self, arg0: int, arg1: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XClientMessageEvent$Buffer org.lwjgl.system.linux.XClientMessageEvent$Buffer.data_s(int,short)"""
        return 'Buffer'.__wrap(super(__Buffer, self).data_s(__int.valueOf(arg0), __short.valueOf(arg1)))

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def data_s(self, arg0: int) -> int:
        """public short org.lwjgl.system.linux.XClientMessageEvent$Buffer.data_s(int)"""
        return int.__wrap(super(__Buffer, self).data_s(__int.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool.__wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XClientMessageEvent$Buffer.type()"""
        return int.__wrap(super(Buffer, self).type())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def format(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XClientMessageEvent$Buffer org.lwjgl.system.linux.XClientMessageEvent$Buffer.format(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).format(__int.valueOf(arg0)))

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XClientMessageEvent$Buffer.window()"""
        return int.__wrap(super(Buffer, self).window())

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XClientMessageEvent$Buffer.display()"""
        return int.__wrap(super(Buffer, self).display())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).position(__int.valueOf(arg0)))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XClientMessageEvent$Buffer.send_event()"""
        return bool.__wrap(super(Buffer, self).send_event())

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0)))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).clear())

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(__int.valueOf(arg0), arg1))

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address())

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XClientMessageEvent$Buffer org.lwjgl.system.linux.XClientMessageEvent$Buffer.serial(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).serial(__long.valueOf(arg0)))

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @overload
    def data_s(self, arg0: 'ShortBuffer') -> 'Buffer':
        """public org.lwjgl.system.linux.XClientMessageEvent$Buffer org.lwjgl.system.linux.XClientMessageEvent$Buffer.data_s(java.nio.ShortBuffer)"""
        return 'Buffer'.__wrap(super(__Buffer, self).data_s(arg0))

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).slice())

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XClientMessageEvent$Buffer(long,int)"""
        val = __Buffer(__long.valueOf(arg0), __int.valueOf(arg1))
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def message_type(self) -> int:
        """public long org.lwjgl.system.linux.XClientMessageEvent$Buffer.message_type()"""
        return int.__wrap(super(Buffer, self).message_type())

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'.__wrap(super(pyglsystem.StructBuffer, self).get())

    @overload
    def data_b(self, arg0: int, arg1: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XClientMessageEvent$Buffer org.lwjgl.system.linux.XClientMessageEvent$Buffer.data_b(int,byte)"""
        return 'Buffer'.__wrap(super(__Buffer, self).data_b(__int.valueOf(arg0), __byte.valueOf(arg1)))

    @overload
    def data_l(self, arg0: 'CLongBuffer') -> 'Buffer':
        """public org.lwjgl.system.linux.XClientMessageEvent$Buffer org.lwjgl.system.linux.XClientMessageEvent$Buffer.data_l(org.lwjgl.CLongBuffer)"""
        return 'Buffer'.__wrap(super(__Buffer, self).data_l(arg0))

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).limit(__int.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'.__wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str.__wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(arg0))

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).stream())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'.__wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def data_l(self, arg0: int, arg1: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XClientMessageEvent$Buffer org.lwjgl.system.linux.XClientMessageEvent$Buffer.data_l(int,long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).data_l(__int.valueOf(arg0), __long.valueOf(arg1)))

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XClientMessageEvent$Buffer org.lwjgl.system.linux.XClientMessageEvent$Buffer.display(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).display(__long.valueOf(arg0)))

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).slice(__int.valueOf(arg0), __int.valueOf(arg1))) 
 
 
# CLASS: org.lwjgl.system.linux.Socket
from builtins import str
import java.lang.Long as __long
from pyquantum_helper import override
import java.lang.Class as __Class
__Class = __Class
import java.lang.Object as __object
import java.lang.String as __String
__String = __String
from builtins import type
import java.lang.Object as __Object
__Object = __Object
import org.lwjgl.system.linux.Socket as __Socket
__Socket = __Socket
import java.lang.Integer as __int
from builtins import bool
from builtins import int
 
class Socket():
    """org.lwjgl.system.linux.Socket"""
 
    @staticmethod
    def __wrap(java_value: __Socket) -> 'Socket':
        return Socket(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Socket):
        """
        Dynamic initializer for Socket.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.lang.Object.toString()"""
        return str.__wrap(super(object, self).toString())

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @staticmethod
    @overload
    def socket(arg0: int, arg1: int, arg2: int) -> int:
        """public static native int org.lwjgl.system.linux.Socket.socket(int,int,int)"""
        return int.__wrap(__Socket.socket(__int.valueOf(arg0), __int.valueOf(arg1), __int.valueOf(arg2)))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0)) 
 
 
# CLASS: org.lwjgl.system.linux.XMapRequestEvent$Buffer
from pyquantum_helper import import_once as __import_once__
import java.lang.Boolean as __boolean
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import java.util.stream.Stream as __Stream
__Stream = __Stream
import org.lwjgl.system.StructBuffer as __StructBuffer
__StructBuffer = __StructBuffer
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.CustomBuffer as __CustomBuffer
__CustomBuffer = __CustomBuffer
from builtins import bool
import org.lwjgl.system.linux.XMapRequestEvent as __XMapRequestEvent_Buffer
__Buffer = __XMapRequestEvent_Buffer.Buffer
from builtins import str
from pyquantum_helper import override
import java.util.Iterator as __Iterator
__Iterator = __Iterator
import java.lang.Object as __object
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.util.Iterator as Iterator
import java.util.Spliterator as __Spliterator
__Spliterator = __Spliterator
import java.lang.Long as __long
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import java.util.stream.Stream as Stream
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import int
 
class Buffer(pyglsystem.__StructBuffer, pyglsystem.StructBuffer, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XMapRequestEvent.Buffer"""
 
    @staticmethod
    def __wrap(java_value: __Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(arg0))

    @overload
    def parent(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XMapRequestEvent$Buffer org.lwjgl.system.linux.XMapRequestEvent$Buffer.parent(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).parent(__long.valueOf(arg0)))

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(__pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0), arg1))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int.__wrap(super(__pyglsystem.CustomBuffer, self).address(__int.valueOf(arg0)))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XMapRequestEvent$Buffer.serial()"""
        return int.__wrap(super(Buffer, self).serial())

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(__int.valueOf(arg0), arg1))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int.__wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XMapRequestEvent$Buffer.window()"""
        return int.__wrap(super(Buffer, self).window())

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XMapRequestEvent$Buffer.type()"""
        return int.__wrap(super(Buffer, self).type())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(arg0))

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XMapRequestEvent$Buffer org.lwjgl.system.linux.XMapRequestEvent$Buffer.display(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).display(__long.valueOf(arg0)))

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool.__wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).position(__int.valueOf(arg0)))

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XMapRequestEvent$Buffer org.lwjgl.system.linux.XMapRequestEvent$Buffer.send_event(boolean)"""
        return 'Buffer'.__wrap(super(__Buffer, self).send_event(__boolean.valueOf(arg0)))

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XMapRequestEvent$Buffer(long,int)"""
        val = __Buffer(__long.valueOf(arg0), __int.valueOf(arg1))
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0)))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).clear())

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(__int.valueOf(arg0), arg1))

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @overload
    def parent(self) -> int:
        """public long org.lwjgl.system.linux.XMapRequestEvent$Buffer.parent()"""
        return int.__wrap(super(Buffer, self).parent())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XMapRequestEvent$Buffer(java.nio.ByteBuffer)"""
        val = __Buffer(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).slice())

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XMapRequestEvent$Buffer.display()"""
        return int.__wrap(super(Buffer, self).display())

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XMapRequestEvent$Buffer org.lwjgl.system.linux.XMapRequestEvent$Buffer.type(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).type(__int.valueOf(arg0)))

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'.__wrap(super(pyglsystem.StructBuffer, self).get())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).limit(__int.valueOf(arg0)))

    @overload
    def window(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XMapRequestEvent$Buffer org.lwjgl.system.linux.XMapRequestEvent$Buffer.window(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).window(__long.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'.__wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str.__wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XMapRequestEvent$Buffer org.lwjgl.system.linux.XMapRequestEvent$Buffer.serial(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).serial(__long.valueOf(arg0)))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XMapRequestEvent$Buffer.send_event()"""
        return bool.__wrap(super(Buffer, self).send_event())

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(arg0))

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).stream())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'.__wrap(super(pyglsystem.StructBuffer, self).iterator())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).slice(__int.valueOf(arg0), __int.valueOf(arg1))) 
 
 
# CLASS: org.lwjgl.system.linux.XTimeCoord$Buffer
from pyquantum_helper import import_once as __import_once__
from builtins import type
import java.util.stream.Stream as __Stream
__Stream = __Stream
import org.lwjgl.system.StructBuffer as __StructBuffer
__StructBuffer = __StructBuffer
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.CustomBuffer as __CustomBuffer
__CustomBuffer = __CustomBuffer
from builtins import bool
import org.lwjgl.system.linux.XTimeCoord as __XTimeCoord_Buffer
__Buffer = __XTimeCoord_Buffer.Buffer
from builtins import str
from pyquantum_helper import override
import java.util.Iterator as __Iterator
__Iterator = __Iterator
import java.lang.Object as __object
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.util.Iterator as Iterator
import java.util.Spliterator as __Spliterator
__Spliterator = __Spliterator
import java.lang.Long as __long
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import java.util.stream.Stream as Stream
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import int
 
class Buffer(pyglsystem.__StructBuffer, pyglsystem.StructBuffer):
    """org.lwjgl.system.linux.XTimeCoord.Buffer"""
 
    @staticmethod
    def __wrap(java_value: __Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(__pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0), arg1))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int.__wrap(super(__pyglsystem.CustomBuffer, self).address(__int.valueOf(arg0)))

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(__int.valueOf(arg0), arg1))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int.__wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(arg0))

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).position())

    @overload
    def time(self) -> int:
        """public long org.lwjgl.system.linux.XTimeCoord$Buffer.time()"""
        return int.__wrap(super(Buffer, self).time())

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XTimeCoord$Buffer(java.nio.ByteBuffer)"""
        val = __Buffer(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool.__wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).position(__int.valueOf(arg0)))

    @overload
    def y(self) -> int:
        """public short org.lwjgl.system.linux.XTimeCoord$Buffer.y()"""
        return int.__wrap(super(Buffer, self).y())

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0)))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).clear())

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(__int.valueOf(arg0), arg1))

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @overload
    def x(self) -> int:
        """public short org.lwjgl.system.linux.XTimeCoord$Buffer.x()"""
        return int.__wrap(super(Buffer, self).x())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address())

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XTimeCoord$Buffer(long,int)"""
        val = __Buffer(__long.valueOf(arg0), __int.valueOf(arg1))
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).slice())

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).compact())

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'.__wrap(super(pyglsystem.StructBuffer, self).get())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).limit(__int.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'.__wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str.__wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(arg0))

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).stream())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'.__wrap(super(pyglsystem.StructBuffer, self).iterator())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).slice(__int.valueOf(arg0), __int.valueOf(arg1))) 
 
 
# CLASS: org.lwjgl.system.linux.XEvent
from pyquantum_helper import import_once as __import_once__
import org.lwjgl.system.linux.XNoExposeEvent as __XNoExposeEvent
__XNoExposeEvent = __XNoExposeEvent
import org.lwjgl.system.linux.XKeymapEvent as __XKeymapEvent
__XKeymapEvent = __XKeymapEvent
import org.lwjgl.system.linux.XKeyEvent as __XKeyEvent
__XKeyEvent = __XKeyEvent
import org.lwjgl.system.linux.XAnyEvent as __XAnyEvent
__XAnyEvent = __XAnyEvent
import org.lwjgl.system.linux.XCirculateEvent as __XCirculateEvent
__XCirculateEvent = __XCirculateEvent
import org.lwjgl.system.linux.XFocusChangeEvent as __XFocusChangeEvent
__XFocusChangeEvent = __XFocusChangeEvent
import org.lwjgl.system.linux.XUnmapEvent as __XUnmapEvent
__XUnmapEvent = __XUnmapEvent
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.linux.XCrossingEvent as __XCrossingEvent
__XCrossingEvent = __XCrossingEvent
import org.lwjgl.system.linux.XVisibilityEvent as __XVisibilityEvent
__XVisibilityEvent = __XVisibilityEvent
import org.lwjgl.system.linux.XGraphicsExposeEvent as __XGraphicsExposeEvent
__XGraphicsExposeEvent = __XGraphicsExposeEvent
import org.lwjgl.system.linux.XExposeEvent as __XExposeEvent
__XExposeEvent = __XExposeEvent
from builtins import bool
import org.lwjgl.system.linux.XMapEvent as __XMapEvent
__XMapEvent = __XMapEvent
import org.lwjgl.system.linux.XMotionEvent as __XMotionEvent
__XMotionEvent = __XMotionEvent
import org.lwjgl.system.linux.XDestroyWindowEvent as __XDestroyWindowEvent
__XDestroyWindowEvent = __XDestroyWindowEvent
import org.lwjgl.system.linux.XSelectionEvent as __XSelectionEvent
__XSelectionEvent = __XSelectionEvent
import org.lwjgl.system.linux.XMapRequestEvent as __XMapRequestEvent
__XMapRequestEvent = __XMapRequestEvent
import org.lwjgl.system.linux.XGenericEvent as __XGenericEvent
__XGenericEvent = __XGenericEvent
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import org.lwjgl.system.linux.XGravityEvent as __XGravityEvent
__XGravityEvent = __XGravityEvent
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import org.lwjgl.system.linux.XConfigureRequestEvent as __XConfigureRequestEvent
__XConfigureRequestEvent = __XConfigureRequestEvent
import java.lang.Object as __Object
__Object = __Object
import org.lwjgl.system.linux.XSelectionClearEvent as __XSelectionClearEvent
__XSelectionClearEvent = __XSelectionClearEvent
import org.lwjgl.system.linux.XGenericEventCookie as __XGenericEventCookie
__XGenericEventCookie = __XGenericEventCookie
from builtins import int
import org.lwjgl.system.linux.XCreateWindowEvent as __XCreateWindowEvent
__XCreateWindowEvent = __XCreateWindowEvent
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import org.lwjgl.system.linux.XMappingEvent as __XMappingEvent
__XMappingEvent = __XMappingEvent
import org.lwjgl.system.linux.XReparentEvent as __XReparentEvent
__XReparentEvent = __XReparentEvent
import org.lwjgl.system.linux.XEvent as __XEvent_Buffer
__Buffer = __XEvent_Buffer.Buffer
import org.lwjgl.system.linux.XPropertyEvent as __XPropertyEvent
__XPropertyEvent = __XPropertyEvent
from builtins import str
from pyquantum_helper import override
import org.lwjgl.system.linux.XColormapEvent as __XColormapEvent
__XColormapEvent = __XColormapEvent
import java.lang.Object as __object
import org.lwjgl.system.linux.XButtonEvent as __XButtonEvent
__XButtonEvent = __XButtonEvent
import org.lwjgl.system.linux.XEvent as __XEvent
__XEvent = __XEvent
import org.lwjgl.system.linux.XCirculateRequestEvent as __XCirculateRequestEvent
__XCirculateRequestEvent = __XCirculateRequestEvent
import org.lwjgl.system.linux.XResizeRequestEvent as __XResizeRequestEvent
__XResizeRequestEvent = __XResizeRequestEvent
import java.lang.Long as __long
import org.lwjgl.system.linux.XSelectionRequestEvent as __XSelectionRequestEvent
__XSelectionRequestEvent = __XSelectionRequestEvent
import org.lwjgl.system.linux.XClientMessageEvent as __XClientMessageEvent
__XClientMessageEvent = __XClientMessageEvent
import org.lwjgl.system.linux.XErrorEvent as __XErrorEvent
__XErrorEvent = __XErrorEvent
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
import org.lwjgl.system.linux.XConfigureEvent as __XConfigureEvent
__XConfigureEvent = __XConfigureEvent
 
class XEvent(pyglsystem.__Struct, pyglsystem.Struct, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XEvent"""
 
    @staticmethod
    def __wrap(java_value: __XEvent) -> 'XEvent':
        return XEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __XEvent):
        """
        Dynamic initializer for XEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XEvent$Buffer org.lwjgl.system.linux.XEvent.mallocStack(int)"""
        return Buffer.__wrap(__XEvent.mallocStack(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nxconfigurerequest(arg0: int) -> 'XConfigureRequestEvent':
        """public static org.lwjgl.system.linux.XConfigureRequestEvent org.lwjgl.system.linux.XEvent.nxconfigurerequest(long)"""
        return XConfigureRequestEvent.__wrap(__XEvent.nxconfigurerequest(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nxexpose(arg0: int) -> 'XExposeEvent':
        """public static org.lwjgl.system.linux.XExposeEvent org.lwjgl.system.linux.XEvent.nxexpose(long)"""
        return XExposeEvent.__wrap(__XEvent.nxexpose(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XEvent':
        """public static org.lwjgl.system.linux.XEvent org.lwjgl.system.linux.XEvent.createSafe(long)"""
        return XEvent.__wrap(__XEvent.createSafe(__long.valueOf(arg0)))

    @overload
    def xkeymap(self) -> 'XKeymapEvent':
        """public org.lwjgl.system.linux.XKeymapEvent org.lwjgl.system.linux.XEvent.xkeymap()"""
        return 'XKeymapEvent'.__wrap(super(XEvent, self).xkeymap())

    @staticmethod
    @overload
    def nxclient(arg0: int) -> 'XClientMessageEvent':
        """public static org.lwjgl.system.linux.XClientMessageEvent org.lwjgl.system.linux.XEvent.nxclient(long)"""
        return XClientMessageEvent.__wrap(__XEvent.nxclient(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nxmaprequest(arg0: int) -> 'XMapRequestEvent':
        """public static org.lwjgl.system.linux.XMapRequestEvent org.lwjgl.system.linux.XEvent.nxmaprequest(long)"""
        return XMapRequestEvent.__wrap(__XEvent.nxmaprequest(__long.valueOf(arg0)))

    @overload
    def xgeneric(self) -> 'XGenericEvent':
        """public org.lwjgl.system.linux.XGenericEvent org.lwjgl.system.linux.XEvent.xgeneric()"""
        return 'XGenericEvent'.__wrap(super(XEvent, self).xgeneric())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def xselectionrequest(self) -> 'XSelectionRequestEvent':
        """public org.lwjgl.system.linux.XSelectionRequestEvent org.lwjgl.system.linux.XEvent.xselectionrequest()"""
        return 'XSelectionRequestEvent'.__wrap(super(XEvent, self).xselectionrequest())

    @overload
    def xclient(self) -> 'XClientMessageEvent':
        """public org.lwjgl.system.linux.XClientMessageEvent org.lwjgl.system.linux.XEvent.xclient()"""
        return 'XClientMessageEvent'.__wrap(super(XEvent, self).xclient())

    @overload
    def xfocus(self) -> 'XFocusChangeEvent':
        """public org.lwjgl.system.linux.XFocusChangeEvent org.lwjgl.system.linux.XEvent.xfocus()"""
        return 'XFocusChangeEvent'.__wrap(super(XEvent, self).xfocus())

    @staticmethod
    @overload
    def nxcirculaterequest(arg0: int) -> 'XCirculateRequestEvent':
        """public static org.lwjgl.system.linux.XCirculateRequestEvent org.lwjgl.system.linux.XEvent.nxcirculaterequest(long)"""
        return XCirculateRequestEvent.__wrap(__XEvent.nxcirculaterequest(__long.valueOf(arg0)))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XEvent$Buffer org.lwjgl.system.linux.XEvent.malloc(int)"""
        return Buffer.__wrap(__XEvent.malloc(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nxcirculate(arg0: int) -> 'XCirculateEvent':
        """public static org.lwjgl.system.linux.XCirculateEvent org.lwjgl.system.linux.XEvent.nxcirculate(long)"""
        return XCirculateEvent.__wrap(__XEvent.nxcirculate(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XEvent$Buffer org.lwjgl.system.linux.XEvent.callocStack(int)"""
        return Buffer.__wrap(__XEvent.callocStack(__int.valueOf(arg0)))

    @overload
    def xmaprequest(self) -> 'XMapRequestEvent':
        """public org.lwjgl.system.linux.XMapRequestEvent org.lwjgl.system.linux.XEvent.xmaprequest()"""
        return 'XMapRequestEvent'.__wrap(super(XEvent, self).xmaprequest())

    @overload
    def xvisibility(self) -> 'XVisibilityEvent':
        """public org.lwjgl.system.linux.XVisibilityEvent org.lwjgl.system.linux.XEvent.xvisibility()"""
        return 'XVisibilityEvent'.__wrap(super(XEvent, self).xvisibility())

    @overload
    def xcookie(self) -> 'XGenericEventCookie':
        """public org.lwjgl.system.linux.XGenericEventCookie org.lwjgl.system.linux.XEvent.xcookie()"""
        return 'XGenericEventCookie'.__wrap(super(XEvent, self).xcookie())

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XEvent':
        """public static org.lwjgl.system.linux.XEvent org.lwjgl.system.linux.XEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XEvent.__wrap(__XEvent.malloc(arg0))

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XEvent':
        """public static org.lwjgl.system.linux.XEvent org.lwjgl.system.linux.XEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XEvent.__wrap(__XEvent.callocStack(arg0))

    @staticmethod
    @overload
    def nxbutton(arg0: int) -> 'XButtonEvent':
        """public static org.lwjgl.system.linux.XButtonEvent org.lwjgl.system.linux.XEvent.nxbutton(long)"""
        return XButtonEvent.__wrap(__XEvent.nxbutton(__long.valueOf(arg0)))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @staticmethod
    @overload
    def nxgraphicsexpose(arg0: int) -> 'XGraphicsExposeEvent':
        """public static org.lwjgl.system.linux.XGraphicsExposeEvent org.lwjgl.system.linux.XEvent.nxgraphicsexpose(long)"""
        return XGraphicsExposeEvent.__wrap(__XEvent.nxgraphicsexpose(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc() -> 'XEvent':
        """public static org.lwjgl.system.linux.XEvent org.lwjgl.system.linux.XEvent.malloc()"""
        return XEvent.__wrap(__XEvent.malloc())

    @overload
    def xresizerequest(self) -> 'XResizeRequestEvent':
        """public org.lwjgl.system.linux.XResizeRequestEvent org.lwjgl.system.linux.XEvent.xresizerequest()"""
        return 'XResizeRequestEvent'.__wrap(super(XEvent, self).xresizerequest())

    @staticmethod
    @overload
    def nxany(arg0: int) -> 'XAnyEvent':
        """public static org.lwjgl.system.linux.XAnyEvent org.lwjgl.system.linux.XEvent.nxany(long)"""
        return XAnyEvent.__wrap(__XEvent.nxany(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XEvent$Buffer org.lwjgl.system.linux.XEvent.calloc(int)"""
        return Buffer.__wrap(__XEvent.calloc(__int.valueOf(arg0)))

    @overload
    def xconfigurerequest(self) -> 'XConfigureRequestEvent':
        """public org.lwjgl.system.linux.XConfigureRequestEvent org.lwjgl.system.linux.XEvent.xconfigurerequest()"""
        return 'XConfigureRequestEvent'.__wrap(super(XEvent, self).xconfigurerequest())

    @overload
    def xgravity(self) -> 'XGravityEvent':
        """public org.lwjgl.system.linux.XGravityEvent org.lwjgl.system.linux.XEvent.xgravity()"""
        return 'XGravityEvent'.__wrap(super(XEvent, self).xgravity())

    @overload
    def xkey(self) -> 'XKeyEvent':
        """public org.lwjgl.system.linux.XKeyEvent org.lwjgl.system.linux.XEvent.xkey()"""
        return 'XKeyEvent'.__wrap(super(XEvent, self).xkey())

    @staticmethod
    @overload
    def nxresizerequest(arg0: int) -> 'XResizeRequestEvent':
        """public static org.lwjgl.system.linux.XResizeRequestEvent org.lwjgl.system.linux.XEvent.nxresizerequest(long)"""
        return XResizeRequestEvent.__wrap(__XEvent.nxresizerequest(__long.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def nxselectionrequest(arg0: int) -> 'XSelectionRequestEvent':
        """public static org.lwjgl.system.linux.XSelectionRequestEvent org.lwjgl.system.linux.XEvent.nxselectionrequest(long)"""
        return XSelectionRequestEvent.__wrap(__XEvent.nxselectionrequest(__long.valueOf(arg0)))

    @overload
    def xexpose(self) -> 'XExposeEvent':
        """public org.lwjgl.system.linux.XExposeEvent org.lwjgl.system.linux.XEvent.xexpose()"""
        return 'XExposeEvent'.__wrap(super(XEvent, self).xexpose())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XEvent$Buffer org.lwjgl.system.linux.XEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XEvent.callocStack(__int.valueOf(arg0), arg1))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).address())

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XEvent$Buffer org.lwjgl.system.linux.XEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XEvent.calloc(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def nxfocus(arg0: int) -> 'XFocusChangeEvent':
        """public static org.lwjgl.system.linux.XFocusChangeEvent org.lwjgl.system.linux.XEvent.nxfocus(long)"""
        return XFocusChangeEvent.__wrap(__XEvent.nxfocus(__long.valueOf(arg0)))

    @overload
    def xunmap(self) -> 'XUnmapEvent':
        """public org.lwjgl.system.linux.XUnmapEvent org.lwjgl.system.linux.XEvent.xunmap()"""
        return 'XUnmapEvent'.__wrap(super(XEvent, self).xunmap())

    @staticmethod
    @overload
    def nxselectionclear(arg0: int) -> 'XSelectionClearEvent':
        """public static org.lwjgl.system.linux.XSelectionClearEvent org.lwjgl.system.linux.XEvent.nxselectionclear(long)"""
        return XSelectionClearEvent.__wrap(__XEvent.nxselectionclear(__long.valueOf(arg0)))

    @overload
    def xreparent(self) -> 'XReparentEvent':
        """public org.lwjgl.system.linux.XReparentEvent org.lwjgl.system.linux.XEvent.xreparent()"""
        return 'XReparentEvent'.__wrap(super(XEvent, self).xreparent())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str.__wrap(super(pyglsystem.Pointer$Default, self).toString())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XEvent$Buffer org.lwjgl.system.linux.XEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XEvent.mallocStack(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def nxcolormap(arg0: int) -> 'XColormapEvent':
        """public static org.lwjgl.system.linux.XColormapEvent org.lwjgl.system.linux.XEvent.nxcolormap(long)"""
        return XColormapEvent.__wrap(__XEvent.nxcolormap(__long.valueOf(arg0)))

    @overload
    def xany(self) -> 'XAnyEvent':
        """public org.lwjgl.system.linux.XAnyEvent org.lwjgl.system.linux.XEvent.xany()"""
        return 'XAnyEvent'.__wrap(super(XEvent, self).xany())

    @staticmethod
    @overload
    def nxcookie(arg0: int) -> 'XGenericEventCookie':
        """public static org.lwjgl.system.linux.XGenericEventCookie org.lwjgl.system.linux.XEvent.nxcookie(long)"""
        return XGenericEventCookie.__wrap(__XEvent.nxcookie(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        __Struct.validate(__long.valueOf(arg0), __int.valueOf(arg1), __int.valueOf(arg2), arg3)

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XEvent.type()"""
        return int.__wrap(super(XEvent, self).type())

    @overload
    def xmapping(self) -> 'XMappingEvent':
        """public org.lwjgl.system.linux.XMappingEvent org.lwjgl.system.linux.XEvent.xmapping()"""
        return 'XMappingEvent'.__wrap(super(XEvent, self).xmapping())

    @staticmethod
    @overload
    def nxreparent(arg0: int) -> 'XReparentEvent':
        """public static org.lwjgl.system.linux.XReparentEvent org.lwjgl.system.linux.XEvent.nxreparent(long)"""
        return XReparentEvent.__wrap(__XEvent.nxreparent(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nxkeymap(arg0: int) -> 'XKeymapEvent':
        """public static org.lwjgl.system.linux.XKeymapEvent org.lwjgl.system.linux.XEvent.nxkeymap(long)"""
        return XKeymapEvent.__wrap(__XEvent.nxkeymap(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nxnoexpose(arg0: int) -> 'XNoExposeEvent':
        """public static org.lwjgl.system.linux.XNoExposeEvent org.lwjgl.system.linux.XEvent.nxnoexpose(long)"""
        return XNoExposeEvent.__wrap(__XEvent.nxnoexpose(__long.valueOf(arg0)))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XEvent.sizeof()"""
        return int.__wrap(super(XEvent, self).sizeof())

    @staticmethod
    @overload
    def nxerror(arg0: int) -> 'XErrorEvent':
        """public static org.lwjgl.system.linux.XErrorEvent org.lwjgl.system.linux.XEvent.nxerror(long)"""
        return XErrorEvent.__wrap(__XEvent.nxerror(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nxmotion(arg0: int) -> 'XMotionEvent':
        """public static org.lwjgl.system.linux.XMotionEvent org.lwjgl.system.linux.XEvent.nxmotion(long)"""
        return XMotionEvent.__wrap(__XEvent.nxmotion(__long.valueOf(arg0)))

    @overload
    def xselection(self) -> 'XSelectionEvent':
        """public org.lwjgl.system.linux.XSelectionEvent org.lwjgl.system.linux.XEvent.xselection()"""
        return 'XSelectionEvent'.__wrap(super(XEvent, self).xselection())

    @overload
    def xselectionclear(self) -> 'XSelectionClearEvent':
        """public org.lwjgl.system.linux.XSelectionClearEvent org.lwjgl.system.linux.XEvent.xselectionclear()"""
        return 'XSelectionClearEvent'.__wrap(super(XEvent, self).xselectionclear())

    @overload
    def xbutton(self) -> 'XButtonEvent':
        """public org.lwjgl.system.linux.XButtonEvent org.lwjgl.system.linux.XEvent.xbutton()"""
        return 'XButtonEvent'.__wrap(super(XEvent, self).xbutton())

    @staticmethod
    @overload
    def nxproperty(arg0: int) -> 'XPropertyEvent':
        """public static org.lwjgl.system.linux.XPropertyEvent org.lwjgl.system.linux.XEvent.nxproperty(long)"""
        return XPropertyEvent.__wrap(__XEvent.nxproperty(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XEvent$Buffer org.lwjgl.system.linux.XEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XEvent.malloc(__int.valueOf(arg0), arg1))

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool.__wrap(super(__pyglsystem.Struct, self).isNull(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def create() -> 'XEvent':
        """public static org.lwjgl.system.linux.XEvent org.lwjgl.system.linux.XEvent.create()"""
        return XEvent.__wrap(__XEvent.create())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def nxdestroywindow(arg0: int) -> 'XDestroyWindowEvent':
        """public static org.lwjgl.system.linux.XDestroyWindowEvent org.lwjgl.system.linux.XEvent.nxdestroywindow(long)"""
        return XDestroyWindowEvent.__wrap(__XEvent.nxdestroywindow(__long.valueOf(arg0)))

    @overload
    def xcirculate(self) -> 'XCirculateEvent':
        """public org.lwjgl.system.linux.XCirculateEvent org.lwjgl.system.linux.XEvent.xcirculate()"""
        return 'XCirculateEvent'.__wrap(super(XEvent, self).xcirculate())

    @staticmethod
    @overload
    def nxconfigure(arg0: int) -> 'XConfigureEvent':
        """public static org.lwjgl.system.linux.XConfigureEvent org.lwjgl.system.linux.XEvent.nxconfigure(long)"""
        return XConfigureEvent.__wrap(__XEvent.nxconfigure(__long.valueOf(arg0)))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @staticmethod
    @overload
    def nxmap(arg0: int) -> 'XMapEvent':
        """public static org.lwjgl.system.linux.XMapEvent org.lwjgl.system.linux.XEvent.nxmap(long)"""
        return XMapEvent.__wrap(__XEvent.nxmap(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'XEvent':
        """public static org.lwjgl.system.linux.XEvent org.lwjgl.system.linux.XEvent.create(long)"""
        return XEvent.__wrap(__XEvent.create(__long.valueOf(arg0)))

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @overload
    def xerror(self) -> 'XErrorEvent':
        """public org.lwjgl.system.linux.XErrorEvent org.lwjgl.system.linux.XEvent.xerror()"""
        return 'XErrorEvent'.__wrap(super(XEvent, self).xerror())

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XEvent':
        """public static org.lwjgl.system.linux.XEvent org.lwjgl.system.linux.XEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XEvent.__wrap(__XEvent.mallocStack(arg0))

    @overload
    def xmap(self) -> 'XMapEvent':
        """public org.lwjgl.system.linux.XMapEvent org.lwjgl.system.linux.XEvent.xmap()"""
        return 'XMapEvent'.__wrap(super(XEvent, self).xmap())

    @overload
    def xcolormap(self) -> 'XColormapEvent':
        """public org.lwjgl.system.linux.XColormapEvent org.lwjgl.system.linux.XEvent.xcolormap()"""
        return 'XColormapEvent'.__wrap(super(XEvent, self).xcolormap())

    @staticmethod
    @overload
    def nxunmap(arg0: int) -> 'XUnmapEvent':
        """public static org.lwjgl.system.linux.XUnmapEvent org.lwjgl.system.linux.XEvent.nxunmap(long)"""
        return XUnmapEvent.__wrap(__XEvent.nxunmap(__long.valueOf(arg0)))

    @overload
    def xnoexpose(self) -> 'XNoExposeEvent':
        """public org.lwjgl.system.linux.XNoExposeEvent org.lwjgl.system.linux.XEvent.xnoexpose()"""
        return 'XNoExposeEvent'.__wrap(super(XEvent, self).xnoexpose())

    @staticmethod
    @overload
    def nxmapping(arg0: int) -> 'XMappingEvent':
        """public static org.lwjgl.system.linux.XMappingEvent org.lwjgl.system.linux.XEvent.nxmapping(long)"""
        return XMappingEvent.__wrap(__XEvent.nxmapping(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack() -> 'XEvent':
        """public static org.lwjgl.system.linux.XEvent org.lwjgl.system.linux.XEvent.callocStack()"""
        return XEvent.__wrap(__XEvent.callocStack())

    @overload
    def xmotion(self) -> 'XMotionEvent':
        """public org.lwjgl.system.linux.XMotionEvent org.lwjgl.system.linux.XEvent.xmotion()"""
        return 'XMotionEvent'.__wrap(super(XEvent, self).xmotion())

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XEvent$Buffer org.lwjgl.system.linux.XEvent.create(int)"""
        return Buffer.__wrap(__XEvent.create(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nxvisibility(arg0: int) -> 'XVisibilityEvent':
        """public static org.lwjgl.system.linux.XVisibilityEvent org.lwjgl.system.linux.XEvent.nxvisibility(long)"""
        return XVisibilityEvent.__wrap(__XEvent.nxvisibility(__long.valueOf(arg0)))

    @overload
    def xcreatewindow(self) -> 'XCreateWindowEvent':
        """public org.lwjgl.system.linux.XCreateWindowEvent org.lwjgl.system.linux.XEvent.xcreatewindow()"""
        return 'XCreateWindowEvent'.__wrap(super(XEvent, self).xcreatewindow())

    @staticmethod
    @overload
    def nxcrossing(arg0: int) -> 'XCrossingEvent':
        """public static org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XEvent.nxcrossing(long)"""
        return XCrossingEvent.__wrap(__XEvent.nxcrossing(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nxkey(arg0: int) -> 'XKeyEvent':
        """public static org.lwjgl.system.linux.XKeyEvent org.lwjgl.system.linux.XEvent.nxkey(long)"""
        return XKeyEvent.__wrap(__XEvent.nxkey(__long.valueOf(arg0)))

    @overload
    def xconfigure(self) -> 'XConfigureEvent':
        """public org.lwjgl.system.linux.XConfigureEvent org.lwjgl.system.linux.XEvent.xconfigure()"""
        return 'XConfigureEvent'.__wrap(super(XEvent, self).xconfigure())

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XEvent$Buffer org.lwjgl.system.linux.XEvent.createSafe(long,int)"""
        return Buffer.__wrap(__XEvent.createSafe(__long.valueOf(arg0), __int.valueOf(arg1)))

    @staticmethod
    @overload
    def mallocStack() -> 'XEvent':
        """public static org.lwjgl.system.linux.XEvent org.lwjgl.system.linux.XEvent.mallocStack()"""
        return XEvent.__wrap(__XEvent.mallocStack())

    @overload
    def xproperty(self) -> 'XPropertyEvent':
        """public org.lwjgl.system.linux.XPropertyEvent org.lwjgl.system.linux.XEvent.xproperty()"""
        return 'XPropertyEvent'.__wrap(super(XEvent, self).xproperty())

    @overload
    def xgraphicsexpose(self) -> 'XGraphicsExposeEvent':
        """public org.lwjgl.system.linux.XGraphicsExposeEvent org.lwjgl.system.linux.XEvent.xgraphicsexpose()"""
        return 'XGraphicsExposeEvent'.__wrap(super(XEvent, self).xgraphicsexpose())

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XEvent$Buffer org.lwjgl.system.linux.XEvent.create(long,int)"""
        return Buffer.__wrap(__XEvent.create(__long.valueOf(arg0), __int.valueOf(arg1)))

    @staticmethod
    @overload
    def calloc() -> 'XEvent':
        """public static org.lwjgl.system.linux.XEvent org.lwjgl.system.linux.XEvent.calloc()"""
        return XEvent.__wrap(__XEvent.calloc())

    @staticmethod
    @overload
    def nxcreatewindow(arg0: int) -> 'XCreateWindowEvent':
        """public static org.lwjgl.system.linux.XCreateWindowEvent org.lwjgl.system.linux.XEvent.nxcreatewindow(long)"""
        return XCreateWindowEvent.__wrap(__XEvent.nxcreatewindow(__long.valueOf(arg0)))

    @overload
    def xdestroywindow(self) -> 'XDestroyWindowEvent':
        """public org.lwjgl.system.linux.XDestroyWindowEvent org.lwjgl.system.linux.XEvent.xdestroywindow()"""
        return 'XDestroyWindowEvent'.__wrap(super(XEvent, self).xdestroywindow())

    @staticmethod
    @overload
    def nxgeneric(arg0: int) -> 'XGenericEvent':
        """public static org.lwjgl.system.linux.XGenericEvent org.lwjgl.system.linux.XEvent.nxgeneric(long)"""
        return XGenericEvent.__wrap(__XEvent.nxgeneric(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XEvent':
        """public static org.lwjgl.system.linux.XEvent org.lwjgl.system.linux.XEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XEvent.__wrap(__XEvent.calloc(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def xcrossing(self) -> 'XCrossingEvent':
        """public org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XEvent.xcrossing()"""
        return 'XCrossingEvent'.__wrap(super(XEvent, self).xcrossing())

    @staticmethod
    @overload
    def nxgravity(arg0: int) -> 'XGravityEvent':
        """public static org.lwjgl.system.linux.XGravityEvent org.lwjgl.system.linux.XEvent.nxgravity(long)"""
        return XGravityEvent.__wrap(__XEvent.nxgravity(__long.valueOf(arg0)))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XEvent(java.nio.ByteBuffer)"""
        val = __XEvent(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XEvent.ntype(long)"""
        return int.__wrap(__XEvent.ntype(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nxselection(arg0: int) -> 'XSelectionEvent':
        """public static org.lwjgl.system.linux.XSelectionEvent org.lwjgl.system.linux.XEvent.nxselection(long)"""
        return XSelectionEvent.__wrap(__XEvent.nxselection(__long.valueOf(arg0)))

    @overload
    def xcirculaterequest(self) -> 'XCirculateRequestEvent':
        """public org.lwjgl.system.linux.XCirculateRequestEvent org.lwjgl.system.linux.XEvent.xcirculaterequest()"""
        return 'XCirculateRequestEvent'.__wrap(super(XEvent, self).xcirculaterequest()) 
 
 
# CLASS: org.lwjgl.system.linux.XVisualInfo
from pyquantum_helper import import_once as __import_once__
from builtins import str
from pyquantum_helper import override
import org.lwjgl.system.linux.Visual as __Visual
__Visual = __Visual
import java.lang.Object as __object
import org.lwjgl.system.linux.XVisualInfo as __XVisualInfo
__XVisualInfo = __XVisualInfo
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import org.lwjgl.system.linux.XVisualInfo as __XVisualInfo_Buffer
__Buffer = __XVisualInfo_Buffer.Buffer
import java.lang.Object as __Object
__Object = __Object
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
from builtins import int
 
class XVisualInfo(pyglsystem.__Struct, pyglsystem.Struct, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XVisualInfo"""
 
    @staticmethod
    def __wrap(java_value: __XVisualInfo) -> 'XVisualInfo':
        return XVisualInfo(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __XVisualInfo):
        """
        Dynamic initializer for XVisualInfo.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XVisualInfo$Buffer org.lwjgl.system.linux.XVisualInfo.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XVisualInfo.mallocStack(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def ndepth(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XVisualInfo.ndepth(long)"""
        return int.__wrap(__XVisualInfo.ndepth(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XVisualInfo$Buffer org.lwjgl.system.linux.XVisualInfo.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XVisualInfo.malloc(__int.valueOf(arg0), arg1))

    @overload
    def blue_mask(self, arg0: int) -> 'XVisualInfo':
        """public org.lwjgl.system.linux.XVisualInfo org.lwjgl.system.linux.XVisualInfo.blue_mask(long)"""
        return 'XVisualInfo'.__wrap(super(__XVisualInfo, self).blue_mask(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nscreen(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XVisualInfo.nscreen(long,int)"""
        __XVisualInfo.nscreen(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool.__wrap(super(__pyglsystem.Struct, self).isNull(__int.valueOf(arg0)))

    @overload
    def depth(self) -> int:
        """public int org.lwjgl.system.linux.XVisualInfo.depth()"""
        return int.__wrap(super(XVisualInfo, self).depth())

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XVisualInfo$Buffer org.lwjgl.system.linux.XVisualInfo.createSafe(long,int)"""
        return Buffer.__wrap(__XVisualInfo.createSafe(__long.valueOf(arg0), __int.valueOf(arg1)))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XVisualInfo$Buffer org.lwjgl.system.linux.XVisualInfo.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XVisualInfo.callocStack(__int.valueOf(arg0), arg1))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def nvisualid(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XVisualInfo.nvisualid(long)"""
        return int.__wrap(__XVisualInfo.nvisualid(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def ngreen_mask(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XVisualInfo.ngreen_mask(long)"""
        return int.__wrap(__XVisualInfo.ngreen_mask(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nbits_per_rgb(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XVisualInfo.nbits_per_rgb(long)"""
        return int.__wrap(__XVisualInfo.nbits_per_rgb(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XVisualInfo.validate(long)"""
        __XVisualInfo.validate(__long.valueOf(arg0))

    @overload
    def screen(self, arg0: int) -> 'XVisualInfo':
        """public org.lwjgl.system.linux.XVisualInfo org.lwjgl.system.linux.XVisualInfo.screen(int)"""
        return 'XVisualInfo'.__wrap(super(__XVisualInfo, self).screen(__int.valueOf(arg0)))

    @overload
    def set(self, arg0: 'Visual', arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: int) -> 'XVisualInfo':
        """public org.lwjgl.system.linux.XVisualInfo org.lwjgl.system.linux.XVisualInfo.set(org.lwjgl.system.linux.Visual,long,int,int,int,long,long,long,int,int)"""
        return 'XVisualInfo'.__wrap(super(__XVisualInfo, self).set(arg0, __long.valueOf(arg1), __int.valueOf(arg2), __int.valueOf(arg3), __int.valueOf(arg4), __long.valueOf(arg5), __long.valueOf(arg6), __long.valueOf(arg7), __int.valueOf(arg8), __int.valueOf(arg9)))

    @staticmethod
    @overload
    def nbits_per_rgb(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XVisualInfo.nbits_per_rgb(long,int)"""
        __XVisualInfo.nbits_per_rgb(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XVisualInfo':
        """public static org.lwjgl.system.linux.XVisualInfo org.lwjgl.system.linux.XVisualInfo.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XVisualInfo.__wrap(__XVisualInfo.mallocStack(arg0))

    @overload
    def bits_per_rgb(self) -> int:
        """public int org.lwjgl.system.linux.XVisualInfo.bits_per_rgb()"""
        return int.__wrap(super(XVisualInfo, self).bits_per_rgb())

    @staticmethod
    @overload
    def ncolormap_size(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XVisualInfo.ncolormap_size(long,int)"""
        __XVisualInfo.ncolormap_size(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def nvisualid(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XVisualInfo.nvisualid(long,long)"""
        __XVisualInfo.nvisualid(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def mallocStack() -> 'XVisualInfo':
        """public static org.lwjgl.system.linux.XVisualInfo org.lwjgl.system.linux.XVisualInfo.mallocStack()"""
        return XVisualInfo.__wrap(__XVisualInfo.mallocStack())

    @overload
    def visual(self) -> 'Visual':
        """public org.lwjgl.system.linux.Visual org.lwjgl.system.linux.XVisualInfo.visual()"""
        return 'Visual'.__wrap(super(XVisualInfo, self).visual())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XVisualInfo':
        """public static org.lwjgl.system.linux.XVisualInfo org.lwjgl.system.linux.XVisualInfo.calloc(org.lwjgl.system.MemoryStack)"""
        return XVisualInfo.__wrap(__XVisualInfo.calloc(arg0))

    @overload
    def visualid(self) -> int:
        """public long org.lwjgl.system.linux.XVisualInfo.visualid()"""
        return int.__wrap(super(XVisualInfo, self).visualid())

    @staticmethod
    @overload
    def nred_mask(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XVisualInfo.nred_mask(long)"""
        return int.__wrap(__XVisualInfo.nred_mask(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XVisualInfo':
        """public static org.lwjgl.system.linux.XVisualInfo org.lwjgl.system.linux.XVisualInfo.malloc(org.lwjgl.system.MemoryStack)"""
        return XVisualInfo.__wrap(__XVisualInfo.malloc(arg0))

    @staticmethod
    @overload
    def nclass$(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XVisualInfo.nclass$(long,int)"""
        __XVisualInfo.nclass$(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XVisualInfo(java.nio.ByteBuffer)"""
        val = __XVisualInfo(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def visual(self, arg0: 'Visual') -> 'XVisualInfo':
        """public org.lwjgl.system.linux.XVisualInfo org.lwjgl.system.linux.XVisualInfo.visual(org.lwjgl.system.linux.Visual)"""
        return 'XVisualInfo'.__wrap(super(__XVisualInfo, self).visual(arg0))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def callocStack() -> 'XVisualInfo':
        """public static org.lwjgl.system.linux.XVisualInfo org.lwjgl.system.linux.XVisualInfo.callocStack()"""
        return XVisualInfo.__wrap(__XVisualInfo.callocStack())

    @staticmethod
    @overload
    def create(arg0: int) -> 'XVisualInfo':
        """public static org.lwjgl.system.linux.XVisualInfo org.lwjgl.system.linux.XVisualInfo.create(long)"""
        return XVisualInfo.__wrap(__XVisualInfo.create(__long.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XVisualInfo$Buffer org.lwjgl.system.linux.XVisualInfo.create(int)"""
        return Buffer.__wrap(__XVisualInfo.create(__int.valueOf(arg0)))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).address())

    @overload
    def set(self, arg0: 'XVisualInfo') -> 'XVisualInfo':
        """public org.lwjgl.system.linux.XVisualInfo org.lwjgl.system.linux.XVisualInfo.set(org.lwjgl.system.linux.XVisualInfo)"""
        return 'XVisualInfo'.__wrap(super(__XVisualInfo, self).set(arg0))

    @overload
    def red_mask(self) -> int:
        """public long org.lwjgl.system.linux.XVisualInfo.red_mask()"""
        return int.__wrap(super(XVisualInfo, self).red_mask())

    @overload
    def bits_per_rgb(self, arg0: int) -> 'XVisualInfo':
        """public org.lwjgl.system.linux.XVisualInfo org.lwjgl.system.linux.XVisualInfo.bits_per_rgb(int)"""
        return 'XVisualInfo'.__wrap(super(__XVisualInfo, self).bits_per_rgb(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nred_mask(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XVisualInfo.nred_mask(long,long)"""
        __XVisualInfo.nred_mask(__long.valueOf(arg0), __long.valueOf(arg1))

    @overload
    def colormap_size(self, arg0: int) -> 'XVisualInfo':
        """public org.lwjgl.system.linux.XVisualInfo org.lwjgl.system.linux.XVisualInfo.colormap_size(int)"""
        return 'XVisualInfo'.__wrap(super(__XVisualInfo, self).colormap_size(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XVisualInfo$Buffer org.lwjgl.system.linux.XVisualInfo.malloc(int)"""
        return Buffer.__wrap(__XVisualInfo.malloc(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XVisualInfo$Buffer org.lwjgl.system.linux.XVisualInfo.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XVisualInfo.calloc(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XVisualInfo$Buffer org.lwjgl.system.linux.XVisualInfo.create(long,int)"""
        return Buffer.__wrap(__XVisualInfo.create(__long.valueOf(arg0), __int.valueOf(arg1)))

    @staticmethod
    @overload
    def create() -> 'XVisualInfo':
        """public static org.lwjgl.system.linux.XVisualInfo org.lwjgl.system.linux.XVisualInfo.create()"""
        return XVisualInfo.__wrap(__XVisualInfo.create())

    @overload
    def red_mask(self, arg0: int) -> 'XVisualInfo':
        """public org.lwjgl.system.linux.XVisualInfo org.lwjgl.system.linux.XVisualInfo.red_mask(long)"""
        return 'XVisualInfo'.__wrap(super(__XVisualInfo, self).red_mask(__long.valueOf(arg0)))

    @overload
    def green_mask(self, arg0: int) -> 'XVisualInfo':
        """public org.lwjgl.system.linux.XVisualInfo org.lwjgl.system.linux.XVisualInfo.green_mask(long)"""
        return 'XVisualInfo'.__wrap(super(__XVisualInfo, self).green_mask(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nvisual(arg0: int) -> 'Visual':
        """public static org.lwjgl.system.linux.Visual org.lwjgl.system.linux.XVisualInfo.nvisual(long)"""
        return Visual.__wrap(__XVisualInfo.nvisual(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nscreen(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XVisualInfo.nscreen(long)"""
        return int.__wrap(__XVisualInfo.nscreen(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def ndepth(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XVisualInfo.ndepth(long,int)"""
        __XVisualInfo.ndepth(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XVisualInfo$Buffer org.lwjgl.system.linux.XVisualInfo.calloc(int)"""
        return Buffer.__wrap(__XVisualInfo.calloc(__int.valueOf(arg0)))

    @overload
    def green_mask(self) -> int:
        """public long org.lwjgl.system.linux.XVisualInfo.green_mask()"""
        return int.__wrap(super(XVisualInfo, self).green_mask())

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XVisualInfo$Buffer org.lwjgl.system.linux.XVisualInfo.callocStack(int)"""
        return Buffer.__wrap(__XVisualInfo.callocStack(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XVisualInfo':
        """public static org.lwjgl.system.linux.XVisualInfo org.lwjgl.system.linux.XVisualInfo.createSafe(long)"""
        return XVisualInfo.__wrap(__XVisualInfo.createSafe(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc() -> 'XVisualInfo':
        """public static org.lwjgl.system.linux.XVisualInfo org.lwjgl.system.linux.XVisualInfo.calloc()"""
        return XVisualInfo.__wrap(__XVisualInfo.calloc())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str.__wrap(super(pyglsystem.Pointer$Default, self).toString())

    @staticmethod
    @overload
    def nblue_mask(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XVisualInfo.nblue_mask(long)"""
        return int.__wrap(__XVisualInfo.nblue_mask(__long.valueOf(arg0)))

    @overload
    def visualid(self, arg0: int) -> 'XVisualInfo':
        """public org.lwjgl.system.linux.XVisualInfo org.lwjgl.system.linux.XVisualInfo.visualid(long)"""
        return 'XVisualInfo'.__wrap(super(__XVisualInfo, self).visualid(__long.valueOf(arg0)))

    @overload
    def blue_mask(self) -> int:
        """public long org.lwjgl.system.linux.XVisualInfo.blue_mask()"""
        return int.__wrap(super(XVisualInfo, self).blue_mask())

    @overload
    def colormap_size(self) -> int:
        """public int org.lwjgl.system.linux.XVisualInfo.colormap_size()"""
        return int.__wrap(super(XVisualInfo, self).colormap_size())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @staticmethod
    @overload
    def malloc() -> 'XVisualInfo':
        """public static org.lwjgl.system.linux.XVisualInfo org.lwjgl.system.linux.XVisualInfo.malloc()"""
        return XVisualInfo.__wrap(__XVisualInfo.malloc())

    @staticmethod
    @overload
    def nvisual(arg0: int, arg1: 'Visual'):
        """public static void org.lwjgl.system.linux.XVisualInfo.nvisual(long,org.lwjgl.system.linux.Visual)"""
        __XVisualInfo.nvisual(__long.valueOf(arg0), arg1)

    @overload
    def class$(self, arg0: int) -> 'XVisualInfo':
        """public org.lwjgl.system.linux.XVisualInfo org.lwjgl.system.linux.XVisualInfo.class$(int)"""
        return 'XVisualInfo'.__wrap(super(__XVisualInfo, self).class$(__int.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @overload
    def class$(self) -> int:
        """public int org.lwjgl.system.linux.XVisualInfo.class$()"""
        return int.__wrap(super(XVisualInfo, self).class$())

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XVisualInfo':
        """public static org.lwjgl.system.linux.XVisualInfo org.lwjgl.system.linux.XVisualInfo.callocStack(org.lwjgl.system.MemoryStack)"""
        return XVisualInfo.__wrap(__XVisualInfo.callocStack(arg0))

    @overload
    def depth(self, arg0: int) -> 'XVisualInfo':
        """public org.lwjgl.system.linux.XVisualInfo org.lwjgl.system.linux.XVisualInfo.depth(int)"""
        return 'XVisualInfo'.__wrap(super(__XVisualInfo, self).depth(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def ngreen_mask(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XVisualInfo.ngreen_mask(long,long)"""
        __XVisualInfo.ngreen_mask(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def ncolormap_size(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XVisualInfo.ncolormap_size(long)"""
        return int.__wrap(__XVisualInfo.ncolormap_size(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        __Struct.validate(__long.valueOf(arg0), __int.valueOf(arg1), __int.valueOf(arg2), arg3)

    @overload
    def screen(self) -> int:
        """public int org.lwjgl.system.linux.XVisualInfo.screen()"""
        return int.__wrap(super(XVisualInfo, self).screen())

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XVisualInfo$Buffer org.lwjgl.system.linux.XVisualInfo.mallocStack(int)"""
        return Buffer.__wrap(__XVisualInfo.mallocStack(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nclass$(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XVisualInfo.nclass$(long)"""
        return int.__wrap(__XVisualInfo.nclass$(__long.valueOf(arg0)))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XVisualInfo.sizeof()"""
        return int.__wrap(super(XVisualInfo, self).sizeof())

    @staticmethod
    @overload
    def nblue_mask(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XVisualInfo.nblue_mask(long,long)"""
        __XVisualInfo.nblue_mask(__long.valueOf(arg0), __long.valueOf(arg1)) 
 
 
# CLASS: org.lwjgl.system.linux.XCrossingEvent
from pyquantum_helper import import_once as __import_once__
from builtins import str
import java.lang.Boolean as __boolean
from pyquantum_helper import override
import java.lang.Object as __object
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import org.lwjgl.system.linux.XCrossingEvent as __XCrossingEvent_Buffer
__Buffer = __XCrossingEvent_Buffer.Buffer
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import org.lwjgl.system.linux.XCrossingEvent as __XCrossingEvent
__XCrossingEvent = __XCrossingEvent
import java.lang.Object as __Object
__Object = __Object
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
from builtins import int
 
class XCrossingEvent(pyglsystem.__Struct, pyglsystem.Struct, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XCrossingEvent"""
 
    @staticmethod
    def __wrap(java_value: __XCrossingEvent) -> 'XCrossingEvent':
        return XCrossingEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __XCrossingEvent):
        """
        Dynamic initializer for XCrossingEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XCrossingEvent$Buffer org.lwjgl.system.linux.XCrossingEvent.mallocStack(int)"""
        return Buffer.__wrap(__XCrossingEvent.mallocStack(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nroot(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XCrossingEvent.nroot(long)"""
        return int.__wrap(__XCrossingEvent.nroot(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack() -> 'XCrossingEvent':
        """public static org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XCrossingEvent.callocStack()"""
        return XCrossingEvent.__wrap(__XCrossingEvent.callocStack())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def subwindow(self) -> int:
        """public long org.lwjgl.system.linux.XCrossingEvent.subwindow()"""
        return int.__wrap(super(XCrossingEvent, self).subwindow())

    @staticmethod
    @overload
    def nx_root(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCrossingEvent.nx_root(long,int)"""
        __XCrossingEvent.nx_root(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XCrossingEvent.window()"""
        return int.__wrap(super(XCrossingEvent, self).window())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @staticmethod
    @overload
    def ndetail(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XCrossingEvent.ndetail(long)"""
        return int.__wrap(__XCrossingEvent.ndetail(__long.valueOf(arg0)))

    @overload
    def focus(self, arg0: int) -> 'XCrossingEvent':
        """public org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XCrossingEvent.focus(int)"""
        return 'XCrossingEvent'.__wrap(super(__XCrossingEvent, self).focus(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCrossingEvent.nsend_event(long,int)"""
        __XCrossingEvent.nsend_event(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def nfocus(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCrossingEvent.nfocus(long,int)"""
        __XCrossingEvent.nfocus(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def nx_root(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XCrossingEvent.nx_root(long)"""
        return int.__wrap(__XCrossingEvent.nx_root(__long.valueOf(arg0)))

    @overload
    def detail(self, arg0: int) -> 'XCrossingEvent':
        """public org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XCrossingEvent.detail(int)"""
        return 'XCrossingEvent'.__wrap(super(__XCrossingEvent, self).detail(__int.valueOf(arg0)))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def same_screen(self) -> int:
        """public int org.lwjgl.system.linux.XCrossingEvent.same_screen()"""
        return int.__wrap(super(XCrossingEvent, self).same_screen())

    @staticmethod
    @overload
    def nstate(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCrossingEvent.nstate(long,int)"""
        __XCrossingEvent.nstate(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: int, arg10: int, arg11: int, arg12: int, arg13: int, arg14: int, arg15: int, arg16: int) -> 'XCrossingEvent':
        """public org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XCrossingEvent.set(int,long,boolean,long,long,long,long,long,int,int,int,int,int,int,int,int,int)"""
        return 'XCrossingEvent'.__wrap(super(__XCrossingEvent, self).set(__int.valueOf(arg0), __long.valueOf(arg1), __boolean.valueOf(arg2), __long.valueOf(arg3), __long.valueOf(arg4), __long.valueOf(arg5), __long.valueOf(arg6), __long.valueOf(arg7), __int.valueOf(arg8), __int.valueOf(arg9), __int.valueOf(arg10), __int.valueOf(arg11), __int.valueOf(arg12), __int.valueOf(arg13), __int.valueOf(arg14), __int.valueOf(arg15), __int.valueOf(arg16)))

    @overload
    def focus(self) -> int:
        """public int org.lwjgl.system.linux.XCrossingEvent.focus()"""
        return int.__wrap(super(XCrossingEvent, self).focus())

    @overload
    def serial(self, arg0: int) -> 'XCrossingEvent':
        """public org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XCrossingEvent.serial(long)"""
        return 'XCrossingEvent'.__wrap(super(__XCrossingEvent, self).serial(__long.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def root(self) -> int:
        """public long org.lwjgl.system.linux.XCrossingEvent.root()"""
        return int.__wrap(super(XCrossingEvent, self).root())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def time(self, arg0: int) -> 'XCrossingEvent':
        """public org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XCrossingEvent.time(long)"""
        return 'XCrossingEvent'.__wrap(super(__XCrossingEvent, self).time(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XCrossingEvent.nserial(long)"""
        return int.__wrap(__XCrossingEvent.nserial(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nwindow(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XCrossingEvent.nwindow(long)"""
        return int.__wrap(__XCrossingEvent.nwindow(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nmode(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCrossingEvent.nmode(long,int)"""
        __XCrossingEvent.nmode(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).address())

    @overload
    def y_root(self, arg0: int) -> 'XCrossingEvent':
        """public org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XCrossingEvent.y_root(int)"""
        return 'XCrossingEvent'.__wrap(super(__XCrossingEvent, self).y_root(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nstate(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XCrossingEvent.nstate(long)"""
        return int.__wrap(__XCrossingEvent.nstate(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nx(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCrossingEvent.nx(long,int)"""
        __XCrossingEvent.nx(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def set(self, arg0: 'XCrossingEvent') -> 'XCrossingEvent':
        """public org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XCrossingEvent.set(org.lwjgl.system.linux.XCrossingEvent)"""
        return 'XCrossingEvent'.__wrap(super(__XCrossingEvent, self).set(arg0))

    @overload
    def send_event(self, arg0: bool) -> 'XCrossingEvent':
        """public org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XCrossingEvent.send_event(boolean)"""
        return 'XCrossingEvent'.__wrap(super(__XCrossingEvent, self).send_event(__boolean.valueOf(arg0)))

    @overload
    def y(self) -> int:
        """public int org.lwjgl.system.linux.XCrossingEvent.y()"""
        return int.__wrap(super(XCrossingEvent, self).y())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str.__wrap(super(pyglsystem.Pointer$Default, self).toString())

    @staticmethod
    @overload
    def ntime(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XCrossingEvent.ntime(long)"""
        return int.__wrap(__XCrossingEvent.ntime(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nx(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XCrossingEvent.nx(long)"""
        return int.__wrap(__XCrossingEvent.nx(__long.valueOf(arg0)))

    @overload
    def x(self) -> int:
        """public int org.lwjgl.system.linux.XCrossingEvent.x()"""
        return int.__wrap(super(XCrossingEvent, self).x())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XCrossingEvent(java.nio.ByteBuffer)"""
        val = __XCrossingEvent(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XCrossingEvent.serial()"""
        return int.__wrap(super(XCrossingEvent, self).serial())

    @overload
    def x(self, arg0: int) -> 'XCrossingEvent':
        """public org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XCrossingEvent.x(int)"""
        return 'XCrossingEvent'.__wrap(super(__XCrossingEvent, self).x(__int.valueOf(arg0)))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XCrossingEvent':
        """public static org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XCrossingEvent.createSafe(long)"""
        return XCrossingEvent.__wrap(__XCrossingEvent.createSafe(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def ntime(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCrossingEvent.ntime(long,long)"""
        __XCrossingEvent.ntime(__long.valueOf(arg0), __long.valueOf(arg1))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @staticmethod
    @overload
    def nsubwindow(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XCrossingEvent.nsubwindow(long)"""
        return int.__wrap(__XCrossingEvent.nsubwindow(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def create() -> 'XCrossingEvent':
        """public static org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XCrossingEvent.create()"""
        return XCrossingEvent.__wrap(__XCrossingEvent.create())

    @staticmethod
    @overload
    def ndetail(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCrossingEvent.ndetail(long,int)"""
        __XCrossingEvent.ndetail(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XCrossingEvent$Buffer org.lwjgl.system.linux.XCrossingEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XCrossingEvent.mallocStack(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XCrossingEvent$Buffer org.lwjgl.system.linux.XCrossingEvent.callocStack(int)"""
        return Buffer.__wrap(__XCrossingEvent.callocStack(__int.valueOf(arg0)))

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XCrossingEvent.display()"""
        return int.__wrap(super(XCrossingEvent, self).display())

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        __Struct.validate(__long.valueOf(arg0), __int.valueOf(arg1), __int.valueOf(arg2), arg3)

    @overload
    def state(self, arg0: int) -> 'XCrossingEvent':
        """public org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XCrossingEvent.state(int)"""
        return 'XCrossingEvent'.__wrap(super(__XCrossingEvent, self).state(__int.valueOf(arg0)))

    @overload
    def y_root(self) -> int:
        """public int org.lwjgl.system.linux.XCrossingEvent.y_root()"""
        return int.__wrap(super(XCrossingEvent, self).y_root())

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XCrossingEvent$Buffer org.lwjgl.system.linux.XCrossingEvent.create(int)"""
        return Buffer.__wrap(__XCrossingEvent.create(__int.valueOf(arg0)))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XCrossingEvent.sizeof()"""
        return int.__wrap(super(XCrossingEvent, self).sizeof())

    @overload
    def same_screen(self, arg0: int) -> 'XCrossingEvent':
        """public org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XCrossingEvent.same_screen(int)"""
        return 'XCrossingEvent'.__wrap(super(__XCrossingEvent, self).same_screen(__int.valueOf(arg0)))

    @overload
    def subwindow(self, arg0: int) -> 'XCrossingEvent':
        """public org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XCrossingEvent.subwindow(long)"""
        return 'XCrossingEvent'.__wrap(super(__XCrossingEvent, self).subwindow(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def ny_root(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCrossingEvent.ny_root(long,int)"""
        __XCrossingEvent.ny_root(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def window(self, arg0: int) -> 'XCrossingEvent':
        """public org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XCrossingEvent.window(long)"""
        return 'XCrossingEvent'.__wrap(super(__XCrossingEvent, self).window(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc() -> 'XCrossingEvent':
        """public static org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XCrossingEvent.calloc()"""
        return XCrossingEvent.__wrap(__XCrossingEvent.calloc())

    @overload
    def x_root(self, arg0: int) -> 'XCrossingEvent':
        """public org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XCrossingEvent.x_root(int)"""
        return 'XCrossingEvent'.__wrap(super(__XCrossingEvent, self).x_root(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nsame_screen(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XCrossingEvent.nsame_screen(long)"""
        return int.__wrap(__XCrossingEvent.nsame_screen(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XCrossingEvent$Buffer org.lwjgl.system.linux.XCrossingEvent.createSafe(long,int)"""
        return Buffer.__wrap(__XCrossingEvent.createSafe(__long.valueOf(arg0), __int.valueOf(arg1)))

    @overload
    def type(self, arg0: int) -> 'XCrossingEvent':
        """public org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XCrossingEvent.type(int)"""
        return 'XCrossingEvent'.__wrap(super(__XCrossingEvent, self).type(__int.valueOf(arg0)))

    @overload
    def detail(self) -> int:
        """public int org.lwjgl.system.linux.XCrossingEvent.detail()"""
        return int.__wrap(super(XCrossingEvent, self).detail())

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool.__wrap(super(__pyglsystem.Struct, self).isNull(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc() -> 'XCrossingEvent':
        """public static org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XCrossingEvent.malloc()"""
        return XCrossingEvent.__wrap(__XCrossingEvent.malloc())

    @overload
    def root(self, arg0: int) -> 'XCrossingEvent':
        """public org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XCrossingEvent.root(long)"""
        return 'XCrossingEvent'.__wrap(super(__XCrossingEvent, self).root(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XCrossingEvent':
        """public static org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XCrossingEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XCrossingEvent.__wrap(__XCrossingEvent.mallocStack(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCrossingEvent.ndisplay(long,long)"""
        __XCrossingEvent.ndisplay(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def nsame_screen(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCrossingEvent.nsame_screen(long,int)"""
        __XCrossingEvent.nsame_screen(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XCrossingEvent$Buffer org.lwjgl.system.linux.XCrossingEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XCrossingEvent.malloc(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def nwindow(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCrossingEvent.nwindow(long,long)"""
        __XCrossingEvent.nwindow(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def mallocStack() -> 'XCrossingEvent':
        """public static org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XCrossingEvent.mallocStack()"""
        return XCrossingEvent.__wrap(__XCrossingEvent.mallocStack())

    @overload
    def mode(self) -> int:
        """public int org.lwjgl.system.linux.XCrossingEvent.mode()"""
        return int.__wrap(super(XCrossingEvent, self).mode())

    @overload
    def mode(self, arg0: int) -> 'XCrossingEvent':
        """public org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XCrossingEvent.mode(int)"""
        return 'XCrossingEvent'.__wrap(super(__XCrossingEvent, self).mode(__int.valueOf(arg0)))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XCrossingEvent.type()"""
        return int.__wrap(super(XCrossingEvent, self).type())

    @overload
    def display(self, arg0: int) -> 'XCrossingEvent':
        """public org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XCrossingEvent.display(long)"""
        return 'XCrossingEvent'.__wrap(super(__XCrossingEvent, self).display(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XCrossingEvent.nsend_event(long)"""
        return int.__wrap(__XCrossingEvent.nsend_event(__long.valueOf(arg0)))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @staticmethod
    @overload
    def ny(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCrossingEvent.ny(long,int)"""
        __XCrossingEvent.ny(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def nfocus(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XCrossingEvent.nfocus(long)"""
        return int.__wrap(__XCrossingEvent.nfocus(__long.valueOf(arg0)))

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XCrossingEvent.ndisplay(long)"""
        return int.__wrap(__XCrossingEvent.ndisplay(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XCrossingEvent':
        """public static org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XCrossingEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XCrossingEvent.__wrap(__XCrossingEvent.calloc(arg0))

    @overload
    def state(self) -> int:
        """public int org.lwjgl.system.linux.XCrossingEvent.state()"""
        return int.__wrap(super(XCrossingEvent, self).state())

    @staticmethod
    @overload
    def nmode(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XCrossingEvent.nmode(long)"""
        return int.__wrap(__XCrossingEvent.nmode(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XCrossingEvent$Buffer org.lwjgl.system.linux.XCrossingEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XCrossingEvent.calloc(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XCrossingEvent$Buffer org.lwjgl.system.linux.XCrossingEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XCrossingEvent.callocStack(__int.valueOf(arg0), arg1))

    @overload
    def x_root(self) -> int:
        """public int org.lwjgl.system.linux.XCrossingEvent.x_root()"""
        return int.__wrap(super(XCrossingEvent, self).x_root())

    @overload
    def time(self) -> int:
        """public long org.lwjgl.system.linux.XCrossingEvent.time()"""
        return int.__wrap(super(XCrossingEvent, self).time())

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XCrossingEvent.validate(long)"""
        __XCrossingEvent.validate(__long.valueOf(arg0))

    @staticmethod
    @overload
    def ny_root(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XCrossingEvent.ny_root(long)"""
        return int.__wrap(__XCrossingEvent.ny_root(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XCrossingEvent':
        """public static org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XCrossingEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XCrossingEvent.__wrap(__XCrossingEvent.malloc(arg0))

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCrossingEvent.nserial(long,long)"""
        __XCrossingEvent.nserial(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCrossingEvent.ntype(long,int)"""
        __XCrossingEvent.ntype(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XCrossingEvent':
        """public static org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XCrossingEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XCrossingEvent.__wrap(__XCrossingEvent.callocStack(arg0))

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XCrossingEvent.ntype(long)"""
        return int.__wrap(__XCrossingEvent.ntype(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def ny(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XCrossingEvent.ny(long)"""
        return int.__wrap(__XCrossingEvent.ny(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XCrossingEvent$Buffer org.lwjgl.system.linux.XCrossingEvent.create(long,int)"""
        return Buffer.__wrap(__XCrossingEvent.create(__long.valueOf(arg0), __int.valueOf(arg1)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'XCrossingEvent':
        """public static org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XCrossingEvent.create(long)"""
        return XCrossingEvent.__wrap(__XCrossingEvent.create(__long.valueOf(arg0)))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XCrossingEvent.send_event()"""
        return bool.__wrap(super(XCrossingEvent, self).send_event())

    @staticmethod
    @overload
    def nsubwindow(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCrossingEvent.nsubwindow(long,long)"""
        __XCrossingEvent.nsubwindow(__long.valueOf(arg0), __long.valueOf(arg1))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XCrossingEvent$Buffer org.lwjgl.system.linux.XCrossingEvent.calloc(int)"""
        return Buffer.__wrap(__XCrossingEvent.calloc(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nroot(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCrossingEvent.nroot(long,long)"""
        __XCrossingEvent.nroot(__long.valueOf(arg0), __long.valueOf(arg1))

    @overload
    def y(self, arg0: int) -> 'XCrossingEvent':
        """public org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XCrossingEvent.y(int)"""
        return 'XCrossingEvent'.__wrap(super(__XCrossingEvent, self).y(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XCrossingEvent$Buffer org.lwjgl.system.linux.XCrossingEvent.malloc(int)"""
        return Buffer.__wrap(__XCrossingEvent.malloc(__int.valueOf(arg0))) 
 
 
# CLASS: org.lwjgl.system.linux.XErrorEvent$Buffer
from pyquantum_helper import import_once as __import_once__
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import java.util.stream.Stream as __Stream
__Stream = __Stream
import org.lwjgl.system.StructBuffer as __StructBuffer
__StructBuffer = __StructBuffer
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Class as __Class
__Class = __Class
import java.lang.Byte as __byte
import org.lwjgl.system.CustomBuffer as __CustomBuffer
__CustomBuffer = __CustomBuffer
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.util.Iterator as __Iterator
__Iterator = __Iterator
import java.lang.Object as __object
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import org.lwjgl.system.linux.XErrorEvent as __XErrorEvent_Buffer
__Buffer = __XErrorEvent_Buffer.Buffer
import java.util.Iterator as Iterator
import java.util.Spliterator as __Spliterator
__Spliterator = __Spliterator
import java.lang.Long as __long
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import java.util.stream.Stream as Stream
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import int
 
class Buffer(pyglsystem.__StructBuffer, pyglsystem.StructBuffer, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XErrorEvent.Buffer"""
 
    @staticmethod
    def __wrap(java_value: __Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(__pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0), arg1))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int.__wrap(super(__pyglsystem.CustomBuffer, self).address(__int.valueOf(arg0)))

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XErrorEvent$Buffer.serial()"""
        return int.__wrap(super(Buffer, self).serial())

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(__int.valueOf(arg0), arg1))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int.__wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @overload
    def error_code(self) -> int:
        """public byte org.lwjgl.system.linux.XErrorEvent$Buffer.error_code()"""
        return int.__wrap(super(Buffer, self).error_code())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(arg0))

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).position())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XErrorEvent$Buffer(java.nio.ByteBuffer)"""
        val = __Buffer(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def request_code(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XErrorEvent$Buffer org.lwjgl.system.linux.XErrorEvent$Buffer.request_code(byte)"""
        return 'Buffer'.__wrap(super(__Buffer, self).request_code(__byte.valueOf(arg0)))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool.__wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def minor_code(self) -> int:
        """public byte org.lwjgl.system.linux.XErrorEvent$Buffer.minor_code()"""
        return int.__wrap(super(Buffer, self).minor_code())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).position(__int.valueOf(arg0)))

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XErrorEvent$Buffer org.lwjgl.system.linux.XErrorEvent$Buffer.display(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).display(__long.valueOf(arg0)))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0)))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).clear())

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(__int.valueOf(arg0), arg1))

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XErrorEvent$Buffer.display()"""
        return int.__wrap(super(Buffer, self).display())

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XErrorEvent$Buffer.type()"""
        return int.__wrap(super(Buffer, self).type())

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address())

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XErrorEvent$Buffer org.lwjgl.system.linux.XErrorEvent$Buffer.type(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).type(__int.valueOf(arg0)))

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).slice())

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def request_code(self) -> int:
        """public byte org.lwjgl.system.linux.XErrorEvent$Buffer.request_code()"""
        return int.__wrap(super(Buffer, self).request_code())

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'.__wrap(super(pyglsystem.StructBuffer, self).get())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).limit(__int.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).reset())

    @overload
    def error_code(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XErrorEvent$Buffer org.lwjgl.system.linux.XErrorEvent$Buffer.error_code(byte)"""
        return 'Buffer'.__wrap(super(__Buffer, self).error_code(__byte.valueOf(arg0)))

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'.__wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str.__wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @overload
    def minor_code(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XErrorEvent$Buffer org.lwjgl.system.linux.XErrorEvent$Buffer.minor_code(byte)"""
        return 'Buffer'.__wrap(super(__Buffer, self).minor_code(__byte.valueOf(arg0)))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XErrorEvent$Buffer org.lwjgl.system.linux.XErrorEvent$Buffer.serial(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).serial(__long.valueOf(arg0)))

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(arg0))

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).stream())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XErrorEvent$Buffer(long,int)"""
        val = __Buffer(__long.valueOf(arg0), __int.valueOf(arg1))
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'.__wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def resourceid(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XErrorEvent$Buffer org.lwjgl.system.linux.XErrorEvent$Buffer.resourceid(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).resourceid(__long.valueOf(arg0)))

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).slice(__int.valueOf(arg0), __int.valueOf(arg1)))

    @overload
    def resourceid(self) -> int:
        """public long org.lwjgl.system.linux.XErrorEvent$Buffer.resourceid()"""
        return int.__wrap(super(Buffer, self).resourceid()) 
 
 
# CLASS: org.lwjgl.system.linux.XKeyEvent
from pyquantum_helper import import_once as __import_once__
import org.lwjgl.system.linux.XKeyEvent as __XKeyEvent
__XKeyEvent = __XKeyEvent
from builtins import str
import java.lang.Boolean as __boolean
from pyquantum_helper import override
import java.lang.Object as __object
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import org.lwjgl.system.linux.XKeyEvent as __XKeyEvent_Buffer
__Buffer = __XKeyEvent_Buffer.Buffer
import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
from builtins import int
 
class XKeyEvent(pyglsystem.__Struct, pyglsystem.Struct, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XKeyEvent"""
 
    @staticmethod
    def __wrap(java_value: __XKeyEvent) -> 'XKeyEvent':
        return XKeyEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __XKeyEvent):
        """
        Dynamic initializer for XKeyEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XKeyEvent.serial()"""
        return int.__wrap(super(XKeyEvent, self).serial())

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XKeyEvent.display()"""
        return int.__wrap(super(XKeyEvent, self).display())

    @staticmethod
    @overload
    def create() -> 'XKeyEvent':
        """public static org.lwjgl.system.linux.XKeyEvent org.lwjgl.system.linux.XKeyEvent.create()"""
        return XKeyEvent.__wrap(__XKeyEvent.create())

    @staticmethod
    @overload
    def nroot(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XKeyEvent.nroot(long)"""
        return int.__wrap(__XKeyEvent.nroot(__long.valueOf(arg0)))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XKeyEvent.validate(long)"""
        __XKeyEvent.validate(__long.valueOf(arg0))

    @staticmethod
    @overload
    def nsubwindow(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XKeyEvent.nsubwindow(long)"""
        return int.__wrap(__XKeyEvent.nsubwindow(__long.valueOf(arg0)))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def root(self, arg0: int) -> 'XKeyEvent':
        """public org.lwjgl.system.linux.XKeyEvent org.lwjgl.system.linux.XKeyEvent.root(long)"""
        return 'XKeyEvent'.__wrap(super(__XKeyEvent, self).root(__long.valueOf(arg0)))

    @overload
    def same_screen(self, arg0: bool) -> 'XKeyEvent':
        """public org.lwjgl.system.linux.XKeyEvent org.lwjgl.system.linux.XKeyEvent.same_screen(boolean)"""
        return 'XKeyEvent'.__wrap(super(__XKeyEvent, self).same_screen(__boolean.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XKeyEvent$Buffer org.lwjgl.system.linux.XKeyEvent.create(int)"""
        return Buffer.__wrap(__XKeyEvent.create(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def ny_root(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XKeyEvent.ny_root(long)"""
        return int.__wrap(__XKeyEvent.ny_root(__long.valueOf(arg0)))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XKeyEvent.send_event()"""
        return bool.__wrap(super(XKeyEvent, self).send_event())

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XKeyEvent.ntype(long)"""
        return int.__wrap(__XKeyEvent.ntype(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XKeyEvent.nsend_event(long,int)"""
        __XKeyEvent.nsend_event(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def nsame_screen(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XKeyEvent.nsame_screen(long)"""
        return int.__wrap(__XKeyEvent.nsame_screen(__long.valueOf(arg0)))

    @overload
    def display(self, arg0: int) -> 'XKeyEvent':
        """public org.lwjgl.system.linux.XKeyEvent org.lwjgl.system.linux.XKeyEvent.display(long)"""
        return 'XKeyEvent'.__wrap(super(__XKeyEvent, self).display(__long.valueOf(arg0)))

    @overload
    def same_screen(self) -> bool:
        """public boolean org.lwjgl.system.linux.XKeyEvent.same_screen()"""
        return bool.__wrap(super(XKeyEvent, self).same_screen())

    @staticmethod
    @overload
    def nx_root(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XKeyEvent.nx_root(long,int)"""
        __XKeyEvent.nx_root(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def type(self, arg0: int) -> 'XKeyEvent':
        """public org.lwjgl.system.linux.XKeyEvent org.lwjgl.system.linux.XKeyEvent.type(int)"""
        return 'XKeyEvent'.__wrap(super(__XKeyEvent, self).type(__int.valueOf(arg0)))

    @overload
    def keycode(self) -> int:
        """public int org.lwjgl.system.linux.XKeyEvent.keycode()"""
        return int.__wrap(super(XKeyEvent, self).keycode())

    @staticmethod
    @overload
    def ny(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XKeyEvent.ny(long,int)"""
        __XKeyEvent.ny(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XKeyEvent$Buffer org.lwjgl.system.linux.XKeyEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XKeyEvent.mallocStack(__int.valueOf(arg0), arg1))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: int, arg10: int, arg11: int, arg12: int, arg13: int, arg14: bool) -> 'XKeyEvent':
        """public org.lwjgl.system.linux.XKeyEvent org.lwjgl.system.linux.XKeyEvent.set(int,long,boolean,long,long,long,long,long,int,int,int,int,int,int,boolean)"""
        return 'XKeyEvent'.__wrap(super(__XKeyEvent, self).set(__int.valueOf(arg0), __long.valueOf(arg1), __boolean.valueOf(arg2), __long.valueOf(arg3), __long.valueOf(arg4), __long.valueOf(arg5), __long.valueOf(arg6), __long.valueOf(arg7), __int.valueOf(arg8), __int.valueOf(arg9), __int.valueOf(arg10), __int.valueOf(arg11), __int.valueOf(arg12), __int.valueOf(arg13), __boolean.valueOf(arg14)))

    @staticmethod
    @overload
    def nstate(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XKeyEvent.nstate(long)"""
        return int.__wrap(__XKeyEvent.nstate(__long.valueOf(arg0)))

    @overload
    def subwindow(self, arg0: int) -> 'XKeyEvent':
        """public org.lwjgl.system.linux.XKeyEvent org.lwjgl.system.linux.XKeyEvent.subwindow(long)"""
        return 'XKeyEvent'.__wrap(super(__XKeyEvent, self).subwindow(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'XKeyEvent':
        """public static org.lwjgl.system.linux.XKeyEvent org.lwjgl.system.linux.XKeyEvent.create(long)"""
        return XKeyEvent.__wrap(__XKeyEvent.create(__long.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def state(self) -> int:
        """public int org.lwjgl.system.linux.XKeyEvent.state()"""
        return int.__wrap(super(XKeyEvent, self).state())

    @staticmethod
    @overload
    def nwindow(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XKeyEvent.nwindow(long,long)"""
        __XKeyEvent.nwindow(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XKeyEvent.nserial(long)"""
        return int.__wrap(__XKeyEvent.nserial(__long.valueOf(arg0)))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).address())

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XKeyEvent.ndisplay(long,long)"""
        __XKeyEvent.ndisplay(__long.valueOf(arg0), __long.valueOf(arg1))

    @overload
    def x_root(self) -> int:
        """public int org.lwjgl.system.linux.XKeyEvent.x_root()"""
        return int.__wrap(super(XKeyEvent, self).x_root())

    @overload
    def x_root(self, arg0: int) -> 'XKeyEvent':
        """public org.lwjgl.system.linux.XKeyEvent org.lwjgl.system.linux.XKeyEvent.x_root(int)"""
        return 'XKeyEvent'.__wrap(super(__XKeyEvent, self).x_root(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XKeyEvent$Buffer org.lwjgl.system.linux.XKeyEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XKeyEvent.callocStack(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XKeyEvent':
        """public static org.lwjgl.system.linux.XKeyEvent org.lwjgl.system.linux.XKeyEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XKeyEvent.__wrap(__XKeyEvent.calloc(arg0))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XKeyEvent$Buffer org.lwjgl.system.linux.XKeyEvent.createSafe(long,int)"""
        return Buffer.__wrap(__XKeyEvent.createSafe(__long.valueOf(arg0), __int.valueOf(arg1)))

    @overload
    def window(self, arg0: int) -> 'XKeyEvent':
        """public org.lwjgl.system.linux.XKeyEvent org.lwjgl.system.linux.XKeyEvent.window(long)"""
        return 'XKeyEvent'.__wrap(super(__XKeyEvent, self).window(__long.valueOf(arg0)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str.__wrap(super(pyglsystem.Pointer$Default, self).toString())

    @staticmethod
    @overload
    def calloc() -> 'XKeyEvent':
        """public static org.lwjgl.system.linux.XKeyEvent org.lwjgl.system.linux.XKeyEvent.calloc()"""
        return XKeyEvent.__wrap(__XKeyEvent.calloc())

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XKeyEvent.ntype(long,int)"""
        __XKeyEvent.ntype(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XKeyEvent$Buffer org.lwjgl.system.linux.XKeyEvent.create(long,int)"""
        return Buffer.__wrap(__XKeyEvent.create(__long.valueOf(arg0), __int.valueOf(arg1)))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XKeyEvent.sizeof()"""
        return int.__wrap(super(XKeyEvent, self).sizeof())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @overload
    def x(self) -> int:
        """public int org.lwjgl.system.linux.XKeyEvent.x()"""
        return int.__wrap(super(XKeyEvent, self).x())

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XKeyEvent.window()"""
        return int.__wrap(super(XKeyEvent, self).window())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @staticmethod
    @overload
    def nkeycode(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XKeyEvent.nkeycode(long,int)"""
        __XKeyEvent.nkeycode(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def nstate(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XKeyEvent.nstate(long,int)"""
        __XKeyEvent.nstate(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XKeyEvent(java.nio.ByteBuffer)"""
        val = __XKeyEvent(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @staticmethod
    @overload
    def ny(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XKeyEvent.ny(long)"""
        return int.__wrap(__XKeyEvent.ny(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XKeyEvent$Buffer org.lwjgl.system.linux.XKeyEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XKeyEvent.calloc(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def nx(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XKeyEvent.nx(long)"""
        return int.__wrap(__XKeyEvent.nx(__long.valueOf(arg0)))

    @overload
    def state(self, arg0: int) -> 'XKeyEvent':
        """public org.lwjgl.system.linux.XKeyEvent org.lwjgl.system.linux.XKeyEvent.state(int)"""
        return 'XKeyEvent'.__wrap(super(__XKeyEvent, self).state(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        __Struct.validate(__long.valueOf(arg0), __int.valueOf(arg1), __int.valueOf(arg2), arg3)

    @staticmethod
    @overload
    def ntime(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XKeyEvent.ntime(long)"""
        return int.__wrap(__XKeyEvent.ntime(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XKeyEvent$Buffer org.lwjgl.system.linux.XKeyEvent.malloc(int)"""
        return Buffer.__wrap(__XKeyEvent.malloc(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XKeyEvent':
        """public static org.lwjgl.system.linux.XKeyEvent org.lwjgl.system.linux.XKeyEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XKeyEvent.__wrap(__XKeyEvent.callocStack(arg0))

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool.__wrap(super(__pyglsystem.Struct, self).isNull(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nroot(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XKeyEvent.nroot(long,long)"""
        __XKeyEvent.nroot(__long.valueOf(arg0), __long.valueOf(arg1))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def nx(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XKeyEvent.nx(long,int)"""
        __XKeyEvent.nx(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def x(self, arg0: int) -> 'XKeyEvent':
        """public org.lwjgl.system.linux.XKeyEvent org.lwjgl.system.linux.XKeyEvent.x(int)"""
        return 'XKeyEvent'.__wrap(super(__XKeyEvent, self).x(__int.valueOf(arg0)))

    @overload
    def y(self) -> int:
        """public int org.lwjgl.system.linux.XKeyEvent.y()"""
        return int.__wrap(super(XKeyEvent, self).y())

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XKeyEvent.type()"""
        return int.__wrap(super(XKeyEvent, self).type())

    @overload
    def set(self, arg0: 'XKeyEvent') -> 'XKeyEvent':
        """public org.lwjgl.system.linux.XKeyEvent org.lwjgl.system.linux.XKeyEvent.set(org.lwjgl.system.linux.XKeyEvent)"""
        return 'XKeyEvent'.__wrap(super(__XKeyEvent, self).set(arg0))

    @staticmethod
    @overload
    def nwindow(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XKeyEvent.nwindow(long)"""
        return int.__wrap(__XKeyEvent.nwindow(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack() -> 'XKeyEvent':
        """public static org.lwjgl.system.linux.XKeyEvent org.lwjgl.system.linux.XKeyEvent.mallocStack()"""
        return XKeyEvent.__wrap(__XKeyEvent.mallocStack())

    @overload
    def y_root(self, arg0: int) -> 'XKeyEvent':
        """public org.lwjgl.system.linux.XKeyEvent org.lwjgl.system.linux.XKeyEvent.y_root(int)"""
        return 'XKeyEvent'.__wrap(super(__XKeyEvent, self).y_root(__int.valueOf(arg0)))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XKeyEvent$Buffer org.lwjgl.system.linux.XKeyEvent.calloc(int)"""
        return Buffer.__wrap(__XKeyEvent.calloc(__int.valueOf(arg0)))

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @overload
    def y(self, arg0: int) -> 'XKeyEvent':
        """public org.lwjgl.system.linux.XKeyEvent org.lwjgl.system.linux.XKeyEvent.y(int)"""
        return 'XKeyEvent'.__wrap(super(__XKeyEvent, self).y(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack() -> 'XKeyEvent':
        """public static org.lwjgl.system.linux.XKeyEvent org.lwjgl.system.linux.XKeyEvent.callocStack()"""
        return XKeyEvent.__wrap(__XKeyEvent.callocStack())

    @overload
    def y_root(self) -> int:
        """public int org.lwjgl.system.linux.XKeyEvent.y_root()"""
        return int.__wrap(super(XKeyEvent, self).y_root())

    @overload
    def root(self) -> int:
        """public long org.lwjgl.system.linux.XKeyEvent.root()"""
        return int.__wrap(super(XKeyEvent, self).root())

    @overload
    def time(self, arg0: int) -> 'XKeyEvent':
        """public org.lwjgl.system.linux.XKeyEvent org.lwjgl.system.linux.XKeyEvent.time(long)"""
        return 'XKeyEvent'.__wrap(super(__XKeyEvent, self).time(__long.valueOf(arg0)))

    @overload
    def keycode(self, arg0: int) -> 'XKeyEvent':
        """public org.lwjgl.system.linux.XKeyEvent org.lwjgl.system.linux.XKeyEvent.keycode(int)"""
        return 'XKeyEvent'.__wrap(super(__XKeyEvent, self).keycode(__int.valueOf(arg0)))

    @overload
    def send_event(self, arg0: bool) -> 'XKeyEvent':
        """public org.lwjgl.system.linux.XKeyEvent org.lwjgl.system.linux.XKeyEvent.send_event(boolean)"""
        return 'XKeyEvent'.__wrap(super(__XKeyEvent, self).send_event(__boolean.valueOf(arg0)))

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XKeyEvent.nserial(long,long)"""
        __XKeyEvent.nserial(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XKeyEvent$Buffer org.lwjgl.system.linux.XKeyEvent.mallocStack(int)"""
        return Buffer.__wrap(__XKeyEvent.mallocStack(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XKeyEvent.ndisplay(long)"""
        return int.__wrap(__XKeyEvent.ndisplay(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc() -> 'XKeyEvent':
        """public static org.lwjgl.system.linux.XKeyEvent org.lwjgl.system.linux.XKeyEvent.malloc()"""
        return XKeyEvent.__wrap(__XKeyEvent.malloc())

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XKeyEvent':
        """public static org.lwjgl.system.linux.XKeyEvent org.lwjgl.system.linux.XKeyEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XKeyEvent.__wrap(__XKeyEvent.mallocStack(arg0))

    @overload
    def subwindow(self) -> int:
        """public long org.lwjgl.system.linux.XKeyEvent.subwindow()"""
        return int.__wrap(super(XKeyEvent, self).subwindow())

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XKeyEvent$Buffer org.lwjgl.system.linux.XKeyEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XKeyEvent.malloc(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XKeyEvent':
        """public static org.lwjgl.system.linux.XKeyEvent org.lwjgl.system.linux.XKeyEvent.createSafe(long)"""
        return XKeyEvent.__wrap(__XKeyEvent.createSafe(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XKeyEvent$Buffer org.lwjgl.system.linux.XKeyEvent.callocStack(int)"""
        return Buffer.__wrap(__XKeyEvent.callocStack(__int.valueOf(arg0)))

    @overload
    def time(self) -> int:
        """public long org.lwjgl.system.linux.XKeyEvent.time()"""
        return int.__wrap(super(XKeyEvent, self).time())

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XKeyEvent':
        """public static org.lwjgl.system.linux.XKeyEvent org.lwjgl.system.linux.XKeyEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XKeyEvent.__wrap(__XKeyEvent.malloc(arg0))

    @staticmethod
    @overload
    def ny_root(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XKeyEvent.ny_root(long,int)"""
        __XKeyEvent.ny_root(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def serial(self, arg0: int) -> 'XKeyEvent':
        """public org.lwjgl.system.linux.XKeyEvent org.lwjgl.system.linux.XKeyEvent.serial(long)"""
        return 'XKeyEvent'.__wrap(super(__XKeyEvent, self).serial(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nx_root(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XKeyEvent.nx_root(long)"""
        return int.__wrap(__XKeyEvent.nx_root(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def ntime(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XKeyEvent.ntime(long,long)"""
        __XKeyEvent.ntime(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def nkeycode(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XKeyEvent.nkeycode(long)"""
        return int.__wrap(__XKeyEvent.nkeycode(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nsubwindow(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XKeyEvent.nsubwindow(long,long)"""
        __XKeyEvent.nsubwindow(__long.valueOf(arg0), __long.valueOf(arg1))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XKeyEvent.nsend_event(long)"""
        return int.__wrap(__XKeyEvent.nsend_event(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nsame_screen(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XKeyEvent.nsame_screen(long,int)"""
        __XKeyEvent.nsame_screen(__long.valueOf(arg0), __int.valueOf(arg1)) 
 
 
# CLASS: org.lwjgl.system.linux.XCirculateRequestEvent$Buffer
from pyquantum_helper import import_once as __import_once__
import java.lang.Boolean as __boolean
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import java.util.stream.Stream as __Stream
__Stream = __Stream
import org.lwjgl.system.StructBuffer as __StructBuffer
__StructBuffer = __StructBuffer
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.CustomBuffer as __CustomBuffer
__CustomBuffer = __CustomBuffer
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.util.Iterator as __Iterator
__Iterator = __Iterator
import java.lang.Object as __object
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.util.Iterator as Iterator
import java.util.Spliterator as __Spliterator
__Spliterator = __Spliterator
import java.lang.Long as __long
import org.lwjgl.system.linux.XCirculateRequestEvent as __XCirculateRequestEvent_Buffer
__Buffer = __XCirculateRequestEvent_Buffer.Buffer
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import java.util.stream.Stream as Stream
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import int
 
class Buffer(pyglsystem.__StructBuffer, pyglsystem.StructBuffer, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XCirculateRequestEvent.Buffer"""
 
    @staticmethod
    def __wrap(java_value: __Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(__pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XCirculateRequestEvent$Buffer(java.nio.ByteBuffer)"""
        val = __Buffer(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0), arg1))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XCirculateRequestEvent$Buffer.send_event()"""
        return bool.__wrap(super(Buffer, self).send_event())

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address0())

    @overload
    def place(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCirculateRequestEvent$Buffer org.lwjgl.system.linux.XCirculateRequestEvent$Buffer.place(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).place(__int.valueOf(arg0)))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int.__wrap(super(__pyglsystem.CustomBuffer, self).address(__int.valueOf(arg0)))

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(__int.valueOf(arg0), arg1))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int.__wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(arg0))

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCirculateRequestEvent$Buffer org.lwjgl.system.linux.XCirculateRequestEvent$Buffer.serial(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).serial(__long.valueOf(arg0)))

    @overload
    def window(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCirculateRequestEvent$Buffer org.lwjgl.system.linux.XCirculateRequestEvent$Buffer.window(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).window(__long.valueOf(arg0)))

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XCirculateRequestEvent$Buffer org.lwjgl.system.linux.XCirculateRequestEvent$Buffer.send_event(boolean)"""
        return 'Buffer'.__wrap(super(__Buffer, self).send_event(__boolean.valueOf(arg0)))

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XCirculateRequestEvent$Buffer.window()"""
        return int.__wrap(super(Buffer, self).window())

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XCirculateRequestEvent$Buffer.serial()"""
        return int.__wrap(super(Buffer, self).serial())

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool.__wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @overload
    def parent(self) -> int:
        """public long org.lwjgl.system.linux.XCirculateRequestEvent$Buffer.parent()"""
        return int.__wrap(super(Buffer, self).parent())

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XCirculateRequestEvent$Buffer.type()"""
        return int.__wrap(super(Buffer, self).type())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).position(__int.valueOf(arg0)))

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCirculateRequestEvent$Buffer org.lwjgl.system.linux.XCirculateRequestEvent$Buffer.display(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).display(__long.valueOf(arg0)))

    @overload
    def place(self) -> int:
        """public int org.lwjgl.system.linux.XCirculateRequestEvent$Buffer.place()"""
        return int.__wrap(super(Buffer, self).place())

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0)))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).clear())

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(__int.valueOf(arg0), arg1))

    @overload
    def parent(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCirculateRequestEvent$Buffer org.lwjgl.system.linux.XCirculateRequestEvent$Buffer.parent(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).parent(__long.valueOf(arg0)))

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCirculateRequestEvent$Buffer org.lwjgl.system.linux.XCirculateRequestEvent$Buffer.type(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).type(__int.valueOf(arg0)))

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).slice())

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).compact())

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'.__wrap(super(pyglsystem.StructBuffer, self).get())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).limit(__int.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'.__wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str.__wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XCirculateRequestEvent$Buffer.display()"""
        return int.__wrap(super(Buffer, self).display())

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(arg0))

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).stream())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'.__wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XCirculateRequestEvent$Buffer(long,int)"""
        val = __Buffer(__long.valueOf(arg0), __int.valueOf(arg1))
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).slice(__int.valueOf(arg0), __int.valueOf(arg1))) 
 
 
# CLASS: org.lwjgl.system.linux.XConfigureRequestEvent
from pyquantum_helper import import_once as __import_once__
import org.lwjgl.system.linux.XConfigureRequestEvent as __XConfigureRequestEvent_Buffer
__Buffer = __XConfigureRequestEvent_Buffer.Buffer
from builtins import str
import java.lang.Boolean as __boolean
from pyquantum_helper import override
import java.lang.Object as __object
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import org.lwjgl.system.linux.XConfigureRequestEvent as __XConfigureRequestEvent
__XConfigureRequestEvent = __XConfigureRequestEvent
import java.lang.Object as __Object
__Object = __Object
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
from builtins import int
 
class XConfigureRequestEvent(pyglsystem.__Struct, pyglsystem.Struct, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XConfigureRequestEvent"""
 
    @staticmethod
    def __wrap(java_value: __XConfigureRequestEvent) -> 'XConfigureRequestEvent':
        return XConfigureRequestEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __XConfigureRequestEvent):
        """
        Dynamic initializer for XConfigureRequestEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def parent(self) -> int:
        """public long org.lwjgl.system.linux.XConfigureRequestEvent.parent()"""
        return int.__wrap(super(XConfigureRequestEvent, self).parent())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def serial(self, arg0: int) -> 'XConfigureRequestEvent':
        """public org.lwjgl.system.linux.XConfigureRequestEvent org.lwjgl.system.linux.XConfigureRequestEvent.serial(long)"""
        return 'XConfigureRequestEvent'.__wrap(super(__XConfigureRequestEvent, self).serial(__long.valueOf(arg0)))

    @overload
    def width(self, arg0: int) -> 'XConfigureRequestEvent':
        """public org.lwjgl.system.linux.XConfigureRequestEvent org.lwjgl.system.linux.XConfigureRequestEvent.width(int)"""
        return 'XConfigureRequestEvent'.__wrap(super(__XConfigureRequestEvent, self).width(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XConfigureRequestEvent':
        """public static org.lwjgl.system.linux.XConfigureRequestEvent org.lwjgl.system.linux.XConfigureRequestEvent.createSafe(long)"""
        return XConfigureRequestEvent.__wrap(__XConfigureRequestEvent.createSafe(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def ndetail(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XConfigureRequestEvent.ndetail(long)"""
        return int.__wrap(__XConfigureRequestEvent.ndetail(__long.valueOf(arg0)))

    @overload
    def border_width(self) -> int:
        """public int org.lwjgl.system.linux.XConfigureRequestEvent.border_width()"""
        return int.__wrap(super(XConfigureRequestEvent, self).border_width())

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XConfigureRequestEvent.ndisplay(long,long)"""
        __XConfigureRequestEvent.ndisplay(__long.valueOf(arg0), __long.valueOf(arg1))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XConfigureRequestEvent$Buffer org.lwjgl.system.linux.XConfigureRequestEvent.calloc(int)"""
        return Buffer.__wrap(__XConfigureRequestEvent.calloc(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XConfigureRequestEvent.nserial(long,long)"""
        __XConfigureRequestEvent.nserial(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XConfigureRequestEvent$Buffer org.lwjgl.system.linux.XConfigureRequestEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XConfigureRequestEvent.malloc(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def nwindow(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XConfigureRequestEvent.nwindow(long)"""
        return int.__wrap(__XConfigureRequestEvent.nwindow(__long.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XConfigureRequestEvent$Buffer org.lwjgl.system.linux.XConfigureRequestEvent.create(long,int)"""
        return Buffer.__wrap(__XConfigureRequestEvent.create(__long.valueOf(arg0), __int.valueOf(arg1)))

    @staticmethod
    @overload
    def callocStack() -> 'XConfigureRequestEvent':
        """public static org.lwjgl.system.linux.XConfigureRequestEvent org.lwjgl.system.linux.XConfigureRequestEvent.callocStack()"""
        return XConfigureRequestEvent.__wrap(__XConfigureRequestEvent.callocStack())

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XConfigureRequestEvent.send_event()"""
        return bool.__wrap(super(XConfigureRequestEvent, self).send_event())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def value_mask(self, arg0: int) -> 'XConfigureRequestEvent':
        """public org.lwjgl.system.linux.XConfigureRequestEvent org.lwjgl.system.linux.XConfigureRequestEvent.value_mask(long)"""
        return 'XConfigureRequestEvent'.__wrap(super(__XConfigureRequestEvent, self).value_mask(__long.valueOf(arg0)))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).address())

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XConfigureRequestEvent.ndisplay(long)"""
        return int.__wrap(__XConfigureRequestEvent.ndisplay(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'XConfigureRequestEvent':
        """public static org.lwjgl.system.linux.XConfigureRequestEvent org.lwjgl.system.linux.XConfigureRequestEvent.create(long)"""
        return XConfigureRequestEvent.__wrap(__XConfigureRequestEvent.create(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nwidth(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XConfigureRequestEvent.nwidth(long,int)"""
        __XConfigureRequestEvent.nwidth(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def nvalue_mask(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XConfigureRequestEvent.nvalue_mask(long,long)"""
        __XConfigureRequestEvent.nvalue_mask(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XConfigureRequestEvent.nserial(long)"""
        return int.__wrap(__XConfigureRequestEvent.nserial(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nx(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XConfigureRequestEvent.nx(long)"""
        return int.__wrap(__XConfigureRequestEvent.nx(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XConfigureRequestEvent':
        """public static org.lwjgl.system.linux.XConfigureRequestEvent org.lwjgl.system.linux.XConfigureRequestEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XConfigureRequestEvent.__wrap(__XConfigureRequestEvent.mallocStack(arg0))

    @staticmethod
    @overload
    def nheight(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XConfigureRequestEvent.nheight(long)"""
        return int.__wrap(__XConfigureRequestEvent.nheight(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def create() -> 'XConfigureRequestEvent':
        """public static org.lwjgl.system.linux.XConfigureRequestEvent org.lwjgl.system.linux.XConfigureRequestEvent.create()"""
        return XConfigureRequestEvent.__wrap(__XConfigureRequestEvent.create())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str.__wrap(super(pyglsystem.Pointer$Default, self).toString())

    @staticmethod
    @overload
    def ny(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XConfigureRequestEvent.ny(long)"""
        return int.__wrap(__XConfigureRequestEvent.ny(__long.valueOf(arg0)))

    @overload
    def border_width(self, arg0: int) -> 'XConfigureRequestEvent':
        """public org.lwjgl.system.linux.XConfigureRequestEvent org.lwjgl.system.linux.XConfigureRequestEvent.border_width(int)"""
        return 'XConfigureRequestEvent'.__wrap(super(__XConfigureRequestEvent, self).border_width(__int.valueOf(arg0)))

    @overload
    def window(self, arg0: int) -> 'XConfigureRequestEvent':
        """public org.lwjgl.system.linux.XConfigureRequestEvent org.lwjgl.system.linux.XConfigureRequestEvent.window(long)"""
        return 'XConfigureRequestEvent'.__wrap(super(__XConfigureRequestEvent, self).window(__long.valueOf(arg0)))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @overload
    def y(self, arg0: int) -> 'XConfigureRequestEvent':
        """public org.lwjgl.system.linux.XConfigureRequestEvent org.lwjgl.system.linux.XConfigureRequestEvent.y(int)"""
        return 'XConfigureRequestEvent'.__wrap(super(__XConfigureRequestEvent, self).y(__int.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @overload
    def value_mask(self) -> int:
        """public long org.lwjgl.system.linux.XConfigureRequestEvent.value_mask()"""
        return int.__wrap(super(XConfigureRequestEvent, self).value_mask())

    @staticmethod
    @overload
    def mallocStack() -> 'XConfigureRequestEvent':
        """public static org.lwjgl.system.linux.XConfigureRequestEvent org.lwjgl.system.linux.XConfigureRequestEvent.mallocStack()"""
        return XConfigureRequestEvent.__wrap(__XConfigureRequestEvent.mallocStack())

    @overload
    def set(self, arg0: 'XConfigureRequestEvent') -> 'XConfigureRequestEvent':
        """public org.lwjgl.system.linux.XConfigureRequestEvent org.lwjgl.system.linux.XConfigureRequestEvent.set(org.lwjgl.system.linux.XConfigureRequestEvent)"""
        return 'XConfigureRequestEvent'.__wrap(super(__XConfigureRequestEvent, self).set(arg0))

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        __Struct.validate(__long.valueOf(arg0), __int.valueOf(arg1), __int.valueOf(arg2), arg3)

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XConfigureRequestEvent':
        """public static org.lwjgl.system.linux.XConfigureRequestEvent org.lwjgl.system.linux.XConfigureRequestEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XConfigureRequestEvent.__wrap(__XConfigureRequestEvent.malloc(arg0))

    @overload
    def above(self) -> int:
        """public long org.lwjgl.system.linux.XConfigureRequestEvent.above()"""
        return int.__wrap(super(XConfigureRequestEvent, self).above())

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: int, arg10: int, arg11: int, arg12: int, arg13: int) -> 'XConfigureRequestEvent':
        """public org.lwjgl.system.linux.XConfigureRequestEvent org.lwjgl.system.linux.XConfigureRequestEvent.set(int,long,boolean,long,long,long,int,int,int,int,int,long,int,long)"""
        return 'XConfigureRequestEvent'.__wrap(super(__XConfigureRequestEvent, self).set(__int.valueOf(arg0), __long.valueOf(arg1), __boolean.valueOf(arg2), __long.valueOf(arg3), __long.valueOf(arg4), __long.valueOf(arg5), __int.valueOf(arg6), __int.valueOf(arg7), __int.valueOf(arg8), __int.valueOf(arg9), __int.valueOf(arg10), __long.valueOf(arg11), __int.valueOf(arg12), __long.valueOf(arg13)))

    @overload
    def send_event(self, arg0: bool) -> 'XConfigureRequestEvent':
        """public org.lwjgl.system.linux.XConfigureRequestEvent org.lwjgl.system.linux.XConfigureRequestEvent.send_event(boolean)"""
        return 'XConfigureRequestEvent'.__wrap(super(__XConfigureRequestEvent, self).send_event(__boolean.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XConfigureRequestEvent$Buffer org.lwjgl.system.linux.XConfigureRequestEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XConfigureRequestEvent.callocStack(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def nparent(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XConfigureRequestEvent.nparent(long,long)"""
        __XConfigureRequestEvent.nparent(__long.valueOf(arg0), __long.valueOf(arg1))

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool.__wrap(super(__pyglsystem.Struct, self).isNull(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XConfigureRequestEvent':
        """public static org.lwjgl.system.linux.XConfigureRequestEvent org.lwjgl.system.linux.XConfigureRequestEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XConfigureRequestEvent.__wrap(__XConfigureRequestEvent.calloc(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def nwidth(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XConfigureRequestEvent.nwidth(long)"""
        return int.__wrap(__XConfigureRequestEvent.nwidth(__long.valueOf(arg0)))

    @overload
    def above(self, arg0: int) -> 'XConfigureRequestEvent':
        """public org.lwjgl.system.linux.XConfigureRequestEvent org.lwjgl.system.linux.XConfigureRequestEvent.above(long)"""
        return 'XConfigureRequestEvent'.__wrap(super(__XConfigureRequestEvent, self).above(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nabove(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XConfigureRequestEvent.nabove(long,long)"""
        __XConfigureRequestEvent.nabove(__long.valueOf(arg0), __long.valueOf(arg1))

    @overload
    def x(self, arg0: int) -> 'XConfigureRequestEvent':
        """public org.lwjgl.system.linux.XConfigureRequestEvent org.lwjgl.system.linux.XConfigureRequestEvent.x(int)"""
        return 'XConfigureRequestEvent'.__wrap(super(__XConfigureRequestEvent, self).x(__int.valueOf(arg0)))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XConfigureRequestEvent.type()"""
        return int.__wrap(super(XConfigureRequestEvent, self).type())

    @overload
    def detail(self) -> int:
        """public int org.lwjgl.system.linux.XConfigureRequestEvent.detail()"""
        return int.__wrap(super(XConfigureRequestEvent, self).detail())

    @overload
    def detail(self, arg0: int) -> 'XConfigureRequestEvent':
        """public org.lwjgl.system.linux.XConfigureRequestEvent org.lwjgl.system.linux.XConfigureRequestEvent.detail(int)"""
        return 'XConfigureRequestEvent'.__wrap(super(__XConfigureRequestEvent, self).detail(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XConfigureRequestEvent$Buffer org.lwjgl.system.linux.XConfigureRequestEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XConfigureRequestEvent.mallocStack(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def nx(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XConfigureRequestEvent.nx(long,int)"""
        __XConfigureRequestEvent.nx(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XConfigureRequestEvent.serial()"""
        return int.__wrap(super(XConfigureRequestEvent, self).serial())

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XConfigureRequestEvent$Buffer org.lwjgl.system.linux.XConfigureRequestEvent.create(int)"""
        return Buffer.__wrap(__XConfigureRequestEvent.create(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XConfigureRequestEvent$Buffer org.lwjgl.system.linux.XConfigureRequestEvent.createSafe(long,int)"""
        return Buffer.__wrap(__XConfigureRequestEvent.createSafe(__long.valueOf(arg0), __int.valueOf(arg1)))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XConfigureRequestEvent(java.nio.ByteBuffer)"""
        val = __XConfigureRequestEvent(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @overload
    def display(self, arg0: int) -> 'XConfigureRequestEvent':
        """public org.lwjgl.system.linux.XConfigureRequestEvent org.lwjgl.system.linux.XConfigureRequestEvent.display(long)"""
        return 'XConfigureRequestEvent'.__wrap(super(__XConfigureRequestEvent, self).display(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nvalue_mask(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XConfigureRequestEvent.nvalue_mask(long)"""
        return int.__wrap(__XConfigureRequestEvent.nvalue_mask(__long.valueOf(arg0)))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XConfigureRequestEvent.sizeof()"""
        return int.__wrap(super(XConfigureRequestEvent, self).sizeof())

    @staticmethod
    @overload
    def ndetail(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XConfigureRequestEvent.ndetail(long,int)"""
        __XConfigureRequestEvent.ndetail(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XConfigureRequestEvent.nsend_event(long,int)"""
        __XConfigureRequestEvent.nsend_event(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def nwindow(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XConfigureRequestEvent.nwindow(long,long)"""
        __XConfigureRequestEvent.nwindow(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def nborder_width(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XConfigureRequestEvent.nborder_width(long)"""
        return int.__wrap(__XConfigureRequestEvent.nborder_width(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nborder_width(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XConfigureRequestEvent.nborder_width(long,int)"""
        __XConfigureRequestEvent.nborder_width(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def malloc() -> 'XConfigureRequestEvent':
        """public static org.lwjgl.system.linux.XConfigureRequestEvent org.lwjgl.system.linux.XConfigureRequestEvent.malloc()"""
        return XConfigureRequestEvent.__wrap(__XConfigureRequestEvent.malloc())

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XConfigureRequestEvent.display()"""
        return int.__wrap(super(XConfigureRequestEvent, self).display())

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XConfigureRequestEvent.ntype(long,int)"""
        __XConfigureRequestEvent.ntype(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XConfigureRequestEvent$Buffer org.lwjgl.system.linux.XConfigureRequestEvent.malloc(int)"""
        return Buffer.__wrap(__XConfigureRequestEvent.malloc(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XConfigureRequestEvent.validate(long)"""
        __XConfigureRequestEvent.validate(__long.valueOf(arg0))

    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XConfigureRequestEvent.nsend_event(long)"""
        return int.__wrap(__XConfigureRequestEvent.nsend_event(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc() -> 'XConfigureRequestEvent':
        """public static org.lwjgl.system.linux.XConfigureRequestEvent org.lwjgl.system.linux.XConfigureRequestEvent.calloc()"""
        return XConfigureRequestEvent.__wrap(__XConfigureRequestEvent.calloc())

    @overload
    def parent(self, arg0: int) -> 'XConfigureRequestEvent':
        """public org.lwjgl.system.linux.XConfigureRequestEvent org.lwjgl.system.linux.XConfigureRequestEvent.parent(long)"""
        return 'XConfigureRequestEvent'.__wrap(super(__XConfigureRequestEvent, self).parent(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XConfigureRequestEvent$Buffer org.lwjgl.system.linux.XConfigureRequestEvent.mallocStack(int)"""
        return Buffer.__wrap(__XConfigureRequestEvent.mallocStack(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XConfigureRequestEvent':
        """public static org.lwjgl.system.linux.XConfigureRequestEvent org.lwjgl.system.linux.XConfigureRequestEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XConfigureRequestEvent.__wrap(__XConfigureRequestEvent.callocStack(arg0))

    @staticmethod
    @overload
    def nparent(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XConfigureRequestEvent.nparent(long)"""
        return int.__wrap(__XConfigureRequestEvent.nparent(__long.valueOf(arg0)))

    @overload
    def y(self) -> int:
        """public int org.lwjgl.system.linux.XConfigureRequestEvent.y()"""
        return int.__wrap(super(XConfigureRequestEvent, self).y())

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XConfigureRequestEvent$Buffer org.lwjgl.system.linux.XConfigureRequestEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XConfigureRequestEvent.calloc(__int.valueOf(arg0), arg1))

    @overload
    def width(self) -> int:
        """public int org.lwjgl.system.linux.XConfigureRequestEvent.width()"""
        return int.__wrap(super(XConfigureRequestEvent, self).width())

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XConfigureRequestEvent.window()"""
        return int.__wrap(super(XConfigureRequestEvent, self).window())

    @overload
    def height(self, arg0: int) -> 'XConfigureRequestEvent':
        """public org.lwjgl.system.linux.XConfigureRequestEvent org.lwjgl.system.linux.XConfigureRequestEvent.height(int)"""
        return 'XConfigureRequestEvent'.__wrap(super(__XConfigureRequestEvent, self).height(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XConfigureRequestEvent$Buffer org.lwjgl.system.linux.XConfigureRequestEvent.callocStack(int)"""
        return Buffer.__wrap(__XConfigureRequestEvent.callocStack(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def ny(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XConfigureRequestEvent.ny(long,int)"""
        __XConfigureRequestEvent.ny(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def type(self, arg0: int) -> 'XConfigureRequestEvent':
        """public org.lwjgl.system.linux.XConfigureRequestEvent org.lwjgl.system.linux.XConfigureRequestEvent.type(int)"""
        return 'XConfigureRequestEvent'.__wrap(super(__XConfigureRequestEvent, self).type(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XConfigureRequestEvent.ntype(long)"""
        return int.__wrap(__XConfigureRequestEvent.ntype(__long.valueOf(arg0)))

    @overload
    def x(self) -> int:
        """public int org.lwjgl.system.linux.XConfigureRequestEvent.x()"""
        return int.__wrap(super(XConfigureRequestEvent, self).x())

    @staticmethod
    @overload
    def nabove(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XConfigureRequestEvent.nabove(long)"""
        return int.__wrap(__XConfigureRequestEvent.nabove(__long.valueOf(arg0)))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @staticmethod
    @overload
    def nheight(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XConfigureRequestEvent.nheight(long,int)"""
        __XConfigureRequestEvent.nheight(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def height(self) -> int:
        """public int org.lwjgl.system.linux.XConfigureRequestEvent.height()"""
        return int.__wrap(super(XConfigureRequestEvent, self).height()) 
 
 
# CLASS: org.lwjgl.system.linux.XResizeRequestEvent
from pyquantum_helper import import_once as __import_once__
from builtins import str
import java.lang.Boolean as __boolean
from pyquantum_helper import override
import java.lang.Object as __object
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import org.lwjgl.system.linux.XResizeRequestEvent as __XResizeRequestEvent
__XResizeRequestEvent = __XResizeRequestEvent
import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
import org.lwjgl.system.linux.XResizeRequestEvent as __XResizeRequestEvent_Buffer
__Buffer = __XResizeRequestEvent_Buffer.Buffer
from builtins import int
 
class XResizeRequestEvent(pyglsystem.__Struct, pyglsystem.Struct, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XResizeRequestEvent"""
 
    @staticmethod
    def __wrap(java_value: __XResizeRequestEvent) -> 'XResizeRequestEvent':
        return XResizeRequestEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __XResizeRequestEvent):
        """
        Dynamic initializer for XResizeRequestEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XResizeRequestEvent.display()"""
        return int.__wrap(super(XResizeRequestEvent, self).display())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XResizeRequestEvent$Buffer org.lwjgl.system.linux.XResizeRequestEvent.create(long,int)"""
        return Buffer.__wrap(__XResizeRequestEvent.create(__long.valueOf(arg0), __int.valueOf(arg1)))

    @overload
    def display(self, arg0: int) -> 'XResizeRequestEvent':
        """public org.lwjgl.system.linux.XResizeRequestEvent org.lwjgl.system.linux.XResizeRequestEvent.display(long)"""
        return 'XResizeRequestEvent'.__wrap(super(__XResizeRequestEvent, self).display(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XResizeRequestEvent$Buffer org.lwjgl.system.linux.XResizeRequestEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XResizeRequestEvent.callocStack(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XResizeRequestEvent.ndisplay(long)"""
        return int.__wrap(__XResizeRequestEvent.ndisplay(__long.valueOf(arg0)))

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool.__wrap(super(__pyglsystem.Struct, self).isNull(__int.valueOf(arg0)))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XResizeRequestEvent':
        """public static org.lwjgl.system.linux.XResizeRequestEvent org.lwjgl.system.linux.XResizeRequestEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XResizeRequestEvent.__wrap(__XResizeRequestEvent.calloc(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XResizeRequestEvent.nserial(long)"""
        return int.__wrap(__XResizeRequestEvent.nserial(__long.valueOf(arg0)))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XResizeRequestEvent.send_event()"""
        return bool.__wrap(super(XResizeRequestEvent, self).send_event())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XResizeRequestEvent(java.nio.ByteBuffer)"""
        val = __XResizeRequestEvent(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def window(self, arg0: int) -> 'XResizeRequestEvent':
        """public org.lwjgl.system.linux.XResizeRequestEvent org.lwjgl.system.linux.XResizeRequestEvent.window(long)"""
        return 'XResizeRequestEvent'.__wrap(super(__XResizeRequestEvent, self).window(__long.valueOf(arg0)))

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int, arg5: int, arg6: int) -> 'XResizeRequestEvent':
        """public org.lwjgl.system.linux.XResizeRequestEvent org.lwjgl.system.linux.XResizeRequestEvent.set(int,long,boolean,long,long,int,int)"""
        return 'XResizeRequestEvent'.__wrap(super(__XResizeRequestEvent, self).set(__int.valueOf(arg0), __long.valueOf(arg1), __boolean.valueOf(arg2), __long.valueOf(arg3), __long.valueOf(arg4), __int.valueOf(arg5), __int.valueOf(arg6)))

    @staticmethod
    @overload
    def malloc() -> 'XResizeRequestEvent':
        """public static org.lwjgl.system.linux.XResizeRequestEvent org.lwjgl.system.linux.XResizeRequestEvent.malloc()"""
        return XResizeRequestEvent.__wrap(__XResizeRequestEvent.malloc())

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XResizeRequestEvent.nserial(long,long)"""
        __XResizeRequestEvent.nserial(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def nheight(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XResizeRequestEvent.nheight(long)"""
        return int.__wrap(__XResizeRequestEvent.nheight(__long.valueOf(arg0)))

    @overload
    def width(self) -> int:
        """public int org.lwjgl.system.linux.XResizeRequestEvent.width()"""
        return int.__wrap(super(XResizeRequestEvent, self).width())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @overload
    def send_event(self, arg0: bool) -> 'XResizeRequestEvent':
        """public org.lwjgl.system.linux.XResizeRequestEvent org.lwjgl.system.linux.XResizeRequestEvent.send_event(boolean)"""
        return 'XResizeRequestEvent'.__wrap(super(__XResizeRequestEvent, self).send_event(__boolean.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XResizeRequestEvent':
        """public static org.lwjgl.system.linux.XResizeRequestEvent org.lwjgl.system.linux.XResizeRequestEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XResizeRequestEvent.__wrap(__XResizeRequestEvent.mallocStack(arg0))

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XResizeRequestEvent$Buffer org.lwjgl.system.linux.XResizeRequestEvent.create(int)"""
        return Buffer.__wrap(__XResizeRequestEvent.create(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack() -> 'XResizeRequestEvent':
        """public static org.lwjgl.system.linux.XResizeRequestEvent org.lwjgl.system.linux.XResizeRequestEvent.callocStack()"""
        return XResizeRequestEvent.__wrap(__XResizeRequestEvent.callocStack())

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XResizeRequestEvent.serial()"""
        return int.__wrap(super(XResizeRequestEvent, self).serial())

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XResizeRequestEvent$Buffer org.lwjgl.system.linux.XResizeRequestEvent.mallocStack(int)"""
        return Buffer.__wrap(__XResizeRequestEvent.mallocStack(__int.valueOf(arg0)))

    @overload
    def type(self, arg0: int) -> 'XResizeRequestEvent':
        """public org.lwjgl.system.linux.XResizeRequestEvent org.lwjgl.system.linux.XResizeRequestEvent.type(int)"""
        return 'XResizeRequestEvent'.__wrap(super(__XResizeRequestEvent, self).type(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XResizeRequestEvent.nsend_event(long)"""
        return int.__wrap(__XResizeRequestEvent.nsend_event(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack() -> 'XResizeRequestEvent':
        """public static org.lwjgl.system.linux.XResizeRequestEvent org.lwjgl.system.linux.XResizeRequestEvent.mallocStack()"""
        return XResizeRequestEvent.__wrap(__XResizeRequestEvent.mallocStack())

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XResizeRequestEvent.window()"""
        return int.__wrap(super(XResizeRequestEvent, self).window())

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XResizeRequestEvent':
        """public static org.lwjgl.system.linux.XResizeRequestEvent org.lwjgl.system.linux.XResizeRequestEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XResizeRequestEvent.__wrap(__XResizeRequestEvent.callocStack(arg0))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def serial(self, arg0: int) -> 'XResizeRequestEvent':
        """public org.lwjgl.system.linux.XResizeRequestEvent org.lwjgl.system.linux.XResizeRequestEvent.serial(long)"""
        return 'XResizeRequestEvent'.__wrap(super(__XResizeRequestEvent, self).serial(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nwindow(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XResizeRequestEvent.nwindow(long,long)"""
        __XResizeRequestEvent.nwindow(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def calloc() -> 'XResizeRequestEvent':
        """public static org.lwjgl.system.linux.XResizeRequestEvent org.lwjgl.system.linux.XResizeRequestEvent.calloc()"""
        return XResizeRequestEvent.__wrap(__XResizeRequestEvent.calloc())

    @staticmethod
    @overload
    def create(arg0: int) -> 'XResizeRequestEvent':
        """public static org.lwjgl.system.linux.XResizeRequestEvent org.lwjgl.system.linux.XResizeRequestEvent.create(long)"""
        return XResizeRequestEvent.__wrap(__XResizeRequestEvent.create(__long.valueOf(arg0)))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).address())

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XResizeRequestEvent':
        """public static org.lwjgl.system.linux.XResizeRequestEvent org.lwjgl.system.linux.XResizeRequestEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XResizeRequestEvent.__wrap(__XResizeRequestEvent.malloc(arg0))

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XResizeRequestEvent':
        """public static org.lwjgl.system.linux.XResizeRequestEvent org.lwjgl.system.linux.XResizeRequestEvent.createSafe(long)"""
        return XResizeRequestEvent.__wrap(__XResizeRequestEvent.createSafe(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nwindow(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XResizeRequestEvent.nwindow(long)"""
        return int.__wrap(__XResizeRequestEvent.nwindow(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nwidth(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XResizeRequestEvent.nwidth(long,int)"""
        __XResizeRequestEvent.nwidth(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def width(self, arg0: int) -> 'XResizeRequestEvent':
        """public org.lwjgl.system.linux.XResizeRequestEvent org.lwjgl.system.linux.XResizeRequestEvent.width(int)"""
        return 'XResizeRequestEvent'.__wrap(super(__XResizeRequestEvent, self).width(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XResizeRequestEvent$Buffer org.lwjgl.system.linux.XResizeRequestEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XResizeRequestEvent.calloc(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XResizeRequestEvent.validate(long)"""
        __XResizeRequestEvent.validate(__long.valueOf(arg0))

    @overload
    def height(self, arg0: int) -> 'XResizeRequestEvent':
        """public org.lwjgl.system.linux.XResizeRequestEvent org.lwjgl.system.linux.XResizeRequestEvent.height(int)"""
        return 'XResizeRequestEvent'.__wrap(super(__XResizeRequestEvent, self).height(__int.valueOf(arg0)))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XResizeRequestEvent.type()"""
        return int.__wrap(super(XResizeRequestEvent, self).type())

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XResizeRequestEvent$Buffer org.lwjgl.system.linux.XResizeRequestEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XResizeRequestEvent.malloc(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XResizeRequestEvent.ntype(long,int)"""
        __XResizeRequestEvent.ntype(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str.__wrap(super(pyglsystem.Pointer$Default, self).toString())

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XResizeRequestEvent$Buffer org.lwjgl.system.linux.XResizeRequestEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XResizeRequestEvent.mallocStack(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XResizeRequestEvent.ntype(long)"""
        return int.__wrap(__XResizeRequestEvent.ntype(__long.valueOf(arg0)))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @staticmethod
    @overload
    def nheight(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XResizeRequestEvent.nheight(long,int)"""
        __XResizeRequestEvent.nheight(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XResizeRequestEvent$Buffer org.lwjgl.system.linux.XResizeRequestEvent.callocStack(int)"""
        return Buffer.__wrap(__XResizeRequestEvent.callocStack(__int.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XResizeRequestEvent.ndisplay(long,long)"""
        __XResizeRequestEvent.ndisplay(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def create() -> 'XResizeRequestEvent':
        """public static org.lwjgl.system.linux.XResizeRequestEvent org.lwjgl.system.linux.XResizeRequestEvent.create()"""
        return XResizeRequestEvent.__wrap(__XResizeRequestEvent.create())

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XResizeRequestEvent$Buffer org.lwjgl.system.linux.XResizeRequestEvent.malloc(int)"""
        return Buffer.__wrap(__XResizeRequestEvent.malloc(__int.valueOf(arg0)))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XResizeRequestEvent.sizeof()"""
        return int.__wrap(super(XResizeRequestEvent, self).sizeof())

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        __Struct.validate(__long.valueOf(arg0), __int.valueOf(arg1), __int.valueOf(arg2), arg3)

    @overload
    def set(self, arg0: 'XResizeRequestEvent') -> 'XResizeRequestEvent':
        """public org.lwjgl.system.linux.XResizeRequestEvent org.lwjgl.system.linux.XResizeRequestEvent.set(org.lwjgl.system.linux.XResizeRequestEvent)"""
        return 'XResizeRequestEvent'.__wrap(super(__XResizeRequestEvent, self).set(arg0))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XResizeRequestEvent$Buffer org.lwjgl.system.linux.XResizeRequestEvent.createSafe(long,int)"""
        return Buffer.__wrap(__XResizeRequestEvent.createSafe(__long.valueOf(arg0), __int.valueOf(arg1)))

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XResizeRequestEvent$Buffer org.lwjgl.system.linux.XResizeRequestEvent.calloc(int)"""
        return Buffer.__wrap(__XResizeRequestEvent.calloc(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XResizeRequestEvent.nsend_event(long,int)"""
        __XResizeRequestEvent.nsend_event(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def nwidth(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XResizeRequestEvent.nwidth(long)"""
        return int.__wrap(__XResizeRequestEvent.nwidth(__long.valueOf(arg0)))

    @overload
    def height(self) -> int:
        """public int org.lwjgl.system.linux.XResizeRequestEvent.height()"""
        return int.__wrap(super(XResizeRequestEvent, self).height()) 
 
 
# CLASS: org.lwjgl.system.linux.XCirculateRequestEvent
from pyquantum_helper import import_once as __import_once__
from builtins import str
import java.lang.Boolean as __boolean
from pyquantum_helper import override
import java.lang.Object as __object
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import org.lwjgl.system.linux.XCirculateRequestEvent as __XCirculateRequestEvent
__XCirculateRequestEvent = __XCirculateRequestEvent
import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.linux.XCirculateRequestEvent as __XCirculateRequestEvent_Buffer
__Buffer = __XCirculateRequestEvent_Buffer.Buffer
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
from builtins import int
 
class XCirculateRequestEvent(pyglsystem.__Struct, pyglsystem.Struct, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XCirculateRequestEvent"""
 
    @staticmethod
    def __wrap(java_value: __XCirculateRequestEvent) -> 'XCirculateRequestEvent':
        return XCirculateRequestEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __XCirculateRequestEvent):
        """
        Dynamic initializer for XCirculateRequestEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def display(self, arg0: int) -> 'XCirculateRequestEvent':
        """public org.lwjgl.system.linux.XCirculateRequestEvent org.lwjgl.system.linux.XCirculateRequestEvent.display(long)"""
        return 'XCirculateRequestEvent'.__wrap(super(__XCirculateRequestEvent, self).display(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XCirculateRequestEvent$Buffer org.lwjgl.system.linux.XCirculateRequestEvent.calloc(int)"""
        return Buffer.__wrap(__XCirculateRequestEvent.calloc(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCirculateRequestEvent.nsend_event(long,int)"""
        __XCirculateRequestEvent.nsend_event(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def nparent(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCirculateRequestEvent.nparent(long,long)"""
        __XCirculateRequestEvent.nparent(__long.valueOf(arg0), __long.valueOf(arg1))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XCirculateRequestEvent$Buffer org.lwjgl.system.linux.XCirculateRequestEvent.create(int)"""
        return Buffer.__wrap(__XCirculateRequestEvent.create(__int.valueOf(arg0)))

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool.__wrap(super(__pyglsystem.Struct, self).isNull(__int.valueOf(arg0)))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XCirculateRequestEvent.validate(long)"""
        __XCirculateRequestEvent.validate(__long.valueOf(arg0))

    @staticmethod
    @overload
    def nplace(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XCirculateRequestEvent.nplace(long)"""
        return int.__wrap(__XCirculateRequestEvent.nplace(__long.valueOf(arg0)))

    @overload
    def parent(self) -> int:
        """public long org.lwjgl.system.linux.XCirculateRequestEvent.parent()"""
        return int.__wrap(super(XCirculateRequestEvent, self).parent())

    @staticmethod
    @overload
    def create() -> 'XCirculateRequestEvent':
        """public static org.lwjgl.system.linux.XCirculateRequestEvent org.lwjgl.system.linux.XCirculateRequestEvent.create()"""
        return XCirculateRequestEvent.__wrap(__XCirculateRequestEvent.create())

    @staticmethod
    @overload
    def nwindow(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XCirculateRequestEvent.nwindow(long)"""
        return int.__wrap(__XCirculateRequestEvent.nwindow(__long.valueOf(arg0)))

    @overload
    def parent(self, arg0: int) -> 'XCirculateRequestEvent':
        """public org.lwjgl.system.linux.XCirculateRequestEvent org.lwjgl.system.linux.XCirculateRequestEvent.parent(long)"""
        return 'XCirculateRequestEvent'.__wrap(super(__XCirculateRequestEvent, self).parent(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack() -> 'XCirculateRequestEvent':
        """public static org.lwjgl.system.linux.XCirculateRequestEvent org.lwjgl.system.linux.XCirculateRequestEvent.callocStack()"""
        return XCirculateRequestEvent.__wrap(__XCirculateRequestEvent.callocStack())

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCirculateRequestEvent.ntype(long,int)"""
        __XCirculateRequestEvent.ntype(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XCirculateRequestEvent$Buffer org.lwjgl.system.linux.XCirculateRequestEvent.callocStack(int)"""
        return Buffer.__wrap(__XCirculateRequestEvent.callocStack(__int.valueOf(arg0)))

    @overload
    def send_event(self, arg0: bool) -> 'XCirculateRequestEvent':
        """public org.lwjgl.system.linux.XCirculateRequestEvent org.lwjgl.system.linux.XCirculateRequestEvent.send_event(boolean)"""
        return 'XCirculateRequestEvent'.__wrap(super(__XCirculateRequestEvent, self).send_event(__boolean.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XCirculateRequestEvent$Buffer org.lwjgl.system.linux.XCirculateRequestEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XCirculateRequestEvent.calloc(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def malloc() -> 'XCirculateRequestEvent':
        """public static org.lwjgl.system.linux.XCirculateRequestEvent org.lwjgl.system.linux.XCirculateRequestEvent.malloc()"""
        return XCirculateRequestEvent.__wrap(__XCirculateRequestEvent.malloc())

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XCirculateRequestEvent$Buffer org.lwjgl.system.linux.XCirculateRequestEvent.mallocStack(int)"""
        return Buffer.__wrap(__XCirculateRequestEvent.mallocStack(__int.valueOf(arg0)))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XCirculateRequestEvent.sizeof()"""
        return int.__wrap(super(XCirculateRequestEvent, self).sizeof())

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XCirculateRequestEvent':
        """public static org.lwjgl.system.linux.XCirculateRequestEvent org.lwjgl.system.linux.XCirculateRequestEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XCirculateRequestEvent.__wrap(__XCirculateRequestEvent.malloc(arg0))

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int, arg5: int, arg6: int) -> 'XCirculateRequestEvent':
        """public org.lwjgl.system.linux.XCirculateRequestEvent org.lwjgl.system.linux.XCirculateRequestEvent.set(int,long,boolean,long,long,long,int)"""
        return 'XCirculateRequestEvent'.__wrap(super(__XCirculateRequestEvent, self).set(__int.valueOf(arg0), __long.valueOf(arg1), __boolean.valueOf(arg2), __long.valueOf(arg3), __long.valueOf(arg4), __long.valueOf(arg5), __int.valueOf(arg6)))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XCirculateRequestEvent$Buffer org.lwjgl.system.linux.XCirculateRequestEvent.create(long,int)"""
        return Buffer.__wrap(__XCirculateRequestEvent.create(__long.valueOf(arg0), __int.valueOf(arg1)))

    @staticmethod
    @overload
    def nplace(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCirculateRequestEvent.nplace(long,int)"""
        __XCirculateRequestEvent.nplace(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XCirculateRequestEvent.ndisplay(long)"""
        return int.__wrap(__XCirculateRequestEvent.ndisplay(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCirculateRequestEvent.nserial(long,long)"""
        __XCirculateRequestEvent.nserial(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def nparent(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XCirculateRequestEvent.nparent(long)"""
        return int.__wrap(__XCirculateRequestEvent.nparent(__long.valueOf(arg0)))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XCirculateRequestEvent.type()"""
        return int.__wrap(super(XCirculateRequestEvent, self).type())

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XCirculateRequestEvent':
        """public static org.lwjgl.system.linux.XCirculateRequestEvent org.lwjgl.system.linux.XCirculateRequestEvent.createSafe(long)"""
        return XCirculateRequestEvent.__wrap(__XCirculateRequestEvent.createSafe(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nwindow(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCirculateRequestEvent.nwindow(long,long)"""
        __XCirculateRequestEvent.nwindow(__long.valueOf(arg0), __long.valueOf(arg1))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def create(arg0: int) -> 'XCirculateRequestEvent':
        """public static org.lwjgl.system.linux.XCirculateRequestEvent org.lwjgl.system.linux.XCirculateRequestEvent.create(long)"""
        return XCirculateRequestEvent.__wrap(__XCirculateRequestEvent.create(__long.valueOf(arg0)))

    @overload
    def place(self) -> int:
        """public int org.lwjgl.system.linux.XCirculateRequestEvent.place()"""
        return int.__wrap(super(XCirculateRequestEvent, self).place())

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XCirculateRequestEvent.serial()"""
        return int.__wrap(super(XCirculateRequestEvent, self).serial())

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XCirculateRequestEvent.nserial(long)"""
        return int.__wrap(__XCirculateRequestEvent.nserial(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack() -> 'XCirculateRequestEvent':
        """public static org.lwjgl.system.linux.XCirculateRequestEvent org.lwjgl.system.linux.XCirculateRequestEvent.mallocStack()"""
        return XCirculateRequestEvent.__wrap(__XCirculateRequestEvent.mallocStack())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XCirculateRequestEvent$Buffer org.lwjgl.system.linux.XCirculateRequestEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XCirculateRequestEvent.malloc(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XCirculateRequestEvent$Buffer org.lwjgl.system.linux.XCirculateRequestEvent.createSafe(long,int)"""
        return Buffer.__wrap(__XCirculateRequestEvent.createSafe(__long.valueOf(arg0), __int.valueOf(arg1)))

    @overload
    def set(self, arg0: 'XCirculateRequestEvent') -> 'XCirculateRequestEvent':
        """public org.lwjgl.system.linux.XCirculateRequestEvent org.lwjgl.system.linux.XCirculateRequestEvent.set(org.lwjgl.system.linux.XCirculateRequestEvent)"""
        return 'XCirculateRequestEvent'.__wrap(super(__XCirculateRequestEvent, self).set(arg0))

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCirculateRequestEvent.ndisplay(long,long)"""
        __XCirculateRequestEvent.ndisplay(__long.valueOf(arg0), __long.valueOf(arg1))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).address())

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XCirculateRequestEvent$Buffer org.lwjgl.system.linux.XCirculateRequestEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XCirculateRequestEvent.callocStack(__int.valueOf(arg0), arg1))

    @overload
    def serial(self, arg0: int) -> 'XCirculateRequestEvent':
        """public org.lwjgl.system.linux.XCirculateRequestEvent org.lwjgl.system.linux.XCirculateRequestEvent.serial(long)"""
        return 'XCirculateRequestEvent'.__wrap(super(__XCirculateRequestEvent, self).serial(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XCirculateRequestEvent.nsend_event(long)"""
        return int.__wrap(__XCirculateRequestEvent.nsend_event(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XCirculateRequestEvent$Buffer org.lwjgl.system.linux.XCirculateRequestEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XCirculateRequestEvent.mallocStack(__int.valueOf(arg0), arg1))

    @overload
    def window(self, arg0: int) -> 'XCirculateRequestEvent':
        """public org.lwjgl.system.linux.XCirculateRequestEvent org.lwjgl.system.linux.XCirculateRequestEvent.window(long)"""
        return 'XCirculateRequestEvent'.__wrap(super(__XCirculateRequestEvent, self).window(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc() -> 'XCirculateRequestEvent':
        """public static org.lwjgl.system.linux.XCirculateRequestEvent org.lwjgl.system.linux.XCirculateRequestEvent.calloc()"""
        return XCirculateRequestEvent.__wrap(__XCirculateRequestEvent.calloc())

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XCirculateRequestEvent.window()"""
        return int.__wrap(super(XCirculateRequestEvent, self).window())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str.__wrap(super(pyglsystem.Pointer$Default, self).toString())

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XCirculateRequestEvent$Buffer org.lwjgl.system.linux.XCirculateRequestEvent.malloc(int)"""
        return Buffer.__wrap(__XCirculateRequestEvent.malloc(__int.valueOf(arg0)))

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XCirculateRequestEvent.display()"""
        return int.__wrap(super(XCirculateRequestEvent, self).display())

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XCirculateRequestEvent.send_event()"""
        return bool.__wrap(super(XCirculateRequestEvent, self).send_event())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XCirculateRequestEvent':
        """public static org.lwjgl.system.linux.XCirculateRequestEvent org.lwjgl.system.linux.XCirculateRequestEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XCirculateRequestEvent.__wrap(__XCirculateRequestEvent.mallocStack(arg0))

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XCirculateRequestEvent':
        """public static org.lwjgl.system.linux.XCirculateRequestEvent org.lwjgl.system.linux.XCirculateRequestEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XCirculateRequestEvent.__wrap(__XCirculateRequestEvent.callocStack(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XCirculateRequestEvent.ntype(long)"""
        return int.__wrap(__XCirculateRequestEvent.ntype(__long.valueOf(arg0)))

    @overload
    def type(self, arg0: int) -> 'XCirculateRequestEvent':
        """public org.lwjgl.system.linux.XCirculateRequestEvent org.lwjgl.system.linux.XCirculateRequestEvent.type(int)"""
        return 'XCirculateRequestEvent'.__wrap(super(__XCirculateRequestEvent, self).type(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XCirculateRequestEvent':
        """public static org.lwjgl.system.linux.XCirculateRequestEvent org.lwjgl.system.linux.XCirculateRequestEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XCirculateRequestEvent.__wrap(__XCirculateRequestEvent.calloc(arg0))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XCirculateRequestEvent(java.nio.ByteBuffer)"""
        val = __XCirculateRequestEvent(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        __Struct.validate(__long.valueOf(arg0), __int.valueOf(arg1), __int.valueOf(arg2), arg3)

    @overload
    def place(self, arg0: int) -> 'XCirculateRequestEvent':
        """public org.lwjgl.system.linux.XCirculateRequestEvent org.lwjgl.system.linux.XCirculateRequestEvent.place(int)"""
        return 'XCirculateRequestEvent'.__wrap(super(__XCirculateRequestEvent, self).place(__int.valueOf(arg0))) 
 
 
# CLASS: org.lwjgl.system.linux.XDestroyWindowEvent$Buffer
from pyquantum_helper import import_once as __import_once__
import java.lang.Boolean as __boolean
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import java.util.stream.Stream as __Stream
__Stream = __Stream
import org.lwjgl.system.StructBuffer as __StructBuffer
__StructBuffer = __StructBuffer
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.linux.XDestroyWindowEvent as __XDestroyWindowEvent_Buffer
__Buffer = __XDestroyWindowEvent_Buffer.Buffer
import org.lwjgl.system.CustomBuffer as __CustomBuffer
__CustomBuffer = __CustomBuffer
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.util.Iterator as __Iterator
__Iterator = __Iterator
import java.lang.Object as __object
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.util.Iterator as Iterator
import java.util.Spliterator as __Spliterator
__Spliterator = __Spliterator
import java.lang.Long as __long
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import java.util.stream.Stream as Stream
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import int
 
class Buffer(pyglsystem.__StructBuffer, pyglsystem.StructBuffer, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XDestroyWindowEvent.Buffer"""
 
    @staticmethod
    def __wrap(java_value: __Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def window(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XDestroyWindowEvent$Buffer org.lwjgl.system.linux.XDestroyWindowEvent$Buffer.window(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).window(__long.valueOf(arg0)))

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XDestroyWindowEvent$Buffer.window()"""
        return int.__wrap(super(Buffer, self).window())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(__pyglsystem.StructBuffer, self).forEach(arg0)

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XDestroyWindowEvent$Buffer org.lwjgl.system.linux.XDestroyWindowEvent$Buffer.send_event(boolean)"""
        return 'Buffer'.__wrap(super(__Buffer, self).send_event(__boolean.valueOf(arg0)))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0), arg1))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int.__wrap(super(__pyglsystem.CustomBuffer, self).address(__int.valueOf(arg0)))

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(__int.valueOf(arg0), arg1))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int.__wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(arg0))

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XDestroyWindowEvent$Buffer org.lwjgl.system.linux.XDestroyWindowEvent$Buffer.type(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).type(__int.valueOf(arg0)))

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @overload
    def event(self) -> int:
        """public long org.lwjgl.system.linux.XDestroyWindowEvent$Buffer.event()"""
        return int.__wrap(super(Buffer, self).event())

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XDestroyWindowEvent$Buffer.type()"""
        return int.__wrap(super(Buffer, self).type())

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool.__wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XDestroyWindowEvent$Buffer.send_event()"""
        return bool.__wrap(super(Buffer, self).send_event())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XDestroyWindowEvent$Buffer org.lwjgl.system.linux.XDestroyWindowEvent$Buffer.serial(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).serial(__long.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XDestroyWindowEvent$Buffer(java.nio.ByteBuffer)"""
        val = __Buffer(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).position(__int.valueOf(arg0)))

    @overload
    def event(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XDestroyWindowEvent$Buffer org.lwjgl.system.linux.XDestroyWindowEvent$Buffer.event(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).event(__long.valueOf(arg0)))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0)))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).clear())

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(__int.valueOf(arg0), arg1))

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).slice())

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XDestroyWindowEvent$Buffer.serial()"""
        return int.__wrap(super(Buffer, self).serial())

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'.__wrap(super(pyglsystem.StructBuffer, self).get())

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XDestroyWindowEvent$Buffer(long,int)"""
        val = __Buffer(__long.valueOf(arg0), __int.valueOf(arg1))
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).limit(__int.valueOf(arg0)))

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XDestroyWindowEvent$Buffer org.lwjgl.system.linux.XDestroyWindowEvent$Buffer.display(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).display(__long.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'.__wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str.__wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XDestroyWindowEvent$Buffer.display()"""
        return int.__wrap(super(Buffer, self).display())

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(arg0))

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).stream())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'.__wrap(super(pyglsystem.StructBuffer, self).iterator())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).slice(__int.valueOf(arg0), __int.valueOf(arg1))) 
 
 
# CLASS: org.lwjgl.system.linux.FOwnerEx
from pyquantum_helper import import_once as __import_once__
from builtins import str
import org.lwjgl.system.linux.FOwnerEx as __FOwnerEx_Buffer
__Buffer = __FOwnerEx_Buffer.Buffer
from pyquantum_helper import override
import java.lang.Object as __object
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import org.lwjgl.system.linux.FOwnerEx as __FOwnerEx
__FOwnerEx = __FOwnerEx
import java.lang.Object as __Object
__Object = __Object
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
from builtins import int
 
class FOwnerEx(pyglsystem.__Struct, pyglsystem.Struct, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.FOwnerEx"""
 
    @staticmethod
    def __wrap(java_value: __FOwnerEx) -> 'FOwnerEx':
        return FOwnerEx(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __FOwnerEx):
        """
        Dynamic initializer for FOwnerEx.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.FOwnerEx$Buffer org.lwjgl.system.linux.FOwnerEx.create(long,int)"""
        return Buffer.__wrap(__FOwnerEx.create(__long.valueOf(arg0), __int.valueOf(arg1)))

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.FOwnerEx$Buffer org.lwjgl.system.linux.FOwnerEx.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__FOwnerEx.malloc(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.FOwnerEx.ntype(long,int)"""
        __FOwnerEx.ntype(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).address())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.FOwnerEx.sizeof()"""
        return int.__wrap(super(FOwnerEx, self).sizeof())

    @staticmethod
    @overload
    def malloc() -> 'FOwnerEx':
        """public static org.lwjgl.system.linux.FOwnerEx org.lwjgl.system.linux.FOwnerEx.malloc()"""
        return FOwnerEx.__wrap(__FOwnerEx.malloc())

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'FOwnerEx':
        """public static org.lwjgl.system.linux.FOwnerEx org.lwjgl.system.linux.FOwnerEx.calloc(org.lwjgl.system.MemoryStack)"""
        return FOwnerEx.__wrap(__FOwnerEx.calloc(arg0))

    @overload
    def pid(self) -> int:
        """public int org.lwjgl.system.linux.FOwnerEx.pid()"""
        return int.__wrap(super(FOwnerEx, self).pid())

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'FOwnerEx':
        """public static org.lwjgl.system.linux.FOwnerEx org.lwjgl.system.linux.FOwnerEx.malloc(org.lwjgl.system.MemoryStack)"""
        return FOwnerEx.__wrap(__FOwnerEx.malloc(arg0))

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool.__wrap(super(__pyglsystem.Struct, self).isNull(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.FOwnerEx$Buffer org.lwjgl.system.linux.FOwnerEx.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__FOwnerEx.calloc(__int.valueOf(arg0), arg1))

    @overload
    def type(self, arg0: int) -> 'FOwnerEx':
        """public org.lwjgl.system.linux.FOwnerEx org.lwjgl.system.linux.FOwnerEx.type(int)"""
        return 'FOwnerEx'.__wrap(super(__FOwnerEx, self).type(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc() -> 'FOwnerEx':
        """public static org.lwjgl.system.linux.FOwnerEx org.lwjgl.system.linux.FOwnerEx.calloc()"""
        return FOwnerEx.__wrap(__FOwnerEx.calloc())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.FOwnerEx$Buffer org.lwjgl.system.linux.FOwnerEx.createSafe(long,int)"""
        return Buffer.__wrap(__FOwnerEx.createSafe(__long.valueOf(arg0), __int.valueOf(arg1)))

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.FOwnerEx$Buffer org.lwjgl.system.linux.FOwnerEx.malloc(int)"""
        return Buffer.__wrap(__FOwnerEx.malloc(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def npid(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.FOwnerEx.npid(long,int)"""
        __FOwnerEx.npid(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str.__wrap(super(pyglsystem.Pointer$Default, self).toString())

    @overload
    def set(self, arg0: 'FOwnerEx') -> 'FOwnerEx':
        """public org.lwjgl.system.linux.FOwnerEx org.lwjgl.system.linux.FOwnerEx.set(org.lwjgl.system.linux.FOwnerEx)"""
        return 'FOwnerEx'.__wrap(super(__FOwnerEx, self).set(arg0))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.FOwnerEx.type()"""
        return int.__wrap(super(FOwnerEx, self).type())

    @overload
    def pid(self, arg0: int) -> 'FOwnerEx':
        """public org.lwjgl.system.linux.FOwnerEx org.lwjgl.system.linux.FOwnerEx.pid(int)"""
        return 'FOwnerEx'.__wrap(super(__FOwnerEx, self).pid(__int.valueOf(arg0)))

    @overload
    def set(self, arg0: int, arg1: int) -> 'FOwnerEx':
        """public org.lwjgl.system.linux.FOwnerEx org.lwjgl.system.linux.FOwnerEx.set(int,int)"""
        return 'FOwnerEx'.__wrap(super(__FOwnerEx, self).set(__int.valueOf(arg0), __int.valueOf(arg1)))

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.FOwnerEx$Buffer org.lwjgl.system.linux.FOwnerEx.calloc(int)"""
        return Buffer.__wrap(__FOwnerEx.calloc(__int.valueOf(arg0)))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.FOwnerEx(java.nio.ByteBuffer)"""
        val = __FOwnerEx(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @staticmethod
    @overload
    def npid(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.FOwnerEx.npid(long)"""
        return int.__wrap(__FOwnerEx.npid(__long.valueOf(arg0)))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'FOwnerEx':
        """public static org.lwjgl.system.linux.FOwnerEx org.lwjgl.system.linux.FOwnerEx.createSafe(long)"""
        return FOwnerEx.__wrap(__FOwnerEx.createSafe(__long.valueOf(arg0)))

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @staticmethod
    @overload
    def create(arg0: int) -> 'FOwnerEx':
        """public static org.lwjgl.system.linux.FOwnerEx org.lwjgl.system.linux.FOwnerEx.create(long)"""
        return FOwnerEx.__wrap(__FOwnerEx.create(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        __Struct.validate(__long.valueOf(arg0), __int.valueOf(arg1), __int.valueOf(arg2), arg3)

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def create() -> 'FOwnerEx':
        """public static org.lwjgl.system.linux.FOwnerEx org.lwjgl.system.linux.FOwnerEx.create()"""
        return FOwnerEx.__wrap(__FOwnerEx.create())

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.FOwnerEx$Buffer org.lwjgl.system.linux.FOwnerEx.create(int)"""
        return Buffer.__wrap(__FOwnerEx.create(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.FOwnerEx.ntype(long)"""
        return int.__wrap(__FOwnerEx.ntype(__long.valueOf(arg0))) 
 
 
# CLASS: org.lwjgl.system.linux.IOVec$Buffer
from pyquantum_helper import import_once as __import_once__
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import java.nio.ByteBuffer as __ByteBuffer
__ByteBuffer = __ByteBuffer
import java.util.stream.Stream as __Stream
__Stream = __Stream
import org.lwjgl.system.StructBuffer as __StructBuffer
__StructBuffer = __StructBuffer
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.CustomBuffer as __CustomBuffer
__CustomBuffer = __CustomBuffer
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.util.Iterator as __Iterator
__Iterator = __Iterator
import java.lang.Object as __object
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.util.Iterator as Iterator
import java.util.Spliterator as __Spliterator
__Spliterator = __Spliterator
import java.lang.Long as __long
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import org.lwjgl.system.linux.IOVec as __IOVec_Buffer
__Buffer = __IOVec_Buffer.Buffer
import java.lang.Object as __Object
__Object = __Object
import java.util.stream.Stream as Stream
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Integer as __int
from builtins import int
 
class Buffer(pyglsystem.__StructBuffer, pyglsystem.StructBuffer, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.IOVec.Buffer"""
 
    @staticmethod
    def __wrap(java_value: __Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(__pyglsystem.StructBuffer, self).forEach(arg0)

    @overload
    def iov_len(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.IOVec$Buffer org.lwjgl.system.linux.IOVec$Buffer.iov_len(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).iov_len(__long.valueOf(arg0)))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0), arg1))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.IOVec$Buffer(java.nio.ByteBuffer)"""
        val = __Buffer(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int.__wrap(super(__pyglsystem.CustomBuffer, self).address(__int.valueOf(arg0)))

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(__int.valueOf(arg0), arg1))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int.__wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(arg0))

    @overload
    def iov_len(self) -> int:
        """public long org.lwjgl.system.linux.IOVec$Buffer.iov_len()"""
        return int.__wrap(super(Buffer, self).iov_len())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool.__wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @overload
    def iov_base(self, arg0: 'ByteBuffer') -> 'Buffer':
        """public org.lwjgl.system.linux.IOVec$Buffer org.lwjgl.system.linux.IOVec$Buffer.iov_base(java.nio.ByteBuffer)"""
        return 'Buffer'.__wrap(super(__Buffer, self).iov_base(arg0))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).position(__int.valueOf(arg0)))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0)))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).clear())

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(__int.valueOf(arg0), arg1))

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.IOVec$Buffer(long,int)"""
        val = __Buffer(__long.valueOf(arg0), __int.valueOf(arg1))
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).slice())

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).compact())

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'.__wrap(super(pyglsystem.StructBuffer, self).get())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).limit(__int.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'.__wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str.__wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(arg0))

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).stream())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'.__wrap(super(pyglsystem.StructBuffer, self).iterator())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def iov_base(self) -> 'ByteBuffer':
        """public java.nio.ByteBuffer org.lwjgl.system.linux.IOVec$Buffer.iov_base()"""
        return 'ByteBuffer'.__wrap(super(Buffer, self).iov_base())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).slice(__int.valueOf(arg0), __int.valueOf(arg1))) 
 
 
# CLASS: org.lwjgl.system.linux.CMsghdr
from pyquantum_helper import import_once as __import_once__
from builtins import str
from pyquantum_helper import override
import java.lang.Object as __object
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import java.nio.ByteBuffer as __ByteBuffer
__ByteBuffer = __ByteBuffer
import org.lwjgl.system.linux.CMsghdr as __CMsghdr
__CMsghdr = __CMsghdr
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.Byte as __byte
import java.lang.String as __String
__String = __String
import org.lwjgl.system.linux.CMsghdr as __CMsghdr_Buffer
__Buffer = __CMsghdr_Buffer.Buffer
import java.lang.Object as __Object
__Object = __Object
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Integer as __int
from builtins import bool
from builtins import int
 
class CMsghdr(pyglsystem.__Struct, pyglsystem.Struct, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.CMsghdr"""
 
    @staticmethod
    def __wrap(java_value: __CMsghdr) -> 'CMsghdr':
        return CMsghdr(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __CMsghdr):
        """
        Dynamic initializer for CMsghdr.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool.__wrap(super(__pyglsystem.Struct, self).isNull(__int.valueOf(arg0)))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.CMsghdr$Buffer org.lwjgl.system.linux.CMsghdr.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__CMsghdr.calloc(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def ncmsg_type(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.CMsghdr.ncmsg_type(long,int)"""
        __CMsghdr.ncmsg_type(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def ncmsg_data(arg0: int, arg1: int, arg2: int):
        """public static void org.lwjgl.system.linux.CMsghdr.ncmsg_data(long,int,byte)"""
        __CMsghdr.ncmsg_data(__long.valueOf(arg0), __int.valueOf(arg1), __byte.valueOf(arg2))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.CMsghdr.sizeof()"""
        return int.__wrap(super(CMsghdr, self).sizeof())

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.CMsghdr$Buffer org.lwjgl.system.linux.CMsghdr.create(long,int)"""
        return Buffer.__wrap(__CMsghdr.create(__long.valueOf(arg0), __int.valueOf(arg1)))

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'CMsghdr':
        """public static org.lwjgl.system.linux.CMsghdr org.lwjgl.system.linux.CMsghdr.createSafe(long)"""
        return CMsghdr.__wrap(__CMsghdr.createSafe(__long.valueOf(arg0)))

    @overload
    def cmsg_len(self) -> int:
        """public int org.lwjgl.system.linux.CMsghdr.cmsg_len()"""
        return int.__wrap(super(CMsghdr, self).cmsg_len())

    @overload
    def cmsg_data(self, arg0: 'ByteBuffer') -> 'CMsghdr':
        """public org.lwjgl.system.linux.CMsghdr org.lwjgl.system.linux.CMsghdr.cmsg_data(java.nio.ByteBuffer)"""
        return 'CMsghdr'.__wrap(super(__CMsghdr, self).cmsg_data(arg0))

    @overload
    def cmsg_len(self, arg0: int) -> 'CMsghdr':
        """public org.lwjgl.system.linux.CMsghdr org.lwjgl.system.linux.CMsghdr.cmsg_len(int)"""
        return 'CMsghdr'.__wrap(super(__CMsghdr, self).cmsg_len(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'CMsghdr':
        """public static org.lwjgl.system.linux.CMsghdr org.lwjgl.system.linux.CMsghdr.calloc(org.lwjgl.system.MemoryStack)"""
        return CMsghdr.__wrap(__CMsghdr.calloc(arg0))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @staticmethod
    @overload
    def create(arg0: int) -> 'CMsghdr':
        """public static org.lwjgl.system.linux.CMsghdr org.lwjgl.system.linux.CMsghdr.create(long)"""
        return CMsghdr.__wrap(__CMsghdr.create(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'CMsghdr':
        """public static org.lwjgl.system.linux.CMsghdr org.lwjgl.system.linux.CMsghdr.malloc(org.lwjgl.system.MemoryStack)"""
        return CMsghdr.__wrap(__CMsghdr.malloc(arg0))

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @staticmethod
    @overload
    def ncmsg_data(arg0: int, arg1: int) -> int:
        """public static byte org.lwjgl.system.linux.CMsghdr.ncmsg_data(long,int)"""
        return int.__wrap(__CMsghdr.ncmsg_data(__long.valueOf(arg0), __int.valueOf(arg1)))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.CMsghdr$Buffer org.lwjgl.system.linux.CMsghdr.createSafe(long,int)"""
        return Buffer.__wrap(__CMsghdr.createSafe(__long.valueOf(arg0), __int.valueOf(arg1)))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.CMsghdr(java.nio.ByteBuffer)"""
        val = __CMsghdr(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @staticmethod
    @overload
    def ncmsg_len(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.CMsghdr.ncmsg_len(long,int)"""
        __CMsghdr.ncmsg_len(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def cmsg_type(self) -> int:
        """public int org.lwjgl.system.linux.CMsghdr.cmsg_type()"""
        return int.__wrap(super(CMsghdr, self).cmsg_type())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def ncmsg_data(arg0: int) -> 'ByteBuffer':
        """public static java.nio.ByteBuffer org.lwjgl.system.linux.CMsghdr.ncmsg_data(long)"""
        return ByteBuffer.__wrap(__CMsghdr.ncmsg_data(__long.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.CMsghdr$Buffer org.lwjgl.system.linux.CMsghdr.calloc(int)"""
        return Buffer.__wrap(__CMsghdr.calloc(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def ncmsg_len(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.CMsghdr.ncmsg_len(long)"""
        return int.__wrap(__CMsghdr.ncmsg_len(__long.valueOf(arg0)))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).address())

    @staticmethod
    @overload
    def ncmsg_data(arg0: int, arg1: 'ByteBuffer'):
        """public static void org.lwjgl.system.linux.CMsghdr.ncmsg_data(long,java.nio.ByteBuffer)"""
        __CMsghdr.ncmsg_data(__long.valueOf(arg0), arg1)

    @overload
    def set(self, arg0: 'CMsghdr') -> 'CMsghdr':
        """public org.lwjgl.system.linux.CMsghdr org.lwjgl.system.linux.CMsghdr.set(org.lwjgl.system.linux.CMsghdr)"""
        return 'CMsghdr'.__wrap(super(__CMsghdr, self).set(arg0))

    @overload
    def cmsg_level(self, arg0: int) -> 'CMsghdr':
        """public org.lwjgl.system.linux.CMsghdr org.lwjgl.system.linux.CMsghdr.cmsg_level(int)"""
        return 'CMsghdr'.__wrap(super(__CMsghdr, self).cmsg_level(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc() -> 'CMsghdr':
        """public static org.lwjgl.system.linux.CMsghdr org.lwjgl.system.linux.CMsghdr.malloc()"""
        return CMsghdr.__wrap(__CMsghdr.malloc())

    @overload
    def set(self, arg0: int, arg1: int, arg2: int, arg3: 'ByteBuffer') -> 'CMsghdr':
        """public org.lwjgl.system.linux.CMsghdr org.lwjgl.system.linux.CMsghdr.set(int,int,int,java.nio.ByteBuffer)"""
        return 'CMsghdr'.__wrap(super(__CMsghdr, self).set(__int.valueOf(arg0), __int.valueOf(arg1), __int.valueOf(arg2), arg3))

    @staticmethod
    @overload
    def create() -> 'CMsghdr':
        """public static org.lwjgl.system.linux.CMsghdr org.lwjgl.system.linux.CMsghdr.create()"""
        return CMsghdr.__wrap(__CMsghdr.create())

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.CMsghdr$Buffer org.lwjgl.system.linux.CMsghdr.malloc(int)"""
        return Buffer.__wrap(__CMsghdr.malloc(__int.valueOf(arg0)))

    @overload
    def cmsg_data(self, arg0: int) -> int:
        """public byte org.lwjgl.system.linux.CMsghdr.cmsg_data(int)"""
        return int.__wrap(super(__CMsghdr, self).cmsg_data(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc() -> 'CMsghdr':
        """public static org.lwjgl.system.linux.CMsghdr org.lwjgl.system.linux.CMsghdr.calloc()"""
        return CMsghdr.__wrap(__CMsghdr.calloc())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str.__wrap(super(pyglsystem.Pointer$Default, self).toString())

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.CMsghdr$Buffer org.lwjgl.system.linux.CMsghdr.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__CMsghdr.malloc(__int.valueOf(arg0), arg1))

    @overload
    def cmsg_data(self) -> 'ByteBuffer':
        """public java.nio.ByteBuffer org.lwjgl.system.linux.CMsghdr.cmsg_data()"""
        return 'ByteBuffer'.__wrap(super(CMsghdr, self).cmsg_data())

    @staticmethod
    @overload
    def ncmsg_level(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.CMsghdr.ncmsg_level(long,int)"""
        __CMsghdr.ncmsg_level(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @overload
    def cmsg_level(self) -> int:
        """public int org.lwjgl.system.linux.CMsghdr.cmsg_level()"""
        return int.__wrap(super(CMsghdr, self).cmsg_level())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def cmsg_type(self, arg0: int) -> 'CMsghdr':
        """public org.lwjgl.system.linux.CMsghdr org.lwjgl.system.linux.CMsghdr.cmsg_type(int)"""
        return 'CMsghdr'.__wrap(super(__CMsghdr, self).cmsg_type(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.CMsghdr$Buffer org.lwjgl.system.linux.CMsghdr.create(int)"""
        return Buffer.__wrap(__CMsghdr.create(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        __Struct.validate(__long.valueOf(arg0), __int.valueOf(arg1), __int.valueOf(arg2), arg3)

    @staticmethod
    @overload
    def ncmsg_level(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.CMsghdr.ncmsg_level(long)"""
        return int.__wrap(__CMsghdr.ncmsg_level(__long.valueOf(arg0)))

    @overload
    def cmsg_data(self, arg0: int, arg1: int) -> 'CMsghdr':
        """public org.lwjgl.system.linux.CMsghdr org.lwjgl.system.linux.CMsghdr.cmsg_data(int,byte)"""
        return 'CMsghdr'.__wrap(super(__CMsghdr, self).cmsg_data(__int.valueOf(arg0), __byte.valueOf(arg1)))

    @staticmethod
    @overload
    def ncmsg_type(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.CMsghdr.ncmsg_type(long)"""
        return int.__wrap(__CMsghdr.ncmsg_type(__long.valueOf(arg0))) 
 
 
# CLASS: org.lwjgl.system.linux.XSelectionClearEvent
from pyquantum_helper import import_once as __import_once__
from builtins import str
import java.lang.Boolean as __boolean
from pyquantum_helper import override
import java.lang.Object as __object
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import org.lwjgl.system.linux.XSelectionClearEvent as __XSelectionClearEvent
__XSelectionClearEvent = __XSelectionClearEvent
import org.lwjgl.system.linux.XSelectionClearEvent as __XSelectionClearEvent_Buffer
__Buffer = __XSelectionClearEvent_Buffer.Buffer
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
from builtins import int
 
class XSelectionClearEvent(pyglsystem.__Struct, pyglsystem.Struct, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XSelectionClearEvent"""
 
    @staticmethod
    def __wrap(java_value: __XSelectionClearEvent) -> 'XSelectionClearEvent':
        return XSelectionClearEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __XSelectionClearEvent):
        """
        Dynamic initializer for XSelectionClearEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionClearEvent.display()"""
        return int.__wrap(super(XSelectionClearEvent, self).display())

    @staticmethod
    @overload
    def nwindow(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XSelectionClearEvent.nwindow(long)"""
        return int.__wrap(__XSelectionClearEvent.nwindow(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XSelectionClearEvent.ndisplay(long)"""
        return int.__wrap(__XSelectionClearEvent.ndisplay(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nwindow(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSelectionClearEvent.nwindow(long,long)"""
        __XSelectionClearEvent.nwindow(__long.valueOf(arg0), __long.valueOf(arg1))

    @overload
    def set(self, arg0: 'XSelectionClearEvent') -> 'XSelectionClearEvent':
        """public org.lwjgl.system.linux.XSelectionClearEvent org.lwjgl.system.linux.XSelectionClearEvent.set(org.lwjgl.system.linux.XSelectionClearEvent)"""
        return 'XSelectionClearEvent'.__wrap(super(__XSelectionClearEvent, self).set(arg0))

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionClearEvent$Buffer org.lwjgl.system.linux.XSelectionClearEvent.callocStack(int)"""
        return Buffer.__wrap(__XSelectionClearEvent.callocStack(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XSelectionClearEvent':
        """public static org.lwjgl.system.linux.XSelectionClearEvent org.lwjgl.system.linux.XSelectionClearEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XSelectionClearEvent.__wrap(__XSelectionClearEvent.callocStack(arg0))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def time(self, arg0: int) -> 'XSelectionClearEvent':
        """public org.lwjgl.system.linux.XSelectionClearEvent org.lwjgl.system.linux.XSelectionClearEvent.time(long)"""
        return 'XSelectionClearEvent'.__wrap(super(__XSelectionClearEvent, self).time(__long.valueOf(arg0)))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XSelectionClearEvent.send_event()"""
        return bool.__wrap(super(XSelectionClearEvent, self).send_event())

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionClearEvent$Buffer org.lwjgl.system.linux.XSelectionClearEvent.calloc(int)"""
        return Buffer.__wrap(__XSelectionClearEvent.calloc(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionClearEvent$Buffer org.lwjgl.system.linux.XSelectionClearEvent.malloc(int)"""
        return Buffer.__wrap(__XSelectionClearEvent.malloc(__int.valueOf(arg0)))

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool.__wrap(super(__pyglsystem.Struct, self).isNull(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def create() -> 'XSelectionClearEvent':
        """public static org.lwjgl.system.linux.XSelectionClearEvent org.lwjgl.system.linux.XSelectionClearEvent.create()"""
        return XSelectionClearEvent.__wrap(__XSelectionClearEvent.create())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def mallocStack() -> 'XSelectionClearEvent':
        """public static org.lwjgl.system.linux.XSelectionClearEvent org.lwjgl.system.linux.XSelectionClearEvent.mallocStack()"""
        return XSelectionClearEvent.__wrap(__XSelectionClearEvent.mallocStack())

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XSelectionClearEvent.ntype(long)"""
        return int.__wrap(__XSelectionClearEvent.ntype(__long.valueOf(arg0)))

    @overload
    def type(self, arg0: int) -> 'XSelectionClearEvent':
        """public org.lwjgl.system.linux.XSelectionClearEvent org.lwjgl.system.linux.XSelectionClearEvent.type(int)"""
        return 'XSelectionClearEvent'.__wrap(super(__XSelectionClearEvent, self).type(__int.valueOf(arg0)))

    @overload
    def selection(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionClearEvent.selection()"""
        return int.__wrap(super(XSelectionClearEvent, self).selection())

    @staticmethod
    @overload
    def nselection(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XSelectionClearEvent.nselection(long)"""
        return int.__wrap(__XSelectionClearEvent.nselection(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def ntime(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSelectionClearEvent.ntime(long,long)"""
        __XSelectionClearEvent.ntime(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def create(arg0: int) -> 'XSelectionClearEvent':
        """public static org.lwjgl.system.linux.XSelectionClearEvent org.lwjgl.system.linux.XSelectionClearEvent.create(long)"""
        return XSelectionClearEvent.__wrap(__XSelectionClearEvent.create(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc() -> 'XSelectionClearEvent':
        """public static org.lwjgl.system.linux.XSelectionClearEvent org.lwjgl.system.linux.XSelectionClearEvent.malloc()"""
        return XSelectionClearEvent.__wrap(__XSelectionClearEvent.malloc())

    @overload
    def time(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionClearEvent.time()"""
        return int.__wrap(super(XSelectionClearEvent, self).time())

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XSelectionClearEvent':
        """public static org.lwjgl.system.linux.XSelectionClearEvent org.lwjgl.system.linux.XSelectionClearEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XSelectionClearEvent.__wrap(__XSelectionClearEvent.calloc(arg0))

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSelectionClearEvent.ntype(long,int)"""
        __XSelectionClearEvent.ntype(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XSelectionClearEvent.nserial(long)"""
        return int.__wrap(__XSelectionClearEvent.nserial(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def ntime(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XSelectionClearEvent.ntime(long)"""
        return int.__wrap(__XSelectionClearEvent.ntime(__long.valueOf(arg0)))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionClearEvent$Buffer org.lwjgl.system.linux.XSelectionClearEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XSelectionClearEvent.callocStack(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XSelectionClearEvent.validate(long)"""
        __XSelectionClearEvent.validate(__long.valueOf(arg0))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XSelectionClearEvent.type()"""
        return int.__wrap(super(XSelectionClearEvent, self).type())

    @overload
    def selection(self, arg0: int) -> 'XSelectionClearEvent':
        """public org.lwjgl.system.linux.XSelectionClearEvent org.lwjgl.system.linux.XSelectionClearEvent.selection(long)"""
        return 'XSelectionClearEvent'.__wrap(super(__XSelectionClearEvent, self).selection(__long.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XSelectionClearEvent(java.nio.ByteBuffer)"""
        val = __XSelectionClearEvent(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionClearEvent$Buffer org.lwjgl.system.linux.XSelectionClearEvent.create(long,int)"""
        return Buffer.__wrap(__XSelectionClearEvent.create(__long.valueOf(arg0), __int.valueOf(arg1)))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def serial(self, arg0: int) -> 'XSelectionClearEvent':
        """public org.lwjgl.system.linux.XSelectionClearEvent org.lwjgl.system.linux.XSelectionClearEvent.serial(long)"""
        return 'XSelectionClearEvent'.__wrap(super(__XSelectionClearEvent, self).serial(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionClearEvent$Buffer org.lwjgl.system.linux.XSelectionClearEvent.mallocStack(int)"""
        return Buffer.__wrap(__XSelectionClearEvent.mallocStack(__int.valueOf(arg0)))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).address())

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int, arg5: int, arg6: int) -> 'XSelectionClearEvent':
        """public org.lwjgl.system.linux.XSelectionClearEvent org.lwjgl.system.linux.XSelectionClearEvent.set(int,long,boolean,long,long,long,long)"""
        return 'XSelectionClearEvent'.__wrap(super(__XSelectionClearEvent, self).set(__int.valueOf(arg0), __long.valueOf(arg1), __boolean.valueOf(arg2), __long.valueOf(arg3), __long.valueOf(arg4), __long.valueOf(arg5), __long.valueOf(arg6)))

    @overload
    def send_event(self, arg0: bool) -> 'XSelectionClearEvent':
        """public org.lwjgl.system.linux.XSelectionClearEvent org.lwjgl.system.linux.XSelectionClearEvent.send_event(boolean)"""
        return 'XSelectionClearEvent'.__wrap(super(__XSelectionClearEvent, self).send_event(__boolean.valueOf(arg0)))

    @overload
    def window(self, arg0: int) -> 'XSelectionClearEvent':
        """public org.lwjgl.system.linux.XSelectionClearEvent org.lwjgl.system.linux.XSelectionClearEvent.window(long)"""
        return 'XSelectionClearEvent'.__wrap(super(__XSelectionClearEvent, self).window(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc() -> 'XSelectionClearEvent':
        """public static org.lwjgl.system.linux.XSelectionClearEvent org.lwjgl.system.linux.XSelectionClearEvent.calloc()"""
        return XSelectionClearEvent.__wrap(__XSelectionClearEvent.calloc())

    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XSelectionClearEvent.nsend_event(long)"""
        return int.__wrap(__XSelectionClearEvent.nsend_event(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XSelectionClearEvent':
        """public static org.lwjgl.system.linux.XSelectionClearEvent org.lwjgl.system.linux.XSelectionClearEvent.createSafe(long)"""
        return XSelectionClearEvent.__wrap(__XSelectionClearEvent.createSafe(__long.valueOf(arg0)))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionClearEvent.serial()"""
        return int.__wrap(super(XSelectionClearEvent, self).serial())

    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSelectionClearEvent.nsend_event(long,int)"""
        __XSelectionClearEvent.nsend_event(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def callocStack() -> 'XSelectionClearEvent':
        """public static org.lwjgl.system.linux.XSelectionClearEvent org.lwjgl.system.linux.XSelectionClearEvent.callocStack()"""
        return XSelectionClearEvent.__wrap(__XSelectionClearEvent.callocStack())

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSelectionClearEvent.nserial(long,long)"""
        __XSelectionClearEvent.nserial(__long.valueOf(arg0), __long.valueOf(arg1))

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionClearEvent.window()"""
        return int.__wrap(super(XSelectionClearEvent, self).window())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str.__wrap(super(pyglsystem.Pointer$Default, self).toString())

    @overload
    def display(self, arg0: int) -> 'XSelectionClearEvent':
        """public org.lwjgl.system.linux.XSelectionClearEvent org.lwjgl.system.linux.XSelectionClearEvent.display(long)"""
        return 'XSelectionClearEvent'.__wrap(super(__XSelectionClearEvent, self).display(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSelectionClearEvent.ndisplay(long,long)"""
        __XSelectionClearEvent.ndisplay(__long.valueOf(arg0), __long.valueOf(arg1))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionClearEvent$Buffer org.lwjgl.system.linux.XSelectionClearEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XSelectionClearEvent.malloc(__int.valueOf(arg0), arg1))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @staticmethod
    @overload
    def nselection(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSelectionClearEvent.nselection(long,long)"""
        __XSelectionClearEvent.nselection(__long.valueOf(arg0), __long.valueOf(arg1))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XSelectionClearEvent':
        """public static org.lwjgl.system.linux.XSelectionClearEvent org.lwjgl.system.linux.XSelectionClearEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XSelectionClearEvent.__wrap(__XSelectionClearEvent.malloc(arg0))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XSelectionClearEvent.sizeof()"""
        return int.__wrap(super(XSelectionClearEvent, self).sizeof())

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionClearEvent$Buffer org.lwjgl.system.linux.XSelectionClearEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XSelectionClearEvent.calloc(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionClearEvent$Buffer org.lwjgl.system.linux.XSelectionClearEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XSelectionClearEvent.mallocStack(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        __Struct.validate(__long.valueOf(arg0), __int.valueOf(arg1), __int.valueOf(arg2), arg3)

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionClearEvent$Buffer org.lwjgl.system.linux.XSelectionClearEvent.create(int)"""
        return Buffer.__wrap(__XSelectionClearEvent.create(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionClearEvent$Buffer org.lwjgl.system.linux.XSelectionClearEvent.createSafe(long,int)"""
        return Buffer.__wrap(__XSelectionClearEvent.createSafe(__long.valueOf(arg0), __int.valueOf(arg1)))

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XSelectionClearEvent':
        """public static org.lwjgl.system.linux.XSelectionClearEvent org.lwjgl.system.linux.XSelectionClearEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XSelectionClearEvent.__wrap(__XSelectionClearEvent.mallocStack(arg0)) 
 
 
# CLASS: org.lwjgl.system.linux.XKeymapEvent$Buffer
from pyquantum_helper import import_once as __import_once__
import java.lang.Boolean as __boolean
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import java.nio.ByteBuffer as __ByteBuffer
__ByteBuffer = __ByteBuffer
import java.util.stream.Stream as __Stream
__Stream = __Stream
import org.lwjgl.system.linux.XKeymapEvent as __XKeymapEvent_Buffer
__Buffer = __XKeymapEvent_Buffer.Buffer
import org.lwjgl.system.StructBuffer as __StructBuffer
__StructBuffer = __StructBuffer
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Class as __Class
__Class = __Class
import java.lang.Byte as __byte
import org.lwjgl.system.CustomBuffer as __CustomBuffer
__CustomBuffer = __CustomBuffer
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.util.Iterator as __Iterator
__Iterator = __Iterator
import java.lang.Object as __object
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.util.Iterator as Iterator
import java.util.Spliterator as __Spliterator
__Spliterator = __Spliterator
import java.lang.Long as __long
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import java.util.stream.Stream as Stream
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import int
 
class Buffer(pyglsystem.__StructBuffer, pyglsystem.StructBuffer, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XKeymapEvent.Buffer"""
 
    @staticmethod
    def __wrap(java_value: __Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(arg0))

    @overload
    def key_vector(self, arg0: int, arg1: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XKeymapEvent$Buffer org.lwjgl.system.linux.XKeymapEvent$Buffer.key_vector(int,byte)"""
        return 'Buffer'.__wrap(super(__Buffer, self).key_vector(__int.valueOf(arg0), __byte.valueOf(arg1)))

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(__pyglsystem.StructBuffer, self).forEach(arg0)

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XKeymapEvent$Buffer.send_event()"""
        return bool.__wrap(super(Buffer, self).send_event())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def key_vector(self, arg0: int) -> int:
        """public byte org.lwjgl.system.linux.XKeymapEvent$Buffer.key_vector(int)"""
        return int.__wrap(super(__Buffer, self).key_vector(__int.valueOf(arg0)))

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0), arg1))

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XKeymapEvent$Buffer.window()"""
        return int.__wrap(super(Buffer, self).window())

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int.__wrap(super(__pyglsystem.CustomBuffer, self).address(__int.valueOf(arg0)))

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def window(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XKeymapEvent$Buffer org.lwjgl.system.linux.XKeymapEvent$Buffer.window(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).window(__long.valueOf(arg0)))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(__int.valueOf(arg0), arg1))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int.__wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(arg0))

    @overload
    def key_vector(self, arg0: 'ByteBuffer') -> 'Buffer':
        """public org.lwjgl.system.linux.XKeymapEvent$Buffer org.lwjgl.system.linux.XKeymapEvent$Buffer.key_vector(java.nio.ByteBuffer)"""
        return 'Buffer'.__wrap(super(__Buffer, self).key_vector(arg0))

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XKeymapEvent$Buffer org.lwjgl.system.linux.XKeymapEvent$Buffer.display(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).display(__long.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool.__wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @overload
    def key_vector(self) -> 'ByteBuffer':
        """public java.nio.ByteBuffer org.lwjgl.system.linux.XKeymapEvent$Buffer.key_vector()"""
        return 'ByteBuffer'.__wrap(super(Buffer, self).key_vector())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XKeymapEvent$Buffer.type()"""
        return int.__wrap(super(Buffer, self).type())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).position(__int.valueOf(arg0)))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0)))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).clear())

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(__int.valueOf(arg0), arg1))

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XKeymapEvent$Buffer org.lwjgl.system.linux.XKeymapEvent$Buffer.send_event(boolean)"""
        return 'Buffer'.__wrap(super(__Buffer, self).send_event(__boolean.valueOf(arg0)))

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XKeymapEvent$Buffer.display()"""
        return int.__wrap(super(Buffer, self).display())

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XKeymapEvent$Buffer(java.nio.ByteBuffer)"""
        val = __Buffer(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XKeymapEvent$Buffer(long,int)"""
        val = __Buffer(__long.valueOf(arg0), __int.valueOf(arg1))
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).slice())

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XKeymapEvent$Buffer org.lwjgl.system.linux.XKeymapEvent$Buffer.serial(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).serial(__long.valueOf(arg0)))

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'.__wrap(super(pyglsystem.StructBuffer, self).get())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).limit(__int.valueOf(arg0)))

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XKeymapEvent$Buffer org.lwjgl.system.linux.XKeymapEvent$Buffer.type(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).type(__int.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'.__wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str.__wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(arg0))

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).stream())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'.__wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XKeymapEvent$Buffer.serial()"""
        return int.__wrap(super(Buffer, self).serial())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).slice(__int.valueOf(arg0), __int.valueOf(arg1))) 
 
 
# CLASS: org.lwjgl.system.linux.XGraphicsExposeEvent
from pyquantum_helper import import_once as __import_once__
from builtins import str
import java.lang.Boolean as __boolean
from pyquantum_helper import override
import java.lang.Object as __object
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import org.lwjgl.system.linux.XGraphicsExposeEvent as __XGraphicsExposeEvent
__XGraphicsExposeEvent = __XGraphicsExposeEvent
import org.lwjgl.system.linux.XGraphicsExposeEvent as __XGraphicsExposeEvent_Buffer
__Buffer = __XGraphicsExposeEvent_Buffer.Buffer
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
from builtins import int
 
class XGraphicsExposeEvent(pyglsystem.__Struct, pyglsystem.Struct, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XGraphicsExposeEvent"""
 
    @staticmethod
    def __wrap(java_value: __XGraphicsExposeEvent) -> 'XGraphicsExposeEvent':
        return XGraphicsExposeEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __XGraphicsExposeEvent):
        """
        Dynamic initializer for XGraphicsExposeEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def x(self, arg0: int) -> 'XGraphicsExposeEvent':
        """public org.lwjgl.system.linux.XGraphicsExposeEvent org.lwjgl.system.linux.XGraphicsExposeEvent.x(int)"""
        return 'XGraphicsExposeEvent'.__wrap(super(__XGraphicsExposeEvent, self).x(__int.valueOf(arg0)))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XGraphicsExposeEvent.sizeof()"""
        return int.__wrap(super(XGraphicsExposeEvent, self).sizeof())

    @overload
    def x(self) -> int:
        """public int org.lwjgl.system.linux.XGraphicsExposeEvent.x()"""
        return int.__wrap(super(XGraphicsExposeEvent, self).x())

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: int, arg10: int, arg11: int) -> 'XGraphicsExposeEvent':
        """public org.lwjgl.system.linux.XGraphicsExposeEvent org.lwjgl.system.linux.XGraphicsExposeEvent.set(int,long,boolean,long,long,int,int,int,int,int,int,int)"""
        return 'XGraphicsExposeEvent'.__wrap(super(__XGraphicsExposeEvent, self).set(__int.valueOf(arg0), __long.valueOf(arg1), __boolean.valueOf(arg2), __long.valueOf(arg3), __long.valueOf(arg4), __int.valueOf(arg5), __int.valueOf(arg6), __int.valueOf(arg7), __int.valueOf(arg8), __int.valueOf(arg9), __int.valueOf(arg10), __int.valueOf(arg11)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'XGraphicsExposeEvent':
        """public static org.lwjgl.system.linux.XGraphicsExposeEvent org.lwjgl.system.linux.XGraphicsExposeEvent.create(long)"""
        return XGraphicsExposeEvent.__wrap(__XGraphicsExposeEvent.create(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack() -> 'XGraphicsExposeEvent':
        """public static org.lwjgl.system.linux.XGraphicsExposeEvent org.lwjgl.system.linux.XGraphicsExposeEvent.callocStack()"""
        return XGraphicsExposeEvent.__wrap(__XGraphicsExposeEvent.callocStack())

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XGraphicsExposeEvent.serial()"""
        return int.__wrap(super(XGraphicsExposeEvent, self).serial())

    @overload
    def major_code(self) -> int:
        """public int org.lwjgl.system.linux.XGraphicsExposeEvent.major_code()"""
        return int.__wrap(super(XGraphicsExposeEvent, self).major_code())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer org.lwjgl.system.linux.XGraphicsExposeEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XGraphicsExposeEvent.calloc(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def nheight(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGraphicsExposeEvent.nheight(long,int)"""
        __XGraphicsExposeEvent.nheight(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool.__wrap(super(__pyglsystem.Struct, self).isNull(__int.valueOf(arg0)))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def send_event(self, arg0: bool) -> 'XGraphicsExposeEvent':
        """public org.lwjgl.system.linux.XGraphicsExposeEvent org.lwjgl.system.linux.XGraphicsExposeEvent.send_event(boolean)"""
        return 'XGraphicsExposeEvent'.__wrap(super(__XGraphicsExposeEvent, self).send_event(__boolean.valueOf(arg0)))

    @overload
    def y(self) -> int:
        """public int org.lwjgl.system.linux.XGraphicsExposeEvent.y()"""
        return int.__wrap(super(XGraphicsExposeEvent, self).y())

    @staticmethod
    @overload
    def create() -> 'XGraphicsExposeEvent':
        """public static org.lwjgl.system.linux.XGraphicsExposeEvent org.lwjgl.system.linux.XGraphicsExposeEvent.create()"""
        return XGraphicsExposeEvent.__wrap(__XGraphicsExposeEvent.create())

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XGraphicsExposeEvent.ntype(long)"""
        return int.__wrap(__XGraphicsExposeEvent.ntype(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nx(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XGraphicsExposeEvent.nx(long)"""
        return int.__wrap(__XGraphicsExposeEvent.nx(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XGraphicsExposeEvent':
        """public static org.lwjgl.system.linux.XGraphicsExposeEvent org.lwjgl.system.linux.XGraphicsExposeEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XGraphicsExposeEvent.__wrap(__XGraphicsExposeEvent.mallocStack(arg0))

    @overload
    def major_code(self, arg0: int) -> 'XGraphicsExposeEvent':
        """public org.lwjgl.system.linux.XGraphicsExposeEvent org.lwjgl.system.linux.XGraphicsExposeEvent.major_code(int)"""
        return 'XGraphicsExposeEvent'.__wrap(super(__XGraphicsExposeEvent, self).major_code(__int.valueOf(arg0)))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XGraphicsExposeEvent.send_event()"""
        return bool.__wrap(super(XGraphicsExposeEvent, self).send_event())

    @staticmethod
    @overload
    def ndrawable(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XGraphicsExposeEvent.ndrawable(long)"""
        return int.__wrap(__XGraphicsExposeEvent.ndrawable(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGraphicsExposeEvent.nsend_event(long,int)"""
        __XGraphicsExposeEvent.nsend_event(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def nwidth(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGraphicsExposeEvent.nwidth(long,int)"""
        __XGraphicsExposeEvent.nwidth(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XGraphicsExposeEvent(java.nio.ByteBuffer)"""
        val = __XGraphicsExposeEvent(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def count(self) -> int:
        """public int org.lwjgl.system.linux.XGraphicsExposeEvent.count()"""
        return int.__wrap(super(XGraphicsExposeEvent, self).count())

    @staticmethod
    @overload
    def nminor_code(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGraphicsExposeEvent.nminor_code(long,int)"""
        __XGraphicsExposeEvent.nminor_code(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XGraphicsExposeEvent.ndisplay(long)"""
        return int.__wrap(__XGraphicsExposeEvent.ndisplay(__long.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def nmajor_code(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XGraphicsExposeEvent.nmajor_code(long)"""
        return int.__wrap(__XGraphicsExposeEvent.nmajor_code(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nmajor_code(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGraphicsExposeEvent.nmajor_code(long,int)"""
        __XGraphicsExposeEvent.nmajor_code(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer org.lwjgl.system.linux.XGraphicsExposeEvent.create(long,int)"""
        return Buffer.__wrap(__XGraphicsExposeEvent.create(__long.valueOf(arg0), __int.valueOf(arg1)))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XGraphicsExposeEvent.type()"""
        return int.__wrap(super(XGraphicsExposeEvent, self).type())

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XGraphicsExposeEvent':
        """public static org.lwjgl.system.linux.XGraphicsExposeEvent org.lwjgl.system.linux.XGraphicsExposeEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XGraphicsExposeEvent.__wrap(__XGraphicsExposeEvent.malloc(arg0))

    @overload
    def minor_code(self, arg0: int) -> 'XGraphicsExposeEvent':
        """public org.lwjgl.system.linux.XGraphicsExposeEvent org.lwjgl.system.linux.XGraphicsExposeEvent.minor_code(int)"""
        return 'XGraphicsExposeEvent'.__wrap(super(__XGraphicsExposeEvent, self).minor_code(__int.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def width(self) -> int:
        """public int org.lwjgl.system.linux.XGraphicsExposeEvent.width()"""
        return int.__wrap(super(XGraphicsExposeEvent, self).width())

    @staticmethod
    @overload
    def nx(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGraphicsExposeEvent.nx(long,int)"""
        __XGraphicsExposeEvent.nx(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def nheight(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XGraphicsExposeEvent.nheight(long)"""
        return int.__wrap(__XGraphicsExposeEvent.nheight(__long.valueOf(arg0)))

    @overload
    def height(self) -> int:
        """public int org.lwjgl.system.linux.XGraphicsExposeEvent.height()"""
        return int.__wrap(super(XGraphicsExposeEvent, self).height())

    @staticmethod
    @overload
    def malloc() -> 'XGraphicsExposeEvent':
        """public static org.lwjgl.system.linux.XGraphicsExposeEvent org.lwjgl.system.linux.XGraphicsExposeEvent.malloc()"""
        return XGraphicsExposeEvent.__wrap(__XGraphicsExposeEvent.malloc())

    @overload
    def minor_code(self) -> int:
        """public int org.lwjgl.system.linux.XGraphicsExposeEvent.minor_code()"""
        return int.__wrap(super(XGraphicsExposeEvent, self).minor_code())

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer org.lwjgl.system.linux.XGraphicsExposeEvent.malloc(int)"""
        return Buffer.__wrap(__XGraphicsExposeEvent.malloc(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer org.lwjgl.system.linux.XGraphicsExposeEvent.calloc(int)"""
        return Buffer.__wrap(__XGraphicsExposeEvent.calloc(__int.valueOf(arg0)))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).address())

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XGraphicsExposeEvent.display()"""
        return int.__wrap(super(XGraphicsExposeEvent, self).display())

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer org.lwjgl.system.linux.XGraphicsExposeEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XGraphicsExposeEvent.malloc(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def mallocStack() -> 'XGraphicsExposeEvent':
        """public static org.lwjgl.system.linux.XGraphicsExposeEvent org.lwjgl.system.linux.XGraphicsExposeEvent.mallocStack()"""
        return XGraphicsExposeEvent.__wrap(__XGraphicsExposeEvent.mallocStack())

    @staticmethod
    @overload
    def nminor_code(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XGraphicsExposeEvent.nminor_code(long)"""
        return int.__wrap(__XGraphicsExposeEvent.nminor_code(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer org.lwjgl.system.linux.XGraphicsExposeEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XGraphicsExposeEvent.callocStack(__int.valueOf(arg0), arg1))

    @overload
    def count(self, arg0: int) -> 'XGraphicsExposeEvent':
        """public org.lwjgl.system.linux.XGraphicsExposeEvent org.lwjgl.system.linux.XGraphicsExposeEvent.count(int)"""
        return 'XGraphicsExposeEvent'.__wrap(super(__XGraphicsExposeEvent, self).count(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer org.lwjgl.system.linux.XGraphicsExposeEvent.create(int)"""
        return Buffer.__wrap(__XGraphicsExposeEvent.create(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XGraphicsExposeEvent':
        """public static org.lwjgl.system.linux.XGraphicsExposeEvent org.lwjgl.system.linux.XGraphicsExposeEvent.createSafe(long)"""
        return XGraphicsExposeEvent.__wrap(__XGraphicsExposeEvent.createSafe(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XGraphicsExposeEvent.validate(long)"""
        __XGraphicsExposeEvent.validate(__long.valueOf(arg0))

    @overload
    def drawable(self) -> int:
        """public long org.lwjgl.system.linux.XGraphicsExposeEvent.drawable()"""
        return int.__wrap(super(XGraphicsExposeEvent, self).drawable())

    @staticmethod
    @overload
    def ncount(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XGraphicsExposeEvent.ncount(long)"""
        return int.__wrap(__XGraphicsExposeEvent.ncount(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer org.lwjgl.system.linux.XGraphicsExposeEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XGraphicsExposeEvent.mallocStack(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def ndrawable(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGraphicsExposeEvent.ndrawable(long,long)"""
        __XGraphicsExposeEvent.ndrawable(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGraphicsExposeEvent.ndisplay(long,long)"""
        __XGraphicsExposeEvent.ndisplay(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def nwidth(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XGraphicsExposeEvent.nwidth(long)"""
        return int.__wrap(__XGraphicsExposeEvent.nwidth(__long.valueOf(arg0)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str.__wrap(super(pyglsystem.Pointer$Default, self).toString())

    @overload
    def drawable(self, arg0: int) -> 'XGraphicsExposeEvent':
        """public org.lwjgl.system.linux.XGraphicsExposeEvent org.lwjgl.system.linux.XGraphicsExposeEvent.drawable(long)"""
        return 'XGraphicsExposeEvent'.__wrap(super(__XGraphicsExposeEvent, self).drawable(__long.valueOf(arg0)))

    @overload
    def width(self, arg0: int) -> 'XGraphicsExposeEvent':
        """public org.lwjgl.system.linux.XGraphicsExposeEvent org.lwjgl.system.linux.XGraphicsExposeEvent.width(int)"""
        return 'XGraphicsExposeEvent'.__wrap(super(__XGraphicsExposeEvent, self).width(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer org.lwjgl.system.linux.XGraphicsExposeEvent.createSafe(long,int)"""
        return Buffer.__wrap(__XGraphicsExposeEvent.createSafe(__long.valueOf(arg0), __int.valueOf(arg1)))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @staticmethod
    @overload
    def ny(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XGraphicsExposeEvent.ny(long)"""
        return int.__wrap(__XGraphicsExposeEvent.ny(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGraphicsExposeEvent.ntype(long,int)"""
        __XGraphicsExposeEvent.ntype(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def y(self, arg0: int) -> 'XGraphicsExposeEvent':
        """public org.lwjgl.system.linux.XGraphicsExposeEvent org.lwjgl.system.linux.XGraphicsExposeEvent.y(int)"""
        return 'XGraphicsExposeEvent'.__wrap(super(__XGraphicsExposeEvent, self).y(__int.valueOf(arg0)))

    @overload
    def serial(self, arg0: int) -> 'XGraphicsExposeEvent':
        """public org.lwjgl.system.linux.XGraphicsExposeEvent org.lwjgl.system.linux.XGraphicsExposeEvent.serial(long)"""
        return 'XGraphicsExposeEvent'.__wrap(super(__XGraphicsExposeEvent, self).serial(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XGraphicsExposeEvent.nsend_event(long)"""
        return int.__wrap(__XGraphicsExposeEvent.nsend_event(__long.valueOf(arg0)))

    @overload
    def set(self, arg0: 'XGraphicsExposeEvent') -> 'XGraphicsExposeEvent':
        """public org.lwjgl.system.linux.XGraphicsExposeEvent org.lwjgl.system.linux.XGraphicsExposeEvent.set(org.lwjgl.system.linux.XGraphicsExposeEvent)"""
        return 'XGraphicsExposeEvent'.__wrap(super(__XGraphicsExposeEvent, self).set(arg0))

    @staticmethod
    @overload
    def calloc() -> 'XGraphicsExposeEvent':
        """public static org.lwjgl.system.linux.XGraphicsExposeEvent org.lwjgl.system.linux.XGraphicsExposeEvent.calloc()"""
        return XGraphicsExposeEvent.__wrap(__XGraphicsExposeEvent.calloc())

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XGraphicsExposeEvent':
        """public static org.lwjgl.system.linux.XGraphicsExposeEvent org.lwjgl.system.linux.XGraphicsExposeEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XGraphicsExposeEvent.__wrap(__XGraphicsExposeEvent.calloc(arg0))

    @overload
    def display(self, arg0: int) -> 'XGraphicsExposeEvent':
        """public org.lwjgl.system.linux.XGraphicsExposeEvent org.lwjgl.system.linux.XGraphicsExposeEvent.display(long)"""
        return 'XGraphicsExposeEvent'.__wrap(super(__XGraphicsExposeEvent, self).display(__long.valueOf(arg0)))

    @overload
    def height(self, arg0: int) -> 'XGraphicsExposeEvent':
        """public org.lwjgl.system.linux.XGraphicsExposeEvent org.lwjgl.system.linux.XGraphicsExposeEvent.height(int)"""
        return 'XGraphicsExposeEvent'.__wrap(super(__XGraphicsExposeEvent, self).height(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def ny(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGraphicsExposeEvent.ny(long,int)"""
        __XGraphicsExposeEvent.ny(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        __Struct.validate(__long.valueOf(arg0), __int.valueOf(arg1), __int.valueOf(arg2), arg3)

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer org.lwjgl.system.linux.XGraphicsExposeEvent.callocStack(int)"""
        return Buffer.__wrap(__XGraphicsExposeEvent.callocStack(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer org.lwjgl.system.linux.XGraphicsExposeEvent.mallocStack(int)"""
        return Buffer.__wrap(__XGraphicsExposeEvent.mallocStack(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XGraphicsExposeEvent.nserial(long)"""
        return int.__wrap(__XGraphicsExposeEvent.nserial(__long.valueOf(arg0)))

    @overload
    def type(self, arg0: int) -> 'XGraphicsExposeEvent':
        """public org.lwjgl.system.linux.XGraphicsExposeEvent org.lwjgl.system.linux.XGraphicsExposeEvent.type(int)"""
        return 'XGraphicsExposeEvent'.__wrap(super(__XGraphicsExposeEvent, self).type(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGraphicsExposeEvent.nserial(long,long)"""
        __XGraphicsExposeEvent.nserial(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XGraphicsExposeEvent':
        """public static org.lwjgl.system.linux.XGraphicsExposeEvent org.lwjgl.system.linux.XGraphicsExposeEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XGraphicsExposeEvent.__wrap(__XGraphicsExposeEvent.callocStack(arg0))

    @staticmethod
    @overload
    def ncount(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGraphicsExposeEvent.ncount(long,int)"""
        __XGraphicsExposeEvent.ncount(__long.valueOf(arg0), __int.valueOf(arg1)) 
 
 
# CLASS: org.lwjgl.system.linux.OpenHow
from pyquantum_helper import import_once as __import_once__
from builtins import str
from pyquantum_helper import override
import java.lang.Object as __object
import org.lwjgl.system.linux.OpenHow as __OpenHow
__OpenHow = __OpenHow
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import org.lwjgl.system.linux.OpenHow as __OpenHow_Buffer
__Buffer = __OpenHow_Buffer.Buffer
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
from builtins import int
 
class OpenHow(pyglsystem.__Struct, pyglsystem.Struct, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.OpenHow"""
 
    @staticmethod
    def __wrap(java_value: __OpenHow) -> 'OpenHow':
        return OpenHow(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __OpenHow):
        """
        Dynamic initializer for OpenHow.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def create() -> 'OpenHow':
        """public static org.lwjgl.system.linux.OpenHow org.lwjgl.system.linux.OpenHow.create()"""
        return OpenHow.__wrap(__OpenHow.create())

    @staticmethod
    @overload
    def nflags(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.OpenHow.nflags(long,long)"""
        __OpenHow.nflags(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.OpenHow$Buffer org.lwjgl.system.linux.OpenHow.create(long,int)"""
        return Buffer.__wrap(__OpenHow.create(__long.valueOf(arg0), __int.valueOf(arg1)))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).address())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def resolve(self, arg0: int) -> 'OpenHow':
        """public org.lwjgl.system.linux.OpenHow org.lwjgl.system.linux.OpenHow.resolve(long)"""
        return 'OpenHow'.__wrap(super(__OpenHow, self).resolve(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nflags(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.OpenHow.nflags(long)"""
        return int.__wrap(__OpenHow.nflags(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nmode(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.OpenHow.nmode(long)"""
        return int.__wrap(__OpenHow.nmode(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc() -> 'OpenHow':
        """public static org.lwjgl.system.linux.OpenHow org.lwjgl.system.linux.OpenHow.malloc()"""
        return OpenHow.__wrap(__OpenHow.malloc())

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool.__wrap(super(__pyglsystem.Struct, self).isNull(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'OpenHow':
        """public static org.lwjgl.system.linux.OpenHow org.lwjgl.system.linux.OpenHow.malloc(org.lwjgl.system.MemoryStack)"""
        return OpenHow.__wrap(__OpenHow.malloc(arg0))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @staticmethod
    @overload
    def nresolve(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.OpenHow.nresolve(long)"""
        return int.__wrap(__OpenHow.nresolve(__long.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.OpenHow.sizeof()"""
        return int.__wrap(super(OpenHow, self).sizeof())

    @staticmethod
    @overload
    def calloc() -> 'OpenHow':
        """public static org.lwjgl.system.linux.OpenHow org.lwjgl.system.linux.OpenHow.calloc()"""
        return OpenHow.__wrap(__OpenHow.calloc())

    @staticmethod
    @overload
    def nmode(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.OpenHow.nmode(long,long)"""
        __OpenHow.nmode(__long.valueOf(arg0), __long.valueOf(arg1))

    @overload
    def resolve(self) -> int:
        """public long org.lwjgl.system.linux.OpenHow.resolve()"""
        return int.__wrap(super(OpenHow, self).resolve())

    @overload
    def mode(self, arg0: int) -> 'OpenHow':
        """public org.lwjgl.system.linux.OpenHow org.lwjgl.system.linux.OpenHow.mode(long)"""
        return 'OpenHow'.__wrap(super(__OpenHow, self).mode(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.OpenHow$Buffer org.lwjgl.system.linux.OpenHow.create(int)"""
        return Buffer.__wrap(__OpenHow.create(__int.valueOf(arg0)))

    @overload
    def set(self, arg0: int, arg1: int, arg2: int) -> 'OpenHow':
        """public org.lwjgl.system.linux.OpenHow org.lwjgl.system.linux.OpenHow.set(long,long,long)"""
        return 'OpenHow'.__wrap(super(__OpenHow, self).set(__long.valueOf(arg0), __long.valueOf(arg1), __long.valueOf(arg2)))

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.OpenHow$Buffer org.lwjgl.system.linux.OpenHow.calloc(int)"""
        return Buffer.__wrap(__OpenHow.calloc(__int.valueOf(arg0)))

    @overload
    def set(self, arg0: 'OpenHow') -> 'OpenHow':
        """public org.lwjgl.system.linux.OpenHow org.lwjgl.system.linux.OpenHow.set(org.lwjgl.system.linux.OpenHow)"""
        return 'OpenHow'.__wrap(super(__OpenHow, self).set(arg0))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str.__wrap(super(pyglsystem.Pointer$Default, self).toString())

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.OpenHow$Buffer org.lwjgl.system.linux.OpenHow.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__OpenHow.calloc(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'OpenHow':
        """public static org.lwjgl.system.linux.OpenHow org.lwjgl.system.linux.OpenHow.calloc(org.lwjgl.system.MemoryStack)"""
        return OpenHow.__wrap(__OpenHow.calloc(arg0))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.OpenHow$Buffer org.lwjgl.system.linux.OpenHow.createSafe(long,int)"""
        return Buffer.__wrap(__OpenHow.createSafe(__long.valueOf(arg0), __int.valueOf(arg1)))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.OpenHow(java.nio.ByteBuffer)"""
        val = __OpenHow(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'OpenHow':
        """public static org.lwjgl.system.linux.OpenHow org.lwjgl.system.linux.OpenHow.createSafe(long)"""
        return OpenHow.__wrap(__OpenHow.createSafe(__long.valueOf(arg0)))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def mode(self) -> int:
        """public long org.lwjgl.system.linux.OpenHow.mode()"""
        return int.__wrap(super(OpenHow, self).mode())

    @overload
    def flags(self, arg0: int) -> 'OpenHow':
        """public org.lwjgl.system.linux.OpenHow org.lwjgl.system.linux.OpenHow.flags(long)"""
        return 'OpenHow'.__wrap(super(__OpenHow, self).flags(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.OpenHow$Buffer org.lwjgl.system.linux.OpenHow.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__OpenHow.malloc(__int.valueOf(arg0), arg1))

    @overload
    def flags(self) -> int:
        """public long org.lwjgl.system.linux.OpenHow.flags()"""
        return int.__wrap(super(OpenHow, self).flags())

    @staticmethod
    @overload
    def create(arg0: int) -> 'OpenHow':
        """public static org.lwjgl.system.linux.OpenHow org.lwjgl.system.linux.OpenHow.create(long)"""
        return OpenHow.__wrap(__OpenHow.create(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.OpenHow$Buffer org.lwjgl.system.linux.OpenHow.malloc(int)"""
        return Buffer.__wrap(__OpenHow.malloc(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        __Struct.validate(__long.valueOf(arg0), __int.valueOf(arg1), __int.valueOf(arg2), arg3)

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def nresolve(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.OpenHow.nresolve(long,long)"""
        __OpenHow.nresolve(__long.valueOf(arg0), __long.valueOf(arg1)) 
 
 
# CLASS: org.lwjgl.system.linux.StatxTimestamp$Buffer
from pyquantum_helper import import_once as __import_once__
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import java.util.stream.Stream as __Stream
__Stream = __Stream
import org.lwjgl.system.StructBuffer as __StructBuffer
__StructBuffer = __StructBuffer
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.linux.StatxTimestamp as __StatxTimestamp_Buffer
__Buffer = __StatxTimestamp_Buffer.Buffer
import org.lwjgl.system.CustomBuffer as __CustomBuffer
__CustomBuffer = __CustomBuffer
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.util.Iterator as __Iterator
__Iterator = __Iterator
import java.lang.Object as __object
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.util.Iterator as Iterator
import java.util.Spliterator as __Spliterator
__Spliterator = __Spliterator
import java.lang.Long as __long
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import java.util.stream.Stream as Stream
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import int
 
class Buffer(pyglsystem.__StructBuffer, pyglsystem.StructBuffer, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.StatxTimestamp.Buffer"""
 
    @staticmethod
    def __wrap(java_value: __Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.StatxTimestamp$Buffer(java.nio.ByteBuffer)"""
        val = __Buffer(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(__pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0), arg1))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int.__wrap(super(__pyglsystem.CustomBuffer, self).address(__int.valueOf(arg0)))

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(__int.valueOf(arg0), arg1))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int.__wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @overload
    def tv_sec(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.StatxTimestamp$Buffer org.lwjgl.system.linux.StatxTimestamp$Buffer.tv_sec(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).tv_sec(__long.valueOf(arg0)))

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(arg0))

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def tv_sec(self) -> int:
        """public long org.lwjgl.system.linux.StatxTimestamp$Buffer.tv_sec()"""
        return int.__wrap(super(Buffer, self).tv_sec())

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool.__wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @overload
    def tv_nsec(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.StatxTimestamp$Buffer org.lwjgl.system.linux.StatxTimestamp$Buffer.tv_nsec(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).tv_nsec(__int.valueOf(arg0)))

    @overload
    def tv_nsec(self) -> int:
        """public int org.lwjgl.system.linux.StatxTimestamp$Buffer.tv_nsec()"""
        return int.__wrap(super(Buffer, self).tv_nsec())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).position(__int.valueOf(arg0)))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0)))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).clear())

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(__int.valueOf(arg0), arg1))

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).slice())

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).compact())

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'.__wrap(super(pyglsystem.StructBuffer, self).get())

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.StatxTimestamp$Buffer(long,int)"""
        val = __Buffer(__long.valueOf(arg0), __int.valueOf(arg1))
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).limit(__int.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'.__wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str.__wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(arg0))

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).stream())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'.__wrap(super(pyglsystem.StructBuffer, self).iterator())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).slice(__int.valueOf(arg0), __int.valueOf(arg1))) 
 
 
# CLASS: org.lwjgl.system.linux.XSelectionClearEvent$Buffer
from pyquantum_helper import import_once as __import_once__
import java.lang.Boolean as __boolean
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import java.util.stream.Stream as __Stream
__Stream = __Stream
import org.lwjgl.system.StructBuffer as __StructBuffer
__StructBuffer = __StructBuffer
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.CustomBuffer as __CustomBuffer
__CustomBuffer = __CustomBuffer
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.util.Iterator as __Iterator
__Iterator = __Iterator
import java.lang.Object as __object
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.util.Iterator as Iterator
import java.util.Spliterator as __Spliterator
__Spliterator = __Spliterator
import java.lang.Long as __long
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import org.lwjgl.system.linux.XSelectionClearEvent as __XSelectionClearEvent_Buffer
__Buffer = __XSelectionClearEvent_Buffer.Buffer
import java.util.stream.Stream as Stream
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import int
 
class Buffer(pyglsystem.__StructBuffer, pyglsystem.StructBuffer, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XSelectionClearEvent.Buffer"""
 
    @staticmethod
    def __wrap(java_value: __Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XSelectionClearEvent$Buffer.type()"""
        return int.__wrap(super(Buffer, self).type())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XSelectionClearEvent$Buffer(java.nio.ByteBuffer)"""
        val = __Buffer(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(__pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0), arg1))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int.__wrap(super(__pyglsystem.CustomBuffer, self).address(__int.valueOf(arg0)))

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(__int.valueOf(arg0), arg1))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int.__wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(arg0))

    @overload
    def selection(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSelectionClearEvent$Buffer org.lwjgl.system.linux.XSelectionClearEvent$Buffer.selection(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).selection(__long.valueOf(arg0)))

    @overload
    def window(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSelectionClearEvent$Buffer org.lwjgl.system.linux.XSelectionClearEvent$Buffer.window(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).window(__long.valueOf(arg0)))

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSelectionClearEvent$Buffer org.lwjgl.system.linux.XSelectionClearEvent$Buffer.display(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).display(__long.valueOf(arg0)))

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool.__wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).position(__int.valueOf(arg0)))

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XSelectionClearEvent$Buffer(long,int)"""
        val = __Buffer(__long.valueOf(arg0), __int.valueOf(arg1))
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0)))

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionClearEvent$Buffer.display()"""
        return int.__wrap(super(Buffer, self).display())

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).clear())

    @overload
    def time(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSelectionClearEvent$Buffer org.lwjgl.system.linux.XSelectionClearEvent$Buffer.time(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).time(__long.valueOf(arg0)))

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(__int.valueOf(arg0), arg1))

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XSelectionClearEvent$Buffer org.lwjgl.system.linux.XSelectionClearEvent$Buffer.send_event(boolean)"""
        return 'Buffer'.__wrap(super(__Buffer, self).send_event(__boolean.valueOf(arg0)))

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).slice())

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSelectionClearEvent$Buffer org.lwjgl.system.linux.XSelectionClearEvent$Buffer.type(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).type(__int.valueOf(arg0)))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionClearEvent$Buffer.serial()"""
        return int.__wrap(super(Buffer, self).serial())

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XSelectionClearEvent$Buffer.send_event()"""
        return bool.__wrap(super(Buffer, self).send_event())

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'.__wrap(super(pyglsystem.StructBuffer, self).get())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).limit(__int.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'.__wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str.__wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def time(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionClearEvent$Buffer.time()"""
        return int.__wrap(super(Buffer, self).time())

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionClearEvent$Buffer.window()"""
        return int.__wrap(super(Buffer, self).window())

    @overload
    def selection(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionClearEvent$Buffer.selection()"""
        return int.__wrap(super(Buffer, self).selection())

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(arg0))

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).stream())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSelectionClearEvent$Buffer org.lwjgl.system.linux.XSelectionClearEvent$Buffer.serial(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).serial(__long.valueOf(arg0)))

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'.__wrap(super(pyglsystem.StructBuffer, self).iterator())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).slice(__int.valueOf(arg0), __int.valueOf(arg1))) 
 
 
# CLASS: org.lwjgl.system.linux.XGenericEventCookie$Buffer
from pyquantum_helper import import_once as __import_once__
import java.lang.Boolean as __boolean
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import java.nio.ByteBuffer as __ByteBuffer
__ByteBuffer = __ByteBuffer
import java.util.stream.Stream as __Stream
__Stream = __Stream
import org.lwjgl.system.StructBuffer as __StructBuffer
__StructBuffer = __StructBuffer
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.CustomBuffer as __CustomBuffer
__CustomBuffer = __CustomBuffer
from builtins import bool
import org.lwjgl.system.linux.XGenericEventCookie as __XGenericEventCookie_Buffer
__Buffer = __XGenericEventCookie_Buffer.Buffer
from builtins import str
from pyquantum_helper import override
import java.util.Iterator as __Iterator
__Iterator = __Iterator
import java.lang.Object as __object
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.util.Iterator as Iterator
import java.util.Spliterator as __Spliterator
__Spliterator = __Spliterator
import java.lang.Long as __long
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import java.util.stream.Stream as Stream
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import int
 
class Buffer(pyglsystem.__StructBuffer, pyglsystem.StructBuffer, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XGenericEventCookie.Buffer"""
 
    @staticmethod
    def __wrap(java_value: __Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def cookie(self) -> int:
        """public int org.lwjgl.system.linux.XGenericEventCookie$Buffer.cookie()"""
        return int.__wrap(super(Buffer, self).cookie())

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(__pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def data(self, arg0: 'ByteBuffer') -> 'Buffer':
        """public org.lwjgl.system.linux.XGenericEventCookie$Buffer org.lwjgl.system.linux.XGenericEventCookie$Buffer.data(java.nio.ByteBuffer)"""
        return 'Buffer'.__wrap(super(__Buffer, self).data(arg0))

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0), arg1))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int.__wrap(super(__pyglsystem.CustomBuffer, self).address(__int.valueOf(arg0)))

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(__int.valueOf(arg0), arg1))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int.__wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @overload
    def evtype(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XGenericEventCookie$Buffer org.lwjgl.system.linux.XGenericEventCookie$Buffer.evtype(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).evtype(__int.valueOf(arg0)))

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(arg0))

    @overload
    def data(self, arg0: int) -> 'ByteBuffer':
        """public java.nio.ByteBuffer org.lwjgl.system.linux.XGenericEventCookie$Buffer.data(int)"""
        return 'ByteBuffer'.__wrap(super(__Buffer, self).data(__int.valueOf(arg0)))

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XGenericEventCookie$Buffer org.lwjgl.system.linux.XGenericEventCookie$Buffer.serial(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).serial(__long.valueOf(arg0)))

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool.__wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XGenericEventCookie$Buffer.type()"""
        return int.__wrap(super(Buffer, self).type())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XGenericEventCookie$Buffer.display()"""
        return int.__wrap(super(Buffer, self).display())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).position(__int.valueOf(arg0)))

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XGenericEventCookie$Buffer(long,int)"""
        val = __Buffer(__long.valueOf(arg0), __int.valueOf(arg1))
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XGenericEventCookie$Buffer.serial()"""
        return int.__wrap(super(Buffer, self).serial())

    @overload
    def cookie(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XGenericEventCookie$Buffer org.lwjgl.system.linux.XGenericEventCookie$Buffer.cookie(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).cookie(__int.valueOf(arg0)))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0)))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).clear())

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(__int.valueOf(arg0), arg1))

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address())

    @overload
    def extension(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XGenericEventCookie$Buffer org.lwjgl.system.linux.XGenericEventCookie$Buffer.extension(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).extension(__int.valueOf(arg0)))

    @overload
    def evtype(self) -> int:
        """public int org.lwjgl.system.linux.XGenericEventCookie$Buffer.evtype()"""
        return int.__wrap(super(Buffer, self).evtype())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).slice())

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XGenericEventCookie$Buffer.send_event()"""
        return bool.__wrap(super(Buffer, self).send_event())

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'.__wrap(super(pyglsystem.StructBuffer, self).get())

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XGenericEventCookie$Buffer org.lwjgl.system.linux.XGenericEventCookie$Buffer.send_event(boolean)"""
        return 'Buffer'.__wrap(super(__Buffer, self).send_event(__boolean.valueOf(arg0)))

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).limit(__int.valueOf(arg0)))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XGenericEventCookie$Buffer(java.nio.ByteBuffer)"""
        val = __Buffer(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XGenericEventCookie$Buffer org.lwjgl.system.linux.XGenericEventCookie$Buffer.type(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).type(__int.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'.__wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str.__wrap(super(pyglsystem.CustomBuffer, self).toString())

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XGenericEventCookie$Buffer org.lwjgl.system.linux.XGenericEventCookie$Buffer.display(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).display(__long.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(arg0))

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).stream())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @overload
    def extension(self) -> int:
        """public int org.lwjgl.system.linux.XGenericEventCookie$Buffer.extension()"""
        return int.__wrap(super(Buffer, self).extension())

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'.__wrap(super(pyglsystem.StructBuffer, self).iterator())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).slice(__int.valueOf(arg0), __int.valueOf(arg1))) 
 
 
# CLASS: org.lwjgl.system.linux.XEvent$Buffer
from pyquantum_helper import import_once as __import_once__
import org.lwjgl.system.linux.XNoExposeEvent as __XNoExposeEvent
__XNoExposeEvent = __XNoExposeEvent
import org.lwjgl.system.linux.XKeymapEvent as __XKeymapEvent
__XKeymapEvent = __XKeymapEvent
import org.lwjgl.system.linux.XKeyEvent as __XKeyEvent
__XKeyEvent = __XKeyEvent
import org.lwjgl.system.linux.XAnyEvent as __XAnyEvent
__XAnyEvent = __XAnyEvent
import org.lwjgl.system.linux.XCirculateEvent as __XCirculateEvent
__XCirculateEvent = __XCirculateEvent
import java.util.stream.Stream as __Stream
__Stream = __Stream
import org.lwjgl.system.linux.XFocusChangeEvent as __XFocusChangeEvent
__XFocusChangeEvent = __XFocusChangeEvent
import org.lwjgl.system.linux.XUnmapEvent as __XUnmapEvent
__XUnmapEvent = __XUnmapEvent
import java.util.Spliterator as Spliterator
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.linux.XCrossingEvent as __XCrossingEvent
__XCrossingEvent = __XCrossingEvent
import org.lwjgl.system.linux.XVisibilityEvent as __XVisibilityEvent
__XVisibilityEvent = __XVisibilityEvent
import org.lwjgl.system.linux.XGraphicsExposeEvent as __XGraphicsExposeEvent
__XGraphicsExposeEvent = __XGraphicsExposeEvent
import org.lwjgl.system.linux.XExposeEvent as __XExposeEvent
__XExposeEvent = __XExposeEvent
from builtins import bool
import org.lwjgl.system.linux.XMapEvent as __XMapEvent
__XMapEvent = __XMapEvent
import org.lwjgl.system.linux.XMotionEvent as __XMotionEvent
__XMotionEvent = __XMotionEvent
import org.lwjgl.system.linux.XDestroyWindowEvent as __XDestroyWindowEvent
__XDestroyWindowEvent = __XDestroyWindowEvent
import org.lwjgl.system.linux.XSelectionEvent as __XSelectionEvent
__XSelectionEvent = __XSelectionEvent
import org.lwjgl.system.linux.XMapRequestEvent as __XMapRequestEvent
__XMapRequestEvent = __XMapRequestEvent
import org.lwjgl.system.linux.XGenericEvent as __XGenericEvent
__XGenericEvent = __XGenericEvent
import org.lwjgl.system.linux.XGravityEvent as __XGravityEvent
__XGravityEvent = __XGravityEvent
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import org.lwjgl.system.linux.XConfigureRequestEvent as __XConfigureRequestEvent
__XConfigureRequestEvent = __XConfigureRequestEvent
import java.lang.Object as __Object
__Object = __Object
import org.lwjgl.system.linux.XSelectionClearEvent as __XSelectionClearEvent
__XSelectionClearEvent = __XSelectionClearEvent
import org.lwjgl.system.linux.XGenericEventCookie as __XGenericEventCookie
__XGenericEventCookie = __XGenericEventCookie
from builtins import int
import org.lwjgl.system.linux.XCreateWindowEvent as __XCreateWindowEvent
__XCreateWindowEvent = __XCreateWindowEvent
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import org.lwjgl.system.linux.XMappingEvent as __XMappingEvent
__XMappingEvent = __XMappingEvent
import org.lwjgl.system.StructBuffer as __StructBuffer
__StructBuffer = __StructBuffer
import java.util.function.Consumer as Consumer
import org.lwjgl.system.linux.XReparentEvent as __XReparentEvent
__XReparentEvent = __XReparentEvent
import org.lwjgl.system.CustomBuffer as __CustomBuffer
__CustomBuffer = __CustomBuffer
import org.lwjgl.system.linux.XEvent as __XEvent_Buffer
__Buffer = __XEvent_Buffer.Buffer
import org.lwjgl.system.linux.XPropertyEvent as __XPropertyEvent
__XPropertyEvent = __XPropertyEvent
from builtins import str
from pyquantum_helper import override
import org.lwjgl.system.linux.XColormapEvent as __XColormapEvent
__XColormapEvent = __XColormapEvent
import java.util.Iterator as __Iterator
__Iterator = __Iterator
import java.lang.Object as __object
import org.lwjgl.system.linux.XButtonEvent as __XButtonEvent
__XButtonEvent = __XButtonEvent
import org.lwjgl.system.linux.XCirculateRequestEvent as __XCirculateRequestEvent
__XCirculateRequestEvent = __XCirculateRequestEvent
import java.util.Iterator as Iterator
import java.util.Spliterator as __Spliterator
__Spliterator = __Spliterator
import org.lwjgl.system.linux.XResizeRequestEvent as __XResizeRequestEvent
__XResizeRequestEvent = __XResizeRequestEvent
import java.lang.Long as __long
import org.lwjgl.system.linux.XSelectionRequestEvent as __XSelectionRequestEvent
__XSelectionRequestEvent = __XSelectionRequestEvent
import org.lwjgl.system.linux.XClientMessageEvent as __XClientMessageEvent
__XClientMessageEvent = __XClientMessageEvent
import org.lwjgl.system.linux.XErrorEvent as __XErrorEvent
__XErrorEvent = __XErrorEvent
import java.util.stream.Stream as Stream
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
import org.lwjgl.system.linux.XConfigureEvent as __XConfigureEvent
__XConfigureEvent = __XConfigureEvent
 
class Buffer(pyglsystem.__StructBuffer, pyglsystem.StructBuffer, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XEvent.Buffer"""
 
    @staticmethod
    def __wrap(java_value: __Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def xgravity(self) -> 'XGravityEvent':
        """public org.lwjgl.system.linux.XGravityEvent org.lwjgl.system.linux.XEvent$Buffer.xgravity()"""
        return 'XGravityEvent'.__wrap(super(Buffer, self).xgravity())

    @overload
    def xgeneric(self) -> 'XGenericEvent':
        """public org.lwjgl.system.linux.XGenericEvent org.lwjgl.system.linux.XEvent$Buffer.xgeneric()"""
        return 'XGenericEvent'.__wrap(super(Buffer, self).xgeneric())

    @overload
    def xkey(self) -> 'XKeyEvent':
        """public org.lwjgl.system.linux.XKeyEvent org.lwjgl.system.linux.XEvent$Buffer.xkey()"""
        return 'XKeyEvent'.__wrap(super(Buffer, self).xkey())

    @overload
    def xfocus(self) -> 'XFocusChangeEvent':
        """public org.lwjgl.system.linux.XFocusChangeEvent org.lwjgl.system.linux.XEvent$Buffer.xfocus()"""
        return 'XFocusChangeEvent'.__wrap(super(Buffer, self).xfocus())

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(__pyglsystem.StructBuffer, self).forEach(arg0)

    @overload
    def xconfigurerequest(self) -> 'XConfigureRequestEvent':
        """public org.lwjgl.system.linux.XConfigureRequestEvent org.lwjgl.system.linux.XEvent$Buffer.xconfigurerequest()"""
        return 'XConfigureRequestEvent'.__wrap(super(Buffer, self).xconfigurerequest())

    @overload
    def xexpose(self) -> 'XExposeEvent':
        """public org.lwjgl.system.linux.XExposeEvent org.lwjgl.system.linux.XEvent$Buffer.xexpose()"""
        return 'XExposeEvent'.__wrap(super(Buffer, self).xexpose())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XEvent$Buffer.type()"""
        return int.__wrap(super(Buffer, self).type())

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0), arg1))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address0())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XEvent$Buffer(java.nio.ByteBuffer)"""
        val = __Buffer(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def xclient(self) -> 'XClientMessageEvent':
        """public org.lwjgl.system.linux.XClientMessageEvent org.lwjgl.system.linux.XEvent$Buffer.xclient()"""
        return 'XClientMessageEvent'.__wrap(super(Buffer, self).xclient())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def xmotion(self) -> 'XMotionEvent':
        """public org.lwjgl.system.linux.XMotionEvent org.lwjgl.system.linux.XEvent$Buffer.xmotion()"""
        return 'XMotionEvent'.__wrap(super(Buffer, self).xmotion())

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int.__wrap(super(__pyglsystem.CustomBuffer, self).address(__int.valueOf(arg0)))

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(__int.valueOf(arg0), arg1))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int.__wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @overload
    def xmaprequest(self) -> 'XMapRequestEvent':
        """public org.lwjgl.system.linux.XMapRequestEvent org.lwjgl.system.linux.XEvent$Buffer.xmaprequest()"""
        return 'XMapRequestEvent'.__wrap(super(Buffer, self).xmaprequest())

    @overload
    def xkeymap(self) -> 'XKeymapEvent':
        """public org.lwjgl.system.linux.XKeymapEvent org.lwjgl.system.linux.XEvent$Buffer.xkeymap()"""
        return 'XKeymapEvent'.__wrap(super(Buffer, self).xkeymap())

    @overload
    def xcirculaterequest(self) -> 'XCirculateRequestEvent':
        """public org.lwjgl.system.linux.XCirculateRequestEvent org.lwjgl.system.linux.XEvent$Buffer.xcirculaterequest()"""
        return 'XCirculateRequestEvent'.__wrap(super(Buffer, self).xcirculaterequest())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(arg0))

    @overload
    def xvisibility(self) -> 'XVisibilityEvent':
        """public org.lwjgl.system.linux.XVisibilityEvent org.lwjgl.system.linux.XEvent$Buffer.xvisibility()"""
        return 'XVisibilityEvent'.__wrap(super(Buffer, self).xvisibility())

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XEvent$Buffer(long,int)"""
        val = __Buffer(__long.valueOf(arg0), __int.valueOf(arg1))
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def xcirculate(self) -> 'XCirculateEvent':
        """public org.lwjgl.system.linux.XCirculateEvent org.lwjgl.system.linux.XEvent$Buffer.xcirculate()"""
        return 'XCirculateEvent'.__wrap(super(Buffer, self).xcirculate())

    @overload
    def xmapping(self) -> 'XMappingEvent':
        """public org.lwjgl.system.linux.XMappingEvent org.lwjgl.system.linux.XEvent$Buffer.xmapping()"""
        return 'XMappingEvent'.__wrap(super(Buffer, self).xmapping())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @overload
    def xnoexpose(self) -> 'XNoExposeEvent':
        """public org.lwjgl.system.linux.XNoExposeEvent org.lwjgl.system.linux.XEvent$Buffer.xnoexpose()"""
        return 'XNoExposeEvent'.__wrap(super(Buffer, self).xnoexpose())

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def xmap(self) -> 'XMapEvent':
        """public org.lwjgl.system.linux.XMapEvent org.lwjgl.system.linux.XEvent$Buffer.xmap()"""
        return 'XMapEvent'.__wrap(super(Buffer, self).xmap())

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool.__wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @overload
    def xbutton(self) -> 'XButtonEvent':
        """public org.lwjgl.system.linux.XButtonEvent org.lwjgl.system.linux.XEvent$Buffer.xbutton()"""
        return 'XButtonEvent'.__wrap(super(Buffer, self).xbutton())

    @overload
    def xcrossing(self) -> 'XCrossingEvent':
        """public org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XEvent$Buffer.xcrossing()"""
        return 'XCrossingEvent'.__wrap(super(Buffer, self).xcrossing())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def xcreatewindow(self) -> 'XCreateWindowEvent':
        """public org.lwjgl.system.linux.XCreateWindowEvent org.lwjgl.system.linux.XEvent$Buffer.xcreatewindow()"""
        return 'XCreateWindowEvent'.__wrap(super(Buffer, self).xcreatewindow())

    @overload
    def xresizerequest(self) -> 'XResizeRequestEvent':
        """public org.lwjgl.system.linux.XResizeRequestEvent org.lwjgl.system.linux.XEvent$Buffer.xresizerequest()"""
        return 'XResizeRequestEvent'.__wrap(super(Buffer, self).xresizerequest())

    @overload
    def xcookie(self) -> 'XGenericEventCookie':
        """public org.lwjgl.system.linux.XGenericEventCookie org.lwjgl.system.linux.XEvent$Buffer.xcookie()"""
        return 'XGenericEventCookie'.__wrap(super(Buffer, self).xcookie())

    @overload
    def xselectionrequest(self) -> 'XSelectionRequestEvent':
        """public org.lwjgl.system.linux.XSelectionRequestEvent org.lwjgl.system.linux.XEvent$Buffer.xselectionrequest()"""
        return 'XSelectionRequestEvent'.__wrap(super(Buffer, self).xselectionrequest())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).position(__int.valueOf(arg0)))

    @overload
    def xany(self) -> 'XAnyEvent':
        """public org.lwjgl.system.linux.XAnyEvent org.lwjgl.system.linux.XEvent$Buffer.xany()"""
        return 'XAnyEvent'.__wrap(super(Buffer, self).xany())

    @overload
    def xcolormap(self) -> 'XColormapEvent':
        """public org.lwjgl.system.linux.XColormapEvent org.lwjgl.system.linux.XEvent$Buffer.xcolormap()"""
        return 'XColormapEvent'.__wrap(super(Buffer, self).xcolormap())

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0)))

    @overload
    def xreparent(self) -> 'XReparentEvent':
        """public org.lwjgl.system.linux.XReparentEvent org.lwjgl.system.linux.XEvent$Buffer.xreparent()"""
        return 'XReparentEvent'.__wrap(super(Buffer, self).xreparent())

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).clear())

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(__int.valueOf(arg0), arg1))

    @overload
    def xunmap(self) -> 'XUnmapEvent':
        """public org.lwjgl.system.linux.XUnmapEvent org.lwjgl.system.linux.XEvent$Buffer.xunmap()"""
        return 'XUnmapEvent'.__wrap(super(Buffer, self).xunmap())

    @overload
    def xproperty(self) -> 'XPropertyEvent':
        """public org.lwjgl.system.linux.XPropertyEvent org.lwjgl.system.linux.XEvent$Buffer.xproperty()"""
        return 'XPropertyEvent'.__wrap(super(Buffer, self).xproperty())

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @overload
    def xselectionclear(self) -> 'XSelectionClearEvent':
        """public org.lwjgl.system.linux.XSelectionClearEvent org.lwjgl.system.linux.XEvent$Buffer.xselectionclear()"""
        return 'XSelectionClearEvent'.__wrap(super(Buffer, self).xselectionclear())

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).slice())

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def xgraphicsexpose(self) -> 'XGraphicsExposeEvent':
        """public org.lwjgl.system.linux.XGraphicsExposeEvent org.lwjgl.system.linux.XEvent$Buffer.xgraphicsexpose()"""
        return 'XGraphicsExposeEvent'.__wrap(super(Buffer, self).xgraphicsexpose())

    @overload
    def xselection(self) -> 'XSelectionEvent':
        """public org.lwjgl.system.linux.XSelectionEvent org.lwjgl.system.linux.XEvent$Buffer.xselection()"""
        return 'XSelectionEvent'.__wrap(super(Buffer, self).xselection())

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'.__wrap(super(pyglsystem.StructBuffer, self).get())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).limit(__int.valueOf(arg0)))

    @overload
    def xerror(self) -> 'XErrorEvent':
        """public org.lwjgl.system.linux.XErrorEvent org.lwjgl.system.linux.XEvent$Buffer.xerror()"""
        return 'XErrorEvent'.__wrap(super(Buffer, self).xerror())

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'.__wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str.__wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(arg0))

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).stream())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'.__wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def xconfigure(self) -> 'XConfigureEvent':
        """public org.lwjgl.system.linux.XConfigureEvent org.lwjgl.system.linux.XEvent$Buffer.xconfigure()"""
        return 'XConfigureEvent'.__wrap(super(Buffer, self).xconfigure())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).slice(__int.valueOf(arg0), __int.valueOf(arg1)))

    @overload
    def xdestroywindow(self) -> 'XDestroyWindowEvent':
        """public org.lwjgl.system.linux.XDestroyWindowEvent org.lwjgl.system.linux.XEvent$Buffer.xdestroywindow()"""
        return 'XDestroyWindowEvent'.__wrap(super(Buffer, self).xdestroywindow()) 
 
 
# CLASS: org.lwjgl.system.linux.XMapRequestEvent
from pyquantum_helper import import_once as __import_once__
import org.lwjgl.system.linux.XMapRequestEvent as __XMapRequestEvent_Buffer
__Buffer = __XMapRequestEvent_Buffer.Buffer
from builtins import str
import java.lang.Boolean as __boolean
from pyquantum_helper import override
import java.lang.Object as __object
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import org.lwjgl.system.linux.XMapRequestEvent as __XMapRequestEvent
__XMapRequestEvent = __XMapRequestEvent
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
from builtins import int
 
class XMapRequestEvent(pyglsystem.__Struct, pyglsystem.Struct, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XMapRequestEvent"""
 
    @staticmethod
    def __wrap(java_value: __XMapRequestEvent) -> 'XMapRequestEvent':
        return XMapRequestEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __XMapRequestEvent):
        """
        Dynamic initializer for XMapRequestEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def nwindow(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMapRequestEvent.nwindow(long,long)"""
        __XMapRequestEvent.nwindow(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XMapRequestEvent$Buffer org.lwjgl.system.linux.XMapRequestEvent.malloc(int)"""
        return Buffer.__wrap(__XMapRequestEvent.malloc(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XMapRequestEvent.nserial(long)"""
        return int.__wrap(__XMapRequestEvent.nserial(__long.valueOf(arg0)))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool.__wrap(super(__pyglsystem.Struct, self).isNull(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMapRequestEvent.nserial(long,long)"""
        __XMapRequestEvent.nserial(__long.valueOf(arg0), __long.valueOf(arg1))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @staticmethod
    @overload
    def callocStack() -> 'XMapRequestEvent':
        """public static org.lwjgl.system.linux.XMapRequestEvent org.lwjgl.system.linux.XMapRequestEvent.callocStack()"""
        return XMapRequestEvent.__wrap(__XMapRequestEvent.callocStack())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XMapRequestEvent(java.nio.ByteBuffer)"""
        val = __XMapRequestEvent(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def type(self, arg0: int) -> 'XMapRequestEvent':
        """public org.lwjgl.system.linux.XMapRequestEvent org.lwjgl.system.linux.XMapRequestEvent.type(int)"""
        return 'XMapRequestEvent'.__wrap(super(__XMapRequestEvent, self).type(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XMapRequestEvent':
        """public static org.lwjgl.system.linux.XMapRequestEvent org.lwjgl.system.linux.XMapRequestEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XMapRequestEvent.__wrap(__XMapRequestEvent.calloc(arg0))

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XMapRequestEvent':
        """public static org.lwjgl.system.linux.XMapRequestEvent org.lwjgl.system.linux.XMapRequestEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XMapRequestEvent.__wrap(__XMapRequestEvent.mallocStack(arg0))

    @overload
    def parent(self) -> int:
        """public long org.lwjgl.system.linux.XMapRequestEvent.parent()"""
        return int.__wrap(super(XMapRequestEvent, self).parent())

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XMapRequestEvent$Buffer org.lwjgl.system.linux.XMapRequestEvent.createSafe(long,int)"""
        return Buffer.__wrap(__XMapRequestEvent.createSafe(__long.valueOf(arg0), __int.valueOf(arg1)))

    @staticmethod
    @overload
    def mallocStack() -> 'XMapRequestEvent':
        """public static org.lwjgl.system.linux.XMapRequestEvent org.lwjgl.system.linux.XMapRequestEvent.mallocStack()"""
        return XMapRequestEvent.__wrap(__XMapRequestEvent.mallocStack())

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XMapRequestEvent.window()"""
        return int.__wrap(super(XMapRequestEvent, self).window())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @overload
    def set(self, arg0: 'XMapRequestEvent') -> 'XMapRequestEvent':
        """public org.lwjgl.system.linux.XMapRequestEvent org.lwjgl.system.linux.XMapRequestEvent.set(org.lwjgl.system.linux.XMapRequestEvent)"""
        return 'XMapRequestEvent'.__wrap(super(__XMapRequestEvent, self).set(arg0))

    @staticmethod
    @overload
    def nwindow(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XMapRequestEvent.nwindow(long)"""
        return int.__wrap(__XMapRequestEvent.nwindow(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def create() -> 'XMapRequestEvent':
        """public static org.lwjgl.system.linux.XMapRequestEvent org.lwjgl.system.linux.XMapRequestEvent.create()"""
        return XMapRequestEvent.__wrap(__XMapRequestEvent.create())

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def parent(self, arg0: int) -> 'XMapRequestEvent':
        """public org.lwjgl.system.linux.XMapRequestEvent org.lwjgl.system.linux.XMapRequestEvent.parent(long)"""
        return 'XMapRequestEvent'.__wrap(super(__XMapRequestEvent, self).parent(__long.valueOf(arg0)))

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XMapRequestEvent.display()"""
        return int.__wrap(super(XMapRequestEvent, self).display())

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XMapRequestEvent$Buffer org.lwjgl.system.linux.XMapRequestEvent.callocStack(int)"""
        return Buffer.__wrap(__XMapRequestEvent.callocStack(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XMapRequestEvent':
        """public static org.lwjgl.system.linux.XMapRequestEvent org.lwjgl.system.linux.XMapRequestEvent.createSafe(long)"""
        return XMapRequestEvent.__wrap(__XMapRequestEvent.createSafe(__long.valueOf(arg0)))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XMapRequestEvent.sizeof()"""
        return int.__wrap(super(XMapRequestEvent, self).sizeof())

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XMapRequestEvent':
        """public static org.lwjgl.system.linux.XMapRequestEvent org.lwjgl.system.linux.XMapRequestEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XMapRequestEvent.__wrap(__XMapRequestEvent.malloc(arg0))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XMapRequestEvent.send_event()"""
        return bool.__wrap(super(XMapRequestEvent, self).send_event())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XMapRequestEvent.serial()"""
        return int.__wrap(super(XMapRequestEvent, self).serial())

    @overload
    def serial(self, arg0: int) -> 'XMapRequestEvent':
        """public org.lwjgl.system.linux.XMapRequestEvent org.lwjgl.system.linux.XMapRequestEvent.serial(long)"""
        return 'XMapRequestEvent'.__wrap(super(__XMapRequestEvent, self).serial(__long.valueOf(arg0)))

    @overload
    def window(self, arg0: int) -> 'XMapRequestEvent':
        """public org.lwjgl.system.linux.XMapRequestEvent org.lwjgl.system.linux.XMapRequestEvent.window(long)"""
        return 'XMapRequestEvent'.__wrap(super(__XMapRequestEvent, self).window(__long.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def send_event(self, arg0: bool) -> 'XMapRequestEvent':
        """public org.lwjgl.system.linux.XMapRequestEvent org.lwjgl.system.linux.XMapRequestEvent.send_event(boolean)"""
        return 'XMapRequestEvent'.__wrap(super(__XMapRequestEvent, self).send_event(__boolean.valueOf(arg0)))

    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XMapRequestEvent.nsend_event(long)"""
        return int.__wrap(__XMapRequestEvent.nsend_event(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XMapRequestEvent$Buffer org.lwjgl.system.linux.XMapRequestEvent.calloc(int)"""
        return Buffer.__wrap(__XMapRequestEvent.calloc(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nparent(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMapRequestEvent.nparent(long,long)"""
        __XMapRequestEvent.nparent(__long.valueOf(arg0), __long.valueOf(arg1))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XMapRequestEvent.type()"""
        return int.__wrap(super(XMapRequestEvent, self).type())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).address())

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XMapRequestEvent.validate(long)"""
        __XMapRequestEvent.validate(__long.valueOf(arg0))

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMapRequestEvent.ndisplay(long,long)"""
        __XMapRequestEvent.ndisplay(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XMapRequestEvent$Buffer org.lwjgl.system.linux.XMapRequestEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XMapRequestEvent.calloc(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XMapRequestEvent$Buffer org.lwjgl.system.linux.XMapRequestEvent.create(long,int)"""
        return Buffer.__wrap(__XMapRequestEvent.create(__long.valueOf(arg0), __int.valueOf(arg1)))

    @staticmethod
    @overload
    def calloc() -> 'XMapRequestEvent':
        """public static org.lwjgl.system.linux.XMapRequestEvent org.lwjgl.system.linux.XMapRequestEvent.calloc()"""
        return XMapRequestEvent.__wrap(__XMapRequestEvent.calloc())

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XMapRequestEvent':
        """public static org.lwjgl.system.linux.XMapRequestEvent org.lwjgl.system.linux.XMapRequestEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XMapRequestEvent.__wrap(__XMapRequestEvent.callocStack(arg0))

    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMapRequestEvent.nsend_event(long,int)"""
        __XMapRequestEvent.nsend_event(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XMapRequestEvent.ntype(long)"""
        return int.__wrap(__XMapRequestEvent.ntype(__long.valueOf(arg0)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str.__wrap(super(pyglsystem.Pointer$Default, self).toString())

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XMapRequestEvent$Buffer org.lwjgl.system.linux.XMapRequestEvent.create(int)"""
        return Buffer.__wrap(__XMapRequestEvent.create(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XMapRequestEvent$Buffer org.lwjgl.system.linux.XMapRequestEvent.mallocStack(int)"""
        return Buffer.__wrap(__XMapRequestEvent.mallocStack(__int.valueOf(arg0)))

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int, arg5: int) -> 'XMapRequestEvent':
        """public org.lwjgl.system.linux.XMapRequestEvent org.lwjgl.system.linux.XMapRequestEvent.set(int,long,boolean,long,long,long)"""
        return 'XMapRequestEvent'.__wrap(super(__XMapRequestEvent, self).set(__int.valueOf(arg0), __long.valueOf(arg1), __boolean.valueOf(arg2), __long.valueOf(arg3), __long.valueOf(arg4), __long.valueOf(arg5)))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMapRequestEvent.ntype(long,int)"""
        __XMapRequestEvent.ntype(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def nparent(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XMapRequestEvent.nparent(long)"""
        return int.__wrap(__XMapRequestEvent.nparent(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XMapRequestEvent$Buffer org.lwjgl.system.linux.XMapRequestEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XMapRequestEvent.mallocStack(__int.valueOf(arg0), arg1))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @staticmethod
    @overload
    def create(arg0: int) -> 'XMapRequestEvent':
        """public static org.lwjgl.system.linux.XMapRequestEvent org.lwjgl.system.linux.XMapRequestEvent.create(long)"""
        return XMapRequestEvent.__wrap(__XMapRequestEvent.create(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XMapRequestEvent.ndisplay(long)"""
        return int.__wrap(__XMapRequestEvent.ndisplay(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc() -> 'XMapRequestEvent':
        """public static org.lwjgl.system.linux.XMapRequestEvent org.lwjgl.system.linux.XMapRequestEvent.malloc()"""
        return XMapRequestEvent.__wrap(__XMapRequestEvent.malloc())

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XMapRequestEvent$Buffer org.lwjgl.system.linux.XMapRequestEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XMapRequestEvent.malloc(__int.valueOf(arg0), arg1))

    @overload
    def display(self, arg0: int) -> 'XMapRequestEvent':
        """public org.lwjgl.system.linux.XMapRequestEvent org.lwjgl.system.linux.XMapRequestEvent.display(long)"""
        return 'XMapRequestEvent'.__wrap(super(__XMapRequestEvent, self).display(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        __Struct.validate(__long.valueOf(arg0), __int.valueOf(arg1), __int.valueOf(arg2), arg3)

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XMapRequestEvent$Buffer org.lwjgl.system.linux.XMapRequestEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XMapRequestEvent.callocStack(__int.valueOf(arg0), arg1)) 
 
 
# CLASS: org.lwjgl.system.linux.OpenHow$Buffer
from pyquantum_helper import import_once as __import_once__
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import java.util.stream.Stream as __Stream
__Stream = __Stream
import org.lwjgl.system.StructBuffer as __StructBuffer
__StructBuffer = __StructBuffer
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.CustomBuffer as __CustomBuffer
__CustomBuffer = __CustomBuffer
import org.lwjgl.system.linux.OpenHow as __OpenHow_Buffer
__Buffer = __OpenHow_Buffer.Buffer
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.util.Iterator as __Iterator
__Iterator = __Iterator
import java.lang.Object as __object
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.util.Iterator as Iterator
import java.util.Spliterator as __Spliterator
__Spliterator = __Spliterator
import java.lang.Long as __long
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import java.util.stream.Stream as Stream
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import int
 
class Buffer(pyglsystem.__StructBuffer, pyglsystem.StructBuffer, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.OpenHow.Buffer"""
 
    @staticmethod
    def __wrap(java_value: __Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def flags(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.OpenHow$Buffer org.lwjgl.system.linux.OpenHow$Buffer.flags(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).flags(__long.valueOf(arg0)))

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(__pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0), arg1))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int.__wrap(super(__pyglsystem.CustomBuffer, self).address(__int.valueOf(arg0)))

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(__int.valueOf(arg0), arg1))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int.__wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(arg0))

    @overload
    def resolve(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.OpenHow$Buffer org.lwjgl.system.linux.OpenHow$Buffer.resolve(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).resolve(__long.valueOf(arg0)))

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).position())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.OpenHow$Buffer(java.nio.ByteBuffer)"""
        val = __Buffer(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool.__wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @overload
    def mode(self) -> int:
        """public long org.lwjgl.system.linux.OpenHow$Buffer.mode()"""
        return int.__wrap(super(Buffer, self).mode())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).position(__int.valueOf(arg0)))

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.OpenHow$Buffer(long,int)"""
        val = __Buffer(__long.valueOf(arg0), __int.valueOf(arg1))
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0)))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).clear())

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(__int.valueOf(arg0), arg1))

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).slice())

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def mode(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.OpenHow$Buffer org.lwjgl.system.linux.OpenHow$Buffer.mode(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).mode(__long.valueOf(arg0)))

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'.__wrap(super(pyglsystem.StructBuffer, self).get())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).limit(__int.valueOf(arg0)))

    @overload
    def flags(self) -> int:
        """public long org.lwjgl.system.linux.OpenHow$Buffer.flags()"""
        return int.__wrap(super(Buffer, self).flags())

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'.__wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str.__wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(arg0))

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).stream())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'.__wrap(super(pyglsystem.StructBuffer, self).iterator())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).slice(__int.valueOf(arg0), __int.valueOf(arg1)))

    @overload
    def resolve(self) -> int:
        """public long org.lwjgl.system.linux.OpenHow$Buffer.resolve()"""
        return int.__wrap(super(Buffer, self).resolve()) 
 
 
# CLASS: org.lwjgl.system.linux.XTimeCoord
from pyquantum_helper import import_once as __import_once__
from builtins import str
from pyquantum_helper import override
import java.lang.Object as __object
from builtins import type
import org.lwjgl.system.linux.XTimeCoord as __XTimeCoord
__XTimeCoord = __XTimeCoord
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
import org.lwjgl.system.linux.XTimeCoord as __XTimeCoord_Buffer
__Buffer = __XTimeCoord_Buffer.Buffer
from builtins import int
 
class XTimeCoord(pyglsystem.__Struct, pyglsystem.Struct):
    """org.lwjgl.system.linux.XTimeCoord"""
 
    @staticmethod
    def __wrap(java_value: __XTimeCoord) -> 'XTimeCoord':
        return XTimeCoord(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __XTimeCoord):
        """
        Dynamic initializer for XTimeCoord.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XTimeCoord$Buffer org.lwjgl.system.linux.XTimeCoord.create(long,int)"""
        return Buffer.__wrap(__XTimeCoord.create(__long.valueOf(arg0), __int.valueOf(arg1)))

    @overload
    def y(self) -> int:
        """public short org.lwjgl.system.linux.XTimeCoord.y()"""
        return int.__wrap(super(XTimeCoord, self).y())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XTimeCoord(java.nio.ByteBuffer)"""
        val = __XTimeCoord(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @staticmethod
    @overload
    def ny(arg0: int) -> int:
        """public static short org.lwjgl.system.linux.XTimeCoord.ny(long)"""
        return int.__wrap(__XTimeCoord.ny(__long.valueOf(arg0)))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).address())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def create(arg0: int) -> 'XTimeCoord':
        """public static org.lwjgl.system.linux.XTimeCoord org.lwjgl.system.linux.XTimeCoord.create(long)"""
        return XTimeCoord.__wrap(__XTimeCoord.create(__long.valueOf(arg0)))

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool.__wrap(super(__pyglsystem.Struct, self).isNull(__int.valueOf(arg0)))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XTimeCoord':
        """public static org.lwjgl.system.linux.XTimeCoord org.lwjgl.system.linux.XTimeCoord.createSafe(long)"""
        return XTimeCoord.__wrap(__XTimeCoord.createSafe(__long.valueOf(arg0)))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XTimeCoord.sizeof()"""
        return int.__wrap(super(XTimeCoord, self).sizeof())

    @staticmethod
    @overload
    def nx(arg0: int) -> int:
        """public static short org.lwjgl.system.linux.XTimeCoord.nx(long)"""
        return int.__wrap(__XTimeCoord.nx(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def ntime(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XTimeCoord.ntime(long)"""
        return int.__wrap(__XTimeCoord.ntime(__long.valueOf(arg0)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str.__wrap(super(pyglsystem.Pointer$Default, self).toString())

    @overload
    def time(self) -> int:
        """public long org.lwjgl.system.linux.XTimeCoord.time()"""
        return int.__wrap(super(XTimeCoord, self).time())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XTimeCoord$Buffer org.lwjgl.system.linux.XTimeCoord.createSafe(long,int)"""
        return Buffer.__wrap(__XTimeCoord.createSafe(__long.valueOf(arg0), __int.valueOf(arg1)))

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        __Struct.validate(__long.valueOf(arg0), __int.valueOf(arg1), __int.valueOf(arg2), arg3)

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def x(self) -> int:
        """public short org.lwjgl.system.linux.XTimeCoord.x()"""
        return int.__wrap(super(XTimeCoord, self).x()) 
 
 
# CLASS: org.lwjgl.system.linux.XButtonEvent$Buffer
from pyquantum_helper import import_once as __import_once__
import java.lang.Boolean as __boolean
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import java.util.stream.Stream as __Stream
__Stream = __Stream
import org.lwjgl.system.StructBuffer as __StructBuffer
__StructBuffer = __StructBuffer
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.CustomBuffer as __CustomBuffer
__CustomBuffer = __CustomBuffer
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.util.Iterator as __Iterator
__Iterator = __Iterator
import java.lang.Object as __object
import org.lwjgl.system.linux.XButtonEvent as __XButtonEvent_Buffer
__Buffer = __XButtonEvent_Buffer.Buffer
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.util.Iterator as Iterator
import java.util.Spliterator as __Spliterator
__Spliterator = __Spliterator
import java.lang.Long as __long
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import java.util.stream.Stream as Stream
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import int
 
class Buffer(pyglsystem.__StructBuffer, pyglsystem.StructBuffer, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XButtonEvent.Buffer"""
 
    @staticmethod
    def __wrap(java_value: __Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(__pyglsystem.StructBuffer, self).forEach(arg0)

    @overload
    def root(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XButtonEvent$Buffer org.lwjgl.system.linux.XButtonEvent$Buffer.root(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).root(__long.valueOf(arg0)))

    @overload
    def time(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XButtonEvent$Buffer org.lwjgl.system.linux.XButtonEvent$Buffer.time(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).time(__long.valueOf(arg0)))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0), arg1))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address0())

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XButtonEvent$Buffer org.lwjgl.system.linux.XButtonEvent$Buffer.serial(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).serial(__long.valueOf(arg0)))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int.__wrap(super(__pyglsystem.CustomBuffer, self).address(__int.valueOf(arg0)))

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XButtonEvent$Buffer(java.nio.ByteBuffer)"""
        val = __Buffer(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(__int.valueOf(arg0), arg1))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int.__wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @overload
    def same_screen(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XButtonEvent$Buffer org.lwjgl.system.linux.XButtonEvent$Buffer.same_screen(boolean)"""
        return 'Buffer'.__wrap(super(__Buffer, self).same_screen(__boolean.valueOf(arg0)))

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XButtonEvent$Buffer org.lwjgl.system.linux.XButtonEvent$Buffer.display(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).display(__long.valueOf(arg0)))

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(arg0))

    @overload
    def x(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XButtonEvent$Buffer org.lwjgl.system.linux.XButtonEvent$Buffer.x(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).x(__int.valueOf(arg0)))

    @overload
    def button(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XButtonEvent$Buffer org.lwjgl.system.linux.XButtonEvent$Buffer.button(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).button(__int.valueOf(arg0)))

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XButtonEvent$Buffer.display()"""
        return int.__wrap(super(Buffer, self).display())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XButtonEvent$Buffer.type()"""
        return int.__wrap(super(Buffer, self).type())

    @overload
    def time(self) -> int:
        """public long org.lwjgl.system.linux.XButtonEvent$Buffer.time()"""
        return int.__wrap(super(Buffer, self).time())

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def y(self) -> int:
        """public int org.lwjgl.system.linux.XButtonEvent$Buffer.y()"""
        return int.__wrap(super(Buffer, self).y())

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool.__wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XButtonEvent$Buffer.send_event()"""
        return bool.__wrap(super(Buffer, self).send_event())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def x_root(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XButtonEvent$Buffer org.lwjgl.system.linux.XButtonEvent$Buffer.x_root(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).x_root(__int.valueOf(arg0)))

    @overload
    def subwindow(self) -> int:
        """public long org.lwjgl.system.linux.XButtonEvent$Buffer.subwindow()"""
        return int.__wrap(super(Buffer, self).subwindow())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XButtonEvent$Buffer.window()"""
        return int.__wrap(super(Buffer, self).window())

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).position(__int.valueOf(arg0)))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0)))

    @overload
    def window(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XButtonEvent$Buffer org.lwjgl.system.linux.XButtonEvent$Buffer.window(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).window(__long.valueOf(arg0)))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).clear())

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(__int.valueOf(arg0), arg1))

    @overload
    def state(self) -> int:
        """public int org.lwjgl.system.linux.XButtonEvent$Buffer.state()"""
        return int.__wrap(super(Buffer, self).state())

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XButtonEvent$Buffer.serial()"""
        return int.__wrap(super(Buffer, self).serial())

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @overload
    def y(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XButtonEvent$Buffer org.lwjgl.system.linux.XButtonEvent$Buffer.y(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).y(__int.valueOf(arg0)))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XButtonEvent$Buffer org.lwjgl.system.linux.XButtonEvent$Buffer.type(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).type(__int.valueOf(arg0)))

    @overload
    def x_root(self) -> int:
        """public int org.lwjgl.system.linux.XButtonEvent$Buffer.x_root()"""
        return int.__wrap(super(Buffer, self).x_root())

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XButtonEvent$Buffer org.lwjgl.system.linux.XButtonEvent$Buffer.send_event(boolean)"""
        return 'Buffer'.__wrap(super(__Buffer, self).send_event(__boolean.valueOf(arg0)))

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).slice())

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def state(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XButtonEvent$Buffer org.lwjgl.system.linux.XButtonEvent$Buffer.state(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).state(__int.valueOf(arg0)))

    @overload
    def root(self) -> int:
        """public long org.lwjgl.system.linux.XButtonEvent$Buffer.root()"""
        return int.__wrap(super(Buffer, self).root())

    @overload
    def x(self) -> int:
        """public int org.lwjgl.system.linux.XButtonEvent$Buffer.x()"""
        return int.__wrap(super(Buffer, self).x())

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XButtonEvent$Buffer(long,int)"""
        val = __Buffer(__long.valueOf(arg0), __int.valueOf(arg1))
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def y_root(self) -> int:
        """public int org.lwjgl.system.linux.XButtonEvent$Buffer.y_root()"""
        return int.__wrap(super(Buffer, self).y_root())

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'.__wrap(super(pyglsystem.StructBuffer, self).get())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).limit(__int.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).reset())

    @overload
    def y_root(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XButtonEvent$Buffer org.lwjgl.system.linux.XButtonEvent$Buffer.y_root(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).y_root(__int.valueOf(arg0)))

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'.__wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str.__wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @overload
    def button(self) -> int:
        """public int org.lwjgl.system.linux.XButtonEvent$Buffer.button()"""
        return int.__wrap(super(Buffer, self).button())

    @overload
    def same_screen(self) -> bool:
        """public boolean org.lwjgl.system.linux.XButtonEvent$Buffer.same_screen()"""
        return bool.__wrap(super(Buffer, self).same_screen())

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def subwindow(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XButtonEvent$Buffer org.lwjgl.system.linux.XButtonEvent$Buffer.subwindow(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).subwindow(__long.valueOf(arg0)))

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(arg0))

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).stream())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'.__wrap(super(pyglsystem.StructBuffer, self).iterator())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).slice(__int.valueOf(arg0), __int.valueOf(arg1))) 
 
 
# CLASS: org.lwjgl.system.linux.XMotionEvent
from pyquantum_helper import import_once as __import_once__
from builtins import str
import java.lang.Boolean as __boolean
from pyquantum_helper import override
import java.lang.Object as __object
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import org.lwjgl.system.linux.XMotionEvent as __XMotionEvent_Buffer
__Buffer = __XMotionEvent_Buffer.Buffer
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.Byte as __byte
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
import org.lwjgl.system.linux.XMotionEvent as __XMotionEvent
__XMotionEvent = __XMotionEvent
from builtins import int
 
class XMotionEvent(pyglsystem.__Struct, pyglsystem.Struct, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XMotionEvent"""
 
    @staticmethod
    def __wrap(java_value: __XMotionEvent) -> 'XMotionEvent':
        return XMotionEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __XMotionEvent):
        """
        Dynamic initializer for XMotionEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XMotionEvent$Buffer org.lwjgl.system.linux.XMotionEvent.create(long,int)"""
        return Buffer.__wrap(__XMotionEvent.create(__long.valueOf(arg0), __int.valueOf(arg1)))

    @overload
    def subwindow(self) -> int:
        """public long org.lwjgl.system.linux.XMotionEvent.subwindow()"""
        return int.__wrap(super(XMotionEvent, self).subwindow())

    @overload
    def x(self, arg0: int) -> 'XMotionEvent':
        """public org.lwjgl.system.linux.XMotionEvent org.lwjgl.system.linux.XMotionEvent.x(int)"""
        return 'XMotionEvent'.__wrap(super(__XMotionEvent, self).x(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XMotionEvent.validate(long)"""
        __XMotionEvent.validate(__long.valueOf(arg0))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def y(self, arg0: int) -> 'XMotionEvent':
        """public org.lwjgl.system.linux.XMotionEvent org.lwjgl.system.linux.XMotionEvent.y(int)"""
        return 'XMotionEvent'.__wrap(super(__XMotionEvent, self).y(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XMotionEvent$Buffer org.lwjgl.system.linux.XMotionEvent.calloc(int)"""
        return Buffer.__wrap(__XMotionEvent.calloc(__int.valueOf(arg0)))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @staticmethod
    @overload
    def mallocStack() -> 'XMotionEvent':
        """public static org.lwjgl.system.linux.XMotionEvent org.lwjgl.system.linux.XMotionEvent.mallocStack()"""
        return XMotionEvent.__wrap(__XMotionEvent.mallocStack())

    @overload
    def y_root(self) -> int:
        """public int org.lwjgl.system.linux.XMotionEvent.y_root()"""
        return int.__wrap(super(XMotionEvent, self).y_root())

    @overload
    def serial(self, arg0: int) -> 'XMotionEvent':
        """public org.lwjgl.system.linux.XMotionEvent org.lwjgl.system.linux.XMotionEvent.serial(long)"""
        return 'XMotionEvent'.__wrap(super(__XMotionEvent, self).serial(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nx(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMotionEvent.nx(long,int)"""
        __XMotionEvent.nx(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def time(self) -> int:
        """public long org.lwjgl.system.linux.XMotionEvent.time()"""
        return int.__wrap(super(XMotionEvent, self).time())

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XMotionEvent$Buffer org.lwjgl.system.linux.XMotionEvent.callocStack(int)"""
        return Buffer.__wrap(__XMotionEvent.callocStack(__int.valueOf(arg0)))

    @overload
    def x_root(self) -> int:
        """public int org.lwjgl.system.linux.XMotionEvent.x_root()"""
        return int.__wrap(super(XMotionEvent, self).x_root())

    @staticmethod
    @overload
    def nx_root(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XMotionEvent.nx_root(long)"""
        return int.__wrap(__XMotionEvent.nx_root(__long.valueOf(arg0)))

    @overload
    def time(self, arg0: int) -> 'XMotionEvent':
        """public org.lwjgl.system.linux.XMotionEvent org.lwjgl.system.linux.XMotionEvent.time(long)"""
        return 'XMotionEvent'.__wrap(super(__XMotionEvent, self).time(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nwindow(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMotionEvent.nwindow(long,long)"""
        __XMotionEvent.nwindow(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def nsubwindow(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMotionEvent.nsubwindow(long,long)"""
        __XMotionEvent.nsubwindow(__long.valueOf(arg0), __long.valueOf(arg1))

    @overload
    def is_hint(self) -> int:
        """public byte org.lwjgl.system.linux.XMotionEvent.is_hint()"""
        return int.__wrap(super(XMotionEvent, self).is_hint())

    @staticmethod
    @overload
    def nsubwindow(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XMotionEvent.nsubwindow(long)"""
        return int.__wrap(__XMotionEvent.nsubwindow(__long.valueOf(arg0)))

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: int, arg10: int, arg11: int, arg12: int, arg13: int, arg14: bool) -> 'XMotionEvent':
        """public org.lwjgl.system.linux.XMotionEvent org.lwjgl.system.linux.XMotionEvent.set(int,long,boolean,long,long,long,long,long,int,int,int,int,int,byte,boolean)"""
        return 'XMotionEvent'.__wrap(super(__XMotionEvent, self).set(__int.valueOf(arg0), __long.valueOf(arg1), __boolean.valueOf(arg2), __long.valueOf(arg3), __long.valueOf(arg4), __long.valueOf(arg5), __long.valueOf(arg6), __long.valueOf(arg7), __int.valueOf(arg8), __int.valueOf(arg9), __int.valueOf(arg10), __int.valueOf(arg11), __int.valueOf(arg12), __byte.valueOf(arg13), __boolean.valueOf(arg14)))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XMotionEvent':
        """public static org.lwjgl.system.linux.XMotionEvent org.lwjgl.system.linux.XMotionEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XMotionEvent.__wrap(__XMotionEvent.calloc(arg0))

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XMotionEvent$Buffer org.lwjgl.system.linux.XMotionEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XMotionEvent.callocStack(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def ny(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMotionEvent.ny(long,int)"""
        __XMotionEvent.ny(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def nwindow(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XMotionEvent.nwindow(long)"""
        return int.__wrap(__XMotionEvent.nwindow(__long.valueOf(arg0)))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def same_screen(self, arg0: bool) -> 'XMotionEvent':
        """public org.lwjgl.system.linux.XMotionEvent org.lwjgl.system.linux.XMotionEvent.same_screen(boolean)"""
        return 'XMotionEvent'.__wrap(super(__XMotionEvent, self).same_screen(__boolean.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XMotionEvent$Buffer org.lwjgl.system.linux.XMotionEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XMotionEvent.malloc(__int.valueOf(arg0), arg1))

    @overload
    def send_event(self, arg0: bool) -> 'XMotionEvent':
        """public org.lwjgl.system.linux.XMotionEvent org.lwjgl.system.linux.XMotionEvent.send_event(boolean)"""
        return 'XMotionEvent'.__wrap(super(__XMotionEvent, self).send_event(__boolean.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def ntime(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XMotionEvent.ntime(long)"""
        return int.__wrap(__XMotionEvent.ntime(__long.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def root(self, arg0: int) -> 'XMotionEvent':
        """public org.lwjgl.system.linux.XMotionEvent org.lwjgl.system.linux.XMotionEvent.root(long)"""
        return 'XMotionEvent'.__wrap(super(__XMotionEvent, self).root(__long.valueOf(arg0)))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).address())

    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMotionEvent.nsend_event(long,int)"""
        __XMotionEvent.nsend_event(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XMotionEvent$Buffer org.lwjgl.system.linux.XMotionEvent.createSafe(long,int)"""
        return Buffer.__wrap(__XMotionEvent.createSafe(__long.valueOf(arg0), __int.valueOf(arg1)))

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XMotionEvent$Buffer org.lwjgl.system.linux.XMotionEvent.mallocStack(int)"""
        return Buffer.__wrap(__XMotionEvent.mallocStack(__int.valueOf(arg0)))

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XMotionEvent.window()"""
        return int.__wrap(super(XMotionEvent, self).window())

    @staticmethod
    @overload
    def ny_root(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMotionEvent.ny_root(long,int)"""
        __XMotionEvent.ny_root(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def ny(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XMotionEvent.ny(long)"""
        return int.__wrap(__XMotionEvent.ny(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XMotionEvent.ndisplay(long)"""
        return int.__wrap(__XMotionEvent.ndisplay(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XMotionEvent$Buffer org.lwjgl.system.linux.XMotionEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XMotionEvent.calloc(__int.valueOf(arg0), arg1))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str.__wrap(super(pyglsystem.Pointer$Default, self).toString())

    @staticmethod
    @overload
    def nstate(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMotionEvent.nstate(long,int)"""
        __XMotionEvent.nstate(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XMotionEvent.nserial(long)"""
        return int.__wrap(__XMotionEvent.nserial(__long.valueOf(arg0)))

    @overload
    def state(self, arg0: int) -> 'XMotionEvent':
        """public org.lwjgl.system.linux.XMotionEvent org.lwjgl.system.linux.XMotionEvent.state(int)"""
        return 'XMotionEvent'.__wrap(super(__XMotionEvent, self).state(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XMotionEvent':
        """public static org.lwjgl.system.linux.XMotionEvent org.lwjgl.system.linux.XMotionEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XMotionEvent.__wrap(__XMotionEvent.callocStack(arg0))

    @overload
    def is_hint(self, arg0: int) -> 'XMotionEvent':
        """public org.lwjgl.system.linux.XMotionEvent org.lwjgl.system.linux.XMotionEvent.is_hint(byte)"""
        return 'XMotionEvent'.__wrap(super(__XMotionEvent, self).is_hint(__byte.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XMotionEvent$Buffer org.lwjgl.system.linux.XMotionEvent.create(int)"""
        return Buffer.__wrap(__XMotionEvent.create(__int.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XMotionEvent.send_event()"""
        return bool.__wrap(super(XMotionEvent, self).send_event())

    @staticmethod
    @overload
    def calloc() -> 'XMotionEvent':
        """public static org.lwjgl.system.linux.XMotionEvent org.lwjgl.system.linux.XMotionEvent.calloc()"""
        return XMotionEvent.__wrap(__XMotionEvent.calloc())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XMotionEvent.sizeof()"""
        return int.__wrap(super(XMotionEvent, self).sizeof())

    @overload
    def same_screen(self) -> bool:
        """public boolean org.lwjgl.system.linux.XMotionEvent.same_screen()"""
        return bool.__wrap(super(XMotionEvent, self).same_screen())

    @overload
    def y(self) -> int:
        """public int org.lwjgl.system.linux.XMotionEvent.y()"""
        return int.__wrap(super(XMotionEvent, self).y())

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        __Struct.validate(__long.valueOf(arg0), __int.valueOf(arg1), __int.valueOf(arg2), arg3)

    @staticmethod
    @overload
    def nstate(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XMotionEvent.nstate(long)"""
        return int.__wrap(__XMotionEvent.nstate(__long.valueOf(arg0)))

    @overload
    def window(self, arg0: int) -> 'XMotionEvent':
        """public org.lwjgl.system.linux.XMotionEvent org.lwjgl.system.linux.XMotionEvent.window(long)"""
        return 'XMotionEvent'.__wrap(super(__XMotionEvent, self).window(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMotionEvent.ntype(long,int)"""
        __XMotionEvent.ntype(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def subwindow(self, arg0: int) -> 'XMotionEvent':
        """public org.lwjgl.system.linux.XMotionEvent org.lwjgl.system.linux.XMotionEvent.subwindow(long)"""
        return 'XMotionEvent'.__wrap(super(__XMotionEvent, self).subwindow(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nis_hint(arg0: int) -> int:
        """public static byte org.lwjgl.system.linux.XMotionEvent.nis_hint(long)"""
        return int.__wrap(__XMotionEvent.nis_hint(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nsame_screen(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMotionEvent.nsame_screen(long,int)"""
        __XMotionEvent.nsame_screen(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def state(self) -> int:
        """public int org.lwjgl.system.linux.XMotionEvent.state()"""
        return int.__wrap(super(XMotionEvent, self).state())

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XMotionEvent.serial()"""
        return int.__wrap(super(XMotionEvent, self).serial())

    @staticmethod
    @overload
    def nis_hint(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMotionEvent.nis_hint(long,byte)"""
        __XMotionEvent.nis_hint(__long.valueOf(arg0), __byte.valueOf(arg1))

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool.__wrap(super(__pyglsystem.Struct, self).isNull(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XMotionEvent$Buffer org.lwjgl.system.linux.XMotionEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XMotionEvent.mallocStack(__int.valueOf(arg0), arg1))

    @overload
    def y_root(self, arg0: int) -> 'XMotionEvent':
        """public org.lwjgl.system.linux.XMotionEvent org.lwjgl.system.linux.XMotionEvent.y_root(int)"""
        return 'XMotionEvent'.__wrap(super(__XMotionEvent, self).y_root(__int.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def type(self, arg0: int) -> 'XMotionEvent':
        """public org.lwjgl.system.linux.XMotionEvent org.lwjgl.system.linux.XMotionEvent.type(int)"""
        return 'XMotionEvent'.__wrap(super(__XMotionEvent, self).type(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMotionEvent.ndisplay(long,long)"""
        __XMotionEvent.ndisplay(__long.valueOf(arg0), __long.valueOf(arg1))

    @overload
    def display(self, arg0: int) -> 'XMotionEvent':
        """public org.lwjgl.system.linux.XMotionEvent org.lwjgl.system.linux.XMotionEvent.display(long)"""
        return 'XMotionEvent'.__wrap(super(__XMotionEvent, self).display(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XMotionEvent.ntype(long)"""
        return int.__wrap(__XMotionEvent.ntype(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nx(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XMotionEvent.nx(long)"""
        return int.__wrap(__XMotionEvent.nx(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc() -> 'XMotionEvent':
        """public static org.lwjgl.system.linux.XMotionEvent org.lwjgl.system.linux.XMotionEvent.malloc()"""
        return XMotionEvent.__wrap(__XMotionEvent.malloc())

    @staticmethod
    @overload
    def nsame_screen(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XMotionEvent.nsame_screen(long)"""
        return int.__wrap(__XMotionEvent.nsame_screen(__long.valueOf(arg0)))

    @overload
    def x(self) -> int:
        """public int org.lwjgl.system.linux.XMotionEvent.x()"""
        return int.__wrap(super(XMotionEvent, self).x())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XMotionEvent':
        """public static org.lwjgl.system.linux.XMotionEvent org.lwjgl.system.linux.XMotionEvent.createSafe(long)"""
        return XMotionEvent.__wrap(__XMotionEvent.createSafe(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nroot(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMotionEvent.nroot(long,long)"""
        __XMotionEvent.nroot(__long.valueOf(arg0), __long.valueOf(arg1))

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @staticmethod
    @overload
    def callocStack() -> 'XMotionEvent':
        """public static org.lwjgl.system.linux.XMotionEvent org.lwjgl.system.linux.XMotionEvent.callocStack()"""
        return XMotionEvent.__wrap(__XMotionEvent.callocStack())

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XMotionEvent.display()"""
        return int.__wrap(super(XMotionEvent, self).display())

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XMotionEvent':
        """public static org.lwjgl.system.linux.XMotionEvent org.lwjgl.system.linux.XMotionEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XMotionEvent.__wrap(__XMotionEvent.malloc(arg0))

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XMotionEvent$Buffer org.lwjgl.system.linux.XMotionEvent.malloc(int)"""
        return Buffer.__wrap(__XMotionEvent.malloc(__int.valueOf(arg0)))

    @overload
    def root(self) -> int:
        """public long org.lwjgl.system.linux.XMotionEvent.root()"""
        return int.__wrap(super(XMotionEvent, self).root())

    @staticmethod
    @overload
    def nx_root(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMotionEvent.nx_root(long,int)"""
        __XMotionEvent.nx_root(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XMotionEvent.type()"""
        return int.__wrap(super(XMotionEvent, self).type())

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMotionEvent.nserial(long,long)"""
        __XMotionEvent.nserial(__long.valueOf(arg0), __long.valueOf(arg1))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XMotionEvent(java.nio.ByteBuffer)"""
        val = __XMotionEvent(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @staticmethod
    @overload
    def create() -> 'XMotionEvent':
        """public static org.lwjgl.system.linux.XMotionEvent org.lwjgl.system.linux.XMotionEvent.create()"""
        return XMotionEvent.__wrap(__XMotionEvent.create())

    @staticmethod
    @overload
    def ntime(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMotionEvent.ntime(long,long)"""
        __XMotionEvent.ntime(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def ny_root(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XMotionEvent.ny_root(long)"""
        return int.__wrap(__XMotionEvent.ny_root(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XMotionEvent.nsend_event(long)"""
        return int.__wrap(__XMotionEvent.nsend_event(__long.valueOf(arg0)))

    @overload
    def x_root(self, arg0: int) -> 'XMotionEvent':
        """public org.lwjgl.system.linux.XMotionEvent org.lwjgl.system.linux.XMotionEvent.x_root(int)"""
        return 'XMotionEvent'.__wrap(super(__XMotionEvent, self).x_root(__int.valueOf(arg0)))

    @overload
    def set(self, arg0: 'XMotionEvent') -> 'XMotionEvent':
        """public org.lwjgl.system.linux.XMotionEvent org.lwjgl.system.linux.XMotionEvent.set(org.lwjgl.system.linux.XMotionEvent)"""
        return 'XMotionEvent'.__wrap(super(__XMotionEvent, self).set(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @staticmethod
    @overload
    def nroot(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XMotionEvent.nroot(long)"""
        return int.__wrap(__XMotionEvent.nroot(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XMotionEvent':
        """public static org.lwjgl.system.linux.XMotionEvent org.lwjgl.system.linux.XMotionEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XMotionEvent.__wrap(__XMotionEvent.mallocStack(arg0))

    @staticmethod
    @overload
    def create(arg0: int) -> 'XMotionEvent':
        """public static org.lwjgl.system.linux.XMotionEvent org.lwjgl.system.linux.XMotionEvent.create(long)"""
        return XMotionEvent.__wrap(__XMotionEvent.create(__long.valueOf(arg0))) 
 
 
# CLASS: org.lwjgl.system.linux.UNISTD
from builtins import str
from pyquantum_helper import override
import java.lang.Object as __object
from builtins import type
import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Integer as __int
from builtins import bool
import org.lwjgl.system.linux.UNISTD as __UNISTD
__UNISTD = __UNISTD
from builtins import int
 
class UNISTD():
    """org.lwjgl.system.linux.UNISTD"""
 
    @staticmethod
    def __wrap(java_value: __UNISTD) -> 'UNISTD':
        return UNISTD(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __UNISTD):
        """
        Dynamic initializer for UNISTD.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.lang.Object.toString()"""
        return str.__wrap(super(object, self).toString())

    @staticmethod
    @overload
    def read(arg0: int, arg1: 'ByteBuffer') -> int:
        """public static long org.lwjgl.system.linux.UNISTD.read(int,java.nio.ByteBuffer)"""
        return int.__wrap(__UNISTD.read(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def getppid() -> int:
        """public static native int org.lwjgl.system.linux.UNISTD.getppid()"""
        return int.__wrap(__UNISTD.getppid())

    @staticmethod
    @overload
    def getpid() -> int:
        """public static native int org.lwjgl.system.linux.UNISTD.getpid()"""
        return int.__wrap(__UNISTD.getpid())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @staticmethod
    @overload
    def close(arg0: int) -> int:
        """public static native int org.lwjgl.system.linux.UNISTD.close(int)"""
        return int.__wrap(__UNISTD.close(__int.valueOf(arg0)))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def gettid() -> int:
        """public static native int org.lwjgl.system.linux.UNISTD.gettid()"""
        return int.__wrap(__UNISTD.gettid())

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @staticmethod
    @overload
    def nread(arg0: int, arg1: int, arg2: int) -> int:
        """public static native long org.lwjgl.system.linux.UNISTD.nread(int,long,long)"""
        return int.__wrap(__UNISTD.nread(__int.valueOf(arg0), __long.valueOf(arg1), __long.valueOf(arg2)))

    @staticmethod
    @overload
    def sysconf(arg0: int) -> int:
        """public static native long org.lwjgl.system.linux.UNISTD.sysconf(int)"""
        return int.__wrap(__UNISTD.sysconf(__int.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0)) 
 
 
# CLASS: org.lwjgl.system.linux.XGenericEvent$Buffer
from pyquantum_helper import import_once as __import_once__
import java.lang.Boolean as __boolean
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import java.util.stream.Stream as __Stream
__Stream = __Stream
import org.lwjgl.system.StructBuffer as __StructBuffer
__StructBuffer = __StructBuffer
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.CustomBuffer as __CustomBuffer
__CustomBuffer = __CustomBuffer
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.util.Iterator as __Iterator
__Iterator = __Iterator
import java.lang.Object as __object
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.util.Iterator as Iterator
import java.util.Spliterator as __Spliterator
__Spliterator = __Spliterator
import org.lwjgl.system.linux.XGenericEvent as __XGenericEvent_Buffer
__Buffer = __XGenericEvent_Buffer.Buffer
import java.lang.Long as __long
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import java.util.stream.Stream as Stream
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import int
 
class Buffer(pyglsystem.__StructBuffer, pyglsystem.StructBuffer, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XGenericEvent.Buffer"""
 
    @staticmethod
    def __wrap(java_value: __Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def extension(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XGenericEvent$Buffer org.lwjgl.system.linux.XGenericEvent$Buffer.extension(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).extension(__int.valueOf(arg0)))

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(__pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0), arg1))

    @overload
    def evtype(self) -> int:
        """public int org.lwjgl.system.linux.XGenericEvent$Buffer.evtype()"""
        return int.__wrap(super(Buffer, self).evtype())

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XGenericEvent$Buffer.type()"""
        return int.__wrap(super(Buffer, self).type())

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int.__wrap(super(__pyglsystem.CustomBuffer, self).address(__int.valueOf(arg0)))

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(__int.valueOf(arg0), arg1))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int.__wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(arg0))

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XGenericEvent$Buffer org.lwjgl.system.linux.XGenericEvent$Buffer.send_event(boolean)"""
        return 'Buffer'.__wrap(super(__Buffer, self).send_event(__boolean.valueOf(arg0)))

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def extension(self) -> int:
        """public int org.lwjgl.system.linux.XGenericEvent$Buffer.extension()"""
        return int.__wrap(super(Buffer, self).extension())

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool.__wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XGenericEvent$Buffer org.lwjgl.system.linux.XGenericEvent$Buffer.display(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).display(__long.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).position(__int.valueOf(arg0)))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0)))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).clear())

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(__int.valueOf(arg0), arg1))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XGenericEvent$Buffer(java.nio.ByteBuffer)"""
        val = __Buffer(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def evtype(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XGenericEvent$Buffer org.lwjgl.system.linux.XGenericEvent$Buffer.evtype(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).evtype(__int.valueOf(arg0)))

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).slice())

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XGenericEvent$Buffer.serial()"""
        return int.__wrap(super(Buffer, self).serial())

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XGenericEvent$Buffer.display()"""
        return int.__wrap(super(Buffer, self).display())

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XGenericEvent$Buffer org.lwjgl.system.linux.XGenericEvent$Buffer.type(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).type(__int.valueOf(arg0)))

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'.__wrap(super(pyglsystem.StructBuffer, self).get())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).limit(__int.valueOf(arg0)))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XGenericEvent$Buffer.send_event()"""
        return bool.__wrap(super(Buffer, self).send_event())

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'.__wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str.__wrap(super(pyglsystem.CustomBuffer, self).toString())

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XGenericEvent$Buffer(long,int)"""
        val = __Buffer(__long.valueOf(arg0), __int.valueOf(arg1))
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XGenericEvent$Buffer org.lwjgl.system.linux.XGenericEvent$Buffer.serial(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).serial(__long.valueOf(arg0)))

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(arg0))

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).stream())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'.__wrap(super(pyglsystem.StructBuffer, self).iterator())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).slice(__int.valueOf(arg0), __int.valueOf(arg1))) 
 
 
# CLASS: org.lwjgl.system.linux.KernelTimespec
from pyquantum_helper import import_once as __import_once__
from builtins import str
from pyquantum_helper import override
import java.lang.Object as __object
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import org.lwjgl.system.linux.KernelTimespec as __KernelTimespec
__KernelTimespec = __KernelTimespec
import java.lang.Object as __Object
__Object = __Object
import org.lwjgl.system.linux.KernelTimespec as __KernelTimespec_Buffer
__Buffer = __KernelTimespec_Buffer.Buffer
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
from builtins import int
 
class KernelTimespec(pyglsystem.__Struct, pyglsystem.Struct, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.KernelTimespec"""
 
    @staticmethod
    def __wrap(java_value: __KernelTimespec) -> 'KernelTimespec':
        return KernelTimespec(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __KernelTimespec):
        """
        Dynamic initializer for KernelTimespec.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def create() -> 'KernelTimespec':
        """public static org.lwjgl.system.linux.KernelTimespec org.lwjgl.system.linux.KernelTimespec.create()"""
        return KernelTimespec.__wrap(__KernelTimespec.create())

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'KernelTimespec':
        """public static org.lwjgl.system.linux.KernelTimespec org.lwjgl.system.linux.KernelTimespec.createSafe(long)"""
        return KernelTimespec.__wrap(__KernelTimespec.createSafe(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.KernelTimespec$Buffer org.lwjgl.system.linux.KernelTimespec.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__KernelTimespec.malloc(__int.valueOf(arg0), arg1))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).address())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.KernelTimespec$Buffer org.lwjgl.system.linux.KernelTimespec.calloc(int)"""
        return Buffer.__wrap(__KernelTimespec.calloc(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.KernelTimespec$Buffer org.lwjgl.system.linux.KernelTimespec.createSafe(long,int)"""
        return Buffer.__wrap(__KernelTimespec.createSafe(__long.valueOf(arg0), __int.valueOf(arg1)))

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'KernelTimespec':
        """public static org.lwjgl.system.linux.KernelTimespec org.lwjgl.system.linux.KernelTimespec.malloc(org.lwjgl.system.MemoryStack)"""
        return KernelTimespec.__wrap(__KernelTimespec.malloc(arg0))

    @overload
    def set(self, arg0: int, arg1: int) -> 'KernelTimespec':
        """public org.lwjgl.system.linux.KernelTimespec org.lwjgl.system.linux.KernelTimespec.set(long,long)"""
        return 'KernelTimespec'.__wrap(super(__KernelTimespec, self).set(__long.valueOf(arg0), __long.valueOf(arg1)))

    @staticmethod
    @overload
    def ntv_sec(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.KernelTimespec.ntv_sec(long,long)"""
        __KernelTimespec.ntv_sec(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.KernelTimespec$Buffer org.lwjgl.system.linux.KernelTimespec.create(long,int)"""
        return Buffer.__wrap(__KernelTimespec.create(__long.valueOf(arg0), __int.valueOf(arg1)))

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool.__wrap(super(__pyglsystem.Struct, self).isNull(__int.valueOf(arg0)))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def calloc() -> 'KernelTimespec':
        """public static org.lwjgl.system.linux.KernelTimespec org.lwjgl.system.linux.KernelTimespec.calloc()"""
        return KernelTimespec.__wrap(__KernelTimespec.calloc())

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.KernelTimespec$Buffer org.lwjgl.system.linux.KernelTimespec.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__KernelTimespec.calloc(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.KernelTimespec$Buffer org.lwjgl.system.linux.KernelTimespec.malloc(int)"""
        return Buffer.__wrap(__KernelTimespec.malloc(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'KernelTimespec':
        """public static org.lwjgl.system.linux.KernelTimespec org.lwjgl.system.linux.KernelTimespec.calloc(org.lwjgl.system.MemoryStack)"""
        return KernelTimespec.__wrap(__KernelTimespec.calloc(arg0))

    @staticmethod
    @overload
    def ntv_sec(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.KernelTimespec.ntv_sec(long)"""
        return int.__wrap(__KernelTimespec.ntv_sec(__long.valueOf(arg0)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str.__wrap(super(pyglsystem.Pointer$Default, self).toString())

    @staticmethod
    @overload
    def malloc() -> 'KernelTimespec':
        """public static org.lwjgl.system.linux.KernelTimespec org.lwjgl.system.linux.KernelTimespec.malloc()"""
        return KernelTimespec.__wrap(__KernelTimespec.malloc())

    @overload
    def tv_nsec(self, arg0: int) -> 'KernelTimespec':
        """public org.lwjgl.system.linux.KernelTimespec org.lwjgl.system.linux.KernelTimespec.tv_nsec(long)"""
        return 'KernelTimespec'.__wrap(super(__KernelTimespec, self).tv_nsec(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def ntv_nsec(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.KernelTimespec.ntv_nsec(long)"""
        return int.__wrap(__KernelTimespec.ntv_nsec(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.KernelTimespec$Buffer org.lwjgl.system.linux.KernelTimespec.create(int)"""
        return Buffer.__wrap(__KernelTimespec.create(__int.valueOf(arg0)))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.KernelTimespec.sizeof()"""
        return int.__wrap(super(KernelTimespec, self).sizeof())

    @overload
    def tv_sec(self, arg0: int) -> 'KernelTimespec':
        """public org.lwjgl.system.linux.KernelTimespec org.lwjgl.system.linux.KernelTimespec.tv_sec(long)"""
        return 'KernelTimespec'.__wrap(super(__KernelTimespec, self).tv_sec(__long.valueOf(arg0)))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.KernelTimespec(java.nio.ByteBuffer)"""
        val = __KernelTimespec(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def tv_sec(self) -> int:
        """public long org.lwjgl.system.linux.KernelTimespec.tv_sec()"""
        return int.__wrap(super(KernelTimespec, self).tv_sec())

    @overload
    def tv_nsec(self) -> int:
        """public long org.lwjgl.system.linux.KernelTimespec.tv_nsec()"""
        return int.__wrap(super(KernelTimespec, self).tv_nsec())

    @staticmethod
    @overload
    def ntv_nsec(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.KernelTimespec.ntv_nsec(long,long)"""
        __KernelTimespec.ntv_nsec(__long.valueOf(arg0), __long.valueOf(arg1))

    @overload
    def set(self, arg0: 'KernelTimespec') -> 'KernelTimespec':
        """public org.lwjgl.system.linux.KernelTimespec org.lwjgl.system.linux.KernelTimespec.set(org.lwjgl.system.linux.KernelTimespec)"""
        return 'KernelTimespec'.__wrap(super(__KernelTimespec, self).set(arg0))

    @staticmethod
    @overload
    def create(arg0: int) -> 'KernelTimespec':
        """public static org.lwjgl.system.linux.KernelTimespec org.lwjgl.system.linux.KernelTimespec.create(long)"""
        return KernelTimespec.__wrap(__KernelTimespec.create(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        __Struct.validate(__long.valueOf(arg0), __int.valueOf(arg1), __int.valueOf(arg2), arg3)

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait() 
 
 
# CLASS: org.lwjgl.system.linux.XClientMessageEvent
from pyquantum_helper import import_once as __import_once__
import java.lang.Boolean as __boolean
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import java.nio.ByteBuffer as __ByteBuffer
__ByteBuffer = __ByteBuffer
import java.nio.ShortBuffer as ShortBuffer
import java.lang.Class as __Class
__Class = __Class
import java.lang.Byte as __byte
import org.lwjgl.CLongBuffer as __CLongBuffer
__CLongBuffer = __CLongBuffer
import java.lang.Short as __short
import org.lwjgl.system.linux.XClientMessageEvent as __XClientMessageEvent_Buffer
__Buffer = __XClientMessageEvent_Buffer.Buffer
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.nio.ShortBuffer as __ShortBuffer
__ShortBuffer = __ShortBuffer
import java.lang.Object as __object
try:
    import pygl
except ImportError:
    pygl = __import_once__("pygl")

try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.lang.Long as __long
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import org.lwjgl.system.linux.XClientMessageEvent as __XClientMessageEvent
__XClientMessageEvent = __XClientMessageEvent
import java.lang.Object as __Object
__Object = __Object
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import int
 
class XClientMessageEvent(pyglsystem.__Struct, pyglsystem.Struct, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XClientMessageEvent"""
 
    @staticmethod
    def __wrap(java_value: __XClientMessageEvent) -> 'XClientMessageEvent':
        return XClientMessageEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __XClientMessageEvent):
        """
        Dynamic initializer for XClientMessageEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XClientMessageEvent.ntype(long)"""
        return int.__wrap(__XClientMessageEvent.ntype(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc() -> 'XClientMessageEvent':
        """public static org.lwjgl.system.linux.XClientMessageEvent org.lwjgl.system.linux.XClientMessageEvent.calloc()"""
        return XClientMessageEvent.__wrap(__XClientMessageEvent.calloc())

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XClientMessageEvent$Buffer org.lwjgl.system.linux.XClientMessageEvent.createSafe(long,int)"""
        return Buffer.__wrap(__XClientMessageEvent.createSafe(__long.valueOf(arg0), __int.valueOf(arg1)))

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XClientMessageEvent$Buffer org.lwjgl.system.linux.XClientMessageEvent.mallocStack(int)"""
        return Buffer.__wrap(__XClientMessageEvent.mallocStack(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def ndata_b(arg0: int) -> 'ByteBuffer':
        """public static java.nio.ByteBuffer org.lwjgl.system.linux.XClientMessageEvent.ndata_b(long)"""
        return ByteBuffer.__wrap(__XClientMessageEvent.ndata_b(__long.valueOf(arg0)))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def data_l(self) -> 'pygl.CLongBuffer':
        """public org.lwjgl.CLongBuffer org.lwjgl.system.linux.XClientMessageEvent.data_l()"""
        return 'pygl.CLongBuffer'.__wrap(super(XClientMessageEvent, self).data_l())

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XClientMessageEvent':
        """public static org.lwjgl.system.linux.XClientMessageEvent org.lwjgl.system.linux.XClientMessageEvent.createSafe(long)"""
        return XClientMessageEvent.__wrap(__XClientMessageEvent.createSafe(__long.valueOf(arg0)))

    @overload
    def data_l(self, arg0: int) -> int:
        """public long org.lwjgl.system.linux.XClientMessageEvent.data_l(int)"""
        return int.__wrap(super(__XClientMessageEvent, self).data_l(__int.valueOf(arg0)))

    @overload
    def format(self, arg0: int) -> 'XClientMessageEvent':
        """public org.lwjgl.system.linux.XClientMessageEvent org.lwjgl.system.linux.XClientMessageEvent.format(int)"""
        return 'XClientMessageEvent'.__wrap(super(__XClientMessageEvent, self).format(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def ndata_l(arg0: int, arg1: int) -> int:
        """public static long org.lwjgl.system.linux.XClientMessageEvent.ndata_l(long,int)"""
        return int.__wrap(__XClientMessageEvent.ndata_l(__long.valueOf(arg0), __int.valueOf(arg1)))

    @overload
    def set(self, arg0: 'XClientMessageEvent') -> 'XClientMessageEvent':
        """public org.lwjgl.system.linux.XClientMessageEvent org.lwjgl.system.linux.XClientMessageEvent.set(org.lwjgl.system.linux.XClientMessageEvent)"""
        return 'XClientMessageEvent'.__wrap(super(__XClientMessageEvent, self).set(arg0))

    @overload
    def data_b(self, arg0: int, arg1: int) -> 'XClientMessageEvent':
        """public org.lwjgl.system.linux.XClientMessageEvent org.lwjgl.system.linux.XClientMessageEvent.data_b(int,byte)"""
        return 'XClientMessageEvent'.__wrap(super(__XClientMessageEvent, self).data_b(__int.valueOf(arg0), __byte.valueOf(arg1)))

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool.__wrap(super(__pyglsystem.Struct, self).isNull(__int.valueOf(arg0)))

    @overload
    def data_b(self, arg0: int) -> int:
        """public byte org.lwjgl.system.linux.XClientMessageEvent.data_b(int)"""
        return int.__wrap(super(__XClientMessageEvent, self).data_b(__int.valueOf(arg0)))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def nmessage_type(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XClientMessageEvent.nmessage_type(long)"""
        return int.__wrap(__XClientMessageEvent.nmessage_type(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XClientMessageEvent$Buffer org.lwjgl.system.linux.XClientMessageEvent.calloc(int)"""
        return Buffer.__wrap(__XClientMessageEvent.calloc(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nwindow(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XClientMessageEvent.nwindow(long,long)"""
        __XClientMessageEvent.nwindow(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def ndata_l(arg0: int, arg1: 'CLongBuffer'):
        """public static void org.lwjgl.system.linux.XClientMessageEvent.ndata_l(long,org.lwjgl.CLongBuffer)"""
        __XClientMessageEvent.ndata_l(__long.valueOf(arg0), arg1)

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XClientMessageEvent':
        """public static org.lwjgl.system.linux.XClientMessageEvent org.lwjgl.system.linux.XClientMessageEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XClientMessageEvent.__wrap(__XClientMessageEvent.calloc(arg0))

    @overload
    def send_event(self, arg0: bool) -> 'XClientMessageEvent':
        """public org.lwjgl.system.linux.XClientMessageEvent org.lwjgl.system.linux.XClientMessageEvent.send_event(boolean)"""
        return 'XClientMessageEvent'.__wrap(super(__XClientMessageEvent, self).send_event(__boolean.valueOf(arg0)))

    @overload
    def data_s(self) -> 'ShortBuffer':
        """public java.nio.ShortBuffer org.lwjgl.system.linux.XClientMessageEvent.data_s()"""
        return 'ShortBuffer'.__wrap(super(XClientMessageEvent, self).data_s())

    @overload
    def serial(self, arg0: int) -> 'XClientMessageEvent':
        """public org.lwjgl.system.linux.XClientMessageEvent org.lwjgl.system.linux.XClientMessageEvent.serial(long)"""
        return 'XClientMessageEvent'.__wrap(super(__XClientMessageEvent, self).serial(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def ndata_s(arg0: int, arg1: 'ShortBuffer'):
        """public static void org.lwjgl.system.linux.XClientMessageEvent.ndata_s(long,java.nio.ShortBuffer)"""
        __XClientMessageEvent.ndata_s(__long.valueOf(arg0), arg1)

    @staticmethod
    @overload
    def nformat(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XClientMessageEvent.nformat(long)"""
        return int.__wrap(__XClientMessageEvent.nformat(__long.valueOf(arg0)))

    @overload
    def window(self, arg0: int) -> 'XClientMessageEvent':
        """public org.lwjgl.system.linux.XClientMessageEvent org.lwjgl.system.linux.XClientMessageEvent.window(long)"""
        return 'XClientMessageEvent'.__wrap(super(__XClientMessageEvent, self).window(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def ndata_s(arg0: int, arg1: int, arg2: int):
        """public static void org.lwjgl.system.linux.XClientMessageEvent.ndata_s(long,int,short)"""
        __XClientMessageEvent.ndata_s(__long.valueOf(arg0), __int.valueOf(arg1), __short.valueOf(arg2))

    @overload
    def message_type(self, arg0: int) -> 'XClientMessageEvent':
        """public org.lwjgl.system.linux.XClientMessageEvent org.lwjgl.system.linux.XClientMessageEvent.message_type(long)"""
        return 'XClientMessageEvent'.__wrap(super(__XClientMessageEvent, self).message_type(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nmessage_type(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XClientMessageEvent.nmessage_type(long,long)"""
        __XClientMessageEvent.nmessage_type(__long.valueOf(arg0), __long.valueOf(arg1))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @overload
    def message_type(self) -> int:
        """public long org.lwjgl.system.linux.XClientMessageEvent.message_type()"""
        return int.__wrap(super(XClientMessageEvent, self).message_type())

    @staticmethod
    @overload
    def malloc() -> 'XClientMessageEvent':
        """public static org.lwjgl.system.linux.XClientMessageEvent org.lwjgl.system.linux.XClientMessageEvent.malloc()"""
        return XClientMessageEvent.__wrap(__XClientMessageEvent.malloc())

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XClientMessageEvent.sizeof()"""
        return int.__wrap(super(XClientMessageEvent, self).sizeof())

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XClientMessageEvent':
        """public static org.lwjgl.system.linux.XClientMessageEvent org.lwjgl.system.linux.XClientMessageEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XClientMessageEvent.__wrap(__XClientMessageEvent.callocStack(arg0))

    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XClientMessageEvent.nsend_event(long)"""
        return int.__wrap(__XClientMessageEvent.nsend_event(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nwindow(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XClientMessageEvent.nwindow(long)"""
        return int.__wrap(__XClientMessageEvent.nwindow(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XClientMessageEvent.nserial(long)"""
        return int.__wrap(__XClientMessageEvent.nserial(__long.valueOf(arg0)))

    @overload
    def data_b(self) -> 'ByteBuffer':
        """public java.nio.ByteBuffer org.lwjgl.system.linux.XClientMessageEvent.data_b()"""
        return 'ByteBuffer'.__wrap(super(XClientMessageEvent, self).data_b())

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XClientMessageEvent.type()"""
        return int.__wrap(super(XClientMessageEvent, self).type())

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XClientMessageEvent.ntype(long,int)"""
        __XClientMessageEvent.ntype(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XClientMessageEvent(java.nio.ByteBuffer)"""
        val = __XClientMessageEvent(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XClientMessageEvent':
        """public static org.lwjgl.system.linux.XClientMessageEvent org.lwjgl.system.linux.XClientMessageEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XClientMessageEvent.__wrap(__XClientMessageEvent.malloc(arg0))

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XClientMessageEvent.ndisplay(long)"""
        return int.__wrap(__XClientMessageEvent.ndisplay(__long.valueOf(arg0)))

    @overload
    def format(self) -> int:
        """public int org.lwjgl.system.linux.XClientMessageEvent.format()"""
        return int.__wrap(super(XClientMessageEvent, self).format())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def data_s(self, arg0: 'ShortBuffer') -> 'XClientMessageEvent':
        """public org.lwjgl.system.linux.XClientMessageEvent org.lwjgl.system.linux.XClientMessageEvent.data_s(java.nio.ShortBuffer)"""
        return 'XClientMessageEvent'.__wrap(super(__XClientMessageEvent, self).data_s(arg0))

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XClientMessageEvent$Buffer org.lwjgl.system.linux.XClientMessageEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XClientMessageEvent.mallocStack(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def ndata_l(arg0: int, arg1: int, arg2: int):
        """public static void org.lwjgl.system.linux.XClientMessageEvent.ndata_l(long,int,long)"""
        __XClientMessageEvent.ndata_l(__long.valueOf(arg0), __int.valueOf(arg1), __long.valueOf(arg2))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XClientMessageEvent.send_event()"""
        return bool.__wrap(super(XClientMessageEvent, self).send_event())

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XClientMessageEvent.window()"""
        return int.__wrap(super(XClientMessageEvent, self).window())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def display(self, arg0: int) -> 'XClientMessageEvent':
        """public org.lwjgl.system.linux.XClientMessageEvent org.lwjgl.system.linux.XClientMessageEvent.display(long)"""
        return 'XClientMessageEvent'.__wrap(super(__XClientMessageEvent, self).display(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XClientMessageEvent.ndisplay(long,long)"""
        __XClientMessageEvent.ndisplay(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XClientMessageEvent':
        """public static org.lwjgl.system.linux.XClientMessageEvent org.lwjgl.system.linux.XClientMessageEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XClientMessageEvent.__wrap(__XClientMessageEvent.mallocStack(arg0))

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int, arg5: int, arg6: int, arg7: 'ByteBuffer', arg8: 'ShortBuffer', arg9: 'CLongBuffer') -> 'XClientMessageEvent':
        """public org.lwjgl.system.linux.XClientMessageEvent org.lwjgl.system.linux.XClientMessageEvent.set(int,long,boolean,long,long,long,int,java.nio.ByteBuffer,java.nio.ShortBuffer,org.lwjgl.CLongBuffer)"""
        return 'XClientMessageEvent'.__wrap(super(__XClientMessageEvent, self).set(__int.valueOf(arg0), __long.valueOf(arg1), __boolean.valueOf(arg2), __long.valueOf(arg3), __long.valueOf(arg4), __long.valueOf(arg5), __int.valueOf(arg6), arg7, arg8, arg9))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).address())

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XClientMessageEvent.validate(long)"""
        __XClientMessageEvent.validate(__long.valueOf(arg0))

    @staticmethod
    @overload
    def ndata_b(arg0: int, arg1: int, arg2: int):
        """public static void org.lwjgl.system.linux.XClientMessageEvent.ndata_b(long,int,byte)"""
        __XClientMessageEvent.ndata_b(__long.valueOf(arg0), __int.valueOf(arg1), __byte.valueOf(arg2))

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XClientMessageEvent$Buffer org.lwjgl.system.linux.XClientMessageEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XClientMessageEvent.callocStack(__int.valueOf(arg0), arg1))

    @overload
    def data_s(self, arg0: int, arg1: int) -> 'XClientMessageEvent':
        """public org.lwjgl.system.linux.XClientMessageEvent org.lwjgl.system.linux.XClientMessageEvent.data_s(int,short)"""
        return 'XClientMessageEvent'.__wrap(super(__XClientMessageEvent, self).data_s(__int.valueOf(arg0), __short.valueOf(arg1)))

    @staticmethod
    @overload
    def ndata_s(arg0: int) -> 'ShortBuffer':
        """public static java.nio.ShortBuffer org.lwjgl.system.linux.XClientMessageEvent.ndata_s(long)"""
        return ShortBuffer.__wrap(__XClientMessageEvent.ndata_s(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def ndata_b(arg0: int, arg1: 'ByteBuffer'):
        """public static void org.lwjgl.system.linux.XClientMessageEvent.ndata_b(long,java.nio.ByteBuffer)"""
        __XClientMessageEvent.ndata_b(__long.valueOf(arg0), arg1)

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XClientMessageEvent$Buffer org.lwjgl.system.linux.XClientMessageEvent.callocStack(int)"""
        return Buffer.__wrap(__XClientMessageEvent.callocStack(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XClientMessageEvent$Buffer org.lwjgl.system.linux.XClientMessageEvent.create(int)"""
        return Buffer.__wrap(__XClientMessageEvent.create(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack() -> 'XClientMessageEvent':
        """public static org.lwjgl.system.linux.XClientMessageEvent org.lwjgl.system.linux.XClientMessageEvent.callocStack()"""
        return XClientMessageEvent.__wrap(__XClientMessageEvent.callocStack())

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XClientMessageEvent.display()"""
        return int.__wrap(super(XClientMessageEvent, self).display())

    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XClientMessageEvent.nsend_event(long,int)"""
        __XClientMessageEvent.nsend_event(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str.__wrap(super(pyglsystem.Pointer$Default, self).toString())

    @overload
    def data_s(self, arg0: int) -> int:
        """public short org.lwjgl.system.linux.XClientMessageEvent.data_s(int)"""
        return int.__wrap(super(__XClientMessageEvent, self).data_s(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def ndata_b(arg0: int, arg1: int) -> int:
        """public static byte org.lwjgl.system.linux.XClientMessageEvent.ndata_b(long,int)"""
        return int.__wrap(__XClientMessageEvent.ndata_b(__long.valueOf(arg0), __int.valueOf(arg1)))

    @staticmethod
    @overload
    def ndata_l(arg0: int) -> 'pygl.CLongBuffer':
        """public static org.lwjgl.CLongBuffer org.lwjgl.system.linux.XClientMessageEvent.ndata_l(long)"""
        return pygl.CLongBuffer.__wrap(__XClientMessageEvent.ndata_l(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XClientMessageEvent$Buffer org.lwjgl.system.linux.XClientMessageEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XClientMessageEvent.malloc(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def mallocStack() -> 'XClientMessageEvent':
        """public static org.lwjgl.system.linux.XClientMessageEvent org.lwjgl.system.linux.XClientMessageEvent.mallocStack()"""
        return XClientMessageEvent.__wrap(__XClientMessageEvent.mallocStack())

    @staticmethod
    @overload
    def ndata_s(arg0: int, arg1: int) -> int:
        """public static short org.lwjgl.system.linux.XClientMessageEvent.ndata_s(long,int)"""
        return int.__wrap(__XClientMessageEvent.ndata_s(__long.valueOf(arg0), __int.valueOf(arg1)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'XClientMessageEvent':
        """public static org.lwjgl.system.linux.XClientMessageEvent org.lwjgl.system.linux.XClientMessageEvent.create(long)"""
        return XClientMessageEvent.__wrap(__XClientMessageEvent.create(__long.valueOf(arg0)))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XClientMessageEvent.nserial(long,long)"""
        __XClientMessageEvent.nserial(__long.valueOf(arg0), __long.valueOf(arg1))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XClientMessageEvent$Buffer org.lwjgl.system.linux.XClientMessageEvent.create(long,int)"""
        return Buffer.__wrap(__XClientMessageEvent.create(__long.valueOf(arg0), __int.valueOf(arg1)))

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XClientMessageEvent$Buffer org.lwjgl.system.linux.XClientMessageEvent.malloc(int)"""
        return Buffer.__wrap(__XClientMessageEvent.malloc(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def create() -> 'XClientMessageEvent':
        """public static org.lwjgl.system.linux.XClientMessageEvent org.lwjgl.system.linux.XClientMessageEvent.create()"""
        return XClientMessageEvent.__wrap(__XClientMessageEvent.create())

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XClientMessageEvent$Buffer org.lwjgl.system.linux.XClientMessageEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XClientMessageEvent.calloc(__int.valueOf(arg0), arg1))

    @overload
    def data_b(self, arg0: 'ByteBuffer') -> 'XClientMessageEvent':
        """public org.lwjgl.system.linux.XClientMessageEvent org.lwjgl.system.linux.XClientMessageEvent.data_b(java.nio.ByteBuffer)"""
        return 'XClientMessageEvent'.__wrap(super(__XClientMessageEvent, self).data_b(arg0))

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        __Struct.validate(__long.valueOf(arg0), __int.valueOf(arg1), __int.valueOf(arg2), arg3)

    @overload
    def type(self, arg0: int) -> 'XClientMessageEvent':
        """public org.lwjgl.system.linux.XClientMessageEvent org.lwjgl.system.linux.XClientMessageEvent.type(int)"""
        return 'XClientMessageEvent'.__wrap(super(__XClientMessageEvent, self).type(__int.valueOf(arg0)))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XClientMessageEvent.serial()"""
        return int.__wrap(super(XClientMessageEvent, self).serial())

    @staticmethod
    @overload
    def nformat(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XClientMessageEvent.nformat(long,int)"""
        __XClientMessageEvent.nformat(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def data_l(self, arg0: int, arg1: int) -> 'XClientMessageEvent':
        """public org.lwjgl.system.linux.XClientMessageEvent org.lwjgl.system.linux.XClientMessageEvent.data_l(int,long)"""
        return 'XClientMessageEvent'.__wrap(super(__XClientMessageEvent, self).data_l(__int.valueOf(arg0), __long.valueOf(arg1)))

    @overload
    def data_l(self, arg0: 'CLongBuffer') -> 'XClientMessageEvent':
        """public org.lwjgl.system.linux.XClientMessageEvent org.lwjgl.system.linux.XClientMessageEvent.data_l(org.lwjgl.CLongBuffer)"""
        return 'XClientMessageEvent'.__wrap(super(__XClientMessageEvent, self).data_l(arg0)) 
 
 
# CLASS: org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer
from pyquantum_helper import import_once as __import_once__
import java.lang.Boolean as __boolean
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import java.util.stream.Stream as __Stream
__Stream = __Stream
import org.lwjgl.system.StructBuffer as __StructBuffer
__StructBuffer = __StructBuffer
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.CustomBuffer as __CustomBuffer
__CustomBuffer = __CustomBuffer
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.util.Iterator as __Iterator
__Iterator = __Iterator
import java.lang.Object as __object
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.util.Iterator as Iterator
import java.util.Spliterator as __Spliterator
__Spliterator = __Spliterator
import java.lang.Long as __long
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import java.util.stream.Stream as Stream
import org.lwjgl.system.linux.XGraphicsExposeEvent as __XGraphicsExposeEvent_Buffer
__Buffer = __XGraphicsExposeEvent_Buffer.Buffer
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import int
 
class Buffer(pyglsystem.__StructBuffer, pyglsystem.StructBuffer, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XGraphicsExposeEvent.Buffer"""
 
    @staticmethod
    def __wrap(java_value: __Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer.serial()"""
        return int.__wrap(super(Buffer, self).serial())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(__pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0), arg1))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address0())

    @overload
    def major_code(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer.major_code(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).major_code(__int.valueOf(arg0)))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def width(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer.width(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).width(__int.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int.__wrap(super(__pyglsystem.CustomBuffer, self).address(__int.valueOf(arg0)))

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(__int.valueOf(arg0), arg1))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int.__wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(arg0))

    @overload
    def y(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer.y(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).y(__int.valueOf(arg0)))

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer.display()"""
        return int.__wrap(super(Buffer, self).display())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer.send_event()"""
        return bool.__wrap(super(Buffer, self).send_event())

    @overload
    def y(self) -> int:
        """public int org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer.y()"""
        return int.__wrap(super(Buffer, self).y())

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool.__wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @overload
    def major_code(self) -> int:
        """public int org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer.major_code()"""
        return int.__wrap(super(Buffer, self).major_code())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer.send_event(boolean)"""
        return 'Buffer'.__wrap(super(__Buffer, self).send_event(__boolean.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).position(__int.valueOf(arg0)))

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer.serial(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).serial(__long.valueOf(arg0)))

    @overload
    def width(self) -> int:
        """public int org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer.width()"""
        return int.__wrap(super(Buffer, self).width())

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0)))

    @overload
    def count(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer.count(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).count(__int.valueOf(arg0)))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).clear())

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(__int.valueOf(arg0), arg1))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer(java.nio.ByteBuffer)"""
        val = __Buffer(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def minor_code(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer.minor_code(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).minor_code(__int.valueOf(arg0)))

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @overload
    def minor_code(self) -> int:
        """public int org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer.minor_code()"""
        return int.__wrap(super(Buffer, self).minor_code())

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer.display(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).display(__long.valueOf(arg0)))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address())

    @overload
    def drawable(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer.drawable(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).drawable(__long.valueOf(arg0)))

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).slice())

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer(long,int)"""
        val = __Buffer(__long.valueOf(arg0), __int.valueOf(arg1))
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer.type(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).type(__int.valueOf(arg0)))

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'.__wrap(super(pyglsystem.StructBuffer, self).get())

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer.type()"""
        return int.__wrap(super(Buffer, self).type())

    @overload
    def height(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer.height(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).height(__int.valueOf(arg0)))

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).limit(__int.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'.__wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str.__wrap(super(pyglsystem.CustomBuffer, self).toString())

    @overload
    def count(self) -> int:
        """public int org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer.count()"""
        return int.__wrap(super(Buffer, self).count())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def drawable(self) -> int:
        """public long org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer.drawable()"""
        return int.__wrap(super(Buffer, self).drawable())

    @overload
    def x(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer.x(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).x(__int.valueOf(arg0)))

    @overload
    def height(self) -> int:
        """public int org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer.height()"""
        return int.__wrap(super(Buffer, self).height())

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(arg0))

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).stream())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @overload
    def x(self) -> int:
        """public int org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer.x()"""
        return int.__wrap(super(Buffer, self).x())

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'.__wrap(super(pyglsystem.StructBuffer, self).iterator())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).slice(__int.valueOf(arg0), __int.valueOf(arg1))) 
 
 
# CLASS: org.lwjgl.system.linux.XColormapEvent$Buffer
from pyquantum_helper import import_once as __import_once__
import java.lang.Boolean as __boolean
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import java.util.stream.Stream as __Stream
__Stream = __Stream
import org.lwjgl.system.linux.XColormapEvent as __XColormapEvent_Buffer
__Buffer = __XColormapEvent_Buffer.Buffer
import org.lwjgl.system.StructBuffer as __StructBuffer
__StructBuffer = __StructBuffer
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.CustomBuffer as __CustomBuffer
__CustomBuffer = __CustomBuffer
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.util.Iterator as __Iterator
__Iterator = __Iterator
import java.lang.Object as __object
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.util.Iterator as Iterator
import java.util.Spliterator as __Spliterator
__Spliterator = __Spliterator
import java.lang.Long as __long
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import java.util.stream.Stream as Stream
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import int
 
class Buffer(pyglsystem.__StructBuffer, pyglsystem.StructBuffer, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XColormapEvent.Buffer"""
 
    @staticmethod
    def __wrap(java_value: __Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(__pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0), arg1))

    @overload
    def new$(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XColormapEvent$Buffer org.lwjgl.system.linux.XColormapEvent$Buffer.new$(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).new$(__int.valueOf(arg0)))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address0())

    @overload
    def state(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XColormapEvent$Buffer org.lwjgl.system.linux.XColormapEvent$Buffer.state(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).state(__int.valueOf(arg0)))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int.__wrap(super(__pyglsystem.CustomBuffer, self).address(__int.valueOf(arg0)))

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(__int.valueOf(arg0), arg1))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int.__wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @overload
    def state(self) -> int:
        """public int org.lwjgl.system.linux.XColormapEvent$Buffer.state()"""
        return int.__wrap(super(Buffer, self).state())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(arg0))

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XColormapEvent$Buffer(long,int)"""
        val = __Buffer(__long.valueOf(arg0), __int.valueOf(arg1))
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def colormap(self) -> int:
        """public long org.lwjgl.system.linux.XColormapEvent$Buffer.colormap()"""
        return int.__wrap(super(Buffer, self).colormap())

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool.__wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XColormapEvent$Buffer.send_event()"""
        return bool.__wrap(super(Buffer, self).send_event())

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XColormapEvent$Buffer org.lwjgl.system.linux.XColormapEvent$Buffer.display(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).display(__long.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XColormapEvent$Buffer.type()"""
        return int.__wrap(super(Buffer, self).type())

    @overload
    def colormap(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XColormapEvent$Buffer org.lwjgl.system.linux.XColormapEvent$Buffer.colormap(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).colormap(__long.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).position(__int.valueOf(arg0)))

    @overload
    def new$(self) -> int:
        """public int org.lwjgl.system.linux.XColormapEvent$Buffer.new$()"""
        return int.__wrap(super(Buffer, self).new$())

    @overload
    def window(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XColormapEvent$Buffer org.lwjgl.system.linux.XColormapEvent$Buffer.window(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).window(__long.valueOf(arg0)))

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XColormapEvent$Buffer org.lwjgl.system.linux.XColormapEvent$Buffer.type(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).type(__int.valueOf(arg0)))

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XColormapEvent$Buffer org.lwjgl.system.linux.XColormapEvent$Buffer.serial(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).serial(__long.valueOf(arg0)))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0)))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).clear())

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(__int.valueOf(arg0), arg1))

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address())

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XColormapEvent$Buffer.display()"""
        return int.__wrap(super(Buffer, self).display())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).slice())

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).compact())

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'.__wrap(super(pyglsystem.StructBuffer, self).get())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XColormapEvent$Buffer(java.nio.ByteBuffer)"""
        val = __Buffer(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XColormapEvent$Buffer.serial()"""
        return int.__wrap(super(Buffer, self).serial())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).limit(__int.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).reset())

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XColormapEvent$Buffer org.lwjgl.system.linux.XColormapEvent$Buffer.send_event(boolean)"""
        return 'Buffer'.__wrap(super(__Buffer, self).send_event(__boolean.valueOf(arg0)))

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'.__wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str.__wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(arg0))

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).stream())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'.__wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XColormapEvent$Buffer.window()"""
        return int.__wrap(super(Buffer, self).window())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).slice(__int.valueOf(arg0), __int.valueOf(arg1))) 
 
 
# CLASS: org.lwjgl.system.linux.FOwnerEx$Buffer
from pyquantum_helper import import_once as __import_once__
import org.lwjgl.system.linux.FOwnerEx as __FOwnerEx_Buffer
__Buffer = __FOwnerEx_Buffer.Buffer
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import java.util.stream.Stream as __Stream
__Stream = __Stream
import org.lwjgl.system.StructBuffer as __StructBuffer
__StructBuffer = __StructBuffer
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.CustomBuffer as __CustomBuffer
__CustomBuffer = __CustomBuffer
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.util.Iterator as __Iterator
__Iterator = __Iterator
import java.lang.Object as __object
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.util.Iterator as Iterator
import java.util.Spliterator as __Spliterator
__Spliterator = __Spliterator
import java.lang.Long as __long
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import java.util.stream.Stream as Stream
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import int
 
class Buffer(pyglsystem.__StructBuffer, pyglsystem.StructBuffer, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.FOwnerEx.Buffer"""
 
    @staticmethod
    def __wrap(java_value: __Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(arg0))

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.FOwnerEx$Buffer org.lwjgl.system.linux.FOwnerEx$Buffer.type(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).type(__int.valueOf(arg0)))

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(__pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def pid(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.FOwnerEx$Buffer org.lwjgl.system.linux.FOwnerEx$Buffer.pid(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).pid(__int.valueOf(arg0)))

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0), arg1))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int.__wrap(super(__pyglsystem.CustomBuffer, self).address(__int.valueOf(arg0)))

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(__int.valueOf(arg0), arg1))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int.__wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(arg0))

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.FOwnerEx$Buffer(long,int)"""
        val = __Buffer(__long.valueOf(arg0), __int.valueOf(arg1))
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool.__wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).position(__int.valueOf(arg0)))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0)))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).clear())

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(__int.valueOf(arg0), arg1))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.FOwnerEx$Buffer(java.nio.ByteBuffer)"""
        val = __Buffer(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.FOwnerEx$Buffer.type()"""
        return int.__wrap(super(Buffer, self).type())

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).slice())

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).compact())

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'.__wrap(super(pyglsystem.StructBuffer, self).get())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).limit(__int.valueOf(arg0)))

    @overload
    def pid(self) -> int:
        """public int org.lwjgl.system.linux.FOwnerEx$Buffer.pid()"""
        return int.__wrap(super(Buffer, self).pid())

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'.__wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str.__wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(arg0))

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).stream())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'.__wrap(super(pyglsystem.StructBuffer, self).iterator())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).slice(__int.valueOf(arg0), __int.valueOf(arg1))) 
 
 
# CLASS: org.lwjgl.system.linux.XConfigureEvent$Buffer
from pyquantum_helper import import_once as __import_once__
import java.lang.Boolean as __boolean
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import java.util.stream.Stream as __Stream
__Stream = __Stream
import org.lwjgl.system.StructBuffer as __StructBuffer
__StructBuffer = __StructBuffer
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.CustomBuffer as __CustomBuffer
__CustomBuffer = __CustomBuffer
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.util.Iterator as __Iterator
__Iterator = __Iterator
import java.lang.Object as __object
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.util.Iterator as Iterator
import java.util.Spliterator as __Spliterator
__Spliterator = __Spliterator
import java.lang.Long as __long
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import java.util.stream.Stream as Stream
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
import org.lwjgl.system.linux.XConfigureEvent as __XConfigureEvent_Buffer
__Buffer = __XConfigureEvent_Buffer.Buffer
from builtins import int
 
class Buffer(pyglsystem.__StructBuffer, pyglsystem.StructBuffer, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XConfigureEvent.Buffer"""
 
    @staticmethod
    def __wrap(java_value: __Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def height(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XConfigureEvent$Buffer org.lwjgl.system.linux.XConfigureEvent$Buffer.height(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).height(__int.valueOf(arg0)))

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(__pyglsystem.StructBuffer, self).forEach(arg0)

    @overload
    def above(self) -> int:
        """public long org.lwjgl.system.linux.XConfigureEvent$Buffer.above()"""
        return int.__wrap(super(Buffer, self).above())

    @overload
    def border_width(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XConfigureEvent$Buffer org.lwjgl.system.linux.XConfigureEvent$Buffer.border_width(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).border_width(__int.valueOf(arg0)))

    @overload
    def override_redirect(self) -> bool:
        """public boolean org.lwjgl.system.linux.XConfigureEvent$Buffer.override_redirect()"""
        return bool.__wrap(super(Buffer, self).override_redirect())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0), arg1))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XConfigureEvent$Buffer.send_event()"""
        return bool.__wrap(super(Buffer, self).send_event())

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int.__wrap(super(__pyglsystem.CustomBuffer, self).address(__int.valueOf(arg0)))

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(__int.valueOf(arg0), arg1))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int.__wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(arg0))

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XConfigureEvent$Buffer.window()"""
        return int.__wrap(super(Buffer, self).window())

    @overload
    def override_redirect(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XConfigureEvent$Buffer org.lwjgl.system.linux.XConfigureEvent$Buffer.override_redirect(boolean)"""
        return 'Buffer'.__wrap(super(__Buffer, self).override_redirect(__boolean.valueOf(arg0)))

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @overload
    def above(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XConfigureEvent$Buffer org.lwjgl.system.linux.XConfigureEvent$Buffer.above(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).above(__long.valueOf(arg0)))

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XConfigureEvent$Buffer(long,int)"""
        val = __Buffer(__long.valueOf(arg0), __int.valueOf(arg1))
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def x(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XConfigureEvent$Buffer org.lwjgl.system.linux.XConfigureEvent$Buffer.x(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).x(__int.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool.__wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XConfigureEvent$Buffer org.lwjgl.system.linux.XConfigureEvent$Buffer.send_event(boolean)"""
        return 'Buffer'.__wrap(super(__Buffer, self).send_event(__boolean.valueOf(arg0)))

    @overload
    def window(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XConfigureEvent$Buffer org.lwjgl.system.linux.XConfigureEvent$Buffer.window(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).window(__long.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def border_width(self) -> int:
        """public int org.lwjgl.system.linux.XConfigureEvent$Buffer.border_width()"""
        return int.__wrap(super(Buffer, self).border_width())

    @overload
    def y(self) -> int:
        """public int org.lwjgl.system.linux.XConfigureEvent$Buffer.y()"""
        return int.__wrap(super(Buffer, self).y())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XConfigureEvent$Buffer org.lwjgl.system.linux.XConfigureEvent$Buffer.display(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).display(__long.valueOf(arg0)))

    @overload
    def width(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XConfigureEvent$Buffer org.lwjgl.system.linux.XConfigureEvent$Buffer.width(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).width(__int.valueOf(arg0)))

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).position(__int.valueOf(arg0)))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XConfigureEvent$Buffer(java.nio.ByteBuffer)"""
        val = __Buffer(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XConfigureEvent$Buffer org.lwjgl.system.linux.XConfigureEvent$Buffer.serial(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).serial(__long.valueOf(arg0)))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0)))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).clear())

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(__int.valueOf(arg0), arg1))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XConfigureEvent$Buffer.type()"""
        return int.__wrap(super(Buffer, self).type())

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).slice())

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XConfigureEvent$Buffer org.lwjgl.system.linux.XConfigureEvent$Buffer.type(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).type(__int.valueOf(arg0)))

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XConfigureEvent$Buffer.display()"""
        return int.__wrap(super(Buffer, self).display())

    @overload
    def width(self) -> int:
        """public int org.lwjgl.system.linux.XConfigureEvent$Buffer.width()"""
        return int.__wrap(super(Buffer, self).width())

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'.__wrap(super(pyglsystem.StructBuffer, self).get())

    @overload
    def height(self) -> int:
        """public int org.lwjgl.system.linux.XConfigureEvent$Buffer.height()"""
        return int.__wrap(super(Buffer, self).height())

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XConfigureEvent$Buffer.serial()"""
        return int.__wrap(super(Buffer, self).serial())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).limit(__int.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'.__wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str.__wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def x(self) -> int:
        """public int org.lwjgl.system.linux.XConfigureEvent$Buffer.x()"""
        return int.__wrap(super(Buffer, self).x())

    @overload
    def y(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XConfigureEvent$Buffer org.lwjgl.system.linux.XConfigureEvent$Buffer.y(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).y(__int.valueOf(arg0)))

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(arg0))

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).stream())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'.__wrap(super(pyglsystem.StructBuffer, self).iterator())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).slice(__int.valueOf(arg0), __int.valueOf(arg1))) 
 
 
# CLASS: org.lwjgl.system.linux.XFocusChangeEvent
from pyquantum_helper import import_once as __import_once__
from builtins import str
import java.lang.Boolean as __boolean
from pyquantum_helper import override
import java.lang.Object as __object
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import org.lwjgl.system.linux.XFocusChangeEvent as __XFocusChangeEvent
__XFocusChangeEvent = __XFocusChangeEvent
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import org.lwjgl.system.linux.XFocusChangeEvent as __XFocusChangeEvent_Buffer
__Buffer = __XFocusChangeEvent_Buffer.Buffer
import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
from builtins import int
 
class XFocusChangeEvent(pyglsystem.__Struct, pyglsystem.Struct, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XFocusChangeEvent"""
 
    @staticmethod
    def __wrap(java_value: __XFocusChangeEvent) -> 'XFocusChangeEvent':
        return XFocusChangeEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __XFocusChangeEvent):
        """
        Dynamic initializer for XFocusChangeEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XFocusChangeEvent.validate(long)"""
        __XFocusChangeEvent.validate(__long.valueOf(arg0))

    @staticmethod
    @overload
    def ndetail(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XFocusChangeEvent.ndetail(long)"""
        return int.__wrap(__XFocusChangeEvent.ndetail(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XFocusChangeEvent$Buffer org.lwjgl.system.linux.XFocusChangeEvent.malloc(int)"""
        return Buffer.__wrap(__XFocusChangeEvent.malloc(__int.valueOf(arg0)))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XFocusChangeEvent$Buffer org.lwjgl.system.linux.XFocusChangeEvent.createSafe(long,int)"""
        return Buffer.__wrap(__XFocusChangeEvent.createSafe(__long.valueOf(arg0), __int.valueOf(arg1)))

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool.__wrap(super(__pyglsystem.Struct, self).isNull(__int.valueOf(arg0)))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XFocusChangeEvent$Buffer org.lwjgl.system.linux.XFocusChangeEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XFocusChangeEvent.callocStack(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XFocusChangeEvent.nsend_event(long,int)"""
        __XFocusChangeEvent.nsend_event(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def create() -> 'XFocusChangeEvent':
        """public static org.lwjgl.system.linux.XFocusChangeEvent org.lwjgl.system.linux.XFocusChangeEvent.create()"""
        return XFocusChangeEvent.__wrap(__XFocusChangeEvent.create())

    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XFocusChangeEvent.nsend_event(long)"""
        return int.__wrap(__XFocusChangeEvent.nsend_event(__long.valueOf(arg0)))

    @overload
    def detail(self) -> int:
        """public int org.lwjgl.system.linux.XFocusChangeEvent.detail()"""
        return int.__wrap(super(XFocusChangeEvent, self).detail())

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XFocusChangeEvent$Buffer org.lwjgl.system.linux.XFocusChangeEvent.mallocStack(int)"""
        return Buffer.__wrap(__XFocusChangeEvent.mallocStack(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack() -> 'XFocusChangeEvent':
        """public static org.lwjgl.system.linux.XFocusChangeEvent org.lwjgl.system.linux.XFocusChangeEvent.callocStack()"""
        return XFocusChangeEvent.__wrap(__XFocusChangeEvent.callocStack())

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XFocusChangeEvent$Buffer org.lwjgl.system.linux.XFocusChangeEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XFocusChangeEvent.malloc(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XFocusChangeEvent.ntype(long)"""
        return int.__wrap(__XFocusChangeEvent.ntype(__long.valueOf(arg0)))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XFocusChangeEvent.type()"""
        return int.__wrap(super(XFocusChangeEvent, self).type())

    @overload
    def display(self, arg0: int) -> 'XFocusChangeEvent':
        """public org.lwjgl.system.linux.XFocusChangeEvent org.lwjgl.system.linux.XFocusChangeEvent.display(long)"""
        return 'XFocusChangeEvent'.__wrap(super(__XFocusChangeEvent, self).display(__long.valueOf(arg0)))

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XFocusChangeEvent.nserial(long)"""
        return int.__wrap(__XFocusChangeEvent.nserial(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XFocusChangeEvent$Buffer org.lwjgl.system.linux.XFocusChangeEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XFocusChangeEvent.calloc(__int.valueOf(arg0), arg1))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XFocusChangeEvent.serial()"""
        return int.__wrap(super(XFocusChangeEvent, self).serial())

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XFocusChangeEvent$Buffer org.lwjgl.system.linux.XFocusChangeEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XFocusChangeEvent.mallocStack(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XFocusChangeEvent.ntype(long,int)"""
        __XFocusChangeEvent.ntype(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XFocusChangeEvent.send_event()"""
        return bool.__wrap(super(XFocusChangeEvent, self).send_event())

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XFocusChangeEvent.window()"""
        return int.__wrap(super(XFocusChangeEvent, self).window())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def mallocStack() -> 'XFocusChangeEvent':
        """public static org.lwjgl.system.linux.XFocusChangeEvent org.lwjgl.system.linux.XFocusChangeEvent.mallocStack()"""
        return XFocusChangeEvent.__wrap(__XFocusChangeEvent.mallocStack())

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XFocusChangeEvent.nserial(long,long)"""
        __XFocusChangeEvent.nserial(__long.valueOf(arg0), __long.valueOf(arg1))

    @overload
    def mode(self) -> int:
        """public int org.lwjgl.system.linux.XFocusChangeEvent.mode()"""
        return int.__wrap(super(XFocusChangeEvent, self).mode())

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XFocusChangeEvent.display()"""
        return int.__wrap(super(XFocusChangeEvent, self).display())

    @staticmethod
    @overload
    def nwindow(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XFocusChangeEvent.nwindow(long,long)"""
        __XFocusChangeEvent.nwindow(__long.valueOf(arg0), __long.valueOf(arg1))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def type(self, arg0: int) -> 'XFocusChangeEvent':
        """public org.lwjgl.system.linux.XFocusChangeEvent org.lwjgl.system.linux.XFocusChangeEvent.type(int)"""
        return 'XFocusChangeEvent'.__wrap(super(__XFocusChangeEvent, self).type(__int.valueOf(arg0)))

    @overload
    def mode(self, arg0: int) -> 'XFocusChangeEvent':
        """public org.lwjgl.system.linux.XFocusChangeEvent org.lwjgl.system.linux.XFocusChangeEvent.mode(int)"""
        return 'XFocusChangeEvent'.__wrap(super(__XFocusChangeEvent, self).mode(__int.valueOf(arg0)))

    @overload
    def send_event(self, arg0: bool) -> 'XFocusChangeEvent':
        """public org.lwjgl.system.linux.XFocusChangeEvent org.lwjgl.system.linux.XFocusChangeEvent.send_event(boolean)"""
        return 'XFocusChangeEvent'.__wrap(super(__XFocusChangeEvent, self).send_event(__boolean.valueOf(arg0)))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).address())

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XFocusChangeEvent':
        """public static org.lwjgl.system.linux.XFocusChangeEvent org.lwjgl.system.linux.XFocusChangeEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XFocusChangeEvent.__wrap(__XFocusChangeEvent.mallocStack(arg0))

    @staticmethod
    @overload
    def nmode(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XFocusChangeEvent.nmode(long,int)"""
        __XFocusChangeEvent.nmode(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def create(arg0: int) -> 'XFocusChangeEvent':
        """public static org.lwjgl.system.linux.XFocusChangeEvent org.lwjgl.system.linux.XFocusChangeEvent.create(long)"""
        return XFocusChangeEvent.__wrap(__XFocusChangeEvent.create(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XFocusChangeEvent$Buffer org.lwjgl.system.linux.XFocusChangeEvent.calloc(int)"""
        return Buffer.__wrap(__XFocusChangeEvent.calloc(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def ndetail(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XFocusChangeEvent.ndetail(long,int)"""
        __XFocusChangeEvent.ndetail(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XFocusChangeEvent$Buffer org.lwjgl.system.linux.XFocusChangeEvent.callocStack(int)"""
        return Buffer.__wrap(__XFocusChangeEvent.callocStack(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XFocusChangeEvent':
        """public static org.lwjgl.system.linux.XFocusChangeEvent org.lwjgl.system.linux.XFocusChangeEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XFocusChangeEvent.__wrap(__XFocusChangeEvent.malloc(arg0))

    @overload
    def detail(self, arg0: int) -> 'XFocusChangeEvent':
        """public org.lwjgl.system.linux.XFocusChangeEvent org.lwjgl.system.linux.XFocusChangeEvent.detail(int)"""
        return 'XFocusChangeEvent'.__wrap(super(__XFocusChangeEvent, self).detail(__int.valueOf(arg0)))

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int, arg5: int, arg6: int) -> 'XFocusChangeEvent':
        """public org.lwjgl.system.linux.XFocusChangeEvent org.lwjgl.system.linux.XFocusChangeEvent.set(int,long,boolean,long,long,int,int)"""
        return 'XFocusChangeEvent'.__wrap(super(__XFocusChangeEvent, self).set(__int.valueOf(arg0), __long.valueOf(arg1), __boolean.valueOf(arg2), __long.valueOf(arg3), __long.valueOf(arg4), __int.valueOf(arg5), __int.valueOf(arg6)))

    @staticmethod
    @overload
    def nmode(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XFocusChangeEvent.nmode(long)"""
        return int.__wrap(__XFocusChangeEvent.nmode(__long.valueOf(arg0)))

    @overload
    def serial(self, arg0: int) -> 'XFocusChangeEvent':
        """public org.lwjgl.system.linux.XFocusChangeEvent org.lwjgl.system.linux.XFocusChangeEvent.serial(long)"""
        return 'XFocusChangeEvent'.__wrap(super(__XFocusChangeEvent, self).serial(__long.valueOf(arg0)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str.__wrap(super(pyglsystem.Pointer$Default, self).toString())

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XFocusChangeEvent.ndisplay(long)"""
        return int.__wrap(__XFocusChangeEvent.ndisplay(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XFocusChangeEvent$Buffer org.lwjgl.system.linux.XFocusChangeEvent.create(int)"""
        return Buffer.__wrap(__XFocusChangeEvent.create(__int.valueOf(arg0)))

    @overload
    def window(self, arg0: int) -> 'XFocusChangeEvent':
        """public org.lwjgl.system.linux.XFocusChangeEvent org.lwjgl.system.linux.XFocusChangeEvent.window(long)"""
        return 'XFocusChangeEvent'.__wrap(super(__XFocusChangeEvent, self).window(__long.valueOf(arg0)))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XFocusChangeEvent':
        """public static org.lwjgl.system.linux.XFocusChangeEvent org.lwjgl.system.linux.XFocusChangeEvent.createSafe(long)"""
        return XFocusChangeEvent.__wrap(__XFocusChangeEvent.createSafe(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XFocusChangeEvent':
        """public static org.lwjgl.system.linux.XFocusChangeEvent org.lwjgl.system.linux.XFocusChangeEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XFocusChangeEvent.__wrap(__XFocusChangeEvent.calloc(arg0))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def set(self, arg0: 'XFocusChangeEvent') -> 'XFocusChangeEvent':
        """public org.lwjgl.system.linux.XFocusChangeEvent org.lwjgl.system.linux.XFocusChangeEvent.set(org.lwjgl.system.linux.XFocusChangeEvent)"""
        return 'XFocusChangeEvent'.__wrap(super(__XFocusChangeEvent, self).set(arg0))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XFocusChangeEvent$Buffer org.lwjgl.system.linux.XFocusChangeEvent.create(long,int)"""
        return Buffer.__wrap(__XFocusChangeEvent.create(__long.valueOf(arg0), __int.valueOf(arg1)))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XFocusChangeEvent(java.nio.ByteBuffer)"""
        val = __XFocusChangeEvent(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XFocusChangeEvent.ndisplay(long,long)"""
        __XFocusChangeEvent.ndisplay(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def nwindow(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XFocusChangeEvent.nwindow(long)"""
        return int.__wrap(__XFocusChangeEvent.nwindow(__long.valueOf(arg0)))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XFocusChangeEvent.sizeof()"""
        return int.__wrap(super(XFocusChangeEvent, self).sizeof())

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        __Struct.validate(__long.valueOf(arg0), __int.valueOf(arg1), __int.valueOf(arg2), arg3)

    @staticmethod
    @overload
    def calloc() -> 'XFocusChangeEvent':
        """public static org.lwjgl.system.linux.XFocusChangeEvent org.lwjgl.system.linux.XFocusChangeEvent.calloc()"""
        return XFocusChangeEvent.__wrap(__XFocusChangeEvent.calloc())

    @staticmethod
    @overload
    def malloc() -> 'XFocusChangeEvent':
        """public static org.lwjgl.system.linux.XFocusChangeEvent org.lwjgl.system.linux.XFocusChangeEvent.malloc()"""
        return XFocusChangeEvent.__wrap(__XFocusChangeEvent.malloc())

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XFocusChangeEvent':
        """public static org.lwjgl.system.linux.XFocusChangeEvent org.lwjgl.system.linux.XFocusChangeEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XFocusChangeEvent.__wrap(__XFocusChangeEvent.callocStack(arg0)) 
 
 
# CLASS: org.lwjgl.system.linux.StatxTimestamp
from pyquantum_helper import import_once as __import_once__
from builtins import str
from pyquantum_helper import override
import java.lang.Object as __object
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import org.lwjgl.system.linux.StatxTimestamp as __StatxTimestamp
__StatxTimestamp = __StatxTimestamp
import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.linux.StatxTimestamp as __StatxTimestamp_Buffer
__Buffer = __StatxTimestamp_Buffer.Buffer
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
from builtins import int
 
class StatxTimestamp(pyglsystem.__Struct, pyglsystem.Struct, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.StatxTimestamp"""
 
    @staticmethod
    def __wrap(java_value: __StatxTimestamp) -> 'StatxTimestamp':
        return StatxTimestamp(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __StatxTimestamp):
        """
        Dynamic initializer for StatxTimestamp.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def calloc() -> 'StatxTimestamp':
        """public static org.lwjgl.system.linux.StatxTimestamp org.lwjgl.system.linux.StatxTimestamp.calloc()"""
        return StatxTimestamp.__wrap(__StatxTimestamp.calloc())

    @staticmethod
    @overload
    def malloc() -> 'StatxTimestamp':
        """public static org.lwjgl.system.linux.StatxTimestamp org.lwjgl.system.linux.StatxTimestamp.malloc()"""
        return StatxTimestamp.__wrap(__StatxTimestamp.malloc())

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.StatxTimestamp$Buffer org.lwjgl.system.linux.StatxTimestamp.create(long,int)"""
        return Buffer.__wrap(__StatxTimestamp.create(__long.valueOf(arg0), __int.valueOf(arg1)))

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'StatxTimestamp':
        """public static org.lwjgl.system.linux.StatxTimestamp org.lwjgl.system.linux.StatxTimestamp.createSafe(long)"""
        return StatxTimestamp.__wrap(__StatxTimestamp.createSafe(__long.valueOf(arg0)))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).address())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def ntv_sec(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.StatxTimestamp.ntv_sec(long,long)"""
        __StatxTimestamp.ntv_sec(__long.valueOf(arg0), __long.valueOf(arg1))

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool.__wrap(super(__pyglsystem.Struct, self).isNull(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.StatxTimestamp$Buffer org.lwjgl.system.linux.StatxTimestamp.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__StatxTimestamp.malloc(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'StatxTimestamp':
        """public static org.lwjgl.system.linux.StatxTimestamp org.lwjgl.system.linux.StatxTimestamp.calloc(org.lwjgl.system.MemoryStack)"""
        return StatxTimestamp.__wrap(__StatxTimestamp.calloc(arg0))

    @overload
    def set(self, arg0: int, arg1: int) -> 'StatxTimestamp':
        """public org.lwjgl.system.linux.StatxTimestamp org.lwjgl.system.linux.StatxTimestamp.set(long,int)"""
        return 'StatxTimestamp'.__wrap(super(__StatxTimestamp, self).set(__long.valueOf(arg0), __int.valueOf(arg1)))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def set(self, arg0: 'StatxTimestamp') -> 'StatxTimestamp':
        """public org.lwjgl.system.linux.StatxTimestamp org.lwjgl.system.linux.StatxTimestamp.set(org.lwjgl.system.linux.StatxTimestamp)"""
        return 'StatxTimestamp'.__wrap(super(__StatxTimestamp, self).set(arg0))

    @overload
    def tv_sec(self, arg0: int) -> 'StatxTimestamp':
        """public org.lwjgl.system.linux.StatxTimestamp org.lwjgl.system.linux.StatxTimestamp.tv_sec(long)"""
        return 'StatxTimestamp'.__wrap(super(__StatxTimestamp, self).tv_sec(__long.valueOf(arg0)))

    @overload
    def tv_nsec(self) -> int:
        """public int org.lwjgl.system.linux.StatxTimestamp.tv_nsec()"""
        return int.__wrap(super(StatxTimestamp, self).tv_nsec())

    @staticmethod
    @overload
    def ntv_nsec(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.StatxTimestamp.ntv_nsec(long)"""
        return int.__wrap(__StatxTimestamp.ntv_nsec(__long.valueOf(arg0)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str.__wrap(super(pyglsystem.Pointer$Default, self).toString())

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.StatxTimestamp$Buffer org.lwjgl.system.linux.StatxTimestamp.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__StatxTimestamp.calloc(__int.valueOf(arg0), arg1))

    @overload
    def tv_sec(self) -> int:
        """public long org.lwjgl.system.linux.StatxTimestamp.tv_sec()"""
        return int.__wrap(super(StatxTimestamp, self).tv_sec())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.StatxTimestamp(java.nio.ByteBuffer)"""
        val = __StatxTimestamp(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @staticmethod
    @overload
    def ntv_nsec(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.StatxTimestamp.ntv_nsec(long,int)"""
        __StatxTimestamp.ntv_nsec(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'StatxTimestamp':
        """public static org.lwjgl.system.linux.StatxTimestamp org.lwjgl.system.linux.StatxTimestamp.malloc(org.lwjgl.system.MemoryStack)"""
        return StatxTimestamp.__wrap(__StatxTimestamp.malloc(arg0))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @staticmethod
    @overload
    def create() -> 'StatxTimestamp':
        """public static org.lwjgl.system.linux.StatxTimestamp org.lwjgl.system.linux.StatxTimestamp.create()"""
        return StatxTimestamp.__wrap(__StatxTimestamp.create())

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.StatxTimestamp$Buffer org.lwjgl.system.linux.StatxTimestamp.create(int)"""
        return Buffer.__wrap(__StatxTimestamp.create(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def n__reserved(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.StatxTimestamp.n__reserved(long)"""
        return int.__wrap(__StatxTimestamp.n__reserved(__long.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.StatxTimestamp$Buffer org.lwjgl.system.linux.StatxTimestamp.calloc(int)"""
        return Buffer.__wrap(__StatxTimestamp.calloc(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.StatxTimestamp$Buffer org.lwjgl.system.linux.StatxTimestamp.createSafe(long,int)"""
        return Buffer.__wrap(__StatxTimestamp.createSafe(__long.valueOf(arg0), __int.valueOf(arg1)))

    @overload
    def tv_nsec(self, arg0: int) -> 'StatxTimestamp':
        """public org.lwjgl.system.linux.StatxTimestamp org.lwjgl.system.linux.StatxTimestamp.tv_nsec(int)"""
        return 'StatxTimestamp'.__wrap(super(__StatxTimestamp, self).tv_nsec(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def n__reserved(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.StatxTimestamp.n__reserved(long,int)"""
        __StatxTimestamp.n__reserved(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def ntv_sec(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.StatxTimestamp.ntv_sec(long)"""
        return int.__wrap(__StatxTimestamp.ntv_sec(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'StatxTimestamp':
        """public static org.lwjgl.system.linux.StatxTimestamp org.lwjgl.system.linux.StatxTimestamp.create(long)"""
        return StatxTimestamp.__wrap(__StatxTimestamp.create(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.StatxTimestamp$Buffer org.lwjgl.system.linux.StatxTimestamp.malloc(int)"""
        return Buffer.__wrap(__StatxTimestamp.malloc(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        __Struct.validate(__long.valueOf(arg0), __int.valueOf(arg1), __int.valueOf(arg2), arg3)

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.StatxTimestamp.sizeof()"""
        return int.__wrap(super(StatxTimestamp, self).sizeof()) 
 
 
# CLASS: org.lwjgl.system.linux.Flock
from pyquantum_helper import import_once as __import_once__
from builtins import str
from pyquantum_helper import override
import java.lang.Object as __object
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import org.lwjgl.system.linux.Flock as __Flock
__Flock = __Flock
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Short as __short
import java.lang.Object as __Object
__Object = __Object
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
import org.lwjgl.system.linux.Flock as __Flock_Buffer
__Buffer = __Flock_Buffer.Buffer
from builtins import bool
from builtins import int
 
class Flock(pyglsystem.__Struct, pyglsystem.Struct, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.Flock"""
 
    @staticmethod
    def __wrap(java_value: __Flock) -> 'Flock':
        return Flock(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Flock):
        """
        Dynamic initializer for Flock.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.Flock$Buffer org.lwjgl.system.linux.Flock.create(int)"""
        return Buffer.__wrap(__Flock.create(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'Flock':
        """public static org.lwjgl.system.linux.Flock org.lwjgl.system.linux.Flock.calloc(org.lwjgl.system.MemoryStack)"""
        return Flock.__wrap(__Flock.calloc(arg0))

    @staticmethod
    @overload
    def create() -> 'Flock':
        """public static org.lwjgl.system.linux.Flock org.lwjgl.system.linux.Flock.create()"""
        return Flock.__wrap(__Flock.create())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'Flock':
        """public static org.lwjgl.system.linux.Flock org.lwjgl.system.linux.Flock.malloc(org.lwjgl.system.MemoryStack)"""
        return Flock.__wrap(__Flock.malloc(arg0))

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool.__wrap(super(__pyglsystem.Struct, self).isNull(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.Flock$Buffer org.lwjgl.system.linux.Flock.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__Flock.malloc(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def create(arg0: int) -> 'Flock':
        """public static org.lwjgl.system.linux.Flock org.lwjgl.system.linux.Flock.create(long)"""
        return Flock.__wrap(__Flock.create(__long.valueOf(arg0)))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def l_len(self) -> int:
        """public long org.lwjgl.system.linux.Flock.l_len()"""
        return int.__wrap(super(Flock, self).l_len())

    @overload
    def l_len(self, arg0: int) -> 'Flock':
        """public org.lwjgl.system.linux.Flock org.lwjgl.system.linux.Flock.l_len(long)"""
        return 'Flock'.__wrap(super(__Flock, self).l_len(__long.valueOf(arg0)))

    @overload
    def l_type(self, arg0: int) -> 'Flock':
        """public org.lwjgl.system.linux.Flock org.lwjgl.system.linux.Flock.l_type(short)"""
        return 'Flock'.__wrap(super(__Flock, self).l_type(__short.valueOf(arg0)))

    @overload
    def l_pid(self, arg0: int) -> 'Flock':
        """public org.lwjgl.system.linux.Flock org.lwjgl.system.linux.Flock.l_pid(int)"""
        return 'Flock'.__wrap(super(__Flock, self).l_pid(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nl_whence(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Flock.nl_whence(long,short)"""
        __Flock.nl_whence(__long.valueOf(arg0), __short.valueOf(arg1))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @staticmethod
    @overload
    def nl_start(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Flock.nl_start(long,long)"""
        __Flock.nl_start(__long.valueOf(arg0), __long.valueOf(arg1))

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @staticmethod
    @overload
    def nl_start(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.Flock.nl_start(long)"""
        return int.__wrap(__Flock.nl_start(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.Flock$Buffer org.lwjgl.system.linux.Flock.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__Flock.calloc(__int.valueOf(arg0), arg1))

    @overload
    def l_whence(self, arg0: int) -> 'Flock':
        """public org.lwjgl.system.linux.Flock org.lwjgl.system.linux.Flock.l_whence(short)"""
        return 'Flock'.__wrap(super(__Flock, self).l_whence(__short.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.Flock(java.nio.ByteBuffer)"""
        val = __Flock(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.Flock$Buffer org.lwjgl.system.linux.Flock.malloc(int)"""
        return Buffer.__wrap(__Flock.malloc(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc() -> 'Flock':
        """public static org.lwjgl.system.linux.Flock org.lwjgl.system.linux.Flock.calloc()"""
        return Flock.__wrap(__Flock.calloc())

    @overload
    def set(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int) -> 'Flock':
        """public org.lwjgl.system.linux.Flock org.lwjgl.system.linux.Flock.set(short,short,long,long,int)"""
        return 'Flock'.__wrap(super(__Flock, self).set(__short.valueOf(arg0), __short.valueOf(arg1), __long.valueOf(arg2), __long.valueOf(arg3), __int.valueOf(arg4)))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).address())

    @staticmethod
    @overload
    def nl_len(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.Flock.nl_len(long)"""
        return int.__wrap(__Flock.nl_len(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.Flock$Buffer org.lwjgl.system.linux.Flock.create(long,int)"""
        return Buffer.__wrap(__Flock.create(__long.valueOf(arg0), __int.valueOf(arg1)))

    @overload
    def l_start(self, arg0: int) -> 'Flock':
        """public org.lwjgl.system.linux.Flock org.lwjgl.system.linux.Flock.l_start(long)"""
        return 'Flock'.__wrap(super(__Flock, self).l_start(__long.valueOf(arg0)))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.Flock.sizeof()"""
        return int.__wrap(super(Flock, self).sizeof())

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.Flock$Buffer org.lwjgl.system.linux.Flock.calloc(int)"""
        return Buffer.__wrap(__Flock.calloc(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.Flock$Buffer org.lwjgl.system.linux.Flock.createSafe(long,int)"""
        return Buffer.__wrap(__Flock.createSafe(__long.valueOf(arg0), __int.valueOf(arg1)))

    @overload
    def l_type(self) -> int:
        """public short org.lwjgl.system.linux.Flock.l_type()"""
        return int.__wrap(super(Flock, self).l_type())

    @staticmethod
    @overload
    def nl_len(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Flock.nl_len(long,long)"""
        __Flock.nl_len(__long.valueOf(arg0), __long.valueOf(arg1))

    @overload
    def set(self, arg0: 'Flock') -> 'Flock':
        """public org.lwjgl.system.linux.Flock org.lwjgl.system.linux.Flock.set(org.lwjgl.system.linux.Flock)"""
        return 'Flock'.__wrap(super(__Flock, self).set(arg0))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str.__wrap(super(pyglsystem.Pointer$Default, self).toString())

    @staticmethod
    @overload
    def nl_type(arg0: int) -> int:
        """public static short org.lwjgl.system.linux.Flock.nl_type(long)"""
        return int.__wrap(__Flock.nl_type(__long.valueOf(arg0)))

    @overload
    def l_start(self) -> int:
        """public long org.lwjgl.system.linux.Flock.l_start()"""
        return int.__wrap(super(Flock, self).l_start())

    @staticmethod
    @overload
    def malloc() -> 'Flock':
        """public static org.lwjgl.system.linux.Flock org.lwjgl.system.linux.Flock.malloc()"""
        return Flock.__wrap(__Flock.malloc())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @staticmethod
    @overload
    def nl_pid(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.Flock.nl_pid(long)"""
        return int.__wrap(__Flock.nl_pid(__long.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'Flock':
        """public static org.lwjgl.system.linux.Flock org.lwjgl.system.linux.Flock.createSafe(long)"""
        return Flock.__wrap(__Flock.createSafe(__long.valueOf(arg0)))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @staticmethod
    @overload
    def nl_pid(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Flock.nl_pid(long,int)"""
        __Flock.nl_pid(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def nl_whence(arg0: int) -> int:
        """public static short org.lwjgl.system.linux.Flock.nl_whence(long)"""
        return int.__wrap(__Flock.nl_whence(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nl_type(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Flock.nl_type(long,short)"""
        __Flock.nl_type(__long.valueOf(arg0), __short.valueOf(arg1))

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        __Struct.validate(__long.valueOf(arg0), __int.valueOf(arg1), __int.valueOf(arg2), arg3)

    @overload
    def l_whence(self) -> int:
        """public short org.lwjgl.system.linux.Flock.l_whence()"""
        return int.__wrap(super(Flock, self).l_whence())

    @overload
    def l_pid(self) -> int:
        """public int org.lwjgl.system.linux.Flock.l_pid()"""
        return int.__wrap(super(Flock, self).l_pid()) 
 
 
# CLASS: org.lwjgl.system.linux.Stat
from builtins import str
import java.lang.CharSequence as CharSequence
from pyquantum_helper import override
import java.lang.Object as __object
from builtins import type
import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Integer as __int
import org.lwjgl.system.linux.Stat as __Stat
__Stat = __Stat
from builtins import bool
from builtins import int
 
class Stat():
    """org.lwjgl.system.linux.Stat"""
 
    @staticmethod
    def __wrap(java_value: __Stat) -> 'Stat':
        return Stat(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Stat):
        """
        Dynamic initializer for Stat.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def nfstat(arg0: int, arg1: int) -> int:
        """public static native int org.lwjgl.system.linux.Stat.nfstat(int,long)"""
        return int.__wrap(__Stat.nfstat(__int.valueOf(arg0), __long.valueOf(arg1)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.lang.Object.toString()"""
        return str.__wrap(super(object, self).toString())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def nstat(arg0: int, arg1: int) -> int:
        """public static native int org.lwjgl.system.linux.Stat.nstat(long,long)"""
        return int.__wrap(__Stat.nstat(__long.valueOf(arg0), __long.valueOf(arg1)))

    @staticmethod
    @overload
    def fstat(arg0: int, arg1: int) -> int:
        """public static int org.lwjgl.system.linux.Stat.fstat(int,long)"""
        return int.__wrap(__Stat.fstat(__int.valueOf(arg0), __long.valueOf(arg1)))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @staticmethod
    @overload
    def stat(arg0: 'ByteBuffer', arg1: int) -> int:
        """public static int org.lwjgl.system.linux.Stat.stat(java.nio.ByteBuffer,long)"""
        return int.__wrap(__Stat.stat(arg0, __long.valueOf(arg1)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0))

    @staticmethod
    @overload
    def stat(arg0: 'CharSequence', arg1: int) -> int:
        """public static int org.lwjgl.system.linux.Stat.stat(java.lang.CharSequence,long)"""
        return int.__wrap(__Stat.stat(arg0, __long.valueOf(arg1))) 
 
 
# CLASS: org.lwjgl.system.linux.XSetWindowAttributes$Buffer
from pyquantum_helper import import_once as __import_once__
import java.lang.Boolean as __boolean
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import java.util.stream.Stream as __Stream
__Stream = __Stream
import org.lwjgl.system.StructBuffer as __StructBuffer
__StructBuffer = __StructBuffer
import java.util.function.Consumer as Consumer
import org.lwjgl.system.linux.XSetWindowAttributes as __XSetWindowAttributes_Buffer
__Buffer = __XSetWindowAttributes_Buffer.Buffer
import java.util.Spliterator as Spliterator
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.CustomBuffer as __CustomBuffer
__CustomBuffer = __CustomBuffer
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.util.Iterator as __Iterator
__Iterator = __Iterator
import java.lang.Object as __object
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.util.Iterator as Iterator
import java.util.Spliterator as __Spliterator
__Spliterator = __Spliterator
import java.lang.Long as __long
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import java.util.stream.Stream as Stream
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import int
 
class Buffer(pyglsystem.__StructBuffer, pyglsystem.StructBuffer, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XSetWindowAttributes.Buffer"""
 
    @staticmethod
    def __wrap(java_value: __Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def bit_gravity(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSetWindowAttributes$Buffer org.lwjgl.system.linux.XSetWindowAttributes$Buffer.bit_gravity(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).bit_gravity(__int.valueOf(arg0)))

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(__pyglsystem.StructBuffer, self).forEach(arg0)

    @overload
    def border_pixel(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSetWindowAttributes$Buffer org.lwjgl.system.linux.XSetWindowAttributes$Buffer.border_pixel(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).border_pixel(__long.valueOf(arg0)))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0), arg1))

    @overload
    def backing_planes(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSetWindowAttributes$Buffer org.lwjgl.system.linux.XSetWindowAttributes$Buffer.backing_planes(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).backing_planes(__long.valueOf(arg0)))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address0())

    @overload
    def cursor(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSetWindowAttributes$Buffer org.lwjgl.system.linux.XSetWindowAttributes$Buffer.cursor(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).cursor(__long.valueOf(arg0)))

    @overload
    def backing_planes(self) -> int:
        """public long org.lwjgl.system.linux.XSetWindowAttributes$Buffer.backing_planes()"""
        return int.__wrap(super(Buffer, self).backing_planes())

    @overload
    def do_not_propagate_mask(self) -> int:
        """public long org.lwjgl.system.linux.XSetWindowAttributes$Buffer.do_not_propagate_mask()"""
        return int.__wrap(super(Buffer, self).do_not_propagate_mask())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int.__wrap(super(__pyglsystem.CustomBuffer, self).address(__int.valueOf(arg0)))

    @overload
    def win_gravity(self) -> int:
        """public int org.lwjgl.system.linux.XSetWindowAttributes$Buffer.win_gravity()"""
        return int.__wrap(super(Buffer, self).win_gravity())

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def colormap(self) -> int:
        """public long org.lwjgl.system.linux.XSetWindowAttributes$Buffer.colormap()"""
        return int.__wrap(super(Buffer, self).colormap())

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(__int.valueOf(arg0), arg1))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int.__wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @overload
    def background_pixel(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSetWindowAttributes$Buffer org.lwjgl.system.linux.XSetWindowAttributes$Buffer.background_pixel(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).background_pixel(__long.valueOf(arg0)))

    @overload
    def win_gravity(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSetWindowAttributes$Buffer org.lwjgl.system.linux.XSetWindowAttributes$Buffer.win_gravity(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).win_gravity(__int.valueOf(arg0)))

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(arg0))

    @overload
    def bit_gravity(self) -> int:
        """public int org.lwjgl.system.linux.XSetWindowAttributes$Buffer.bit_gravity()"""
        return int.__wrap(super(Buffer, self).bit_gravity())

    @overload
    def save_under(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XSetWindowAttributes$Buffer org.lwjgl.system.linux.XSetWindowAttributes$Buffer.save_under(boolean)"""
        return 'Buffer'.__wrap(super(__Buffer, self).save_under(__boolean.valueOf(arg0)))

    @overload
    def backing_pixel(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSetWindowAttributes$Buffer org.lwjgl.system.linux.XSetWindowAttributes$Buffer.backing_pixel(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).backing_pixel(__long.valueOf(arg0)))

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XSetWindowAttributes$Buffer(long,int)"""
        val = __Buffer(__long.valueOf(arg0), __int.valueOf(arg1))
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @overload
    def background_pixmap(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSetWindowAttributes$Buffer org.lwjgl.system.linux.XSetWindowAttributes$Buffer.background_pixmap(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).background_pixmap(__long.valueOf(arg0)))

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def colormap(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSetWindowAttributes$Buffer org.lwjgl.system.linux.XSetWindowAttributes$Buffer.colormap(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).colormap(__long.valueOf(arg0)))

    @overload
    def border_pixel(self) -> int:
        """public long org.lwjgl.system.linux.XSetWindowAttributes$Buffer.border_pixel()"""
        return int.__wrap(super(Buffer, self).border_pixel())

    @overload
    def do_not_propagate_mask(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSetWindowAttributes$Buffer org.lwjgl.system.linux.XSetWindowAttributes$Buffer.do_not_propagate_mask(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).do_not_propagate_mask(__long.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool.__wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def backing_pixel(self) -> int:
        """public long org.lwjgl.system.linux.XSetWindowAttributes$Buffer.backing_pixel()"""
        return int.__wrap(super(Buffer, self).backing_pixel())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).position(__int.valueOf(arg0)))

    @overload
    def backing_store(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSetWindowAttributes$Buffer org.lwjgl.system.linux.XSetWindowAttributes$Buffer.backing_store(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).backing_store(__int.valueOf(arg0)))

    @overload
    def save_under(self) -> bool:
        """public boolean org.lwjgl.system.linux.XSetWindowAttributes$Buffer.save_under()"""
        return bool.__wrap(super(Buffer, self).save_under())

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0)))

    @overload
    def override_redirect(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XSetWindowAttributes$Buffer org.lwjgl.system.linux.XSetWindowAttributes$Buffer.override_redirect(boolean)"""
        return 'Buffer'.__wrap(super(__Buffer, self).override_redirect(__boolean.valueOf(arg0)))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).clear())

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(__int.valueOf(arg0), arg1))

    @overload
    def background_pixmap(self) -> int:
        """public long org.lwjgl.system.linux.XSetWindowAttributes$Buffer.background_pixmap()"""
        return int.__wrap(super(Buffer, self).background_pixmap())

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address())

    @overload
    def override_redirect(self) -> bool:
        """public boolean org.lwjgl.system.linux.XSetWindowAttributes$Buffer.override_redirect()"""
        return bool.__wrap(super(Buffer, self).override_redirect())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).slice())

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XSetWindowAttributes$Buffer(java.nio.ByteBuffer)"""
        val = __Buffer(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def backing_store(self) -> int:
        """public int org.lwjgl.system.linux.XSetWindowAttributes$Buffer.backing_store()"""
        return int.__wrap(super(Buffer, self).backing_store())

    @overload
    def border_pixmap(self) -> int:
        """public long org.lwjgl.system.linux.XSetWindowAttributes$Buffer.border_pixmap()"""
        return int.__wrap(super(Buffer, self).border_pixmap())

    @overload
    def event_mask(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSetWindowAttributes$Buffer org.lwjgl.system.linux.XSetWindowAttributes$Buffer.event_mask(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).event_mask(__long.valueOf(arg0)))

    @overload
    def event_mask(self) -> int:
        """public long org.lwjgl.system.linux.XSetWindowAttributes$Buffer.event_mask()"""
        return int.__wrap(super(Buffer, self).event_mask())

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'.__wrap(super(pyglsystem.StructBuffer, self).get())

    @overload
    def background_pixel(self) -> int:
        """public long org.lwjgl.system.linux.XSetWindowAttributes$Buffer.background_pixel()"""
        return int.__wrap(super(Buffer, self).background_pixel())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).limit(__int.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).reset())

    @overload
    def border_pixmap(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSetWindowAttributes$Buffer org.lwjgl.system.linux.XSetWindowAttributes$Buffer.border_pixmap(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).border_pixmap(__long.valueOf(arg0)))

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'.__wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str.__wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(arg0))

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).stream())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @overload
    def cursor(self) -> int:
        """public long org.lwjgl.system.linux.XSetWindowAttributes$Buffer.cursor()"""
        return int.__wrap(super(Buffer, self).cursor())

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'.__wrap(super(pyglsystem.StructBuffer, self).iterator())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).slice(__int.valueOf(arg0), __int.valueOf(arg1))) 
 
 
# CLASS: org.lwjgl.system.linux.XFocusChangeEvent$Buffer
from pyquantum_helper import import_once as __import_once__
import java.lang.Boolean as __boolean
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import java.util.stream.Stream as __Stream
__Stream = __Stream
import org.lwjgl.system.StructBuffer as __StructBuffer
__StructBuffer = __StructBuffer
import org.lwjgl.system.linux.XFocusChangeEvent as __XFocusChangeEvent_Buffer
__Buffer = __XFocusChangeEvent_Buffer.Buffer
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.CustomBuffer as __CustomBuffer
__CustomBuffer = __CustomBuffer
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.util.Iterator as __Iterator
__Iterator = __Iterator
import java.lang.Object as __object
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.util.Iterator as Iterator
import java.util.Spliterator as __Spliterator
__Spliterator = __Spliterator
import java.lang.Long as __long
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import java.util.stream.Stream as Stream
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import int
 
class Buffer(pyglsystem.__StructBuffer, pyglsystem.StructBuffer, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XFocusChangeEvent.Buffer"""
 
    @staticmethod
    def __wrap(java_value: __Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(arg0))

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XFocusChangeEvent$Buffer.window()"""
        return int.__wrap(super(Buffer, self).window())

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(__pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0), arg1))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int.__wrap(super(__pyglsystem.CustomBuffer, self).address(__int.valueOf(arg0)))

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(__int.valueOf(arg0), arg1))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int.__wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XFocusChangeEvent$Buffer.display()"""
        return int.__wrap(super(Buffer, self).display())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(arg0))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XFocusChangeEvent$Buffer(java.nio.ByteBuffer)"""
        val = __Buffer(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def detail(self) -> int:
        """public int org.lwjgl.system.linux.XFocusChangeEvent$Buffer.detail()"""
        return int.__wrap(super(Buffer, self).detail())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XFocusChangeEvent$Buffer org.lwjgl.system.linux.XFocusChangeEvent$Buffer.display(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).display(__long.valueOf(arg0)))

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def mode(self) -> int:
        """public int org.lwjgl.system.linux.XFocusChangeEvent$Buffer.mode()"""
        return int.__wrap(super(Buffer, self).mode())

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool.__wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XFocusChangeEvent$Buffer(long,int)"""
        val = __Buffer(__long.valueOf(arg0), __int.valueOf(arg1))
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def mode(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XFocusChangeEvent$Buffer org.lwjgl.system.linux.XFocusChangeEvent$Buffer.mode(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).mode(__int.valueOf(arg0)))

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XFocusChangeEvent$Buffer org.lwjgl.system.linux.XFocusChangeEvent$Buffer.send_event(boolean)"""
        return 'Buffer'.__wrap(super(__Buffer, self).send_event(__boolean.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XFocusChangeEvent$Buffer org.lwjgl.system.linux.XFocusChangeEvent$Buffer.type(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).type(__int.valueOf(arg0)))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XFocusChangeEvent$Buffer.send_event()"""
        return bool.__wrap(super(Buffer, self).send_event())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).position(__int.valueOf(arg0)))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XFocusChangeEvent$Buffer.type()"""
        return int.__wrap(super(Buffer, self).type())

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0)))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).clear())

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(__int.valueOf(arg0), arg1))

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address())

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XFocusChangeEvent$Buffer org.lwjgl.system.linux.XFocusChangeEvent$Buffer.serial(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).serial(__long.valueOf(arg0)))

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).slice())

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).compact())

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'.__wrap(super(pyglsystem.StructBuffer, self).get())

    @overload
    def detail(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XFocusChangeEvent$Buffer org.lwjgl.system.linux.XFocusChangeEvent$Buffer.detail(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).detail(__int.valueOf(arg0)))

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).limit(__int.valueOf(arg0)))

    @overload
    def window(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XFocusChangeEvent$Buffer org.lwjgl.system.linux.XFocusChangeEvent$Buffer.window(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).window(__long.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'.__wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str.__wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(arg0))

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).stream())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XFocusChangeEvent$Buffer.serial()"""
        return int.__wrap(super(Buffer, self).serial())

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'.__wrap(super(pyglsystem.StructBuffer, self).iterator())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).slice(__int.valueOf(arg0), __int.valueOf(arg1))) 
 
 
# CLASS: org.lwjgl.system.linux.EpollData
from pyquantum_helper import import_once as __import_once__
from builtins import str
from pyquantum_helper import override
import java.lang.Object as __object
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import org.lwjgl.system.linux.EpollData as __EpollData_Buffer
__Buffer = __EpollData_Buffer.Buffer
import org.lwjgl.system.linux.EpollData as __EpollData
__EpollData = __EpollData
import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
from builtins import int
 
class EpollData(pyglsystem.__Struct, pyglsystem.Struct, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.EpollData"""
 
    @staticmethod
    def __wrap(java_value: __EpollData) -> 'EpollData':
        return EpollData(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __EpollData):
        """
        Dynamic initializer for EpollData.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def nptr(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.EpollData.nptr(long,long)"""
        __EpollData.nptr(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def nu32(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.EpollData.nu32(long)"""
        return int.__wrap(__EpollData.nu32(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nu64(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.EpollData.nu64(long,long)"""
        __EpollData.nu64(__long.valueOf(arg0), __long.valueOf(arg1))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.EpollData(java.nio.ByteBuffer)"""
        val = __EpollData(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def ptr(self) -> int:
        """public long org.lwjgl.system.linux.EpollData.ptr()"""
        return int.__wrap(super(EpollData, self).ptr())

    @overload
    def ptr(self, arg0: int) -> 'EpollData':
        """public org.lwjgl.system.linux.EpollData org.lwjgl.system.linux.EpollData.ptr(long)"""
        return 'EpollData'.__wrap(super(__EpollData, self).ptr(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.EpollData$Buffer org.lwjgl.system.linux.EpollData.malloc(int)"""
        return Buffer.__wrap(__EpollData.malloc(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'EpollData':
        """public static org.lwjgl.system.linux.EpollData org.lwjgl.system.linux.EpollData.malloc(org.lwjgl.system.MemoryStack)"""
        return EpollData.__wrap(__EpollData.malloc(arg0))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).address())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool.__wrap(super(__pyglsystem.Struct, self).isNull(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.EpollData$Buffer org.lwjgl.system.linux.EpollData.create(long,int)"""
        return Buffer.__wrap(__EpollData.create(__long.valueOf(arg0), __int.valueOf(arg1)))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def fd(self) -> int:
        """public int org.lwjgl.system.linux.EpollData.fd()"""
        return int.__wrap(super(EpollData, self).fd())

    @overload
    def u32(self, arg0: int) -> 'EpollData':
        """public org.lwjgl.system.linux.EpollData org.lwjgl.system.linux.EpollData.u32(int)"""
        return 'EpollData'.__wrap(super(__EpollData, self).u32(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nu32(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.EpollData.nu32(long,int)"""
        __EpollData.nu32(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def nfd(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.EpollData.nfd(long,int)"""
        __EpollData.nfd(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def fd(self, arg0: int) -> 'EpollData':
        """public org.lwjgl.system.linux.EpollData org.lwjgl.system.linux.EpollData.fd(int)"""
        return 'EpollData'.__wrap(super(__EpollData, self).fd(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc() -> 'EpollData':
        """public static org.lwjgl.system.linux.EpollData org.lwjgl.system.linux.EpollData.malloc()"""
        return EpollData.__wrap(__EpollData.malloc())

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.EpollData$Buffer org.lwjgl.system.linux.EpollData.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__EpollData.calloc(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.EpollData$Buffer org.lwjgl.system.linux.EpollData.create(int)"""
        return Buffer.__wrap(__EpollData.create(__int.valueOf(arg0)))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.EpollData.sizeof()"""
        return int.__wrap(super(EpollData, self).sizeof())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str.__wrap(super(pyglsystem.Pointer$Default, self).toString())

    @staticmethod
    @overload
    def create() -> 'EpollData':
        """public static org.lwjgl.system.linux.EpollData org.lwjgl.system.linux.EpollData.create()"""
        return EpollData.__wrap(__EpollData.create())

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.EpollData$Buffer org.lwjgl.system.linux.EpollData.calloc(int)"""
        return Buffer.__wrap(__EpollData.calloc(__int.valueOf(arg0)))

    @overload
    def u64(self) -> int:
        """public long org.lwjgl.system.linux.EpollData.u64()"""
        return int.__wrap(super(EpollData, self).u64())

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'EpollData':
        """public static org.lwjgl.system.linux.EpollData org.lwjgl.system.linux.EpollData.calloc(org.lwjgl.system.MemoryStack)"""
        return EpollData.__wrap(__EpollData.calloc(arg0))

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.EpollData$Buffer org.lwjgl.system.linux.EpollData.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__EpollData.malloc(__int.valueOf(arg0), arg1))

    @overload
    def u64(self, arg0: int) -> 'EpollData':
        """public org.lwjgl.system.linux.EpollData org.lwjgl.system.linux.EpollData.u64(long)"""
        return 'EpollData'.__wrap(super(__EpollData, self).u64(__long.valueOf(arg0)))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'EpollData':
        """public static org.lwjgl.system.linux.EpollData org.lwjgl.system.linux.EpollData.createSafe(long)"""
        return EpollData.__wrap(__EpollData.createSafe(__long.valueOf(arg0)))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @staticmethod
    @overload
    def create(arg0: int) -> 'EpollData':
        """public static org.lwjgl.system.linux.EpollData org.lwjgl.system.linux.EpollData.create(long)"""
        return EpollData.__wrap(__EpollData.create(__long.valueOf(arg0)))

    @overload
    def set(self, arg0: 'EpollData') -> 'EpollData':
        """public org.lwjgl.system.linux.EpollData org.lwjgl.system.linux.EpollData.set(org.lwjgl.system.linux.EpollData)"""
        return 'EpollData'.__wrap(super(__EpollData, self).set(arg0))

    @overload
    def u32(self) -> int:
        """public int org.lwjgl.system.linux.EpollData.u32()"""
        return int.__wrap(super(EpollData, self).u32())

    @staticmethod
    @overload
    def nfd(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.EpollData.nfd(long)"""
        return int.__wrap(__EpollData.nfd(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.EpollData$Buffer org.lwjgl.system.linux.EpollData.createSafe(long,int)"""
        return Buffer.__wrap(__EpollData.createSafe(__long.valueOf(arg0), __int.valueOf(arg1)))

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        __Struct.validate(__long.valueOf(arg0), __int.valueOf(arg1), __int.valueOf(arg2), arg3)

    @staticmethod
    @overload
    def nu64(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.EpollData.nu64(long)"""
        return int.__wrap(__EpollData.nu64(__long.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def calloc() -> 'EpollData':
        """public static org.lwjgl.system.linux.EpollData org.lwjgl.system.linux.EpollData.calloc()"""
        return EpollData.__wrap(__EpollData.calloc())

    @staticmethod
    @overload
    def nptr(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.EpollData.nptr(long)"""
        return int.__wrap(__EpollData.nptr(__long.valueOf(arg0))) 
 
 
# CLASS: org.lwjgl.system.linux.XMapEvent$Buffer
from pyquantum_helper import import_once as __import_once__
import java.lang.Boolean as __boolean
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import java.util.stream.Stream as __Stream
__Stream = __Stream
import org.lwjgl.system.StructBuffer as __StructBuffer
__StructBuffer = __StructBuffer
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.CustomBuffer as __CustomBuffer
__CustomBuffer = __CustomBuffer
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.util.Iterator as __Iterator
__Iterator = __Iterator
import java.lang.Object as __object
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.util.Iterator as Iterator
import java.util.Spliterator as __Spliterator
__Spliterator = __Spliterator
import org.lwjgl.system.linux.XMapEvent as __XMapEvent_Buffer
__Buffer = __XMapEvent_Buffer.Buffer
import java.lang.Long as __long
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import java.util.stream.Stream as Stream
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import int
 
class Buffer(pyglsystem.__StructBuffer, pyglsystem.StructBuffer, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XMapEvent.Buffer"""
 
    @staticmethod
    def __wrap(java_value: __Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(__pyglsystem.StructBuffer, self).forEach(arg0)

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XMapEvent$Buffer(java.nio.ByteBuffer)"""
        val = __Buffer(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0), arg1))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address0())

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XMapEvent$Buffer org.lwjgl.system.linux.XMapEvent$Buffer.send_event(boolean)"""
        return 'Buffer'.__wrap(super(__Buffer, self).send_event(__boolean.valueOf(arg0)))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int.__wrap(super(__pyglsystem.CustomBuffer, self).address(__int.valueOf(arg0)))

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(__int.valueOf(arg0), arg1))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int.__wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(arg0))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XMapEvent$Buffer.serial()"""
        return int.__wrap(super(Buffer, self).serial())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XMapEvent$Buffer.display()"""
        return int.__wrap(super(Buffer, self).display())

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool.__wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def window(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XMapEvent$Buffer org.lwjgl.system.linux.XMapEvent$Buffer.window(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).window(__long.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).position(__int.valueOf(arg0)))

    @overload
    def override_redirect(self) -> int:
        """public int org.lwjgl.system.linux.XMapEvent$Buffer.override_redirect()"""
        return int.__wrap(super(Buffer, self).override_redirect())

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0)))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).clear())

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(__int.valueOf(arg0), arg1))

    @overload
    def event(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XMapEvent$Buffer org.lwjgl.system.linux.XMapEvent$Buffer.event(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).event(__long.valueOf(arg0)))

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XMapEvent$Buffer(long,int)"""
        val = __Buffer(__long.valueOf(arg0), __int.valueOf(arg1))
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def override_redirect(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XMapEvent$Buffer org.lwjgl.system.linux.XMapEvent$Buffer.override_redirect(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).override_redirect(__int.valueOf(arg0)))

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address())

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XMapEvent$Buffer.window()"""
        return int.__wrap(super(Buffer, self).window())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).slice())

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XMapEvent$Buffer.send_event()"""
        return bool.__wrap(super(Buffer, self).send_event())

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XMapEvent$Buffer org.lwjgl.system.linux.XMapEvent$Buffer.display(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).display(__long.valueOf(arg0)))

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'.__wrap(super(pyglsystem.StructBuffer, self).get())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).limit(__int.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'.__wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str.__wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(arg0))

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).stream())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XMapEvent$Buffer org.lwjgl.system.linux.XMapEvent$Buffer.serial(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).serial(__long.valueOf(arg0)))

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XMapEvent$Buffer org.lwjgl.system.linux.XMapEvent$Buffer.type(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).type(__int.valueOf(arg0)))

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'.__wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XMapEvent$Buffer.type()"""
        return int.__wrap(super(Buffer, self).type())

    @overload
    def event(self) -> int:
        """public long org.lwjgl.system.linux.XMapEvent$Buffer.event()"""
        return int.__wrap(super(Buffer, self).event())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).slice(__int.valueOf(arg0), __int.valueOf(arg1))) 
 
 
# CLASS: org.lwjgl.system.linux.EpollEvent
from pyquantum_helper import import_once as __import_once__
from builtins import str
from pyquantum_helper import override
import java.lang.Object as __object
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import org.lwjgl.system.linux.EpollEvent as __EpollEvent
__EpollEvent = __EpollEvent
import java.util.function.Consumer as Consumer
import org.lwjgl.system.linux.EpollData as __EpollData
__EpollData = __EpollData
import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import org.lwjgl.system.linux.EpollEvent as __EpollEvent_Buffer
__Buffer = __EpollEvent_Buffer.Buffer
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
from builtins import int
 
class EpollEvent(pyglsystem.__Struct, pyglsystem.Struct, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.EpollEvent"""
 
    @staticmethod
    def __wrap(java_value: __EpollEvent) -> 'EpollEvent':
        return EpollEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __EpollEvent):
        """
        Dynamic initializer for EpollEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def nevents(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.EpollEvent.nevents(long)"""
        return int.__wrap(__EpollEvent.nevents(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.EpollEvent$Buffer org.lwjgl.system.linux.EpollEvent.create(long,int)"""
        return Buffer.__wrap(__EpollEvent.create(__long.valueOf(arg0), __int.valueOf(arg1)))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.EpollEvent$Buffer org.lwjgl.system.linux.EpollEvent.createSafe(long,int)"""
        return Buffer.__wrap(__EpollEvent.createSafe(__long.valueOf(arg0), __int.valueOf(arg1)))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.EpollEvent(java.nio.ByteBuffer)"""
        val = __EpollEvent(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).address())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'EpollEvent':
        """public static org.lwjgl.system.linux.EpollEvent org.lwjgl.system.linux.EpollEvent.createSafe(long)"""
        return EpollEvent.__wrap(__EpollEvent.createSafe(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc() -> 'EpollEvent':
        """public static org.lwjgl.system.linux.EpollEvent org.lwjgl.system.linux.EpollEvent.calloc()"""
        return EpollEvent.__wrap(__EpollEvent.calloc())

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool.__wrap(super(__pyglsystem.Struct, self).isNull(__int.valueOf(arg0)))

    @overload
    def data(self, arg0: 'EpollData') -> 'EpollEvent':
        """public org.lwjgl.system.linux.EpollEvent org.lwjgl.system.linux.EpollEvent.data(org.lwjgl.system.linux.EpollData)"""
        return 'EpollEvent'.__wrap(super(__EpollEvent, self).data(arg0))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.EpollEvent.sizeof()"""
        return int.__wrap(super(EpollEvent, self).sizeof())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def create() -> 'EpollEvent':
        """public static org.lwjgl.system.linux.EpollEvent org.lwjgl.system.linux.EpollEvent.create()"""
        return EpollEvent.__wrap(__EpollEvent.create())

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'EpollEvent':
        """public static org.lwjgl.system.linux.EpollEvent org.lwjgl.system.linux.EpollEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return EpollEvent.__wrap(__EpollEvent.calloc(arg0))

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.EpollEvent$Buffer org.lwjgl.system.linux.EpollEvent.malloc(int)"""
        return Buffer.__wrap(__EpollEvent.malloc(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def ndata(arg0: int, arg1: 'EpollData'):
        """public static void org.lwjgl.system.linux.EpollEvent.ndata(long,org.lwjgl.system.linux.EpollData)"""
        __EpollEvent.ndata(__long.valueOf(arg0), arg1)

    @overload
    def set(self, arg0: int, arg1: 'EpollData') -> 'EpollEvent':
        """public org.lwjgl.system.linux.EpollEvent org.lwjgl.system.linux.EpollEvent.set(int,org.lwjgl.system.linux.EpollData)"""
        return 'EpollEvent'.__wrap(super(__EpollEvent, self).set(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def ndata(arg0: int) -> 'EpollData':
        """public static org.lwjgl.system.linux.EpollData org.lwjgl.system.linux.EpollEvent.ndata(long)"""
        return EpollData.__wrap(__EpollEvent.ndata(__long.valueOf(arg0)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str.__wrap(super(pyglsystem.Pointer$Default, self).toString())

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.EpollEvent$Buffer org.lwjgl.system.linux.EpollEvent.calloc(int)"""
        return Buffer.__wrap(__EpollEvent.calloc(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.EpollEvent$Buffer org.lwjgl.system.linux.EpollEvent.create(int)"""
        return Buffer.__wrap(__EpollEvent.create(__int.valueOf(arg0)))

    @overload
    def events(self) -> int:
        """public int org.lwjgl.system.linux.EpollEvent.events()"""
        return int.__wrap(super(EpollEvent, self).events())

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'EpollEvent':
        """public static org.lwjgl.system.linux.EpollEvent org.lwjgl.system.linux.EpollEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return EpollEvent.__wrap(__EpollEvent.malloc(arg0))

    @overload
    def events(self, arg0: int) -> 'EpollEvent':
        """public org.lwjgl.system.linux.EpollEvent org.lwjgl.system.linux.EpollEvent.events(int)"""
        return 'EpollEvent'.__wrap(super(__EpollEvent, self).events(__int.valueOf(arg0)))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @overload
    def data(self) -> 'EpollData':
        """public org.lwjgl.system.linux.EpollData org.lwjgl.system.linux.EpollEvent.data()"""
        return 'EpollData'.__wrap(super(EpollEvent, self).data())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.EpollEvent$Buffer org.lwjgl.system.linux.EpollEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__EpollEvent.malloc(__int.valueOf(arg0), arg1))

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @staticmethod
    @overload
    def nevents(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.EpollEvent.nevents(long,int)"""
        __EpollEvent.nevents(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def set(self, arg0: 'EpollEvent') -> 'EpollEvent':
        """public org.lwjgl.system.linux.EpollEvent org.lwjgl.system.linux.EpollEvent.set(org.lwjgl.system.linux.EpollEvent)"""
        return 'EpollEvent'.__wrap(super(__EpollEvent, self).set(arg0))

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.EpollEvent$Buffer org.lwjgl.system.linux.EpollEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__EpollEvent.calloc(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        __Struct.validate(__long.valueOf(arg0), __int.valueOf(arg1), __int.valueOf(arg2), arg3)

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def malloc() -> 'EpollEvent':
        """public static org.lwjgl.system.linux.EpollEvent org.lwjgl.system.linux.EpollEvent.malloc()"""
        return EpollEvent.__wrap(__EpollEvent.malloc())

    @overload
    def data(self, arg0: 'Consumer') -> 'EpollEvent':
        """public org.lwjgl.system.linux.EpollEvent org.lwjgl.system.linux.EpollEvent.data(java.util.function.Consumer<org.lwjgl.system.linux.EpollData>)"""
        return 'EpollEvent'.__wrap(super(__EpollEvent, self).data(arg0))

    @staticmethod
    @overload
    def create(arg0: int) -> 'EpollEvent':
        """public static org.lwjgl.system.linux.EpollEvent org.lwjgl.system.linux.EpollEvent.create(long)"""
        return EpollEvent.__wrap(__EpollEvent.create(__long.valueOf(arg0))) 
 
 
# CLASS: org.lwjgl.system.linux.XCrossingEvent$Buffer
from pyquantum_helper import import_once as __import_once__
import java.lang.Boolean as __boolean
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import java.util.stream.Stream as __Stream
__Stream = __Stream
import org.lwjgl.system.StructBuffer as __StructBuffer
__StructBuffer = __StructBuffer
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.CustomBuffer as __CustomBuffer
__CustomBuffer = __CustomBuffer
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.util.Iterator as __Iterator
__Iterator = __Iterator
import java.lang.Object as __object
import org.lwjgl.system.linux.XCrossingEvent as __XCrossingEvent_Buffer
__Buffer = __XCrossingEvent_Buffer.Buffer
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.util.Iterator as Iterator
import java.util.Spliterator as __Spliterator
__Spliterator = __Spliterator
import java.lang.Long as __long
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import java.util.stream.Stream as Stream
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import int
 
class Buffer(pyglsystem.__StructBuffer, pyglsystem.StructBuffer, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XCrossingEvent.Buffer"""
 
    @staticmethod
    def __wrap(java_value: __Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(__pyglsystem.StructBuffer, self).forEach(arg0)

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XCrossingEvent$Buffer org.lwjgl.system.linux.XCrossingEvent$Buffer.send_event(boolean)"""
        return 'Buffer'.__wrap(super(__Buffer, self).send_event(__boolean.valueOf(arg0)))

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XCrossingEvent$Buffer(long,int)"""
        val = __Buffer(__long.valueOf(arg0), __int.valueOf(arg1))
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0), arg1))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address0())

    @overload
    def state(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCrossingEvent$Buffer org.lwjgl.system.linux.XCrossingEvent$Buffer.state(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).state(__int.valueOf(arg0)))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def root(self) -> int:
        """public long org.lwjgl.system.linux.XCrossingEvent$Buffer.root()"""
        return int.__wrap(super(Buffer, self).root())

    @overload
    def detail(self) -> int:
        """public int org.lwjgl.system.linux.XCrossingEvent$Buffer.detail()"""
        return int.__wrap(super(Buffer, self).detail())

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XCrossingEvent$Buffer.display()"""
        return int.__wrap(super(Buffer, self).display())

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int.__wrap(super(__pyglsystem.CustomBuffer, self).address(__int.valueOf(arg0)))

    @overload
    def focus(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCrossingEvent$Buffer org.lwjgl.system.linux.XCrossingEvent$Buffer.focus(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).focus(__int.valueOf(arg0)))

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def x(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCrossingEvent$Buffer org.lwjgl.system.linux.XCrossingEvent$Buffer.x(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).x(__int.valueOf(arg0)))

    @overload
    def x(self) -> int:
        """public int org.lwjgl.system.linux.XCrossingEvent$Buffer.x()"""
        return int.__wrap(super(Buffer, self).x())

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(__int.valueOf(arg0), arg1))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int.__wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @overload
    def x_root(self) -> int:
        """public int org.lwjgl.system.linux.XCrossingEvent$Buffer.x_root()"""
        return int.__wrap(super(Buffer, self).x_root())

    @overload
    def time(self) -> int:
        """public long org.lwjgl.system.linux.XCrossingEvent$Buffer.time()"""
        return int.__wrap(super(Buffer, self).time())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(arg0))

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).position())

    @overload
    def same_screen(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCrossingEvent$Buffer org.lwjgl.system.linux.XCrossingEvent$Buffer.same_screen(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).same_screen(__int.valueOf(arg0)))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @overload
    def mode(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCrossingEvent$Buffer org.lwjgl.system.linux.XCrossingEvent$Buffer.mode(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).mode(__int.valueOf(arg0)))

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCrossingEvent$Buffer org.lwjgl.system.linux.XCrossingEvent$Buffer.type(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).type(__int.valueOf(arg0)))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XCrossingEvent$Buffer.send_event()"""
        return bool.__wrap(super(Buffer, self).send_event())

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def detail(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCrossingEvent$Buffer org.lwjgl.system.linux.XCrossingEvent$Buffer.detail(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).detail(__int.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool.__wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XCrossingEvent$Buffer(java.nio.ByteBuffer)"""
        val = __Buffer(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def same_screen(self) -> int:
        """public int org.lwjgl.system.linux.XCrossingEvent$Buffer.same_screen()"""
        return int.__wrap(super(Buffer, self).same_screen())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def y(self) -> int:
        """public int org.lwjgl.system.linux.XCrossingEvent$Buffer.y()"""
        return int.__wrap(super(Buffer, self).y())

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCrossingEvent$Buffer org.lwjgl.system.linux.XCrossingEvent$Buffer.display(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).display(__long.valueOf(arg0)))

    @overload
    def y_root(self) -> int:
        """public int org.lwjgl.system.linux.XCrossingEvent$Buffer.y_root()"""
        return int.__wrap(super(Buffer, self).y_root())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).position(__int.valueOf(arg0)))

    @overload
    def state(self) -> int:
        """public int org.lwjgl.system.linux.XCrossingEvent$Buffer.state()"""
        return int.__wrap(super(Buffer, self).state())

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0)))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).clear())

    @overload
    def x_root(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCrossingEvent$Buffer org.lwjgl.system.linux.XCrossingEvent$Buffer.x_root(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).x_root(__int.valueOf(arg0)))

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(__int.valueOf(arg0), arg1))

    @overload
    def subwindow(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCrossingEvent$Buffer org.lwjgl.system.linux.XCrossingEvent$Buffer.subwindow(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).subwindow(__long.valueOf(arg0)))

    @overload
    def y(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCrossingEvent$Buffer org.lwjgl.system.linux.XCrossingEvent$Buffer.y(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).y(__int.valueOf(arg0)))

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @overload
    def time(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCrossingEvent$Buffer org.lwjgl.system.linux.XCrossingEvent$Buffer.time(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).time(__long.valueOf(arg0)))

    @overload
    def mode(self) -> int:
        """public int org.lwjgl.system.linux.XCrossingEvent$Buffer.mode()"""
        return int.__wrap(super(Buffer, self).mode())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).slice())

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).compact())

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'.__wrap(super(pyglsystem.StructBuffer, self).get())

    @overload
    def root(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCrossingEvent$Buffer org.lwjgl.system.linux.XCrossingEvent$Buffer.root(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).root(__long.valueOf(arg0)))

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).limit(__int.valueOf(arg0)))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XCrossingEvent$Buffer.serial()"""
        return int.__wrap(super(Buffer, self).serial())

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCrossingEvent$Buffer org.lwjgl.system.linux.XCrossingEvent$Buffer.serial(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).serial(__long.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'.__wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str.__wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @overload
    def window(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCrossingEvent$Buffer org.lwjgl.system.linux.XCrossingEvent$Buffer.window(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).window(__long.valueOf(arg0)))

    @overload
    def subwindow(self) -> int:
        """public long org.lwjgl.system.linux.XCrossingEvent$Buffer.subwindow()"""
        return int.__wrap(super(Buffer, self).subwindow())

    @overload
    def y_root(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCrossingEvent$Buffer org.lwjgl.system.linux.XCrossingEvent$Buffer.y_root(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).y_root(__int.valueOf(arg0)))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(arg0))

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).stream())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XCrossingEvent$Buffer.window()"""
        return int.__wrap(super(Buffer, self).window())

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XCrossingEvent$Buffer.type()"""
        return int.__wrap(super(Buffer, self).type())

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'.__wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def focus(self) -> int:
        """public int org.lwjgl.system.linux.XCrossingEvent$Buffer.focus()"""
        return int.__wrap(super(Buffer, self).focus())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).slice(__int.valueOf(arg0), __int.valueOf(arg1))) 
 
 
# CLASS: org.lwjgl.system.linux.XKeyEvent$Buffer
from pyquantum_helper import import_once as __import_once__
import java.lang.Boolean as __boolean
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import java.util.stream.Stream as __Stream
__Stream = __Stream
import org.lwjgl.system.StructBuffer as __StructBuffer
__StructBuffer = __StructBuffer
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.CustomBuffer as __CustomBuffer
__CustomBuffer = __CustomBuffer
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.util.Iterator as __Iterator
__Iterator = __Iterator
import java.lang.Object as __object
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import org.lwjgl.system.linux.XKeyEvent as __XKeyEvent_Buffer
__Buffer = __XKeyEvent_Buffer.Buffer
import java.util.Iterator as Iterator
import java.util.Spliterator as __Spliterator
__Spliterator = __Spliterator
import java.lang.Long as __long
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import java.util.stream.Stream as Stream
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import int
 
class Buffer(pyglsystem.__StructBuffer, pyglsystem.StructBuffer, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XKeyEvent.Buffer"""
 
    @staticmethod
    def __wrap(java_value: __Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def root(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XKeyEvent$Buffer org.lwjgl.system.linux.XKeyEvent$Buffer.root(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).root(__long.valueOf(arg0)))

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XKeyEvent$Buffer org.lwjgl.system.linux.XKeyEvent$Buffer.send_event(boolean)"""
        return 'Buffer'.__wrap(super(__Buffer, self).send_event(__boolean.valueOf(arg0)))

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(__pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0), arg1))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XKeyEvent$Buffer org.lwjgl.system.linux.XKeyEvent$Buffer.serial(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).serial(__long.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int.__wrap(super(__pyglsystem.CustomBuffer, self).address(__int.valueOf(arg0)))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XKeyEvent$Buffer(java.nio.ByteBuffer)"""
        val = __Buffer(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def x_root(self) -> int:
        """public int org.lwjgl.system.linux.XKeyEvent$Buffer.x_root()"""
        return int.__wrap(super(Buffer, self).x_root())

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def root(self) -> int:
        """public long org.lwjgl.system.linux.XKeyEvent$Buffer.root()"""
        return int.__wrap(super(Buffer, self).root())

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XKeyEvent$Buffer.type()"""
        return int.__wrap(super(Buffer, self).type())

    @overload
    def subwindow(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XKeyEvent$Buffer org.lwjgl.system.linux.XKeyEvent$Buffer.subwindow(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).subwindow(__long.valueOf(arg0)))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(__int.valueOf(arg0), arg1))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int.__wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(arg0))

    @overload
    def x(self) -> int:
        """public int org.lwjgl.system.linux.XKeyEvent$Buffer.x()"""
        return int.__wrap(super(Buffer, self).x())

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XKeyEvent$Buffer(long,int)"""
        val = __Buffer(__long.valueOf(arg0), __int.valueOf(arg1))
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def x(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XKeyEvent$Buffer org.lwjgl.system.linux.XKeyEvent$Buffer.x(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).x(__int.valueOf(arg0)))

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @overload
    def keycode(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XKeyEvent$Buffer org.lwjgl.system.linux.XKeyEvent$Buffer.keycode(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).keycode(__int.valueOf(arg0)))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XKeyEvent$Buffer.serial()"""
        return int.__wrap(super(Buffer, self).serial())

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def same_screen(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XKeyEvent$Buffer org.lwjgl.system.linux.XKeyEvent$Buffer.same_screen(boolean)"""
        return 'Buffer'.__wrap(super(__Buffer, self).same_screen(__boolean.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool.__wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XKeyEvent$Buffer.send_event()"""
        return bool.__wrap(super(Buffer, self).send_event())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def keycode(self) -> int:
        """public int org.lwjgl.system.linux.XKeyEvent$Buffer.keycode()"""
        return int.__wrap(super(Buffer, self).keycode())

    @overload
    def state(self) -> int:
        """public int org.lwjgl.system.linux.XKeyEvent$Buffer.state()"""
        return int.__wrap(super(Buffer, self).state())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).position(__int.valueOf(arg0)))

    @overload
    def state(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XKeyEvent$Buffer org.lwjgl.system.linux.XKeyEvent$Buffer.state(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).state(__int.valueOf(arg0)))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0)))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).clear())

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(__int.valueOf(arg0), arg1))

    @overload
    def window(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XKeyEvent$Buffer org.lwjgl.system.linux.XKeyEvent$Buffer.window(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).window(__long.valueOf(arg0)))

    @overload
    def y(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XKeyEvent$Buffer org.lwjgl.system.linux.XKeyEvent$Buffer.y(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).y(__int.valueOf(arg0)))

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XKeyEvent$Buffer org.lwjgl.system.linux.XKeyEvent$Buffer.display(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).display(__long.valueOf(arg0)))

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address())

    @overload
    def x_root(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XKeyEvent$Buffer org.lwjgl.system.linux.XKeyEvent$Buffer.x_root(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).x_root(__int.valueOf(arg0)))

    @overload
    def y_root(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XKeyEvent$Buffer org.lwjgl.system.linux.XKeyEvent$Buffer.y_root(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).y_root(__int.valueOf(arg0)))

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XKeyEvent$Buffer org.lwjgl.system.linux.XKeyEvent$Buffer.type(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).type(__int.valueOf(arg0)))

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).slice())

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def y(self) -> int:
        """public int org.lwjgl.system.linux.XKeyEvent$Buffer.y()"""
        return int.__wrap(super(Buffer, self).y())

    @overload
    def same_screen(self) -> bool:
        """public boolean org.lwjgl.system.linux.XKeyEvent$Buffer.same_screen()"""
        return bool.__wrap(super(Buffer, self).same_screen())

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'.__wrap(super(pyglsystem.StructBuffer, self).get())

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XKeyEvent$Buffer.window()"""
        return int.__wrap(super(Buffer, self).window())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).limit(__int.valueOf(arg0)))

    @overload
    def time(self) -> int:
        """public long org.lwjgl.system.linux.XKeyEvent$Buffer.time()"""
        return int.__wrap(super(Buffer, self).time())

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'.__wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str.__wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def subwindow(self) -> int:
        """public long org.lwjgl.system.linux.XKeyEvent$Buffer.subwindow()"""
        return int.__wrap(super(Buffer, self).subwindow())

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(arg0))

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).stream())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'.__wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def y_root(self) -> int:
        """public int org.lwjgl.system.linux.XKeyEvent$Buffer.y_root()"""
        return int.__wrap(super(Buffer, self).y_root())

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XKeyEvent$Buffer.display()"""
        return int.__wrap(super(Buffer, self).display())

    @overload
    def time(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XKeyEvent$Buffer org.lwjgl.system.linux.XKeyEvent$Buffer.time(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).time(__long.valueOf(arg0)))

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).slice(__int.valueOf(arg0), __int.valueOf(arg1))) 
 
 
# CLASS: org.lwjgl.system.linux.XPropertyEvent$Buffer
from pyquantum_helper import import_once as __import_once__
import java.lang.Boolean as __boolean
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import java.util.stream.Stream as __Stream
__Stream = __Stream
import org.lwjgl.system.StructBuffer as __StructBuffer
__StructBuffer = __StructBuffer
import java.util.function.Consumer as Consumer
import org.lwjgl.system.linux.XPropertyEvent as __XPropertyEvent_Buffer
__Buffer = __XPropertyEvent_Buffer.Buffer
import java.util.Spliterator as Spliterator
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.CustomBuffer as __CustomBuffer
__CustomBuffer = __CustomBuffer
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.util.Iterator as __Iterator
__Iterator = __Iterator
import java.lang.Object as __object
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.util.Iterator as Iterator
import java.util.Spliterator as __Spliterator
__Spliterator = __Spliterator
import java.lang.Long as __long
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import java.util.stream.Stream as Stream
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import int
 
class Buffer(pyglsystem.__StructBuffer, pyglsystem.StructBuffer, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XPropertyEvent.Buffer"""
 
    @staticmethod
    def __wrap(java_value: __Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def atom(self) -> int:
        """public long org.lwjgl.system.linux.XPropertyEvent$Buffer.atom()"""
        return int.__wrap(super(Buffer, self).atom())

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(__pyglsystem.StructBuffer, self).forEach(arg0)

    @overload
    def atom(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XPropertyEvent$Buffer org.lwjgl.system.linux.XPropertyEvent$Buffer.atom(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).atom(__long.valueOf(arg0)))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0), arg1))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int.__wrap(super(__pyglsystem.CustomBuffer, self).address(__int.valueOf(arg0)))

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(__int.valueOf(arg0), arg1))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int.__wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(arg0))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XPropertyEvent$Buffer.send_event()"""
        return bool.__wrap(super(Buffer, self).send_event())

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XPropertyEvent$Buffer org.lwjgl.system.linux.XPropertyEvent$Buffer.type(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).type(__int.valueOf(arg0)))

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XPropertyEvent$Buffer(java.nio.ByteBuffer)"""
        val = __Buffer(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool.__wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XPropertyEvent$Buffer(long,int)"""
        val = __Buffer(__long.valueOf(arg0), __int.valueOf(arg1))
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).position(__int.valueOf(arg0)))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0)))

    @overload
    def time(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XPropertyEvent$Buffer org.lwjgl.system.linux.XPropertyEvent$Buffer.time(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).time(__long.valueOf(arg0)))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).clear())

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(__int.valueOf(arg0), arg1))

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XPropertyEvent$Buffer org.lwjgl.system.linux.XPropertyEvent$Buffer.serial(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).serial(__long.valueOf(arg0)))

    @overload
    def window(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XPropertyEvent$Buffer org.lwjgl.system.linux.XPropertyEvent$Buffer.window(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).window(__long.valueOf(arg0)))

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address())

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XPropertyEvent$Buffer org.lwjgl.system.linux.XPropertyEvent$Buffer.send_event(boolean)"""
        return 'Buffer'.__wrap(super(__Buffer, self).send_event(__boolean.valueOf(arg0)))

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XPropertyEvent$Buffer.display()"""
        return int.__wrap(super(Buffer, self).display())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XPropertyEvent$Buffer.serial()"""
        return int.__wrap(super(Buffer, self).serial())

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).slice())

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XPropertyEvent$Buffer.type()"""
        return int.__wrap(super(Buffer, self).type())

    @overload
    def state(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XPropertyEvent$Buffer org.lwjgl.system.linux.XPropertyEvent$Buffer.state(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).state(__int.valueOf(arg0)))

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XPropertyEvent$Buffer.window()"""
        return int.__wrap(super(Buffer, self).window())

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'.__wrap(super(pyglsystem.StructBuffer, self).get())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).limit(__int.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'.__wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str.__wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(arg0))

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).stream())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XPropertyEvent$Buffer org.lwjgl.system.linux.XPropertyEvent$Buffer.display(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).display(__long.valueOf(arg0)))

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'.__wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def state(self) -> int:
        """public int org.lwjgl.system.linux.XPropertyEvent$Buffer.state()"""
        return int.__wrap(super(Buffer, self).state())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def time(self) -> int:
        """public long org.lwjgl.system.linux.XPropertyEvent$Buffer.time()"""
        return int.__wrap(super(Buffer, self).time())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).slice(__int.valueOf(arg0), __int.valueOf(arg1))) 
 
 
# CLASS: org.lwjgl.system.linux.PThread
from builtins import str
import java.lang.Long as __long
import org.lwjgl.system.linux.PThread as __PThread
__PThread = __PThread
from pyquantum_helper import override
import java.lang.Class as __Class
__Class = __Class
import java.lang.Object as __object
import java.lang.String as __String
__String = __String
from builtins import type
import java.lang.Object as __Object
__Object = __Object
import java.lang.Integer as __int
from builtins import bool
from builtins import int
 
class PThread():
    """org.lwjgl.system.linux.PThread"""
 
    @staticmethod
    def __wrap(java_value: __PThread) -> 'PThread':
        return PThread(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __PThread):
        """
        Dynamic initializer for PThread.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.lang.Object.toString()"""
        return str.__wrap(super(object, self).toString())

    @staticmethod
    @overload
    def pthread_self() -> int:
        """public static native long org.lwjgl.system.linux.PThread.pthread_self()"""
        return int.__wrap(__PThread.pthread_self())

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0)) 
 
 
# CLASS: org.lwjgl.system.linux.MMAN
from builtins import str
from pyquantum_helper import override
import java.lang.Object as __object
from builtins import type
import org.lwjgl.system.linux.MMAN as __MMAN
__MMAN = __MMAN
import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
from builtins import int
 
class MMAN():
    """org.lwjgl.system.linux.MMAN"""
 
    @staticmethod
    def __wrap(java_value: __MMAN) -> 'MMAN':
        return MMAN(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __MMAN):
        """
        Dynamic initializer for MMAN.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def mmap(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int) -> int:
        """public static native long org.lwjgl.system.linux.MMAN.mmap(long,long,int,int,int,long)"""
        return int.__wrap(__MMAN.mmap(__long.valueOf(arg0), __long.valueOf(arg1), __int.valueOf(arg2), __int.valueOf(arg3), __int.valueOf(arg4), __long.valueOf(arg5)))

    @staticmethod
    @overload
    def nmunmap(arg0: int, arg1: int) -> int:
        """public static native int org.lwjgl.system.linux.MMAN.nmunmap(long,long)"""
        return int.__wrap(__MMAN.nmunmap(__long.valueOf(arg0), __long.valueOf(arg1)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.lang.Object.toString()"""
        return str.__wrap(super(object, self).toString())

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def munmap(arg0: 'ByteBuffer') -> int:
        """public static int org.lwjgl.system.linux.MMAN.munmap(java.nio.ByteBuffer)"""
        return int.__wrap(__MMAN.munmap(arg0))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0)) 
 
 
# CLASS: org.lwjgl.system.linux.XMapEvent
from pyquantum_helper import import_once as __import_once__
from builtins import str
import java.lang.Boolean as __boolean
from pyquantum_helper import override
import java.lang.Object as __object
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import org.lwjgl.system.linux.XMapEvent as __XMapEvent_Buffer
__Buffer = __XMapEvent_Buffer.Buffer
import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
import org.lwjgl.system.linux.XMapEvent as __XMapEvent
__XMapEvent = __XMapEvent
from builtins import int
 
class XMapEvent(pyglsystem.__Struct, pyglsystem.Struct, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XMapEvent"""
 
    @staticmethod
    def __wrap(java_value: __XMapEvent) -> 'XMapEvent':
        return XMapEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __XMapEvent):
        """
        Dynamic initializer for XMapEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XMapEvent$Buffer org.lwjgl.system.linux.XMapEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XMapEvent.callocStack(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XMapEvent$Buffer org.lwjgl.system.linux.XMapEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XMapEvent.malloc(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XMapEvent':
        """public static org.lwjgl.system.linux.XMapEvent org.lwjgl.system.linux.XMapEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XMapEvent.__wrap(__XMapEvent.mallocStack(arg0))

    @overload
    def override_redirect(self) -> int:
        """public int org.lwjgl.system.linux.XMapEvent.override_redirect()"""
        return int.__wrap(super(XMapEvent, self).override_redirect())

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XMapEvent.window()"""
        return int.__wrap(super(XMapEvent, self).window())

    @staticmethod
    @overload
    def nevent(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XMapEvent.nevent(long)"""
        return int.__wrap(__XMapEvent.nevent(__long.valueOf(arg0)))

    @overload
    def type(self, arg0: int) -> 'XMapEvent':
        """public org.lwjgl.system.linux.XMapEvent org.lwjgl.system.linux.XMapEvent.type(int)"""
        return 'XMapEvent'.__wrap(super(__XMapEvent, self).type(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack() -> 'XMapEvent':
        """public static org.lwjgl.system.linux.XMapEvent org.lwjgl.system.linux.XMapEvent.mallocStack()"""
        return XMapEvent.__wrap(__XMapEvent.mallocStack())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XMapEvent.sizeof()"""
        return int.__wrap(super(XMapEvent, self).sizeof())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XMapEvent(java.nio.ByteBuffer)"""
        val = __XMapEvent(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool.__wrap(super(__pyglsystem.Struct, self).isNull(__int.valueOf(arg0)))

    @overload
    def set(self, arg0: 'XMapEvent') -> 'XMapEvent':
        """public org.lwjgl.system.linux.XMapEvent org.lwjgl.system.linux.XMapEvent.set(org.lwjgl.system.linux.XMapEvent)"""
        return 'XMapEvent'.__wrap(super(__XMapEvent, self).set(arg0))

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMapEvent.ndisplay(long,long)"""
        __XMapEvent.ndisplay(__long.valueOf(arg0), __long.valueOf(arg1))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def create() -> 'XMapEvent':
        """public static org.lwjgl.system.linux.XMapEvent org.lwjgl.system.linux.XMapEvent.create()"""
        return XMapEvent.__wrap(__XMapEvent.create())

    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XMapEvent.nsend_event(long)"""
        return int.__wrap(__XMapEvent.nsend_event(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack() -> 'XMapEvent':
        """public static org.lwjgl.system.linux.XMapEvent org.lwjgl.system.linux.XMapEvent.callocStack()"""
        return XMapEvent.__wrap(__XMapEvent.callocStack())

    @staticmethod
    @overload
    def noverride_redirect(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XMapEvent.noverride_redirect(long)"""
        return int.__wrap(__XMapEvent.noverride_redirect(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XMapEvent':
        """public static org.lwjgl.system.linux.XMapEvent org.lwjgl.system.linux.XMapEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XMapEvent.__wrap(__XMapEvent.calloc(arg0))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XMapEvent$Buffer org.lwjgl.system.linux.XMapEvent.createSafe(long,int)"""
        return Buffer.__wrap(__XMapEvent.createSafe(__long.valueOf(arg0), __int.valueOf(arg1)))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XMapEvent$Buffer org.lwjgl.system.linux.XMapEvent.create(long,int)"""
        return Buffer.__wrap(__XMapEvent.create(__long.valueOf(arg0), __int.valueOf(arg1)))

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XMapEvent.display()"""
        return int.__wrap(super(XMapEvent, self).display())

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XMapEvent':
        """public static org.lwjgl.system.linux.XMapEvent org.lwjgl.system.linux.XMapEvent.createSafe(long)"""
        return XMapEvent.__wrap(__XMapEvent.createSafe(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XMapEvent.ntype(long)"""
        return int.__wrap(__XMapEvent.ntype(__long.valueOf(arg0)))

    @overload
    def override_redirect(self, arg0: int) -> 'XMapEvent':
        """public org.lwjgl.system.linux.XMapEvent org.lwjgl.system.linux.XMapEvent.override_redirect(int)"""
        return 'XMapEvent'.__wrap(super(__XMapEvent, self).override_redirect(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XMapEvent$Buffer org.lwjgl.system.linux.XMapEvent.create(int)"""
        return Buffer.__wrap(__XMapEvent.create(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc() -> 'XMapEvent':
        """public static org.lwjgl.system.linux.XMapEvent org.lwjgl.system.linux.XMapEvent.calloc()"""
        return XMapEvent.__wrap(__XMapEvent.calloc())

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XMapEvent.serial()"""
        return int.__wrap(super(XMapEvent, self).serial())

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XMapEvent$Buffer org.lwjgl.system.linux.XMapEvent.callocStack(int)"""
        return Buffer.__wrap(__XMapEvent.callocStack(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XMapEvent$Buffer org.lwjgl.system.linux.XMapEvent.calloc(int)"""
        return Buffer.__wrap(__XMapEvent.calloc(__int.valueOf(arg0)))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XMapEvent$Buffer org.lwjgl.system.linux.XMapEvent.malloc(int)"""
        return Buffer.__wrap(__XMapEvent.malloc(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XMapEvent$Buffer org.lwjgl.system.linux.XMapEvent.mallocStack(int)"""
        return Buffer.__wrap(__XMapEvent.mallocStack(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nevent(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMapEvent.nevent(long,long)"""
        __XMapEvent.nevent(__long.valueOf(arg0), __long.valueOf(arg1))

    @overload
    def event(self) -> int:
        """public long org.lwjgl.system.linux.XMapEvent.event()"""
        return int.__wrap(super(XMapEvent, self).event())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XMapEvent.send_event()"""
        return bool.__wrap(super(XMapEvent, self).send_event())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def nwindow(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMapEvent.nwindow(long,long)"""
        __XMapEvent.nwindow(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMapEvent.nsend_event(long,int)"""
        __XMapEvent.nsend_event(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XMapEvent$Buffer org.lwjgl.system.linux.XMapEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XMapEvent.calloc(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def malloc() -> 'XMapEvent':
        """public static org.lwjgl.system.linux.XMapEvent org.lwjgl.system.linux.XMapEvent.malloc()"""
        return XMapEvent.__wrap(__XMapEvent.malloc())

    @overload
    def window(self, arg0: int) -> 'XMapEvent':
        """public org.lwjgl.system.linux.XMapEvent org.lwjgl.system.linux.XMapEvent.window(long)"""
        return 'XMapEvent'.__wrap(super(__XMapEvent, self).window(__long.valueOf(arg0)))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).address())

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMapEvent.nserial(long,long)"""
        __XMapEvent.nserial(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def noverride_redirect(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMapEvent.noverride_redirect(long,int)"""
        __XMapEvent.noverride_redirect(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XMapEvent.nserial(long)"""
        return int.__wrap(__XMapEvent.nserial(__long.valueOf(arg0)))

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int, arg5: int, arg6: int) -> 'XMapEvent':
        """public org.lwjgl.system.linux.XMapEvent org.lwjgl.system.linux.XMapEvent.set(int,long,boolean,long,long,long,int)"""
        return 'XMapEvent'.__wrap(super(__XMapEvent, self).set(__int.valueOf(arg0), __long.valueOf(arg1), __boolean.valueOf(arg2), __long.valueOf(arg3), __long.valueOf(arg4), __long.valueOf(arg5), __int.valueOf(arg6)))

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XMapEvent.ndisplay(long)"""
        return int.__wrap(__XMapEvent.ndisplay(__long.valueOf(arg0)))

    @overload
    def display(self, arg0: int) -> 'XMapEvent':
        """public org.lwjgl.system.linux.XMapEvent org.lwjgl.system.linux.XMapEvent.display(long)"""
        return 'XMapEvent'.__wrap(super(__XMapEvent, self).display(__long.valueOf(arg0)))

    @overload
    def event(self, arg0: int) -> 'XMapEvent':
        """public org.lwjgl.system.linux.XMapEvent org.lwjgl.system.linux.XMapEvent.event(long)"""
        return 'XMapEvent'.__wrap(super(__XMapEvent, self).event(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XMapEvent':
        """public static org.lwjgl.system.linux.XMapEvent org.lwjgl.system.linux.XMapEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XMapEvent.__wrap(__XMapEvent.malloc(arg0))

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XMapEvent':
        """public static org.lwjgl.system.linux.XMapEvent org.lwjgl.system.linux.XMapEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XMapEvent.__wrap(__XMapEvent.callocStack(arg0))

    @overload
    def serial(self, arg0: int) -> 'XMapEvent':
        """public org.lwjgl.system.linux.XMapEvent org.lwjgl.system.linux.XMapEvent.serial(long)"""
        return 'XMapEvent'.__wrap(super(__XMapEvent, self).serial(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nwindow(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XMapEvent.nwindow(long)"""
        return int.__wrap(__XMapEvent.nwindow(__long.valueOf(arg0)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str.__wrap(super(pyglsystem.Pointer$Default, self).toString())

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XMapEvent.type()"""
        return int.__wrap(super(XMapEvent, self).type())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @overload
    def send_event(self, arg0: bool) -> 'XMapEvent':
        """public org.lwjgl.system.linux.XMapEvent org.lwjgl.system.linux.XMapEvent.send_event(boolean)"""
        return 'XMapEvent'.__wrap(super(__XMapEvent, self).send_event(__boolean.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'XMapEvent':
        """public static org.lwjgl.system.linux.XMapEvent org.lwjgl.system.linux.XMapEvent.create(long)"""
        return XMapEvent.__wrap(__XMapEvent.create(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMapEvent.ntype(long,int)"""
        __XMapEvent.ntype(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XMapEvent.validate(long)"""
        __XMapEvent.validate(__long.valueOf(arg0))

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XMapEvent$Buffer org.lwjgl.system.linux.XMapEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XMapEvent.mallocStack(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        __Struct.validate(__long.valueOf(arg0), __int.valueOf(arg1), __int.valueOf(arg2), arg3) 
 
 
# CLASS: org.lwjgl.system.linux.FCNTL
from builtins import str
import java.lang.CharSequence as CharSequence
from pyquantum_helper import override
import java.lang.Object as __object
from builtins import type
import org.lwjgl.system.linux.FCNTL as __FCNTL
__FCNTL = __FCNTL
import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Integer as __int
from builtins import bool
from builtins import int
 
class FCNTL():
    """org.lwjgl.system.linux.FCNTL"""
 
    @staticmethod
    def __wrap(java_value: __FCNTL) -> 'FCNTL':
        return FCNTL(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __FCNTL):
        """
        Dynamic initializer for FCNTL.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def nfcntli(arg0: int, arg1: int, arg2: int) -> int:
        """public static native int org.lwjgl.system.linux.FCNTL.nfcntli(int,int,int)"""
        return int.__wrap(__FCNTL.nfcntli(__int.valueOf(arg0), __int.valueOf(arg1), __int.valueOf(arg2)))

    @staticmethod
    @overload
    def ncreat(arg0: int, arg1: int) -> int:
        """public static native int org.lwjgl.system.linux.FCNTL.ncreat(long,int)"""
        return int.__wrap(__FCNTL.ncreat(__long.valueOf(arg0), __int.valueOf(arg1)))

    @staticmethod
    @overload
    def creat(arg0: 'CharSequence', arg1: int) -> int:
        """public static int org.lwjgl.system.linux.FCNTL.creat(java.lang.CharSequence,int)"""
        return int.__wrap(__FCNTL.creat(arg0, __int.valueOf(arg1)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.lang.Object.toString()"""
        return str.__wrap(super(object, self).toString())

    @staticmethod
    @overload
    def openat(arg0: int, arg1: 'ByteBuffer', arg2: int, arg3: int) -> int:
        """public static int org.lwjgl.system.linux.FCNTL.openat(int,java.nio.ByteBuffer,int,int)"""
        return int.__wrap(__FCNTL.openat(__int.valueOf(arg0), arg1, __int.valueOf(arg2), __int.valueOf(arg3)))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def openat(arg0: int, arg1: 'CharSequence', arg2: int, arg3: int) -> int:
        """public static int org.lwjgl.system.linux.FCNTL.openat(int,java.lang.CharSequence,int,int)"""
        return int.__wrap(__FCNTL.openat(__int.valueOf(arg0), arg1, __int.valueOf(arg2), __int.valueOf(arg3)))

    @staticmethod
    @overload
    def open(arg0: 'ByteBuffer', arg1: int, arg2: int) -> int:
        """public static int org.lwjgl.system.linux.FCNTL.open(java.nio.ByteBuffer,int,int)"""
        return int.__wrap(__FCNTL.open(arg0, __int.valueOf(arg1), __int.valueOf(arg2)))

    @staticmethod
    @overload
    def creat(arg0: 'ByteBuffer', arg1: int) -> int:
        """public static int org.lwjgl.system.linux.FCNTL.creat(java.nio.ByteBuffer,int)"""
        return int.__wrap(__FCNTL.creat(arg0, __int.valueOf(arg1)))

    @staticmethod
    @overload
    def nfcntlp(arg0: int, arg1: int, arg2: int) -> int:
        """public static native int org.lwjgl.system.linux.FCNTL.nfcntlp(int,int,long)"""
        return int.__wrap(__FCNTL.nfcntlp(__int.valueOf(arg0), __int.valueOf(arg1), __long.valueOf(arg2)))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def fcntli(arg0: int, arg1: int, arg2: int) -> int:
        """public static int org.lwjgl.system.linux.FCNTL.fcntli(int,int,int)"""
        return int.__wrap(__FCNTL.fcntli(__int.valueOf(arg0), __int.valueOf(arg1), __int.valueOf(arg2)))

    @staticmethod
    @overload
    def nopenat(arg0: int, arg1: int, arg2: int, arg3: int) -> int:
        """public static native int org.lwjgl.system.linux.FCNTL.nopenat(int,long,int,int)"""
        return int.__wrap(__FCNTL.nopenat(__int.valueOf(arg0), __long.valueOf(arg1), __int.valueOf(arg2), __int.valueOf(arg3)))

    @staticmethod
    @overload
    def open(arg0: 'CharSequence', arg1: int, arg2: int) -> int:
        """public static int org.lwjgl.system.linux.FCNTL.open(java.lang.CharSequence,int,int)"""
        return int.__wrap(__FCNTL.open(arg0, __int.valueOf(arg1), __int.valueOf(arg2)))

    @staticmethod
    @overload
    def fcntl(arg0: int, arg1: int) -> int:
        """public static native int org.lwjgl.system.linux.FCNTL.fcntl(int,int)"""
        return int.__wrap(__FCNTL.fcntl(__int.valueOf(arg0), __int.valueOf(arg1)))

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @staticmethod
    @overload
    def nopen(arg0: int, arg1: int, arg2: int) -> int:
        """public static native int org.lwjgl.system.linux.FCNTL.nopen(long,int,int)"""
        return int.__wrap(__FCNTL.nopen(__long.valueOf(arg0), __int.valueOf(arg1), __int.valueOf(arg2)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def fcntlp(arg0: int, arg1: int, arg2: int) -> int:
        """public static int org.lwjgl.system.linux.FCNTL.fcntlp(int,int,long)"""
        return int.__wrap(__FCNTL.fcntlp(__int.valueOf(arg0), __int.valueOf(arg1), __long.valueOf(arg2)))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0)) 
 
 
# CLASS: org.lwjgl.system.linux.XExposeEvent
from pyquantum_helper import import_once as __import_once__
from builtins import str
import java.lang.Boolean as __boolean
from pyquantum_helper import override
import java.lang.Object as __object
import org.lwjgl.system.linux.XExposeEvent as __XExposeEvent_Buffer
__Buffer = __XExposeEvent_Buffer.Buffer
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import org.lwjgl.system.linux.XExposeEvent as __XExposeEvent
__XExposeEvent = __XExposeEvent
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
from builtins import int
 
class XExposeEvent(pyglsystem.__Struct, pyglsystem.Struct, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XExposeEvent"""
 
    @staticmethod
    def __wrap(java_value: __XExposeEvent) -> 'XExposeEvent':
        return XExposeEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __XExposeEvent):
        """
        Dynamic initializer for XExposeEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def mallocStack() -> 'XExposeEvent':
        """public static org.lwjgl.system.linux.XExposeEvent org.lwjgl.system.linux.XExposeEvent.mallocStack()"""
        return XExposeEvent.__wrap(__XExposeEvent.mallocStack())

    @staticmethod
    @overload
    def callocStack() -> 'XExposeEvent':
        """public static org.lwjgl.system.linux.XExposeEvent org.lwjgl.system.linux.XExposeEvent.callocStack()"""
        return XExposeEvent.__wrap(__XExposeEvent.callocStack())

    @staticmethod
    @overload
    def nx(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XExposeEvent.nx(long,int)"""
        __XExposeEvent.nx(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XExposeEvent.validate(long)"""
        __XExposeEvent.validate(__long.valueOf(arg0))

    @overload
    def set(self, arg0: 'XExposeEvent') -> 'XExposeEvent':
        """public org.lwjgl.system.linux.XExposeEvent org.lwjgl.system.linux.XExposeEvent.set(org.lwjgl.system.linux.XExposeEvent)"""
        return 'XExposeEvent'.__wrap(super(__XExposeEvent, self).set(arg0))

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XExposeEvent':
        """public static org.lwjgl.system.linux.XExposeEvent org.lwjgl.system.linux.XExposeEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XExposeEvent.__wrap(__XExposeEvent.mallocStack(arg0))

    @staticmethod
    @overload
    def malloc() -> 'XExposeEvent':
        """public static org.lwjgl.system.linux.XExposeEvent org.lwjgl.system.linux.XExposeEvent.malloc()"""
        return XExposeEvent.__wrap(__XExposeEvent.malloc())

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: int) -> 'XExposeEvent':
        """public org.lwjgl.system.linux.XExposeEvent org.lwjgl.system.linux.XExposeEvent.set(int,long,boolean,long,long,int,int,int,int,int)"""
        return 'XExposeEvent'.__wrap(super(__XExposeEvent, self).set(__int.valueOf(arg0), __long.valueOf(arg1), __boolean.valueOf(arg2), __long.valueOf(arg3), __long.valueOf(arg4), __int.valueOf(arg5), __int.valueOf(arg6), __int.valueOf(arg7), __int.valueOf(arg8), __int.valueOf(arg9)))

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XExposeEvent$Buffer org.lwjgl.system.linux.XExposeEvent.mallocStack(int)"""
        return Buffer.__wrap(__XExposeEvent.mallocStack(__int.valueOf(arg0)))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XExposeEvent':
        """public static org.lwjgl.system.linux.XExposeEvent org.lwjgl.system.linux.XExposeEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XExposeEvent.__wrap(__XExposeEvent.callocStack(arg0))

    @overload
    def x(self) -> int:
        """public int org.lwjgl.system.linux.XExposeEvent.x()"""
        return int.__wrap(super(XExposeEvent, self).x())

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XExposeEvent$Buffer org.lwjgl.system.linux.XExposeEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XExposeEvent.callocStack(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XExposeEvent$Buffer org.lwjgl.system.linux.XExposeEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XExposeEvent.mallocStack(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XExposeEvent$Buffer org.lwjgl.system.linux.XExposeEvent.create(int)"""
        return Buffer.__wrap(__XExposeEvent.create(__int.valueOf(arg0)))

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool.__wrap(super(__pyglsystem.Struct, self).isNull(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nwindow(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XExposeEvent.nwindow(long,long)"""
        __XExposeEvent.nwindow(__long.valueOf(arg0), __long.valueOf(arg1))

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XExposeEvent.window()"""
        return int.__wrap(super(XExposeEvent, self).window())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def nheight(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XExposeEvent.nheight(long,int)"""
        __XExposeEvent.nheight(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def calloc() -> 'XExposeEvent':
        """public static org.lwjgl.system.linux.XExposeEvent org.lwjgl.system.linux.XExposeEvent.calloc()"""
        return XExposeEvent.__wrap(__XExposeEvent.calloc())

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XExposeEvent$Buffer org.lwjgl.system.linux.XExposeEvent.calloc(int)"""
        return Buffer.__wrap(__XExposeEvent.calloc(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XExposeEvent.nserial(long)"""
        return int.__wrap(__XExposeEvent.nserial(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XExposeEvent$Buffer org.lwjgl.system.linux.XExposeEvent.createSafe(long,int)"""
        return Buffer.__wrap(__XExposeEvent.createSafe(__long.valueOf(arg0), __int.valueOf(arg1)))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XExposeEvent$Buffer org.lwjgl.system.linux.XExposeEvent.create(long,int)"""
        return Buffer.__wrap(__XExposeEvent.create(__long.valueOf(arg0), __int.valueOf(arg1)))

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XExposeEvent':
        """public static org.lwjgl.system.linux.XExposeEvent org.lwjgl.system.linux.XExposeEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XExposeEvent.__wrap(__XExposeEvent.malloc(arg0))

    @staticmethod
    @overload
    def nx(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XExposeEvent.nx(long)"""
        return int.__wrap(__XExposeEvent.nx(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XExposeEvent.nserial(long,long)"""
        __XExposeEvent.nserial(__long.valueOf(arg0), __long.valueOf(arg1))

    @overload
    def send_event(self, arg0: bool) -> 'XExposeEvent':
        """public org.lwjgl.system.linux.XExposeEvent org.lwjgl.system.linux.XExposeEvent.send_event(boolean)"""
        return 'XExposeEvent'.__wrap(super(__XExposeEvent, self).send_event(__boolean.valueOf(arg0)))

    @staticmethod
    @overload
    def create() -> 'XExposeEvent':
        """public static org.lwjgl.system.linux.XExposeEvent org.lwjgl.system.linux.XExposeEvent.create()"""
        return XExposeEvent.__wrap(__XExposeEvent.create())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XExposeEvent$Buffer org.lwjgl.system.linux.XExposeEvent.callocStack(int)"""
        return Buffer.__wrap(__XExposeEvent.callocStack(__int.valueOf(arg0)))

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def height(self, arg0: int) -> 'XExposeEvent':
        """public org.lwjgl.system.linux.XExposeEvent org.lwjgl.system.linux.XExposeEvent.height(int)"""
        return 'XExposeEvent'.__wrap(super(__XExposeEvent, self).height(__int.valueOf(arg0)))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XExposeEvent.sizeof()"""
        return int.__wrap(super(XExposeEvent, self).sizeof())

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XExposeEvent':
        """public static org.lwjgl.system.linux.XExposeEvent org.lwjgl.system.linux.XExposeEvent.createSafe(long)"""
        return XExposeEvent.__wrap(__XExposeEvent.createSafe(__long.valueOf(arg0)))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XExposeEvent.serial()"""
        return int.__wrap(super(XExposeEvent, self).serial())

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XExposeEvent.ndisplay(long,long)"""
        __XExposeEvent.ndisplay(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XExposeEvent.ntype(long)"""
        return int.__wrap(__XExposeEvent.ntype(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XExposeEvent.ntype(long,int)"""
        __XExposeEvent.ntype(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def nwidth(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XExposeEvent.nwidth(long)"""
        return int.__wrap(__XExposeEvent.nwidth(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nwidth(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XExposeEvent.nwidth(long,int)"""
        __XExposeEvent.nwidth(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def width(self) -> int:
        """public int org.lwjgl.system.linux.XExposeEvent.width()"""
        return int.__wrap(super(XExposeEvent, self).width())

    @overload
    def type(self, arg0: int) -> 'XExposeEvent':
        """public org.lwjgl.system.linux.XExposeEvent org.lwjgl.system.linux.XExposeEvent.type(int)"""
        return 'XExposeEvent'.__wrap(super(__XExposeEvent, self).type(__int.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XExposeEvent.send_event()"""
        return bool.__wrap(super(XExposeEvent, self).send_event())

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XExposeEvent$Buffer org.lwjgl.system.linux.XExposeEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XExposeEvent.malloc(__int.valueOf(arg0), arg1))

    @overload
    def x(self, arg0: int) -> 'XExposeEvent':
        """public org.lwjgl.system.linux.XExposeEvent org.lwjgl.system.linux.XExposeEvent.x(int)"""
        return 'XExposeEvent'.__wrap(super(__XExposeEvent, self).x(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XExposeEvent':
        """public static org.lwjgl.system.linux.XExposeEvent org.lwjgl.system.linux.XExposeEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XExposeEvent.__wrap(__XExposeEvent.calloc(arg0))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XExposeEvent.nsend_event(long,int)"""
        __XExposeEvent.nsend_event(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).address())

    @overload
    def serial(self, arg0: int) -> 'XExposeEvent':
        """public org.lwjgl.system.linux.XExposeEvent org.lwjgl.system.linux.XExposeEvent.serial(long)"""
        return 'XExposeEvent'.__wrap(super(__XExposeEvent, self).serial(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nwindow(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XExposeEvent.nwindow(long)"""
        return int.__wrap(__XExposeEvent.nwindow(__long.valueOf(arg0)))

    @overload
    def window(self, arg0: int) -> 'XExposeEvent':
        """public org.lwjgl.system.linux.XExposeEvent org.lwjgl.system.linux.XExposeEvent.window(long)"""
        return 'XExposeEvent'.__wrap(super(__XExposeEvent, self).window(__long.valueOf(arg0)))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XExposeEvent.type()"""
        return int.__wrap(super(XExposeEvent, self).type())

    @overload
    def count(self) -> int:
        """public int org.lwjgl.system.linux.XExposeEvent.count()"""
        return int.__wrap(super(XExposeEvent, self).count())

    @staticmethod
    @overload
    def ny(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XExposeEvent.ny(long)"""
        return int.__wrap(__XExposeEvent.ny(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def ncount(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XExposeEvent.ncount(long)"""
        return int.__wrap(__XExposeEvent.ncount(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XExposeEvent$Buffer org.lwjgl.system.linux.XExposeEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XExposeEvent.calloc(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def ny(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XExposeEvent.ny(long,int)"""
        __XExposeEvent.ny(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def y(self) -> int:
        """public int org.lwjgl.system.linux.XExposeEvent.y()"""
        return int.__wrap(super(XExposeEvent, self).y())

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XExposeEvent.display()"""
        return int.__wrap(super(XExposeEvent, self).display())

    @staticmethod
    @overload
    def nheight(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XExposeEvent.nheight(long)"""
        return int.__wrap(__XExposeEvent.nheight(__long.valueOf(arg0)))

    @overload
    def count(self, arg0: int) -> 'XExposeEvent':
        """public org.lwjgl.system.linux.XExposeEvent org.lwjgl.system.linux.XExposeEvent.count(int)"""
        return 'XExposeEvent'.__wrap(super(__XExposeEvent, self).count(__int.valueOf(arg0)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str.__wrap(super(pyglsystem.Pointer$Default, self).toString())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @overload
    def height(self) -> int:
        """public int org.lwjgl.system.linux.XExposeEvent.height()"""
        return int.__wrap(super(XExposeEvent, self).height())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @staticmethod
    @overload
    def create(arg0: int) -> 'XExposeEvent':
        """public static org.lwjgl.system.linux.XExposeEvent org.lwjgl.system.linux.XExposeEvent.create(long)"""
        return XExposeEvent.__wrap(__XExposeEvent.create(__long.valueOf(arg0)))

    @overload
    def width(self, arg0: int) -> 'XExposeEvent':
        """public org.lwjgl.system.linux.XExposeEvent org.lwjgl.system.linux.XExposeEvent.width(int)"""
        return 'XExposeEvent'.__wrap(super(__XExposeEvent, self).width(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def ncount(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XExposeEvent.ncount(long,int)"""
        __XExposeEvent.ncount(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def y(self, arg0: int) -> 'XExposeEvent':
        """public org.lwjgl.system.linux.XExposeEvent org.lwjgl.system.linux.XExposeEvent.y(int)"""
        return 'XExposeEvent'.__wrap(super(__XExposeEvent, self).y(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        __Struct.validate(__long.valueOf(arg0), __int.valueOf(arg1), __int.valueOf(arg2), arg3)

    @overload
    def display(self, arg0: int) -> 'XExposeEvent':
        """public org.lwjgl.system.linux.XExposeEvent org.lwjgl.system.linux.XExposeEvent.display(long)"""
        return 'XExposeEvent'.__wrap(super(__XExposeEvent, self).display(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XExposeEvent.ndisplay(long)"""
        return int.__wrap(__XExposeEvent.ndisplay(__long.valueOf(arg0)))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XExposeEvent(java.nio.ByteBuffer)"""
        val = __XExposeEvent(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XExposeEvent$Buffer org.lwjgl.system.linux.XExposeEvent.malloc(int)"""
        return Buffer.__wrap(__XExposeEvent.malloc(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XExposeEvent.nsend_event(long)"""
        return int.__wrap(__XExposeEvent.nsend_event(__long.valueOf(arg0))) 
 
 
# CLASS: org.lwjgl.system.linux.XNoExposeEvent
from pyquantum_helper import import_once as __import_once__
import org.lwjgl.system.linux.XNoExposeEvent as __XNoExposeEvent
__XNoExposeEvent = __XNoExposeEvent
from builtins import str
import java.lang.Boolean as __boolean
from pyquantum_helper import override
import java.lang.Object as __object
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import org.lwjgl.system.linux.XNoExposeEvent as __XNoExposeEvent_Buffer
__Buffer = __XNoExposeEvent_Buffer.Buffer
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
from builtins import int
 
class XNoExposeEvent(pyglsystem.__Struct, pyglsystem.Struct, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XNoExposeEvent"""
 
    @staticmethod
    def __wrap(java_value: __XNoExposeEvent) -> 'XNoExposeEvent':
        return XNoExposeEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __XNoExposeEvent):
        """
        Dynamic initializer for XNoExposeEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XNoExposeEvent$Buffer org.lwjgl.system.linux.XNoExposeEvent.malloc(int)"""
        return Buffer.__wrap(__XNoExposeEvent.malloc(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XNoExposeEvent$Buffer org.lwjgl.system.linux.XNoExposeEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XNoExposeEvent.callocStack(__int.valueOf(arg0), arg1))

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int, arg5: int, arg6: int) -> 'XNoExposeEvent':
        """public org.lwjgl.system.linux.XNoExposeEvent org.lwjgl.system.linux.XNoExposeEvent.set(int,long,boolean,long,long,int,int)"""
        return 'XNoExposeEvent'.__wrap(super(__XNoExposeEvent, self).set(__int.valueOf(arg0), __long.valueOf(arg1), __boolean.valueOf(arg2), __long.valueOf(arg3), __long.valueOf(arg4), __int.valueOf(arg5), __int.valueOf(arg6)))

    @overload
    def serial(self, arg0: int) -> 'XNoExposeEvent':
        """public org.lwjgl.system.linux.XNoExposeEvent org.lwjgl.system.linux.XNoExposeEvent.serial(long)"""
        return 'XNoExposeEvent'.__wrap(super(__XNoExposeEvent, self).serial(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nminor_code(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XNoExposeEvent.nminor_code(long)"""
        return int.__wrap(__XNoExposeEvent.nminor_code(__long.valueOf(arg0)))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XNoExposeEvent.sizeof()"""
        return int.__wrap(super(XNoExposeEvent, self).sizeof())

    @staticmethod
    @overload
    def create(arg0: int) -> 'XNoExposeEvent':
        """public static org.lwjgl.system.linux.XNoExposeEvent org.lwjgl.system.linux.XNoExposeEvent.create(long)"""
        return XNoExposeEvent.__wrap(__XNoExposeEvent.create(__long.valueOf(arg0)))

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool.__wrap(super(__pyglsystem.Struct, self).isNull(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XNoExposeEvent':
        """public static org.lwjgl.system.linux.XNoExposeEvent org.lwjgl.system.linux.XNoExposeEvent.createSafe(long)"""
        return XNoExposeEvent.__wrap(__XNoExposeEvent.createSafe(__long.valueOf(arg0)))

    @overload
    def drawable(self) -> int:
        """public long org.lwjgl.system.linux.XNoExposeEvent.drawable()"""
        return int.__wrap(super(XNoExposeEvent, self).drawable())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XNoExposeEvent.type()"""
        return int.__wrap(super(XNoExposeEvent, self).type())

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XNoExposeEvent$Buffer org.lwjgl.system.linux.XNoExposeEvent.create(long,int)"""
        return Buffer.__wrap(__XNoExposeEvent.create(__long.valueOf(arg0), __int.valueOf(arg1)))

    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XNoExposeEvent.nsend_event(long,int)"""
        __XNoExposeEvent.nsend_event(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def display(self, arg0: int) -> 'XNoExposeEvent':
        """public org.lwjgl.system.linux.XNoExposeEvent org.lwjgl.system.linux.XNoExposeEvent.display(long)"""
        return 'XNoExposeEvent'.__wrap(super(__XNoExposeEvent, self).display(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XNoExposeEvent$Buffer org.lwjgl.system.linux.XNoExposeEvent.createSafe(long,int)"""
        return Buffer.__wrap(__XNoExposeEvent.createSafe(__long.valueOf(arg0), __int.valueOf(arg1)))

    @overload
    def major_code(self, arg0: int) -> 'XNoExposeEvent':
        """public org.lwjgl.system.linux.XNoExposeEvent org.lwjgl.system.linux.XNoExposeEvent.major_code(int)"""
        return 'XNoExposeEvent'.__wrap(super(__XNoExposeEvent, self).major_code(__int.valueOf(arg0)))

    @overload
    def set(self, arg0: 'XNoExposeEvent') -> 'XNoExposeEvent':
        """public org.lwjgl.system.linux.XNoExposeEvent org.lwjgl.system.linux.XNoExposeEvent.set(org.lwjgl.system.linux.XNoExposeEvent)"""
        return 'XNoExposeEvent'.__wrap(super(__XNoExposeEvent, self).set(arg0))

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XNoExposeEvent$Buffer org.lwjgl.system.linux.XNoExposeEvent.mallocStack(int)"""
        return Buffer.__wrap(__XNoExposeEvent.mallocStack(__int.valueOf(arg0)))

    @overload
    def drawable(self, arg0: int) -> 'XNoExposeEvent':
        """public org.lwjgl.system.linux.XNoExposeEvent org.lwjgl.system.linux.XNoExposeEvent.drawable(long)"""
        return 'XNoExposeEvent'.__wrap(super(__XNoExposeEvent, self).drawable(__long.valueOf(arg0)))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @staticmethod
    @overload
    def ndrawable(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XNoExposeEvent.ndrawable(long,long)"""
        __XNoExposeEvent.ndrawable(__long.valueOf(arg0), __long.valueOf(arg1))

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XNoExposeEvent':
        """public static org.lwjgl.system.linux.XNoExposeEvent org.lwjgl.system.linux.XNoExposeEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XNoExposeEvent.__wrap(__XNoExposeEvent.mallocStack(arg0))

    @overload
    def type(self, arg0: int) -> 'XNoExposeEvent':
        """public org.lwjgl.system.linux.XNoExposeEvent org.lwjgl.system.linux.XNoExposeEvent.type(int)"""
        return 'XNoExposeEvent'.__wrap(super(__XNoExposeEvent, self).type(__int.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XNoExposeEvent.ndisplay(long)"""
        return int.__wrap(__XNoExposeEvent.ndisplay(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XNoExposeEvent':
        """public static org.lwjgl.system.linux.XNoExposeEvent org.lwjgl.system.linux.XNoExposeEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XNoExposeEvent.__wrap(__XNoExposeEvent.calloc(arg0))

    @overload
    def send_event(self, arg0: bool) -> 'XNoExposeEvent':
        """public org.lwjgl.system.linux.XNoExposeEvent org.lwjgl.system.linux.XNoExposeEvent.send_event(boolean)"""
        return 'XNoExposeEvent'.__wrap(super(__XNoExposeEvent, self).send_event(__boolean.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XNoExposeEvent':
        """public static org.lwjgl.system.linux.XNoExposeEvent org.lwjgl.system.linux.XNoExposeEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XNoExposeEvent.__wrap(__XNoExposeEvent.callocStack(arg0))

    @staticmethod
    @overload
    def malloc() -> 'XNoExposeEvent':
        """public static org.lwjgl.system.linux.XNoExposeEvent org.lwjgl.system.linux.XNoExposeEvent.malloc()"""
        return XNoExposeEvent.__wrap(__XNoExposeEvent.malloc())

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XNoExposeEvent.nserial(long,long)"""
        __XNoExposeEvent.nserial(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XNoExposeEvent.nsend_event(long)"""
        return int.__wrap(__XNoExposeEvent.nsend_event(__long.valueOf(arg0)))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).address())

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XNoExposeEvent.validate(long)"""
        __XNoExposeEvent.validate(__long.valueOf(arg0))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XNoExposeEvent.serial()"""
        return int.__wrap(super(XNoExposeEvent, self).serial())

    @staticmethod
    @overload
    def calloc() -> 'XNoExposeEvent':
        """public static org.lwjgl.system.linux.XNoExposeEvent org.lwjgl.system.linux.XNoExposeEvent.calloc()"""
        return XNoExposeEvent.__wrap(__XNoExposeEvent.calloc())

    @staticmethod
    @overload
    def mallocStack() -> 'XNoExposeEvent':
        """public static org.lwjgl.system.linux.XNoExposeEvent org.lwjgl.system.linux.XNoExposeEvent.mallocStack()"""
        return XNoExposeEvent.__wrap(__XNoExposeEvent.mallocStack())

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XNoExposeEvent.ntype(long,int)"""
        __XNoExposeEvent.ntype(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XNoExposeEvent.display()"""
        return int.__wrap(super(XNoExposeEvent, self).display())

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XNoExposeEvent':
        """public static org.lwjgl.system.linux.XNoExposeEvent org.lwjgl.system.linux.XNoExposeEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XNoExposeEvent.__wrap(__XNoExposeEvent.malloc(arg0))

    @staticmethod
    @overload
    def nmajor_code(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XNoExposeEvent.nmajor_code(long)"""
        return int.__wrap(__XNoExposeEvent.nmajor_code(__long.valueOf(arg0)))

    @overload
    def minor_code(self, arg0: int) -> 'XNoExposeEvent':
        """public org.lwjgl.system.linux.XNoExposeEvent org.lwjgl.system.linux.XNoExposeEvent.minor_code(int)"""
        return 'XNoExposeEvent'.__wrap(super(__XNoExposeEvent, self).minor_code(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XNoExposeEvent.ntype(long)"""
        return int.__wrap(__XNoExposeEvent.ntype(__long.valueOf(arg0)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str.__wrap(super(pyglsystem.Pointer$Default, self).toString())

    @staticmethod
    @overload
    def create() -> 'XNoExposeEvent':
        """public static org.lwjgl.system.linux.XNoExposeEvent org.lwjgl.system.linux.XNoExposeEvent.create()"""
        return XNoExposeEvent.__wrap(__XNoExposeEvent.create())

    @overload
    def major_code(self) -> int:
        """public int org.lwjgl.system.linux.XNoExposeEvent.major_code()"""
        return int.__wrap(super(XNoExposeEvent, self).major_code())

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XNoExposeEvent$Buffer org.lwjgl.system.linux.XNoExposeEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XNoExposeEvent.mallocStack(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XNoExposeEvent.ndisplay(long,long)"""
        __XNoExposeEvent.ndisplay(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XNoExposeEvent$Buffer org.lwjgl.system.linux.XNoExposeEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XNoExposeEvent.calloc(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XNoExposeEvent$Buffer org.lwjgl.system.linux.XNoExposeEvent.callocStack(int)"""
        return Buffer.__wrap(__XNoExposeEvent.callocStack(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def ndrawable(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XNoExposeEvent.ndrawable(long)"""
        return int.__wrap(__XNoExposeEvent.ndrawable(__long.valueOf(arg0)))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @staticmethod
    @overload
    def nmajor_code(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XNoExposeEvent.nmajor_code(long,int)"""
        __XNoExposeEvent.nmajor_code(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def minor_code(self) -> int:
        """public int org.lwjgl.system.linux.XNoExposeEvent.minor_code()"""
        return int.__wrap(super(XNoExposeEvent, self).minor_code())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XNoExposeEvent(java.nio.ByteBuffer)"""
        val = __XNoExposeEvent(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XNoExposeEvent$Buffer org.lwjgl.system.linux.XNoExposeEvent.create(int)"""
        return Buffer.__wrap(__XNoExposeEvent.create(__int.valueOf(arg0)))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XNoExposeEvent.send_event()"""
        return bool.__wrap(super(XNoExposeEvent, self).send_event())

    @staticmethod
    @overload
    def nminor_code(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XNoExposeEvent.nminor_code(long,int)"""
        __XNoExposeEvent.nminor_code(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XNoExposeEvent$Buffer org.lwjgl.system.linux.XNoExposeEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XNoExposeEvent.malloc(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XNoExposeEvent$Buffer org.lwjgl.system.linux.XNoExposeEvent.calloc(int)"""
        return Buffer.__wrap(__XNoExposeEvent.calloc(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        __Struct.validate(__long.valueOf(arg0), __int.valueOf(arg1), __int.valueOf(arg2), arg3)

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XNoExposeEvent.nserial(long)"""
        return int.__wrap(__XNoExposeEvent.nserial(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack() -> 'XNoExposeEvent':
        """public static org.lwjgl.system.linux.XNoExposeEvent org.lwjgl.system.linux.XNoExposeEvent.callocStack()"""
        return XNoExposeEvent.__wrap(__XNoExposeEvent.callocStack()) 
 
 
# CLASS: org.lwjgl.system.linux.XCreateWindowEvent
from pyquantum_helper import import_once as __import_once__
from builtins import str
import java.lang.Boolean as __boolean
from pyquantum_helper import override
import java.lang.Object as __object
import org.lwjgl.system.linux.XCreateWindowEvent as __XCreateWindowEvent
__XCreateWindowEvent = __XCreateWindowEvent
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import org.lwjgl.system.linux.XCreateWindowEvent as __XCreateWindowEvent_Buffer
__Buffer = __XCreateWindowEvent_Buffer.Buffer
import java.lang.Object as __Object
__Object = __Object
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
from builtins import int
 
class XCreateWindowEvent(pyglsystem.__Struct, pyglsystem.Struct, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XCreateWindowEvent"""
 
    @staticmethod
    def __wrap(java_value: __XCreateWindowEvent) -> 'XCreateWindowEvent':
        return XCreateWindowEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __XCreateWindowEvent):
        """
        Dynamic initializer for XCreateWindowEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XCreateWindowEvent$Buffer org.lwjgl.system.linux.XCreateWindowEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XCreateWindowEvent.mallocStack(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XCreateWindowEvent.nserial(long)"""
        return int.__wrap(__XCreateWindowEvent.nserial(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'XCreateWindowEvent':
        """public static org.lwjgl.system.linux.XCreateWindowEvent org.lwjgl.system.linux.XCreateWindowEvent.create(long)"""
        return XCreateWindowEvent.__wrap(__XCreateWindowEvent.create(__long.valueOf(arg0)))

    @overload
    def border_width(self) -> int:
        """public int org.lwjgl.system.linux.XCreateWindowEvent.border_width()"""
        return int.__wrap(super(XCreateWindowEvent, self).border_width())

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCreateWindowEvent.ndisplay(long,long)"""
        __XCreateWindowEvent.ndisplay(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def ny(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XCreateWindowEvent.ny(long)"""
        return int.__wrap(__XCreateWindowEvent.ny(__long.valueOf(arg0)))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def malloc() -> 'XCreateWindowEvent':
        """public static org.lwjgl.system.linux.XCreateWindowEvent org.lwjgl.system.linux.XCreateWindowEvent.malloc()"""
        return XCreateWindowEvent.__wrap(__XCreateWindowEvent.malloc())

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XCreateWindowEvent.validate(long)"""
        __XCreateWindowEvent.validate(__long.valueOf(arg0))

    @overload
    def y(self) -> int:
        """public int org.lwjgl.system.linux.XCreateWindowEvent.y()"""
        return int.__wrap(super(XCreateWindowEvent, self).y())

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool.__wrap(super(__pyglsystem.Struct, self).isNull(__int.valueOf(arg0)))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @staticmethod
    @overload
    def nparent(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XCreateWindowEvent.nparent(long)"""
        return int.__wrap(__XCreateWindowEvent.nparent(__long.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def nwidth(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCreateWindowEvent.nwidth(long,int)"""
        __XCreateWindowEvent.nwidth(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XCreateWindowEvent':
        """public static org.lwjgl.system.linux.XCreateWindowEvent org.lwjgl.system.linux.XCreateWindowEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XCreateWindowEvent.__wrap(__XCreateWindowEvent.mallocStack(arg0))

    @staticmethod
    @overload
    def nx(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCreateWindowEvent.nx(long,int)"""
        __XCreateWindowEvent.nx(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: int, arg10: int, arg11: int) -> 'XCreateWindowEvent':
        """public org.lwjgl.system.linux.XCreateWindowEvent org.lwjgl.system.linux.XCreateWindowEvent.set(int,long,boolean,long,long,long,int,int,int,int,int,int)"""
        return 'XCreateWindowEvent'.__wrap(super(__XCreateWindowEvent, self).set(__int.valueOf(arg0), __long.valueOf(arg1), __boolean.valueOf(arg2), __long.valueOf(arg3), __long.valueOf(arg4), __long.valueOf(arg5), __int.valueOf(arg6), __int.valueOf(arg7), __int.valueOf(arg8), __int.valueOf(arg9), __int.valueOf(arg10), __int.valueOf(arg11)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XCreateWindowEvent$Buffer org.lwjgl.system.linux.XCreateWindowEvent.create(int)"""
        return Buffer.__wrap(__XCreateWindowEvent.create(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nheight(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCreateWindowEvent.nheight(long,int)"""
        __XCreateWindowEvent.nheight(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def height(self, arg0: int) -> 'XCreateWindowEvent':
        """public org.lwjgl.system.linux.XCreateWindowEvent org.lwjgl.system.linux.XCreateWindowEvent.height(int)"""
        return 'XCreateWindowEvent'.__wrap(super(__XCreateWindowEvent, self).height(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nheight(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XCreateWindowEvent.nheight(long)"""
        return int.__wrap(__XCreateWindowEvent.nheight(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nborder_width(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCreateWindowEvent.nborder_width(long,int)"""
        __XCreateWindowEvent.nborder_width(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XCreateWindowEvent.type()"""
        return int.__wrap(super(XCreateWindowEvent, self).type())

    @overload
    def y(self, arg0: int) -> 'XCreateWindowEvent':
        """public org.lwjgl.system.linux.XCreateWindowEvent org.lwjgl.system.linux.XCreateWindowEvent.y(int)"""
        return 'XCreateWindowEvent'.__wrap(super(__XCreateWindowEvent, self).y(__int.valueOf(arg0)))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @overload
    def set(self, arg0: 'XCreateWindowEvent') -> 'XCreateWindowEvent':
        """public org.lwjgl.system.linux.XCreateWindowEvent org.lwjgl.system.linux.XCreateWindowEvent.set(org.lwjgl.system.linux.XCreateWindowEvent)"""
        return 'XCreateWindowEvent'.__wrap(super(__XCreateWindowEvent, self).set(arg0))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XCreateWindowEvent(java.nio.ByteBuffer)"""
        val = __XCreateWindowEvent(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @staticmethod
    @overload
    def calloc() -> 'XCreateWindowEvent':
        """public static org.lwjgl.system.linux.XCreateWindowEvent org.lwjgl.system.linux.XCreateWindowEvent.calloc()"""
        return XCreateWindowEvent.__wrap(__XCreateWindowEvent.calloc())

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCreateWindowEvent.nserial(long,long)"""
        __XCreateWindowEvent.nserial(__long.valueOf(arg0), __long.valueOf(arg1))

    @overload
    def override_redirect(self) -> int:
        """public int org.lwjgl.system.linux.XCreateWindowEvent.override_redirect()"""
        return int.__wrap(super(XCreateWindowEvent, self).override_redirect())

    @overload
    def parent(self) -> int:
        """public long org.lwjgl.system.linux.XCreateWindowEvent.parent()"""
        return int.__wrap(super(XCreateWindowEvent, self).parent())

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCreateWindowEvent.ntype(long,int)"""
        __XCreateWindowEvent.ntype(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def callocStack() -> 'XCreateWindowEvent':
        """public static org.lwjgl.system.linux.XCreateWindowEvent org.lwjgl.system.linux.XCreateWindowEvent.callocStack()"""
        return XCreateWindowEvent.__wrap(__XCreateWindowEvent.callocStack())

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XCreateWindowEvent$Buffer org.lwjgl.system.linux.XCreateWindowEvent.calloc(int)"""
        return Buffer.__wrap(__XCreateWindowEvent.calloc(__int.valueOf(arg0)))

    @overload
    def border_width(self, arg0: int) -> 'XCreateWindowEvent':
        """public org.lwjgl.system.linux.XCreateWindowEvent org.lwjgl.system.linux.XCreateWindowEvent.border_width(int)"""
        return 'XCreateWindowEvent'.__wrap(super(__XCreateWindowEvent, self).border_width(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XCreateWindowEvent.ndisplay(long)"""
        return int.__wrap(__XCreateWindowEvent.ndisplay(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nwidth(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XCreateWindowEvent.nwidth(long)"""
        return int.__wrap(__XCreateWindowEvent.nwidth(__long.valueOf(arg0)))

    @overload
    def window(self, arg0: int) -> 'XCreateWindowEvent':
        """public org.lwjgl.system.linux.XCreateWindowEvent org.lwjgl.system.linux.XCreateWindowEvent.window(long)"""
        return 'XCreateWindowEvent'.__wrap(super(__XCreateWindowEvent, self).window(__long.valueOf(arg0)))

    @overload
    def parent(self, arg0: int) -> 'XCreateWindowEvent':
        """public org.lwjgl.system.linux.XCreateWindowEvent org.lwjgl.system.linux.XCreateWindowEvent.parent(long)"""
        return 'XCreateWindowEvent'.__wrap(super(__XCreateWindowEvent, self).parent(__long.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def ny(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCreateWindowEvent.ny(long,int)"""
        __XCreateWindowEvent.ny(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XCreateWindowEvent.serial()"""
        return int.__wrap(super(XCreateWindowEvent, self).serial())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XCreateWindowEvent.ntype(long)"""
        return int.__wrap(__XCreateWindowEvent.ntype(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XCreateWindowEvent.nsend_event(long)"""
        return int.__wrap(__XCreateWindowEvent.nsend_event(__long.valueOf(arg0)))

    @overload
    def override_redirect(self, arg0: int) -> 'XCreateWindowEvent':
        """public org.lwjgl.system.linux.XCreateWindowEvent org.lwjgl.system.linux.XCreateWindowEvent.override_redirect(int)"""
        return 'XCreateWindowEvent'.__wrap(super(__XCreateWindowEvent, self).override_redirect(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCreateWindowEvent.nsend_event(long,int)"""
        __XCreateWindowEvent.nsend_event(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def nparent(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCreateWindowEvent.nparent(long,long)"""
        __XCreateWindowEvent.nparent(__long.valueOf(arg0), __long.valueOf(arg1))

    @overload
    def type(self, arg0: int) -> 'XCreateWindowEvent':
        """public org.lwjgl.system.linux.XCreateWindowEvent org.lwjgl.system.linux.XCreateWindowEvent.type(int)"""
        return 'XCreateWindowEvent'.__wrap(super(__XCreateWindowEvent, self).type(__int.valueOf(arg0)))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).address())

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XCreateWindowEvent':
        """public static org.lwjgl.system.linux.XCreateWindowEvent org.lwjgl.system.linux.XCreateWindowEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XCreateWindowEvent.__wrap(__XCreateWindowEvent.callocStack(arg0))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XCreateWindowEvent.send_event()"""
        return bool.__wrap(super(XCreateWindowEvent, self).send_event())

    @overload
    def send_event(self, arg0: bool) -> 'XCreateWindowEvent':
        """public org.lwjgl.system.linux.XCreateWindowEvent org.lwjgl.system.linux.XCreateWindowEvent.send_event(boolean)"""
        return 'XCreateWindowEvent'.__wrap(super(__XCreateWindowEvent, self).send_event(__boolean.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XCreateWindowEvent$Buffer org.lwjgl.system.linux.XCreateWindowEvent.create(long,int)"""
        return Buffer.__wrap(__XCreateWindowEvent.create(__long.valueOf(arg0), __int.valueOf(arg1)))

    @staticmethod
    @overload
    def create() -> 'XCreateWindowEvent':
        """public static org.lwjgl.system.linux.XCreateWindowEvent org.lwjgl.system.linux.XCreateWindowEvent.create()"""
        return XCreateWindowEvent.__wrap(__XCreateWindowEvent.create())

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XCreateWindowEvent$Buffer org.lwjgl.system.linux.XCreateWindowEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XCreateWindowEvent.calloc(__int.valueOf(arg0), arg1))

    @overload
    def display(self, arg0: int) -> 'XCreateWindowEvent':
        """public org.lwjgl.system.linux.XCreateWindowEvent org.lwjgl.system.linux.XCreateWindowEvent.display(long)"""
        return 'XCreateWindowEvent'.__wrap(super(__XCreateWindowEvent, self).display(__long.valueOf(arg0)))

    @overload
    def x(self, arg0: int) -> 'XCreateWindowEvent':
        """public org.lwjgl.system.linux.XCreateWindowEvent org.lwjgl.system.linux.XCreateWindowEvent.x(int)"""
        return 'XCreateWindowEvent'.__wrap(super(__XCreateWindowEvent, self).x(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XCreateWindowEvent$Buffer org.lwjgl.system.linux.XCreateWindowEvent.mallocStack(int)"""
        return Buffer.__wrap(__XCreateWindowEvent.mallocStack(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XCreateWindowEvent$Buffer org.lwjgl.system.linux.XCreateWindowEvent.callocStack(int)"""
        return Buffer.__wrap(__XCreateWindowEvent.callocStack(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nborder_width(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XCreateWindowEvent.nborder_width(long)"""
        return int.__wrap(__XCreateWindowEvent.nborder_width(__long.valueOf(arg0)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str.__wrap(super(pyglsystem.Pointer$Default, self).toString())

    @staticmethod
    @overload
    def noverride_redirect(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCreateWindowEvent.noverride_redirect(long,int)"""
        __XCreateWindowEvent.noverride_redirect(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XCreateWindowEvent.window()"""
        return int.__wrap(super(XCreateWindowEvent, self).window())

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XCreateWindowEvent.display()"""
        return int.__wrap(super(XCreateWindowEvent, self).display())

    @overload
    def x(self) -> int:
        """public int org.lwjgl.system.linux.XCreateWindowEvent.x()"""
        return int.__wrap(super(XCreateWindowEvent, self).x())

    @staticmethod
    @overload
    def nwindow(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XCreateWindowEvent.nwindow(long)"""
        return int.__wrap(__XCreateWindowEvent.nwindow(__long.valueOf(arg0)))

    @overload
    def height(self) -> int:
        """public int org.lwjgl.system.linux.XCreateWindowEvent.height()"""
        return int.__wrap(super(XCreateWindowEvent, self).height())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @overload
    def serial(self, arg0: int) -> 'XCreateWindowEvent':
        """public org.lwjgl.system.linux.XCreateWindowEvent org.lwjgl.system.linux.XCreateWindowEvent.serial(long)"""
        return 'XCreateWindowEvent'.__wrap(super(__XCreateWindowEvent, self).serial(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def noverride_redirect(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XCreateWindowEvent.noverride_redirect(long)"""
        return int.__wrap(__XCreateWindowEvent.noverride_redirect(__long.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XCreateWindowEvent$Buffer org.lwjgl.system.linux.XCreateWindowEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XCreateWindowEvent.malloc(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XCreateWindowEvent$Buffer org.lwjgl.system.linux.XCreateWindowEvent.malloc(int)"""
        return Buffer.__wrap(__XCreateWindowEvent.malloc(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nwindow(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCreateWindowEvent.nwindow(long,long)"""
        __XCreateWindowEvent.nwindow(__long.valueOf(arg0), __long.valueOf(arg1))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def width(self, arg0: int) -> 'XCreateWindowEvent':
        """public org.lwjgl.system.linux.XCreateWindowEvent org.lwjgl.system.linux.XCreateWindowEvent.width(int)"""
        return 'XCreateWindowEvent'.__wrap(super(__XCreateWindowEvent, self).width(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XCreateWindowEvent':
        """public static org.lwjgl.system.linux.XCreateWindowEvent org.lwjgl.system.linux.XCreateWindowEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XCreateWindowEvent.__wrap(__XCreateWindowEvent.malloc(arg0))

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XCreateWindowEvent$Buffer org.lwjgl.system.linux.XCreateWindowEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XCreateWindowEvent.callocStack(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def mallocStack() -> 'XCreateWindowEvent':
        """public static org.lwjgl.system.linux.XCreateWindowEvent org.lwjgl.system.linux.XCreateWindowEvent.mallocStack()"""
        return XCreateWindowEvent.__wrap(__XCreateWindowEvent.mallocStack())

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        __Struct.validate(__long.valueOf(arg0), __int.valueOf(arg1), __int.valueOf(arg2), arg3)

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XCreateWindowEvent.sizeof()"""
        return int.__wrap(super(XCreateWindowEvent, self).sizeof())

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XCreateWindowEvent':
        """public static org.lwjgl.system.linux.XCreateWindowEvent org.lwjgl.system.linux.XCreateWindowEvent.createSafe(long)"""
        return XCreateWindowEvent.__wrap(__XCreateWindowEvent.createSafe(__long.valueOf(arg0)))

    @overload
    def width(self) -> int:
        """public int org.lwjgl.system.linux.XCreateWindowEvent.width()"""
        return int.__wrap(super(XCreateWindowEvent, self).width())

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XCreateWindowEvent':
        """public static org.lwjgl.system.linux.XCreateWindowEvent org.lwjgl.system.linux.XCreateWindowEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XCreateWindowEvent.__wrap(__XCreateWindowEvent.calloc(arg0))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XCreateWindowEvent$Buffer org.lwjgl.system.linux.XCreateWindowEvent.createSafe(long,int)"""
        return Buffer.__wrap(__XCreateWindowEvent.createSafe(__long.valueOf(arg0), __int.valueOf(arg1)))

    @staticmethod
    @overload
    def nx(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XCreateWindowEvent.nx(long)"""
        return int.__wrap(__XCreateWindowEvent.nx(__long.valueOf(arg0))) 
 
 
# CLASS: org.lwjgl.system.linux.XConfigureRequestEvent$Buffer
from pyquantum_helper import import_once as __import_once__
import org.lwjgl.system.linux.XConfigureRequestEvent as __XConfigureRequestEvent_Buffer
__Buffer = __XConfigureRequestEvent_Buffer.Buffer
import java.lang.Boolean as __boolean
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import java.util.stream.Stream as __Stream
__Stream = __Stream
import org.lwjgl.system.StructBuffer as __StructBuffer
__StructBuffer = __StructBuffer
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.CustomBuffer as __CustomBuffer
__CustomBuffer = __CustomBuffer
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.util.Iterator as __Iterator
__Iterator = __Iterator
import java.lang.Object as __object
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.util.Iterator as Iterator
import java.util.Spliterator as __Spliterator
__Spliterator = __Spliterator
import java.lang.Long as __long
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import java.util.stream.Stream as Stream
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import int
 
class Buffer(pyglsystem.__StructBuffer, pyglsystem.StructBuffer, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XConfigureRequestEvent.Buffer"""
 
    @staticmethod
    def __wrap(java_value: __Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def parent(self) -> int:
        """public long org.lwjgl.system.linux.XConfigureRequestEvent$Buffer.parent()"""
        return int.__wrap(super(Buffer, self).parent())

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XConfigureRequestEvent$Buffer(long,int)"""
        val = __Buffer(__long.valueOf(arg0), __int.valueOf(arg1))
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def window(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XConfigureRequestEvent$Buffer org.lwjgl.system.linux.XConfigureRequestEvent$Buffer.window(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).window(__long.valueOf(arg0)))

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(__pyglsystem.StructBuffer, self).forEach(arg0)

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XConfigureRequestEvent$Buffer.display()"""
        return int.__wrap(super(Buffer, self).display())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0), arg1))

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XConfigureRequestEvent$Buffer org.lwjgl.system.linux.XConfigureRequestEvent$Buffer.type(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).type(__int.valueOf(arg0)))

    @overload
    def x(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XConfigureRequestEvent$Buffer org.lwjgl.system.linux.XConfigureRequestEvent$Buffer.x(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).x(__int.valueOf(arg0)))

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XConfigureRequestEvent$Buffer org.lwjgl.system.linux.XConfigureRequestEvent$Buffer.serial(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).serial(__long.valueOf(arg0)))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def width(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XConfigureRequestEvent$Buffer org.lwjgl.system.linux.XConfigureRequestEvent$Buffer.width(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).width(__int.valueOf(arg0)))

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int.__wrap(super(__pyglsystem.CustomBuffer, self).address(__int.valueOf(arg0)))

    @overload
    def height(self) -> int:
        """public int org.lwjgl.system.linux.XConfigureRequestEvent$Buffer.height()"""
        return int.__wrap(super(Buffer, self).height())

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(__int.valueOf(arg0), arg1))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int.__wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XConfigureRequestEvent$Buffer(java.nio.ByteBuffer)"""
        val = __Buffer(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(arg0))

    @overload
    def border_width(self) -> int:
        """public int org.lwjgl.system.linux.XConfigureRequestEvent$Buffer.border_width()"""
        return int.__wrap(super(Buffer, self).border_width())

    @overload
    def value_mask(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XConfigureRequestEvent$Buffer org.lwjgl.system.linux.XConfigureRequestEvent$Buffer.value_mask(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).value_mask(__long.valueOf(arg0)))

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XConfigureRequestEvent$Buffer org.lwjgl.system.linux.XConfigureRequestEvent$Buffer.send_event(boolean)"""
        return 'Buffer'.__wrap(super(__Buffer, self).send_event(__boolean.valueOf(arg0)))

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def border_width(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XConfigureRequestEvent$Buffer org.lwjgl.system.linux.XConfigureRequestEvent$Buffer.border_width(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).border_width(__int.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool.__wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @overload
    def detail(self) -> int:
        """public int org.lwjgl.system.linux.XConfigureRequestEvent$Buffer.detail()"""
        return int.__wrap(super(Buffer, self).detail())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).position(__int.valueOf(arg0)))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0)))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).clear())

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(__int.valueOf(arg0), arg1))

    @overload
    def above(self) -> int:
        """public long org.lwjgl.system.linux.XConfigureRequestEvent$Buffer.above()"""
        return int.__wrap(super(Buffer, self).above())

    @overload
    def value_mask(self) -> int:
        """public long org.lwjgl.system.linux.XConfigureRequestEvent$Buffer.value_mask()"""
        return int.__wrap(super(Buffer, self).value_mask())

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XConfigureRequestEvent$Buffer.send_event()"""
        return bool.__wrap(super(Buffer, self).send_event())

    @overload
    def x(self) -> int:
        """public int org.lwjgl.system.linux.XConfigureRequestEvent$Buffer.x()"""
        return int.__wrap(super(Buffer, self).x())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address())

    @overload
    def width(self) -> int:
        """public int org.lwjgl.system.linux.XConfigureRequestEvent$Buffer.width()"""
        return int.__wrap(super(Buffer, self).width())

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XConfigureRequestEvent$Buffer org.lwjgl.system.linux.XConfigureRequestEvent$Buffer.display(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).display(__long.valueOf(arg0)))

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).slice())

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XConfigureRequestEvent$Buffer.window()"""
        return int.__wrap(super(Buffer, self).window())

    @overload
    def parent(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XConfigureRequestEvent$Buffer org.lwjgl.system.linux.XConfigureRequestEvent$Buffer.parent(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).parent(__long.valueOf(arg0)))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XConfigureRequestEvent$Buffer.serial()"""
        return int.__wrap(super(Buffer, self).serial())

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'.__wrap(super(pyglsystem.StructBuffer, self).get())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).limit(__int.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).reset())

    @overload
    def height(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XConfigureRequestEvent$Buffer org.lwjgl.system.linux.XConfigureRequestEvent$Buffer.height(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).height(__int.valueOf(arg0)))

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'.__wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str.__wrap(super(pyglsystem.CustomBuffer, self).toString())

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XConfigureRequestEvent$Buffer.type()"""
        return int.__wrap(super(Buffer, self).type())

    @overload
    def y(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XConfigureRequestEvent$Buffer org.lwjgl.system.linux.XConfigureRequestEvent$Buffer.y(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).y(__int.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @overload
    def above(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XConfigureRequestEvent$Buffer org.lwjgl.system.linux.XConfigureRequestEvent$Buffer.above(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).above(__long.valueOf(arg0)))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def y(self) -> int:
        """public int org.lwjgl.system.linux.XConfigureRequestEvent$Buffer.y()"""
        return int.__wrap(super(Buffer, self).y())

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(arg0))

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).stream())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'.__wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def detail(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XConfigureRequestEvent$Buffer org.lwjgl.system.linux.XConfigureRequestEvent$Buffer.detail(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).detail(__int.valueOf(arg0)))

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).slice(__int.valueOf(arg0), __int.valueOf(arg1))) 
 
 
# CLASS: org.lwjgl.system.linux.XSelectionRequestEvent
from pyquantum_helper import import_once as __import_once__
from builtins import str
import java.lang.Boolean as __boolean
from pyquantum_helper import override
import java.lang.Object as __object
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.linux.XSelectionRequestEvent as __XSelectionRequestEvent_Buffer
__Buffer = __XSelectionRequestEvent_Buffer.Buffer
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import org.lwjgl.system.linux.XSelectionRequestEvent as __XSelectionRequestEvent
__XSelectionRequestEvent = __XSelectionRequestEvent
import java.lang.Object as __Object
__Object = __Object
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
from builtins import int
 
class XSelectionRequestEvent(pyglsystem.__Struct, pyglsystem.Struct, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XSelectionRequestEvent"""
 
    @staticmethod
    def __wrap(java_value: __XSelectionRequestEvent) -> 'XSelectionRequestEvent':
        return XSelectionRequestEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __XSelectionRequestEvent):
        """
        Dynamic initializer for XSelectionRequestEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XSelectionRequestEvent':
        """public static org.lwjgl.system.linux.XSelectionRequestEvent org.lwjgl.system.linux.XSelectionRequestEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XSelectionRequestEvent.__wrap(__XSelectionRequestEvent.mallocStack(arg0))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSelectionRequestEvent.nsend_event(long,int)"""
        __XSelectionRequestEvent.nsend_event(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionRequestEvent$Buffer org.lwjgl.system.linux.XSelectionRequestEvent.calloc(int)"""
        return Buffer.__wrap(__XSelectionRequestEvent.calloc(__int.valueOf(arg0)))

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool.__wrap(super(__pyglsystem.Struct, self).isNull(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack() -> 'XSelectionRequestEvent':
        """public static org.lwjgl.system.linux.XSelectionRequestEvent org.lwjgl.system.linux.XSelectionRequestEvent.callocStack()"""
        return XSelectionRequestEvent.__wrap(__XSelectionRequestEvent.callocStack())

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XSelectionRequestEvent':
        """public static org.lwjgl.system.linux.XSelectionRequestEvent org.lwjgl.system.linux.XSelectionRequestEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XSelectionRequestEvent.__wrap(__XSelectionRequestEvent.malloc(arg0))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSelectionRequestEvent.ndisplay(long,long)"""
        __XSelectionRequestEvent.ndisplay(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def nselection(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XSelectionRequestEvent.nselection(long)"""
        return int.__wrap(__XSelectionRequestEvent.nselection(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionRequestEvent$Buffer org.lwjgl.system.linux.XSelectionRequestEvent.callocStack(int)"""
        return Buffer.__wrap(__XSelectionRequestEvent.callocStack(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def ntime(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XSelectionRequestEvent.ntime(long)"""
        return int.__wrap(__XSelectionRequestEvent.ntime(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSelectionRequestEvent.nserial(long,long)"""
        __XSelectionRequestEvent.nserial(__long.valueOf(arg0), __long.valueOf(arg1))

    @overload
    def property(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionRequestEvent.property()"""
        return int.__wrap(super(XSelectionRequestEvent, self).property())

    @overload
    def send_event(self, arg0: bool) -> 'XSelectionRequestEvent':
        """public org.lwjgl.system.linux.XSelectionRequestEvent org.lwjgl.system.linux.XSelectionRequestEvent.send_event(boolean)"""
        return 'XSelectionRequestEvent'.__wrap(super(__XSelectionRequestEvent, self).send_event(__boolean.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XSelectionRequestEvent':
        """public static org.lwjgl.system.linux.XSelectionRequestEvent org.lwjgl.system.linux.XSelectionRequestEvent.createSafe(long)"""
        return XSelectionRequestEvent.__wrap(__XSelectionRequestEvent.createSafe(__long.valueOf(arg0)))

    @overload
    def owner(self, arg0: int) -> 'XSelectionRequestEvent':
        """public org.lwjgl.system.linux.XSelectionRequestEvent org.lwjgl.system.linux.XSelectionRequestEvent.owner(long)"""
        return 'XSelectionRequestEvent'.__wrap(super(__XSelectionRequestEvent, self).owner(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XSelectionRequestEvent':
        """public static org.lwjgl.system.linux.XSelectionRequestEvent org.lwjgl.system.linux.XSelectionRequestEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XSelectionRequestEvent.__wrap(__XSelectionRequestEvent.callocStack(arg0))

    @overload
    def selection(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionRequestEvent.selection()"""
        return int.__wrap(super(XSelectionRequestEvent, self).selection())

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSelectionRequestEvent.ntype(long,int)"""
        __XSelectionRequestEvent.ntype(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def nrequestor(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSelectionRequestEvent.nrequestor(long,long)"""
        __XSelectionRequestEvent.nrequestor(__long.valueOf(arg0), __long.valueOf(arg1))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @overload
    def time(self, arg0: int) -> 'XSelectionRequestEvent':
        """public org.lwjgl.system.linux.XSelectionRequestEvent org.lwjgl.system.linux.XSelectionRequestEvent.time(long)"""
        return 'XSelectionRequestEvent'.__wrap(super(__XSelectionRequestEvent, self).time(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionRequestEvent$Buffer org.lwjgl.system.linux.XSelectionRequestEvent.create(int)"""
        return Buffer.__wrap(__XSelectionRequestEvent.create(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionRequestEvent$Buffer org.lwjgl.system.linux.XSelectionRequestEvent.malloc(int)"""
        return Buffer.__wrap(__XSelectionRequestEvent.malloc(__int.valueOf(arg0)))

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def target(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionRequestEvent.target()"""
        return int.__wrap(super(XSelectionRequestEvent, self).target())

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XSelectionRequestEvent.send_event()"""
        return bool.__wrap(super(XSelectionRequestEvent, self).send_event())

    @staticmethod
    @overload
    def nproperty(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSelectionRequestEvent.nproperty(long,long)"""
        __XSelectionRequestEvent.nproperty(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XSelectionRequestEvent.nserial(long)"""
        return int.__wrap(__XSelectionRequestEvent.nserial(__long.valueOf(arg0)))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XSelectionRequestEvent.type()"""
        return int.__wrap(super(XSelectionRequestEvent, self).type())

    @staticmethod
    @overload
    def malloc() -> 'XSelectionRequestEvent':
        """public static org.lwjgl.system.linux.XSelectionRequestEvent org.lwjgl.system.linux.XSelectionRequestEvent.malloc()"""
        return XSelectionRequestEvent.__wrap(__XSelectionRequestEvent.malloc())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def display(self, arg0: int) -> 'XSelectionRequestEvent':
        """public org.lwjgl.system.linux.XSelectionRequestEvent org.lwjgl.system.linux.XSelectionRequestEvent.display(long)"""
        return 'XSelectionRequestEvent'.__wrap(super(__XSelectionRequestEvent, self).display(__long.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionRequestEvent$Buffer org.lwjgl.system.linux.XSelectionRequestEvent.create(long,int)"""
        return Buffer.__wrap(__XSelectionRequestEvent.create(__long.valueOf(arg0), __int.valueOf(arg1)))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionRequestEvent$Buffer org.lwjgl.system.linux.XSelectionRequestEvent.createSafe(long,int)"""
        return Buffer.__wrap(__XSelectionRequestEvent.createSafe(__long.valueOf(arg0), __int.valueOf(arg1)))

    @staticmethod
    @overload
    def nrequestor(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XSelectionRequestEvent.nrequestor(long)"""
        return int.__wrap(__XSelectionRequestEvent.nrequestor(__long.valueOf(arg0)))

    @overload
    def serial(self, arg0: int) -> 'XSelectionRequestEvent':
        """public org.lwjgl.system.linux.XSelectionRequestEvent org.lwjgl.system.linux.XSelectionRequestEvent.serial(long)"""
        return 'XSelectionRequestEvent'.__wrap(super(__XSelectionRequestEvent, self).serial(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nselection(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSelectionRequestEvent.nselection(long,long)"""
        __XSelectionRequestEvent.nselection(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def nproperty(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XSelectionRequestEvent.nproperty(long)"""
        return int.__wrap(__XSelectionRequestEvent.nproperty(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc() -> 'XSelectionRequestEvent':
        """public static org.lwjgl.system.linux.XSelectionRequestEvent org.lwjgl.system.linux.XSelectionRequestEvent.calloc()"""
        return XSelectionRequestEvent.__wrap(__XSelectionRequestEvent.calloc())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).address())

    @overload
    def set(self, arg0: 'XSelectionRequestEvent') -> 'XSelectionRequestEvent':
        """public org.lwjgl.system.linux.XSelectionRequestEvent org.lwjgl.system.linux.XSelectionRequestEvent.set(org.lwjgl.system.linux.XSelectionRequestEvent)"""
        return 'XSelectionRequestEvent'.__wrap(super(__XSelectionRequestEvent, self).set(arg0))

    @overload
    def type(self, arg0: int) -> 'XSelectionRequestEvent':
        """public org.lwjgl.system.linux.XSelectionRequestEvent org.lwjgl.system.linux.XSelectionRequestEvent.type(int)"""
        return 'XSelectionRequestEvent'.__wrap(super(__XSelectionRequestEvent, self).type(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionRequestEvent$Buffer org.lwjgl.system.linux.XSelectionRequestEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XSelectionRequestEvent.mallocStack(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XSelectionRequestEvent.ndisplay(long)"""
        return int.__wrap(__XSelectionRequestEvent.ndisplay(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XSelectionRequestEvent.ntype(long)"""
        return int.__wrap(__XSelectionRequestEvent.ntype(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'XSelectionRequestEvent':
        """public static org.lwjgl.system.linux.XSelectionRequestEvent org.lwjgl.system.linux.XSelectionRequestEvent.create(long)"""
        return XSelectionRequestEvent.__wrap(__XSelectionRequestEvent.create(__long.valueOf(arg0)))

    @overload
    def requestor(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionRequestEvent.requestor()"""
        return int.__wrap(super(XSelectionRequestEvent, self).requestor())

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionRequestEvent$Buffer org.lwjgl.system.linux.XSelectionRequestEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XSelectionRequestEvent.calloc(__int.valueOf(arg0), arg1))

    @overload
    def property(self, arg0: int) -> 'XSelectionRequestEvent':
        """public org.lwjgl.system.linux.XSelectionRequestEvent org.lwjgl.system.linux.XSelectionRequestEvent.property(long)"""
        return 'XSelectionRequestEvent'.__wrap(super(__XSelectionRequestEvent, self).property(__long.valueOf(arg0)))

    @overload
    def target(self, arg0: int) -> 'XSelectionRequestEvent':
        """public org.lwjgl.system.linux.XSelectionRequestEvent org.lwjgl.system.linux.XSelectionRequestEvent.target(long)"""
        return 'XSelectionRequestEvent'.__wrap(super(__XSelectionRequestEvent, self).target(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XSelectionRequestEvent':
        """public static org.lwjgl.system.linux.XSelectionRequestEvent org.lwjgl.system.linux.XSelectionRequestEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XSelectionRequestEvent.__wrap(__XSelectionRequestEvent.calloc(arg0))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str.__wrap(super(pyglsystem.Pointer$Default, self).toString())

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionRequestEvent.serial()"""
        return int.__wrap(super(XSelectionRequestEvent, self).serial())

    @staticmethod
    @overload
    def ntarget(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSelectionRequestEvent.ntarget(long,long)"""
        __XSelectionRequestEvent.ntarget(__long.valueOf(arg0), __long.valueOf(arg1))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XSelectionRequestEvent(java.nio.ByteBuffer)"""
        val = __XSelectionRequestEvent(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XSelectionRequestEvent.nsend_event(long)"""
        return int.__wrap(__XSelectionRequestEvent.nsend_event(__long.valueOf(arg0)))

    @overload
    def requestor(self, arg0: int) -> 'XSelectionRequestEvent':
        """public org.lwjgl.system.linux.XSelectionRequestEvent org.lwjgl.system.linux.XSelectionRequestEvent.requestor(long)"""
        return 'XSelectionRequestEvent'.__wrap(super(__XSelectionRequestEvent, self).requestor(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XSelectionRequestEvent.validate(long)"""
        __XSelectionRequestEvent.validate(__long.valueOf(arg0))

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: int) -> 'XSelectionRequestEvent':
        """public org.lwjgl.system.linux.XSelectionRequestEvent org.lwjgl.system.linux.XSelectionRequestEvent.set(int,long,boolean,long,long,long,long,long,long,long)"""
        return 'XSelectionRequestEvent'.__wrap(super(__XSelectionRequestEvent, self).set(__int.valueOf(arg0), __long.valueOf(arg1), __boolean.valueOf(arg2), __long.valueOf(arg3), __long.valueOf(arg4), __long.valueOf(arg5), __long.valueOf(arg6), __long.valueOf(arg7), __long.valueOf(arg8), __long.valueOf(arg9)))

    @staticmethod
    @overload
    def create() -> 'XSelectionRequestEvent':
        """public static org.lwjgl.system.linux.XSelectionRequestEvent org.lwjgl.system.linux.XSelectionRequestEvent.create()"""
        return XSelectionRequestEvent.__wrap(__XSelectionRequestEvent.create())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionRequestEvent.display()"""
        return int.__wrap(super(XSelectionRequestEvent, self).display())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XSelectionRequestEvent.sizeof()"""
        return int.__wrap(super(XSelectionRequestEvent, self).sizeof())

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionRequestEvent$Buffer org.lwjgl.system.linux.XSelectionRequestEvent.mallocStack(int)"""
        return Buffer.__wrap(__XSelectionRequestEvent.mallocStack(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nowner(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XSelectionRequestEvent.nowner(long)"""
        return int.__wrap(__XSelectionRequestEvent.nowner(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nowner(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSelectionRequestEvent.nowner(long,long)"""
        __XSelectionRequestEvent.nowner(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def ntime(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSelectionRequestEvent.ntime(long,long)"""
        __XSelectionRequestEvent.ntime(__long.valueOf(arg0), __long.valueOf(arg1))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionRequestEvent$Buffer org.lwjgl.system.linux.XSelectionRequestEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XSelectionRequestEvent.malloc(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionRequestEvent$Buffer org.lwjgl.system.linux.XSelectionRequestEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XSelectionRequestEvent.callocStack(__int.valueOf(arg0), arg1))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @staticmethod
    @overload
    def ntarget(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XSelectionRequestEvent.ntarget(long)"""
        return int.__wrap(__XSelectionRequestEvent.ntarget(__long.valueOf(arg0)))

    @overload
    def owner(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionRequestEvent.owner()"""
        return int.__wrap(super(XSelectionRequestEvent, self).owner())

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        __Struct.validate(__long.valueOf(arg0), __int.valueOf(arg1), __int.valueOf(arg2), arg3)

    @overload
    def selection(self, arg0: int) -> 'XSelectionRequestEvent':
        """public org.lwjgl.system.linux.XSelectionRequestEvent org.lwjgl.system.linux.XSelectionRequestEvent.selection(long)"""
        return 'XSelectionRequestEvent'.__wrap(super(__XSelectionRequestEvent, self).selection(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack() -> 'XSelectionRequestEvent':
        """public static org.lwjgl.system.linux.XSelectionRequestEvent org.lwjgl.system.linux.XSelectionRequestEvent.mallocStack()"""
        return XSelectionRequestEvent.__wrap(__XSelectionRequestEvent.mallocStack())

    @overload
    def time(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionRequestEvent.time()"""
        return int.__wrap(super(XSelectionRequestEvent, self).time()) 
 
 
# CLASS: org.lwjgl.system.linux.XAnyEvent
from pyquantum_helper import import_once as __import_once__
from builtins import str
import java.lang.Boolean as __boolean
from pyquantum_helper import override
import org.lwjgl.system.linux.XAnyEvent as __XAnyEvent
__XAnyEvent = __XAnyEvent
import java.lang.Object as __object
import org.lwjgl.system.linux.XAnyEvent as __XAnyEvent_Buffer
__Buffer = __XAnyEvent_Buffer.Buffer
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
from builtins import int
 
class XAnyEvent(pyglsystem.__Struct, pyglsystem.Struct, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XAnyEvent"""
 
    @staticmethod
    def __wrap(java_value: __XAnyEvent) -> 'XAnyEvent':
        return XAnyEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __XAnyEvent):
        """
        Dynamic initializer for XAnyEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def display(self, arg0: int) -> 'XAnyEvent':
        """public org.lwjgl.system.linux.XAnyEvent org.lwjgl.system.linux.XAnyEvent.display(long)"""
        return 'XAnyEvent'.__wrap(super(__XAnyEvent, self).display(__long.valueOf(arg0)))

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool.__wrap(super(__pyglsystem.Struct, self).isNull(__int.valueOf(arg0)))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XAnyEvent(java.nio.ByteBuffer)"""
        val = __XAnyEvent(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XAnyEvent':
        """public static org.lwjgl.system.linux.XAnyEvent org.lwjgl.system.linux.XAnyEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XAnyEvent.__wrap(__XAnyEvent.malloc(arg0))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XAnyEvent':
        """public static org.lwjgl.system.linux.XAnyEvent org.lwjgl.system.linux.XAnyEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XAnyEvent.__wrap(__XAnyEvent.callocStack(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XAnyEvent.validate(long)"""
        __XAnyEvent.validate(__long.valueOf(arg0))

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XAnyEvent':
        """public static org.lwjgl.system.linux.XAnyEvent org.lwjgl.system.linux.XAnyEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XAnyEvent.__wrap(__XAnyEvent.mallocStack(arg0))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XAnyEvent.serial()"""
        return int.__wrap(super(XAnyEvent, self).serial())

    @staticmethod
    @overload
    def mallocStack() -> 'XAnyEvent':
        """public static org.lwjgl.system.linux.XAnyEvent org.lwjgl.system.linux.XAnyEvent.mallocStack()"""
        return XAnyEvent.__wrap(__XAnyEvent.mallocStack())

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XAnyEvent':
        """public static org.lwjgl.system.linux.XAnyEvent org.lwjgl.system.linux.XAnyEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XAnyEvent.__wrap(__XAnyEvent.calloc(arg0))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XAnyEvent.sizeof()"""
        return int.__wrap(super(XAnyEvent, self).sizeof())

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XAnyEvent.ntype(long,int)"""
        __XAnyEvent.ntype(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XAnyEvent$Buffer org.lwjgl.system.linux.XAnyEvent.calloc(int)"""
        return Buffer.__wrap(__XAnyEvent.calloc(__int.valueOf(arg0)))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XAnyEvent.send_event()"""
        return bool.__wrap(super(XAnyEvent, self).send_event())

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def set(self, arg0: 'XAnyEvent') -> 'XAnyEvent':
        """public org.lwjgl.system.linux.XAnyEvent org.lwjgl.system.linux.XAnyEvent.set(org.lwjgl.system.linux.XAnyEvent)"""
        return 'XAnyEvent'.__wrap(super(__XAnyEvent, self).set(arg0))

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XAnyEvent$Buffer org.lwjgl.system.linux.XAnyEvent.malloc(int)"""
        return Buffer.__wrap(__XAnyEvent.malloc(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XAnyEvent.ntype(long)"""
        return int.__wrap(__XAnyEvent.ntype(__long.valueOf(arg0)))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XAnyEvent.type()"""
        return int.__wrap(super(XAnyEvent, self).type())

    @staticmethod
    @overload
    def create() -> 'XAnyEvent':
        """public static org.lwjgl.system.linux.XAnyEvent org.lwjgl.system.linux.XAnyEvent.create()"""
        return XAnyEvent.__wrap(__XAnyEvent.create())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XAnyEvent.ndisplay(long)"""
        return int.__wrap(__XAnyEvent.ndisplay(__long.valueOf(arg0)))

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XAnyEvent.window()"""
        return int.__wrap(super(XAnyEvent, self).window())

    @staticmethod
    @overload
    def create(arg0: int) -> 'XAnyEvent':
        """public static org.lwjgl.system.linux.XAnyEvent org.lwjgl.system.linux.XAnyEvent.create(long)"""
        return XAnyEvent.__wrap(__XAnyEvent.create(__long.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XAnyEvent$Buffer org.lwjgl.system.linux.XAnyEvent.create(long,int)"""
        return Buffer.__wrap(__XAnyEvent.create(__long.valueOf(arg0), __int.valueOf(arg1)))

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XAnyEvent$Buffer org.lwjgl.system.linux.XAnyEvent.callocStack(int)"""
        return Buffer.__wrap(__XAnyEvent.callocStack(__int.valueOf(arg0)))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).address())

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XAnyEvent':
        """public static org.lwjgl.system.linux.XAnyEvent org.lwjgl.system.linux.XAnyEvent.createSafe(long)"""
        return XAnyEvent.__wrap(__XAnyEvent.createSafe(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nwindow(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XAnyEvent.nwindow(long,long)"""
        __XAnyEvent.nwindow(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def calloc() -> 'XAnyEvent':
        """public static org.lwjgl.system.linux.XAnyEvent org.lwjgl.system.linux.XAnyEvent.calloc()"""
        return XAnyEvent.__wrap(__XAnyEvent.calloc())

    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XAnyEvent.nsend_event(long,int)"""
        __XAnyEvent.nsend_event(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XAnyEvent$Buffer org.lwjgl.system.linux.XAnyEvent.create(int)"""
        return Buffer.__wrap(__XAnyEvent.create(__int.valueOf(arg0)))

    @overload
    def send_event(self, arg0: bool) -> 'XAnyEvent':
        """public org.lwjgl.system.linux.XAnyEvent org.lwjgl.system.linux.XAnyEvent.send_event(boolean)"""
        return 'XAnyEvent'.__wrap(super(__XAnyEvent, self).send_event(__boolean.valueOf(arg0)))

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XAnyEvent.nserial(long,long)"""
        __XAnyEvent.nserial(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XAnyEvent$Buffer org.lwjgl.system.linux.XAnyEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XAnyEvent.callocStack(__int.valueOf(arg0), arg1))

    @overload
    def serial(self, arg0: int) -> 'XAnyEvent':
        """public org.lwjgl.system.linux.XAnyEvent org.lwjgl.system.linux.XAnyEvent.serial(long)"""
        return 'XAnyEvent'.__wrap(super(__XAnyEvent, self).serial(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XAnyEvent.nsend_event(long)"""
        return int.__wrap(__XAnyEvent.nsend_event(__long.valueOf(arg0)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str.__wrap(super(pyglsystem.Pointer$Default, self).toString())

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XAnyEvent$Buffer org.lwjgl.system.linux.XAnyEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XAnyEvent.malloc(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def callocStack() -> 'XAnyEvent':
        """public static org.lwjgl.system.linux.XAnyEvent org.lwjgl.system.linux.XAnyEvent.callocStack()"""
        return XAnyEvent.__wrap(__XAnyEvent.callocStack())

    @overload
    def window(self, arg0: int) -> 'XAnyEvent':
        """public org.lwjgl.system.linux.XAnyEvent org.lwjgl.system.linux.XAnyEvent.window(long)"""
        return 'XAnyEvent'.__wrap(super(__XAnyEvent, self).window(__long.valueOf(arg0)))

    @overload
    def type(self, arg0: int) -> 'XAnyEvent':
        """public org.lwjgl.system.linux.XAnyEvent org.lwjgl.system.linux.XAnyEvent.type(int)"""
        return 'XAnyEvent'.__wrap(super(__XAnyEvent, self).type(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XAnyEvent$Buffer org.lwjgl.system.linux.XAnyEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XAnyEvent.calloc(__int.valueOf(arg0), arg1))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XAnyEvent$Buffer org.lwjgl.system.linux.XAnyEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XAnyEvent.mallocStack(__int.valueOf(arg0), arg1))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @staticmethod
    @overload
    def nwindow(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XAnyEvent.nwindow(long)"""
        return int.__wrap(__XAnyEvent.nwindow(__long.valueOf(arg0)))

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XAnyEvent.display()"""
        return int.__wrap(super(XAnyEvent, self).display())

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XAnyEvent$Buffer org.lwjgl.system.linux.XAnyEvent.mallocStack(int)"""
        return Buffer.__wrap(__XAnyEvent.mallocStack(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc() -> 'XAnyEvent':
        """public static org.lwjgl.system.linux.XAnyEvent org.lwjgl.system.linux.XAnyEvent.malloc()"""
        return XAnyEvent.__wrap(__XAnyEvent.malloc())

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int) -> 'XAnyEvent':
        """public org.lwjgl.system.linux.XAnyEvent org.lwjgl.system.linux.XAnyEvent.set(int,long,boolean,long,long)"""
        return 'XAnyEvent'.__wrap(super(__XAnyEvent, self).set(__int.valueOf(arg0), __long.valueOf(arg1), __boolean.valueOf(arg2), __long.valueOf(arg3), __long.valueOf(arg4)))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XAnyEvent$Buffer org.lwjgl.system.linux.XAnyEvent.createSafe(long,int)"""
        return Buffer.__wrap(__XAnyEvent.createSafe(__long.valueOf(arg0), __int.valueOf(arg1)))

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XAnyEvent.ndisplay(long,long)"""
        __XAnyEvent.ndisplay(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        __Struct.validate(__long.valueOf(arg0), __int.valueOf(arg1), __int.valueOf(arg2), arg3)

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XAnyEvent.nserial(long)"""
        return int.__wrap(__XAnyEvent.nserial(__long.valueOf(arg0))) 
 
 
# CLASS: org.lwjgl.system.linux.XReparentEvent$Buffer
from pyquantum_helper import import_once as __import_once__
import java.lang.Boolean as __boolean
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import java.util.stream.Stream as __Stream
__Stream = __Stream
import org.lwjgl.system.StructBuffer as __StructBuffer
__StructBuffer = __StructBuffer
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.CustomBuffer as __CustomBuffer
__CustomBuffer = __CustomBuffer
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.util.Iterator as __Iterator
__Iterator = __Iterator
import java.lang.Object as __object
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.util.Iterator as Iterator
import org.lwjgl.system.linux.XReparentEvent as __XReparentEvent_Buffer
__Buffer = __XReparentEvent_Buffer.Buffer
import java.util.Spliterator as __Spliterator
__Spliterator = __Spliterator
import java.lang.Long as __long
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import java.util.stream.Stream as Stream
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import int
 
class Buffer(pyglsystem.__StructBuffer, pyglsystem.StructBuffer, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XReparentEvent.Buffer"""
 
    @staticmethod
    def __wrap(java_value: __Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def x(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XReparentEvent$Buffer org.lwjgl.system.linux.XReparentEvent$Buffer.x(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).x(__int.valueOf(arg0)))

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(__pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0), arg1))

    @overload
    def x(self) -> int:
        """public int org.lwjgl.system.linux.XReparentEvent$Buffer.x()"""
        return int.__wrap(super(Buffer, self).x())

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XReparentEvent$Buffer(long,int)"""
        val = __Buffer(__long.valueOf(arg0), __int.valueOf(arg1))
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XReparentEvent$Buffer org.lwjgl.system.linux.XReparentEvent$Buffer.display(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).display(__long.valueOf(arg0)))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address0())

    @overload
    def parent(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XReparentEvent$Buffer org.lwjgl.system.linux.XReparentEvent$Buffer.parent(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).parent(__long.valueOf(arg0)))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int.__wrap(super(__pyglsystem.CustomBuffer, self).address(__int.valueOf(arg0)))

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XReparentEvent$Buffer.display()"""
        return int.__wrap(super(Buffer, self).display())

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(__int.valueOf(arg0), arg1))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int.__wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @overload
    def override_redirect(self) -> int:
        """public int org.lwjgl.system.linux.XReparentEvent$Buffer.override_redirect()"""
        return int.__wrap(super(Buffer, self).override_redirect())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(arg0))

    @overload
    def event(self) -> int:
        """public long org.lwjgl.system.linux.XReparentEvent$Buffer.event()"""
        return int.__wrap(super(Buffer, self).event())

    @overload
    def parent(self) -> int:
        """public long org.lwjgl.system.linux.XReparentEvent$Buffer.parent()"""
        return int.__wrap(super(Buffer, self).parent())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @overload
    def event(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XReparentEvent$Buffer org.lwjgl.system.linux.XReparentEvent$Buffer.event(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).event(__long.valueOf(arg0)))

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XReparentEvent$Buffer org.lwjgl.system.linux.XReparentEvent$Buffer.send_event(boolean)"""
        return 'Buffer'.__wrap(super(__Buffer, self).send_event(__boolean.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool.__wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @overload
    def override_redirect(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XReparentEvent$Buffer org.lwjgl.system.linux.XReparentEvent$Buffer.override_redirect(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).override_redirect(__int.valueOf(arg0)))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XReparentEvent$Buffer.type()"""
        return int.__wrap(super(Buffer, self).type())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).position(__int.valueOf(arg0)))

    @overload
    def y(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XReparentEvent$Buffer org.lwjgl.system.linux.XReparentEvent$Buffer.y(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).y(__int.valueOf(arg0)))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0)))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).clear())

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(__int.valueOf(arg0), arg1))

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address())

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XReparentEvent$Buffer.window()"""
        return int.__wrap(super(Buffer, self).window())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XReparentEvent$Buffer org.lwjgl.system.linux.XReparentEvent$Buffer.type(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).type(__int.valueOf(arg0)))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XReparentEvent$Buffer.serial()"""
        return int.__wrap(super(Buffer, self).serial())

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).slice())

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XReparentEvent$Buffer(java.nio.ByteBuffer)"""
        val = __Buffer(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XReparentEvent$Buffer.send_event()"""
        return bool.__wrap(super(Buffer, self).send_event())

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'.__wrap(super(pyglsystem.StructBuffer, self).get())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).limit(__int.valueOf(arg0)))

    @overload
    def y(self) -> int:
        """public int org.lwjgl.system.linux.XReparentEvent$Buffer.y()"""
        return int.__wrap(super(Buffer, self).y())

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'.__wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str.__wrap(super(pyglsystem.CustomBuffer, self).toString())

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XReparentEvent$Buffer org.lwjgl.system.linux.XReparentEvent$Buffer.serial(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).serial(__long.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def window(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XReparentEvent$Buffer org.lwjgl.system.linux.XReparentEvent$Buffer.window(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).window(__long.valueOf(arg0)))

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(arg0))

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).stream())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'.__wrap(super(pyglsystem.StructBuffer, self).iterator())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).slice(__int.valueOf(arg0), __int.valueOf(arg1))) 
 
 
# CLASS: org.lwjgl.system.linux.XAnyEvent$Buffer
from pyquantum_helper import import_once as __import_once__
import java.lang.Boolean as __boolean
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import java.util.stream.Stream as __Stream
__Stream = __Stream
import org.lwjgl.system.StructBuffer as __StructBuffer
__StructBuffer = __StructBuffer
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.CustomBuffer as __CustomBuffer
__CustomBuffer = __CustomBuffer
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.util.Iterator as __Iterator
__Iterator = __Iterator
import java.lang.Object as __object
import org.lwjgl.system.linux.XAnyEvent as __XAnyEvent_Buffer
__Buffer = __XAnyEvent_Buffer.Buffer
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.util.Iterator as Iterator
import java.util.Spliterator as __Spliterator
__Spliterator = __Spliterator
import java.lang.Long as __long
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import java.util.stream.Stream as Stream
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import int
 
class Buffer(pyglsystem.__StructBuffer, pyglsystem.StructBuffer, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XAnyEvent.Buffer"""
 
    @staticmethod
    def __wrap(java_value: __Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XAnyEvent$Buffer.window()"""
        return int.__wrap(super(Buffer, self).window())

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(__pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0), arg1))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XAnyEvent$Buffer org.lwjgl.system.linux.XAnyEvent$Buffer.send_event(boolean)"""
        return 'Buffer'.__wrap(super(__Buffer, self).send_event(__boolean.valueOf(arg0)))

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int.__wrap(super(__pyglsystem.CustomBuffer, self).address(__int.valueOf(arg0)))

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(__int.valueOf(arg0), arg1))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int.__wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(arg0))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XAnyEvent$Buffer.type()"""
        return int.__wrap(super(Buffer, self).type())

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XAnyEvent$Buffer org.lwjgl.system.linux.XAnyEvent$Buffer.type(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).type(__int.valueOf(arg0)))

    @overload
    def window(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XAnyEvent$Buffer org.lwjgl.system.linux.XAnyEvent$Buffer.window(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).window(__long.valueOf(arg0)))

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool.__wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XAnyEvent$Buffer org.lwjgl.system.linux.XAnyEvent$Buffer.display(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).display(__long.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).position(__int.valueOf(arg0)))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0)))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).clear())

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(__int.valueOf(arg0), arg1))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XAnyEvent$Buffer(java.nio.ByteBuffer)"""
        val = __Buffer(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XAnyEvent$Buffer.serial()"""
        return int.__wrap(super(Buffer, self).serial())

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address())

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XAnyEvent$Buffer.display()"""
        return int.__wrap(super(Buffer, self).display())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).slice())

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XAnyEvent$Buffer org.lwjgl.system.linux.XAnyEvent$Buffer.serial(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).serial(__long.valueOf(arg0)))

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'.__wrap(super(pyglsystem.StructBuffer, self).get())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).limit(__int.valueOf(arg0)))

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XAnyEvent$Buffer(long,int)"""
        val = __Buffer(__long.valueOf(arg0), __int.valueOf(arg1))
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'.__wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str.__wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(arg0))

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).stream())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XAnyEvent$Buffer.send_event()"""
        return bool.__wrap(super(Buffer, self).send_event())

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'.__wrap(super(pyglsystem.StructBuffer, self).iterator())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).slice(__int.valueOf(arg0), __int.valueOf(arg1))) 
 
 
# CLASS: org.lwjgl.system.linux.Msghdr
from pyquantum_helper import import_once as __import_once__
from builtins import str
from pyquantum_helper import override
import java.lang.Object as __object
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import java.nio.ByteBuffer as __ByteBuffer
__ByteBuffer = __ByteBuffer
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import org.lwjgl.system.linux.Msghdr as __Msghdr
__Msghdr = __Msghdr
import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import org.lwjgl.system.linux.IOVec as __IOVec_Buffer
__Buffer = __IOVec_Buffer.Buffer
import java.lang.Object as __Object
__Object = __Object
import org.lwjgl.system.linux.Msghdr as __Msghdr_Buffer
__Buffer = __Msghdr_Buffer.Buffer
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Integer as __int
from builtins import bool
from builtins import int
 
class Msghdr(pyglsystem.__Struct, pyglsystem.Struct, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.Msghdr"""
 
    @staticmethod
    def __wrap(java_value: __Msghdr) -> 'Msghdr':
        return Msghdr(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Msghdr):
        """
        Dynamic initializer for Msghdr.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.Msghdr.sizeof()"""
        return int.__wrap(super(Msghdr, self).sizeof())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.Msghdr$Buffer org.lwjgl.system.linux.Msghdr.create(int)"""
        return Buffer.__wrap(__Msghdr.create(__int.valueOf(arg0)))

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool.__wrap(super(__pyglsystem.Struct, self).isNull(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nmsg_name(arg0: int, arg1: 'ByteBuffer'):
        """public static void org.lwjgl.system.linux.Msghdr.nmsg_name(long,java.nio.ByteBuffer)"""
        __Msghdr.nmsg_name(__long.valueOf(arg0), arg1)

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.Msghdr$Buffer org.lwjgl.system.linux.Msghdr.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__Msghdr.calloc(__int.valueOf(arg0), arg1))

    @overload
    def msg_control(self, arg0: 'ByteBuffer') -> 'Msghdr':
        """public org.lwjgl.system.linux.Msghdr org.lwjgl.system.linux.Msghdr.msg_control(java.nio.ByteBuffer)"""
        return 'Msghdr'.__wrap(super(__Msghdr, self).msg_control(arg0))

    @staticmethod
    @overload
    def nmsg_namelen(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.Msghdr.nmsg_namelen(long)"""
        return int.__wrap(__Msghdr.nmsg_namelen(__long.valueOf(arg0)))

    @overload
    def msg_controllen(self) -> int:
        """public long org.lwjgl.system.linux.Msghdr.msg_controllen()"""
        return int.__wrap(super(Msghdr, self).msg_controllen())

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.Msghdr$Buffer org.lwjgl.system.linux.Msghdr.create(long,int)"""
        return Buffer.__wrap(__Msghdr.create(__long.valueOf(arg0), __int.valueOf(arg1)))

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'Msghdr':
        """public static org.lwjgl.system.linux.Msghdr org.lwjgl.system.linux.Msghdr.createSafe(long)"""
        return Msghdr.__wrap(__Msghdr.createSafe(__long.valueOf(arg0)))

    @overload
    def msg_iovlen(self) -> int:
        """public long org.lwjgl.system.linux.Msghdr.msg_iovlen()"""
        return int.__wrap(super(Msghdr, self).msg_iovlen())

    @overload
    def msg_iov(self, arg0: 'Buffer') -> 'Msghdr':
        """public org.lwjgl.system.linux.Msghdr org.lwjgl.system.linux.Msghdr.msg_iov(org.lwjgl.system.linux.IOVec$Buffer)"""
        return 'Msghdr'.__wrap(super(__Msghdr, self).msg_iov(arg0))

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.Msghdr$Buffer org.lwjgl.system.linux.Msghdr.calloc(int)"""
        return Buffer.__wrap(__Msghdr.calloc(__int.valueOf(arg0)))

    @overload
    def msg_control(self) -> 'ByteBuffer':
        """public java.nio.ByteBuffer org.lwjgl.system.linux.Msghdr.msg_control()"""
        return 'ByteBuffer'.__wrap(super(Msghdr, self).msg_control())

    @staticmethod
    @overload
    def nmsg_iovlen(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.Msghdr.nmsg_iovlen(long)"""
        return int.__wrap(__Msghdr.nmsg_iovlen(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nmsg_flags(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.Msghdr.nmsg_flags(long)"""
        return int.__wrap(__Msghdr.nmsg_flags(__long.valueOf(arg0)))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'Msghdr':
        """public static org.lwjgl.system.linux.Msghdr org.lwjgl.system.linux.Msghdr.malloc(org.lwjgl.system.MemoryStack)"""
        return Msghdr.__wrap(__Msghdr.malloc(arg0))

    @overload
    def msg_flags(self, arg0: int) -> 'Msghdr':
        """public org.lwjgl.system.linux.Msghdr org.lwjgl.system.linux.Msghdr.msg_flags(int)"""
        return 'Msghdr'.__wrap(super(__Msghdr, self).msg_flags(__int.valueOf(arg0)))

    @overload
    def msg_name(self) -> 'ByteBuffer':
        """public java.nio.ByteBuffer org.lwjgl.system.linux.Msghdr.msg_name()"""
        return 'ByteBuffer'.__wrap(super(Msghdr, self).msg_name())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.Msghdr.validate(long)"""
        __Msghdr.validate(__long.valueOf(arg0))

    @staticmethod
    @overload
    def nmsg_iov(arg0: int, arg1: 'Buffer'):
        """public static void org.lwjgl.system.linux.Msghdr.nmsg_iov(long,org.lwjgl.system.linux.IOVec$Buffer)"""
        __Msghdr.nmsg_iov(__long.valueOf(arg0), arg1)

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.Msghdr$Buffer org.lwjgl.system.linux.Msghdr.malloc(int)"""
        return Buffer.__wrap(__Msghdr.malloc(__int.valueOf(arg0)))

    @overload
    def msg_name(self, arg0: 'ByteBuffer') -> 'Msghdr':
        """public org.lwjgl.system.linux.Msghdr org.lwjgl.system.linux.Msghdr.msg_name(java.nio.ByteBuffer)"""
        return 'Msghdr'.__wrap(super(__Msghdr, self).msg_name(arg0))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.Msghdr$Buffer org.lwjgl.system.linux.Msghdr.createSafe(long,int)"""
        return Buffer.__wrap(__Msghdr.createSafe(__long.valueOf(arg0), __int.valueOf(arg1)))

    @staticmethod
    @overload
    def nmsg_control(arg0: int, arg1: 'ByteBuffer'):
        """public static void org.lwjgl.system.linux.Msghdr.nmsg_control(long,java.nio.ByteBuffer)"""
        __Msghdr.nmsg_control(__long.valueOf(arg0), arg1)

    @staticmethod
    @overload
    def calloc() -> 'Msghdr':
        """public static org.lwjgl.system.linux.Msghdr org.lwjgl.system.linux.Msghdr.calloc()"""
        return Msghdr.__wrap(__Msghdr.calloc())

    @staticmethod
    @overload
    def nmsg_name(arg0: int) -> 'ByteBuffer':
        """public static java.nio.ByteBuffer org.lwjgl.system.linux.Msghdr.nmsg_name(long)"""
        return ByteBuffer.__wrap(__Msghdr.nmsg_name(__long.valueOf(arg0)))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).address())

    @staticmethod
    @overload
    def nmsg_iov(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.IOVec$Buffer org.lwjgl.system.linux.Msghdr.nmsg_iov(long)"""
        return Buffer.__wrap(__Msghdr.nmsg_iov(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc() -> 'Msghdr':
        """public static org.lwjgl.system.linux.Msghdr org.lwjgl.system.linux.Msghdr.malloc()"""
        return Msghdr.__wrap(__Msghdr.malloc())

    @overload
    def set(self, arg0: 'ByteBuffer', arg1: 'Buffer', arg2: 'ByteBuffer', arg3: int) -> 'Msghdr':
        """public org.lwjgl.system.linux.Msghdr org.lwjgl.system.linux.Msghdr.set(java.nio.ByteBuffer,org.lwjgl.system.linux.IOVec$Buffer,java.nio.ByteBuffer,int)"""
        return 'Msghdr'.__wrap(super(__Msghdr, self).set(arg0, arg1, arg2, __int.valueOf(arg3)))

    @overload
    def msg_namelen(self) -> int:
        """public int org.lwjgl.system.linux.Msghdr.msg_namelen()"""
        return int.__wrap(super(Msghdr, self).msg_namelen())

    @staticmethod
    @overload
    def create() -> 'Msghdr':
        """public static org.lwjgl.system.linux.Msghdr org.lwjgl.system.linux.Msghdr.create()"""
        return Msghdr.__wrap(__Msghdr.create())

    @staticmethod
    @overload
    def nmsg_namelen(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Msghdr.nmsg_namelen(long,int)"""
        __Msghdr.nmsg_namelen(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def msg_flags(self) -> int:
        """public int org.lwjgl.system.linux.Msghdr.msg_flags()"""
        return int.__wrap(super(Msghdr, self).msg_flags())

    @staticmethod
    @overload
    def nmsg_controllen(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Msghdr.nmsg_controllen(long,long)"""
        __Msghdr.nmsg_controllen(__long.valueOf(arg0), __long.valueOf(arg1))

    @overload
    def msg_iov(self) -> 'Buffer':
        """public org.lwjgl.system.linux.IOVec$Buffer org.lwjgl.system.linux.Msghdr.msg_iov()"""
        return 'Buffer'.__wrap(super(Msghdr, self).msg_iov())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str.__wrap(super(pyglsystem.Pointer$Default, self).toString())

    @staticmethod
    @overload
    def nmsg_flags(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Msghdr.nmsg_flags(long,int)"""
        __Msghdr.nmsg_flags(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @staticmethod
    @overload
    def nmsg_iovlen(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Msghdr.nmsg_iovlen(long,long)"""
        __Msghdr.nmsg_iovlen(__long.valueOf(arg0), __long.valueOf(arg1))

    @overload
    def set(self, arg0: 'Msghdr') -> 'Msghdr':
        """public org.lwjgl.system.linux.Msghdr org.lwjgl.system.linux.Msghdr.set(org.lwjgl.system.linux.Msghdr)"""
        return 'Msghdr'.__wrap(super(__Msghdr, self).set(arg0))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'Msghdr':
        """public static org.lwjgl.system.linux.Msghdr org.lwjgl.system.linux.Msghdr.calloc(org.lwjgl.system.MemoryStack)"""
        return Msghdr.__wrap(__Msghdr.calloc(arg0))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @staticmethod
    @overload
    def create(arg0: int) -> 'Msghdr':
        """public static org.lwjgl.system.linux.Msghdr org.lwjgl.system.linux.Msghdr.create(long)"""
        return Msghdr.__wrap(__Msghdr.create(__long.valueOf(arg0)))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.Msghdr(java.nio.ByteBuffer)"""
        val = __Msghdr(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.Msghdr$Buffer org.lwjgl.system.linux.Msghdr.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__Msghdr.malloc(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        __Struct.validate(__long.valueOf(arg0), __int.valueOf(arg1), __int.valueOf(arg2), arg3)

    @staticmethod
    @overload
    def nmsg_control(arg0: int) -> 'ByteBuffer':
        """public static java.nio.ByteBuffer org.lwjgl.system.linux.Msghdr.nmsg_control(long)"""
        return ByteBuffer.__wrap(__Msghdr.nmsg_control(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nmsg_controllen(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.Msghdr.nmsg_controllen(long)"""
        return int.__wrap(__Msghdr.nmsg_controllen(__long.valueOf(arg0))) 
 
 
# CLASS: org.lwjgl.system.linux.XVisualInfo$Buffer
from pyquantum_helper import import_once as __import_once__
import org.lwjgl.system.linux.Visual as __Visual
__Visual = __Visual
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import java.util.stream.Stream as __Stream
__Stream = __Stream
import org.lwjgl.system.StructBuffer as __StructBuffer
__StructBuffer = __StructBuffer
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.CustomBuffer as __CustomBuffer
__CustomBuffer = __CustomBuffer
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.util.Iterator as __Iterator
__Iterator = __Iterator
import java.lang.Object as __object
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.util.Iterator as Iterator
import java.util.Spliterator as __Spliterator
__Spliterator = __Spliterator
import java.lang.Long as __long
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import org.lwjgl.system.linux.XVisualInfo as __XVisualInfo_Buffer
__Buffer = __XVisualInfo_Buffer.Buffer
import java.lang.Object as __Object
__Object = __Object
import java.util.stream.Stream as Stream
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import int
 
class Buffer(pyglsystem.__StructBuffer, pyglsystem.StructBuffer, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XVisualInfo.Buffer"""
 
    @staticmethod
    def __wrap(java_value: __Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(__pyglsystem.StructBuffer, self).forEach(arg0)

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XVisualInfo$Buffer(java.nio.ByteBuffer)"""
        val = __Buffer(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def class$(self) -> int:
        """public int org.lwjgl.system.linux.XVisualInfo$Buffer.class$()"""
        return int.__wrap(super(Buffer, self).class$())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def blue_mask(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XVisualInfo$Buffer org.lwjgl.system.linux.XVisualInfo$Buffer.blue_mask(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).blue_mask(__long.valueOf(arg0)))

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XVisualInfo$Buffer(long,int)"""
        val = __Buffer(__long.valueOf(arg0), __int.valueOf(arg1))
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0), arg1))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address0())

    @overload
    def class$(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XVisualInfo$Buffer org.lwjgl.system.linux.XVisualInfo$Buffer.class$(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).class$(__int.valueOf(arg0)))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int.__wrap(super(__pyglsystem.CustomBuffer, self).address(__int.valueOf(arg0)))

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(__int.valueOf(arg0), arg1))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int.__wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(arg0))

    @overload
    def green_mask(self) -> int:
        """public long org.lwjgl.system.linux.XVisualInfo$Buffer.green_mask()"""
        return int.__wrap(super(Buffer, self).green_mask())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def blue_mask(self) -> int:
        """public long org.lwjgl.system.linux.XVisualInfo$Buffer.blue_mask()"""
        return int.__wrap(super(Buffer, self).blue_mask())

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool.__wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @overload
    def colormap_size(self) -> int:
        """public int org.lwjgl.system.linux.XVisualInfo$Buffer.colormap_size()"""
        return int.__wrap(super(Buffer, self).colormap_size())

    @overload
    def visualid(self) -> int:
        """public long org.lwjgl.system.linux.XVisualInfo$Buffer.visualid()"""
        return int.__wrap(super(Buffer, self).visualid())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def visual(self) -> 'Visual':
        """public org.lwjgl.system.linux.Visual org.lwjgl.system.linux.XVisualInfo$Buffer.visual()"""
        return 'Visual'.__wrap(super(Buffer, self).visual())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).position(__int.valueOf(arg0)))

    @overload
    def bits_per_rgb(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XVisualInfo$Buffer org.lwjgl.system.linux.XVisualInfo$Buffer.bits_per_rgb(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).bits_per_rgb(__int.valueOf(arg0)))

    @overload
    def visualid(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XVisualInfo$Buffer org.lwjgl.system.linux.XVisualInfo$Buffer.visualid(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).visualid(__long.valueOf(arg0)))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0)))

    @overload
    def bits_per_rgb(self) -> int:
        """public int org.lwjgl.system.linux.XVisualInfo$Buffer.bits_per_rgb()"""
        return int.__wrap(super(Buffer, self).bits_per_rgb())

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).clear())

    @overload
    def screen(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XVisualInfo$Buffer org.lwjgl.system.linux.XVisualInfo$Buffer.screen(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).screen(__int.valueOf(arg0)))

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(__int.valueOf(arg0), arg1))

    @overload
    def visual(self, arg0: 'Visual') -> 'Buffer':
        """public org.lwjgl.system.linux.XVisualInfo$Buffer org.lwjgl.system.linux.XVisualInfo$Buffer.visual(org.lwjgl.system.linux.Visual)"""
        return 'Buffer'.__wrap(super(__Buffer, self).visual(arg0))

    @overload
    def colormap_size(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XVisualInfo$Buffer org.lwjgl.system.linux.XVisualInfo$Buffer.colormap_size(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).colormap_size(__int.valueOf(arg0)))

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @overload
    def red_mask(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XVisualInfo$Buffer org.lwjgl.system.linux.XVisualInfo$Buffer.red_mask(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).red_mask(__long.valueOf(arg0)))

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).slice())

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def depth(self) -> int:
        """public int org.lwjgl.system.linux.XVisualInfo$Buffer.depth()"""
        return int.__wrap(super(Buffer, self).depth())

    @overload
    def depth(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XVisualInfo$Buffer org.lwjgl.system.linux.XVisualInfo$Buffer.depth(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).depth(__int.valueOf(arg0)))

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'.__wrap(super(pyglsystem.StructBuffer, self).get())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).limit(__int.valueOf(arg0)))

    @overload
    def red_mask(self) -> int:
        """public long org.lwjgl.system.linux.XVisualInfo$Buffer.red_mask()"""
        return int.__wrap(super(Buffer, self).red_mask())

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'.__wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str.__wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @overload
    def screen(self) -> int:
        """public int org.lwjgl.system.linux.XVisualInfo$Buffer.screen()"""
        return int.__wrap(super(Buffer, self).screen())

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(arg0))

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).stream())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'.__wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def green_mask(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XVisualInfo$Buffer org.lwjgl.system.linux.XVisualInfo$Buffer.green_mask(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).green_mask(__long.valueOf(arg0)))

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).slice(__int.valueOf(arg0), __int.valueOf(arg1))) 
 
 
# CLASS: org.lwjgl.system.linux.XGenericEventCookie
from pyquantum_helper import import_once as __import_once__
import org.lwjgl.system.linux.XGenericEventCookie as __XGenericEventCookie_Buffer
__Buffer = __XGenericEventCookie_Buffer.Buffer
from builtins import str
import java.lang.Boolean as __boolean
from pyquantum_helper import override
import java.lang.Object as __object
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import java.nio.ByteBuffer as __ByteBuffer
__ByteBuffer = __ByteBuffer
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import org.lwjgl.system.linux.XGenericEventCookie as __XGenericEventCookie
__XGenericEventCookie = __XGenericEventCookie
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
from builtins import int
 
class XGenericEventCookie(pyglsystem.__Struct, pyglsystem.Struct, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XGenericEventCookie"""
 
    @staticmethod
    def __wrap(java_value: __XGenericEventCookie) -> 'XGenericEventCookie':
        return XGenericEventCookie(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __XGenericEventCookie):
        """
        Dynamic initializer for XGenericEventCookie.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XGenericEventCookie$Buffer org.lwjgl.system.linux.XGenericEventCookie.callocStack(int)"""
        return Buffer.__wrap(__XGenericEventCookie.callocStack(__int.valueOf(arg0)))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XGenericEventCookie.send_event()"""
        return bool.__wrap(super(XGenericEventCookie, self).send_event())

    @staticmethod
    @overload
    def calloc() -> 'XGenericEventCookie':
        """public static org.lwjgl.system.linux.XGenericEventCookie org.lwjgl.system.linux.XGenericEventCookie.calloc()"""
        return XGenericEventCookie.__wrap(__XGenericEventCookie.calloc())

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XGenericEventCookie':
        """public static org.lwjgl.system.linux.XGenericEventCookie org.lwjgl.system.linux.XGenericEventCookie.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XGenericEventCookie.__wrap(__XGenericEventCookie.mallocStack(arg0))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XGenericEventCookie':
        """public static org.lwjgl.system.linux.XGenericEventCookie org.lwjgl.system.linux.XGenericEventCookie.calloc(org.lwjgl.system.MemoryStack)"""
        return XGenericEventCookie.__wrap(__XGenericEventCookie.calloc(arg0))

    @overload
    def cookie(self) -> int:
        """public int org.lwjgl.system.linux.XGenericEventCookie.cookie()"""
        return int.__wrap(super(XGenericEventCookie, self).cookie())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XGenericEventCookie$Buffer org.lwjgl.system.linux.XGenericEventCookie.createSafe(long,int)"""
        return Buffer.__wrap(__XGenericEventCookie.createSafe(__long.valueOf(arg0), __int.valueOf(arg1)))

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XGenericEventCookie$Buffer org.lwjgl.system.linux.XGenericEventCookie.calloc(int)"""
        return Buffer.__wrap(__XGenericEventCookie.calloc(__int.valueOf(arg0)))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XGenericEventCookie.serial()"""
        return int.__wrap(super(XGenericEventCookie, self).serial())

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool.__wrap(super(__pyglsystem.Struct, self).isNull(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XGenericEventCookie$Buffer org.lwjgl.system.linux.XGenericEventCookie.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XGenericEventCookie.callocStack(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XGenericEventCookie.nserial(long)"""
        return int.__wrap(__XGenericEventCookie.nserial(__long.valueOf(arg0)))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XGenericEventCookie.display()"""
        return int.__wrap(super(XGenericEventCookie, self).display())

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XGenericEventCookie.ndisplay(long)"""
        return int.__wrap(__XGenericEventCookie.ndisplay(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGenericEventCookie.ntype(long,int)"""
        __XGenericEventCookie.ntype(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def ndata(arg0: int, arg1: int) -> 'ByteBuffer':
        """public static java.nio.ByteBuffer org.lwjgl.system.linux.XGenericEventCookie.ndata(long,int)"""
        return ByteBuffer.__wrap(__XGenericEventCookie.ndata(__long.valueOf(arg0), __int.valueOf(arg1)))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XGenericEventCookie$Buffer org.lwjgl.system.linux.XGenericEventCookie.create(long,int)"""
        return Buffer.__wrap(__XGenericEventCookie.create(__long.valueOf(arg0), __int.valueOf(arg1)))

    @overload
    def send_event(self, arg0: bool) -> 'XGenericEventCookie':
        """public org.lwjgl.system.linux.XGenericEventCookie org.lwjgl.system.linux.XGenericEventCookie.send_event(boolean)"""
        return 'XGenericEventCookie'.__wrap(super(__XGenericEventCookie, self).send_event(__boolean.valueOf(arg0)))

    @overload
    def data(self, arg0: int) -> 'ByteBuffer':
        """public java.nio.ByteBuffer org.lwjgl.system.linux.XGenericEventCookie.data(int)"""
        return 'ByteBuffer'.__wrap(super(__XGenericEventCookie, self).data(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XGenericEventCookie.nsend_event(long)"""
        return int.__wrap(__XGenericEventCookie.nsend_event(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def ndata(arg0: int, arg1: 'ByteBuffer'):
        """public static void org.lwjgl.system.linux.XGenericEventCookie.ndata(long,java.nio.ByteBuffer)"""
        __XGenericEventCookie.ndata(__long.valueOf(arg0), arg1)

    @staticmethod
    @overload
    def malloc() -> 'XGenericEventCookie':
        """public static org.lwjgl.system.linux.XGenericEventCookie org.lwjgl.system.linux.XGenericEventCookie.malloc()"""
        return XGenericEventCookie.__wrap(__XGenericEventCookie.malloc())

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XGenericEventCookie':
        """public static org.lwjgl.system.linux.XGenericEventCookie org.lwjgl.system.linux.XGenericEventCookie.callocStack(org.lwjgl.system.MemoryStack)"""
        return XGenericEventCookie.__wrap(__XGenericEventCookie.callocStack(arg0))

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XGenericEventCookie.ntype(long)"""
        return int.__wrap(__XGenericEventCookie.ntype(__long.valueOf(arg0)))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XGenericEventCookie(java.nio.ByteBuffer)"""
        val = __XGenericEventCookie(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def serial(self, arg0: int) -> 'XGenericEventCookie':
        """public org.lwjgl.system.linux.XGenericEventCookie org.lwjgl.system.linux.XGenericEventCookie.serial(long)"""
        return 'XGenericEventCookie'.__wrap(super(__XGenericEventCookie, self).serial(__long.valueOf(arg0)))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @staticmethod
    @overload
    def create(arg0: int) -> 'XGenericEventCookie':
        """public static org.lwjgl.system.linux.XGenericEventCookie org.lwjgl.system.linux.XGenericEventCookie.create(long)"""
        return XGenericEventCookie.__wrap(__XGenericEventCookie.create(__long.valueOf(arg0)))

    @overload
    def extension(self, arg0: int) -> 'XGenericEventCookie':
        """public org.lwjgl.system.linux.XGenericEventCookie org.lwjgl.system.linux.XGenericEventCookie.extension(int)"""
        return 'XGenericEventCookie'.__wrap(super(__XGenericEventCookie, self).extension(__int.valueOf(arg0)))

    @overload
    def evtype(self) -> int:
        """public int org.lwjgl.system.linux.XGenericEventCookie.evtype()"""
        return int.__wrap(super(XGenericEventCookie, self).evtype())

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XGenericEventCookie.type()"""
        return int.__wrap(super(XGenericEventCookie, self).type())

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XGenericEventCookie$Buffer org.lwjgl.system.linux.XGenericEventCookie.malloc(int)"""
        return Buffer.__wrap(__XGenericEventCookie.malloc(__int.valueOf(arg0)))

    @overload
    def display(self, arg0: int) -> 'XGenericEventCookie':
        """public org.lwjgl.system.linux.XGenericEventCookie org.lwjgl.system.linux.XGenericEventCookie.display(long)"""
        return 'XGenericEventCookie'.__wrap(super(__XGenericEventCookie, self).display(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XGenericEventCookie.validate(long)"""
        __XGenericEventCookie.validate(__long.valueOf(arg0))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def set(self, arg0: 'XGenericEventCookie') -> 'XGenericEventCookie':
        """public org.lwjgl.system.linux.XGenericEventCookie org.lwjgl.system.linux.XGenericEventCookie.set(org.lwjgl.system.linux.XGenericEventCookie)"""
        return 'XGenericEventCookie'.__wrap(super(__XGenericEventCookie, self).set(arg0))

    @overload
    def extension(self) -> int:
        """public int org.lwjgl.system.linux.XGenericEventCookie.extension()"""
        return int.__wrap(super(XGenericEventCookie, self).extension())

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XGenericEventCookie$Buffer org.lwjgl.system.linux.XGenericEventCookie.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XGenericEventCookie.calloc(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XGenericEventCookie':
        """public static org.lwjgl.system.linux.XGenericEventCookie org.lwjgl.system.linux.XGenericEventCookie.createSafe(long)"""
        return XGenericEventCookie.__wrap(__XGenericEventCookie.createSafe(__long.valueOf(arg0)))

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int, arg5: int, arg6: int, arg7: 'ByteBuffer') -> 'XGenericEventCookie':
        """public org.lwjgl.system.linux.XGenericEventCookie org.lwjgl.system.linux.XGenericEventCookie.set(int,long,boolean,long,int,int,int,java.nio.ByteBuffer)"""
        return 'XGenericEventCookie'.__wrap(super(__XGenericEventCookie, self).set(__int.valueOf(arg0), __long.valueOf(arg1), __boolean.valueOf(arg2), __long.valueOf(arg3), __int.valueOf(arg4), __int.valueOf(arg5), __int.valueOf(arg6), arg7))

    @staticmethod
    @overload
    def ncookie(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGenericEventCookie.ncookie(long,int)"""
        __XGenericEventCookie.ncookie(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).address())

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XGenericEventCookie$Buffer org.lwjgl.system.linux.XGenericEventCookie.mallocStack(int)"""
        return Buffer.__wrap(__XGenericEventCookie.mallocStack(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XGenericEventCookie':
        """public static org.lwjgl.system.linux.XGenericEventCookie org.lwjgl.system.linux.XGenericEventCookie.malloc(org.lwjgl.system.MemoryStack)"""
        return XGenericEventCookie.__wrap(__XGenericEventCookie.malloc(arg0))

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XGenericEventCookie$Buffer org.lwjgl.system.linux.XGenericEventCookie.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XGenericEventCookie.malloc(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGenericEventCookie.nserial(long,long)"""
        __XGenericEventCookie.nserial(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XGenericEventCookie$Buffer org.lwjgl.system.linux.XGenericEventCookie.create(int)"""
        return Buffer.__wrap(__XGenericEventCookie.create(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGenericEventCookie.nsend_event(long,int)"""
        __XGenericEventCookie.nsend_event(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGenericEventCookie.ndisplay(long,long)"""
        __XGenericEventCookie.ndisplay(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def nextension(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGenericEventCookie.nextension(long,int)"""
        __XGenericEventCookie.nextension(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XGenericEventCookie.sizeof()"""
        return int.__wrap(super(XGenericEventCookie, self).sizeof())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str.__wrap(super(pyglsystem.Pointer$Default, self).toString())

    @staticmethod
    @overload
    def nevtype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGenericEventCookie.nevtype(long,int)"""
        __XGenericEventCookie.nevtype(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def type(self, arg0: int) -> 'XGenericEventCookie':
        """public org.lwjgl.system.linux.XGenericEventCookie org.lwjgl.system.linux.XGenericEventCookie.type(int)"""
        return 'XGenericEventCookie'.__wrap(super(__XGenericEventCookie, self).type(__int.valueOf(arg0)))

    @overload
    def cookie(self, arg0: int) -> 'XGenericEventCookie':
        """public org.lwjgl.system.linux.XGenericEventCookie org.lwjgl.system.linux.XGenericEventCookie.cookie(int)"""
        return 'XGenericEventCookie'.__wrap(super(__XGenericEventCookie, self).cookie(__int.valueOf(arg0)))

    @overload
    def evtype(self, arg0: int) -> 'XGenericEventCookie':
        """public org.lwjgl.system.linux.XGenericEventCookie org.lwjgl.system.linux.XGenericEventCookie.evtype(int)"""
        return 'XGenericEventCookie'.__wrap(super(__XGenericEventCookie, self).evtype(__int.valueOf(arg0)))

    @overload
    def data(self, arg0: 'ByteBuffer') -> 'XGenericEventCookie':
        """public org.lwjgl.system.linux.XGenericEventCookie org.lwjgl.system.linux.XGenericEventCookie.data(java.nio.ByteBuffer)"""
        return 'XGenericEventCookie'.__wrap(super(__XGenericEventCookie, self).data(arg0))

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XGenericEventCookie$Buffer org.lwjgl.system.linux.XGenericEventCookie.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XGenericEventCookie.mallocStack(__int.valueOf(arg0), arg1))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @staticmethod
    @overload
    def nextension(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XGenericEventCookie.nextension(long)"""
        return int.__wrap(__XGenericEventCookie.nextension(__long.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @staticmethod
    @overload
    def callocStack() -> 'XGenericEventCookie':
        """public static org.lwjgl.system.linux.XGenericEventCookie org.lwjgl.system.linux.XGenericEventCookie.callocStack()"""
        return XGenericEventCookie.__wrap(__XGenericEventCookie.callocStack())

    @staticmethod
    @overload
    def mallocStack() -> 'XGenericEventCookie':
        """public static org.lwjgl.system.linux.XGenericEventCookie org.lwjgl.system.linux.XGenericEventCookie.mallocStack()"""
        return XGenericEventCookie.__wrap(__XGenericEventCookie.mallocStack())

    @staticmethod
    @overload
    def create() -> 'XGenericEventCookie':
        """public static org.lwjgl.system.linux.XGenericEventCookie org.lwjgl.system.linux.XGenericEventCookie.create()"""
        return XGenericEventCookie.__wrap(__XGenericEventCookie.create())

    @staticmethod
    @overload
    def ncookie(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XGenericEventCookie.ncookie(long)"""
        return int.__wrap(__XGenericEventCookie.ncookie(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        __Struct.validate(__long.valueOf(arg0), __int.valueOf(arg1), __int.valueOf(arg2), arg3)

    @staticmethod
    @overload
    def nevtype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XGenericEventCookie.nevtype(long)"""
        return int.__wrap(__XGenericEventCookie.nevtype(__long.valueOf(arg0))) 
 
 
# CLASS: org.lwjgl.system.linux.XConfigureEvent
from pyquantum_helper import import_once as __import_once__
from builtins import str
import java.lang.Boolean as __boolean
from pyquantum_helper import override
import java.lang.Object as __object
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
import org.lwjgl.system.linux.XConfigureEvent as __XConfigureEvent_Buffer
__Buffer = __XConfigureEvent_Buffer.Buffer
import org.lwjgl.system.linux.XConfigureEvent as __XConfigureEvent
__XConfigureEvent = __XConfigureEvent
from builtins import int
 
class XConfigureEvent(pyglsystem.__Struct, pyglsystem.Struct, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XConfigureEvent"""
 
    @staticmethod
    def __wrap(java_value: __XConfigureEvent) -> 'XConfigureEvent':
        return XConfigureEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __XConfigureEvent):
        """
        Dynamic initializer for XConfigureEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XConfigureEvent.ntype(long,int)"""
        __XConfigureEvent.ntype(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XConfigureEvent$Buffer org.lwjgl.system.linux.XConfigureEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XConfigureEvent.malloc(__int.valueOf(arg0), arg1))

    @overload
    def set(self, arg0: 'XConfigureEvent') -> 'XConfigureEvent':
        """public org.lwjgl.system.linux.XConfigureEvent org.lwjgl.system.linux.XConfigureEvent.set(org.lwjgl.system.linux.XConfigureEvent)"""
        return 'XConfigureEvent'.__wrap(super(__XConfigureEvent, self).set(arg0))

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XConfigureEvent':
        """public static org.lwjgl.system.linux.XConfigureEvent org.lwjgl.system.linux.XConfigureEvent.createSafe(long)"""
        return XConfigureEvent.__wrap(__XConfigureEvent.createSafe(__long.valueOf(arg0)))

    @overload
    def x(self) -> int:
        """public int org.lwjgl.system.linux.XConfigureEvent.x()"""
        return int.__wrap(super(XConfigureEvent, self).x())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def nborder_width(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XConfigureEvent.nborder_width(long,int)"""
        __XConfigureEvent.nborder_width(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XConfigureEvent.send_event()"""
        return bool.__wrap(super(XConfigureEvent, self).send_event())

    @staticmethod
    @overload
    def nabove(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XConfigureEvent.nabove(long,long)"""
        __XConfigureEvent.nabove(__long.valueOf(arg0), __long.valueOf(arg1))

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool.__wrap(super(__pyglsystem.Struct, self).isNull(__int.valueOf(arg0)))

    @overload
    def display(self, arg0: int) -> 'XConfigureEvent':
        """public org.lwjgl.system.linux.XConfigureEvent org.lwjgl.system.linux.XConfigureEvent.display(long)"""
        return 'XConfigureEvent'.__wrap(super(__XConfigureEvent, self).display(__long.valueOf(arg0)))

    @overload
    def height(self) -> int:
        """public int org.lwjgl.system.linux.XConfigureEvent.height()"""
        return int.__wrap(super(XConfigureEvent, self).height())

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XConfigureEvent':
        """public static org.lwjgl.system.linux.XConfigureEvent org.lwjgl.system.linux.XConfigureEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XConfigureEvent.__wrap(__XConfigureEvent.mallocStack(arg0))

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XConfigureEvent.nserial(long)"""
        return int.__wrap(__XConfigureEvent.nserial(__long.valueOf(arg0)))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def x(self, arg0: int) -> 'XConfigureEvent':
        """public org.lwjgl.system.linux.XConfigureEvent org.lwjgl.system.linux.XConfigureEvent.x(int)"""
        return 'XConfigureEvent'.__wrap(super(__XConfigureEvent, self).x(__int.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def create() -> 'XConfigureEvent':
        """public static org.lwjgl.system.linux.XConfigureEvent org.lwjgl.system.linux.XConfigureEvent.create()"""
        return XConfigureEvent.__wrap(__XConfigureEvent.create())

    @overload
    def border_width(self, arg0: int) -> 'XConfigureEvent':
        """public org.lwjgl.system.linux.XConfigureEvent org.lwjgl.system.linux.XConfigureEvent.border_width(int)"""
        return 'XConfigureEvent'.__wrap(super(__XConfigureEvent, self).border_width(__int.valueOf(arg0)))

    @overload
    def above(self) -> int:
        """public long org.lwjgl.system.linux.XConfigureEvent.above()"""
        return int.__wrap(super(XConfigureEvent, self).above())

    @overload
    def y(self) -> int:
        """public int org.lwjgl.system.linux.XConfigureEvent.y()"""
        return int.__wrap(super(XConfigureEvent, self).y())

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XConfigureEvent.window()"""
        return int.__wrap(super(XConfigureEvent, self).window())

    @staticmethod
    @overload
    def nabove(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XConfigureEvent.nabove(long)"""
        return int.__wrap(__XConfigureEvent.nabove(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XConfigureEvent$Buffer org.lwjgl.system.linux.XConfigureEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XConfigureEvent.mallocStack(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XConfigureEvent':
        """public static org.lwjgl.system.linux.XConfigureEvent org.lwjgl.system.linux.XConfigureEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XConfigureEvent.__wrap(__XConfigureEvent.malloc(arg0))

    @overload
    def override_redirect(self, arg0: bool) -> 'XConfigureEvent':
        """public org.lwjgl.system.linux.XConfigureEvent org.lwjgl.system.linux.XConfigureEvent.override_redirect(boolean)"""
        return 'XConfigureEvent'.__wrap(super(__XConfigureEvent, self).override_redirect(__boolean.valueOf(arg0)))

    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XConfigureEvent.nsend_event(long)"""
        return int.__wrap(__XConfigureEvent.nsend_event(__long.valueOf(arg0)))

    @overload
    def y(self, arg0: int) -> 'XConfigureEvent':
        """public org.lwjgl.system.linux.XConfigureEvent org.lwjgl.system.linux.XConfigureEvent.y(int)"""
        return 'XConfigureEvent'.__wrap(super(__XConfigureEvent, self).y(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XConfigureEvent$Buffer org.lwjgl.system.linux.XConfigureEvent.malloc(int)"""
        return Buffer.__wrap(__XConfigureEvent.malloc(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XConfigureEvent.ndisplay(long,long)"""
        __XConfigureEvent.ndisplay(__long.valueOf(arg0), __long.valueOf(arg1))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @staticmethod
    @overload
    def calloc() -> 'XConfigureEvent':
        """public static org.lwjgl.system.linux.XConfigureEvent org.lwjgl.system.linux.XConfigureEvent.calloc()"""
        return XConfigureEvent.__wrap(__XConfigureEvent.calloc())

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def above(self, arg0: int) -> 'XConfigureEvent':
        """public org.lwjgl.system.linux.XConfigureEvent org.lwjgl.system.linux.XConfigureEvent.above(long)"""
        return 'XConfigureEvent'.__wrap(super(__XConfigureEvent, self).above(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XConfigureEvent$Buffer org.lwjgl.system.linux.XConfigureEvent.callocStack(int)"""
        return Buffer.__wrap(__XConfigureEvent.callocStack(__int.valueOf(arg0)))

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XConfigureEvent.display()"""
        return int.__wrap(super(XConfigureEvent, self).display())

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XConfigureEvent.ndisplay(long)"""
        return int.__wrap(__XConfigureEvent.ndisplay(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XConfigureEvent$Buffer org.lwjgl.system.linux.XConfigureEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XConfigureEvent.calloc(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def nheight(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XConfigureEvent.nheight(long)"""
        return int.__wrap(__XConfigureEvent.nheight(__long.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: int, arg10: int, arg11: bool) -> 'XConfigureEvent':
        """public org.lwjgl.system.linux.XConfigureEvent org.lwjgl.system.linux.XConfigureEvent.set(int,long,boolean,long,long,int,int,int,int,int,long,boolean)"""
        return 'XConfigureEvent'.__wrap(super(__XConfigureEvent, self).set(__int.valueOf(arg0), __long.valueOf(arg1), __boolean.valueOf(arg2), __long.valueOf(arg3), __long.valueOf(arg4), __int.valueOf(arg5), __int.valueOf(arg6), __int.valueOf(arg7), __int.valueOf(arg8), __int.valueOf(arg9), __long.valueOf(arg10), __boolean.valueOf(arg11)))

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XConfigureEvent.validate(long)"""
        __XConfigureEvent.validate(__long.valueOf(arg0))

    @overload
    def width(self, arg0: int) -> 'XConfigureEvent':
        """public org.lwjgl.system.linux.XConfigureEvent org.lwjgl.system.linux.XConfigureEvent.width(int)"""
        return 'XConfigureEvent'.__wrap(super(__XConfigureEvent, self).width(__int.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def border_width(self) -> int:
        """public int org.lwjgl.system.linux.XConfigureEvent.border_width()"""
        return int.__wrap(super(XConfigureEvent, self).border_width())

    @overload
    def serial(self, arg0: int) -> 'XConfigureEvent':
        """public org.lwjgl.system.linux.XConfigureEvent org.lwjgl.system.linux.XConfigureEvent.serial(long)"""
        return 'XConfigureEvent'.__wrap(super(__XConfigureEvent, self).serial(__long.valueOf(arg0)))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).address())

    @overload
    def width(self) -> int:
        """public int org.lwjgl.system.linux.XConfigureEvent.width()"""
        return int.__wrap(super(XConfigureEvent, self).width())

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XConfigureEvent$Buffer org.lwjgl.system.linux.XConfigureEvent.createSafe(long,int)"""
        return Buffer.__wrap(__XConfigureEvent.createSafe(__long.valueOf(arg0), __int.valueOf(arg1)))

    @staticmethod
    @overload
    def ny(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XConfigureEvent.ny(long,int)"""
        __XConfigureEvent.ny(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def noverride_redirect(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XConfigureEvent.noverride_redirect(long)"""
        return int.__wrap(__XConfigureEvent.noverride_redirect(__long.valueOf(arg0)))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XConfigureEvent(java.nio.ByteBuffer)"""
        val = __XConfigureEvent(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @staticmethod
    @overload
    def nx(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XConfigureEvent.nx(long,int)"""
        __XConfigureEvent.nx(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def nwindow(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XConfigureEvent.nwindow(long,long)"""
        __XConfigureEvent.nwindow(__long.valueOf(arg0), __long.valueOf(arg1))

    @overload
    def type(self, arg0: int) -> 'XConfigureEvent':
        """public org.lwjgl.system.linux.XConfigureEvent org.lwjgl.system.linux.XConfigureEvent.type(int)"""
        return 'XConfigureEvent'.__wrap(super(__XConfigureEvent, self).type(__int.valueOf(arg0)))

    @overload
    def window(self, arg0: int) -> 'XConfigureEvent':
        """public org.lwjgl.system.linux.XConfigureEvent org.lwjgl.system.linux.XConfigureEvent.window(long)"""
        return 'XConfigureEvent'.__wrap(super(__XConfigureEvent, self).window(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc() -> 'XConfigureEvent':
        """public static org.lwjgl.system.linux.XConfigureEvent org.lwjgl.system.linux.XConfigureEvent.malloc()"""
        return XConfigureEvent.__wrap(__XConfigureEvent.malloc())

    @staticmethod
    @overload
    def nwidth(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XConfigureEvent.nwidth(long,int)"""
        __XConfigureEvent.nwidth(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XConfigureEvent':
        """public static org.lwjgl.system.linux.XConfigureEvent org.lwjgl.system.linux.XConfigureEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XConfigureEvent.__wrap(__XConfigureEvent.callocStack(arg0))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XConfigureEvent$Buffer org.lwjgl.system.linux.XConfigureEvent.create(long,int)"""
        return Buffer.__wrap(__XConfigureEvent.create(__long.valueOf(arg0), __int.valueOf(arg1)))

    @staticmethod
    @overload
    def nx(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XConfigureEvent.nx(long)"""
        return int.__wrap(__XConfigureEvent.nx(__long.valueOf(arg0)))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XConfigureEvent.type()"""
        return int.__wrap(super(XConfigureEvent, self).type())

    @overload
    def height(self, arg0: int) -> 'XConfigureEvent':
        """public org.lwjgl.system.linux.XConfigureEvent org.lwjgl.system.linux.XConfigureEvent.height(int)"""
        return 'XConfigureEvent'.__wrap(super(__XConfigureEvent, self).height(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nborder_width(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XConfigureEvent.nborder_width(long)"""
        return int.__wrap(__XConfigureEvent.nborder_width(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'XConfigureEvent':
        """public static org.lwjgl.system.linux.XConfigureEvent org.lwjgl.system.linux.XConfigureEvent.create(long)"""
        return XConfigureEvent.__wrap(__XConfigureEvent.create(__long.valueOf(arg0)))

    @overload
    def send_event(self, arg0: bool) -> 'XConfigureEvent':
        """public org.lwjgl.system.linux.XConfigureEvent org.lwjgl.system.linux.XConfigureEvent.send_event(boolean)"""
        return 'XConfigureEvent'.__wrap(super(__XConfigureEvent, self).send_event(__boolean.valueOf(arg0)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str.__wrap(super(pyglsystem.Pointer$Default, self).toString())

    @staticmethod
    @overload
    def nwindow(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XConfigureEvent.nwindow(long)"""
        return int.__wrap(__XConfigureEvent.nwindow(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nheight(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XConfigureEvent.nheight(long,int)"""
        __XConfigureEvent.nheight(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XConfigureEvent$Buffer org.lwjgl.system.linux.XConfigureEvent.calloc(int)"""
        return Buffer.__wrap(__XConfigureEvent.calloc(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XConfigureEvent$Buffer org.lwjgl.system.linux.XConfigureEvent.create(int)"""
        return Buffer.__wrap(__XConfigureEvent.create(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XConfigureEvent.nserial(long,long)"""
        __XConfigureEvent.nserial(__long.valueOf(arg0), __long.valueOf(arg1))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XConfigureEvent':
        """public static org.lwjgl.system.linux.XConfigureEvent org.lwjgl.system.linux.XConfigureEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XConfigureEvent.__wrap(__XConfigureEvent.calloc(arg0))

    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XConfigureEvent.nsend_event(long,int)"""
        __XConfigureEvent.nsend_event(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XConfigureEvent$Buffer org.lwjgl.system.linux.XConfigureEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XConfigureEvent.callocStack(__int.valueOf(arg0), arg1))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XConfigureEvent.serial()"""
        return int.__wrap(super(XConfigureEvent, self).serial())

    @overload
    def override_redirect(self) -> bool:
        """public boolean org.lwjgl.system.linux.XConfigureEvent.override_redirect()"""
        return bool.__wrap(super(XConfigureEvent, self).override_redirect())

    @staticmethod
    @overload
    def noverride_redirect(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XConfigureEvent.noverride_redirect(long,int)"""
        __XConfigureEvent.noverride_redirect(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XConfigureEvent.sizeof()"""
        return int.__wrap(super(XConfigureEvent, self).sizeof())

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XConfigureEvent.ntype(long)"""
        return int.__wrap(__XConfigureEvent.ntype(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nwidth(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XConfigureEvent.nwidth(long)"""
        return int.__wrap(__XConfigureEvent.nwidth(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        __Struct.validate(__long.valueOf(arg0), __int.valueOf(arg1), __int.valueOf(arg2), arg3)

    @staticmethod
    @overload
    def callocStack() -> 'XConfigureEvent':
        """public static org.lwjgl.system.linux.XConfigureEvent org.lwjgl.system.linux.XConfigureEvent.callocStack()"""
        return XConfigureEvent.__wrap(__XConfigureEvent.callocStack())

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XConfigureEvent$Buffer org.lwjgl.system.linux.XConfigureEvent.mallocStack(int)"""
        return Buffer.__wrap(__XConfigureEvent.mallocStack(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack() -> 'XConfigureEvent':
        """public static org.lwjgl.system.linux.XConfigureEvent org.lwjgl.system.linux.XConfigureEvent.mallocStack()"""
        return XConfigureEvent.__wrap(__XConfigureEvent.mallocStack())

    @staticmethod
    @overload
    def ny(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XConfigureEvent.ny(long)"""
        return int.__wrap(__XConfigureEvent.ny(__long.valueOf(arg0))) 
 
 
# CLASS: org.lwjgl.system.linux.XGravityEvent$Buffer
from pyquantum_helper import import_once as __import_once__
import java.lang.Boolean as __boolean
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import java.util.stream.Stream as __Stream
__Stream = __Stream
import org.lwjgl.system.StructBuffer as __StructBuffer
__StructBuffer = __StructBuffer
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.CustomBuffer as __CustomBuffer
__CustomBuffer = __CustomBuffer
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.util.Iterator as __Iterator
__Iterator = __Iterator
import java.lang.Object as __object
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.util.Iterator as Iterator
import java.util.Spliterator as __Spliterator
__Spliterator = __Spliterator
import java.lang.Long as __long
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import java.util.stream.Stream as Stream
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
import org.lwjgl.system.linux.XGravityEvent as __XGravityEvent_Buffer
__Buffer = __XGravityEvent_Buffer.Buffer
from builtins import int
 
class Buffer(pyglsystem.__StructBuffer, pyglsystem.StructBuffer, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XGravityEvent.Buffer"""
 
    @staticmethod
    def __wrap(java_value: __Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def x(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XGravityEvent$Buffer org.lwjgl.system.linux.XGravityEvent$Buffer.x(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).x(__int.valueOf(arg0)))

    @overload
    def event(self) -> int:
        """public long org.lwjgl.system.linux.XGravityEvent$Buffer.event()"""
        return int.__wrap(super(Buffer, self).event())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XGravityEvent$Buffer(java.nio.ByteBuffer)"""
        val = __Buffer(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(__pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0), arg1))

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XGravityEvent$Buffer org.lwjgl.system.linux.XGravityEvent$Buffer.display(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).display(__long.valueOf(arg0)))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address0())

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XGravityEvent$Buffer.window()"""
        return int.__wrap(super(Buffer, self).window())

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XGravityEvent$Buffer.send_event()"""
        return bool.__wrap(super(Buffer, self).send_event())

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XGravityEvent$Buffer org.lwjgl.system.linux.XGravityEvent$Buffer.send_event(boolean)"""
        return 'Buffer'.__wrap(super(__Buffer, self).send_event(__boolean.valueOf(arg0)))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int.__wrap(super(__pyglsystem.CustomBuffer, self).address(__int.valueOf(arg0)))

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def event(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XGravityEvent$Buffer org.lwjgl.system.linux.XGravityEvent$Buffer.event(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).event(__long.valueOf(arg0)))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(__int.valueOf(arg0), arg1))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int.__wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @overload
    def y(self) -> int:
        """public int org.lwjgl.system.linux.XGravityEvent$Buffer.y()"""
        return int.__wrap(super(Buffer, self).y())

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XGravityEvent$Buffer org.lwjgl.system.linux.XGravityEvent$Buffer.serial(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).serial(__long.valueOf(arg0)))

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(arg0))

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XGravityEvent$Buffer.display()"""
        return int.__wrap(super(Buffer, self).display())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool.__wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).position(__int.valueOf(arg0)))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0)))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).clear())

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(__int.valueOf(arg0), arg1))

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XGravityEvent$Buffer(long,int)"""
        val = __Buffer(__long.valueOf(arg0), __int.valueOf(arg1))
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address())

    @overload
    def x(self) -> int:
        """public int org.lwjgl.system.linux.XGravityEvent$Buffer.x()"""
        return int.__wrap(super(Buffer, self).x())

    @overload
    def window(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XGravityEvent$Buffer org.lwjgl.system.linux.XGravityEvent$Buffer.window(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).window(__long.valueOf(arg0)))

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).slice())

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).compact())

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'.__wrap(super(pyglsystem.StructBuffer, self).get())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).limit(__int.valueOf(arg0)))

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XGravityEvent$Buffer org.lwjgl.system.linux.XGravityEvent$Buffer.type(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).type(__int.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'.__wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str.__wrap(super(pyglsystem.CustomBuffer, self).toString())

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XGravityEvent$Buffer.type()"""
        return int.__wrap(super(Buffer, self).type())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @overload
    def y(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XGravityEvent$Buffer org.lwjgl.system.linux.XGravityEvent$Buffer.y(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).y(__int.valueOf(arg0)))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(arg0))

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).stream())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'.__wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XGravityEvent$Buffer.serial()"""
        return int.__wrap(super(Buffer, self).serial())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).slice(__int.valueOf(arg0), __int.valueOf(arg1))) 
 
 
# CLASS: org.lwjgl.system.linux.XMappingEvent$Buffer
from pyquantum_helper import import_once as __import_once__
import java.lang.Boolean as __boolean
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import java.util.stream.Stream as __Stream
__Stream = __Stream
import org.lwjgl.system.StructBuffer as __StructBuffer
__StructBuffer = __StructBuffer
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.CustomBuffer as __CustomBuffer
__CustomBuffer = __CustomBuffer
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.util.Iterator as __Iterator
__Iterator = __Iterator
import java.lang.Object as __object
import org.lwjgl.system.linux.XMappingEvent as __XMappingEvent_Buffer
__Buffer = __XMappingEvent_Buffer.Buffer
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.util.Iterator as Iterator
import java.util.Spliterator as __Spliterator
__Spliterator = __Spliterator
import java.lang.Long as __long
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import java.util.stream.Stream as Stream
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import int
 
class Buffer(pyglsystem.__StructBuffer, pyglsystem.StructBuffer, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XMappingEvent.Buffer"""
 
    @staticmethod
    def __wrap(java_value: __Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(__pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0), arg1))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int.__wrap(super(__pyglsystem.CustomBuffer, self).address(__int.valueOf(arg0)))

    @overload
    def first_keycode(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XMappingEvent$Buffer org.lwjgl.system.linux.XMappingEvent$Buffer.first_keycode(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).first_keycode(__int.valueOf(arg0)))

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XMappingEvent$Buffer org.lwjgl.system.linux.XMappingEvent$Buffer.send_event(boolean)"""
        return 'Buffer'.__wrap(super(__Buffer, self).send_event(__boolean.valueOf(arg0)))

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(__int.valueOf(arg0), arg1))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int.__wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(arg0))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XMappingEvent$Buffer.serial()"""
        return int.__wrap(super(Buffer, self).serial())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool.__wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @overload
    def count(self) -> int:
        """public int org.lwjgl.system.linux.XMappingEvent$Buffer.count()"""
        return int.__wrap(super(Buffer, self).count())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XMappingEvent$Buffer org.lwjgl.system.linux.XMappingEvent$Buffer.serial(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).serial(__long.valueOf(arg0)))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XMappingEvent$Buffer(java.nio.ByteBuffer)"""
        val = __Buffer(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).position(__int.valueOf(arg0)))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0)))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).clear())

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(__int.valueOf(arg0), arg1))

    @overload
    def first_keycode(self) -> int:
        """public int org.lwjgl.system.linux.XMappingEvent$Buffer.first_keycode()"""
        return int.__wrap(super(Buffer, self).first_keycode())

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XMappingEvent$Buffer.window()"""
        return int.__wrap(super(Buffer, self).window())

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address())

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XMappingEvent$Buffer.type()"""
        return int.__wrap(super(Buffer, self).type())

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XMappingEvent$Buffer.display()"""
        return int.__wrap(super(Buffer, self).display())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).slice())

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XMappingEvent$Buffer org.lwjgl.system.linux.XMappingEvent$Buffer.display(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).display(__long.valueOf(arg0)))

    @overload
    def request(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XMappingEvent$Buffer org.lwjgl.system.linux.XMappingEvent$Buffer.request(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).request(__int.valueOf(arg0)))

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'.__wrap(super(pyglsystem.StructBuffer, self).get())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).limit(__int.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).reset())

    @overload
    def request(self) -> int:
        """public int org.lwjgl.system.linux.XMappingEvent$Buffer.request()"""
        return int.__wrap(super(Buffer, self).request())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'.__wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str.__wrap(super(pyglsystem.CustomBuffer, self).toString())

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XMappingEvent$Buffer(long,int)"""
        val = __Buffer(__long.valueOf(arg0), __int.valueOf(arg1))
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def count(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XMappingEvent$Buffer org.lwjgl.system.linux.XMappingEvent$Buffer.count(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).count(__int.valueOf(arg0)))

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(arg0))

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).stream())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @overload
    def window(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XMappingEvent$Buffer org.lwjgl.system.linux.XMappingEvent$Buffer.window(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).window(__long.valueOf(arg0)))

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'.__wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XMappingEvent$Buffer org.lwjgl.system.linux.XMappingEvent$Buffer.type(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).type(__int.valueOf(arg0)))

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XMappingEvent$Buffer.send_event()"""
        return bool.__wrap(super(Buffer, self).send_event())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).slice(__int.valueOf(arg0), __int.valueOf(arg1))) 
 
 
# CLASS: org.lwjgl.system.linux.XExposeEvent$Buffer
from pyquantum_helper import import_once as __import_once__
import java.lang.Boolean as __boolean
import org.lwjgl.system.linux.XExposeEvent as __XExposeEvent_Buffer
__Buffer = __XExposeEvent_Buffer.Buffer
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import java.util.stream.Stream as __Stream
__Stream = __Stream
import org.lwjgl.system.StructBuffer as __StructBuffer
__StructBuffer = __StructBuffer
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.CustomBuffer as __CustomBuffer
__CustomBuffer = __CustomBuffer
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.util.Iterator as __Iterator
__Iterator = __Iterator
import java.lang.Object as __object
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.util.Iterator as Iterator
import java.util.Spliterator as __Spliterator
__Spliterator = __Spliterator
import java.lang.Long as __long
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import java.util.stream.Stream as Stream
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import int
 
class Buffer(pyglsystem.__StructBuffer, pyglsystem.StructBuffer, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XExposeEvent.Buffer"""
 
    @staticmethod
    def __wrap(java_value: __Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(__pyglsystem.StructBuffer, self).forEach(arg0)

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XExposeEvent$Buffer.type()"""
        return int.__wrap(super(Buffer, self).type())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0), arg1))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address0())

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XExposeEvent$Buffer.send_event()"""
        return bool.__wrap(super(Buffer, self).send_event())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def y(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XExposeEvent$Buffer org.lwjgl.system.linux.XExposeEvent$Buffer.y(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).y(__int.valueOf(arg0)))

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int.__wrap(super(__pyglsystem.CustomBuffer, self).address(__int.valueOf(arg0)))

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(__int.valueOf(arg0), arg1))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int.__wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XExposeEvent$Buffer.window()"""
        return int.__wrap(super(Buffer, self).window())

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XExposeEvent$Buffer org.lwjgl.system.linux.XExposeEvent$Buffer.send_event(boolean)"""
        return 'Buffer'.__wrap(super(__Buffer, self).send_event(__boolean.valueOf(arg0)))

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(arg0))

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XExposeEvent$Buffer org.lwjgl.system.linux.XExposeEvent$Buffer.serial(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).serial(__long.valueOf(arg0)))

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XExposeEvent$Buffer org.lwjgl.system.linux.XExposeEvent$Buffer.type(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).type(__int.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool.__wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @overload
    def count(self) -> int:
        """public int org.lwjgl.system.linux.XExposeEvent$Buffer.count()"""
        return int.__wrap(super(Buffer, self).count())

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XExposeEvent$Buffer org.lwjgl.system.linux.XExposeEvent$Buffer.display(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).display(__long.valueOf(arg0)))

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XExposeEvent$Buffer(long,int)"""
        val = __Buffer(__long.valueOf(arg0), __int.valueOf(arg1))
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def y(self) -> int:
        """public int org.lwjgl.system.linux.XExposeEvent$Buffer.y()"""
        return int.__wrap(super(Buffer, self).y())

    @overload
    def width(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XExposeEvent$Buffer org.lwjgl.system.linux.XExposeEvent$Buffer.width(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).width(__int.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).position(__int.valueOf(arg0)))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0)))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).clear())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XExposeEvent$Buffer(java.nio.ByteBuffer)"""
        val = __Buffer(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def width(self) -> int:
        """public int org.lwjgl.system.linux.XExposeEvent$Buffer.width()"""
        return int.__wrap(super(Buffer, self).width())

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(__int.valueOf(arg0), arg1))

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @overload
    def height(self) -> int:
        """public int org.lwjgl.system.linux.XExposeEvent$Buffer.height()"""
        return int.__wrap(super(Buffer, self).height())

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).slice())

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def height(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XExposeEvent$Buffer org.lwjgl.system.linux.XExposeEvent$Buffer.height(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).height(__int.valueOf(arg0)))

    @overload
    def x(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XExposeEvent$Buffer org.lwjgl.system.linux.XExposeEvent$Buffer.x(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).x(__int.valueOf(arg0)))

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'.__wrap(super(pyglsystem.StructBuffer, self).get())

    @overload
    def window(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XExposeEvent$Buffer org.lwjgl.system.linux.XExposeEvent$Buffer.window(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).window(__long.valueOf(arg0)))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XExposeEvent$Buffer.serial()"""
        return int.__wrap(super(Buffer, self).serial())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).limit(__int.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).reset())

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XExposeEvent$Buffer.display()"""
        return int.__wrap(super(Buffer, self).display())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'.__wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str.__wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def x(self) -> int:
        """public int org.lwjgl.system.linux.XExposeEvent$Buffer.x()"""
        return int.__wrap(super(Buffer, self).x())

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(arg0))

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).stream())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'.__wrap(super(pyglsystem.StructBuffer, self).iterator())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def count(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XExposeEvent$Buffer org.lwjgl.system.linux.XExposeEvent$Buffer.count(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).count(__int.valueOf(arg0)))

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).slice(__int.valueOf(arg0), __int.valueOf(arg1))) 
 
 
# CLASS: org.lwjgl.system.linux.XSelectionEvent
from pyquantum_helper import import_once as __import_once__
from builtins import str
import java.lang.Boolean as __boolean
from pyquantum_helper import override
import java.lang.Object as __object
import org.lwjgl.system.linux.XSelectionEvent as __XSelectionEvent
__XSelectionEvent = __XSelectionEvent
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import org.lwjgl.system.linux.XSelectionEvent as __XSelectionEvent_Buffer
__Buffer = __XSelectionEvent_Buffer.Buffer
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
from builtins import int
 
class XSelectionEvent(pyglsystem.__Struct, pyglsystem.Struct, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XSelectionEvent"""
 
    @staticmethod
    def __wrap(java_value: __XSelectionEvent) -> 'XSelectionEvent':
        return XSelectionEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __XSelectionEvent):
        """
        Dynamic initializer for XSelectionEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionEvent$Buffer org.lwjgl.system.linux.XSelectionEvent.create(int)"""
        return Buffer.__wrap(__XSelectionEvent.create(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XSelectionEvent':
        """public static org.lwjgl.system.linux.XSelectionEvent org.lwjgl.system.linux.XSelectionEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XSelectionEvent.__wrap(__XSelectionEvent.malloc(arg0))

    @staticmethod
    @overload
    def mallocStack() -> 'XSelectionEvent':
        """public static org.lwjgl.system.linux.XSelectionEvent org.lwjgl.system.linux.XSelectionEvent.mallocStack()"""
        return XSelectionEvent.__wrap(__XSelectionEvent.mallocStack())

    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSelectionEvent.nsend_event(long,int)"""
        __XSelectionEvent.nsend_event(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int) -> 'XSelectionEvent':
        """public org.lwjgl.system.linux.XSelectionEvent org.lwjgl.system.linux.XSelectionEvent.set(int,long,boolean,long,long,long,long,long,long)"""
        return 'XSelectionEvent'.__wrap(super(__XSelectionEvent, self).set(__int.valueOf(arg0), __long.valueOf(arg1), __boolean.valueOf(arg2), __long.valueOf(arg3), __long.valueOf(arg4), __long.valueOf(arg5), __long.valueOf(arg6), __long.valueOf(arg7), __long.valueOf(arg8)))

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionEvent$Buffer org.lwjgl.system.linux.XSelectionEvent.calloc(int)"""
        return Buffer.__wrap(__XSelectionEvent.calloc(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionEvent$Buffer org.lwjgl.system.linux.XSelectionEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XSelectionEvent.mallocStack(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def malloc() -> 'XSelectionEvent':
        """public static org.lwjgl.system.linux.XSelectionEvent org.lwjgl.system.linux.XSelectionEvent.malloc()"""
        return XSelectionEvent.__wrap(__XSelectionEvent.malloc())

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSelectionEvent.nserial(long,long)"""
        __XSelectionEvent.nserial(__long.valueOf(arg0), __long.valueOf(arg1))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def calloc() -> 'XSelectionEvent':
        """public static org.lwjgl.system.linux.XSelectionEvent org.lwjgl.system.linux.XSelectionEvent.calloc()"""
        return XSelectionEvent.__wrap(__XSelectionEvent.calloc())

    @overload
    def property(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionEvent.property()"""
        return int.__wrap(super(XSelectionEvent, self).property())

    @staticmethod
    @overload
    def ntarget(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSelectionEvent.ntarget(long,long)"""
        __XSelectionEvent.ntarget(__long.valueOf(arg0), __long.valueOf(arg1))

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool.__wrap(super(__pyglsystem.Struct, self).isNull(__int.valueOf(arg0)))

    @overload
    def selection(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionEvent.selection()"""
        return int.__wrap(super(XSelectionEvent, self).selection())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @staticmethod
    @overload
    def nproperty(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSelectionEvent.nproperty(long,long)"""
        __XSelectionEvent.nproperty(__long.valueOf(arg0), __long.valueOf(arg1))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def requestor(self, arg0: int) -> 'XSelectionEvent':
        """public org.lwjgl.system.linux.XSelectionEvent org.lwjgl.system.linux.XSelectionEvent.requestor(long)"""
        return 'XSelectionEvent'.__wrap(super(__XSelectionEvent, self).requestor(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionEvent$Buffer org.lwjgl.system.linux.XSelectionEvent.mallocStack(int)"""
        return Buffer.__wrap(__XSelectionEvent.mallocStack(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XSelectionEvent':
        """public static org.lwjgl.system.linux.XSelectionEvent org.lwjgl.system.linux.XSelectionEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XSelectionEvent.__wrap(__XSelectionEvent.mallocStack(arg0))

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionEvent$Buffer org.lwjgl.system.linux.XSelectionEvent.malloc(int)"""
        return Buffer.__wrap(__XSelectionEvent.malloc(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSelectionEvent.ndisplay(long,long)"""
        __XSelectionEvent.ndisplay(__long.valueOf(arg0), __long.valueOf(arg1))

    @overload
    def type(self, arg0: int) -> 'XSelectionEvent':
        """public org.lwjgl.system.linux.XSelectionEvent org.lwjgl.system.linux.XSelectionEvent.type(int)"""
        return 'XSelectionEvent'.__wrap(super(__XSelectionEvent, self).type(__int.valueOf(arg0)))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XSelectionEvent(java.nio.ByteBuffer)"""
        val = __XSelectionEvent(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def selection(self, arg0: int) -> 'XSelectionEvent':
        """public org.lwjgl.system.linux.XSelectionEvent org.lwjgl.system.linux.XSelectionEvent.selection(long)"""
        return 'XSelectionEvent'.__wrap(super(__XSelectionEvent, self).selection(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack() -> 'XSelectionEvent':
        """public static org.lwjgl.system.linux.XSelectionEvent org.lwjgl.system.linux.XSelectionEvent.callocStack()"""
        return XSelectionEvent.__wrap(__XSelectionEvent.callocStack())

    @staticmethod
    @overload
    def nproperty(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XSelectionEvent.nproperty(long)"""
        return int.__wrap(__XSelectionEvent.nproperty(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XSelectionEvent':
        """public static org.lwjgl.system.linux.XSelectionEvent org.lwjgl.system.linux.XSelectionEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XSelectionEvent.__wrap(__XSelectionEvent.callocStack(arg0))

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XSelectionEvent.validate(long)"""
        __XSelectionEvent.validate(__long.valueOf(arg0))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionEvent$Buffer org.lwjgl.system.linux.XSelectionEvent.callocStack(int)"""
        return Buffer.__wrap(__XSelectionEvent.callocStack(__int.valueOf(arg0)))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XSelectionEvent.send_event()"""
        return bool.__wrap(super(XSelectionEvent, self).send_event())

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @staticmethod
    @overload
    def nrequestor(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSelectionEvent.nrequestor(long,long)"""
        __XSelectionEvent.nrequestor(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionEvent$Buffer org.lwjgl.system.linux.XSelectionEvent.create(long,int)"""
        return Buffer.__wrap(__XSelectionEvent.create(__long.valueOf(arg0), __int.valueOf(arg1)))

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionEvent$Buffer org.lwjgl.system.linux.XSelectionEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XSelectionEvent.callocStack(__int.valueOf(arg0), arg1))

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionEvent.display()"""
        return int.__wrap(super(XSelectionEvent, self).display())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XSelectionEvent.ntype(long)"""
        return int.__wrap(__XSelectionEvent.ntype(__long.valueOf(arg0)))

    @overload
    def display(self, arg0: int) -> 'XSelectionEvent':
        """public org.lwjgl.system.linux.XSelectionEvent org.lwjgl.system.linux.XSelectionEvent.display(long)"""
        return 'XSelectionEvent'.__wrap(super(__XSelectionEvent, self).display(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XSelectionEvent.nsend_event(long)"""
        return int.__wrap(__XSelectionEvent.nsend_event(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XSelectionEvent.nserial(long)"""
        return int.__wrap(__XSelectionEvent.nserial(__long.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionEvent.serial()"""
        return int.__wrap(super(XSelectionEvent, self).serial())

    @overload
    def target(self, arg0: int) -> 'XSelectionEvent':
        """public org.lwjgl.system.linux.XSelectionEvent org.lwjgl.system.linux.XSelectionEvent.target(long)"""
        return 'XSelectionEvent'.__wrap(super(__XSelectionEvent, self).target(__long.valueOf(arg0)))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XSelectionEvent.type()"""
        return int.__wrap(super(XSelectionEvent, self).type())

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionEvent$Buffer org.lwjgl.system.linux.XSelectionEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XSelectionEvent.malloc(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XSelectionEvent':
        """public static org.lwjgl.system.linux.XSelectionEvent org.lwjgl.system.linux.XSelectionEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XSelectionEvent.__wrap(__XSelectionEvent.calloc(arg0))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).address())

    @staticmethod
    @overload
    def ntarget(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XSelectionEvent.ntarget(long)"""
        return int.__wrap(__XSelectionEvent.ntarget(__long.valueOf(arg0)))

    @overload
    def set(self, arg0: 'XSelectionEvent') -> 'XSelectionEvent':
        """public org.lwjgl.system.linux.XSelectionEvent org.lwjgl.system.linux.XSelectionEvent.set(org.lwjgl.system.linux.XSelectionEvent)"""
        return 'XSelectionEvent'.__wrap(super(__XSelectionEvent, self).set(arg0))

    @staticmethod
    @overload
    def ntime(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XSelectionEvent.ntime(long)"""
        return int.__wrap(__XSelectionEvent.ntime(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionEvent$Buffer org.lwjgl.system.linux.XSelectionEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XSelectionEvent.calloc(__int.valueOf(arg0), arg1))

    @overload
    def requestor(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionEvent.requestor()"""
        return int.__wrap(super(XSelectionEvent, self).requestor())

    @overload
    def serial(self, arg0: int) -> 'XSelectionEvent':
        """public org.lwjgl.system.linux.XSelectionEvent org.lwjgl.system.linux.XSelectionEvent.serial(long)"""
        return 'XSelectionEvent'.__wrap(super(__XSelectionEvent, self).serial(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nrequestor(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XSelectionEvent.nrequestor(long)"""
        return int.__wrap(__XSelectionEvent.nrequestor(__long.valueOf(arg0)))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XSelectionEvent.sizeof()"""
        return int.__wrap(super(XSelectionEvent, self).sizeof())

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XSelectionEvent.ndisplay(long)"""
        return int.__wrap(__XSelectionEvent.ndisplay(__long.valueOf(arg0)))

    @overload
    def time(self, arg0: int) -> 'XSelectionEvent':
        """public org.lwjgl.system.linux.XSelectionEvent org.lwjgl.system.linux.XSelectionEvent.time(long)"""
        return 'XSelectionEvent'.__wrap(super(__XSelectionEvent, self).time(__long.valueOf(arg0)))

    @overload
    def property(self, arg0: int) -> 'XSelectionEvent':
        """public org.lwjgl.system.linux.XSelectionEvent org.lwjgl.system.linux.XSelectionEvent.property(long)"""
        return 'XSelectionEvent'.__wrap(super(__XSelectionEvent, self).property(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'XSelectionEvent':
        """public static org.lwjgl.system.linux.XSelectionEvent org.lwjgl.system.linux.XSelectionEvent.create(long)"""
        return XSelectionEvent.__wrap(__XSelectionEvent.create(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nselection(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XSelectionEvent.nselection(long)"""
        return int.__wrap(__XSelectionEvent.nselection(__long.valueOf(arg0)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str.__wrap(super(pyglsystem.Pointer$Default, self).toString())

    @staticmethod
    @overload
    def ntime(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSelectionEvent.ntime(long,long)"""
        __XSelectionEvent.ntime(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XSelectionEvent':
        """public static org.lwjgl.system.linux.XSelectionEvent org.lwjgl.system.linux.XSelectionEvent.createSafe(long)"""
        return XSelectionEvent.__wrap(__XSelectionEvent.createSafe(__long.valueOf(arg0)))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionEvent$Buffer org.lwjgl.system.linux.XSelectionEvent.createSafe(long,int)"""
        return Buffer.__wrap(__XSelectionEvent.createSafe(__long.valueOf(arg0), __int.valueOf(arg1)))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def target(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionEvent.target()"""
        return int.__wrap(super(XSelectionEvent, self).target())

    @overload
    def send_event(self, arg0: bool) -> 'XSelectionEvent':
        """public org.lwjgl.system.linux.XSelectionEvent org.lwjgl.system.linux.XSelectionEvent.send_event(boolean)"""
        return 'XSelectionEvent'.__wrap(super(__XSelectionEvent, self).send_event(__boolean.valueOf(arg0)))

    @overload
    def time(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionEvent.time()"""
        return int.__wrap(super(XSelectionEvent, self).time())

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        __Struct.validate(__long.valueOf(arg0), __int.valueOf(arg1), __int.valueOf(arg2), arg3)

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSelectionEvent.ntype(long,int)"""
        __XSelectionEvent.ntype(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def create() -> 'XSelectionEvent':
        """public static org.lwjgl.system.linux.XSelectionEvent org.lwjgl.system.linux.XSelectionEvent.create()"""
        return XSelectionEvent.__wrap(__XSelectionEvent.create())

    @staticmethod
    @overload
    def nselection(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSelectionEvent.nselection(long,long)"""
        __XSelectionEvent.nselection(__long.valueOf(arg0), __long.valueOf(arg1)) 
 
 
# CLASS: org.lwjgl.system.linux.Sockaddr
from pyquantum_helper import import_once as __import_once__
from builtins import str
from pyquantum_helper import override
import java.lang.Object as __object
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import java.nio.ByteBuffer as __ByteBuffer
__ByteBuffer = __ByteBuffer
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import org.lwjgl.system.linux.Sockaddr as __Sockaddr
__Sockaddr = __Sockaddr
import org.lwjgl.system.linux.Sockaddr as __Sockaddr_Buffer
__Buffer = __Sockaddr_Buffer.Buffer
import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.Byte as __byte
import java.lang.String as __String
__String = __String
import java.lang.Short as __short
import java.lang.Object as __Object
__Object = __Object
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Integer as __int
from builtins import bool
from builtins import int
 
class Sockaddr(pyglsystem.__Struct, pyglsystem.Struct, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.Sockaddr"""
 
    @staticmethod
    def __wrap(java_value: __Sockaddr) -> 'Sockaddr':
        return Sockaddr(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Sockaddr):
        """
        Dynamic initializer for Sockaddr.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def sa_family(self) -> int:
        """public short org.lwjgl.system.linux.Sockaddr.sa_family()"""
        return int.__wrap(super(Sockaddr, self).sa_family())

    @overload
    def sa_data(self, arg0: int) -> int:
        """public byte org.lwjgl.system.linux.Sockaddr.sa_data(int)"""
        return int.__wrap(super(__Sockaddr, self).sa_data(__int.valueOf(arg0)))

    @overload
    def set(self, arg0: int, arg1: 'ByteBuffer') -> 'Sockaddr':
        """public org.lwjgl.system.linux.Sockaddr org.lwjgl.system.linux.Sockaddr.set(short,java.nio.ByteBuffer)"""
        return 'Sockaddr'.__wrap(super(__Sockaddr, self).set(__short.valueOf(arg0), arg1))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).address())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def nsa_family(arg0: int) -> int:
        """public static short org.lwjgl.system.linux.Sockaddr.nsa_family(long)"""
        return int.__wrap(__Sockaddr.nsa_family(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nsa_data(arg0: int, arg1: int, arg2: int):
        """public static void org.lwjgl.system.linux.Sockaddr.nsa_data(long,int,byte)"""
        __Sockaddr.nsa_data(__long.valueOf(arg0), __int.valueOf(arg1), __byte.valueOf(arg2))

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool.__wrap(super(__pyglsystem.Struct, self).isNull(__int.valueOf(arg0)))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.Sockaddr$Buffer org.lwjgl.system.linux.Sockaddr.create(int)"""
        return Buffer.__wrap(__Sockaddr.create(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nsa_family(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Sockaddr.nsa_family(long,short)"""
        __Sockaddr.nsa_family(__long.valueOf(arg0), __short.valueOf(arg1))

    @overload
    def set(self, arg0: 'Sockaddr') -> 'Sockaddr':
        """public org.lwjgl.system.linux.Sockaddr org.lwjgl.system.linux.Sockaddr.set(org.lwjgl.system.linux.Sockaddr)"""
        return 'Sockaddr'.__wrap(super(__Sockaddr, self).set(arg0))

    @staticmethod
    @overload
    def nsa_data(arg0: int, arg1: int) -> int:
        """public static byte org.lwjgl.system.linux.Sockaddr.nsa_data(long,int)"""
        return int.__wrap(__Sockaddr.nsa_data(__long.valueOf(arg0), __int.valueOf(arg1)))

    @staticmethod
    @overload
    def nsa_data(arg0: int, arg1: 'ByteBuffer'):
        """public static void org.lwjgl.system.linux.Sockaddr.nsa_data(long,java.nio.ByteBuffer)"""
        __Sockaddr.nsa_data(__long.valueOf(arg0), arg1)

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.Sockaddr(java.nio.ByteBuffer)"""
        val = __Sockaddr(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @staticmethod
    @overload
    def create() -> 'Sockaddr':
        """public static org.lwjgl.system.linux.Sockaddr org.lwjgl.system.linux.Sockaddr.create()"""
        return Sockaddr.__wrap(__Sockaddr.create())

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.Sockaddr$Buffer org.lwjgl.system.linux.Sockaddr.createSafe(long,int)"""
        return Buffer.__wrap(__Sockaddr.createSafe(__long.valueOf(arg0), __int.valueOf(arg1)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str.__wrap(super(pyglsystem.Pointer$Default, self).toString())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @overload
    def sa_data(self, arg0: 'ByteBuffer') -> 'Sockaddr':
        """public org.lwjgl.system.linux.Sockaddr org.lwjgl.system.linux.Sockaddr.sa_data(java.nio.ByteBuffer)"""
        return 'Sockaddr'.__wrap(super(__Sockaddr, self).sa_data(arg0))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.Sockaddr$Buffer org.lwjgl.system.linux.Sockaddr.create(long,int)"""
        return Buffer.__wrap(__Sockaddr.create(__long.valueOf(arg0), __int.valueOf(arg1)))

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.Sockaddr$Buffer org.lwjgl.system.linux.Sockaddr.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__Sockaddr.malloc(__int.valueOf(arg0), arg1))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @staticmethod
    @overload
    def malloc() -> 'Sockaddr':
        """public static org.lwjgl.system.linux.Sockaddr org.lwjgl.system.linux.Sockaddr.malloc()"""
        return Sockaddr.__wrap(__Sockaddr.malloc())

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.Sockaddr$Buffer org.lwjgl.system.linux.Sockaddr.calloc(int)"""
        return Buffer.__wrap(__Sockaddr.calloc(__int.valueOf(arg0)))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.Sockaddr.sizeof()"""
        return int.__wrap(super(Sockaddr, self).sizeof())

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @staticmethod
    @overload
    def calloc() -> 'Sockaddr':
        """public static org.lwjgl.system.linux.Sockaddr org.lwjgl.system.linux.Sockaddr.calloc()"""
        return Sockaddr.__wrap(__Sockaddr.calloc())

    @staticmethod
    @overload
    def create(arg0: int) -> 'Sockaddr':
        """public static org.lwjgl.system.linux.Sockaddr org.lwjgl.system.linux.Sockaddr.create(long)"""
        return Sockaddr.__wrap(__Sockaddr.create(__long.valueOf(arg0)))

    @overload
    def sa_data(self) -> 'ByteBuffer':
        """public java.nio.ByteBuffer org.lwjgl.system.linux.Sockaddr.sa_data()"""
        return 'ByteBuffer'.__wrap(super(Sockaddr, self).sa_data())

    @overload
    def sa_family(self, arg0: int) -> 'Sockaddr':
        """public org.lwjgl.system.linux.Sockaddr org.lwjgl.system.linux.Sockaddr.sa_family(short)"""
        return 'Sockaddr'.__wrap(super(__Sockaddr, self).sa_family(__short.valueOf(arg0)))

    @overload
    def sa_data(self, arg0: int, arg1: int) -> 'Sockaddr':
        """public org.lwjgl.system.linux.Sockaddr org.lwjgl.system.linux.Sockaddr.sa_data(int,byte)"""
        return 'Sockaddr'.__wrap(super(__Sockaddr, self).sa_data(__int.valueOf(arg0), __byte.valueOf(arg1)))

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.Sockaddr$Buffer org.lwjgl.system.linux.Sockaddr.malloc(int)"""
        return Buffer.__wrap(__Sockaddr.malloc(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        __Struct.validate(__long.valueOf(arg0), __int.valueOf(arg1), __int.valueOf(arg2), arg3)

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'Sockaddr':
        """public static org.lwjgl.system.linux.Sockaddr org.lwjgl.system.linux.Sockaddr.createSafe(long)"""
        return Sockaddr.__wrap(__Sockaddr.createSafe(__long.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'Sockaddr':
        """public static org.lwjgl.system.linux.Sockaddr org.lwjgl.system.linux.Sockaddr.malloc(org.lwjgl.system.MemoryStack)"""
        return Sockaddr.__wrap(__Sockaddr.malloc(arg0))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'Sockaddr':
        """public static org.lwjgl.system.linux.Sockaddr org.lwjgl.system.linux.Sockaddr.calloc(org.lwjgl.system.MemoryStack)"""
        return Sockaddr.__wrap(__Sockaddr.calloc(arg0))

    @staticmethod
    @overload
    def nsa_data(arg0: int) -> 'ByteBuffer':
        """public static java.nio.ByteBuffer org.lwjgl.system.linux.Sockaddr.nsa_data(long)"""
        return ByteBuffer.__wrap(__Sockaddr.nsa_data(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.Sockaddr$Buffer org.lwjgl.system.linux.Sockaddr.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__Sockaddr.calloc(__int.valueOf(arg0), arg1)) 
 
 
# CLASS: org.lwjgl.system.linux.XUnmapEvent$Buffer
from pyquantum_helper import import_once as __import_once__
import java.lang.Boolean as __boolean
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import java.util.stream.Stream as __Stream
__Stream = __Stream
import org.lwjgl.system.StructBuffer as __StructBuffer
__StructBuffer = __StructBuffer
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.CustomBuffer as __CustomBuffer
__CustomBuffer = __CustomBuffer
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.util.Iterator as __Iterator
__Iterator = __Iterator
import java.lang.Object as __object
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.util.Iterator as Iterator
import java.util.Spliterator as __Spliterator
__Spliterator = __Spliterator
import java.lang.Long as __long
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import org.lwjgl.system.linux.XUnmapEvent as __XUnmapEvent_Buffer
__Buffer = __XUnmapEvent_Buffer.Buffer
import java.lang.Object as __Object
__Object = __Object
import java.util.stream.Stream as Stream
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import int
 
class Buffer(pyglsystem.__StructBuffer, pyglsystem.StructBuffer, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XUnmapEvent.Buffer"""
 
    @staticmethod
    def __wrap(java_value: __Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(__pyglsystem.StructBuffer, self).forEach(arg0)

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XUnmapEvent$Buffer.type()"""
        return int.__wrap(super(Buffer, self).type())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0), arg1))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def event(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XUnmapEvent$Buffer org.lwjgl.system.linux.XUnmapEvent$Buffer.event(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).event(__long.valueOf(arg0)))

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XUnmapEvent$Buffer.window()"""
        return int.__wrap(super(Buffer, self).window())

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int.__wrap(super(__pyglsystem.CustomBuffer, self).address(__int.valueOf(arg0)))

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XUnmapEvent$Buffer org.lwjgl.system.linux.XUnmapEvent$Buffer.display(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).display(__long.valueOf(arg0)))

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XUnmapEvent$Buffer org.lwjgl.system.linux.XUnmapEvent$Buffer.serial(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).serial(__long.valueOf(arg0)))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XUnmapEvent$Buffer.serial()"""
        return int.__wrap(super(Buffer, self).serial())

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(__int.valueOf(arg0), arg1))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int.__wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @overload
    def from_configure(self) -> int:
        """public int org.lwjgl.system.linux.XUnmapEvent$Buffer.from_configure()"""
        return int.__wrap(super(Buffer, self).from_configure())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).get(arg0))

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).position())

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XUnmapEvent$Buffer.send_event()"""
        return bool.__wrap(super(Buffer, self).send_event())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XUnmapEvent$Buffer org.lwjgl.system.linux.XUnmapEvent$Buffer.type(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).type(__int.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool.__wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @overload
    def from_configure(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XUnmapEvent$Buffer org.lwjgl.system.linux.XUnmapEvent$Buffer.from_configure(int)"""
        return 'Buffer'.__wrap(super(__Buffer, self).from_configure(__int.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).position(__int.valueOf(arg0)))

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XUnmapEvent$Buffer(long,int)"""
        val = __Buffer(__long.valueOf(arg0), __int.valueOf(arg1))
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XUnmapEvent$Buffer org.lwjgl.system.linux.XUnmapEvent$Buffer.send_event(boolean)"""
        return 'Buffer'.__wrap(super(__Buffer, self).send_event(__boolean.valueOf(arg0)))

    @overload
    def window(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XUnmapEvent$Buffer org.lwjgl.system.linux.XUnmapEvent$Buffer.window(long)"""
        return 'Buffer'.__wrap(super(__Buffer, self).window(__long.valueOf(arg0)))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'.__wrap(super(__pyglsystem.StructBuffer, self).get(__int.valueOf(arg0)))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).clear())

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).put(__int.valueOf(arg0), arg1))

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int.__wrap(super(pyglsystem.CustomBuffer, self).address())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).slice())

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XUnmapEvent$Buffer.display()"""
        return int.__wrap(super(Buffer, self).display())

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'.__wrap(super(pyglsystem.StructBuffer, self).get())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).limit(__int.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'.__wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str.__wrap(super(pyglsystem.CustomBuffer, self).toString())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XUnmapEvent$Buffer(java.nio.ByteBuffer)"""
        val = __Buffer(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'.__wrap(super(__pyglsystem.StructBuffer, self).apply(arg0))

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'.__wrap(super(pyglsystem.StructBuffer, self).stream())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @overload
    def event(self) -> int:
        """public long org.lwjgl.system.linux.XUnmapEvent$Buffer.event()"""
        return int.__wrap(super(Buffer, self).event())

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'.__wrap(super(pyglsystem.StructBuffer, self).iterator())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'.__wrap(super(__pyglsystem.CustomBuffer, self).slice(__int.valueOf(arg0), __int.valueOf(arg1))) 
 
 
# CLASS: org.lwjgl.system.linux.XButtonEvent
from pyquantum_helper import import_once as __import_once__
from builtins import str
import java.lang.Boolean as __boolean
from pyquantum_helper import override
import java.lang.Object as __object
import org.lwjgl.system.linux.XButtonEvent as __XButtonEvent_Buffer
__Buffer = __XButtonEvent_Buffer.Buffer
from builtins import type
import org.lwjgl.system.NativeResource as __NativeResource
__NativeResource = __NativeResource
import org.lwjgl.system.linux.XButtonEvent as __XButtonEvent
__XButtonEvent = __XButtonEvent
try:
    import pyglsystem
except ImportError:
    pyglsystem = __import_once__("pyglsystem")

import java.lang.Long as __long
import java.lang.Class as __Class
__Class = __Class
import org.lwjgl.system.Struct as __Struct
__Struct = __Struct
import java.lang.String as __String
__String = __String
import java.lang.Object as __Object
__Object = __Object
import org.lwjgl.system.Pointer as __Pointer_Default
__Default = __Pointer_Default.Default
import java.lang.Integer as __int
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
from builtins import int
 
class XButtonEvent(pyglsystem.__Struct, pyglsystem.Struct, pyglsystem.__NativeResource, pyglsystem.NativeResource):
    """org.lwjgl.system.linux.XButtonEvent"""
 
    @staticmethod
    def __wrap(java_value: __XButtonEvent) -> 'XButtonEvent':
        return XButtonEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __XButtonEvent):
        """
        Dynamic initializer for XButtonEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XButtonEvent$Buffer org.lwjgl.system.linux.XButtonEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XButtonEvent.callocStack(__int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XButtonEvent':
        """public static org.lwjgl.system.linux.XButtonEvent org.lwjgl.system.linux.XButtonEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XButtonEvent.__wrap(__XButtonEvent.malloc(arg0))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def ntime(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XButtonEvent.ntime(long,long)"""
        __XButtonEvent.ntime(__long.valueOf(arg0), __long.valueOf(arg1))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def state(self) -> int:
        """public int org.lwjgl.system.linux.XButtonEvent.state()"""
        return int.__wrap(super(XButtonEvent, self).state())

    @overload
    def button(self, arg0: int) -> 'XButtonEvent':
        """public org.lwjgl.system.linux.XButtonEvent org.lwjgl.system.linux.XButtonEvent.button(int)"""
        return 'XButtonEvent'.__wrap(super(__XButtonEvent, self).button(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def ny_root(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XButtonEvent.ny_root(long)"""
        return int.__wrap(__XButtonEvent.ny_root(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack() -> 'XButtonEvent':
        """public static org.lwjgl.system.linux.XButtonEvent org.lwjgl.system.linux.XButtonEvent.callocStack()"""
        return XButtonEvent.__wrap(__XButtonEvent.callocStack())

    @staticmethod
    @overload
    def create(arg0: int) -> 'XButtonEvent':
        """public static org.lwjgl.system.linux.XButtonEvent org.lwjgl.system.linux.XButtonEvent.create(long)"""
        return XButtonEvent.__wrap(__XButtonEvent.create(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc() -> 'XButtonEvent':
        """public static org.lwjgl.system.linux.XButtonEvent org.lwjgl.system.linux.XButtonEvent.calloc()"""
        return XButtonEvent.__wrap(__XButtonEvent.calloc())

    @overload
    def x_root(self, arg0: int) -> 'XButtonEvent':
        """public org.lwjgl.system.linux.XButtonEvent org.lwjgl.system.linux.XButtonEvent.x_root(int)"""
        return 'XButtonEvent'.__wrap(super(__XButtonEvent, self).x_root(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc() -> 'XButtonEvent':
        """public static org.lwjgl.system.linux.XButtonEvent org.lwjgl.system.linux.XButtonEvent.malloc()"""
        return XButtonEvent.__wrap(__XButtonEvent.malloc())

    @overload
    def subwindow(self, arg0: int) -> 'XButtonEvent':
        """public org.lwjgl.system.linux.XButtonEvent org.lwjgl.system.linux.XButtonEvent.subwindow(long)"""
        return 'XButtonEvent'.__wrap(super(__XButtonEvent, self).subwindow(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XButtonEvent.ndisplay(long)"""
        return int.__wrap(__XButtonEvent.ndisplay(__long.valueOf(arg0)))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool.__wrap(super(__pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def root(self, arg0: int) -> 'XButtonEvent':
        """public org.lwjgl.system.linux.XButtonEvent org.lwjgl.system.linux.XButtonEvent.root(long)"""
        return 'XButtonEvent'.__wrap(super(__XButtonEvent, self).root(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XButtonEvent.nserial(long,long)"""
        __XButtonEvent.nserial(__long.valueOf(arg0), __long.valueOf(arg1))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XButtonEvent.serial()"""
        return int.__wrap(super(XButtonEvent, self).serial())

    @staticmethod
    @overload
    def nroot(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XButtonEvent.nroot(long)"""
        return int.__wrap(__XButtonEvent.nroot(__long.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XButtonEvent(java.nio.ByteBuffer)"""
        val = __XButtonEvent(arg0)
        self.__dict__ = val.__dict__
        self.__wrapper = val

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XButtonEvent$Buffer org.lwjgl.system.linux.XButtonEvent.malloc(int)"""
        return Buffer.__wrap(__XButtonEvent.malloc(__int.valueOf(arg0)))

    @overload
    def send_event(self, arg0: bool) -> 'XButtonEvent':
        """public org.lwjgl.system.linux.XButtonEvent org.lwjgl.system.linux.XButtonEvent.send_event(boolean)"""
        return 'XButtonEvent'.__wrap(super(__XButtonEvent, self).send_event(__boolean.valueOf(arg0)))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XButtonEvent.type()"""
        return int.__wrap(super(XButtonEvent, self).type())

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XButtonEvent.validate(long)"""
        __XButtonEvent.validate(__long.valueOf(arg0))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XButtonEvent$Buffer org.lwjgl.system.linux.XButtonEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XButtonEvent.calloc(__int.valueOf(arg0), arg1))

    @overload
    def x(self, arg0: int) -> 'XButtonEvent':
        """public org.lwjgl.system.linux.XButtonEvent org.lwjgl.system.linux.XButtonEvent.x(int)"""
        return 'XButtonEvent'.__wrap(super(__XButtonEvent, self).x(__int.valueOf(arg0)))

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: int, arg10: int, arg11: int, arg12: int, arg13: int, arg14: bool) -> 'XButtonEvent':
        """public org.lwjgl.system.linux.XButtonEvent org.lwjgl.system.linux.XButtonEvent.set(int,long,boolean,long,long,long,long,long,int,int,int,int,int,int,boolean)"""
        return 'XButtonEvent'.__wrap(super(__XButtonEvent, self).set(__int.valueOf(arg0), __long.valueOf(arg1), __boolean.valueOf(arg2), __long.valueOf(arg3), __long.valueOf(arg4), __long.valueOf(arg5), __long.valueOf(arg6), __long.valueOf(arg7), __int.valueOf(arg8), __int.valueOf(arg9), __int.valueOf(arg10), __int.valueOf(arg11), __int.valueOf(arg12), __int.valueOf(arg13), __boolean.valueOf(arg14)))

    @staticmethod
    @overload
    def create() -> 'XButtonEvent':
        """public static org.lwjgl.system.linux.XButtonEvent org.lwjgl.system.linux.XButtonEvent.create()"""
        return XButtonEvent.__wrap(__XButtonEvent.create())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int.__wrap(super(pyglsystem.Pointer$Default, self).address())

    @staticmethod
    @overload
    def nsubwindow(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XButtonEvent.nsubwindow(long)"""
        return int.__wrap(__XButtonEvent.nsubwindow(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nstate(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XButtonEvent.nstate(long)"""
        return int.__wrap(__XButtonEvent.nstate(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XButtonEvent.nsend_event(long,int)"""
        __XButtonEvent.nsend_event(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XButtonEvent$Buffer org.lwjgl.system.linux.XButtonEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XButtonEvent.malloc(__int.valueOf(arg0), arg1))

    @overload
    def y_root(self) -> int:
        """public int org.lwjgl.system.linux.XButtonEvent.y_root()"""
        return int.__wrap(super(XButtonEvent, self).y_root())

    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XButtonEvent.nsend_event(long)"""
        return int.__wrap(__XButtonEvent.nsend_event(__long.valueOf(arg0)))

    @overload
    def root(self) -> int:
        """public long org.lwjgl.system.linux.XButtonEvent.root()"""
        return int.__wrap(super(XButtonEvent, self).root())

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XButtonEvent$Buffer org.lwjgl.system.linux.XButtonEvent.callocStack(int)"""
        return Buffer.__wrap(__XButtonEvent.callocStack(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def ny(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XButtonEvent.ny(long,int)"""
        __XButtonEvent.ny(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str.__wrap(super(pyglsystem.Pointer$Default, self).toString())

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XButtonEvent.ntype(long,int)"""
        __XButtonEvent.ntype(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def button(self) -> int:
        """public int org.lwjgl.system.linux.XButtonEvent.button()"""
        return int.__wrap(super(XButtonEvent, self).button())

    @staticmethod
    @overload
    def ntime(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XButtonEvent.ntime(long)"""
        return int.__wrap(__XButtonEvent.ntime(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XButtonEvent':
        """public static org.lwjgl.system.linux.XButtonEvent org.lwjgl.system.linux.XButtonEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XButtonEvent.__wrap(__XButtonEvent.callocStack(arg0))

    @overload
    def time(self, arg0: int) -> 'XButtonEvent':
        """public org.lwjgl.system.linux.XButtonEvent org.lwjgl.system.linux.XButtonEvent.time(long)"""
        return 'XButtonEvent'.__wrap(super(__XButtonEvent, self).time(__long.valueOf(arg0)))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @overload
    def display(self, arg0: int) -> 'XButtonEvent':
        """public org.lwjgl.system.linux.XButtonEvent org.lwjgl.system.linux.XButtonEvent.display(long)"""
        return 'XButtonEvent'.__wrap(super(__XButtonEvent, self).display(__long.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XButtonEvent.send_event()"""
        return bool.__wrap(super(XButtonEvent, self).send_event())

    @staticmethod
    @overload
    def nsame_screen(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XButtonEvent.nsame_screen(long)"""
        return int.__wrap(__XButtonEvent.nsame_screen(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nsame_screen(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XButtonEvent.nsame_screen(long,int)"""
        __XButtonEvent.nsame_screen(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def type(self, arg0: int) -> 'XButtonEvent':
        """public org.lwjgl.system.linux.XButtonEvent org.lwjgl.system.linux.XButtonEvent.type(int)"""
        return 'XButtonEvent'.__wrap(super(__XButtonEvent, self).type(__int.valueOf(arg0)))

    @overload
    def state(self, arg0: int) -> 'XButtonEvent':
        """public org.lwjgl.system.linux.XButtonEvent org.lwjgl.system.linux.XButtonEvent.state(int)"""
        return 'XButtonEvent'.__wrap(super(__XButtonEvent, self).state(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nbutton(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XButtonEvent.nbutton(long,int)"""
        __XButtonEvent.nbutton(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XButtonEvent$Buffer org.lwjgl.system.linux.XButtonEvent.create(long,int)"""
        return Buffer.__wrap(__XButtonEvent.create(__long.valueOf(arg0), __int.valueOf(arg1)))

    @overload
    def y(self) -> int:
        """public int org.lwjgl.system.linux.XButtonEvent.y()"""
        return int.__wrap(super(XButtonEvent, self).y())

    @staticmethod
    @overload
    def ny(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XButtonEvent.ny(long)"""
        return int.__wrap(__XButtonEvent.ny(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        __Struct.validate(__long.valueOf(arg0), __int.valueOf(arg1), __int.valueOf(arg2), arg3)

    @overload
    def window(self, arg0: int) -> 'XButtonEvent':
        """public org.lwjgl.system.linux.XButtonEvent org.lwjgl.system.linux.XButtonEvent.window(long)"""
        return 'XButtonEvent'.__wrap(super(__XButtonEvent, self).window(__long.valueOf(arg0)))

    @overload
    def y_root(self, arg0: int) -> 'XButtonEvent':
        """public org.lwjgl.system.linux.XButtonEvent org.lwjgl.system.linux.XButtonEvent.y_root(int)"""
        return 'XButtonEvent'.__wrap(super(__XButtonEvent, self).y_root(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nwindow(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XButtonEvent.nwindow(long,long)"""
        __XButtonEvent.nwindow(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def nx_root(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XButtonEvent.nx_root(long,int)"""
        __XButtonEvent.nx_root(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XButtonEvent$Buffer org.lwjgl.system.linux.XButtonEvent.calloc(int)"""
        return Buffer.__wrap(__XButtonEvent.calloc(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XButtonEvent$Buffer org.lwjgl.system.linux.XButtonEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer.__wrap(__XButtonEvent.mallocStack(__int.valueOf(arg0), arg1))

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool.__wrap(super(__pyglsystem.Struct, self).isNull(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nroot(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XButtonEvent.nroot(long,long)"""
        __XButtonEvent.nroot(__long.valueOf(arg0), __long.valueOf(arg1))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def same_screen(self) -> bool:
        """public boolean org.lwjgl.system.linux.XButtonEvent.same_screen()"""
        return bool.__wrap(super(XButtonEvent, self).same_screen())

    @staticmethod
    @overload
    def nwindow(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XButtonEvent.nwindow(long)"""
        return int.__wrap(__XButtonEvent.nwindow(__long.valueOf(arg0)))

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XButtonEvent.window()"""
        return int.__wrap(super(XButtonEvent, self).window())

    @staticmethod
    @overload
    def nstate(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XButtonEvent.nstate(long,int)"""
        __XButtonEvent.nstate(__long.valueOf(arg0), __int.valueOf(arg1))

    @overload
    def x(self) -> int:
        """public int org.lwjgl.system.linux.XButtonEvent.x()"""
        return int.__wrap(super(XButtonEvent, self).x())

    @staticmethod
    @overload
    def mallocStack() -> 'XButtonEvent':
        """public static org.lwjgl.system.linux.XButtonEvent org.lwjgl.system.linux.XButtonEvent.mallocStack()"""
        return XButtonEvent.__wrap(__XButtonEvent.mallocStack())

    @staticmethod
    @overload
    def nx(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XButtonEvent.nx(long,int)"""
        __XButtonEvent.nx(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XButtonEvent.ndisplay(long,long)"""
        __XButtonEvent.ndisplay(__long.valueOf(arg0), __long.valueOf(arg1))

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @overload
    def set(self, arg0: 'XButtonEvent') -> 'XButtonEvent':
        """public org.lwjgl.system.linux.XButtonEvent org.lwjgl.system.linux.XButtonEvent.set(org.lwjgl.system.linux.XButtonEvent)"""
        return 'XButtonEvent'.__wrap(super(__XButtonEvent, self).set(arg0))

    @overload
    def time(self) -> int:
        """public long org.lwjgl.system.linux.XButtonEvent.time()"""
        return int.__wrap(super(XButtonEvent, self).time())

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XButtonEvent.display()"""
        return int.__wrap(super(XButtonEvent, self).display())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XButtonEvent.sizeof()"""
        return int.__wrap(super(XButtonEvent, self).sizeof())

    @overload
    def subwindow(self) -> int:
        """public long org.lwjgl.system.linux.XButtonEvent.subwindow()"""
        return int.__wrap(super(XButtonEvent, self).subwindow())

    @overload
    def x_root(self) -> int:
        """public int org.lwjgl.system.linux.XButtonEvent.x_root()"""
        return int.__wrap(super(XButtonEvent, self).x_root())

    @staticmethod
    @overload
    def nbutton(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XButtonEvent.nbutton(long)"""
        return int.__wrap(__XButtonEvent.nbutton(__long.valueOf(arg0)))

    @overload
    def serial(self, arg0: int) -> 'XButtonEvent':
        """public org.lwjgl.system.linux.XButtonEvent org.lwjgl.system.linux.XButtonEvent.serial(long)"""
        return 'XButtonEvent'.__wrap(super(__XButtonEvent, self).serial(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XButtonEvent.ntype(long)"""
        return int.__wrap(__XButtonEvent.ntype(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XButtonEvent':
        """public static org.lwjgl.system.linux.XButtonEvent org.lwjgl.system.linux.XButtonEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XButtonEvent.__wrap(__XButtonEvent.calloc(arg0))

    @overload
    def y(self, arg0: int) -> 'XButtonEvent':
        """public org.lwjgl.system.linux.XButtonEvent org.lwjgl.system.linux.XButtonEvent.y(int)"""
        return 'XButtonEvent'.__wrap(super(__XButtonEvent, self).y(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XButtonEvent.nserial(long)"""
        return int.__wrap(__XButtonEvent.nserial(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XButtonEvent':
        """public static org.lwjgl.system.linux.XButtonEvent org.lwjgl.system.linux.XButtonEvent.createSafe(long)"""
        return XButtonEvent.__wrap(__XButtonEvent.createSafe(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def nsubwindow(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XButtonEvent.nsubwindow(long,long)"""
        __XButtonEvent.nsubwindow(__long.valueOf(arg0), __long.valueOf(arg1))

    @staticmethod
    @overload
    def nx_root(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XButtonEvent.nx_root(long)"""
        return int.__wrap(__XButtonEvent.nx_root(__long.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XButtonEvent$Buffer org.lwjgl.system.linux.XButtonEvent.create(int)"""
        return Buffer.__wrap(__XButtonEvent.create(__int.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XButtonEvent$Buffer org.lwjgl.system.linux.XButtonEvent.createSafe(long,int)"""
        return Buffer.__wrap(__XButtonEvent.createSafe(__long.valueOf(arg0), __int.valueOf(arg1)))

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XButtonEvent$Buffer org.lwjgl.system.linux.XButtonEvent.mallocStack(int)"""
        return Buffer.__wrap(__XButtonEvent.mallocStack(__int.valueOf(arg0)))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @overload
    def same_screen(self, arg0: bool) -> 'XButtonEvent':
        """public org.lwjgl.system.linux.XButtonEvent org.lwjgl.system.linux.XButtonEvent.same_screen(boolean)"""
        return 'XButtonEvent'.__wrap(super(__XButtonEvent, self).same_screen(__boolean.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XButtonEvent':
        """public static org.lwjgl.system.linux.XButtonEvent org.lwjgl.system.linux.XButtonEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XButtonEvent.__wrap(__XButtonEvent.mallocStack(arg0))

    @staticmethod
    @overload
    def ny_root(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XButtonEvent.ny_root(long,int)"""
        __XButtonEvent.ny_root(__long.valueOf(arg0), __int.valueOf(arg1))

    @staticmethod
    @overload
    def nx(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XButtonEvent.nx(long)"""
        return int.__wrap(__XButtonEvent.nx(__long.valueOf(arg0))) 
 
 
# CLASS: org.lwjgl.system.linux.X11$Functions
import org.lwjgl.system.linux.X11 as __X11_Functions
__Functions = __X11_Functions.Functions
from builtins import str
import java.lang.Long as __long
from pyquantum_helper import override
import java.lang.Class as __Class
__Class = __Class
import java.lang.Object as __object
import java.lang.String as __String
__String = __String
from builtins import type
import java.lang.Object as __Object
__Object = __Object
import java.lang.Integer as __int
from builtins import bool
from builtins import int
 
class Functions():
    """org.lwjgl.system.linux.X11.Functions"""
 
    @staticmethod
    def __wrap(java_value: __Functions) -> 'Functions':
        return Functions(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: __Functions):
        """
        Dynamic initializer for Functions.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__dict__ = __dynamic__.__dict__
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: object):
        return setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'.__wrap(super(object, self).getClass())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0), __int.valueOf(arg1))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.lang.Object.toString()"""
        return str.__wrap(super(object, self).toString())

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int.__wrap(super(object, self).hashCode())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool.__wrap(super(__object, self).equals(arg0))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(__object, self).wait(__long.valueOf(arg0))