from __future__ import annotations
from overload import overload


 
from pyquantum_helper import import_once as _import_once
import java.lang.Object as _Object
_Object = _Object
from builtins import type
import org.lwjgl.system.CustomBuffer as _CustomBuffer
_CustomBuffer = _CustomBuffer
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Byte as _byte
import org.lwjgl.system.StructBuffer as _StructBuffer
_StructBuffer = _StructBuffer
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.util.Iterator as _Iterator
_Iterator = _Iterator
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
import java.nio.ByteBuffer as _ByteBuffer
_ByteBuffer = _ByteBuffer
import java.util.Spliterator as _Spliterator
_Spliterator = _Spliterator
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.util.Iterator as Iterator
import java.lang.Integer as _int
import java.util.stream.Stream as _Stream
_Stream = _Stream
import java.util.stream.Stream as Stream
import org.lwjgl.system.linux.CMsghdr as _CMsghdr_Buffer
_Buffer = _CMsghdr_Buffer.Buffer
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class Buffer():
    """org.lwjgl.system.linux.CMsghdr.Buffer"""
 
    @staticmethod
    def _wrap(java_value: _Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Buffer__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Buffer__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).limit(_int.valueOf(arg0)))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.CMsghdr$Buffer(long,int)"""
        val = _Buffer(_long.valueOf(arg0), _int.valueOf(arg1))
        self.__wrapper = val

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0)))

    @overload
    def cmsg_level(self) -> int:
        """public int org.lwjgl.system.linux.CMsghdr$Buffer.cmsg_level()"""
        return int._wrap(super(Buffer, self).cmsg_level())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def cmsg_data(self) -> 'ByteBuffer':
        """public java.nio.ByteBuffer org.lwjgl.system.linux.CMsghdr$Buffer.cmsg_data()"""
        return 'ByteBuffer'._wrap(super(Buffer, self).cmsg_data())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str._wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int._wrap(super(_pyglsystem.CustomBuffer, self).address(_int.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).mark())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.CMsghdr$Buffer(java.nio.ByteBuffer)"""
        val = _Buffer(arg0)
        self.__wrapper = val

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'._wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).stream())

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).position(_int.valueOf(arg0)))

    @overload
    def cmsg_data(self, arg0: int) -> int:
        """public byte org.lwjgl.system.linux.CMsghdr$Buffer.cmsg_data(int)"""
        return int._wrap(super(_Buffer, self).cmsg_data(_int.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'._wrap(super(pyglsystem.StructBuffer, self).get())

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def cmsg_level(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.CMsghdr$Buffer org.lwjgl.system.linux.CMsghdr$Buffer.cmsg_level(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).cmsg_level(_int.valueOf(arg0)))

    @overload
    def cmsg_type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.CMsghdr$Buffer org.lwjgl.system.linux.CMsghdr$Buffer.cmsg_type(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).cmsg_type(_int.valueOf(arg0)))

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(arg0))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'._wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def cmsg_type(self) -> int:
        """public int org.lwjgl.system.linux.CMsghdr$Buffer.cmsg_type()"""
        return int._wrap(super(Buffer, self).cmsg_type())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).slice())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).slice(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def cmsg_len(self) -> int:
        """public int org.lwjgl.system.linux.CMsghdr$Buffer.cmsg_len()"""
        return int._wrap(super(Buffer, self).cmsg_len())

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0), arg1))

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(_int.valueOf(arg0), arg1))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).clear())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool._wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).flip())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int._wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(_int.valueOf(arg0), arg1))

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def cmsg_data(self, arg0: 'ByteBuffer') -> 'Buffer':
        """public org.lwjgl.system.linux.CMsghdr$Buffer org.lwjgl.system.linux.CMsghdr$Buffer.cmsg_data(java.nio.ByteBuffer)"""
        return 'Buffer'._wrap(super(_Buffer, self).cmsg_data(arg0))

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(_pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def cmsg_data(self, arg0: int, arg1: int) -> 'Buffer':
        """public org.lwjgl.system.linux.CMsghdr$Buffer org.lwjgl.system.linux.CMsghdr$Buffer.cmsg_data(int,byte)"""
        return 'Buffer'._wrap(super(_Buffer, self).cmsg_data(_int.valueOf(arg0), _byte.valueOf(arg1)))

    @overload
    def cmsg_len(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.CMsghdr$Buffer org.lwjgl.system.linux.CMsghdr$Buffer.cmsg_len(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).cmsg_len(_int.valueOf(arg0)))

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(arg0))

 
 
 
# CLASS: org.lwjgl.system.linux.CMsghdr$Buffer
from pyquantum_helper import import_once as _import_once
import java.lang.Object as _Object
_Object = _Object
from builtins import type
import org.lwjgl.system.CustomBuffer as _CustomBuffer
_CustomBuffer = _CustomBuffer
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Byte as _byte
import org.lwjgl.system.StructBuffer as _StructBuffer
_StructBuffer = _StructBuffer
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.util.Iterator as _Iterator
_Iterator = _Iterator
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
import java.nio.ByteBuffer as _ByteBuffer
_ByteBuffer = _ByteBuffer
import java.util.Spliterator as _Spliterator
_Spliterator = _Spliterator
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.util.Iterator as Iterator
import java.lang.Integer as _int
import java.util.stream.Stream as _Stream
_Stream = _Stream
import java.util.stream.Stream as Stream
import org.lwjgl.system.linux.CMsghdr as _CMsghdr_Buffer
_Buffer = _CMsghdr_Buffer.Buffer
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class Buffer():
    """org.lwjgl.system.linux.CMsghdr.Buffer"""
 
    @staticmethod
    def _wrap(java_value: _Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Buffer__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Buffer__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).limit(_int.valueOf(arg0)))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.CMsghdr$Buffer(long,int)"""
        val = _Buffer(_long.valueOf(arg0), _int.valueOf(arg1))
        self.__wrapper = val

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0)))

    @overload
    def cmsg_level(self) -> int:
        """public int org.lwjgl.system.linux.CMsghdr$Buffer.cmsg_level()"""
        return int._wrap(super(Buffer, self).cmsg_level())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def cmsg_data(self) -> 'ByteBuffer':
        """public java.nio.ByteBuffer org.lwjgl.system.linux.CMsghdr$Buffer.cmsg_data()"""
        return 'ByteBuffer'._wrap(super(Buffer, self).cmsg_data())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str._wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int._wrap(super(_pyglsystem.CustomBuffer, self).address(_int.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).mark())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.CMsghdr$Buffer(java.nio.ByteBuffer)"""
        val = _Buffer(arg0)
        self.__wrapper = val

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'._wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).stream())

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).position(_int.valueOf(arg0)))

    @overload
    def cmsg_data(self, arg0: int) -> int:
        """public byte org.lwjgl.system.linux.CMsghdr$Buffer.cmsg_data(int)"""
        return int._wrap(super(_Buffer, self).cmsg_data(_int.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'._wrap(super(pyglsystem.StructBuffer, self).get())

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def cmsg_level(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.CMsghdr$Buffer org.lwjgl.system.linux.CMsghdr$Buffer.cmsg_level(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).cmsg_level(_int.valueOf(arg0)))

    @overload
    def cmsg_type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.CMsghdr$Buffer org.lwjgl.system.linux.CMsghdr$Buffer.cmsg_type(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).cmsg_type(_int.valueOf(arg0)))

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(arg0))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'._wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def cmsg_type(self) -> int:
        """public int org.lwjgl.system.linux.CMsghdr$Buffer.cmsg_type()"""
        return int._wrap(super(Buffer, self).cmsg_type())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).slice())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).slice(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def cmsg_len(self) -> int:
        """public int org.lwjgl.system.linux.CMsghdr$Buffer.cmsg_len()"""
        return int._wrap(super(Buffer, self).cmsg_len())

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0), arg1))

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(_int.valueOf(arg0), arg1))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).clear())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool._wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).flip())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int._wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(_int.valueOf(arg0), arg1))

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def cmsg_data(self, arg0: 'ByteBuffer') -> 'Buffer':
        """public org.lwjgl.system.linux.CMsghdr$Buffer org.lwjgl.system.linux.CMsghdr$Buffer.cmsg_data(java.nio.ByteBuffer)"""
        return 'Buffer'._wrap(super(_Buffer, self).cmsg_data(arg0))

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(_pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def cmsg_data(self, arg0: int, arg1: int) -> 'Buffer':
        """public org.lwjgl.system.linux.CMsghdr$Buffer org.lwjgl.system.linux.CMsghdr$Buffer.cmsg_data(int,byte)"""
        return 'Buffer'._wrap(super(_Buffer, self).cmsg_data(_int.valueOf(arg0), _byte.valueOf(arg1)))

    @overload
    def cmsg_len(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.CMsghdr$Buffer org.lwjgl.system.linux.CMsghdr$Buffer.cmsg_len(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).cmsg_len(_int.valueOf(arg0)))

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(arg0))

 
 
 
# CLASS: org.lwjgl.system.linux.CMsghdr$Buffer 
 
 
# CLASS: org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer
from pyquantum_helper import import_once as _import_once
import java.lang.Object as _Object
_Object = _Object
from builtins import type
import org.lwjgl.system.CustomBuffer as _CustomBuffer
_CustomBuffer = _CustomBuffer
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Boolean as _boolean
import org.lwjgl.system.StructBuffer as _StructBuffer
_StructBuffer = _StructBuffer
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.util.Iterator as _Iterator
_Iterator = _Iterator
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
import java.util.Spliterator as _Spliterator
_Spliterator = _Spliterator
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.util.Iterator as Iterator
import org.lwjgl.system.linux.XGraphicsExposeEvent as _XGraphicsExposeEvent_Buffer
_Buffer = _XGraphicsExposeEvent_Buffer.Buffer
import java.lang.Integer as _int
import java.util.stream.Stream as _Stream
_Stream = _Stream
import java.util.stream.Stream as Stream
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class Buffer():
    """org.lwjgl.system.linux.XGraphicsExposeEvent.Buffer"""
 
    @staticmethod
    def _wrap(java_value: _Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Buffer__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Buffer__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).limit(_int.valueOf(arg0)))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address())

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer.serial()"""
        return int._wrap(super(Buffer, self).serial())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str._wrap(super(pyglsystem.CustomBuffer, self).toString())

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer.type(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).type(_int.valueOf(arg0)))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int._wrap(super(_pyglsystem.CustomBuffer, self).address(_int.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).mark())

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer.display()"""
        return int._wrap(super(Buffer, self).display())

    @overload
    def major_code(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer.major_code(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).major_code(_int.valueOf(arg0)))

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'._wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @overload
    def major_code(self) -> int:
        """public int org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer.major_code()"""
        return int._wrap(super(Buffer, self).major_code())

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).stream())

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).position(_int.valueOf(arg0)))

    @overload
    def minor_code(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer.minor_code(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).minor_code(_int.valueOf(arg0)))

    @overload
    def width(self) -> int:
        """public int org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer.width()"""
        return int._wrap(super(Buffer, self).width())

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @overload
    def drawable(self) -> int:
        """public long org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer.drawable()"""
        return int._wrap(super(Buffer, self).drawable())

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'._wrap(super(pyglsystem.StructBuffer, self).get())

    @overload
    def height(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer.height(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).height(_int.valueOf(arg0)))

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def y(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer.y(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).y(_int.valueOf(arg0)))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer.type()"""
        return int._wrap(super(Buffer, self).type())

    @overload
    def x(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer.x(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).x(_int.valueOf(arg0)))

    @overload
    def minor_code(self) -> int:
        """public int org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer.minor_code()"""
        return int._wrap(super(Buffer, self).minor_code())

    @overload
    def x(self) -> int:
        """public int org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer.x()"""
        return int._wrap(super(Buffer, self).x())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def height(self) -> int:
        """public int org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer.height()"""
        return int._wrap(super(Buffer, self).height())

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer.serial(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).serial(_long.valueOf(arg0)))

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(arg0))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'._wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).slice())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).slice(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer.send_event()"""
        return bool._wrap(super(Buffer, self).send_event())

    @overload
    def drawable(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer.drawable(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).drawable(_long.valueOf(arg0)))

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0), arg1))

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(_int.valueOf(arg0), arg1))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).clear())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool._wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def count(self) -> int:
        """public int org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer.count()"""
        return int._wrap(super(Buffer, self).count())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int._wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(_int.valueOf(arg0), arg1))

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def count(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer.count(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).count(_int.valueOf(arg0)))

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer.send_event(boolean)"""
        return 'Buffer'._wrap(super(_Buffer, self).send_event(_boolean.valueOf(arg0)))

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(_pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer(long,int)"""
        val = _Buffer(_long.valueOf(arg0), _int.valueOf(arg1))
        self.__wrapper = val

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer.display(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).display(_long.valueOf(arg0)))

    @overload
    def width(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer.width(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).width(_int.valueOf(arg0)))

    @overload
    def y(self) -> int:
        """public int org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer.y()"""
        return int._wrap(super(Buffer, self).y())

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(arg0))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer(java.nio.ByteBuffer)"""
        val = _Buffer(arg0)
        self.__wrapper = val 
 
 
# CLASS: org.lwjgl.system.linux.XReparentEvent
from pyquantum_helper import import_once as _import_once
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _Object
_Object = _Object
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
from builtins import type
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import org.lwjgl.system.linux.XReparentEvent as _XReparentEvent_Buffer
_Buffer = _XReparentEvent_Buffer.Buffer
import java.lang.String as _String
_String = _String
import org.lwjgl.system.linux.XReparentEvent as _XReparentEvent
_XReparentEvent = _XReparentEvent
import java.lang.Boolean as _boolean
import java.lang.Integer as _int
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class XReparentEvent():
    """org.lwjgl.system.linux.XReparentEvent"""
 
    @staticmethod
    def _wrap(java_value: _XReparentEvent) -> 'XReparentEvent':
        return XReparentEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _XReparentEvent):
        """
        Dynamic initializer for XReparentEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_XReparentEvent__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_XReparentEvent__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def nevent(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XReparentEvent.nevent(long)"""
        return int._wrap(_XReparentEvent.nevent(_long.valueOf(arg0)))

    @overload
    def display(self, arg0: int) -> 'XReparentEvent':
        """public org.lwjgl.system.linux.XReparentEvent org.lwjgl.system.linux.XReparentEvent.display(long)"""
        return 'XReparentEvent'._wrap(super(_XReparentEvent, self).display(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XReparentEvent.ntype(long,int)"""
        _XReparentEvent.ntype(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def set(self, arg0: 'XReparentEvent') -> 'XReparentEvent':
        """public org.lwjgl.system.linux.XReparentEvent org.lwjgl.system.linux.XReparentEvent.set(org.lwjgl.system.linux.XReparentEvent)"""
        return 'XReparentEvent'._wrap(super(_XReparentEvent, self).set(arg0))

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XReparentEvent$Buffer org.lwjgl.system.linux.XReparentEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XReparentEvent.callocStack(_int.valueOf(arg0), arg1))

    @overload
    def parent(self, arg0: int) -> 'XReparentEvent':
        """public org.lwjgl.system.linux.XReparentEvent org.lwjgl.system.linux.XReparentEvent.parent(long)"""
        return 'XReparentEvent'._wrap(super(_XReparentEvent, self).parent(_long.valueOf(arg0)))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def ny(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XReparentEvent.ny(long)"""
        return int._wrap(_XReparentEvent.ny(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nx(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XReparentEvent.nx(long,int)"""
        _XReparentEvent.nx(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def noverride_redirect(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XReparentEvent.noverride_redirect(long,int)"""
        _XReparentEvent.noverride_redirect(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def override_redirect(self, arg0: int) -> 'XReparentEvent':
        """public org.lwjgl.system.linux.XReparentEvent org.lwjgl.system.linux.XReparentEvent.override_redirect(int)"""
        return 'XReparentEvent'._wrap(super(_XReparentEvent, self).override_redirect(_int.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XReparentEvent':
        """public static org.lwjgl.system.linux.XReparentEvent org.lwjgl.system.linux.XReparentEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XReparentEvent._wrap(_XReparentEvent.callocStack(arg0))

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XReparentEvent$Buffer org.lwjgl.system.linux.XReparentEvent.mallocStack(int)"""
        return Buffer._wrap(_XReparentEvent.mallocStack(_int.valueOf(arg0)))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @staticmethod
    @overload
    def ny(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XReparentEvent.ny(long,int)"""
        _XReparentEvent.ny(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def type(self, arg0: int) -> 'XReparentEvent':
        """public org.lwjgl.system.linux.XReparentEvent org.lwjgl.system.linux.XReparentEvent.type(int)"""
        return 'XReparentEvent'._wrap(super(_XReparentEvent, self).type(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XReparentEvent':
        """public static org.lwjgl.system.linux.XReparentEvent org.lwjgl.system.linux.XReparentEvent.createSafe(long)"""
        return XReparentEvent._wrap(_XReparentEvent.createSafe(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nparent(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XReparentEvent.nparent(long,long)"""
        _XReparentEvent.nparent(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def noverride_redirect(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XReparentEvent.noverride_redirect(long)"""
        return int._wrap(_XReparentEvent.noverride_redirect(_long.valueOf(arg0)))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XReparentEvent(java.nio.ByteBuffer)"""
        val = _XReparentEvent(arg0)
        self.__wrapper = val

    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XReparentEvent.nsend_event(long)"""
        return int._wrap(_XReparentEvent.nsend_event(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XReparentEvent.ntype(long)"""
        return int._wrap(_XReparentEvent.ntype(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack() -> 'XReparentEvent':
        """public static org.lwjgl.system.linux.XReparentEvent org.lwjgl.system.linux.XReparentEvent.mallocStack()"""
        return XReparentEvent._wrap(_XReparentEvent.mallocStack())

    @overload
    def y(self) -> int:
        """public int org.lwjgl.system.linux.XReparentEvent.y()"""
        return int._wrap(super(XReparentEvent, self).y())

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XReparentEvent.nserial(long,long)"""
        _XReparentEvent.nserial(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XReparentEvent':
        """public static org.lwjgl.system.linux.XReparentEvent org.lwjgl.system.linux.XReparentEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XReparentEvent._wrap(_XReparentEvent.malloc(arg0))

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XReparentEvent$Buffer org.lwjgl.system.linux.XReparentEvent.calloc(int)"""
        return Buffer._wrap(_XReparentEvent.calloc(_int.valueOf(arg0)))

    @overload
    def y(self, arg0: int) -> 'XReparentEvent':
        """public org.lwjgl.system.linux.XReparentEvent org.lwjgl.system.linux.XReparentEvent.y(int)"""
        return 'XReparentEvent'._wrap(super(_XReparentEvent, self).y(_int.valueOf(arg0)))

    @overload
    def x(self, arg0: int) -> 'XReparentEvent':
        """public org.lwjgl.system.linux.XReparentEvent org.lwjgl.system.linux.XReparentEvent.x(int)"""
        return 'XReparentEvent'._wrap(super(_XReparentEvent, self).x(_int.valueOf(arg0)))

    @overload
    def override_redirect(self) -> int:
        """public int org.lwjgl.system.linux.XReparentEvent.override_redirect()"""
        return int._wrap(super(XReparentEvent, self).override_redirect())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XReparentEvent$Buffer org.lwjgl.system.linux.XReparentEvent.create(int)"""
        return Buffer._wrap(_XReparentEvent.create(_int.valueOf(arg0)))

    @overload
    def window(self, arg0: int) -> 'XReparentEvent':
        """public org.lwjgl.system.linux.XReparentEvent org.lwjgl.system.linux.XReparentEvent.window(long)"""
        return 'XReparentEvent'._wrap(super(_XReparentEvent, self).window(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XReparentEvent$Buffer org.lwjgl.system.linux.XReparentEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XReparentEvent.calloc(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def nx(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XReparentEvent.nx(long)"""
        return int._wrap(_XReparentEvent.nx(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        _Struct.validate(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), arg3)

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @overload
    def serial(self, arg0: int) -> 'XReparentEvent':
        """public org.lwjgl.system.linux.XReparentEvent org.lwjgl.system.linux.XReparentEvent.serial(long)"""
        return 'XReparentEvent'._wrap(super(_XReparentEvent, self).serial(_long.valueOf(arg0)))

    @overload
    def x(self) -> int:
        """public int org.lwjgl.system.linux.XReparentEvent.x()"""
        return int._wrap(super(XReparentEvent, self).x())

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XReparentEvent.type()"""
        return int._wrap(super(XReparentEvent, self).type())

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XReparentEvent$Buffer org.lwjgl.system.linux.XReparentEvent.create(long,int)"""
        return Buffer._wrap(_XReparentEvent.create(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XReparentEvent$Buffer org.lwjgl.system.linux.XReparentEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XReparentEvent.malloc(_int.valueOf(arg0), arg1))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def malloc() -> 'XReparentEvent':
        """public static org.lwjgl.system.linux.XReparentEvent org.lwjgl.system.linux.XReparentEvent.malloc()"""
        return XReparentEvent._wrap(_XReparentEvent.malloc())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).address())

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XReparentEvent.ndisplay(long)"""
        return int._wrap(_XReparentEvent.ndisplay(_long.valueOf(arg0)))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XReparentEvent.send_event()"""
        return bool._wrap(super(XReparentEvent, self).send_event())

    @staticmethod
    @overload
    def create(arg0: int) -> 'XReparentEvent':
        """public static org.lwjgl.system.linux.XReparentEvent org.lwjgl.system.linux.XReparentEvent.create(long)"""
        return XReparentEvent._wrap(_XReparentEvent.create(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc() -> 'XReparentEvent':
        """public static org.lwjgl.system.linux.XReparentEvent org.lwjgl.system.linux.XReparentEvent.calloc()"""
        return XReparentEvent._wrap(_XReparentEvent.calloc())

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XReparentEvent.nserial(long)"""
        return int._wrap(_XReparentEvent.nserial(_long.valueOf(arg0)))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @staticmethod
    @overload
    def nwindow(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XReparentEvent.nwindow(long,long)"""
        _XReparentEvent.nwindow(_long.valueOf(arg0), _long.valueOf(arg1))

    @overload
    def parent(self) -> int:
        """public long org.lwjgl.system.linux.XReparentEvent.parent()"""
        return int._wrap(super(XReparentEvent, self).parent())

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XReparentEvent$Buffer org.lwjgl.system.linux.XReparentEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XReparentEvent.mallocStack(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def nparent(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XReparentEvent.nparent(long)"""
        return int._wrap(_XReparentEvent.nparent(_long.valueOf(arg0)))

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XReparentEvent.window()"""
        return int._wrap(super(XReparentEvent, self).window())

    @staticmethod
    @overload
    def nevent(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XReparentEvent.nevent(long,long)"""
        _XReparentEvent.nevent(_long.valueOf(arg0), _long.valueOf(arg1))

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XReparentEvent.display()"""
        return int._wrap(super(XReparentEvent, self).display())

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XReparentEvent.ndisplay(long,long)"""
        _XReparentEvent.ndisplay(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XReparentEvent':
        """public static org.lwjgl.system.linux.XReparentEvent org.lwjgl.system.linux.XReparentEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XReparentEvent._wrap(_XReparentEvent.calloc(arg0))

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: int) -> 'XReparentEvent':
        """public org.lwjgl.system.linux.XReparentEvent org.lwjgl.system.linux.XReparentEvent.set(int,long,boolean,long,long,long,long,int,int,int)"""
        return 'XReparentEvent'._wrap(super(_XReparentEvent, self).set(_int.valueOf(arg0), _long.valueOf(arg1), _boolean.valueOf(arg2), _long.valueOf(arg3), _long.valueOf(arg4), _long.valueOf(arg5), _long.valueOf(arg6), _int.valueOf(arg7), _int.valueOf(arg8), _int.valueOf(arg9)))

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XReparentEvent':
        """public static org.lwjgl.system.linux.XReparentEvent org.lwjgl.system.linux.XReparentEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XReparentEvent._wrap(_XReparentEvent.mallocStack(arg0))

    @overload
    def send_event(self, arg0: bool) -> 'XReparentEvent':
        """public org.lwjgl.system.linux.XReparentEvent org.lwjgl.system.linux.XReparentEvent.send_event(boolean)"""
        return 'XReparentEvent'._wrap(super(_XReparentEvent, self).send_event(_boolean.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XReparentEvent.sizeof()"""
        return int._wrap(super(XReparentEvent, self).sizeof())

    @overload
    def event(self) -> int:
        """public long org.lwjgl.system.linux.XReparentEvent.event()"""
        return int._wrap(super(XReparentEvent, self).event())

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XReparentEvent$Buffer org.lwjgl.system.linux.XReparentEvent.malloc(int)"""
        return Buffer._wrap(_XReparentEvent.malloc(_int.valueOf(arg0)))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XReparentEvent.nsend_event(long,int)"""
        _XReparentEvent.nsend_event(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XReparentEvent$Buffer org.lwjgl.system.linux.XReparentEvent.createSafe(long,int)"""
        return Buffer._wrap(_XReparentEvent.createSafe(_long.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def event(self, arg0: int) -> 'XReparentEvent':
        """public org.lwjgl.system.linux.XReparentEvent org.lwjgl.system.linux.XReparentEvent.event(long)"""
        return 'XReparentEvent'._wrap(super(_XReparentEvent, self).event(_long.valueOf(arg0)))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XReparentEvent.serial()"""
        return int._wrap(super(XReparentEvent, self).serial())

    @staticmethod
    @overload
    def nwindow(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XReparentEvent.nwindow(long)"""
        return int._wrap(_XReparentEvent.nwindow(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XReparentEvent$Buffer org.lwjgl.system.linux.XReparentEvent.callocStack(int)"""
        return Buffer._wrap(_XReparentEvent.callocStack(_int.valueOf(arg0)))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XReparentEvent.validate(long)"""
        _XReparentEvent.validate(_long.valueOf(arg0))

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool._wrap(super(_pyglsystem.Struct, self).isNull(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack() -> 'XReparentEvent':
        """public static org.lwjgl.system.linux.XReparentEvent org.lwjgl.system.linux.XReparentEvent.callocStack()"""
        return XReparentEvent._wrap(_XReparentEvent.callocStack())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str._wrap(super(pyglsystem.Pointer$Default, self).toString())

    @staticmethod
    @overload
    def create() -> 'XReparentEvent':
        """public static org.lwjgl.system.linux.XReparentEvent org.lwjgl.system.linux.XReparentEvent.create()"""
        return XReparentEvent._wrap(_XReparentEvent.create()) 
 
 
# CLASS: org.lwjgl.system.linux.XErrorEvent
from pyquantum_helper import import_once as _import_once
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _Object
_Object = _Object
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
from builtins import type
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import org.lwjgl.system.linux.XErrorEvent as _XErrorEvent
_XErrorEvent = _XErrorEvent
import org.lwjgl.system.linux.XErrorEvent as _XErrorEvent_Buffer
_Buffer = _XErrorEvent_Buffer.Buffer
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.lang.Integer as _int
import java.lang.Byte as _byte
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class XErrorEvent():
    """org.lwjgl.system.linux.XErrorEvent"""
 
    @staticmethod
    def _wrap(java_value: _XErrorEvent) -> 'XErrorEvent':
        return XErrorEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _XErrorEvent):
        """
        Dynamic initializer for XErrorEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_XErrorEvent__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_XErrorEvent__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def set(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int) -> 'XErrorEvent':
        """public org.lwjgl.system.linux.XErrorEvent org.lwjgl.system.linux.XErrorEvent.set(int,long,long,long,byte,byte,byte)"""
        return 'XErrorEvent'._wrap(super(_XErrorEvent, self).set(_int.valueOf(arg0), _long.valueOf(arg1), _long.valueOf(arg2), _long.valueOf(arg3), _byte.valueOf(arg4), _byte.valueOf(arg5), _byte.valueOf(arg6)))

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XErrorEvent$Buffer org.lwjgl.system.linux.XErrorEvent.malloc(int)"""
        return Buffer._wrap(_XErrorEvent.malloc(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XErrorEvent$Buffer org.lwjgl.system.linux.XErrorEvent.mallocStack(int)"""
        return Buffer._wrap(_XErrorEvent.mallocStack(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XErrorEvent.nserial(long,long)"""
        _XErrorEvent.nserial(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XErrorEvent$Buffer org.lwjgl.system.linux.XErrorEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XErrorEvent.mallocStack(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XErrorEvent':
        """public static org.lwjgl.system.linux.XErrorEvent org.lwjgl.system.linux.XErrorEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XErrorEvent._wrap(_XErrorEvent.mallocStack(arg0))

    @overload
    def error_code(self, arg0: int) -> 'XErrorEvent':
        """public org.lwjgl.system.linux.XErrorEvent org.lwjgl.system.linux.XErrorEvent.error_code(byte)"""
        return 'XErrorEvent'._wrap(super(_XErrorEvent, self).error_code(_byte.valueOf(arg0)))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def calloc() -> 'XErrorEvent':
        """public static org.lwjgl.system.linux.XErrorEvent org.lwjgl.system.linux.XErrorEvent.calloc()"""
        return XErrorEvent._wrap(_XErrorEvent.calloc())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @staticmethod
    @overload
    def nminor_code(arg0: int) -> int:
        """public static byte org.lwjgl.system.linux.XErrorEvent.nminor_code(long)"""
        return int._wrap(_XErrorEvent.nminor_code(_long.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XErrorEvent.validate(long)"""
        _XErrorEvent.validate(_long.valueOf(arg0))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XErrorEvent.display()"""
        return int._wrap(super(XErrorEvent, self).display())

    @overload
    def serial(self, arg0: int) -> 'XErrorEvent':
        """public org.lwjgl.system.linux.XErrorEvent org.lwjgl.system.linux.XErrorEvent.serial(long)"""
        return 'XErrorEvent'._wrap(super(_XErrorEvent, self).serial(_long.valueOf(arg0)))

    @overload
    def display(self, arg0: int) -> 'XErrorEvent':
        """public org.lwjgl.system.linux.XErrorEvent org.lwjgl.system.linux.XErrorEvent.display(long)"""
        return 'XErrorEvent'._wrap(super(_XErrorEvent, self).display(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XErrorEvent.ntype(long)"""
        return int._wrap(_XErrorEvent.ntype(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nminor_code(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XErrorEvent.nminor_code(long,byte)"""
        _XErrorEvent.nminor_code(_long.valueOf(arg0), _byte.valueOf(arg1))

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XErrorEvent.ntype(long,int)"""
        _XErrorEvent.ntype(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XErrorEvent$Buffer org.lwjgl.system.linux.XErrorEvent.create(int)"""
        return Buffer._wrap(_XErrorEvent.create(_int.valueOf(arg0)))

    @overload
    def minor_code(self) -> int:
        """public byte org.lwjgl.system.linux.XErrorEvent.minor_code()"""
        return int._wrap(super(XErrorEvent, self).minor_code())

    @staticmethod
    @overload
    def nrequest_code(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XErrorEvent.nrequest_code(long,byte)"""
        _XErrorEvent.nrequest_code(_long.valueOf(arg0), _byte.valueOf(arg1))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        _Struct.validate(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), arg3)

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @staticmethod
    @overload
    def create() -> 'XErrorEvent':
        """public static org.lwjgl.system.linux.XErrorEvent org.lwjgl.system.linux.XErrorEvent.create()"""
        return XErrorEvent._wrap(_XErrorEvent.create())

    @staticmethod
    @overload
    def malloc() -> 'XErrorEvent':
        """public static org.lwjgl.system.linux.XErrorEvent org.lwjgl.system.linux.XErrorEvent.malloc()"""
        return XErrorEvent._wrap(_XErrorEvent.malloc())

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XErrorEvent.serial()"""
        return int._wrap(super(XErrorEvent, self).serial())

    @staticmethod
    @overload
    def nrequest_code(arg0: int) -> int:
        """public static byte org.lwjgl.system.linux.XErrorEvent.nrequest_code(long)"""
        return int._wrap(_XErrorEvent.nrequest_code(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack() -> 'XErrorEvent':
        """public static org.lwjgl.system.linux.XErrorEvent org.lwjgl.system.linux.XErrorEvent.mallocStack()"""
        return XErrorEvent._wrap(_XErrorEvent.mallocStack())

    @overload
    def resourceid(self) -> int:
        """public long org.lwjgl.system.linux.XErrorEvent.resourceid()"""
        return int._wrap(super(XErrorEvent, self).resourceid())

    @overload
    def minor_code(self, arg0: int) -> 'XErrorEvent':
        """public org.lwjgl.system.linux.XErrorEvent org.lwjgl.system.linux.XErrorEvent.minor_code(byte)"""
        return 'XErrorEvent'._wrap(super(_XErrorEvent, self).minor_code(_byte.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def request_code(self) -> int:
        """public byte org.lwjgl.system.linux.XErrorEvent.request_code()"""
        return int._wrap(super(XErrorEvent, self).request_code())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).address())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XErrorEvent(java.nio.ByteBuffer)"""
        val = _XErrorEvent(arg0)
        self.__wrapper = val

    @overload
    def set(self, arg0: 'XErrorEvent') -> 'XErrorEvent':
        """public org.lwjgl.system.linux.XErrorEvent org.lwjgl.system.linux.XErrorEvent.set(org.lwjgl.system.linux.XErrorEvent)"""
        return 'XErrorEvent'._wrap(super(_XErrorEvent, self).set(arg0))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XErrorEvent.type()"""
        return int._wrap(super(XErrorEvent, self).type())

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XErrorEvent$Buffer org.lwjgl.system.linux.XErrorEvent.create(long,int)"""
        return Buffer._wrap(_XErrorEvent.create(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XErrorEvent':
        """public static org.lwjgl.system.linux.XErrorEvent org.lwjgl.system.linux.XErrorEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XErrorEvent._wrap(_XErrorEvent.callocStack(arg0))

    @staticmethod
    @overload
    def nresourceid(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XErrorEvent.nresourceid(long)"""
        return int._wrap(_XErrorEvent.nresourceid(_long.valueOf(arg0)))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @staticmethod
    @overload
    def callocStack() -> 'XErrorEvent':
        """public static org.lwjgl.system.linux.XErrorEvent org.lwjgl.system.linux.XErrorEvent.callocStack()"""
        return XErrorEvent._wrap(_XErrorEvent.callocStack())

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XErrorEvent$Buffer org.lwjgl.system.linux.XErrorEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XErrorEvent.callocStack(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XErrorEvent.ndisplay(long,long)"""
        _XErrorEvent.ndisplay(_long.valueOf(arg0), _long.valueOf(arg1))

    @overload
    def request_code(self, arg0: int) -> 'XErrorEvent':
        """public org.lwjgl.system.linux.XErrorEvent org.lwjgl.system.linux.XErrorEvent.request_code(byte)"""
        return 'XErrorEvent'._wrap(super(_XErrorEvent, self).request_code(_byte.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XErrorEvent$Buffer org.lwjgl.system.linux.XErrorEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XErrorEvent.malloc(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XErrorEvent$Buffer org.lwjgl.system.linux.XErrorEvent.callocStack(int)"""
        return Buffer._wrap(_XErrorEvent.callocStack(_int.valueOf(arg0)))

    @overload
    def error_code(self) -> int:
        """public byte org.lwjgl.system.linux.XErrorEvent.error_code()"""
        return int._wrap(super(XErrorEvent, self).error_code())

    @staticmethod
    @overload
    def create(arg0: int) -> 'XErrorEvent':
        """public static org.lwjgl.system.linux.XErrorEvent org.lwjgl.system.linux.XErrorEvent.create(long)"""
        return XErrorEvent._wrap(_XErrorEvent.create(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XErrorEvent$Buffer org.lwjgl.system.linux.XErrorEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XErrorEvent.calloc(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XErrorEvent$Buffer org.lwjgl.system.linux.XErrorEvent.calloc(int)"""
        return Buffer._wrap(_XErrorEvent.calloc(_int.valueOf(arg0)))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XErrorEvent.sizeof()"""
        return int._wrap(super(XErrorEvent, self).sizeof())

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XErrorEvent.ndisplay(long)"""
        return int._wrap(_XErrorEvent.ndisplay(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nerror_code(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XErrorEvent.nerror_code(long,byte)"""
        _XErrorEvent.nerror_code(_long.valueOf(arg0), _byte.valueOf(arg1))

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XErrorEvent':
        """public static org.lwjgl.system.linux.XErrorEvent org.lwjgl.system.linux.XErrorEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XErrorEvent._wrap(_XErrorEvent.malloc(arg0))

    @overload
    def resourceid(self, arg0: int) -> 'XErrorEvent':
        """public org.lwjgl.system.linux.XErrorEvent org.lwjgl.system.linux.XErrorEvent.resourceid(long)"""
        return 'XErrorEvent'._wrap(super(_XErrorEvent, self).resourceid(_long.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def nerror_code(arg0: int) -> int:
        """public static byte org.lwjgl.system.linux.XErrorEvent.nerror_code(long)"""
        return int._wrap(_XErrorEvent.nerror_code(_long.valueOf(arg0)))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XErrorEvent':
        """public static org.lwjgl.system.linux.XErrorEvent org.lwjgl.system.linux.XErrorEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XErrorEvent._wrap(_XErrorEvent.calloc(arg0))

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XErrorEvent.nserial(long)"""
        return int._wrap(_XErrorEvent.nserial(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nresourceid(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XErrorEvent.nresourceid(long,long)"""
        _XErrorEvent.nresourceid(_long.valueOf(arg0), _long.valueOf(arg1))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def type(self, arg0: int) -> 'XErrorEvent':
        """public org.lwjgl.system.linux.XErrorEvent org.lwjgl.system.linux.XErrorEvent.type(int)"""
        return 'XErrorEvent'._wrap(super(_XErrorEvent, self).type(_int.valueOf(arg0)))

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool._wrap(super(_pyglsystem.Struct, self).isNull(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XErrorEvent$Buffer org.lwjgl.system.linux.XErrorEvent.createSafe(long,int)"""
        return Buffer._wrap(_XErrorEvent.createSafe(_long.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str._wrap(super(pyglsystem.Pointer$Default, self).toString())

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XErrorEvent':
        """public static org.lwjgl.system.linux.XErrorEvent org.lwjgl.system.linux.XErrorEvent.createSafe(long)"""
        return XErrorEvent._wrap(_XErrorEvent.createSafe(_long.valueOf(arg0))) 
 
 
# CLASS: org.lwjgl.system.linux.XGravityEvent
from pyquantum_helper import import_once as _import_once
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _Object
_Object = _Object
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
from builtins import type
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import org.lwjgl.system.linux.XGravityEvent as _XGravityEvent
_XGravityEvent = _XGravityEvent
import java.lang.Boolean as _boolean
import java.lang.Integer as _int
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import org.lwjgl.system.linux.XGravityEvent as _XGravityEvent_Buffer
_Buffer = _XGravityEvent_Buffer.Buffer
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class XGravityEvent():
    """org.lwjgl.system.linux.XGravityEvent"""
 
    @staticmethod
    def _wrap(java_value: _XGravityEvent) -> 'XGravityEvent':
        return XGravityEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _XGravityEvent):
        """
        Dynamic initializer for XGravityEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_XGravityEvent__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_XGravityEvent__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def x(self) -> int:
        """public int org.lwjgl.system.linux.XGravityEvent.x()"""
        return int._wrap(super(XGravityEvent, self).x())

    @staticmethod
    @overload
    def nwindow(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XGravityEvent.nwindow(long)"""
        return int._wrap(_XGravityEvent.nwindow(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def create() -> 'XGravityEvent':
        """public static org.lwjgl.system.linux.XGravityEvent org.lwjgl.system.linux.XGravityEvent.create()"""
        return XGravityEvent._wrap(_XGravityEvent.create())

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XGravityEvent.ntype(long)"""
        return int._wrap(_XGravityEvent.ntype(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGravityEvent.ntype(long,int)"""
        _XGravityEvent.ntype(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def nwindow(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGravityEvent.nwindow(long,long)"""
        _XGravityEvent.nwindow(_long.valueOf(arg0), _long.valueOf(arg1))

    @overload
    def event(self, arg0: int) -> 'XGravityEvent':
        """public org.lwjgl.system.linux.XGravityEvent org.lwjgl.system.linux.XGravityEvent.event(long)"""
        return 'XGravityEvent'._wrap(super(_XGravityEvent, self).event(_long.valueOf(arg0)))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def nx(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XGravityEvent.nx(long)"""
        return int._wrap(_XGravityEvent.nx(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def ny(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGravityEvent.ny(long,int)"""
        _XGravityEvent.ny(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XGravityEvent$Buffer org.lwjgl.system.linux.XGravityEvent.create(int)"""
        return Buffer._wrap(_XGravityEvent.create(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XGravityEvent':
        """public static org.lwjgl.system.linux.XGravityEvent org.lwjgl.system.linux.XGravityEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XGravityEvent._wrap(_XGravityEvent.mallocStack(arg0))

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGravityEvent.ndisplay(long,long)"""
        _XGravityEvent.ndisplay(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGravityEvent.nsend_event(long,int)"""
        _XGravityEvent.nsend_event(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def window(self, arg0: int) -> 'XGravityEvent':
        """public org.lwjgl.system.linux.XGravityEvent org.lwjgl.system.linux.XGravityEvent.window(long)"""
        return 'XGravityEvent'._wrap(super(_XGravityEvent, self).window(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XGravityEvent':
        """public static org.lwjgl.system.linux.XGravityEvent org.lwjgl.system.linux.XGravityEvent.createSafe(long)"""
        return XGravityEvent._wrap(_XGravityEvent.createSafe(_long.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XGravityEvent.type()"""
        return int._wrap(super(XGravityEvent, self).type())

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XGravityEvent':
        """public static org.lwjgl.system.linux.XGravityEvent org.lwjgl.system.linux.XGravityEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XGravityEvent._wrap(_XGravityEvent.callocStack(arg0))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XGravityEvent.send_event()"""
        return bool._wrap(super(XGravityEvent, self).send_event())

    @staticmethod
    @overload
    def ny(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XGravityEvent.ny(long)"""
        return int._wrap(_XGravityEvent.ny(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XGravityEvent$Buffer org.lwjgl.system.linux.XGravityEvent.callocStack(int)"""
        return Buffer._wrap(_XGravityEvent.callocStack(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XGravityEvent$Buffer org.lwjgl.system.linux.XGravityEvent.mallocStack(int)"""
        return Buffer._wrap(_XGravityEvent.mallocStack(_int.valueOf(arg0)))

    @overload
    def type(self, arg0: int) -> 'XGravityEvent':
        """public org.lwjgl.system.linux.XGravityEvent org.lwjgl.system.linux.XGravityEvent.type(int)"""
        return 'XGravityEvent'._wrap(super(_XGravityEvent, self).type(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGravityEvent.nserial(long,long)"""
        _XGravityEvent.nserial(_long.valueOf(arg0), _long.valueOf(arg1))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        _Struct.validate(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), arg3)

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @staticmethod
    @overload
    def create(arg0: int) -> 'XGravityEvent':
        """public static org.lwjgl.system.linux.XGravityEvent org.lwjgl.system.linux.XGravityEvent.create(long)"""
        return XGravityEvent._wrap(_XGravityEvent.create(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XGravityEvent$Buffer org.lwjgl.system.linux.XGravityEvent.createSafe(long,int)"""
        return Buffer._wrap(_XGravityEvent.createSafe(_long.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def set(self, arg0: 'XGravityEvent') -> 'XGravityEvent':
        """public org.lwjgl.system.linux.XGravityEvent org.lwjgl.system.linux.XGravityEvent.set(org.lwjgl.system.linux.XGravityEvent)"""
        return 'XGravityEvent'._wrap(super(_XGravityEvent, self).set(arg0))

    @overload
    def y(self) -> int:
        """public int org.lwjgl.system.linux.XGravityEvent.y()"""
        return int._wrap(super(XGravityEvent, self).y())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).address())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XGravityEvent(java.nio.ByteBuffer)"""
        val = _XGravityEvent(arg0)
        self.__wrapper = val

    @overload
    def x(self, arg0: int) -> 'XGravityEvent':
        """public org.lwjgl.system.linux.XGravityEvent org.lwjgl.system.linux.XGravityEvent.x(int)"""
        return 'XGravityEvent'._wrap(super(_XGravityEvent, self).x(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack() -> 'XGravityEvent':
        """public static org.lwjgl.system.linux.XGravityEvent org.lwjgl.system.linux.XGravityEvent.mallocStack()"""
        return XGravityEvent._wrap(_XGravityEvent.mallocStack())

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XGravityEvent.ndisplay(long)"""
        return int._wrap(_XGravityEvent.ndisplay(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XGravityEvent$Buffer org.lwjgl.system.linux.XGravityEvent.calloc(int)"""
        return Buffer._wrap(_XGravityEvent.calloc(_int.valueOf(arg0)))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XGravityEvent$Buffer org.lwjgl.system.linux.XGravityEvent.malloc(int)"""
        return Buffer._wrap(_XGravityEvent.malloc(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XGravityEvent.validate(long)"""
        _XGravityEvent.validate(_long.valueOf(arg0))

    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XGravityEvent.nsend_event(long)"""
        return int._wrap(_XGravityEvent.nsend_event(_long.valueOf(arg0)))

    @overload
    def event(self) -> int:
        """public long org.lwjgl.system.linux.XGravityEvent.event()"""
        return int._wrap(super(XGravityEvent, self).event())

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int) -> 'XGravityEvent':
        """public org.lwjgl.system.linux.XGravityEvent org.lwjgl.system.linux.XGravityEvent.set(int,long,boolean,long,long,long,int,int)"""
        return 'XGravityEvent'._wrap(super(_XGravityEvent, self).set(_int.valueOf(arg0), _long.valueOf(arg1), _boolean.valueOf(arg2), _long.valueOf(arg3), _long.valueOf(arg4), _long.valueOf(arg5), _int.valueOf(arg6), _int.valueOf(arg7)))

    @overload
    def serial(self, arg0: int) -> 'XGravityEvent':
        """public org.lwjgl.system.linux.XGravityEvent org.lwjgl.system.linux.XGravityEvent.serial(long)"""
        return 'XGravityEvent'._wrap(super(_XGravityEvent, self).serial(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nevent(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGravityEvent.nevent(long,long)"""
        _XGravityEvent.nevent(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def nx(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGravityEvent.nx(long,int)"""
        _XGravityEvent.nx(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XGravityEvent.display()"""
        return int._wrap(super(XGravityEvent, self).display())

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XGravityEvent$Buffer org.lwjgl.system.linux.XGravityEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XGravityEvent.callocStack(_int.valueOf(arg0), arg1))

    @overload
    def display(self, arg0: int) -> 'XGravityEvent':
        """public org.lwjgl.system.linux.XGravityEvent org.lwjgl.system.linux.XGravityEvent.display(long)"""
        return 'XGravityEvent'._wrap(super(_XGravityEvent, self).display(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XGravityEvent':
        """public static org.lwjgl.system.linux.XGravityEvent org.lwjgl.system.linux.XGravityEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XGravityEvent._wrap(_XGravityEvent.calloc(arg0))

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XGravityEvent$Buffer org.lwjgl.system.linux.XGravityEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XGravityEvent.calloc(_int.valueOf(arg0), arg1))

    @overload
    def send_event(self, arg0: bool) -> 'XGravityEvent':
        """public org.lwjgl.system.linux.XGravityEvent org.lwjgl.system.linux.XGravityEvent.send_event(boolean)"""
        return 'XGravityEvent'._wrap(super(_XGravityEvent, self).send_event(_boolean.valueOf(arg0)))

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XGravityEvent.nserial(long)"""
        return int._wrap(_XGravityEvent.nserial(_long.valueOf(arg0)))

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XGravityEvent.window()"""
        return int._wrap(super(XGravityEvent, self).window())

    @staticmethod
    @overload
    def nevent(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XGravityEvent.nevent(long)"""
        return int._wrap(_XGravityEvent.nevent(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XGravityEvent$Buffer org.lwjgl.system.linux.XGravityEvent.create(long,int)"""
        return Buffer._wrap(_XGravityEvent.create(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def calloc() -> 'XGravityEvent':
        """public static org.lwjgl.system.linux.XGravityEvent org.lwjgl.system.linux.XGravityEvent.calloc()"""
        return XGravityEvent._wrap(_XGravityEvent.calloc())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def malloc() -> 'XGravityEvent':
        """public static org.lwjgl.system.linux.XGravityEvent org.lwjgl.system.linux.XGravityEvent.malloc()"""
        return XGravityEvent._wrap(_XGravityEvent.malloc())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XGravityEvent.serial()"""
        return int._wrap(super(XGravityEvent, self).serial())

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XGravityEvent$Buffer org.lwjgl.system.linux.XGravityEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XGravityEvent.mallocStack(_int.valueOf(arg0), arg1))

    @overload
    def y(self, arg0: int) -> 'XGravityEvent':
        """public org.lwjgl.system.linux.XGravityEvent org.lwjgl.system.linux.XGravityEvent.y(int)"""
        return 'XGravityEvent'._wrap(super(_XGravityEvent, self).y(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XGravityEvent$Buffer org.lwjgl.system.linux.XGravityEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XGravityEvent.malloc(_int.valueOf(arg0), arg1))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XGravityEvent.sizeof()"""
        return int._wrap(super(XGravityEvent, self).sizeof())

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool._wrap(super(_pyglsystem.Struct, self).isNull(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XGravityEvent':
        """public static org.lwjgl.system.linux.XGravityEvent org.lwjgl.system.linux.XGravityEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XGravityEvent._wrap(_XGravityEvent.malloc(arg0))

    @staticmethod
    @overload
    def callocStack() -> 'XGravityEvent':
        """public static org.lwjgl.system.linux.XGravityEvent org.lwjgl.system.linux.XGravityEvent.callocStack()"""
        return XGravityEvent._wrap(_XGravityEvent.callocStack())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str._wrap(super(pyglsystem.Pointer$Default, self).toString()) 
 
 
# CLASS: org.lwjgl.system.linux.XCirculateRequestEvent
from pyquantum_helper import import_once as _import_once
import org.lwjgl.system.linux.XCirculateRequestEvent as _XCirculateRequestEvent_Buffer
_Buffer = _XCirculateRequestEvent_Buffer.Buffer
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _Object
_Object = _Object
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
from builtins import type
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.lang.Boolean as _boolean
import java.lang.Integer as _int
import org.lwjgl.system.linux.XCirculateRequestEvent as _XCirculateRequestEvent
_XCirculateRequestEvent = _XCirculateRequestEvent
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class XCirculateRequestEvent():
    """org.lwjgl.system.linux.XCirculateRequestEvent"""
 
    @staticmethod
    def _wrap(java_value: _XCirculateRequestEvent) -> 'XCirculateRequestEvent':
        return XCirculateRequestEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _XCirculateRequestEvent):
        """
        Dynamic initializer for XCirculateRequestEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_XCirculateRequestEvent__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_XCirculateRequestEvent__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCirculateRequestEvent.nserial(long,long)"""
        _XCirculateRequestEvent.nserial(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def malloc() -> 'XCirculateRequestEvent':
        """public static org.lwjgl.system.linux.XCirculateRequestEvent org.lwjgl.system.linux.XCirculateRequestEvent.malloc()"""
        return XCirculateRequestEvent._wrap(_XCirculateRequestEvent.malloc())

    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCirculateRequestEvent.nsend_event(long,int)"""
        _XCirculateRequestEvent.nsend_event(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def nparent(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XCirculateRequestEvent.nparent(long)"""
        return int._wrap(_XCirculateRequestEvent.nparent(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XCirculateRequestEvent':
        """public static org.lwjgl.system.linux.XCirculateRequestEvent org.lwjgl.system.linux.XCirculateRequestEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XCirculateRequestEvent._wrap(_XCirculateRequestEvent.calloc(arg0))

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XCirculateRequestEvent$Buffer org.lwjgl.system.linux.XCirculateRequestEvent.callocStack(int)"""
        return Buffer._wrap(_XCirculateRequestEvent.callocStack(_int.valueOf(arg0)))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XCirculateRequestEvent.ntype(long)"""
        return int._wrap(_XCirculateRequestEvent.ntype(_long.valueOf(arg0)))

    @overload
    def send_event(self, arg0: bool) -> 'XCirculateRequestEvent':
        """public org.lwjgl.system.linux.XCirculateRequestEvent org.lwjgl.system.linux.XCirculateRequestEvent.send_event(boolean)"""
        return 'XCirculateRequestEvent'._wrap(super(_XCirculateRequestEvent, self).send_event(_boolean.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @staticmethod
    @overload
    def calloc() -> 'XCirculateRequestEvent':
        """public static org.lwjgl.system.linux.XCirculateRequestEvent org.lwjgl.system.linux.XCirculateRequestEvent.calloc()"""
        return XCirculateRequestEvent._wrap(_XCirculateRequestEvent.calloc())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XCirculateRequestEvent$Buffer org.lwjgl.system.linux.XCirculateRequestEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XCirculateRequestEvent.mallocStack(_int.valueOf(arg0), arg1))

    @overload
    def parent(self, arg0: int) -> 'XCirculateRequestEvent':
        """public org.lwjgl.system.linux.XCirculateRequestEvent org.lwjgl.system.linux.XCirculateRequestEvent.parent(long)"""
        return 'XCirculateRequestEvent'._wrap(super(_XCirculateRequestEvent, self).parent(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XCirculateRequestEvent$Buffer org.lwjgl.system.linux.XCirculateRequestEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XCirculateRequestEvent.callocStack(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XCirculateRequestEvent$Buffer org.lwjgl.system.linux.XCirculateRequestEvent.calloc(int)"""
        return Buffer._wrap(_XCirculateRequestEvent.calloc(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XCirculateRequestEvent$Buffer org.lwjgl.system.linux.XCirculateRequestEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XCirculateRequestEvent.malloc(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XCirculateRequestEvent$Buffer org.lwjgl.system.linux.XCirculateRequestEvent.createSafe(long,int)"""
        return Buffer._wrap(_XCirculateRequestEvent.createSafe(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def nplace(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XCirculateRequestEvent.nplace(long)"""
        return int._wrap(_XCirculateRequestEvent.nplace(_long.valueOf(arg0)))

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XCirculateRequestEvent.display()"""
        return int._wrap(super(XCirculateRequestEvent, self).display())

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCirculateRequestEvent.ndisplay(long,long)"""
        _XCirculateRequestEvent.ndisplay(_long.valueOf(arg0), _long.valueOf(arg1))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XCirculateRequestEvent.sizeof()"""
        return int._wrap(super(XCirculateRequestEvent, self).sizeof())

    @overload
    def place(self, arg0: int) -> 'XCirculateRequestEvent':
        """public org.lwjgl.system.linux.XCirculateRequestEvent org.lwjgl.system.linux.XCirculateRequestEvent.place(int)"""
        return 'XCirculateRequestEvent'._wrap(super(_XCirculateRequestEvent, self).place(_int.valueOf(arg0)))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @staticmethod
    @overload
    def nwindow(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCirculateRequestEvent.nwindow(long,long)"""
        _XCirculateRequestEvent.nwindow(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        _Struct.validate(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), arg3)

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XCirculateRequestEvent':
        """public static org.lwjgl.system.linux.XCirculateRequestEvent org.lwjgl.system.linux.XCirculateRequestEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XCirculateRequestEvent._wrap(_XCirculateRequestEvent.callocStack(arg0))

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XCirculateRequestEvent$Buffer org.lwjgl.system.linux.XCirculateRequestEvent.malloc(int)"""
        return Buffer._wrap(_XCirculateRequestEvent.malloc(_int.valueOf(arg0)))

    @overload
    def place(self) -> int:
        """public int org.lwjgl.system.linux.XCirculateRequestEvent.place()"""
        return int._wrap(super(XCirculateRequestEvent, self).place())

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XCirculateRequestEvent$Buffer org.lwjgl.system.linux.XCirculateRequestEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XCirculateRequestEvent.calloc(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def create(arg0: int) -> 'XCirculateRequestEvent':
        """public static org.lwjgl.system.linux.XCirculateRequestEvent org.lwjgl.system.linux.XCirculateRequestEvent.create(long)"""
        return XCirculateRequestEvent._wrap(_XCirculateRequestEvent.create(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XCirculateRequestEvent':
        """public static org.lwjgl.system.linux.XCirculateRequestEvent org.lwjgl.system.linux.XCirculateRequestEvent.createSafe(long)"""
        return XCirculateRequestEvent._wrap(_XCirculateRequestEvent.createSafe(_long.valueOf(arg0)))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XCirculateRequestEvent.serial()"""
        return int._wrap(super(XCirculateRequestEvent, self).serial())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def parent(self) -> int:
        """public long org.lwjgl.system.linux.XCirculateRequestEvent.parent()"""
        return int._wrap(super(XCirculateRequestEvent, self).parent())

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XCirculateRequestEvent':
        """public static org.lwjgl.system.linux.XCirculateRequestEvent org.lwjgl.system.linux.XCirculateRequestEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XCirculateRequestEvent._wrap(_XCirculateRequestEvent.mallocStack(arg0))

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XCirculateRequestEvent.nserial(long)"""
        return int._wrap(_XCirculateRequestEvent.nserial(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nwindow(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XCirculateRequestEvent.nwindow(long)"""
        return int._wrap(_XCirculateRequestEvent.nwindow(_long.valueOf(arg0)))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).address())

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XCirculateRequestEvent$Buffer org.lwjgl.system.linux.XCirculateRequestEvent.create(long,int)"""
        return Buffer._wrap(_XCirculateRequestEvent.create(_long.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def serial(self, arg0: int) -> 'XCirculateRequestEvent':
        """public org.lwjgl.system.linux.XCirculateRequestEvent org.lwjgl.system.linux.XCirculateRequestEvent.serial(long)"""
        return 'XCirculateRequestEvent'._wrap(super(_XCirculateRequestEvent, self).serial(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def create() -> 'XCirculateRequestEvent':
        """public static org.lwjgl.system.linux.XCirculateRequestEvent org.lwjgl.system.linux.XCirculateRequestEvent.create()"""
        return XCirculateRequestEvent._wrap(_XCirculateRequestEvent.create())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XCirculateRequestEvent$Buffer org.lwjgl.system.linux.XCirculateRequestEvent.mallocStack(int)"""
        return Buffer._wrap(_XCirculateRequestEvent.mallocStack(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def nparent(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCirculateRequestEvent.nparent(long,long)"""
        _XCirculateRequestEvent.nparent(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XCirculateRequestEvent$Buffer org.lwjgl.system.linux.XCirculateRequestEvent.create(int)"""
        return Buffer._wrap(_XCirculateRequestEvent.create(_int.valueOf(arg0)))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XCirculateRequestEvent(java.nio.ByteBuffer)"""
        val = _XCirculateRequestEvent(arg0)
        self.__wrapper = val

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCirculateRequestEvent.ntype(long,int)"""
        _XCirculateRequestEvent.ntype(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XCirculateRequestEvent.validate(long)"""
        _XCirculateRequestEvent.validate(_long.valueOf(arg0))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XCirculateRequestEvent.type()"""
        return int._wrap(super(XCirculateRequestEvent, self).type())

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XCirculateRequestEvent.ndisplay(long)"""
        return int._wrap(_XCirculateRequestEvent.ndisplay(_long.valueOf(arg0)))

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XCirculateRequestEvent.window()"""
        return int._wrap(super(XCirculateRequestEvent, self).window())

    @staticmethod
    @overload
    def nplace(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCirculateRequestEvent.nplace(long,int)"""
        _XCirculateRequestEvent.nplace(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XCirculateRequestEvent.send_event()"""
        return bool._wrap(super(XCirculateRequestEvent, self).send_event())

    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XCirculateRequestEvent.nsend_event(long)"""
        return int._wrap(_XCirculateRequestEvent.nsend_event(_long.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @overload
    def set(self, arg0: 'XCirculateRequestEvent') -> 'XCirculateRequestEvent':
        """public org.lwjgl.system.linux.XCirculateRequestEvent org.lwjgl.system.linux.XCirculateRequestEvent.set(org.lwjgl.system.linux.XCirculateRequestEvent)"""
        return 'XCirculateRequestEvent'._wrap(super(_XCirculateRequestEvent, self).set(arg0))

    @overload
    def type(self, arg0: int) -> 'XCirculateRequestEvent':
        """public org.lwjgl.system.linux.XCirculateRequestEvent org.lwjgl.system.linux.XCirculateRequestEvent.type(int)"""
        return 'XCirculateRequestEvent'._wrap(super(_XCirculateRequestEvent, self).type(_int.valueOf(arg0)))

    @overload
    def display(self, arg0: int) -> 'XCirculateRequestEvent':
        """public org.lwjgl.system.linux.XCirculateRequestEvent org.lwjgl.system.linux.XCirculateRequestEvent.display(long)"""
        return 'XCirculateRequestEvent'._wrap(super(_XCirculateRequestEvent, self).display(_long.valueOf(arg0)))

    @overload
    def window(self, arg0: int) -> 'XCirculateRequestEvent':
        """public org.lwjgl.system.linux.XCirculateRequestEvent org.lwjgl.system.linux.XCirculateRequestEvent.window(long)"""
        return 'XCirculateRequestEvent'._wrap(super(_XCirculateRequestEvent, self).window(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack() -> 'XCirculateRequestEvent':
        """public static org.lwjgl.system.linux.XCirculateRequestEvent org.lwjgl.system.linux.XCirculateRequestEvent.callocStack()"""
        return XCirculateRequestEvent._wrap(_XCirculateRequestEvent.callocStack())

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @staticmethod
    @overload
    def mallocStack() -> 'XCirculateRequestEvent':
        """public static org.lwjgl.system.linux.XCirculateRequestEvent org.lwjgl.system.linux.XCirculateRequestEvent.mallocStack()"""
        return XCirculateRequestEvent._wrap(_XCirculateRequestEvent.mallocStack())

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool._wrap(super(_pyglsystem.Struct, self).isNull(_int.valueOf(arg0)))

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int, arg5: int, arg6: int) -> 'XCirculateRequestEvent':
        """public org.lwjgl.system.linux.XCirculateRequestEvent org.lwjgl.system.linux.XCirculateRequestEvent.set(int,long,boolean,long,long,long,int)"""
        return 'XCirculateRequestEvent'._wrap(super(_XCirculateRequestEvent, self).set(_int.valueOf(arg0), _long.valueOf(arg1), _boolean.valueOf(arg2), _long.valueOf(arg3), _long.valueOf(arg4), _long.valueOf(arg5), _int.valueOf(arg6)))

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XCirculateRequestEvent':
        """public static org.lwjgl.system.linux.XCirculateRequestEvent org.lwjgl.system.linux.XCirculateRequestEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XCirculateRequestEvent._wrap(_XCirculateRequestEvent.malloc(arg0))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str._wrap(super(pyglsystem.Pointer$Default, self).toString()) 
 
 
# CLASS: org.lwjgl.system.linux.XVisualInfo
from pyquantum_helper import import_once as _import_once
from builtins import str
import org.lwjgl.system.linux.Visual as _Visual
_Visual = _Visual
from pyquantum_helper import override
import java.lang.Object as _Object
_Object = _Object
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
from builtins import type
import org.lwjgl.system.linux.XVisualInfo as _XVisualInfo_Buffer
_Buffer = _XVisualInfo_Buffer.Buffer
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.lang.Integer as _int
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import org.lwjgl.system.linux.XVisualInfo as _XVisualInfo
_XVisualInfo = _XVisualInfo
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class XVisualInfo():
    """org.lwjgl.system.linux.XVisualInfo"""
 
    @staticmethod
    def _wrap(java_value: _XVisualInfo) -> 'XVisualInfo':
        return XVisualInfo(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _XVisualInfo):
        """
        Dynamic initializer for XVisualInfo.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_XVisualInfo__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_XVisualInfo__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XVisualInfo$Buffer org.lwjgl.system.linux.XVisualInfo.callocStack(int)"""
        return Buffer._wrap(_XVisualInfo.callocStack(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack() -> 'XVisualInfo':
        """public static org.lwjgl.system.linux.XVisualInfo org.lwjgl.system.linux.XVisualInfo.mallocStack()"""
        return XVisualInfo._wrap(_XVisualInfo.mallocStack())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def create() -> 'XVisualInfo':
        """public static org.lwjgl.system.linux.XVisualInfo org.lwjgl.system.linux.XVisualInfo.create()"""
        return XVisualInfo._wrap(_XVisualInfo.create())

    @staticmethod
    @overload
    def nblue_mask(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XVisualInfo.nblue_mask(long,long)"""
        _XVisualInfo.nblue_mask(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XVisualInfo$Buffer org.lwjgl.system.linux.XVisualInfo.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XVisualInfo.calloc(_int.valueOf(arg0), arg1))

    @overload
    def red_mask(self) -> int:
        """public long org.lwjgl.system.linux.XVisualInfo.red_mask()"""
        return int._wrap(super(XVisualInfo, self).red_mask())

    @staticmethod
    @overload
    def nvisualid(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XVisualInfo.nvisualid(long)"""
        return int._wrap(_XVisualInfo.nvisualid(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XVisualInfo':
        """public static org.lwjgl.system.linux.XVisualInfo org.lwjgl.system.linux.XVisualInfo.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XVisualInfo._wrap(_XVisualInfo.mallocStack(arg0))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @staticmethod
    @overload
    def ncolormap_size(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XVisualInfo.ncolormap_size(long)"""
        return int._wrap(_XVisualInfo.ncolormap_size(_long.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XVisualInfo$Buffer org.lwjgl.system.linux.XVisualInfo.malloc(int)"""
        return Buffer._wrap(_XVisualInfo.malloc(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def ndepth(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XVisualInfo.ndepth(long,int)"""
        _XVisualInfo.ndepth(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def nvisualid(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XVisualInfo.nvisualid(long,long)"""
        _XVisualInfo.nvisualid(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XVisualInfo$Buffer org.lwjgl.system.linux.XVisualInfo.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XVisualInfo.mallocStack(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def ncolormap_size(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XVisualInfo.ncolormap_size(long,int)"""
        _XVisualInfo.ncolormap_size(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XVisualInfo(java.nio.ByteBuffer)"""
        val = _XVisualInfo(arg0)
        self.__wrapper = val

    @overload
    def depth(self) -> int:
        """public int org.lwjgl.system.linux.XVisualInfo.depth()"""
        return int._wrap(super(XVisualInfo, self).depth())

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XVisualInfo$Buffer org.lwjgl.system.linux.XVisualInfo.calloc(int)"""
        return Buffer._wrap(_XVisualInfo.calloc(_int.valueOf(arg0)))

    @overload
    def screen(self, arg0: int) -> 'XVisualInfo':
        """public org.lwjgl.system.linux.XVisualInfo org.lwjgl.system.linux.XVisualInfo.screen(int)"""
        return 'XVisualInfo'._wrap(super(_XVisualInfo, self).screen(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack() -> 'XVisualInfo':
        """public static org.lwjgl.system.linux.XVisualInfo org.lwjgl.system.linux.XVisualInfo.callocStack()"""
        return XVisualInfo._wrap(_XVisualInfo.callocStack())

    @overload
    def class$(self) -> int:
        """public int org.lwjgl.system.linux.XVisualInfo.class$()"""
        return int._wrap(super(XVisualInfo, self).class$())

    @staticmethod
    @overload
    def nscreen(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XVisualInfo.nscreen(long,int)"""
        _XVisualInfo.nscreen(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def nblue_mask(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XVisualInfo.nblue_mask(long)"""
        return int._wrap(_XVisualInfo.nblue_mask(_long.valueOf(arg0)))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @staticmethod
    @overload
    def nclass$(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XVisualInfo.nclass$(long)"""
        return int._wrap(_XVisualInfo.nclass$(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XVisualInfo':
        """public static org.lwjgl.system.linux.XVisualInfo org.lwjgl.system.linux.XVisualInfo.calloc(org.lwjgl.system.MemoryStack)"""
        return XVisualInfo._wrap(_XVisualInfo.calloc(arg0))

    @overload
    def red_mask(self, arg0: int) -> 'XVisualInfo':
        """public org.lwjgl.system.linux.XVisualInfo org.lwjgl.system.linux.XVisualInfo.red_mask(long)"""
        return 'XVisualInfo'._wrap(super(_XVisualInfo, self).red_mask(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        _Struct.validate(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), arg3)

    @overload
    def green_mask(self, arg0: int) -> 'XVisualInfo':
        """public org.lwjgl.system.linux.XVisualInfo org.lwjgl.system.linux.XVisualInfo.green_mask(long)"""
        return 'XVisualInfo'._wrap(super(_XVisualInfo, self).green_mask(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nred_mask(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XVisualInfo.nred_mask(long,long)"""
        _XVisualInfo.nred_mask(_long.valueOf(arg0), _long.valueOf(arg1))

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @overload
    def visual(self, arg0: 'Visual') -> 'XVisualInfo':
        """public org.lwjgl.system.linux.XVisualInfo org.lwjgl.system.linux.XVisualInfo.visual(org.lwjgl.system.linux.Visual)"""
        return 'XVisualInfo'._wrap(super(_XVisualInfo, self).visual(arg0))

    @overload
    def green_mask(self) -> int:
        """public long org.lwjgl.system.linux.XVisualInfo.green_mask()"""
        return int._wrap(super(XVisualInfo, self).green_mask())

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XVisualInfo.validate(long)"""
        _XVisualInfo.validate(_long.valueOf(arg0))

    @overload
    def colormap_size(self) -> int:
        """public int org.lwjgl.system.linux.XVisualInfo.colormap_size()"""
        return int._wrap(super(XVisualInfo, self).colormap_size())

    @overload
    def class$(self, arg0: int) -> 'XVisualInfo':
        """public org.lwjgl.system.linux.XVisualInfo org.lwjgl.system.linux.XVisualInfo.class$(int)"""
        return 'XVisualInfo'._wrap(super(_XVisualInfo, self).class$(_int.valueOf(arg0)))

    @overload
    def bits_per_rgb(self) -> int:
        """public int org.lwjgl.system.linux.XVisualInfo.bits_per_rgb()"""
        return int._wrap(super(XVisualInfo, self).bits_per_rgb())

    @staticmethod
    @overload
    def nscreen(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XVisualInfo.nscreen(long)"""
        return int._wrap(_XVisualInfo.nscreen(_long.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def blue_mask(self, arg0: int) -> 'XVisualInfo':
        """public org.lwjgl.system.linux.XVisualInfo org.lwjgl.system.linux.XVisualInfo.blue_mask(long)"""
        return 'XVisualInfo'._wrap(super(_XVisualInfo, self).blue_mask(_long.valueOf(arg0)))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).address())

    @overload
    def visual(self) -> 'Visual':
        """public org.lwjgl.system.linux.Visual org.lwjgl.system.linux.XVisualInfo.visual()"""
        return 'Visual'._wrap(super(XVisualInfo, self).visual())

    @staticmethod
    @overload
    def nclass$(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XVisualInfo.nclass$(long,int)"""
        _XVisualInfo.nclass$(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def visualid(self, arg0: int) -> 'XVisualInfo':
        """public org.lwjgl.system.linux.XVisualInfo org.lwjgl.system.linux.XVisualInfo.visualid(long)"""
        return 'XVisualInfo'._wrap(super(_XVisualInfo, self).visualid(_long.valueOf(arg0)))

    @overload
    def depth(self, arg0: int) -> 'XVisualInfo':
        """public org.lwjgl.system.linux.XVisualInfo org.lwjgl.system.linux.XVisualInfo.depth(int)"""
        return 'XVisualInfo'._wrap(super(_XVisualInfo, self).depth(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XVisualInfo$Buffer org.lwjgl.system.linux.XVisualInfo.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XVisualInfo.malloc(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def ngreen_mask(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XVisualInfo.ngreen_mask(long)"""
        return int._wrap(_XVisualInfo.ngreen_mask(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nvisual(arg0: int, arg1: 'Visual'):
        """public static void org.lwjgl.system.linux.XVisualInfo.nvisual(long,org.lwjgl.system.linux.Visual)"""
        _XVisualInfo.nvisual(_long.valueOf(arg0), arg1)

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XVisualInfo$Buffer org.lwjgl.system.linux.XVisualInfo.mallocStack(int)"""
        return Buffer._wrap(_XVisualInfo.mallocStack(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XVisualInfo$Buffer org.lwjgl.system.linux.XVisualInfo.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XVisualInfo.callocStack(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def nbits_per_rgb(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XVisualInfo.nbits_per_rgb(long)"""
        return int._wrap(_XVisualInfo.nbits_per_rgb(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nvisual(arg0: int) -> 'Visual':
        """public static org.lwjgl.system.linux.Visual org.lwjgl.system.linux.XVisualInfo.nvisual(long)"""
        return Visual._wrap(_XVisualInfo.nvisual(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def ndepth(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XVisualInfo.ndepth(long)"""
        return int._wrap(_XVisualInfo.ndepth(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XVisualInfo':
        """public static org.lwjgl.system.linux.XVisualInfo org.lwjgl.system.linux.XVisualInfo.malloc(org.lwjgl.system.MemoryStack)"""
        return XVisualInfo._wrap(_XVisualInfo.malloc(arg0))

    @staticmethod
    @overload
    def calloc() -> 'XVisualInfo':
        """public static org.lwjgl.system.linux.XVisualInfo org.lwjgl.system.linux.XVisualInfo.calloc()"""
        return XVisualInfo._wrap(_XVisualInfo.calloc())

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XVisualInfo$Buffer org.lwjgl.system.linux.XVisualInfo.create(int)"""
        return Buffer._wrap(_XVisualInfo.create(_int.valueOf(arg0)))

    @overload
    def blue_mask(self) -> int:
        """public long org.lwjgl.system.linux.XVisualInfo.blue_mask()"""
        return int._wrap(super(XVisualInfo, self).blue_mask())

    @overload
    def set(self, arg0: 'Visual', arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: int) -> 'XVisualInfo':
        """public org.lwjgl.system.linux.XVisualInfo org.lwjgl.system.linux.XVisualInfo.set(org.lwjgl.system.linux.Visual,long,int,int,int,long,long,long,int,int)"""
        return 'XVisualInfo'._wrap(super(_XVisualInfo, self).set(arg0, _long.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4), _long.valueOf(arg5), _long.valueOf(arg6), _long.valueOf(arg7), _int.valueOf(arg8), _int.valueOf(arg9)))

    @staticmethod
    @overload
    def malloc() -> 'XVisualInfo':
        """public static org.lwjgl.system.linux.XVisualInfo org.lwjgl.system.linux.XVisualInfo.malloc()"""
        return XVisualInfo._wrap(_XVisualInfo.malloc())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def screen(self) -> int:
        """public int org.lwjgl.system.linux.XVisualInfo.screen()"""
        return int._wrap(super(XVisualInfo, self).screen())

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XVisualInfo':
        """public static org.lwjgl.system.linux.XVisualInfo org.lwjgl.system.linux.XVisualInfo.createSafe(long)"""
        return XVisualInfo._wrap(_XVisualInfo.createSafe(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nbits_per_rgb(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XVisualInfo.nbits_per_rgb(long,int)"""
        _XVisualInfo.nbits_per_rgb(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @staticmethod
    @overload
    def ngreen_mask(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XVisualInfo.ngreen_mask(long,long)"""
        _XVisualInfo.ngreen_mask(_long.valueOf(arg0), _long.valueOf(arg1))

    @overload
    def bits_per_rgb(self, arg0: int) -> 'XVisualInfo':
        """public org.lwjgl.system.linux.XVisualInfo org.lwjgl.system.linux.XVisualInfo.bits_per_rgb(int)"""
        return 'XVisualInfo'._wrap(super(_XVisualInfo, self).bits_per_rgb(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XVisualInfo$Buffer org.lwjgl.system.linux.XVisualInfo.create(long,int)"""
        return Buffer._wrap(_XVisualInfo.create(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XVisualInfo':
        """public static org.lwjgl.system.linux.XVisualInfo org.lwjgl.system.linux.XVisualInfo.callocStack(org.lwjgl.system.MemoryStack)"""
        return XVisualInfo._wrap(_XVisualInfo.callocStack(arg0))

    @overload
    def set(self, arg0: 'XVisualInfo') -> 'XVisualInfo':
        """public org.lwjgl.system.linux.XVisualInfo org.lwjgl.system.linux.XVisualInfo.set(org.lwjgl.system.linux.XVisualInfo)"""
        return 'XVisualInfo'._wrap(super(_XVisualInfo, self).set(arg0))

    @overload
    def visualid(self) -> int:
        """public long org.lwjgl.system.linux.XVisualInfo.visualid()"""
        return int._wrap(super(XVisualInfo, self).visualid())

    @staticmethod
    @overload
    def create(arg0: int) -> 'XVisualInfo':
        """public static org.lwjgl.system.linux.XVisualInfo org.lwjgl.system.linux.XVisualInfo.create(long)"""
        return XVisualInfo._wrap(_XVisualInfo.create(_long.valueOf(arg0)))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XVisualInfo.sizeof()"""
        return int._wrap(super(XVisualInfo, self).sizeof())

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool._wrap(super(_pyglsystem.Struct, self).isNull(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def nred_mask(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XVisualInfo.nred_mask(long)"""
        return int._wrap(_XVisualInfo.nred_mask(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XVisualInfo$Buffer org.lwjgl.system.linux.XVisualInfo.createSafe(long,int)"""
        return Buffer._wrap(_XVisualInfo.createSafe(_long.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def colormap_size(self, arg0: int) -> 'XVisualInfo':
        """public org.lwjgl.system.linux.XVisualInfo org.lwjgl.system.linux.XVisualInfo.colormap_size(int)"""
        return 'XVisualInfo'._wrap(super(_XVisualInfo, self).colormap_size(_int.valueOf(arg0)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str._wrap(super(pyglsystem.Pointer$Default, self).toString()) 
 
 
# CLASS: org.lwjgl.system.linux.DynamicLinkLoader
from builtins import str
import java.lang.CharSequence as CharSequence
from pyquantum_helper import override
import java.lang.Object as _Object
_Object = _Object
import java.lang.Object as _object
from builtins import type
import java.lang.String as _String
_String = _String
import java.lang.Integer as _int
import org.lwjgl.system.linux.DynamicLinkLoader as _DynamicLinkLoader
_DynamicLinkLoader = _DynamicLinkLoader
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class DynamicLinkLoader():
    """org.lwjgl.system.linux.DynamicLinkLoader"""
 
    @staticmethod
    def _wrap(java_value: _DynamicLinkLoader) -> 'DynamicLinkLoader':
        return DynamicLinkLoader(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _DynamicLinkLoader):
        """
        Dynamic initializer for DynamicLinkLoader.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_DynamicLinkLoader__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_DynamicLinkLoader__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def ndlopen(arg0: int, arg1: int) -> int:
        """public static native long org.lwjgl.system.linux.DynamicLinkLoader.ndlopen(long,int)"""
        return int._wrap(_DynamicLinkLoader.ndlopen(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def dlsym(arg0: int, arg1: 'CharSequence') -> int:
        """public static long org.lwjgl.system.linux.DynamicLinkLoader.dlsym(long,java.lang.CharSequence)"""
        return int._wrap(_DynamicLinkLoader.dlsym(_long.valueOf(arg0), arg1))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def ndlsym(arg0: int, arg1: int) -> int:
        """public static native long org.lwjgl.system.linux.DynamicLinkLoader.ndlsym(long,long)"""
        return int._wrap(_DynamicLinkLoader.ndlsym(_long.valueOf(arg0), _long.valueOf(arg1)))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def dlopen(arg0: 'ByteBuffer', arg1: int) -> int:
        """public static long org.lwjgl.system.linux.DynamicLinkLoader.dlopen(java.nio.ByteBuffer,int)"""
        return int._wrap(_DynamicLinkLoader.dlopen(arg0, _int.valueOf(arg1)))

    @staticmethod
    @overload
    def dlclose(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.DynamicLinkLoader.dlclose(long)"""
        return int._wrap(_DynamicLinkLoader.dlclose(_long.valueOf(arg0)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.lang.Object.toString()"""
        return str._wrap(super(object, self).toString())

    @staticmethod
    @overload
    def dlsym(arg0: int, arg1: 'ByteBuffer') -> int:
        """public static long org.lwjgl.system.linux.DynamicLinkLoader.dlsym(long,java.nio.ByteBuffer)"""
        return int._wrap(_DynamicLinkLoader.dlsym(_long.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def dlopen(arg0: 'CharSequence', arg1: int) -> int:
        """public static long org.lwjgl.system.linux.DynamicLinkLoader.dlopen(java.lang.CharSequence,int)"""
        return int._wrap(_DynamicLinkLoader.dlopen(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @staticmethod
    @overload
    def ndlclose(arg0: int) -> int:
        """public static native int org.lwjgl.system.linux.DynamicLinkLoader.ndlclose(long)"""
        return int._wrap(_DynamicLinkLoader.ndlclose(_long.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @staticmethod
    @overload
    def ndlerror() -> int:
        """public static native long org.lwjgl.system.linux.DynamicLinkLoader.ndlerror()"""
        return int._wrap(_DynamicLinkLoader.ndlerror())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def dlerror() -> str:
        """public static java.lang.String org.lwjgl.system.linux.DynamicLinkLoader.dlerror()"""
        return str._wrap(_DynamicLinkLoader.dlerror())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool._wrap(super(_object, self).equals(arg0))

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int._wrap(super(object, self).hashCode()) 
 
 
# CLASS: org.lwjgl.system.linux.UIO
from builtins import str
from pyquantum_helper import override
import java.lang.Integer as _int
import java.lang.Object as _Object
_Object = _Object
import java.lang.Object as _object
from builtins import type
import java.lang.String as _String
_String = _String
from builtins import bool
import org.lwjgl.system.linux.UIO as _UIO
_UIO = _UIO
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class UIO():
    """org.lwjgl.system.linux.UIO"""
 
    @staticmethod
    def _wrap(java_value: _UIO) -> 'UIO':
        return UIO(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _UIO):
        """
        Dynamic initializer for UIO.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_UIO__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_UIO__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def npwritev(arg0: int, arg1: int, arg2: int, arg3: int) -> int:
        """public static native long org.lwjgl.system.linux.UIO.npwritev(int,long,int,long)"""
        return int._wrap(_UIO.npwritev(_int.valueOf(arg0), _long.valueOf(arg1), _int.valueOf(arg2), _long.valueOf(arg3)))

    @staticmethod
    @overload
    def writev(arg0: int, arg1: 'IOVec', arg2: int) -> int:
        """public static long org.lwjgl.system.linux.UIO.writev(int,org.lwjgl.system.linux.IOVec,int)"""
        return int._wrap(_UIO.writev(_int.valueOf(arg0), arg1, _int.valueOf(arg2)))

    @staticmethod
    @overload
    def nprocess_vm_readv(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int) -> int:
        """public static native long org.lwjgl.system.linux.UIO.nprocess_vm_readv(int,long,long,long,long,long)"""
        return int._wrap(_UIO.nprocess_vm_readv(_int.valueOf(arg0), _long.valueOf(arg1), _long.valueOf(arg2), _long.valueOf(arg3), _long.valueOf(arg4), _long.valueOf(arg5)))

    @staticmethod
    @overload
    def pwritev(arg0: int, arg1: 'IOVec', arg2: int, arg3: int) -> int:
        """public static long org.lwjgl.system.linux.UIO.pwritev(int,org.lwjgl.system.linux.IOVec,int,long)"""
        return int._wrap(_UIO.pwritev(_int.valueOf(arg0), arg1, _int.valueOf(arg2), _long.valueOf(arg3)))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def nwritev(arg0: int, arg1: int, arg2: int) -> int:
        """public static native long org.lwjgl.system.linux.UIO.nwritev(int,long,int)"""
        return int._wrap(_UIO.nwritev(_int.valueOf(arg0), _long.valueOf(arg1), _int.valueOf(arg2)))

    @staticmethod
    @overload
    def process_vm_writev(arg0: int, arg1: 'IOVec', arg2: int, arg3: 'IOVec', arg4: int, arg5: int) -> int:
        """public static long org.lwjgl.system.linux.UIO.process_vm_writev(int,org.lwjgl.system.linux.IOVec,long,org.lwjgl.system.linux.IOVec,long,long)"""
        return int._wrap(_UIO.process_vm_writev(_int.valueOf(arg0), arg1, _long.valueOf(arg2), arg3, _long.valueOf(arg4), _long.valueOf(arg5)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.lang.Object.toString()"""
        return str._wrap(super(object, self).toString())

    @staticmethod
    @overload
    def nreadv(arg0: int, arg1: int, arg2: int) -> int:
        """public static native long org.lwjgl.system.linux.UIO.nreadv(int,long,int)"""
        return int._wrap(_UIO.nreadv(_int.valueOf(arg0), _long.valueOf(arg1), _int.valueOf(arg2)))

    @staticmethod
    @overload
    def npreadv(arg0: int, arg1: int, arg2: int, arg3: int) -> int:
        """public static native long org.lwjgl.system.linux.UIO.npreadv(int,long,int,long)"""
        return int._wrap(_UIO.npreadv(_int.valueOf(arg0), _long.valueOf(arg1), _int.valueOf(arg2), _long.valueOf(arg3)))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @staticmethod
    @overload
    def readv(arg0: int, arg1: 'IOVec', arg2: int) -> int:
        """public static long org.lwjgl.system.linux.UIO.readv(int,org.lwjgl.system.linux.IOVec,int)"""
        return int._wrap(_UIO.readv(_int.valueOf(arg0), arg1, _int.valueOf(arg2)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def nprocess_vm_writev(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int) -> int:
        """public static native long org.lwjgl.system.linux.UIO.nprocess_vm_writev(int,long,long,long,long,long)"""
        return int._wrap(_UIO.nprocess_vm_writev(_int.valueOf(arg0), _long.valueOf(arg1), _long.valueOf(arg2), _long.valueOf(arg3), _long.valueOf(arg4), _long.valueOf(arg5)))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def preadv(arg0: int, arg1: 'IOVec', arg2: int, arg3: int) -> int:
        """public static long org.lwjgl.system.linux.UIO.preadv(int,org.lwjgl.system.linux.IOVec,int,long)"""
        return int._wrap(_UIO.preadv(_int.valueOf(arg0), arg1, _int.valueOf(arg2), _long.valueOf(arg3)))

    @staticmethod
    @overload
    def process_vm_readv(arg0: int, arg1: 'IOVec', arg2: int, arg3: 'IOVec', arg4: int, arg5: int) -> int:
        """public static long org.lwjgl.system.linux.UIO.process_vm_readv(int,org.lwjgl.system.linux.IOVec,long,org.lwjgl.system.linux.IOVec,long,long)"""
        return int._wrap(_UIO.process_vm_readv(_int.valueOf(arg0), arg1, _long.valueOf(arg2), arg3, _long.valueOf(arg4), _long.valueOf(arg5)))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool._wrap(super(_object, self).equals(arg0))

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int._wrap(super(object, self).hashCode()) 
 
 
# CLASS: org.lwjgl.system.linux.XSelectionRequestEvent$Buffer
from pyquantum_helper import import_once as _import_once
import java.lang.Object as _Object
_Object = _Object
from builtins import type
import org.lwjgl.system.CustomBuffer as _CustomBuffer
_CustomBuffer = _CustomBuffer
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import org.lwjgl.system.linux.XSelectionRequestEvent as _XSelectionRequestEvent_Buffer
_Buffer = _XSelectionRequestEvent_Buffer.Buffer
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Boolean as _boolean
import org.lwjgl.system.StructBuffer as _StructBuffer
_StructBuffer = _StructBuffer
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.util.Iterator as _Iterator
_Iterator = _Iterator
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
import java.util.Spliterator as _Spliterator
_Spliterator = _Spliterator
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.util.Iterator as Iterator
import java.lang.Integer as _int
import java.util.stream.Stream as _Stream
_Stream = _Stream
import java.util.stream.Stream as Stream
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class Buffer():
    """org.lwjgl.system.linux.XSelectionRequestEvent.Buffer"""
 
    @staticmethod
    def _wrap(java_value: _Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Buffer__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Buffer__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def owner(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionRequestEvent$Buffer.owner()"""
        return int._wrap(super(Buffer, self).owner())

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionRequestEvent$Buffer.display()"""
        return int._wrap(super(Buffer, self).display())

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).limit(_int.valueOf(arg0)))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XSelectionRequestEvent$Buffer(java.nio.ByteBuffer)"""
        val = _Buffer(arg0)
        self.__wrapper = val

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSelectionRequestEvent$Buffer org.lwjgl.system.linux.XSelectionRequestEvent$Buffer.type(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).type(_int.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str._wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XSelectionRequestEvent$Buffer.type()"""
        return int._wrap(super(Buffer, self).type())

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSelectionRequestEvent$Buffer org.lwjgl.system.linux.XSelectionRequestEvent$Buffer.serial(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).serial(_long.valueOf(arg0)))

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int._wrap(super(_pyglsystem.CustomBuffer, self).address(_int.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'._wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).stream())

    @overload
    def time(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSelectionRequestEvent$Buffer org.lwjgl.system.linux.XSelectionRequestEvent$Buffer.time(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).time(_long.valueOf(arg0)))

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).position(_int.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'._wrap(super(pyglsystem.StructBuffer, self).get())

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def owner(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSelectionRequestEvent$Buffer org.lwjgl.system.linux.XSelectionRequestEvent$Buffer.owner(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).owner(_long.valueOf(arg0)))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionRequestEvent$Buffer.serial()"""
        return int._wrap(super(Buffer, self).serial())

    @overload
    def requestor(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionRequestEvent$Buffer.requestor()"""
        return int._wrap(super(Buffer, self).requestor())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(arg0))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'._wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def requestor(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSelectionRequestEvent$Buffer org.lwjgl.system.linux.XSelectionRequestEvent$Buffer.requestor(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).requestor(_long.valueOf(arg0)))

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSelectionRequestEvent$Buffer org.lwjgl.system.linux.XSelectionRequestEvent$Buffer.display(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).display(_long.valueOf(arg0)))

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(arg0))

    @overload
    def property(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionRequestEvent$Buffer.property()"""
        return int._wrap(super(Buffer, self).property())

    @overload
    def target(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionRequestEvent$Buffer.target()"""
        return int._wrap(super(Buffer, self).target())

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).slice())

    @overload
    def time(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionRequestEvent$Buffer.time()"""
        return int._wrap(super(Buffer, self).time())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).slice(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XSelectionRequestEvent$Buffer(long,int)"""
        val = _Buffer(_long.valueOf(arg0), _int.valueOf(arg1))
        self.__wrapper = val

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0), arg1))

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(_int.valueOf(arg0), arg1))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).clear())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool._wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XSelectionRequestEvent$Buffer.send_event()"""
        return bool._wrap(super(Buffer, self).send_event())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).flip())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int._wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def selection(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionRequestEvent$Buffer.selection()"""
        return int._wrap(super(Buffer, self).selection())

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(_int.valueOf(arg0), arg1))

    @overload
    def property(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSelectionRequestEvent$Buffer org.lwjgl.system.linux.XSelectionRequestEvent$Buffer.property(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).property(_long.valueOf(arg0)))

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XSelectionRequestEvent$Buffer org.lwjgl.system.linux.XSelectionRequestEvent$Buffer.send_event(boolean)"""
        return 'Buffer'._wrap(super(_Buffer, self).send_event(_boolean.valueOf(arg0)))

    @overload
    def target(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSelectionRequestEvent$Buffer org.lwjgl.system.linux.XSelectionRequestEvent$Buffer.target(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).target(_long.valueOf(arg0)))

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(_pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def selection(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSelectionRequestEvent$Buffer org.lwjgl.system.linux.XSelectionRequestEvent$Buffer.selection(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).selection(_long.valueOf(arg0)))

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(arg0)) 
 
 
# CLASS: org.lwjgl.system.linux.XPropertyEvent$Buffer
from pyquantum_helper import import_once as _import_once
import java.lang.Object as _Object
_Object = _Object
from builtins import type
import org.lwjgl.system.CustomBuffer as _CustomBuffer
_CustomBuffer = _CustomBuffer
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import org.lwjgl.system.linux.XPropertyEvent as _XPropertyEvent_Buffer
_Buffer = _XPropertyEvent_Buffer.Buffer
import java.lang.Boolean as _boolean
import org.lwjgl.system.StructBuffer as _StructBuffer
_StructBuffer = _StructBuffer
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.util.Iterator as _Iterator
_Iterator = _Iterator
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
import java.util.Spliterator as _Spliterator
_Spliterator = _Spliterator
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.util.Iterator as Iterator
import java.lang.Integer as _int
import java.util.stream.Stream as _Stream
_Stream = _Stream
import java.util.stream.Stream as Stream
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class Buffer():
    """org.lwjgl.system.linux.XPropertyEvent.Buffer"""
 
    @staticmethod
    def _wrap(java_value: _Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Buffer__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Buffer__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).limit(_int.valueOf(arg0)))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address0())

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XPropertyEvent$Buffer.display()"""
        return int._wrap(super(Buffer, self).display())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address())

    @overload
    def state(self) -> int:
        """public int org.lwjgl.system.linux.XPropertyEvent$Buffer.state()"""
        return int._wrap(super(Buffer, self).state())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0)))

    @overload
    def time(self) -> int:
        """public long org.lwjgl.system.linux.XPropertyEvent$Buffer.time()"""
        return int._wrap(super(Buffer, self).time())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str._wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int._wrap(super(_pyglsystem.CustomBuffer, self).address(_int.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).mark())

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XPropertyEvent$Buffer org.lwjgl.system.linux.XPropertyEvent$Buffer.type(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).type(_int.valueOf(arg0)))

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XPropertyEvent$Buffer org.lwjgl.system.linux.XPropertyEvent$Buffer.send_event(boolean)"""
        return 'Buffer'._wrap(super(_Buffer, self).send_event(_boolean.valueOf(arg0)))

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'._wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).stream())

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).position(_int.valueOf(arg0)))

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XPropertyEvent$Buffer org.lwjgl.system.linux.XPropertyEvent$Buffer.display(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).display(_long.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XPropertyEvent$Buffer.window()"""
        return int._wrap(super(Buffer, self).window())

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'._wrap(super(pyglsystem.StructBuffer, self).get())

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XPropertyEvent$Buffer.send_event()"""
        return bool._wrap(super(Buffer, self).send_event())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def state(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XPropertyEvent$Buffer org.lwjgl.system.linux.XPropertyEvent$Buffer.state(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).state(_int.valueOf(arg0)))

    @overload
    def window(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XPropertyEvent$Buffer org.lwjgl.system.linux.XPropertyEvent$Buffer.window(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).window(_long.valueOf(arg0)))

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XPropertyEvent$Buffer.type()"""
        return int._wrap(super(Buffer, self).type())

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(arg0))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def atom(self) -> int:
        """public long org.lwjgl.system.linux.XPropertyEvent$Buffer.atom()"""
        return int._wrap(super(Buffer, self).atom())

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'._wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XPropertyEvent$Buffer(long,int)"""
        val = _Buffer(_long.valueOf(arg0), _int.valueOf(arg1))
        self.__wrapper = val

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(arg0))

    @overload
    def time(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XPropertyEvent$Buffer org.lwjgl.system.linux.XPropertyEvent$Buffer.time(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).time(_long.valueOf(arg0)))

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).slice())

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XPropertyEvent$Buffer.serial()"""
        return int._wrap(super(Buffer, self).serial())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).slice(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0), arg1))

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(_int.valueOf(arg0), arg1))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).clear())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool._wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XPropertyEvent$Buffer org.lwjgl.system.linux.XPropertyEvent$Buffer.serial(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).serial(_long.valueOf(arg0)))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int._wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(_int.valueOf(arg0), arg1))

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(_pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @overload
    def atom(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XPropertyEvent$Buffer org.lwjgl.system.linux.XPropertyEvent$Buffer.atom(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).atom(_long.valueOf(arg0)))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XPropertyEvent$Buffer(java.nio.ByteBuffer)"""
        val = _Buffer(arg0)
        self.__wrapper = val

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(arg0)) 
 
 
# CLASS: org.lwjgl.system.linux.Sockaddr$Buffer
from pyquantum_helper import import_once as _import_once
import java.lang.Object as _Object
_Object = _Object
from builtins import type
import org.lwjgl.system.CustomBuffer as _CustomBuffer
_CustomBuffer = _CustomBuffer
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import java.lang.Short as _short
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Byte as _byte
import org.lwjgl.system.StructBuffer as _StructBuffer
_StructBuffer = _StructBuffer
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.util.Iterator as _Iterator
_Iterator = _Iterator
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
import java.nio.ByteBuffer as _ByteBuffer
_ByteBuffer = _ByteBuffer
import org.lwjgl.system.linux.Sockaddr as _Sockaddr_Buffer
_Buffer = _Sockaddr_Buffer.Buffer
import java.util.Spliterator as _Spliterator
_Spliterator = _Spliterator
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.util.Iterator as Iterator
import java.lang.Integer as _int
import java.util.stream.Stream as _Stream
_Stream = _Stream
import java.util.stream.Stream as Stream
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class Buffer():
    """org.lwjgl.system.linux.Sockaddr.Buffer"""
 
    @staticmethod
    def _wrap(java_value: _Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Buffer__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Buffer__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def sa_family(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Sockaddr$Buffer org.lwjgl.system.linux.Sockaddr$Buffer.sa_family(short)"""
        return 'Buffer'._wrap(super(_Buffer, self).sa_family(_short.valueOf(arg0)))

    @overload
    def sa_data(self, arg0: 'ByteBuffer') -> 'Buffer':
        """public org.lwjgl.system.linux.Sockaddr$Buffer org.lwjgl.system.linux.Sockaddr$Buffer.sa_data(java.nio.ByteBuffer)"""
        return 'Buffer'._wrap(super(_Buffer, self).sa_data(arg0))

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).limit(_int.valueOf(arg0)))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str._wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int._wrap(super(_pyglsystem.CustomBuffer, self).address(_int.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'._wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @overload
    def sa_data(self) -> 'ByteBuffer':
        """public java.nio.ByteBuffer org.lwjgl.system.linux.Sockaddr$Buffer.sa_data()"""
        return 'ByteBuffer'._wrap(super(Buffer, self).sa_data())

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).stream())

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).position(_int.valueOf(arg0)))

    @overload
    def sa_data(self, arg0: int, arg1: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Sockaddr$Buffer org.lwjgl.system.linux.Sockaddr$Buffer.sa_data(int,byte)"""
        return 'Buffer'._wrap(super(_Buffer, self).sa_data(_int.valueOf(arg0), _byte.valueOf(arg1)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'._wrap(super(pyglsystem.StructBuffer, self).get())

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(arg0))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def sa_data(self, arg0: int) -> int:
        """public byte org.lwjgl.system.linux.Sockaddr$Buffer.sa_data(int)"""
        return int._wrap(super(_Buffer, self).sa_data(_int.valueOf(arg0)))

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'._wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(arg0))

    @overload
    def sa_family(self) -> int:
        """public short org.lwjgl.system.linux.Sockaddr$Buffer.sa_family()"""
        return int._wrap(super(Buffer, self).sa_family())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.Sockaddr$Buffer(java.nio.ByteBuffer)"""
        val = _Buffer(arg0)
        self.__wrapper = val

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).slice())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).slice(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0), arg1))

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(_int.valueOf(arg0), arg1))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).clear())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool._wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).flip())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int._wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.Sockaddr$Buffer(long,int)"""
        val = _Buffer(_long.valueOf(arg0), _int.valueOf(arg1))
        self.__wrapper = val

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(_int.valueOf(arg0), arg1))

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(_pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(arg0)) 
 
 
# CLASS: org.lwjgl.system.linux.Msghdr
from pyquantum_helper import import_once as _import_once
from builtins import str
from pyquantum_helper import override
import org.lwjgl.system.linux.IOVec as _IOVec_Buffer
_Buffer = _IOVec_Buffer.Buffer
import java.lang.Object as _Object
_Object = _Object
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
from builtins import type
import java.nio.ByteBuffer as _ByteBuffer
_ByteBuffer = _ByteBuffer
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import org.lwjgl.system.linux.Msghdr as _Msghdr
_Msghdr = _Msghdr
import java.lang.Integer as _int
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
import java.lang.Long as _long
import org.lwjgl.system.linux.Msghdr as _Msghdr_Buffer
_Buffer = _Msghdr_Buffer.Buffer
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class Msghdr():
    """org.lwjgl.system.linux.Msghdr"""
 
    @staticmethod
    def _wrap(java_value: _Msghdr) -> 'Msghdr':
        return Msghdr(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Msghdr):
        """
        Dynamic initializer for Msghdr.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Msghdr__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Msghdr__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def nmsg_controllen(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.Msghdr.nmsg_controllen(long)"""
        return int._wrap(_Msghdr.nmsg_controllen(_long.valueOf(arg0)))

    @overload
    def msg_controllen(self) -> int:
        """public long org.lwjgl.system.linux.Msghdr.msg_controllen()"""
        return int._wrap(super(Msghdr, self).msg_controllen())

    @staticmethod
    @overload
    def nmsg_control(arg0: int) -> 'ByteBuffer':
        """public static java.nio.ByteBuffer org.lwjgl.system.linux.Msghdr.nmsg_control(long)"""
        return ByteBuffer._wrap(_Msghdr.nmsg_control(_long.valueOf(arg0)))

    @overload
    def msg_control(self, arg0: 'ByteBuffer') -> 'Msghdr':
        """public org.lwjgl.system.linux.Msghdr org.lwjgl.system.linux.Msghdr.msg_control(java.nio.ByteBuffer)"""
        return 'Msghdr'._wrap(super(_Msghdr, self).msg_control(arg0))

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.Msghdr$Buffer org.lwjgl.system.linux.Msghdr.create(int)"""
        return Buffer._wrap(_Msghdr.create(_int.valueOf(arg0)))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def msg_flags(self, arg0: int) -> 'Msghdr':
        """public org.lwjgl.system.linux.Msghdr org.lwjgl.system.linux.Msghdr.msg_flags(int)"""
        return 'Msghdr'._wrap(super(_Msghdr, self).msg_flags(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def nmsg_iov(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.IOVec$Buffer org.lwjgl.system.linux.Msghdr.nmsg_iov(long)"""
        return Buffer._wrap(_Msghdr.nmsg_iov(_long.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.Msghdr(java.nio.ByteBuffer)"""
        val = _Msghdr(arg0)
        self.__wrapper = val

    @staticmethod
    @overload
    def calloc() -> 'Msghdr':
        """public static org.lwjgl.system.linux.Msghdr org.lwjgl.system.linux.Msghdr.calloc()"""
        return Msghdr._wrap(_Msghdr.calloc())

    @staticmethod
    @overload
    def nmsg_controllen(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Msghdr.nmsg_controllen(long,long)"""
        _Msghdr.nmsg_controllen(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'Msghdr':
        """public static org.lwjgl.system.linux.Msghdr org.lwjgl.system.linux.Msghdr.calloc(org.lwjgl.system.MemoryStack)"""
        return Msghdr._wrap(_Msghdr.calloc(arg0))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.Msghdr$Buffer org.lwjgl.system.linux.Msghdr.create(long,int)"""
        return Buffer._wrap(_Msghdr.create(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def nmsg_namelen(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Msghdr.nmsg_namelen(long,int)"""
        _Msghdr.nmsg_namelen(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def nmsg_iovlen(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Msghdr.nmsg_iovlen(long,long)"""
        _Msghdr.nmsg_iovlen(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def nmsg_name(arg0: int) -> 'ByteBuffer':
        """public static java.nio.ByteBuffer org.lwjgl.system.linux.Msghdr.nmsg_name(long)"""
        return ByteBuffer._wrap(_Msghdr.nmsg_name(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nmsg_flags(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.Msghdr.nmsg_flags(long)"""
        return int._wrap(_Msghdr.nmsg_flags(_long.valueOf(arg0)))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.Msghdr.sizeof()"""
        return int._wrap(super(Msghdr, self).sizeof())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        _Struct.validate(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), arg3)

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @staticmethod
    @overload
    def nmsg_iov(arg0: int, arg1: 'Buffer'):
        """public static void org.lwjgl.system.linux.Msghdr.nmsg_iov(long,org.lwjgl.system.linux.IOVec$Buffer)"""
        _Msghdr.nmsg_iov(_long.valueOf(arg0), arg1)

    @staticmethod
    @overload
    def nmsg_control(arg0: int, arg1: 'ByteBuffer'):
        """public static void org.lwjgl.system.linux.Msghdr.nmsg_control(long,java.nio.ByteBuffer)"""
        _Msghdr.nmsg_control(_long.valueOf(arg0), arg1)

    @overload
    def msg_name(self, arg0: 'ByteBuffer') -> 'Msghdr':
        """public org.lwjgl.system.linux.Msghdr org.lwjgl.system.linux.Msghdr.msg_name(java.nio.ByteBuffer)"""
        return 'Msghdr'._wrap(super(_Msghdr, self).msg_name(arg0))

    @staticmethod
    @overload
    def nmsg_namelen(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.Msghdr.nmsg_namelen(long)"""
        return int._wrap(_Msghdr.nmsg_namelen(_long.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def msg_flags(self) -> int:
        """public int org.lwjgl.system.linux.Msghdr.msg_flags()"""
        return int._wrap(super(Msghdr, self).msg_flags())

    @overload
    def msg_iov(self) -> 'Buffer':
        """public org.lwjgl.system.linux.IOVec$Buffer org.lwjgl.system.linux.Msghdr.msg_iov()"""
        return 'Buffer'._wrap(super(Msghdr, self).msg_iov())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).address())

    @overload
    def msg_namelen(self) -> int:
        """public int org.lwjgl.system.linux.Msghdr.msg_namelen()"""
        return int._wrap(super(Msghdr, self).msg_namelen())

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.Msghdr.validate(long)"""
        _Msghdr.validate(_long.valueOf(arg0))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def set(self, arg0: 'ByteBuffer', arg1: 'Buffer', arg2: 'ByteBuffer', arg3: int) -> 'Msghdr':
        """public org.lwjgl.system.linux.Msghdr org.lwjgl.system.linux.Msghdr.set(java.nio.ByteBuffer,org.lwjgl.system.linux.IOVec$Buffer,java.nio.ByteBuffer,int)"""
        return 'Msghdr'._wrap(super(_Msghdr, self).set(arg0, arg1, arg2, _int.valueOf(arg3)))

    @overload
    def msg_iov(self, arg0: 'Buffer') -> 'Msghdr':
        """public org.lwjgl.system.linux.Msghdr org.lwjgl.system.linux.Msghdr.msg_iov(org.lwjgl.system.linux.IOVec$Buffer)"""
        return 'Msghdr'._wrap(super(_Msghdr, self).msg_iov(arg0))

    @staticmethod
    @overload
    def create(arg0: int) -> 'Msghdr':
        """public static org.lwjgl.system.linux.Msghdr org.lwjgl.system.linux.Msghdr.create(long)"""
        return Msghdr._wrap(_Msghdr.create(_long.valueOf(arg0)))

    @overload
    def msg_control(self) -> 'ByteBuffer':
        """public java.nio.ByteBuffer org.lwjgl.system.linux.Msghdr.msg_control()"""
        return 'ByteBuffer'._wrap(super(Msghdr, self).msg_control())

    @overload
    def msg_iovlen(self) -> int:
        """public long org.lwjgl.system.linux.Msghdr.msg_iovlen()"""
        return int._wrap(super(Msghdr, self).msg_iovlen())

    @overload
    def msg_name(self) -> 'ByteBuffer':
        """public java.nio.ByteBuffer org.lwjgl.system.linux.Msghdr.msg_name()"""
        return 'ByteBuffer'._wrap(super(Msghdr, self).msg_name())

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.Msghdr$Buffer org.lwjgl.system.linux.Msghdr.malloc(int)"""
        return Buffer._wrap(_Msghdr.malloc(_int.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def set(self, arg0: 'Msghdr') -> 'Msghdr':
        """public org.lwjgl.system.linux.Msghdr org.lwjgl.system.linux.Msghdr.set(org.lwjgl.system.linux.Msghdr)"""
        return 'Msghdr'._wrap(super(_Msghdr, self).set(arg0))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.Msghdr$Buffer org.lwjgl.system.linux.Msghdr.createSafe(long,int)"""
        return Buffer._wrap(_Msghdr.createSafe(_long.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @staticmethod
    @overload
    def create() -> 'Msghdr':
        """public static org.lwjgl.system.linux.Msghdr org.lwjgl.system.linux.Msghdr.create()"""
        return Msghdr._wrap(_Msghdr.create())

    @staticmethod
    @overload
    def nmsg_name(arg0: int, arg1: 'ByteBuffer'):
        """public static void org.lwjgl.system.linux.Msghdr.nmsg_name(long,java.nio.ByteBuffer)"""
        _Msghdr.nmsg_name(_long.valueOf(arg0), arg1)

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.Msghdr$Buffer org.lwjgl.system.linux.Msghdr.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_Msghdr.malloc(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'Msghdr':
        """public static org.lwjgl.system.linux.Msghdr org.lwjgl.system.linux.Msghdr.createSafe(long)"""
        return Msghdr._wrap(_Msghdr.createSafe(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.Msghdr$Buffer org.lwjgl.system.linux.Msghdr.calloc(int)"""
        return Buffer._wrap(_Msghdr.calloc(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def nmsg_iovlen(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.Msghdr.nmsg_iovlen(long)"""
        return int._wrap(_Msghdr.nmsg_iovlen(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'Msghdr':
        """public static org.lwjgl.system.linux.Msghdr org.lwjgl.system.linux.Msghdr.malloc(org.lwjgl.system.MemoryStack)"""
        return Msghdr._wrap(_Msghdr.malloc(arg0))

    @staticmethod
    @overload
    def nmsg_flags(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Msghdr.nmsg_flags(long,int)"""
        _Msghdr.nmsg_flags(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool._wrap(super(_pyglsystem.Struct, self).isNull(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc() -> 'Msghdr':
        """public static org.lwjgl.system.linux.Msghdr org.lwjgl.system.linux.Msghdr.malloc()"""
        return Msghdr._wrap(_Msghdr.malloc())

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.Msghdr$Buffer org.lwjgl.system.linux.Msghdr.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_Msghdr.calloc(_int.valueOf(arg0), arg1))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str._wrap(super(pyglsystem.Pointer$Default, self).toString()) 
 
 
# CLASS: org.lwjgl.system.linux.PThread
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _Object
_Object = _Object
import java.lang.Integer as _int
import java.lang.Object as _object
from builtins import type
import org.lwjgl.system.linux.PThread as _PThread
_PThread = _PThread
import java.lang.String as _String
_String = _String
from builtins import bool
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class PThread():
    """org.lwjgl.system.linux.PThread"""
 
    @staticmethod
    def _wrap(java_value: _PThread) -> 'PThread':
        return PThread(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _PThread):
        """
        Dynamic initializer for PThread.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_PThread__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_PThread__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def pthread_self() -> int:
        """public static native long org.lwjgl.system.linux.PThread.pthread_self()"""
        return int._wrap(_PThread.pthread_self())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.lang.Object.toString()"""
        return str._wrap(super(object, self).toString())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool._wrap(super(_object, self).equals(arg0))

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int._wrap(super(object, self).hashCode()) 
 
 
# CLASS: org.lwjgl.system.linux.Flock
from pyquantum_helper import import_once as _import_once
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _Object
_Object = _Object
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
from builtins import type
import org.lwjgl.system.linux.Flock as _Flock
_Flock = _Flock
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.lang.Short as _short
import java.lang.Integer as _int
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import org.lwjgl.system.linux.Flock as _Flock_Buffer
_Buffer = _Flock_Buffer.Buffer
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class Flock():
    """org.lwjgl.system.linux.Flock"""
 
    @staticmethod
    def _wrap(java_value: _Flock) -> 'Flock':
        return Flock(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Flock):
        """
        Dynamic initializer for Flock.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Flock__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Flock__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def set(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int) -> 'Flock':
        """public org.lwjgl.system.linux.Flock org.lwjgl.system.linux.Flock.set(short,short,long,long,int)"""
        return 'Flock'._wrap(super(_Flock, self).set(_short.valueOf(arg0), _short.valueOf(arg1), _long.valueOf(arg2), _long.valueOf(arg3), _int.valueOf(arg4)))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.Flock$Buffer org.lwjgl.system.linux.Flock.createSafe(long,int)"""
        return Buffer._wrap(_Flock.createSafe(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def nl_type(arg0: int) -> int:
        """public static short org.lwjgl.system.linux.Flock.nl_type(long)"""
        return int._wrap(_Flock.nl_type(_long.valueOf(arg0)))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def nl_pid(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.Flock.nl_pid(long)"""
        return int._wrap(_Flock.nl_pid(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nl_start(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.Flock.nl_start(long)"""
        return int._wrap(_Flock.nl_start(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nl_whence(arg0: int) -> int:
        """public static short org.lwjgl.system.linux.Flock.nl_whence(long)"""
        return int._wrap(_Flock.nl_whence(_long.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'Flock':
        """public static org.lwjgl.system.linux.Flock org.lwjgl.system.linux.Flock.calloc(org.lwjgl.system.MemoryStack)"""
        return Flock._wrap(_Flock.calloc(arg0))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.Flock.sizeof()"""
        return int._wrap(super(Flock, self).sizeof())

    @staticmethod
    @overload
    def nl_type(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Flock.nl_type(long,short)"""
        _Flock.nl_type(_long.valueOf(arg0), _short.valueOf(arg1))

    @staticmethod
    @overload
    def nl_pid(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Flock.nl_pid(long,int)"""
        _Flock.nl_pid(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def malloc() -> 'Flock':
        """public static org.lwjgl.system.linux.Flock org.lwjgl.system.linux.Flock.malloc()"""
        return Flock._wrap(_Flock.malloc())

    @overload
    def l_whence(self, arg0: int) -> 'Flock':
        """public org.lwjgl.system.linux.Flock org.lwjgl.system.linux.Flock.l_whence(short)"""
        return 'Flock'._wrap(super(_Flock, self).l_whence(_short.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.Flock$Buffer org.lwjgl.system.linux.Flock.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_Flock.calloc(_int.valueOf(arg0), arg1))

    @overload
    def l_len(self, arg0: int) -> 'Flock':
        """public org.lwjgl.system.linux.Flock org.lwjgl.system.linux.Flock.l_len(long)"""
        return 'Flock'._wrap(super(_Flock, self).l_len(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'Flock':
        """public static org.lwjgl.system.linux.Flock org.lwjgl.system.linux.Flock.create(long)"""
        return Flock._wrap(_Flock.create(_long.valueOf(arg0)))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        _Struct.validate(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), arg3)

    @overload
    def l_start(self, arg0: int) -> 'Flock':
        """public org.lwjgl.system.linux.Flock org.lwjgl.system.linux.Flock.l_start(long)"""
        return 'Flock'._wrap(super(_Flock, self).l_start(_long.valueOf(arg0)))

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.Flock$Buffer org.lwjgl.system.linux.Flock.create(long,int)"""
        return Buffer._wrap(_Flock.create(_long.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def l_type(self, arg0: int) -> 'Flock':
        """public org.lwjgl.system.linux.Flock org.lwjgl.system.linux.Flock.l_type(short)"""
        return 'Flock'._wrap(super(_Flock, self).l_type(_short.valueOf(arg0)))

    @overload
    def set(self, arg0: 'Flock') -> 'Flock':
        """public org.lwjgl.system.linux.Flock org.lwjgl.system.linux.Flock.set(org.lwjgl.system.linux.Flock)"""
        return 'Flock'._wrap(super(_Flock, self).set(arg0))

    @overload
    def l_start(self) -> int:
        """public long org.lwjgl.system.linux.Flock.l_start()"""
        return int._wrap(super(Flock, self).l_start())

    @staticmethod
    @overload
    def nl_start(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Flock.nl_start(long,long)"""
        _Flock.nl_start(_long.valueOf(arg0), _long.valueOf(arg1))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'Flock':
        """public static org.lwjgl.system.linux.Flock org.lwjgl.system.linux.Flock.malloc(org.lwjgl.system.MemoryStack)"""
        return Flock._wrap(_Flock.malloc(arg0))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).address())

    @overload
    def l_type(self) -> int:
        """public short org.lwjgl.system.linux.Flock.l_type()"""
        return int._wrap(super(Flock, self).l_type())

    @overload
    def l_pid(self, arg0: int) -> 'Flock':
        """public org.lwjgl.system.linux.Flock org.lwjgl.system.linux.Flock.l_pid(int)"""
        return 'Flock'._wrap(super(_Flock, self).l_pid(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def nl_len(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Flock.nl_len(long,long)"""
        _Flock.nl_len(_long.valueOf(arg0), _long.valueOf(arg1))

    @overload
    def l_pid(self) -> int:
        """public int org.lwjgl.system.linux.Flock.l_pid()"""
        return int._wrap(super(Flock, self).l_pid())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.Flock$Buffer org.lwjgl.system.linux.Flock.calloc(int)"""
        return Buffer._wrap(_Flock.calloc(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.Flock$Buffer org.lwjgl.system.linux.Flock.malloc(int)"""
        return Buffer._wrap(_Flock.malloc(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc() -> 'Flock':
        """public static org.lwjgl.system.linux.Flock org.lwjgl.system.linux.Flock.calloc()"""
        return Flock._wrap(_Flock.calloc())

    @overload
    def l_len(self) -> int:
        """public long org.lwjgl.system.linux.Flock.l_len()"""
        return int._wrap(super(Flock, self).l_len())

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.Flock$Buffer org.lwjgl.system.linux.Flock.create(int)"""
        return Buffer._wrap(_Flock.create(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def create() -> 'Flock':
        """public static org.lwjgl.system.linux.Flock org.lwjgl.system.linux.Flock.create()"""
        return Flock._wrap(_Flock.create())

    @staticmethod
    @overload
    def nl_whence(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Flock.nl_whence(long,short)"""
        _Flock.nl_whence(_long.valueOf(arg0), _short.valueOf(arg1))

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'Flock':
        """public static org.lwjgl.system.linux.Flock org.lwjgl.system.linux.Flock.createSafe(long)"""
        return Flock._wrap(_Flock.createSafe(_long.valueOf(arg0)))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.Flock(java.nio.ByteBuffer)"""
        val = _Flock(arg0)
        self.__wrapper = val

    @staticmethod
    @overload
    def nl_len(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.Flock.nl_len(long)"""
        return int._wrap(_Flock.nl_len(_long.valueOf(arg0)))

    @overload
    def l_whence(self) -> int:
        """public short org.lwjgl.system.linux.Flock.l_whence()"""
        return int._wrap(super(Flock, self).l_whence())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.Flock$Buffer org.lwjgl.system.linux.Flock.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_Flock.malloc(_int.valueOf(arg0), arg1))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool._wrap(super(_pyglsystem.Struct, self).isNull(_int.valueOf(arg0)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str._wrap(super(pyglsystem.Pointer$Default, self).toString()) 
 
 
# CLASS: org.lwjgl.system.linux.KernelTimespec$Buffer
from pyquantum_helper import import_once as _import_once
import java.lang.Object as _Object
_Object = _Object
from builtins import type
import org.lwjgl.system.CustomBuffer as _CustomBuffer
_CustomBuffer = _CustomBuffer
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import org.lwjgl.system.StructBuffer as _StructBuffer
_StructBuffer = _StructBuffer
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.util.Iterator as _Iterator
_Iterator = _Iterator
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
import java.util.Spliterator as _Spliterator
_Spliterator = _Spliterator
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import org.lwjgl.system.linux.KernelTimespec as _KernelTimespec_Buffer
_Buffer = _KernelTimespec_Buffer.Buffer
import java.util.Iterator as Iterator
import java.lang.Integer as _int
import java.util.stream.Stream as _Stream
_Stream = _Stream
import java.util.stream.Stream as Stream
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class Buffer():
    """org.lwjgl.system.linux.KernelTimespec.Buffer"""
 
    @staticmethod
    def _wrap(java_value: _Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Buffer__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Buffer__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).limit(_int.valueOf(arg0)))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str._wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def tv_nsec(self) -> int:
        """public long org.lwjgl.system.linux.KernelTimespec$Buffer.tv_nsec()"""
        return int._wrap(super(Buffer, self).tv_nsec())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int._wrap(super(_pyglsystem.CustomBuffer, self).address(_int.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).mark())

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.KernelTimespec$Buffer(long,int)"""
        val = _Buffer(_long.valueOf(arg0), _int.valueOf(arg1))
        self.__wrapper = val

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.KernelTimespec$Buffer(java.nio.ByteBuffer)"""
        val = _Buffer(arg0)
        self.__wrapper = val

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'._wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).stream())

    @overload
    def tv_sec(self) -> int:
        """public long org.lwjgl.system.linux.KernelTimespec$Buffer.tv_sec()"""
        return int._wrap(super(Buffer, self).tv_sec())

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).position(_int.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'._wrap(super(pyglsystem.StructBuffer, self).get())

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(arg0))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'._wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).slice())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).slice(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0), arg1))

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(_int.valueOf(arg0), arg1))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).clear())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool._wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def tv_nsec(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.KernelTimespec$Buffer org.lwjgl.system.linux.KernelTimespec$Buffer.tv_nsec(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).tv_nsec(_long.valueOf(arg0)))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int._wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(_int.valueOf(arg0), arg1))

    @overload
    def tv_sec(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.KernelTimespec$Buffer org.lwjgl.system.linux.KernelTimespec$Buffer.tv_sec(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).tv_sec(_long.valueOf(arg0)))

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(_pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(arg0)) 
 
 
# CLASS: org.lwjgl.system.linux.XMapEvent$Buffer
from pyquantum_helper import import_once as _import_once
import java.lang.Object as _Object
_Object = _Object
from builtins import type
import org.lwjgl.system.CustomBuffer as _CustomBuffer
_CustomBuffer = _CustomBuffer
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Boolean as _boolean
import org.lwjgl.system.StructBuffer as _StructBuffer
_StructBuffer = _StructBuffer
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.util.Iterator as _Iterator
_Iterator = _Iterator
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
import org.lwjgl.system.linux.XMapEvent as _XMapEvent_Buffer
_Buffer = _XMapEvent_Buffer.Buffer
import java.util.Spliterator as _Spliterator
_Spliterator = _Spliterator
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.util.Iterator as Iterator
import java.lang.Integer as _int
import java.util.stream.Stream as _Stream
_Stream = _Stream
import java.util.stream.Stream as Stream
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class Buffer():
    """org.lwjgl.system.linux.XMapEvent.Buffer"""
 
    @staticmethod
    def _wrap(java_value: _Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Buffer__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Buffer__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).limit(_int.valueOf(arg0)))

    @overload
    def override_redirect(self) -> int:
        """public int org.lwjgl.system.linux.XMapEvent$Buffer.override_redirect()"""
        return int._wrap(super(Buffer, self).override_redirect())

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XMapEvent$Buffer.display()"""
        return int._wrap(super(Buffer, self).display())

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str._wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int._wrap(super(_pyglsystem.CustomBuffer, self).address(_int.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).mark())

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XMapEvent$Buffer(long,int)"""
        val = _Buffer(_long.valueOf(arg0), _int.valueOf(arg1))
        self.__wrapper = val

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XMapEvent$Buffer org.lwjgl.system.linux.XMapEvent$Buffer.send_event(boolean)"""
        return 'Buffer'._wrap(super(_Buffer, self).send_event(_boolean.valueOf(arg0)))

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'._wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).stream())

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).position(_int.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'._wrap(super(pyglsystem.StructBuffer, self).get())

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XMapEvent$Buffer org.lwjgl.system.linux.XMapEvent$Buffer.type(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).type(_int.valueOf(arg0)))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XMapEvent$Buffer.send_event()"""
        return bool._wrap(super(Buffer, self).send_event())

    @overload
    def event(self) -> int:
        """public long org.lwjgl.system.linux.XMapEvent$Buffer.event()"""
        return int._wrap(super(Buffer, self).event())

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XMapEvent$Buffer.window()"""
        return int._wrap(super(Buffer, self).window())

    @overload
    def window(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XMapEvent$Buffer org.lwjgl.system.linux.XMapEvent$Buffer.window(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).window(_long.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def override_redirect(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XMapEvent$Buffer org.lwjgl.system.linux.XMapEvent$Buffer.override_redirect(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).override_redirect(_int.valueOf(arg0)))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XMapEvent$Buffer.type()"""
        return int._wrap(super(Buffer, self).type())

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(arg0))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'._wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(arg0))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XMapEvent$Buffer(java.nio.ByteBuffer)"""
        val = _Buffer(arg0)
        self.__wrapper = val

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).slice())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).slice(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def event(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XMapEvent$Buffer org.lwjgl.system.linux.XMapEvent$Buffer.event(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).event(_long.valueOf(arg0)))

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XMapEvent$Buffer org.lwjgl.system.linux.XMapEvent$Buffer.display(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).display(_long.valueOf(arg0)))

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0), arg1))

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(_int.valueOf(arg0), arg1))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).clear())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool._wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XMapEvent$Buffer.serial()"""
        return int._wrap(super(Buffer, self).serial())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).flip())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int._wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XMapEvent$Buffer org.lwjgl.system.linux.XMapEvent$Buffer.serial(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).serial(_long.valueOf(arg0)))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(_int.valueOf(arg0), arg1))

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(_pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(arg0)) 
 
 
# CLASS: org.lwjgl.system.linux.XPropertyEvent
from pyquantum_helper import import_once as _import_once
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _Object
_Object = _Object
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
from builtins import type
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.lang.Boolean as _boolean
import org.lwjgl.system.linux.XPropertyEvent as _XPropertyEvent_Buffer
_Buffer = _XPropertyEvent_Buffer.Buffer
import java.lang.Integer as _int
import org.lwjgl.system.linux.XPropertyEvent as _XPropertyEvent
_XPropertyEvent = _XPropertyEvent
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class XPropertyEvent():
    """org.lwjgl.system.linux.XPropertyEvent"""
 
    @staticmethod
    def _wrap(java_value: _XPropertyEvent) -> 'XPropertyEvent':
        return XPropertyEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _XPropertyEvent):
        """
        Dynamic initializer for XPropertyEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_XPropertyEvent__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_XPropertyEvent__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def time(self) -> int:
        """public long org.lwjgl.system.linux.XPropertyEvent.time()"""
        return int._wrap(super(XPropertyEvent, self).time())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XPropertyEvent.sizeof()"""
        return int._wrap(super(XPropertyEvent, self).sizeof())

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XPropertyEvent.nserial(long,long)"""
        _XPropertyEvent.nserial(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XPropertyEvent$Buffer org.lwjgl.system.linux.XPropertyEvent.callocStack(int)"""
        return Buffer._wrap(_XPropertyEvent.callocStack(_int.valueOf(arg0)))

    @overload
    def send_event(self, arg0: bool) -> 'XPropertyEvent':
        """public org.lwjgl.system.linux.XPropertyEvent org.lwjgl.system.linux.XPropertyEvent.send_event(boolean)"""
        return 'XPropertyEvent'._wrap(super(_XPropertyEvent, self).send_event(_boolean.valueOf(arg0)))

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XPropertyEvent.ndisplay(long,long)"""
        _XPropertyEvent.ndisplay(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XPropertyEvent':
        """public static org.lwjgl.system.linux.XPropertyEvent org.lwjgl.system.linux.XPropertyEvent.createSafe(long)"""
        return XPropertyEvent._wrap(_XPropertyEvent.createSafe(_long.valueOf(arg0)))

    @overload
    def display(self, arg0: int) -> 'XPropertyEvent':
        """public org.lwjgl.system.linux.XPropertyEvent org.lwjgl.system.linux.XPropertyEvent.display(long)"""
        return 'XPropertyEvent'._wrap(super(_XPropertyEvent, self).display(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def natom(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XPropertyEvent.natom(long)"""
        return int._wrap(_XPropertyEvent.natom(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XPropertyEvent$Buffer org.lwjgl.system.linux.XPropertyEvent.create(long,int)"""
        return Buffer._wrap(_XPropertyEvent.create(_long.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def window(self, arg0: int) -> 'XPropertyEvent':
        """public org.lwjgl.system.linux.XPropertyEvent org.lwjgl.system.linux.XPropertyEvent.window(long)"""
        return 'XPropertyEvent'._wrap(super(_XPropertyEvent, self).window(_long.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XPropertyEvent$Buffer org.lwjgl.system.linux.XPropertyEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XPropertyEvent.callocStack(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XPropertyEvent.ndisplay(long)"""
        return int._wrap(_XPropertyEvent.ndisplay(_long.valueOf(arg0)))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XPropertyEvent':
        """public static org.lwjgl.system.linux.XPropertyEvent org.lwjgl.system.linux.XPropertyEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XPropertyEvent._wrap(_XPropertyEvent.calloc(arg0))

    @staticmethod
    @overload
    def nwindow(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XPropertyEvent.nwindow(long)"""
        return int._wrap(_XPropertyEvent.nwindow(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack() -> 'XPropertyEvent':
        """public static org.lwjgl.system.linux.XPropertyEvent org.lwjgl.system.linux.XPropertyEvent.mallocStack()"""
        return XPropertyEvent._wrap(_XPropertyEvent.mallocStack())

    @staticmethod
    @overload
    def ntime(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XPropertyEvent.ntime(long)"""
        return int._wrap(_XPropertyEvent.ntime(_long.valueOf(arg0)))

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XPropertyEvent.window()"""
        return int._wrap(super(XPropertyEvent, self).window())

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int) -> 'XPropertyEvent':
        """public org.lwjgl.system.linux.XPropertyEvent org.lwjgl.system.linux.XPropertyEvent.set(int,long,boolean,long,long,long,long,int)"""
        return 'XPropertyEvent'._wrap(super(_XPropertyEvent, self).set(_int.valueOf(arg0), _long.valueOf(arg1), _boolean.valueOf(arg2), _long.valueOf(arg3), _long.valueOf(arg4), _long.valueOf(arg5), _long.valueOf(arg6), _int.valueOf(arg7)))

    @overload
    def time(self, arg0: int) -> 'XPropertyEvent':
        """public org.lwjgl.system.linux.XPropertyEvent org.lwjgl.system.linux.XPropertyEvent.time(long)"""
        return 'XPropertyEvent'._wrap(super(_XPropertyEvent, self).time(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XPropertyEvent$Buffer org.lwjgl.system.linux.XPropertyEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XPropertyEvent.mallocStack(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def nwindow(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XPropertyEvent.nwindow(long,long)"""
        _XPropertyEvent.nwindow(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XPropertyEvent.nsend_event(long,int)"""
        _XPropertyEvent.nsend_event(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def create(arg0: int) -> 'XPropertyEvent':
        """public static org.lwjgl.system.linux.XPropertyEvent org.lwjgl.system.linux.XPropertyEvent.create(long)"""
        return XPropertyEvent._wrap(_XPropertyEvent.create(_long.valueOf(arg0)))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @overload
    def state(self, arg0: int) -> 'XPropertyEvent':
        """public org.lwjgl.system.linux.XPropertyEvent org.lwjgl.system.linux.XPropertyEvent.state(int)"""
        return 'XPropertyEvent'._wrap(super(_XPropertyEvent, self).state(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        _Struct.validate(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), arg3)

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XPropertyEvent$Buffer org.lwjgl.system.linux.XPropertyEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XPropertyEvent.calloc(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def calloc() -> 'XPropertyEvent':
        """public static org.lwjgl.system.linux.XPropertyEvent org.lwjgl.system.linux.XPropertyEvent.calloc()"""
        return XPropertyEvent._wrap(_XPropertyEvent.calloc())

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XPropertyEvent.validate(long)"""
        _XPropertyEvent.validate(_long.valueOf(arg0))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XPropertyEvent.serial()"""
        return int._wrap(super(XPropertyEvent, self).serial())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XPropertyEvent':
        """public static org.lwjgl.system.linux.XPropertyEvent org.lwjgl.system.linux.XPropertyEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XPropertyEvent._wrap(_XPropertyEvent.malloc(arg0))

    @overload
    def serial(self, arg0: int) -> 'XPropertyEvent':
        """public org.lwjgl.system.linux.XPropertyEvent org.lwjgl.system.linux.XPropertyEvent.serial(long)"""
        return 'XPropertyEvent'._wrap(super(_XPropertyEvent, self).serial(_long.valueOf(arg0)))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).address())

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XPropertyEvent$Buffer org.lwjgl.system.linux.XPropertyEvent.createSafe(long,int)"""
        return Buffer._wrap(_XPropertyEvent.createSafe(_long.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def state(self) -> int:
        """public int org.lwjgl.system.linux.XPropertyEvent.state()"""
        return int._wrap(super(XPropertyEvent, self).state())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XPropertyEvent.nsend_event(long)"""
        return int._wrap(_XPropertyEvent.nsend_event(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XPropertyEvent.nserial(long)"""
        return int._wrap(_XPropertyEvent.nserial(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def ntime(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XPropertyEvent.ntime(long,long)"""
        _XPropertyEvent.ntime(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XPropertyEvent$Buffer org.lwjgl.system.linux.XPropertyEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XPropertyEvent.malloc(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def nstate(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XPropertyEvent.nstate(long,int)"""
        _XPropertyEvent.nstate(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def atom(self, arg0: int) -> 'XPropertyEvent':
        """public org.lwjgl.system.linux.XPropertyEvent org.lwjgl.system.linux.XPropertyEvent.atom(long)"""
        return 'XPropertyEvent'._wrap(super(_XPropertyEvent, self).atom(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nstate(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XPropertyEvent.nstate(long)"""
        return int._wrap(_XPropertyEvent.nstate(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XPropertyEvent':
        """public static org.lwjgl.system.linux.XPropertyEvent org.lwjgl.system.linux.XPropertyEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XPropertyEvent._wrap(_XPropertyEvent.mallocStack(arg0))

    @staticmethod
    @overload
    def create() -> 'XPropertyEvent':
        """public static org.lwjgl.system.linux.XPropertyEvent org.lwjgl.system.linux.XPropertyEvent.create()"""
        return XPropertyEvent._wrap(_XPropertyEvent.create())

    @staticmethod
    @overload
    def malloc() -> 'XPropertyEvent':
        """public static org.lwjgl.system.linux.XPropertyEvent org.lwjgl.system.linux.XPropertyEvent.malloc()"""
        return XPropertyEvent._wrap(_XPropertyEvent.malloc())

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XPropertyEvent$Buffer org.lwjgl.system.linux.XPropertyEvent.calloc(int)"""
        return Buffer._wrap(_XPropertyEvent.calloc(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XPropertyEvent.ntype(long)"""
        return int._wrap(_XPropertyEvent.ntype(_long.valueOf(arg0)))

    @overload
    def atom(self) -> int:
        """public long org.lwjgl.system.linux.XPropertyEvent.atom()"""
        return int._wrap(super(XPropertyEvent, self).atom())

    @overload
    def set(self, arg0: 'XPropertyEvent') -> 'XPropertyEvent':
        """public org.lwjgl.system.linux.XPropertyEvent org.lwjgl.system.linux.XPropertyEvent.set(org.lwjgl.system.linux.XPropertyEvent)"""
        return 'XPropertyEvent'._wrap(super(_XPropertyEvent, self).set(arg0))

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XPropertyEvent':
        """public static org.lwjgl.system.linux.XPropertyEvent org.lwjgl.system.linux.XPropertyEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XPropertyEvent._wrap(_XPropertyEvent.callocStack(arg0))

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XPropertyEvent.display()"""
        return int._wrap(super(XPropertyEvent, self).display())

    @staticmethod
    @overload
    def natom(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XPropertyEvent.natom(long,long)"""
        _XPropertyEvent.natom(_long.valueOf(arg0), _long.valueOf(arg1))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XPropertyEvent.type()"""
        return int._wrap(super(XPropertyEvent, self).type())

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XPropertyEvent$Buffer org.lwjgl.system.linux.XPropertyEvent.malloc(int)"""
        return Buffer._wrap(_XPropertyEvent.malloc(_int.valueOf(arg0)))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XPropertyEvent$Buffer org.lwjgl.system.linux.XPropertyEvent.create(int)"""
        return Buffer._wrap(_XPropertyEvent.create(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XPropertyEvent$Buffer org.lwjgl.system.linux.XPropertyEvent.mallocStack(int)"""
        return Buffer._wrap(_XPropertyEvent.mallocStack(_int.valueOf(arg0)))

    @overload
    def type(self, arg0: int) -> 'XPropertyEvent':
        """public org.lwjgl.system.linux.XPropertyEvent org.lwjgl.system.linux.XPropertyEvent.type(int)"""
        return 'XPropertyEvent'._wrap(super(_XPropertyEvent, self).type(_int.valueOf(arg0)))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XPropertyEvent(java.nio.ByteBuffer)"""
        val = _XPropertyEvent(arg0)
        self.__wrapper = val

    @staticmethod
    @overload
    def callocStack() -> 'XPropertyEvent':
        """public static org.lwjgl.system.linux.XPropertyEvent org.lwjgl.system.linux.XPropertyEvent.callocStack()"""
        return XPropertyEvent._wrap(_XPropertyEvent.callocStack())

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XPropertyEvent.ntype(long,int)"""
        _XPropertyEvent.ntype(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool._wrap(super(_pyglsystem.Struct, self).isNull(_int.valueOf(arg0)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str._wrap(super(pyglsystem.Pointer$Default, self).toString())

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XPropertyEvent.send_event()"""
        return bool._wrap(super(XPropertyEvent, self).send_event()) 
 
 
# CLASS: org.lwjgl.system.linux.XCreateWindowEvent
from pyquantum_helper import import_once as _import_once
from builtins import str
from pyquantum_helper import override
import org.lwjgl.system.linux.XCreateWindowEvent as _XCreateWindowEvent
_XCreateWindowEvent = _XCreateWindowEvent
import java.lang.Object as _Object
_Object = _Object
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
from builtins import type
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import org.lwjgl.system.linux.XCreateWindowEvent as _XCreateWindowEvent_Buffer
_Buffer = _XCreateWindowEvent_Buffer.Buffer
import java.lang.Boolean as _boolean
import java.lang.Integer as _int
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class XCreateWindowEvent():
    """org.lwjgl.system.linux.XCreateWindowEvent"""
 
    @staticmethod
    def _wrap(java_value: _XCreateWindowEvent) -> 'XCreateWindowEvent':
        return XCreateWindowEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _XCreateWindowEvent):
        """
        Dynamic initializer for XCreateWindowEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_XCreateWindowEvent__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_XCreateWindowEvent__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCreateWindowEvent.nsend_event(long,int)"""
        _XCreateWindowEvent.nsend_event(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XCreateWindowEvent.type()"""
        return int._wrap(super(XCreateWindowEvent, self).type())

    @staticmethod
    @overload
    def nparent(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCreateWindowEvent.nparent(long,long)"""
        _XCreateWindowEvent.nparent(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def nheight(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCreateWindowEvent.nheight(long,int)"""
        _XCreateWindowEvent.nheight(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCreateWindowEvent.ndisplay(long,long)"""
        _XCreateWindowEvent.ndisplay(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XCreateWindowEvent.nsend_event(long)"""
        return int._wrap(_XCreateWindowEvent.nsend_event(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def ny(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCreateWindowEvent.ny(long,int)"""
        _XCreateWindowEvent.ny(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def create(arg0: int) -> 'XCreateWindowEvent':
        """public static org.lwjgl.system.linux.XCreateWindowEvent org.lwjgl.system.linux.XCreateWindowEvent.create(long)"""
        return XCreateWindowEvent._wrap(_XCreateWindowEvent.create(_long.valueOf(arg0)))

    @overload
    def height(self) -> int:
        """public int org.lwjgl.system.linux.XCreateWindowEvent.height()"""
        return int._wrap(super(XCreateWindowEvent, self).height())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCreateWindowEvent.ntype(long,int)"""
        _XCreateWindowEvent.ntype(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def nparent(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XCreateWindowEvent.nparent(long)"""
        return int._wrap(_XCreateWindowEvent.nparent(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XCreateWindowEvent$Buffer org.lwjgl.system.linux.XCreateWindowEvent.mallocStack(int)"""
        return Buffer._wrap(_XCreateWindowEvent.mallocStack(_int.valueOf(arg0)))

    @overload
    def y(self) -> int:
        """public int org.lwjgl.system.linux.XCreateWindowEvent.y()"""
        return int._wrap(super(XCreateWindowEvent, self).y())

    @overload
    def send_event(self, arg0: bool) -> 'XCreateWindowEvent':
        """public org.lwjgl.system.linux.XCreateWindowEvent org.lwjgl.system.linux.XCreateWindowEvent.send_event(boolean)"""
        return 'XCreateWindowEvent'._wrap(super(_XCreateWindowEvent, self).send_event(_boolean.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @staticmethod
    @overload
    def nx(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XCreateWindowEvent.nx(long)"""
        return int._wrap(_XCreateWindowEvent.nx(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XCreateWindowEvent$Buffer org.lwjgl.system.linux.XCreateWindowEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XCreateWindowEvent.calloc(_int.valueOf(arg0), arg1))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def override_redirect(self) -> int:
        """public int org.lwjgl.system.linux.XCreateWindowEvent.override_redirect()"""
        return int._wrap(super(XCreateWindowEvent, self).override_redirect())

    @staticmethod
    @overload
    def nx(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCreateWindowEvent.nx(long,int)"""
        _XCreateWindowEvent.nx(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def x(self) -> int:
        """public int org.lwjgl.system.linux.XCreateWindowEvent.x()"""
        return int._wrap(super(XCreateWindowEvent, self).x())

    @staticmethod
    @overload
    def callocStack() -> 'XCreateWindowEvent':
        """public static org.lwjgl.system.linux.XCreateWindowEvent org.lwjgl.system.linux.XCreateWindowEvent.callocStack()"""
        return XCreateWindowEvent._wrap(_XCreateWindowEvent.callocStack())

    @staticmethod
    @overload
    def ny(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XCreateWindowEvent.ny(long)"""
        return int._wrap(_XCreateWindowEvent.ny(_long.valueOf(arg0)))

    @overload
    def width(self, arg0: int) -> 'XCreateWindowEvent':
        """public org.lwjgl.system.linux.XCreateWindowEvent org.lwjgl.system.linux.XCreateWindowEvent.width(int)"""
        return 'XCreateWindowEvent'._wrap(super(_XCreateWindowEvent, self).width(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XCreateWindowEvent$Buffer org.lwjgl.system.linux.XCreateWindowEvent.createSafe(long,int)"""
        return Buffer._wrap(_XCreateWindowEvent.createSafe(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCreateWindowEvent.nserial(long,long)"""
        _XCreateWindowEvent.nserial(_long.valueOf(arg0), _long.valueOf(arg1))

    @overload
    def parent(self, arg0: int) -> 'XCreateWindowEvent':
        """public org.lwjgl.system.linux.XCreateWindowEvent org.lwjgl.system.linux.XCreateWindowEvent.parent(long)"""
        return 'XCreateWindowEvent'._wrap(super(_XCreateWindowEvent, self).parent(_long.valueOf(arg0)))

    @overload
    def border_width(self, arg0: int) -> 'XCreateWindowEvent':
        """public org.lwjgl.system.linux.XCreateWindowEvent org.lwjgl.system.linux.XCreateWindowEvent.border_width(int)"""
        return 'XCreateWindowEvent'._wrap(super(_XCreateWindowEvent, self).border_width(_int.valueOf(arg0)))

    @overload
    def set(self, arg0: 'XCreateWindowEvent') -> 'XCreateWindowEvent':
        """public org.lwjgl.system.linux.XCreateWindowEvent org.lwjgl.system.linux.XCreateWindowEvent.set(org.lwjgl.system.linux.XCreateWindowEvent)"""
        return 'XCreateWindowEvent'._wrap(super(_XCreateWindowEvent, self).set(arg0))

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XCreateWindowEvent$Buffer org.lwjgl.system.linux.XCreateWindowEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XCreateWindowEvent.callocStack(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XCreateWindowEvent.validate(long)"""
        _XCreateWindowEvent.validate(_long.valueOf(arg0))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @staticmethod
    @overload
    def create() -> 'XCreateWindowEvent':
        """public static org.lwjgl.system.linux.XCreateWindowEvent org.lwjgl.system.linux.XCreateWindowEvent.create()"""
        return XCreateWindowEvent._wrap(_XCreateWindowEvent.create())

    @overload
    def border_width(self) -> int:
        """public int org.lwjgl.system.linux.XCreateWindowEvent.border_width()"""
        return int._wrap(super(XCreateWindowEvent, self).border_width())

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        _Struct.validate(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), arg3)

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @overload
    def y(self, arg0: int) -> 'XCreateWindowEvent':
        """public org.lwjgl.system.linux.XCreateWindowEvent org.lwjgl.system.linux.XCreateWindowEvent.y(int)"""
        return 'XCreateWindowEvent'._wrap(super(_XCreateWindowEvent, self).y(_int.valueOf(arg0)))

    @overload
    def parent(self) -> int:
        """public long org.lwjgl.system.linux.XCreateWindowEvent.parent()"""
        return int._wrap(super(XCreateWindowEvent, self).parent())

    @staticmethod
    @overload
    def nwidth(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCreateWindowEvent.nwidth(long,int)"""
        _XCreateWindowEvent.nwidth(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XCreateWindowEvent.send_event()"""
        return bool._wrap(super(XCreateWindowEvent, self).send_event())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XCreateWindowEvent$Buffer org.lwjgl.system.linux.XCreateWindowEvent.create(int)"""
        return Buffer._wrap(_XCreateWindowEvent.create(_int.valueOf(arg0)))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XCreateWindowEvent.serial()"""
        return int._wrap(super(XCreateWindowEvent, self).serial())

    @staticmethod
    @overload
    def nborder_width(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCreateWindowEvent.nborder_width(long,int)"""
        _XCreateWindowEvent.nborder_width(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def noverride_redirect(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCreateWindowEvent.noverride_redirect(long,int)"""
        _XCreateWindowEvent.noverride_redirect(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XCreateWindowEvent$Buffer org.lwjgl.system.linux.XCreateWindowEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XCreateWindowEvent.mallocStack(_int.valueOf(arg0), arg1))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).address())

    @staticmethod
    @overload
    def calloc() -> 'XCreateWindowEvent':
        """public static org.lwjgl.system.linux.XCreateWindowEvent org.lwjgl.system.linux.XCreateWindowEvent.calloc()"""
        return XCreateWindowEvent._wrap(_XCreateWindowEvent.calloc())

    @staticmethod
    @overload
    def noverride_redirect(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XCreateWindowEvent.noverride_redirect(long)"""
        return int._wrap(_XCreateWindowEvent.noverride_redirect(_long.valueOf(arg0)))

    @overload
    def type(self, arg0: int) -> 'XCreateWindowEvent':
        """public org.lwjgl.system.linux.XCreateWindowEvent org.lwjgl.system.linux.XCreateWindowEvent.type(int)"""
        return 'XCreateWindowEvent'._wrap(super(_XCreateWindowEvent, self).type(_int.valueOf(arg0)))

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XCreateWindowEvent.window()"""
        return int._wrap(super(XCreateWindowEvent, self).window())

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XCreateWindowEvent$Buffer org.lwjgl.system.linux.XCreateWindowEvent.malloc(int)"""
        return Buffer._wrap(_XCreateWindowEvent.malloc(_int.valueOf(arg0)))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def width(self) -> int:
        """public int org.lwjgl.system.linux.XCreateWindowEvent.width()"""
        return int._wrap(super(XCreateWindowEvent, self).width())

    @overload
    def height(self, arg0: int) -> 'XCreateWindowEvent':
        """public org.lwjgl.system.linux.XCreateWindowEvent org.lwjgl.system.linux.XCreateWindowEvent.height(int)"""
        return 'XCreateWindowEvent'._wrap(super(_XCreateWindowEvent, self).height(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def nborder_width(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XCreateWindowEvent.nborder_width(long)"""
        return int._wrap(_XCreateWindowEvent.nborder_width(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XCreateWindowEvent':
        """public static org.lwjgl.system.linux.XCreateWindowEvent org.lwjgl.system.linux.XCreateWindowEvent.createSafe(long)"""
        return XCreateWindowEvent._wrap(_XCreateWindowEvent.createSafe(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nwidth(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XCreateWindowEvent.nwidth(long)"""
        return int._wrap(_XCreateWindowEvent.nwidth(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nheight(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XCreateWindowEvent.nheight(long)"""
        return int._wrap(_XCreateWindowEvent.nheight(_long.valueOf(arg0)))

    @overload
    def display(self, arg0: int) -> 'XCreateWindowEvent':
        """public org.lwjgl.system.linux.XCreateWindowEvent org.lwjgl.system.linux.XCreateWindowEvent.display(long)"""
        return 'XCreateWindowEvent'._wrap(super(_XCreateWindowEvent, self).display(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XCreateWindowEvent$Buffer org.lwjgl.system.linux.XCreateWindowEvent.callocStack(int)"""
        return Buffer._wrap(_XCreateWindowEvent.callocStack(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XCreateWindowEvent$Buffer org.lwjgl.system.linux.XCreateWindowEvent.calloc(int)"""
        return Buffer._wrap(_XCreateWindowEvent.calloc(_int.valueOf(arg0)))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XCreateWindowEvent.sizeof()"""
        return int._wrap(super(XCreateWindowEvent, self).sizeof())

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XCreateWindowEvent.ndisplay(long)"""
        return int._wrap(_XCreateWindowEvent.ndisplay(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XCreateWindowEvent':
        """public static org.lwjgl.system.linux.XCreateWindowEvent org.lwjgl.system.linux.XCreateWindowEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XCreateWindowEvent._wrap(_XCreateWindowEvent.calloc(arg0))

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XCreateWindowEvent.nserial(long)"""
        return int._wrap(_XCreateWindowEvent.nserial(_long.valueOf(arg0)))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XCreateWindowEvent(java.nio.ByteBuffer)"""
        val = _XCreateWindowEvent(arg0)
        self.__wrapper = val

    @staticmethod
    @overload
    def nwindow(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCreateWindowEvent.nwindow(long,long)"""
        _XCreateWindowEvent.nwindow(_long.valueOf(arg0), _long.valueOf(arg1))

    @overload
    def override_redirect(self, arg0: int) -> 'XCreateWindowEvent':
        """public org.lwjgl.system.linux.XCreateWindowEvent org.lwjgl.system.linux.XCreateWindowEvent.override_redirect(int)"""
        return 'XCreateWindowEvent'._wrap(super(_XCreateWindowEvent, self).override_redirect(_int.valueOf(arg0)))

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XCreateWindowEvent.display()"""
        return int._wrap(super(XCreateWindowEvent, self).display())

    @overload
    def serial(self, arg0: int) -> 'XCreateWindowEvent':
        """public org.lwjgl.system.linux.XCreateWindowEvent org.lwjgl.system.linux.XCreateWindowEvent.serial(long)"""
        return 'XCreateWindowEvent'._wrap(super(_XCreateWindowEvent, self).serial(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XCreateWindowEvent':
        """public static org.lwjgl.system.linux.XCreateWindowEvent org.lwjgl.system.linux.XCreateWindowEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XCreateWindowEvent._wrap(_XCreateWindowEvent.malloc(arg0))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XCreateWindowEvent$Buffer org.lwjgl.system.linux.XCreateWindowEvent.create(long,int)"""
        return Buffer._wrap(_XCreateWindowEvent.create(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XCreateWindowEvent$Buffer org.lwjgl.system.linux.XCreateWindowEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XCreateWindowEvent.malloc(_int.valueOf(arg0), arg1))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def malloc() -> 'XCreateWindowEvent':
        """public static org.lwjgl.system.linux.XCreateWindowEvent org.lwjgl.system.linux.XCreateWindowEvent.malloc()"""
        return XCreateWindowEvent._wrap(_XCreateWindowEvent.malloc())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: int, arg10: int, arg11: int) -> 'XCreateWindowEvent':
        """public org.lwjgl.system.linux.XCreateWindowEvent org.lwjgl.system.linux.XCreateWindowEvent.set(int,long,boolean,long,long,long,int,int,int,int,int,int)"""
        return 'XCreateWindowEvent'._wrap(super(_XCreateWindowEvent, self).set(_int.valueOf(arg0), _long.valueOf(arg1), _boolean.valueOf(arg2), _long.valueOf(arg3), _long.valueOf(arg4), _long.valueOf(arg5), _int.valueOf(arg6), _int.valueOf(arg7), _int.valueOf(arg8), _int.valueOf(arg9), _int.valueOf(arg10), _int.valueOf(arg11)))

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XCreateWindowEvent.ntype(long)"""
        return int._wrap(_XCreateWindowEvent.ntype(_long.valueOf(arg0)))

    @overload
    def x(self, arg0: int) -> 'XCreateWindowEvent':
        """public org.lwjgl.system.linux.XCreateWindowEvent org.lwjgl.system.linux.XCreateWindowEvent.x(int)"""
        return 'XCreateWindowEvent'._wrap(super(_XCreateWindowEvent, self).x(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XCreateWindowEvent':
        """public static org.lwjgl.system.linux.XCreateWindowEvent org.lwjgl.system.linux.XCreateWindowEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XCreateWindowEvent._wrap(_XCreateWindowEvent.mallocStack(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool._wrap(super(_pyglsystem.Struct, self).isNull(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def nwindow(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XCreateWindowEvent.nwindow(long)"""
        return int._wrap(_XCreateWindowEvent.nwindow(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XCreateWindowEvent':
        """public static org.lwjgl.system.linux.XCreateWindowEvent org.lwjgl.system.linux.XCreateWindowEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XCreateWindowEvent._wrap(_XCreateWindowEvent.callocStack(arg0))

    @staticmethod
    @overload
    def mallocStack() -> 'XCreateWindowEvent':
        """public static org.lwjgl.system.linux.XCreateWindowEvent org.lwjgl.system.linux.XCreateWindowEvent.mallocStack()"""
        return XCreateWindowEvent._wrap(_XCreateWindowEvent.mallocStack())

    @overload
    def window(self, arg0: int) -> 'XCreateWindowEvent':
        """public org.lwjgl.system.linux.XCreateWindowEvent org.lwjgl.system.linux.XCreateWindowEvent.window(long)"""
        return 'XCreateWindowEvent'._wrap(super(_XCreateWindowEvent, self).window(_long.valueOf(arg0)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str._wrap(super(pyglsystem.Pointer$Default, self).toString()) 
 
 
# CLASS: org.lwjgl.system.linux.KernelTimespec
from pyquantum_helper import import_once as _import_once
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _Object
_Object = _Object
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
from builtins import type
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import org.lwjgl.system.linux.KernelTimespec as _KernelTimespec
_KernelTimespec = _KernelTimespec
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import org.lwjgl.system.linux.KernelTimespec as _KernelTimespec_Buffer
_Buffer = _KernelTimespec_Buffer.Buffer
import java.lang.Integer as _int
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class KernelTimespec():
    """org.lwjgl.system.linux.KernelTimespec"""
 
    @staticmethod
    def _wrap(java_value: _KernelTimespec) -> 'KernelTimespec':
        return KernelTimespec(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _KernelTimespec):
        """
        Dynamic initializer for KernelTimespec.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_KernelTimespec__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_KernelTimespec__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def ntv_nsec(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.KernelTimespec.ntv_nsec(long,long)"""
        _KernelTimespec.ntv_nsec(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def create() -> 'KernelTimespec':
        """public static org.lwjgl.system.linux.KernelTimespec org.lwjgl.system.linux.KernelTimespec.create()"""
        return KernelTimespec._wrap(_KernelTimespec.create())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.KernelTimespec.sizeof()"""
        return int._wrap(super(KernelTimespec, self).sizeof())

    @overload
    def tv_nsec(self, arg0: int) -> 'KernelTimespec':
        """public org.lwjgl.system.linux.KernelTimespec org.lwjgl.system.linux.KernelTimespec.tv_nsec(long)"""
        return 'KernelTimespec'._wrap(super(_KernelTimespec, self).tv_nsec(_long.valueOf(arg0)))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def set(self, arg0: 'KernelTimespec') -> 'KernelTimespec':
        """public org.lwjgl.system.linux.KernelTimespec org.lwjgl.system.linux.KernelTimespec.set(org.lwjgl.system.linux.KernelTimespec)"""
        return 'KernelTimespec'._wrap(super(_KernelTimespec, self).set(arg0))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'KernelTimespec':
        """public static org.lwjgl.system.linux.KernelTimespec org.lwjgl.system.linux.KernelTimespec.calloc(org.lwjgl.system.MemoryStack)"""
        return KernelTimespec._wrap(_KernelTimespec.calloc(arg0))

    @staticmethod
    @overload
    def calloc() -> 'KernelTimespec':
        """public static org.lwjgl.system.linux.KernelTimespec org.lwjgl.system.linux.KernelTimespec.calloc()"""
        return KernelTimespec._wrap(_KernelTimespec.calloc())

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.KernelTimespec$Buffer org.lwjgl.system.linux.KernelTimespec.createSafe(long,int)"""
        return Buffer._wrap(_KernelTimespec.createSafe(_long.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def tv_sec(self, arg0: int) -> 'KernelTimespec':
        """public org.lwjgl.system.linux.KernelTimespec org.lwjgl.system.linux.KernelTimespec.tv_sec(long)"""
        return 'KernelTimespec'._wrap(super(_KernelTimespec, self).tv_sec(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.KernelTimespec$Buffer org.lwjgl.system.linux.KernelTimespec.create(int)"""
        return Buffer._wrap(_KernelTimespec.create(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'KernelTimespec':
        """public static org.lwjgl.system.linux.KernelTimespec org.lwjgl.system.linux.KernelTimespec.create(long)"""
        return KernelTimespec._wrap(_KernelTimespec.create(_long.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.KernelTimespec(java.nio.ByteBuffer)"""
        val = _KernelTimespec(arg0)
        self.__wrapper = val

    @overload
    def set(self, arg0: int, arg1: int) -> 'KernelTimespec':
        """public org.lwjgl.system.linux.KernelTimespec org.lwjgl.system.linux.KernelTimespec.set(long,long)"""
        return 'KernelTimespec'._wrap(super(_KernelTimespec, self).set(_long.valueOf(arg0), _long.valueOf(arg1)))

    @staticmethod
    @overload
    def ntv_sec(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.KernelTimespec.ntv_sec(long,long)"""
        _KernelTimespec.ntv_sec(_long.valueOf(arg0), _long.valueOf(arg1))

    @overload
    def tv_sec(self) -> int:
        """public long org.lwjgl.system.linux.KernelTimespec.tv_sec()"""
        return int._wrap(super(KernelTimespec, self).tv_sec())

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.KernelTimespec$Buffer org.lwjgl.system.linux.KernelTimespec.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_KernelTimespec.calloc(_int.valueOf(arg0), arg1))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'KernelTimespec':
        """public static org.lwjgl.system.linux.KernelTimespec org.lwjgl.system.linux.KernelTimespec.malloc(org.lwjgl.system.MemoryStack)"""
        return KernelTimespec._wrap(_KernelTimespec.malloc(arg0))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.KernelTimespec$Buffer org.lwjgl.system.linux.KernelTimespec.create(long,int)"""
        return Buffer._wrap(_KernelTimespec.create(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def ntv_sec(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.KernelTimespec.ntv_sec(long)"""
        return int._wrap(_KernelTimespec.ntv_sec(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        _Struct.validate(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), arg3)

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.KernelTimespec$Buffer org.lwjgl.system.linux.KernelTimespec.malloc(int)"""
        return Buffer._wrap(_KernelTimespec.malloc(_int.valueOf(arg0)))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.KernelTimespec$Buffer org.lwjgl.system.linux.KernelTimespec.calloc(int)"""
        return Buffer._wrap(_KernelTimespec.calloc(_int.valueOf(arg0)))

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool._wrap(super(_pyglsystem.Struct, self).isNull(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'KernelTimespec':
        """public static org.lwjgl.system.linux.KernelTimespec org.lwjgl.system.linux.KernelTimespec.createSafe(long)"""
        return KernelTimespec._wrap(_KernelTimespec.createSafe(_long.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def malloc() -> 'KernelTimespec':
        """public static org.lwjgl.system.linux.KernelTimespec org.lwjgl.system.linux.KernelTimespec.malloc()"""
        return KernelTimespec._wrap(_KernelTimespec.malloc())

    @staticmethod
    @overload
    def ntv_nsec(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.KernelTimespec.ntv_nsec(long)"""
        return int._wrap(_KernelTimespec.ntv_nsec(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.KernelTimespec$Buffer org.lwjgl.system.linux.KernelTimespec.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_KernelTimespec.malloc(_int.valueOf(arg0), arg1))

    @overload
    def tv_nsec(self) -> int:
        """public long org.lwjgl.system.linux.KernelTimespec.tv_nsec()"""
        return int._wrap(super(KernelTimespec, self).tv_nsec())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str._wrap(super(pyglsystem.Pointer$Default, self).toString())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).address()) 
 
 
# CLASS: org.lwjgl.system.linux.XCirculateRequestEvent$Buffer
from pyquantum_helper import import_once as _import_once
import java.lang.Object as _Object
_Object = _Object
from builtins import type
import org.lwjgl.system.CustomBuffer as _CustomBuffer
_CustomBuffer = _CustomBuffer
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Boolean as _boolean
import org.lwjgl.system.StructBuffer as _StructBuffer
_StructBuffer = _StructBuffer
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.util.Iterator as _Iterator
_Iterator = _Iterator
from builtins import bool
import org.lwjgl.system.linux.XCirculateRequestEvent as _XCirculateRequestEvent_Buffer
_Buffer = _XCirculateRequestEvent_Buffer.Buffer
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
import java.util.Spliterator as _Spliterator
_Spliterator = _Spliterator
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.util.Iterator as Iterator
import java.lang.Integer as _int
import java.util.stream.Stream as _Stream
_Stream = _Stream
import java.util.stream.Stream as Stream
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class Buffer():
    """org.lwjgl.system.linux.XCirculateRequestEvent.Buffer"""
 
    @staticmethod
    def _wrap(java_value: _Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Buffer__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Buffer__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).limit(_int.valueOf(arg0)))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address0())

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XCirculateRequestEvent$Buffer.window()"""
        return int._wrap(super(Buffer, self).window())

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCirculateRequestEvent$Buffer org.lwjgl.system.linux.XCirculateRequestEvent$Buffer.display(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).display(_long.valueOf(arg0)))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address())

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XCirculateRequestEvent$Buffer.serial()"""
        return int._wrap(super(Buffer, self).serial())

    @overload
    def parent(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCirculateRequestEvent$Buffer org.lwjgl.system.linux.XCirculateRequestEvent$Buffer.parent(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).parent(_long.valueOf(arg0)))

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str._wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def window(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCirculateRequestEvent$Buffer org.lwjgl.system.linux.XCirculateRequestEvent$Buffer.window(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).window(_long.valueOf(arg0)))

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int._wrap(super(_pyglsystem.CustomBuffer, self).address(_int.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).mark())

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XCirculateRequestEvent$Buffer.send_event()"""
        return bool._wrap(super(Buffer, self).send_event())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'._wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).stream())

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).position(_int.valueOf(arg0)))

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCirculateRequestEvent$Buffer org.lwjgl.system.linux.XCirculateRequestEvent$Buffer.serial(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).serial(_long.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'._wrap(super(pyglsystem.StructBuffer, self).get())

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XCirculateRequestEvent$Buffer(long,int)"""
        val = _Buffer(_long.valueOf(arg0), _int.valueOf(arg1))
        self.__wrapper = val

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCirculateRequestEvent$Buffer org.lwjgl.system.linux.XCirculateRequestEvent$Buffer.type(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).type(_int.valueOf(arg0)))

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(arg0))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'._wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XCirculateRequestEvent$Buffer(java.nio.ByteBuffer)"""
        val = _Buffer(arg0)
        self.__wrapper = val

    @overload
    def place(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCirculateRequestEvent$Buffer org.lwjgl.system.linux.XCirculateRequestEvent$Buffer.place(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).place(_int.valueOf(arg0)))

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(arg0))

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XCirculateRequestEvent$Buffer org.lwjgl.system.linux.XCirculateRequestEvent$Buffer.send_event(boolean)"""
        return 'Buffer'._wrap(super(_Buffer, self).send_event(_boolean.valueOf(arg0)))

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).slice())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).slice(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0), arg1))

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(_int.valueOf(arg0), arg1))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).clear())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool._wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @overload
    def parent(self) -> int:
        """public long org.lwjgl.system.linux.XCirculateRequestEvent$Buffer.parent()"""
        return int._wrap(super(Buffer, self).parent())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).flip())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int._wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XCirculateRequestEvent$Buffer.type()"""
        return int._wrap(super(Buffer, self).type())

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(_int.valueOf(arg0), arg1))

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XCirculateRequestEvent$Buffer.display()"""
        return int._wrap(super(Buffer, self).display())

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(_pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @overload
    def place(self) -> int:
        """public int org.lwjgl.system.linux.XCirculateRequestEvent$Buffer.place()"""
        return int._wrap(super(Buffer, self).place())

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(arg0)) 
 
 
# CLASS: org.lwjgl.system.linux.Statx
from pyquantum_helper import import_once as _import_once
import java.lang.Object as _Object
_Object = _Object
from builtins import type
import org.lwjgl.system.linux.Statx as _Statx_Buffer
_Buffer = _Statx_Buffer.Buffer
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import java.nio.LongBuffer as _LongBuffer
_LongBuffer = _LongBuffer
import java.nio.ShortBuffer as ShortBuffer
import java.lang.Short as _short
import java.util.function.Consumer as Consumer
import org.lwjgl.system.linux.StatxTimestamp as _StatxTimestamp
_StatxTimestamp = _StatxTimestamp
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.nio.ShortBuffer as _ShortBuffer
_ShortBuffer = _ShortBuffer
import org.lwjgl.system.linux.Statx as _Statx
_Statx = _Statx
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
import java.nio.LongBuffer as LongBuffer
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.lang.Integer as _int
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class Statx():
    """org.lwjgl.system.linux.Statx"""
 
    @staticmethod
    def _wrap(java_value: _Statx) -> 'Statx':
        return Statx(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Statx):
        """
        Dynamic initializer for Statx.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Statx__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Statx__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'Statx':
        """public static org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.malloc(org.lwjgl.system.MemoryStack)"""
        return Statx._wrap(_Statx.malloc(arg0))

    @overload
    def stx_ino(self, arg0: int) -> 'Statx':
        """public org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.stx_ino(long)"""
        return 'Statx'._wrap(super(_Statx, self).stx_ino(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nstx_mtime(arg0: int) -> 'StatxTimestamp':
        """public static org.lwjgl.system.linux.StatxTimestamp org.lwjgl.system.linux.Statx.nstx_mtime(long)"""
        return StatxTimestamp._wrap(_Statx.nstx_mtime(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nstx_rdev_minor(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Statx.nstx_rdev_minor(long,int)"""
        _Statx.nstx_rdev_minor(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.Statx$Buffer org.lwjgl.system.linux.Statx.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_Statx.calloc(_int.valueOf(arg0), arg1))

    @overload
    def stx_mode(self, arg0: int) -> 'Statx':
        """public org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.stx_mode(short)"""
        return 'Statx'._wrap(super(_Statx, self).stx_mode(_short.valueOf(arg0)))

    @staticmethod
    @overload
    def nstx_attributes_mask(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Statx.nstx_attributes_mask(long,long)"""
        _Statx.nstx_attributes_mask(_long.valueOf(arg0), _long.valueOf(arg1))

    @overload
    def stx_ctime(self) -> 'StatxTimestamp':
        """public org.lwjgl.system.linux.StatxTimestamp org.lwjgl.system.linux.Statx.stx_ctime()"""
        return 'StatxTimestamp'._wrap(super(Statx, self).stx_ctime())

    @staticmethod
    @overload
    def nstx_mode(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Statx.nstx_mode(long,short)"""
        _Statx.nstx_mode(_long.valueOf(arg0), _short.valueOf(arg1))

    @staticmethod
    @overload
    def nstx_mask(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Statx.nstx_mask(long,int)"""
        _Statx.nstx_mask(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def nstx_size(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.Statx.nstx_size(long)"""
        return int._wrap(_Statx.nstx_size(_long.valueOf(arg0)))

    @overload
    def stx_uid(self) -> int:
        """public int org.lwjgl.system.linux.Statx.stx_uid()"""
        return int._wrap(super(Statx, self).stx_uid())

    @overload
    def stx_dev_minor(self) -> int:
        """public int org.lwjgl.system.linux.Statx.stx_dev_minor()"""
        return int._wrap(super(Statx, self).stx_dev_minor())

    @overload
    def stx_mask(self, arg0: int) -> 'Statx':
        """public org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.stx_mask(int)"""
        return 'Statx'._wrap(super(_Statx, self).stx_mask(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def nstx_size(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Statx.nstx_size(long,long)"""
        _Statx.nstx_size(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def nstx_rdev_minor(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.Statx.nstx_rdev_minor(long)"""
        return int._wrap(_Statx.nstx_rdev_minor(_long.valueOf(arg0)))

    @overload
    def stx_dev_minor(self, arg0: int) -> 'Statx':
        """public org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.stx_dev_minor(int)"""
        return 'Statx'._wrap(super(_Statx, self).stx_dev_minor(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def nstx_blocks(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.Statx.nstx_blocks(long)"""
        return int._wrap(_Statx.nstx_blocks(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nstx_dev_minor(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Statx.nstx_dev_minor(long,int)"""
        _Statx.nstx_dev_minor(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def n__spare2(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.Statx.n__spare2(long)"""
        return int._wrap(_Statx.n__spare2(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nstx_gid(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Statx.nstx_gid(long,int)"""
        _Statx.nstx_gid(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def nstx_dev_major(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Statx.nstx_dev_major(long,int)"""
        _Statx.nstx_dev_major(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        _Struct.validate(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), arg3)

    @staticmethod
    @overload
    def nstx_ino(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Statx.nstx_ino(long,long)"""
        _Statx.nstx_ino(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def nstx_uid(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.Statx.nstx_uid(long)"""
        return int._wrap(_Statx.nstx_uid(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nstx_atime(arg0: int, arg1: 'StatxTimestamp'):
        """public static void org.lwjgl.system.linux.Statx.nstx_atime(long,org.lwjgl.system.linux.StatxTimestamp)"""
        _Statx.nstx_atime(_long.valueOf(arg0), arg1)

    @overload
    def stx_ctime(self, arg0: 'StatxTimestamp') -> 'Statx':
        """public org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.stx_ctime(org.lwjgl.system.linux.StatxTimestamp)"""
        return 'Statx'._wrap(super(_Statx, self).stx_ctime(arg0))

    @staticmethod
    @overload
    def nstx_dev_major(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.Statx.nstx_dev_major(long)"""
        return int._wrap(_Statx.nstx_dev_major(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nstx_gid(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.Statx.nstx_gid(long)"""
        return int._wrap(_Statx.nstx_gid(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nstx_attributes(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Statx.nstx_attributes(long,long)"""
        _Statx.nstx_attributes(_long.valueOf(arg0), _long.valueOf(arg1))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def calloc() -> 'Statx':
        """public static org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.calloc()"""
        return Statx._wrap(_Statx.calloc())

    @staticmethod
    @overload
    def malloc() -> 'Statx':
        """public static org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.malloc()"""
        return Statx._wrap(_Statx.malloc())

    @overload
    def stx_nlink(self, arg0: int) -> 'Statx':
        """public org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.stx_nlink(int)"""
        return 'Statx'._wrap(super(_Statx, self).stx_nlink(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.Statx$Buffer org.lwjgl.system.linux.Statx.create(long,int)"""
        return Buffer._wrap(_Statx.create(_long.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def stx_blocks(self) -> int:
        """public long org.lwjgl.system.linux.Statx.stx_blocks()"""
        return int._wrap(super(Statx, self).stx_blocks())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.Statx(java.nio.ByteBuffer)"""
        val = _Statx(arg0)
        self.__wrapper = val

    @overload
    def stx_blksize(self, arg0: int) -> 'Statx':
        """public org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.stx_blksize(int)"""
        return 'Statx'._wrap(super(_Statx, self).stx_blksize(_int.valueOf(arg0)))

    @overload
    def stx_mtime(self) -> 'StatxTimestamp':
        """public org.lwjgl.system.linux.StatxTimestamp org.lwjgl.system.linux.Statx.stx_mtime()"""
        return 'StatxTimestamp'._wrap(super(Statx, self).stx_mtime())

    @overload
    def stx_ctime(self, arg0: 'Consumer') -> 'Statx':
        """public org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.stx_ctime(java.util.function.Consumer<org.lwjgl.system.linux.StatxTimestamp>)"""
        return 'Statx'._wrap(super(_Statx, self).stx_ctime(arg0))

    @staticmethod
    @overload
    def n__spare3(arg0: int) -> 'LongBuffer':
        """public static java.nio.LongBuffer org.lwjgl.system.linux.Statx.n__spare3(long)"""
        return LongBuffer._wrap(_Statx.n__spare3(_long.valueOf(arg0)))

    @overload
    def stx_atime(self, arg0: 'StatxTimestamp') -> 'Statx':
        """public org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.stx_atime(org.lwjgl.system.linux.StatxTimestamp)"""
        return 'Statx'._wrap(super(_Statx, self).stx_atime(arg0))

    @overload
    def stx_btime(self, arg0: 'Consumer') -> 'Statx':
        """public org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.stx_btime(java.util.function.Consumer<org.lwjgl.system.linux.StatxTimestamp>)"""
        return 'Statx'._wrap(super(_Statx, self).stx_btime(arg0))

    @staticmethod
    @overload
    def n__spare3(arg0: int, arg1: int) -> int:
        """public static long org.lwjgl.system.linux.Statx.n__spare3(long,int)"""
        return int._wrap(_Statx.n__spare3(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def nstx_mtime(arg0: int, arg1: 'StatxTimestamp'):
        """public static void org.lwjgl.system.linux.Statx.nstx_mtime(long,org.lwjgl.system.linux.StatxTimestamp)"""
        _Statx.nstx_mtime(_long.valueOf(arg0), arg1)

    @overload
    def stx_atime(self, arg0: 'Consumer') -> 'Statx':
        """public org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.stx_atime(java.util.function.Consumer<org.lwjgl.system.linux.StatxTimestamp>)"""
        return 'Statx'._wrap(super(_Statx, self).stx_atime(arg0))

    @staticmethod
    @overload
    def n__spare2(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Statx.n__spare2(long,long)"""
        _Statx.n__spare2(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def nstx_attributes_mask(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.Statx.nstx_attributes_mask(long)"""
        return int._wrap(_Statx.nstx_attributes_mask(_long.valueOf(arg0)))

    @overload
    def stx_rdev_minor(self) -> int:
        """public int org.lwjgl.system.linux.Statx.stx_rdev_minor()"""
        return int._wrap(super(Statx, self).stx_rdev_minor())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @overload
    def stx_btime(self) -> 'StatxTimestamp':
        """public org.lwjgl.system.linux.StatxTimestamp org.lwjgl.system.linux.Statx.stx_btime()"""
        return 'StatxTimestamp'._wrap(super(Statx, self).stx_btime())

    @staticmethod
    @overload
    def n__spare0(arg0: int, arg1: int) -> int:
        """public static short org.lwjgl.system.linux.Statx.n__spare0(long,int)"""
        return int._wrap(_Statx.n__spare0(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def nstx_dev_minor(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.Statx.nstx_dev_minor(long)"""
        return int._wrap(_Statx.nstx_dev_minor(_long.valueOf(arg0)))

    @overload
    def stx_mnt_id(self) -> int:
        """public long org.lwjgl.system.linux.Statx.stx_mnt_id()"""
        return int._wrap(super(Statx, self).stx_mnt_id())

    @staticmethod
    @overload
    def nstx_btime(arg0: int) -> 'StatxTimestamp':
        """public static org.lwjgl.system.linux.StatxTimestamp org.lwjgl.system.linux.Statx.nstx_btime(long)"""
        return StatxTimestamp._wrap(_Statx.nstx_btime(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'Statx':
        """public static org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.calloc(org.lwjgl.system.MemoryStack)"""
        return Statx._wrap(_Statx.calloc(arg0))

    @overload
    def stx_uid(self, arg0: int) -> 'Statx':
        """public org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.stx_uid(int)"""
        return 'Statx'._wrap(super(_Statx, self).stx_uid(_int.valueOf(arg0)))

    @overload
    def stx_ino(self) -> int:
        """public long org.lwjgl.system.linux.Statx.stx_ino()"""
        return int._wrap(super(Statx, self).stx_ino())

    @staticmethod
    @overload
    def nstx_blocks(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Statx.nstx_blocks(long,long)"""
        _Statx.nstx_blocks(_long.valueOf(arg0), _long.valueOf(arg1))

    @overload
    def stx_gid(self, arg0: int) -> 'Statx':
        """public org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.stx_gid(int)"""
        return 'Statx'._wrap(super(_Statx, self).stx_gid(_int.valueOf(arg0)))

    @overload
    def stx_size(self) -> int:
        """public long org.lwjgl.system.linux.Statx.stx_size()"""
        return int._wrap(super(Statx, self).stx_size())

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool._wrap(super(_pyglsystem.Struct, self).isNull(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def n__spare3(arg0: int, arg1: int, arg2: int):
        """public static void org.lwjgl.system.linux.Statx.n__spare3(long,int,long)"""
        _Statx.n__spare3(_long.valueOf(arg0), _int.valueOf(arg1), _long.valueOf(arg2))

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.Statx$Buffer org.lwjgl.system.linux.Statx.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_Statx.malloc(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def nstx_uid(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Statx.nstx_uid(long,int)"""
        _Statx.nstx_uid(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def nstx_attributes(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.Statx.nstx_attributes(long)"""
        return int._wrap(_Statx.nstx_attributes(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def n__spare0(arg0: int, arg1: int, arg2: int):
        """public static void org.lwjgl.system.linux.Statx.n__spare0(long,int,short)"""
        _Statx.n__spare0(_long.valueOf(arg0), _int.valueOf(arg1), _short.valueOf(arg2))

    @overload
    def stx_dev_major(self) -> int:
        """public int org.lwjgl.system.linux.Statx.stx_dev_major()"""
        return int._wrap(super(Statx, self).stx_dev_major())

    @overload
    def stx_gid(self) -> int:
        """public int org.lwjgl.system.linux.Statx.stx_gid()"""
        return int._wrap(super(Statx, self).stx_gid())

    @overload
    def set(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: int, arg10: int, arg11: 'StatxTimestamp', arg12: 'StatxTimestamp', arg13: 'StatxTimestamp', arg14: 'StatxTimestamp', arg15: int, arg16: int, arg17: int, arg18: int, arg19: int) -> 'Statx':
        """public org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.set(int,int,long,int,int,int,short,long,long,long,long,org.lwjgl.system.linux.StatxTimestamp,org.lwjgl.system.linux.StatxTimestamp,org.lwjgl.system.linux.StatxTimestamp,org.lwjgl.system.linux.StatxTimestamp,int,int,int,int,long)"""
        return 'Statx'._wrap(super(_Statx, self).set(_int.valueOf(arg0), _int.valueOf(arg1), _long.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4), _int.valueOf(arg5), _short.valueOf(arg6), _long.valueOf(arg7), _long.valueOf(arg8), _long.valueOf(arg9), _long.valueOf(arg10), arg11, arg12, arg13, arg14, _int.valueOf(arg15), _int.valueOf(arg16), _int.valueOf(arg17), _int.valueOf(arg18), _long.valueOf(arg19)))

    @staticmethod
    @overload
    def nstx_mnt_id(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.Statx.nstx_mnt_id(long)"""
        return int._wrap(_Statx.nstx_mnt_id(_long.valueOf(arg0)))

    @overload
    def stx_attributes_mask(self, arg0: int) -> 'Statx':
        """public org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.stx_attributes_mask(long)"""
        return 'Statx'._wrap(super(_Statx, self).stx_attributes_mask(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nstx_nlink(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Statx.nstx_nlink(long,int)"""
        _Statx.nstx_nlink(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def set(self, arg0: 'Statx') -> 'Statx':
        """public org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.set(org.lwjgl.system.linux.Statx)"""
        return 'Statx'._wrap(super(_Statx, self).set(arg0))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.Statx.sizeof()"""
        return int._wrap(super(Statx, self).sizeof())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @staticmethod
    @overload
    def n__spare0(arg0: int) -> 'ShortBuffer':
        """public static java.nio.ShortBuffer org.lwjgl.system.linux.Statx.n__spare0(long)"""
        return ShortBuffer._wrap(_Statx.n__spare0(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nstx_mode(arg0: int) -> int:
        """public static short org.lwjgl.system.linux.Statx.nstx_mode(long)"""
        return int._wrap(_Statx.nstx_mode(_long.valueOf(arg0)))

    @overload
    def stx_rdev_minor(self, arg0: int) -> 'Statx':
        """public org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.stx_rdev_minor(int)"""
        return 'Statx'._wrap(super(_Statx, self).stx_rdev_minor(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.Statx$Buffer org.lwjgl.system.linux.Statx.create(int)"""
        return Buffer._wrap(_Statx.create(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def nstx_btime(arg0: int, arg1: 'StatxTimestamp'):
        """public static void org.lwjgl.system.linux.Statx.nstx_btime(long,org.lwjgl.system.linux.StatxTimestamp)"""
        _Statx.nstx_btime(_long.valueOf(arg0), arg1)

    @overload
    def stx_rdev_major(self, arg0: int) -> 'Statx':
        """public org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.stx_rdev_major(int)"""
        return 'Statx'._wrap(super(_Statx, self).stx_rdev_major(_int.valueOf(arg0)))

    @overload
    def stx_blksize(self) -> int:
        """public int org.lwjgl.system.linux.Statx.stx_blksize()"""
        return int._wrap(super(Statx, self).stx_blksize())

    @staticmethod
    @overload
    def nstx_blksize(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.Statx.nstx_blksize(long)"""
        return int._wrap(_Statx.nstx_blksize(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.Statx$Buffer org.lwjgl.system.linux.Statx.createSafe(long,int)"""
        return Buffer._wrap(_Statx.createSafe(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def nstx_nlink(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.Statx.nstx_nlink(long)"""
        return int._wrap(_Statx.nstx_nlink(_long.valueOf(arg0)))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @overload
    def stx_btime(self, arg0: 'StatxTimestamp') -> 'Statx':
        """public org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.stx_btime(org.lwjgl.system.linux.StatxTimestamp)"""
        return 'Statx'._wrap(super(_Statx, self).stx_btime(arg0))

    @overload
    def stx_mtime(self, arg0: 'Consumer') -> 'Statx':
        """public org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.stx_mtime(java.util.function.Consumer<org.lwjgl.system.linux.StatxTimestamp>)"""
        return 'Statx'._wrap(super(_Statx, self).stx_mtime(arg0))

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @staticmethod
    @overload
    def nstx_rdev_major(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Statx.nstx_rdev_major(long,int)"""
        _Statx.nstx_rdev_major(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def nstx_ino(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.Statx.nstx_ino(long)"""
        return int._wrap(_Statx.nstx_ino(_long.valueOf(arg0)))

    @overload
    def stx_size(self, arg0: int) -> 'Statx':
        """public org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.stx_size(long)"""
        return 'Statx'._wrap(super(_Statx, self).stx_size(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nstx_rdev_major(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.Statx.nstx_rdev_major(long)"""
        return int._wrap(_Statx.nstx_rdev_major(_long.valueOf(arg0)))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).address())

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.Statx$Buffer org.lwjgl.system.linux.Statx.malloc(int)"""
        return Buffer._wrap(_Statx.malloc(_int.valueOf(arg0)))

    @overload
    def stx_attributes_mask(self) -> int:
        """public long org.lwjgl.system.linux.Statx.stx_attributes_mask()"""
        return int._wrap(super(Statx, self).stx_attributes_mask())

    @staticmethod
    @overload
    def n__spare0(arg0: int, arg1: 'ShortBuffer'):
        """public static void org.lwjgl.system.linux.Statx.n__spare0(long,java.nio.ShortBuffer)"""
        _Statx.n__spare0(_long.valueOf(arg0), arg1)

    @staticmethod
    @overload
    def nstx_ctime(arg0: int, arg1: 'StatxTimestamp'):
        """public static void org.lwjgl.system.linux.Statx.nstx_ctime(long,org.lwjgl.system.linux.StatxTimestamp)"""
        _Statx.nstx_ctime(_long.valueOf(arg0), arg1)

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def stx_attributes(self) -> int:
        """public long org.lwjgl.system.linux.Statx.stx_attributes()"""
        return int._wrap(super(Statx, self).stx_attributes())

    @overload
    def stx_atime(self) -> 'StatxTimestamp':
        """public org.lwjgl.system.linux.StatxTimestamp org.lwjgl.system.linux.Statx.stx_atime()"""
        return 'StatxTimestamp'._wrap(super(Statx, self).stx_atime())

    @staticmethod
    @overload
    def nstx_blksize(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Statx.nstx_blksize(long,int)"""
        _Statx.nstx_blksize(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def stx_mnt_id(self, arg0: int) -> 'Statx':
        """public org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.stx_mnt_id(long)"""
        return 'Statx'._wrap(super(_Statx, self).stx_mnt_id(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def n__spare3(arg0: int, arg1: 'LongBuffer'):
        """public static void org.lwjgl.system.linux.Statx.n__spare3(long,java.nio.LongBuffer)"""
        _Statx.n__spare3(_long.valueOf(arg0), arg1)

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.Statx$Buffer org.lwjgl.system.linux.Statx.calloc(int)"""
        return Buffer._wrap(_Statx.calloc(_int.valueOf(arg0)))

    @overload
    def stx_attributes(self, arg0: int) -> 'Statx':
        """public org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.stx_attributes(long)"""
        return 'Statx'._wrap(super(_Statx, self).stx_attributes(_long.valueOf(arg0)))

    @overload
    def stx_mtime(self, arg0: 'StatxTimestamp') -> 'Statx':
        """public org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.stx_mtime(org.lwjgl.system.linux.StatxTimestamp)"""
        return 'Statx'._wrap(super(_Statx, self).stx_mtime(arg0))

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'Statx':
        """public static org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.createSafe(long)"""
        return Statx._wrap(_Statx.createSafe(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nstx_atime(arg0: int) -> 'StatxTimestamp':
        """public static org.lwjgl.system.linux.StatxTimestamp org.lwjgl.system.linux.Statx.nstx_atime(long)"""
        return StatxTimestamp._wrap(_Statx.nstx_atime(_long.valueOf(arg0)))

    @overload
    def stx_nlink(self) -> int:
        """public int org.lwjgl.system.linux.Statx.stx_nlink()"""
        return int._wrap(super(Statx, self).stx_nlink())

    @staticmethod
    @overload
    def nstx_mask(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.Statx.nstx_mask(long)"""
        return int._wrap(_Statx.nstx_mask(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'Statx':
        """public static org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.create(long)"""
        return Statx._wrap(_Statx.create(_long.valueOf(arg0)))

    @overload
    def stx_blocks(self, arg0: int) -> 'Statx':
        """public org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.stx_blocks(long)"""
        return 'Statx'._wrap(super(_Statx, self).stx_blocks(_long.valueOf(arg0)))

    @overload
    def stx_mask(self) -> int:
        """public int org.lwjgl.system.linux.Statx.stx_mask()"""
        return int._wrap(super(Statx, self).stx_mask())

    @overload
    def stx_dev_major(self, arg0: int) -> 'Statx':
        """public org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.stx_dev_major(int)"""
        return 'Statx'._wrap(super(_Statx, self).stx_dev_major(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def nstx_ctime(arg0: int) -> 'StatxTimestamp':
        """public static org.lwjgl.system.linux.StatxTimestamp org.lwjgl.system.linux.Statx.nstx_ctime(long)"""
        return StatxTimestamp._wrap(_Statx.nstx_ctime(_long.valueOf(arg0)))

    @overload
    def stx_mode(self) -> int:
        """public short org.lwjgl.system.linux.Statx.stx_mode()"""
        return int._wrap(super(Statx, self).stx_mode())

    @overload
    def stx_rdev_major(self) -> int:
        """public int org.lwjgl.system.linux.Statx.stx_rdev_major()"""
        return int._wrap(super(Statx, self).stx_rdev_major())

    @staticmethod
    @overload
    def nstx_mnt_id(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Statx.nstx_mnt_id(long,long)"""
        _Statx.nstx_mnt_id(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def create() -> 'Statx':
        """public static org.lwjgl.system.linux.Statx org.lwjgl.system.linux.Statx.create()"""
        return Statx._wrap(_Statx.create())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str._wrap(super(pyglsystem.Pointer$Default, self).toString()) 
 
 
# CLASS: org.lwjgl.system.linux.StatxTimestamp$Buffer
from pyquantum_helper import import_once as _import_once
import org.lwjgl.system.linux.StatxTimestamp as _StatxTimestamp_Buffer
_Buffer = _StatxTimestamp_Buffer.Buffer
import java.lang.Object as _Object
_Object = _Object
from builtins import type
import org.lwjgl.system.CustomBuffer as _CustomBuffer
_CustomBuffer = _CustomBuffer
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import org.lwjgl.system.StructBuffer as _StructBuffer
_StructBuffer = _StructBuffer
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.util.Iterator as _Iterator
_Iterator = _Iterator
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
import java.util.Spliterator as _Spliterator
_Spliterator = _Spliterator
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.util.Iterator as Iterator
import java.lang.Integer as _int
import java.util.stream.Stream as _Stream
_Stream = _Stream
import java.util.stream.Stream as Stream
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class Buffer():
    """org.lwjgl.system.linux.StatxTimestamp.Buffer"""
 
    @staticmethod
    def _wrap(java_value: _Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Buffer__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Buffer__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).limit(_int.valueOf(arg0)))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str._wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def tv_sec(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.StatxTimestamp$Buffer org.lwjgl.system.linux.StatxTimestamp$Buffer.tv_sec(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).tv_sec(_long.valueOf(arg0)))

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int._wrap(super(_pyglsystem.CustomBuffer, self).address(_int.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'._wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).stream())

    @overload
    def tv_nsec(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.StatxTimestamp$Buffer org.lwjgl.system.linux.StatxTimestamp$Buffer.tv_nsec(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).tv_nsec(_int.valueOf(arg0)))

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).position(_int.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'._wrap(super(pyglsystem.StructBuffer, self).get())

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(arg0))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.StatxTimestamp$Buffer(long,int)"""
        val = _Buffer(_long.valueOf(arg0), _int.valueOf(arg1))
        self.__wrapper = val

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'._wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(arg0))

    @overload
    def tv_sec(self) -> int:
        """public long org.lwjgl.system.linux.StatxTimestamp$Buffer.tv_sec()"""
        return int._wrap(super(Buffer, self).tv_sec())

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).slice())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).slice(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0), arg1))

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(_int.valueOf(arg0), arg1))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).clear())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool._wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.StatxTimestamp$Buffer(java.nio.ByteBuffer)"""
        val = _Buffer(arg0)
        self.__wrapper = val

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).flip())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int._wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def tv_nsec(self) -> int:
        """public int org.lwjgl.system.linux.StatxTimestamp$Buffer.tv_nsec()"""
        return int._wrap(super(Buffer, self).tv_nsec())

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(_int.valueOf(arg0), arg1))

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(_pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(arg0)) 
 
 
# CLASS: org.lwjgl.system.linux.XClientMessageEvent$Buffer
from pyquantum_helper import import_once as _import_once
import java.lang.Object as _Object
_Object = _Object
from builtins import type
import org.lwjgl.system.CustomBuffer as _CustomBuffer
_CustomBuffer = _CustomBuffer
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import java.nio.ShortBuffer as ShortBuffer
import java.lang.Short as _short
import org.lwjgl.CLongBuffer as _CLongBuffer
_CLongBuffer = _CLongBuffer
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Boolean as _boolean
import java.lang.Byte as _byte
import org.lwjgl.system.StructBuffer as _StructBuffer
_StructBuffer = _StructBuffer
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.util.Iterator as _Iterator
_Iterator = _Iterator
import java.nio.ShortBuffer as _ShortBuffer
_ShortBuffer = _ShortBuffer
import org.lwjgl.system.linux.XClientMessageEvent as _XClientMessageEvent_Buffer
_Buffer = _XClientMessageEvent_Buffer.Buffer
from builtins import bool
from builtins import str
from pyquantum_helper import override
try:
    import pygl
except ImportError:
    pygl = _import_once("pygl")

import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
import java.nio.ByteBuffer as _ByteBuffer
_ByteBuffer = _ByteBuffer
import java.util.Spliterator as _Spliterator
_Spliterator = _Spliterator
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.util.Iterator as Iterator
import java.lang.Integer as _int
import java.util.stream.Stream as _Stream
_Stream = _Stream
import java.util.stream.Stream as Stream
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class Buffer():
    """org.lwjgl.system.linux.XClientMessageEvent.Buffer"""
 
    @staticmethod
    def _wrap(java_value: _Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Buffer__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Buffer__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).limit(_int.valueOf(arg0)))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def message_type(self) -> int:
        """public long org.lwjgl.system.linux.XClientMessageEvent$Buffer.message_type()"""
        return int._wrap(super(Buffer, self).message_type())

    @overload
    def data_l(self) -> 'pygl.CLongBuffer':
        """public org.lwjgl.CLongBuffer org.lwjgl.system.linux.XClientMessageEvent$Buffer.data_l()"""
        return 'pygl.CLongBuffer'._wrap(super(Buffer, self).data_l())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address())

    @overload
    def format(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XClientMessageEvent$Buffer org.lwjgl.system.linux.XClientMessageEvent$Buffer.format(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).format(_int.valueOf(arg0)))

    @overload
    def data_b(self, arg0: int, arg1: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XClientMessageEvent$Buffer org.lwjgl.system.linux.XClientMessageEvent$Buffer.data_b(int,byte)"""
        return 'Buffer'._wrap(super(_Buffer, self).data_b(_int.valueOf(arg0), _byte.valueOf(arg1)))

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str._wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int._wrap(super(_pyglsystem.CustomBuffer, self).address(_int.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).mark())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XClientMessageEvent$Buffer(java.nio.ByteBuffer)"""
        val = _Buffer(arg0)
        self.__wrapper = val

    @overload
    def data_s(self, arg0: int, arg1: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XClientMessageEvent$Buffer org.lwjgl.system.linux.XClientMessageEvent$Buffer.data_s(int,short)"""
        return 'Buffer'._wrap(super(_Buffer, self).data_s(_int.valueOf(arg0), _short.valueOf(arg1)))

    @overload
    def data_l(self, arg0: int) -> int:
        """public long org.lwjgl.system.linux.XClientMessageEvent$Buffer.data_l(int)"""
        return int._wrap(super(_Buffer, self).data_l(_int.valueOf(arg0)))

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'._wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).stream())

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).position(_int.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'._wrap(super(pyglsystem.StructBuffer, self).get())

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XClientMessageEvent$Buffer.type()"""
        return int._wrap(super(Buffer, self).type())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def data_s(self) -> 'ShortBuffer':
        """public java.nio.ShortBuffer org.lwjgl.system.linux.XClientMessageEvent$Buffer.data_s()"""
        return 'ShortBuffer'._wrap(super(Buffer, self).data_s())

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def data_b(self, arg0: 'ByteBuffer') -> 'Buffer':
        """public org.lwjgl.system.linux.XClientMessageEvent$Buffer org.lwjgl.system.linux.XClientMessageEvent$Buffer.data_b(java.nio.ByteBuffer)"""
        return 'Buffer'._wrap(super(_Buffer, self).data_b(arg0))

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def data_s(self, arg0: 'ShortBuffer') -> 'Buffer':
        """public org.lwjgl.system.linux.XClientMessageEvent$Buffer org.lwjgl.system.linux.XClientMessageEvent$Buffer.data_s(java.nio.ShortBuffer)"""
        return 'Buffer'._wrap(super(_Buffer, self).data_s(arg0))

    @overload
    def data_b(self, arg0: int) -> int:
        """public byte org.lwjgl.system.linux.XClientMessageEvent$Buffer.data_b(int)"""
        return int._wrap(super(_Buffer, self).data_b(_int.valueOf(arg0)))

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XClientMessageEvent$Buffer org.lwjgl.system.linux.XClientMessageEvent$Buffer.send_event(boolean)"""
        return 'Buffer'._wrap(super(_Buffer, self).send_event(_boolean.valueOf(arg0)))

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(arg0))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XClientMessageEvent$Buffer.send_event()"""
        return bool._wrap(super(Buffer, self).send_event())

    @overload
    def data_b(self) -> 'ByteBuffer':
        """public java.nio.ByteBuffer org.lwjgl.system.linux.XClientMessageEvent$Buffer.data_b()"""
        return 'ByteBuffer'._wrap(super(Buffer, self).data_b())

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'._wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XClientMessageEvent$Buffer org.lwjgl.system.linux.XClientMessageEvent$Buffer.serial(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).serial(_long.valueOf(arg0)))

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XClientMessageEvent$Buffer org.lwjgl.system.linux.XClientMessageEvent$Buffer.type(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).type(_int.valueOf(arg0)))

    @overload
    def data_l(self, arg0: 'CLongBuffer') -> 'Buffer':
        """public org.lwjgl.system.linux.XClientMessageEvent$Buffer org.lwjgl.system.linux.XClientMessageEvent$Buffer.data_l(org.lwjgl.CLongBuffer)"""
        return 'Buffer'._wrap(super(_Buffer, self).data_l(arg0))

    @overload
    def format(self) -> int:
        """public int org.lwjgl.system.linux.XClientMessageEvent$Buffer.format()"""
        return int._wrap(super(Buffer, self).format())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).slice())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).slice(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0), arg1))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XClientMessageEvent$Buffer.serial()"""
        return int._wrap(super(Buffer, self).serial())

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(_int.valueOf(arg0), arg1))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).clear())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool._wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XClientMessageEvent$Buffer.display()"""
        return int._wrap(super(Buffer, self).display())

    @overload
    def data_l(self, arg0: int, arg1: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XClientMessageEvent$Buffer org.lwjgl.system.linux.XClientMessageEvent$Buffer.data_l(int,long)"""
        return 'Buffer'._wrap(super(_Buffer, self).data_l(_int.valueOf(arg0), _long.valueOf(arg1)))

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XClientMessageEvent$Buffer org.lwjgl.system.linux.XClientMessageEvent$Buffer.display(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).display(_long.valueOf(arg0)))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int._wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def message_type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XClientMessageEvent$Buffer org.lwjgl.system.linux.XClientMessageEvent$Buffer.message_type(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).message_type(_long.valueOf(arg0)))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(_int.valueOf(arg0), arg1))

    @overload
    def window(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XClientMessageEvent$Buffer org.lwjgl.system.linux.XClientMessageEvent$Buffer.window(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).window(_long.valueOf(arg0)))

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XClientMessageEvent$Buffer.window()"""
        return int._wrap(super(Buffer, self).window())

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(_pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def data_s(self, arg0: int) -> int:
        """public short org.lwjgl.system.linux.XClientMessageEvent$Buffer.data_s(int)"""
        return int._wrap(super(_Buffer, self).data_s(_int.valueOf(arg0)))

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XClientMessageEvent$Buffer(long,int)"""
        val = _Buffer(_long.valueOf(arg0), _int.valueOf(arg1))
        self.__wrapper = val

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(arg0)) 
 
 
# CLASS: org.lwjgl.system.linux.XSetWindowAttributes
from pyquantum_helper import import_once as _import_once
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _Object
_Object = _Object
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
from builtins import type
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import org.lwjgl.system.linux.XSetWindowAttributes as _XSetWindowAttributes_Buffer
_Buffer = _XSetWindowAttributes_Buffer.Buffer
import java.lang.Boolean as _boolean
import java.lang.Integer as _int
import org.lwjgl.system.linux.XSetWindowAttributes as _XSetWindowAttributes
_XSetWindowAttributes = _XSetWindowAttributes
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class XSetWindowAttributes():
    """org.lwjgl.system.linux.XSetWindowAttributes"""
 
    @staticmethod
    def _wrap(java_value: _XSetWindowAttributes) -> 'XSetWindowAttributes':
        return XSetWindowAttributes(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _XSetWindowAttributes):
        """
        Dynamic initializer for XSetWindowAttributes.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_XSetWindowAttributes__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_XSetWindowAttributes__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def mallocStack() -> 'XSetWindowAttributes':
        """public static org.lwjgl.system.linux.XSetWindowAttributes org.lwjgl.system.linux.XSetWindowAttributes.mallocStack()"""
        return XSetWindowAttributes._wrap(_XSetWindowAttributes.mallocStack())

    @staticmethod
    @overload
    def ncursor(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XSetWindowAttributes.ncursor(long)"""
        return int._wrap(_XSetWindowAttributes.ncursor(_long.valueOf(arg0)))

    @overload
    def cursor(self, arg0: int) -> 'XSetWindowAttributes':
        """public org.lwjgl.system.linux.XSetWindowAttributes org.lwjgl.system.linux.XSetWindowAttributes.cursor(long)"""
        return 'XSetWindowAttributes'._wrap(super(_XSetWindowAttributes, self).cursor(_long.valueOf(arg0)))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def background_pixmap(self, arg0: int) -> 'XSetWindowAttributes':
        """public org.lwjgl.system.linux.XSetWindowAttributes org.lwjgl.system.linux.XSetWindowAttributes.background_pixmap(long)"""
        return 'XSetWindowAttributes'._wrap(super(_XSetWindowAttributes, self).background_pixmap(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XSetWindowAttributes':
        """public static org.lwjgl.system.linux.XSetWindowAttributes org.lwjgl.system.linux.XSetWindowAttributes.callocStack(org.lwjgl.system.MemoryStack)"""
        return XSetWindowAttributes._wrap(_XSetWindowAttributes.callocStack(arg0))

    @staticmethod
    @overload
    def nbacking_pixel(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XSetWindowAttributes.nbacking_pixel(long)"""
        return int._wrap(_XSetWindowAttributes.nbacking_pixel(_long.valueOf(arg0)))

    @overload
    def bit_gravity(self) -> int:
        """public int org.lwjgl.system.linux.XSetWindowAttributes.bit_gravity()"""
        return int._wrap(super(XSetWindowAttributes, self).bit_gravity())

    @overload
    def border_pixmap(self, arg0: int) -> 'XSetWindowAttributes':
        """public org.lwjgl.system.linux.XSetWindowAttributes org.lwjgl.system.linux.XSetWindowAttributes.border_pixmap(long)"""
        return 'XSetWindowAttributes'._wrap(super(_XSetWindowAttributes, self).border_pixmap(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def ndo_not_propagate_mask(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSetWindowAttributes.ndo_not_propagate_mask(long,long)"""
        _XSetWindowAttributes.ndo_not_propagate_mask(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def nbackground_pixmap(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSetWindowAttributes.nbackground_pixmap(long,long)"""
        _XSetWindowAttributes.nbackground_pixmap(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def noverride_redirect(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSetWindowAttributes.noverride_redirect(long,int)"""
        _XSetWindowAttributes.noverride_redirect(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def nborder_pixmap(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSetWindowAttributes.nborder_pixmap(long,long)"""
        _XSetWindowAttributes.nborder_pixmap(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def nbacking_pixel(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSetWindowAttributes.nbacking_pixel(long,long)"""
        _XSetWindowAttributes.nbacking_pixel(_long.valueOf(arg0), _long.valueOf(arg1))

    @overload
    def backing_pixel(self, arg0: int) -> 'XSetWindowAttributes':
        """public org.lwjgl.system.linux.XSetWindowAttributes org.lwjgl.system.linux.XSetWindowAttributes.backing_pixel(long)"""
        return 'XSetWindowAttributes'._wrap(super(_XSetWindowAttributes, self).backing_pixel(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def create() -> 'XSetWindowAttributes':
        """public static org.lwjgl.system.linux.XSetWindowAttributes org.lwjgl.system.linux.XSetWindowAttributes.create()"""
        return XSetWindowAttributes._wrap(_XSetWindowAttributes.create())

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        _Struct.validate(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), arg3)

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XSetWindowAttributes$Buffer org.lwjgl.system.linux.XSetWindowAttributes.mallocStack(int)"""
        return Buffer._wrap(_XSetWindowAttributes.mallocStack(_int.valueOf(arg0)))

    @overload
    def background_pixel(self) -> int:
        """public long org.lwjgl.system.linux.XSetWindowAttributes.background_pixel()"""
        return int._wrap(super(XSetWindowAttributes, self).background_pixel())

    @staticmethod
    @overload
    def ncolormap(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XSetWindowAttributes.ncolormap(long)"""
        return int._wrap(_XSetWindowAttributes.ncolormap(_long.valueOf(arg0)))

    @overload
    def win_gravity(self, arg0: int) -> 'XSetWindowAttributes':
        """public org.lwjgl.system.linux.XSetWindowAttributes org.lwjgl.system.linux.XSetWindowAttributes.win_gravity(int)"""
        return 'XSetWindowAttributes'._wrap(super(_XSetWindowAttributes, self).win_gravity(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XSetWindowAttributes$Buffer org.lwjgl.system.linux.XSetWindowAttributes.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XSetWindowAttributes.calloc(_int.valueOf(arg0), arg1))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def colormap(self, arg0: int) -> 'XSetWindowAttributes':
        """public org.lwjgl.system.linux.XSetWindowAttributes org.lwjgl.system.linux.XSetWindowAttributes.colormap(long)"""
        return 'XSetWindowAttributes'._wrap(super(_XSetWindowAttributes, self).colormap(_long.valueOf(arg0)))

    @overload
    def set(self, arg0: 'XSetWindowAttributes') -> 'XSetWindowAttributes':
        """public org.lwjgl.system.linux.XSetWindowAttributes org.lwjgl.system.linux.XSetWindowAttributes.set(org.lwjgl.system.linux.XSetWindowAttributes)"""
        return 'XSetWindowAttributes'._wrap(super(_XSetWindowAttributes, self).set(arg0))

    @staticmethod
    @overload
    def nborder_pixmap(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XSetWindowAttributes.nborder_pixmap(long)"""
        return int._wrap(_XSetWindowAttributes.nborder_pixmap(_long.valueOf(arg0)))

    @overload
    def event_mask(self) -> int:
        """public long org.lwjgl.system.linux.XSetWindowAttributes.event_mask()"""
        return int._wrap(super(XSetWindowAttributes, self).event_mask())

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XSetWindowAttributes$Buffer org.lwjgl.system.linux.XSetWindowAttributes.create(int)"""
        return Buffer._wrap(_XSetWindowAttributes.create(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XSetWindowAttributes':
        """public static org.lwjgl.system.linux.XSetWindowAttributes org.lwjgl.system.linux.XSetWindowAttributes.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XSetWindowAttributes._wrap(_XSetWindowAttributes.mallocStack(arg0))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XSetWindowAttributes':
        """public static org.lwjgl.system.linux.XSetWindowAttributes org.lwjgl.system.linux.XSetWindowAttributes.calloc(org.lwjgl.system.MemoryStack)"""
        return XSetWindowAttributes._wrap(_XSetWindowAttributes.calloc(arg0))

    @staticmethod
    @overload
    def callocStack() -> 'XSetWindowAttributes':
        """public static org.lwjgl.system.linux.XSetWindowAttributes org.lwjgl.system.linux.XSetWindowAttributes.callocStack()"""
        return XSetWindowAttributes._wrap(_XSetWindowAttributes.callocStack())

    @overload
    def colormap(self) -> int:
        """public long org.lwjgl.system.linux.XSetWindowAttributes.colormap()"""
        return int._wrap(super(XSetWindowAttributes, self).colormap())

    @staticmethod
    @overload
    def nbit_gravity(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XSetWindowAttributes.nbit_gravity(long)"""
        return int._wrap(_XSetWindowAttributes.nbit_gravity(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def noverride_redirect(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XSetWindowAttributes.noverride_redirect(long)"""
        return int._wrap(_XSetWindowAttributes.noverride_redirect(_long.valueOf(arg0)))

    @overload
    def save_under(self, arg0: bool) -> 'XSetWindowAttributes':
        """public org.lwjgl.system.linux.XSetWindowAttributes org.lwjgl.system.linux.XSetWindowAttributes.save_under(boolean)"""
        return 'XSetWindowAttributes'._wrap(super(_XSetWindowAttributes, self).save_under(_boolean.valueOf(arg0)))

    @staticmethod
    @overload
    def nbackground_pixmap(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XSetWindowAttributes.nbackground_pixmap(long)"""
        return int._wrap(_XSetWindowAttributes.nbackground_pixmap(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc() -> 'XSetWindowAttributes':
        """public static org.lwjgl.system.linux.XSetWindowAttributes org.lwjgl.system.linux.XSetWindowAttributes.calloc()"""
        return XSetWindowAttributes._wrap(_XSetWindowAttributes.calloc())

    @staticmethod
    @overload
    def nbackground_pixel(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSetWindowAttributes.nbackground_pixel(long,long)"""
        _XSetWindowAttributes.nbackground_pixel(_long.valueOf(arg0), _long.valueOf(arg1))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XSetWindowAttributes(java.nio.ByteBuffer)"""
        val = _XSetWindowAttributes(arg0)
        self.__wrapper = val

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def ncolormap(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSetWindowAttributes.ncolormap(long,long)"""
        _XSetWindowAttributes.ncolormap(_long.valueOf(arg0), _long.valueOf(arg1))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @staticmethod
    @overload
    def nwin_gravity(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XSetWindowAttributes.nwin_gravity(long)"""
        return int._wrap(_XSetWindowAttributes.nwin_gravity(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nbacking_store(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XSetWindowAttributes.nbacking_store(long)"""
        return int._wrap(_XSetWindowAttributes.nbacking_store(_long.valueOf(arg0)))

    @overload
    def override_redirect(self, arg0: bool) -> 'XSetWindowAttributes':
        """public org.lwjgl.system.linux.XSetWindowAttributes org.lwjgl.system.linux.XSetWindowAttributes.override_redirect(boolean)"""
        return 'XSetWindowAttributes'._wrap(super(_XSetWindowAttributes, self).override_redirect(_boolean.valueOf(arg0)))

    @overload
    def backing_store(self) -> int:
        """public int org.lwjgl.system.linux.XSetWindowAttributes.backing_store()"""
        return int._wrap(super(XSetWindowAttributes, self).backing_store())

    @staticmethod
    @overload
    def nbacking_planes(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XSetWindowAttributes.nbacking_planes(long)"""
        return int._wrap(_XSetWindowAttributes.nbacking_planes(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nbacking_planes(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSetWindowAttributes.nbacking_planes(long,long)"""
        _XSetWindowAttributes.nbacking_planes(_long.valueOf(arg0), _long.valueOf(arg1))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool._wrap(super(_pyglsystem.Struct, self).isNull(_int.valueOf(arg0)))

    @overload
    def set(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: bool, arg10: int, arg11: int, arg12: bool, arg13: int, arg14: int) -> 'XSetWindowAttributes':
        """public org.lwjgl.system.linux.XSetWindowAttributes org.lwjgl.system.linux.XSetWindowAttributes.set(long,long,long,long,int,int,int,long,long,boolean,long,long,boolean,long,long)"""
        return 'XSetWindowAttributes'._wrap(super(_XSetWindowAttributes, self).set(_long.valueOf(arg0), _long.valueOf(arg1), _long.valueOf(arg2), _long.valueOf(arg3), _int.valueOf(arg4), _int.valueOf(arg5), _int.valueOf(arg6), _long.valueOf(arg7), _long.valueOf(arg8), _boolean.valueOf(arg9), _long.valueOf(arg10), _long.valueOf(arg11), _boolean.valueOf(arg12), _long.valueOf(arg13), _long.valueOf(arg14)))

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XSetWindowAttributes$Buffer org.lwjgl.system.linux.XSetWindowAttributes.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XSetWindowAttributes.mallocStack(_int.valueOf(arg0), arg1))

    @overload
    def border_pixel(self, arg0: int) -> 'XSetWindowAttributes':
        """public org.lwjgl.system.linux.XSetWindowAttributes org.lwjgl.system.linux.XSetWindowAttributes.border_pixel(long)"""
        return 'XSetWindowAttributes'._wrap(super(_XSetWindowAttributes, self).border_pixel(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def ndo_not_propagate_mask(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XSetWindowAttributes.ndo_not_propagate_mask(long)"""
        return int._wrap(_XSetWindowAttributes.ndo_not_propagate_mask(_long.valueOf(arg0)))

    @overload
    def border_pixmap(self) -> int:
        """public long org.lwjgl.system.linux.XSetWindowAttributes.border_pixmap()"""
        return int._wrap(super(XSetWindowAttributes, self).border_pixmap())

    @overload
    def backing_pixel(self) -> int:
        """public long org.lwjgl.system.linux.XSetWindowAttributes.backing_pixel()"""
        return int._wrap(super(XSetWindowAttributes, self).backing_pixel())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XSetWindowAttributes':
        """public static org.lwjgl.system.linux.XSetWindowAttributes org.lwjgl.system.linux.XSetWindowAttributes.createSafe(long)"""
        return XSetWindowAttributes._wrap(_XSetWindowAttributes.createSafe(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nbit_gravity(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSetWindowAttributes.nbit_gravity(long,int)"""
        _XSetWindowAttributes.nbit_gravity(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def nborder_pixel(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSetWindowAttributes.nborder_pixel(long,long)"""
        _XSetWindowAttributes.nborder_pixel(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def nsave_under(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSetWindowAttributes.nsave_under(long,int)"""
        _XSetWindowAttributes.nsave_under(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def nevent_mask(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSetWindowAttributes.nevent_mask(long,long)"""
        _XSetWindowAttributes.nevent_mask(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def ncursor(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSetWindowAttributes.ncursor(long,long)"""
        _XSetWindowAttributes.ncursor(_long.valueOf(arg0), _long.valueOf(arg1))

    @overload
    def do_not_propagate_mask(self, arg0: int) -> 'XSetWindowAttributes':
        """public org.lwjgl.system.linux.XSetWindowAttributes org.lwjgl.system.linux.XSetWindowAttributes.do_not_propagate_mask(long)"""
        return 'XSetWindowAttributes'._wrap(super(_XSetWindowAttributes, self).do_not_propagate_mask(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nbackground_pixel(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XSetWindowAttributes.nbackground_pixel(long)"""
        return int._wrap(_XSetWindowAttributes.nbackground_pixel(_long.valueOf(arg0)))

    @overload
    def background_pixel(self, arg0: int) -> 'XSetWindowAttributes':
        """public org.lwjgl.system.linux.XSetWindowAttributes org.lwjgl.system.linux.XSetWindowAttributes.background_pixel(long)"""
        return 'XSetWindowAttributes'._wrap(super(_XSetWindowAttributes, self).background_pixel(_long.valueOf(arg0)))

    @overload
    def backing_planes(self) -> int:
        """public long org.lwjgl.system.linux.XSetWindowAttributes.backing_planes()"""
        return int._wrap(super(XSetWindowAttributes, self).backing_planes())

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XSetWindowAttributes$Buffer org.lwjgl.system.linux.XSetWindowAttributes.calloc(int)"""
        return Buffer._wrap(_XSetWindowAttributes.calloc(_int.valueOf(arg0)))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @overload
    def cursor(self) -> int:
        """public long org.lwjgl.system.linux.XSetWindowAttributes.cursor()"""
        return int._wrap(super(XSetWindowAttributes, self).cursor())

    @overload
    def backing_planes(self, arg0: int) -> 'XSetWindowAttributes':
        """public org.lwjgl.system.linux.XSetWindowAttributes org.lwjgl.system.linux.XSetWindowAttributes.backing_planes(long)"""
        return 'XSetWindowAttributes'._wrap(super(_XSetWindowAttributes, self).backing_planes(_long.valueOf(arg0)))

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @staticmethod
    @overload
    def nwin_gravity(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSetWindowAttributes.nwin_gravity(long,int)"""
        _XSetWindowAttributes.nwin_gravity(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def win_gravity(self) -> int:
        """public int org.lwjgl.system.linux.XSetWindowAttributes.win_gravity()"""
        return int._wrap(super(XSetWindowAttributes, self).win_gravity())

    @overload
    def backing_store(self, arg0: int) -> 'XSetWindowAttributes':
        """public org.lwjgl.system.linux.XSetWindowAttributes org.lwjgl.system.linux.XSetWindowAttributes.backing_store(int)"""
        return 'XSetWindowAttributes'._wrap(super(_XSetWindowAttributes, self).backing_store(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc() -> 'XSetWindowAttributes':
        """public static org.lwjgl.system.linux.XSetWindowAttributes org.lwjgl.system.linux.XSetWindowAttributes.malloc()"""
        return XSetWindowAttributes._wrap(_XSetWindowAttributes.malloc())

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XSetWindowAttributes':
        """public static org.lwjgl.system.linux.XSetWindowAttributes org.lwjgl.system.linux.XSetWindowAttributes.malloc(org.lwjgl.system.MemoryStack)"""
        return XSetWindowAttributes._wrap(_XSetWindowAttributes.malloc(arg0))

    @overload
    def override_redirect(self) -> bool:
        """public boolean org.lwjgl.system.linux.XSetWindowAttributes.override_redirect()"""
        return bool._wrap(super(XSetWindowAttributes, self).override_redirect())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).address())

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XSetWindowAttributes$Buffer org.lwjgl.system.linux.XSetWindowAttributes.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XSetWindowAttributes.malloc(_int.valueOf(arg0), arg1))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def event_mask(self, arg0: int) -> 'XSetWindowAttributes':
        """public org.lwjgl.system.linux.XSetWindowAttributes org.lwjgl.system.linux.XSetWindowAttributes.event_mask(long)"""
        return 'XSetWindowAttributes'._wrap(super(_XSetWindowAttributes, self).event_mask(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XSetWindowAttributes$Buffer org.lwjgl.system.linux.XSetWindowAttributes.create(long,int)"""
        return Buffer._wrap(_XSetWindowAttributes.create(_long.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XSetWindowAttributes.sizeof()"""
        return int._wrap(super(XSetWindowAttributes, self).sizeof())

    @staticmethod
    @overload
    def create(arg0: int) -> 'XSetWindowAttributes':
        """public static org.lwjgl.system.linux.XSetWindowAttributes org.lwjgl.system.linux.XSetWindowAttributes.create(long)"""
        return XSetWindowAttributes._wrap(_XSetWindowAttributes.create(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XSetWindowAttributes$Buffer org.lwjgl.system.linux.XSetWindowAttributes.callocStack(int)"""
        return Buffer._wrap(_XSetWindowAttributes.callocStack(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XSetWindowAttributes$Buffer org.lwjgl.system.linux.XSetWindowAttributes.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XSetWindowAttributes.callocStack(_int.valueOf(arg0), arg1))

    @overload
    def bit_gravity(self, arg0: int) -> 'XSetWindowAttributes':
        """public org.lwjgl.system.linux.XSetWindowAttributes org.lwjgl.system.linux.XSetWindowAttributes.bit_gravity(int)"""
        return 'XSetWindowAttributes'._wrap(super(_XSetWindowAttributes, self).bit_gravity(_int.valueOf(arg0)))

    @overload
    def save_under(self) -> bool:
        """public boolean org.lwjgl.system.linux.XSetWindowAttributes.save_under()"""
        return bool._wrap(super(XSetWindowAttributes, self).save_under())

    @overload
    def background_pixmap(self) -> int:
        """public long org.lwjgl.system.linux.XSetWindowAttributes.background_pixmap()"""
        return int._wrap(super(XSetWindowAttributes, self).background_pixmap())

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XSetWindowAttributes$Buffer org.lwjgl.system.linux.XSetWindowAttributes.createSafe(long,int)"""
        return Buffer._wrap(_XSetWindowAttributes.createSafe(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def nsave_under(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XSetWindowAttributes.nsave_under(long)"""
        return int._wrap(_XSetWindowAttributes.nsave_under(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XSetWindowAttributes$Buffer org.lwjgl.system.linux.XSetWindowAttributes.malloc(int)"""
        return Buffer._wrap(_XSetWindowAttributes.malloc(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def nborder_pixel(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XSetWindowAttributes.nborder_pixel(long)"""
        return int._wrap(_XSetWindowAttributes.nborder_pixel(_long.valueOf(arg0)))

    @overload
    def border_pixel(self) -> int:
        """public long org.lwjgl.system.linux.XSetWindowAttributes.border_pixel()"""
        return int._wrap(super(XSetWindowAttributes, self).border_pixel())

    @staticmethod
    @overload
    def nbacking_store(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSetWindowAttributes.nbacking_store(long,int)"""
        _XSetWindowAttributes.nbacking_store(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def nevent_mask(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XSetWindowAttributes.nevent_mask(long)"""
        return int._wrap(_XSetWindowAttributes.nevent_mask(_long.valueOf(arg0)))

    @overload
    def do_not_propagate_mask(self) -> int:
        """public long org.lwjgl.system.linux.XSetWindowAttributes.do_not_propagate_mask()"""
        return int._wrap(super(XSetWindowAttributes, self).do_not_propagate_mask())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str._wrap(super(pyglsystem.Pointer$Default, self).toString()) 
 
 
# CLASS: org.lwjgl.system.linux.Msghdr$Buffer
from pyquantum_helper import import_once as _import_once
import java.lang.Object as _Object
_Object = _Object
from builtins import type
import org.lwjgl.system.CustomBuffer as _CustomBuffer
_CustomBuffer = _CustomBuffer
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import org.lwjgl.system.StructBuffer as _StructBuffer
_StructBuffer = _StructBuffer
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.util.Iterator as _Iterator
_Iterator = _Iterator
from builtins import bool
from builtins import str
import org.lwjgl.system.linux.IOVec as _IOVec_Buffer
_Buffer = _IOVec_Buffer.Buffer
from pyquantum_helper import override
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
import java.nio.ByteBuffer as _ByteBuffer
_ByteBuffer = _ByteBuffer
import java.util.Spliterator as _Spliterator
_Spliterator = _Spliterator
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.util.Iterator as Iterator
import java.lang.Integer as _int
import java.util.stream.Stream as _Stream
_Stream = _Stream
import java.util.stream.Stream as Stream
import java.nio.ByteBuffer as ByteBuffer
import org.lwjgl.system.linux.Msghdr as _Msghdr_Buffer
_Buffer = _Msghdr_Buffer.Buffer
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class Buffer():
    """org.lwjgl.system.linux.Msghdr.Buffer"""
 
    @staticmethod
    def _wrap(java_value: _Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Buffer__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Buffer__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def msg_name(self) -> 'ByteBuffer':
        """public java.nio.ByteBuffer org.lwjgl.system.linux.Msghdr$Buffer.msg_name()"""
        return 'ByteBuffer'._wrap(super(Buffer, self).msg_name())

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).limit(_int.valueOf(arg0)))

    @overload
    def msg_name(self, arg0: 'ByteBuffer') -> 'Buffer':
        """public org.lwjgl.system.linux.Msghdr$Buffer org.lwjgl.system.linux.Msghdr$Buffer.msg_name(java.nio.ByteBuffer)"""
        return 'Buffer'._wrap(super(_Buffer, self).msg_name(arg0))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.Msghdr$Buffer(java.nio.ByteBuffer)"""
        val = _Buffer(arg0)
        self.__wrapper = val

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str._wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int._wrap(super(_pyglsystem.CustomBuffer, self).address(_int.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).mark())

    @overload
    def msg_iov(self, arg0: 'Buffer') -> 'Buffer':
        """public org.lwjgl.system.linux.Msghdr$Buffer org.lwjgl.system.linux.Msghdr$Buffer.msg_iov(org.lwjgl.system.linux.IOVec$Buffer)"""
        return 'Buffer'._wrap(super(_Buffer, self).msg_iov(arg0))

    @overload
    def msg_iovlen(self) -> int:
        """public long org.lwjgl.system.linux.Msghdr$Buffer.msg_iovlen()"""
        return int._wrap(super(Buffer, self).msg_iovlen())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'._wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).stream())

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).position(_int.valueOf(arg0)))

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.Msghdr$Buffer(long,int)"""
        val = _Buffer(_long.valueOf(arg0), _int.valueOf(arg1))
        self.__wrapper = val

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @overload
    def msg_namelen(self) -> int:
        """public int org.lwjgl.system.linux.Msghdr$Buffer.msg_namelen()"""
        return int._wrap(super(Buffer, self).msg_namelen())

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'._wrap(super(pyglsystem.StructBuffer, self).get())

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def msg_iov(self) -> 'Buffer':
        """public org.lwjgl.system.linux.IOVec$Buffer org.lwjgl.system.linux.Msghdr$Buffer.msg_iov()"""
        return 'Buffer'._wrap(super(Buffer, self).msg_iov())

    @overload
    def msg_control(self) -> 'ByteBuffer':
        """public java.nio.ByteBuffer org.lwjgl.system.linux.Msghdr$Buffer.msg_control()"""
        return 'ByteBuffer'._wrap(super(Buffer, self).msg_control())

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(arg0))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def msg_control(self, arg0: 'ByteBuffer') -> 'Buffer':
        """public org.lwjgl.system.linux.Msghdr$Buffer org.lwjgl.system.linux.Msghdr$Buffer.msg_control(java.nio.ByteBuffer)"""
        return 'Buffer'._wrap(super(_Buffer, self).msg_control(arg0))

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'._wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(arg0))

    @overload
    def msg_controllen(self) -> int:
        """public long org.lwjgl.system.linux.Msghdr$Buffer.msg_controllen()"""
        return int._wrap(super(Buffer, self).msg_controllen())

    @overload
    def msg_flags(self) -> int:
        """public int org.lwjgl.system.linux.Msghdr$Buffer.msg_flags()"""
        return int._wrap(super(Buffer, self).msg_flags())

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).slice())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).slice(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0), arg1))

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(_int.valueOf(arg0), arg1))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).clear())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool._wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).flip())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int._wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(_int.valueOf(arg0), arg1))

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(_pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def msg_flags(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Msghdr$Buffer org.lwjgl.system.linux.Msghdr$Buffer.msg_flags(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).msg_flags(_int.valueOf(arg0)))

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(arg0)) 
 
 
# CLASS: org.lwjgl.system.linux.XColormapEvent
from pyquantum_helper import import_once as _import_once
from builtins import str
from pyquantum_helper import override
import org.lwjgl.system.linux.XColormapEvent as _XColormapEvent
_XColormapEvent = _XColormapEvent
import java.lang.Object as _Object
_Object = _Object
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
from builtins import type
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import org.lwjgl.system.linux.XColormapEvent as _XColormapEvent_Buffer
_Buffer = _XColormapEvent_Buffer.Buffer
import java.lang.Boolean as _boolean
import java.lang.Integer as _int
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class XColormapEvent():
    """org.lwjgl.system.linux.XColormapEvent"""
 
    @staticmethod
    def _wrap(java_value: _XColormapEvent) -> 'XColormapEvent':
        return XColormapEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _XColormapEvent):
        """
        Dynamic initializer for XColormapEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_XColormapEvent__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_XColormapEvent__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def mallocStack() -> 'XColormapEvent':
        """public static org.lwjgl.system.linux.XColormapEvent org.lwjgl.system.linux.XColormapEvent.mallocStack()"""
        return XColormapEvent._wrap(_XColormapEvent.mallocStack())

    @staticmethod
    @overload
    def ncolormap(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XColormapEvent.ncolormap(long)"""
        return int._wrap(_XColormapEvent.ncolormap(_long.valueOf(arg0)))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XColormapEvent$Buffer org.lwjgl.system.linux.XColormapEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XColormapEvent.callocStack(_int.valueOf(arg0), arg1))

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int) -> 'XColormapEvent':
        """public org.lwjgl.system.linux.XColormapEvent org.lwjgl.system.linux.XColormapEvent.set(int,long,boolean,long,long,long,int,int)"""
        return 'XColormapEvent'._wrap(super(_XColormapEvent, self).set(_int.valueOf(arg0), _long.valueOf(arg1), _boolean.valueOf(arg2), _long.valueOf(arg3), _long.valueOf(arg4), _long.valueOf(arg5), _int.valueOf(arg6), _int.valueOf(arg7)))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @staticmethod
    @overload
    def nstate(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XColormapEvent.nstate(long,int)"""
        _XColormapEvent.nstate(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def colormap(self, arg0: int) -> 'XColormapEvent':
        """public org.lwjgl.system.linux.XColormapEvent org.lwjgl.system.linux.XColormapEvent.colormap(long)"""
        return 'XColormapEvent'._wrap(super(_XColormapEvent, self).colormap(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XColormapEvent$Buffer org.lwjgl.system.linux.XColormapEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XColormapEvent.malloc(_int.valueOf(arg0), arg1))

    @overload
    def serial(self, arg0: int) -> 'XColormapEvent':
        """public org.lwjgl.system.linux.XColormapEvent org.lwjgl.system.linux.XColormapEvent.serial(long)"""
        return 'XColormapEvent'._wrap(super(_XColormapEvent, self).serial(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XColormapEvent.validate(long)"""
        _XColormapEvent.validate(_long.valueOf(arg0))

    @overload
    def state(self, arg0: int) -> 'XColormapEvent':
        """public org.lwjgl.system.linux.XColormapEvent org.lwjgl.system.linux.XColormapEvent.state(int)"""
        return 'XColormapEvent'._wrap(super(_XColormapEvent, self).state(_int.valueOf(arg0)))

    @overload
    def set(self, arg0: 'XColormapEvent') -> 'XColormapEvent':
        """public org.lwjgl.system.linux.XColormapEvent org.lwjgl.system.linux.XColormapEvent.set(org.lwjgl.system.linux.XColormapEvent)"""
        return 'XColormapEvent'._wrap(super(_XColormapEvent, self).set(arg0))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XColormapEvent$Buffer org.lwjgl.system.linux.XColormapEvent.create(long,int)"""
        return Buffer._wrap(_XColormapEvent.create(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XColormapEvent.nserial(long)"""
        return int._wrap(_XColormapEvent.nserial(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XColormapEvent':
        """public static org.lwjgl.system.linux.XColormapEvent org.lwjgl.system.linux.XColormapEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XColormapEvent._wrap(_XColormapEvent.mallocStack(arg0))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        _Struct.validate(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), arg3)

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @overload
    def colormap(self) -> int:
        """public long org.lwjgl.system.linux.XColormapEvent.colormap()"""
        return int._wrap(super(XColormapEvent, self).colormap())

    @overload
    def state(self) -> int:
        """public int org.lwjgl.system.linux.XColormapEvent.state()"""
        return int._wrap(super(XColormapEvent, self).state())

    @staticmethod
    @overload
    def create(arg0: int) -> 'XColormapEvent':
        """public static org.lwjgl.system.linux.XColormapEvent org.lwjgl.system.linux.XColormapEvent.create(long)"""
        return XColormapEvent._wrap(_XColormapEvent.create(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XColormapEvent$Buffer org.lwjgl.system.linux.XColormapEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XColormapEvent.mallocStack(_int.valueOf(arg0), arg1))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XColormapEvent.send_event()"""
        return bool._wrap(super(XColormapEvent, self).send_event())

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XColormapEvent$Buffer org.lwjgl.system.linux.XColormapEvent.callocStack(int)"""
        return Buffer._wrap(_XColormapEvent.callocStack(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def create() -> 'XColormapEvent':
        """public static org.lwjgl.system.linux.XColormapEvent org.lwjgl.system.linux.XColormapEvent.create()"""
        return XColormapEvent._wrap(_XColormapEvent.create())

    @staticmethod
    @overload
    def nnew$(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XColormapEvent.nnew$(long,int)"""
        _XColormapEvent.nnew$(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def new$(self, arg0: int) -> 'XColormapEvent':
        """public org.lwjgl.system.linux.XColormapEvent org.lwjgl.system.linux.XColormapEvent.new$(int)"""
        return 'XColormapEvent'._wrap(super(_XColormapEvent, self).new$(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XColormapEvent.ndisplay(long,long)"""
        _XColormapEvent.ndisplay(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XColormapEvent.nserial(long,long)"""
        _XColormapEvent.nserial(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XColormapEvent.nsend_event(long)"""
        return int._wrap(_XColormapEvent.nsend_event(_long.valueOf(arg0)))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).address())

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XColormapEvent.type()"""
        return int._wrap(super(XColormapEvent, self).type())

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XColormapEvent.window()"""
        return int._wrap(super(XColormapEvent, self).window())

    @staticmethod
    @overload
    def malloc() -> 'XColormapEvent':
        """public static org.lwjgl.system.linux.XColormapEvent org.lwjgl.system.linux.XColormapEvent.malloc()"""
        return XColormapEvent._wrap(_XColormapEvent.malloc())

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XColormapEvent.ndisplay(long)"""
        return int._wrap(_XColormapEvent.ndisplay(_long.valueOf(arg0)))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XColormapEvent.ntype(long)"""
        return int._wrap(_XColormapEvent.ntype(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nwindow(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XColormapEvent.nwindow(long,long)"""
        _XColormapEvent.nwindow(_long.valueOf(arg0), _long.valueOf(arg1))

    @overload
    def new$(self) -> int:
        """public int org.lwjgl.system.linux.XColormapEvent.new$()"""
        return int._wrap(super(XColormapEvent, self).new$())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XColormapEvent.sizeof()"""
        return int._wrap(super(XColormapEvent, self).sizeof())

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XColormapEvent$Buffer org.lwjgl.system.linux.XColormapEvent.mallocStack(int)"""
        return Buffer._wrap(_XColormapEvent.mallocStack(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XColormapEvent':
        """public static org.lwjgl.system.linux.XColormapEvent org.lwjgl.system.linux.XColormapEvent.createSafe(long)"""
        return XColormapEvent._wrap(_XColormapEvent.createSafe(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XColormapEvent$Buffer org.lwjgl.system.linux.XColormapEvent.malloc(int)"""
        return Buffer._wrap(_XColormapEvent.malloc(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XColormapEvent':
        """public static org.lwjgl.system.linux.XColormapEvent org.lwjgl.system.linux.XColormapEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XColormapEvent._wrap(_XColormapEvent.malloc(arg0))

    @overload
    def display(self, arg0: int) -> 'XColormapEvent':
        """public org.lwjgl.system.linux.XColormapEvent org.lwjgl.system.linux.XColormapEvent.display(long)"""
        return 'XColormapEvent'._wrap(super(_XColormapEvent, self).display(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XColormapEvent.nsend_event(long,int)"""
        _XColormapEvent.nsend_event(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XColormapEvent$Buffer org.lwjgl.system.linux.XColormapEvent.create(int)"""
        return Buffer._wrap(_XColormapEvent.create(_int.valueOf(arg0)))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XColormapEvent(java.nio.ByteBuffer)"""
        val = _XColormapEvent(arg0)
        self.__wrapper = val

    @staticmethod
    @overload
    def callocStack() -> 'XColormapEvent':
        """public static org.lwjgl.system.linux.XColormapEvent org.lwjgl.system.linux.XColormapEvent.callocStack()"""
        return XColormapEvent._wrap(_XColormapEvent.callocStack())

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XColormapEvent':
        """public static org.lwjgl.system.linux.XColormapEvent org.lwjgl.system.linux.XColormapEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XColormapEvent._wrap(_XColormapEvent.callocStack(arg0))

    @staticmethod
    @overload
    def nwindow(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XColormapEvent.nwindow(long)"""
        return int._wrap(_XColormapEvent.nwindow(_long.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @staticmethod
    @overload
    def calloc() -> 'XColormapEvent':
        """public static org.lwjgl.system.linux.XColormapEvent org.lwjgl.system.linux.XColormapEvent.calloc()"""
        return XColormapEvent._wrap(_XColormapEvent.calloc())

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XColormapEvent$Buffer org.lwjgl.system.linux.XColormapEvent.createSafe(long,int)"""
        return Buffer._wrap(_XColormapEvent.createSafe(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XColormapEvent$Buffer org.lwjgl.system.linux.XColormapEvent.calloc(int)"""
        return Buffer._wrap(_XColormapEvent.calloc(_int.valueOf(arg0)))

    @overload
    def window(self, arg0: int) -> 'XColormapEvent':
        """public org.lwjgl.system.linux.XColormapEvent org.lwjgl.system.linux.XColormapEvent.window(long)"""
        return 'XColormapEvent'._wrap(super(_XColormapEvent, self).window(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def ncolormap(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XColormapEvent.ncolormap(long,long)"""
        _XColormapEvent.ncolormap(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XColormapEvent.ntype(long,int)"""
        _XColormapEvent.ntype(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XColormapEvent.display()"""
        return int._wrap(super(XColormapEvent, self).display())

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XColormapEvent':
        """public static org.lwjgl.system.linux.XColormapEvent org.lwjgl.system.linux.XColormapEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XColormapEvent._wrap(_XColormapEvent.calloc(arg0))

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool._wrap(super(_pyglsystem.Struct, self).isNull(_int.valueOf(arg0)))

    @overload
    def send_event(self, arg0: bool) -> 'XColormapEvent':
        """public org.lwjgl.system.linux.XColormapEvent org.lwjgl.system.linux.XColormapEvent.send_event(boolean)"""
        return 'XColormapEvent'._wrap(super(_XColormapEvent, self).send_event(_boolean.valueOf(arg0)))

    @staticmethod
    @overload
    def nnew$(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XColormapEvent.nnew$(long)"""
        return int._wrap(_XColormapEvent.nnew$(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XColormapEvent$Buffer org.lwjgl.system.linux.XColormapEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XColormapEvent.calloc(_int.valueOf(arg0), arg1))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XColormapEvent.serial()"""
        return int._wrap(super(XColormapEvent, self).serial())

    @staticmethod
    @overload
    def nstate(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XColormapEvent.nstate(long)"""
        return int._wrap(_XColormapEvent.nstate(_long.valueOf(arg0)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str._wrap(super(pyglsystem.Pointer$Default, self).toString())

    @overload
    def type(self, arg0: int) -> 'XColormapEvent':
        """public org.lwjgl.system.linux.XColormapEvent org.lwjgl.system.linux.XColormapEvent.type(int)"""
        return 'XColormapEvent'._wrap(super(_XColormapEvent, self).type(_int.valueOf(arg0))) 
 
 
# CLASS: org.lwjgl.system.linux.XUnmapEvent
from pyquantum_helper import import_once as _import_once
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _Object
_Object = _Object
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
from builtins import type
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import org.lwjgl.system.linux.XUnmapEvent as _XUnmapEvent
_XUnmapEvent = _XUnmapEvent
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.lang.Boolean as _boolean
import java.lang.Integer as _int
import org.lwjgl.system.linux.XUnmapEvent as _XUnmapEvent_Buffer
_Buffer = _XUnmapEvent_Buffer.Buffer
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class XUnmapEvent():
    """org.lwjgl.system.linux.XUnmapEvent"""
 
    @staticmethod
    def _wrap(java_value: _XUnmapEvent) -> 'XUnmapEvent':
        return XUnmapEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _XUnmapEvent):
        """
        Dynamic initializer for XUnmapEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_XUnmapEvent__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_XUnmapEvent__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XUnmapEvent.ndisplay(long)"""
        return int._wrap(_XUnmapEvent.ndisplay(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc() -> 'XUnmapEvent':
        """public static org.lwjgl.system.linux.XUnmapEvent org.lwjgl.system.linux.XUnmapEvent.malloc()"""
        return XUnmapEvent._wrap(_XUnmapEvent.malloc())

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XUnmapEvent':
        """public static org.lwjgl.system.linux.XUnmapEvent org.lwjgl.system.linux.XUnmapEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XUnmapEvent._wrap(_XUnmapEvent.mallocStack(arg0))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XUnmapEvent$Buffer org.lwjgl.system.linux.XUnmapEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XUnmapEvent.mallocStack(_int.valueOf(arg0), arg1))

    @overload
    def type(self, arg0: int) -> 'XUnmapEvent':
        """public org.lwjgl.system.linux.XUnmapEvent org.lwjgl.system.linux.XUnmapEvent.type(int)"""
        return 'XUnmapEvent'._wrap(super(_XUnmapEvent, self).type(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XUnmapEvent.ntype(long,int)"""
        _XUnmapEvent.ntype(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XUnmapEvent.serial()"""
        return int._wrap(super(XUnmapEvent, self).serial())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XUnmapEvent':
        """public static org.lwjgl.system.linux.XUnmapEvent org.lwjgl.system.linux.XUnmapEvent.createSafe(long)"""
        return XUnmapEvent._wrap(_XUnmapEvent.createSafe(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XUnmapEvent.nserial(long,long)"""
        _XUnmapEvent.nserial(_long.valueOf(arg0), _long.valueOf(arg1))

    @overload
    def event(self, arg0: int) -> 'XUnmapEvent':
        """public org.lwjgl.system.linux.XUnmapEvent org.lwjgl.system.linux.XUnmapEvent.event(long)"""
        return 'XUnmapEvent'._wrap(super(_XUnmapEvent, self).event(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nfrom_configure(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XUnmapEvent.nfrom_configure(long)"""
        return int._wrap(_XUnmapEvent.nfrom_configure(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XUnmapEvent':
        """public static org.lwjgl.system.linux.XUnmapEvent org.lwjgl.system.linux.XUnmapEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XUnmapEvent._wrap(_XUnmapEvent.calloc(arg0))

    @staticmethod
    @overload
    def create() -> 'XUnmapEvent':
        """public static org.lwjgl.system.linux.XUnmapEvent org.lwjgl.system.linux.XUnmapEvent.create()"""
        return XUnmapEvent._wrap(_XUnmapEvent.create())

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XUnmapEvent$Buffer org.lwjgl.system.linux.XUnmapEvent.calloc(int)"""
        return Buffer._wrap(_XUnmapEvent.calloc(_int.valueOf(arg0)))

    @overload
    def set(self, arg0: 'XUnmapEvent') -> 'XUnmapEvent':
        """public org.lwjgl.system.linux.XUnmapEvent org.lwjgl.system.linux.XUnmapEvent.set(org.lwjgl.system.linux.XUnmapEvent)"""
        return 'XUnmapEvent'._wrap(super(_XUnmapEvent, self).set(arg0))

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XUnmapEvent$Buffer org.lwjgl.system.linux.XUnmapEvent.malloc(int)"""
        return Buffer._wrap(_XUnmapEvent.malloc(_int.valueOf(arg0)))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XUnmapEvent.type()"""
        return int._wrap(super(XUnmapEvent, self).type())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @overload
    def window(self, arg0: int) -> 'XUnmapEvent':
        """public org.lwjgl.system.linux.XUnmapEvent org.lwjgl.system.linux.XUnmapEvent.window(long)"""
        return 'XUnmapEvent'._wrap(super(_XUnmapEvent, self).window(_long.valueOf(arg0)))

    @overload
    def from_configure(self, arg0: int) -> 'XUnmapEvent':
        """public org.lwjgl.system.linux.XUnmapEvent org.lwjgl.system.linux.XUnmapEvent.from_configure(int)"""
        return 'XUnmapEvent'._wrap(super(_XUnmapEvent, self).from_configure(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        _Struct.validate(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), arg3)

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XUnmapEvent(java.nio.ByteBuffer)"""
        val = _XUnmapEvent(arg0)
        self.__wrapper = val

    @overload
    def send_event(self, arg0: bool) -> 'XUnmapEvent':
        """public org.lwjgl.system.linux.XUnmapEvent org.lwjgl.system.linux.XUnmapEvent.send_event(boolean)"""
        return 'XUnmapEvent'._wrap(super(_XUnmapEvent, self).send_event(_boolean.valueOf(arg0)))

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XUnmapEvent.nserial(long)"""
        return int._wrap(_XUnmapEvent.nserial(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XUnmapEvent.nsend_event(long,int)"""
        _XUnmapEvent.nsend_event(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XUnmapEvent':
        """public static org.lwjgl.system.linux.XUnmapEvent org.lwjgl.system.linux.XUnmapEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XUnmapEvent._wrap(_XUnmapEvent.callocStack(arg0))

    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XUnmapEvent.nsend_event(long)"""
        return int._wrap(_XUnmapEvent.nsend_event(_long.valueOf(arg0)))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XUnmapEvent.sizeof()"""
        return int._wrap(super(XUnmapEvent, self).sizeof())

    @staticmethod
    @overload
    def mallocStack() -> 'XUnmapEvent':
        """public static org.lwjgl.system.linux.XUnmapEvent org.lwjgl.system.linux.XUnmapEvent.mallocStack()"""
        return XUnmapEvent._wrap(_XUnmapEvent.mallocStack())

    @staticmethod
    @overload
    def nwindow(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XUnmapEvent.nwindow(long,long)"""
        _XUnmapEvent.nwindow(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def nwindow(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XUnmapEvent.nwindow(long)"""
        return int._wrap(_XUnmapEvent.nwindow(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XUnmapEvent$Buffer org.lwjgl.system.linux.XUnmapEvent.mallocStack(int)"""
        return Buffer._wrap(_XUnmapEvent.mallocStack(_int.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def serial(self, arg0: int) -> 'XUnmapEvent':
        """public org.lwjgl.system.linux.XUnmapEvent org.lwjgl.system.linux.XUnmapEvent.serial(long)"""
        return 'XUnmapEvent'._wrap(super(_XUnmapEvent, self).serial(_long.valueOf(arg0)))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).address())

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int, arg5: int, arg6: int) -> 'XUnmapEvent':
        """public org.lwjgl.system.linux.XUnmapEvent org.lwjgl.system.linux.XUnmapEvent.set(int,long,boolean,long,long,long,int)"""
        return 'XUnmapEvent'._wrap(super(_XUnmapEvent, self).set(_int.valueOf(arg0), _long.valueOf(arg1), _boolean.valueOf(arg2), _long.valueOf(arg3), _long.valueOf(arg4), _long.valueOf(arg5), _int.valueOf(arg6)))

    @staticmethod
    @overload
    def calloc() -> 'XUnmapEvent':
        """public static org.lwjgl.system.linux.XUnmapEvent org.lwjgl.system.linux.XUnmapEvent.calloc()"""
        return XUnmapEvent._wrap(_XUnmapEvent.calloc())

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XUnmapEvent':
        """public static org.lwjgl.system.linux.XUnmapEvent org.lwjgl.system.linux.XUnmapEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XUnmapEvent._wrap(_XUnmapEvent.malloc(arg0))

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XUnmapEvent$Buffer org.lwjgl.system.linux.XUnmapEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XUnmapEvent.calloc(_int.valueOf(arg0), arg1))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XUnmapEvent.ndisplay(long,long)"""
        _XUnmapEvent.ndisplay(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def nfrom_configure(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XUnmapEvent.nfrom_configure(long,int)"""
        _XUnmapEvent.nfrom_configure(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def callocStack() -> 'XUnmapEvent':
        """public static org.lwjgl.system.linux.XUnmapEvent org.lwjgl.system.linux.XUnmapEvent.callocStack()"""
        return XUnmapEvent._wrap(_XUnmapEvent.callocStack())

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XUnmapEvent$Buffer org.lwjgl.system.linux.XUnmapEvent.createSafe(long,int)"""
        return Buffer._wrap(_XUnmapEvent.createSafe(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XUnmapEvent$Buffer org.lwjgl.system.linux.XUnmapEvent.create(long,int)"""
        return Buffer._wrap(_XUnmapEvent.create(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def nevent(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XUnmapEvent.nevent(long,long)"""
        _XUnmapEvent.nevent(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def create(arg0: int) -> 'XUnmapEvent':
        """public static org.lwjgl.system.linux.XUnmapEvent org.lwjgl.system.linux.XUnmapEvent.create(long)"""
        return XUnmapEvent._wrap(_XUnmapEvent.create(_long.valueOf(arg0)))

    @overload
    def event(self) -> int:
        """public long org.lwjgl.system.linux.XUnmapEvent.event()"""
        return int._wrap(super(XUnmapEvent, self).event())

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XUnmapEvent$Buffer org.lwjgl.system.linux.XUnmapEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XUnmapEvent.callocStack(_int.valueOf(arg0), arg1))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XUnmapEvent.send_event()"""
        return bool._wrap(super(XUnmapEvent, self).send_event())

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XUnmapEvent$Buffer org.lwjgl.system.linux.XUnmapEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XUnmapEvent.malloc(_int.valueOf(arg0), arg1))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XUnmapEvent.validate(long)"""
        _XUnmapEvent.validate(_long.valueOf(arg0))

    @overload
    def from_configure(self) -> int:
        """public int org.lwjgl.system.linux.XUnmapEvent.from_configure()"""
        return int._wrap(super(XUnmapEvent, self).from_configure())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XUnmapEvent.ntype(long)"""
        return int._wrap(_XUnmapEvent.ntype(_long.valueOf(arg0)))

    @overload
    def display(self, arg0: int) -> 'XUnmapEvent':
        """public org.lwjgl.system.linux.XUnmapEvent org.lwjgl.system.linux.XUnmapEvent.display(long)"""
        return 'XUnmapEvent'._wrap(super(_XUnmapEvent, self).display(_long.valueOf(arg0)))

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XUnmapEvent.display()"""
        return int._wrap(super(XUnmapEvent, self).display())

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XUnmapEvent.window()"""
        return int._wrap(super(XUnmapEvent, self).window())

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XUnmapEvent$Buffer org.lwjgl.system.linux.XUnmapEvent.create(int)"""
        return Buffer._wrap(_XUnmapEvent.create(_int.valueOf(arg0)))

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool._wrap(super(_pyglsystem.Struct, self).isNull(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XUnmapEvent$Buffer org.lwjgl.system.linux.XUnmapEvent.callocStack(int)"""
        return Buffer._wrap(_XUnmapEvent.callocStack(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def nevent(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XUnmapEvent.nevent(long)"""
        return int._wrap(_XUnmapEvent.nevent(_long.valueOf(arg0)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str._wrap(super(pyglsystem.Pointer$Default, self).toString()) 
 
 
# CLASS: org.lwjgl.system.linux.XSetWindowAttributes$Buffer
from pyquantum_helper import import_once as _import_once
import java.lang.Object as _Object
_Object = _Object
from builtins import type
import org.lwjgl.system.CustomBuffer as _CustomBuffer
_CustomBuffer = _CustomBuffer
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Boolean as _boolean
import org.lwjgl.system.StructBuffer as _StructBuffer
_StructBuffer = _StructBuffer
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.util.Iterator as _Iterator
_Iterator = _Iterator
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
import java.util.Spliterator as _Spliterator
_Spliterator = _Spliterator
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.util.Iterator as Iterator
import org.lwjgl.system.linux.XSetWindowAttributes as _XSetWindowAttributes_Buffer
_Buffer = _XSetWindowAttributes_Buffer.Buffer
import java.lang.Integer as _int
import java.util.stream.Stream as _Stream
_Stream = _Stream
import java.util.stream.Stream as Stream
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class Buffer():
    """org.lwjgl.system.linux.XSetWindowAttributes.Buffer"""
 
    @staticmethod
    def _wrap(java_value: _Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Buffer__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Buffer__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def backing_planes(self) -> int:
        """public long org.lwjgl.system.linux.XSetWindowAttributes$Buffer.backing_planes()"""
        return int._wrap(super(Buffer, self).backing_planes())

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XSetWindowAttributes$Buffer(long,int)"""
        val = _Buffer(_long.valueOf(arg0), _int.valueOf(arg1))
        self.__wrapper = val

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).limit(_int.valueOf(arg0)))

    @overload
    def colormap(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSetWindowAttributes$Buffer org.lwjgl.system.linux.XSetWindowAttributes$Buffer.colormap(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).colormap(_long.valueOf(arg0)))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address())

    @overload
    def border_pixmap(self) -> int:
        """public long org.lwjgl.system.linux.XSetWindowAttributes$Buffer.border_pixmap()"""
        return int._wrap(super(Buffer, self).border_pixmap())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0)))

    @overload
    def background_pixmap(self) -> int:
        """public long org.lwjgl.system.linux.XSetWindowAttributes$Buffer.background_pixmap()"""
        return int._wrap(super(Buffer, self).background_pixmap())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str._wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int._wrap(super(_pyglsystem.CustomBuffer, self).address(_int.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).mark())

    @overload
    def backing_store(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSetWindowAttributes$Buffer org.lwjgl.system.linux.XSetWindowAttributes$Buffer.backing_store(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).backing_store(_int.valueOf(arg0)))

    @overload
    def backing_pixel(self) -> int:
        """public long org.lwjgl.system.linux.XSetWindowAttributes$Buffer.backing_pixel()"""
        return int._wrap(super(Buffer, self).backing_pixel())

    @overload
    def save_under(self) -> bool:
        """public boolean org.lwjgl.system.linux.XSetWindowAttributes$Buffer.save_under()"""
        return bool._wrap(super(Buffer, self).save_under())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'._wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @overload
    def event_mask(self) -> int:
        """public long org.lwjgl.system.linux.XSetWindowAttributes$Buffer.event_mask()"""
        return int._wrap(super(Buffer, self).event_mask())

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).stream())

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).position(_int.valueOf(arg0)))

    @overload
    def colormap(self) -> int:
        """public long org.lwjgl.system.linux.XSetWindowAttributes$Buffer.colormap()"""
        return int._wrap(super(Buffer, self).colormap())

    @overload
    def background_pixel(self) -> int:
        """public long org.lwjgl.system.linux.XSetWindowAttributes$Buffer.background_pixel()"""
        return int._wrap(super(Buffer, self).background_pixel())

    @overload
    def background_pixel(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSetWindowAttributes$Buffer org.lwjgl.system.linux.XSetWindowAttributes$Buffer.background_pixel(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).background_pixel(_long.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'._wrap(super(pyglsystem.StructBuffer, self).get())

    @overload
    def override_redirect(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XSetWindowAttributes$Buffer org.lwjgl.system.linux.XSetWindowAttributes$Buffer.override_redirect(boolean)"""
        return 'Buffer'._wrap(super(_Buffer, self).override_redirect(_boolean.valueOf(arg0)))

    @overload
    def win_gravity(self) -> int:
        """public int org.lwjgl.system.linux.XSetWindowAttributes$Buffer.win_gravity()"""
        return int._wrap(super(Buffer, self).win_gravity())

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def backing_store(self) -> int:
        """public int org.lwjgl.system.linux.XSetWindowAttributes$Buffer.backing_store()"""
        return int._wrap(super(Buffer, self).backing_store())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def border_pixmap(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSetWindowAttributes$Buffer org.lwjgl.system.linux.XSetWindowAttributes$Buffer.border_pixmap(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).border_pixmap(_long.valueOf(arg0)))

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XSetWindowAttributes$Buffer(java.nio.ByteBuffer)"""
        val = _Buffer(arg0)
        self.__wrapper = val

    @overload
    def border_pixel(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSetWindowAttributes$Buffer org.lwjgl.system.linux.XSetWindowAttributes$Buffer.border_pixel(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).border_pixel(_long.valueOf(arg0)))

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(arg0))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def cursor(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSetWindowAttributes$Buffer org.lwjgl.system.linux.XSetWindowAttributes$Buffer.cursor(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).cursor(_long.valueOf(arg0)))

    @overload
    def border_pixel(self) -> int:
        """public long org.lwjgl.system.linux.XSetWindowAttributes$Buffer.border_pixel()"""
        return int._wrap(super(Buffer, self).border_pixel())

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'._wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(arg0))

    @overload
    def cursor(self) -> int:
        """public long org.lwjgl.system.linux.XSetWindowAttributes$Buffer.cursor()"""
        return int._wrap(super(Buffer, self).cursor())

    @overload
    def do_not_propagate_mask(self) -> int:
        """public long org.lwjgl.system.linux.XSetWindowAttributes$Buffer.do_not_propagate_mask()"""
        return int._wrap(super(Buffer, self).do_not_propagate_mask())

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).slice())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).slice(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def do_not_propagate_mask(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSetWindowAttributes$Buffer org.lwjgl.system.linux.XSetWindowAttributes$Buffer.do_not_propagate_mask(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).do_not_propagate_mask(_long.valueOf(arg0)))

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0), arg1))

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(_int.valueOf(arg0), arg1))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).clear())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool._wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def backing_pixel(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSetWindowAttributes$Buffer org.lwjgl.system.linux.XSetWindowAttributes$Buffer.backing_pixel(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).backing_pixel(_long.valueOf(arg0)))

    @overload
    def save_under(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XSetWindowAttributes$Buffer org.lwjgl.system.linux.XSetWindowAttributes$Buffer.save_under(boolean)"""
        return 'Buffer'._wrap(super(_Buffer, self).save_under(_boolean.valueOf(arg0)))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int._wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(_int.valueOf(arg0), arg1))

    @overload
    def bit_gravity(self) -> int:
        """public int org.lwjgl.system.linux.XSetWindowAttributes$Buffer.bit_gravity()"""
        return int._wrap(super(Buffer, self).bit_gravity())

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def override_redirect(self) -> bool:
        """public boolean org.lwjgl.system.linux.XSetWindowAttributes$Buffer.override_redirect()"""
        return bool._wrap(super(Buffer, self).override_redirect())

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @overload
    def win_gravity(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSetWindowAttributes$Buffer org.lwjgl.system.linux.XSetWindowAttributes$Buffer.win_gravity(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).win_gravity(_int.valueOf(arg0)))

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(_pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def bit_gravity(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSetWindowAttributes$Buffer org.lwjgl.system.linux.XSetWindowAttributes$Buffer.bit_gravity(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).bit_gravity(_int.valueOf(arg0)))

    @overload
    def background_pixmap(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSetWindowAttributes$Buffer org.lwjgl.system.linux.XSetWindowAttributes$Buffer.background_pixmap(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).background_pixmap(_long.valueOf(arg0)))

    @overload
    def event_mask(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSetWindowAttributes$Buffer org.lwjgl.system.linux.XSetWindowAttributes$Buffer.event_mask(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).event_mask(_long.valueOf(arg0)))

    @overload
    def backing_planes(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSetWindowAttributes$Buffer org.lwjgl.system.linux.XSetWindowAttributes$Buffer.backing_planes(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).backing_planes(_long.valueOf(arg0)))

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(arg0)) 
 
 
# CLASS: org.lwjgl.system.linux.XConfigureEvent
from pyquantum_helper import import_once as _import_once
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _Object
_Object = _Object
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
from builtins import type
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.lang.Boolean as _boolean
import java.lang.Integer as _int
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import org.lwjgl.system.linux.XConfigureEvent as _XConfigureEvent
_XConfigureEvent = _XConfigureEvent
import org.lwjgl.system.linux.XConfigureEvent as _XConfigureEvent_Buffer
_Buffer = _XConfigureEvent_Buffer.Buffer
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class XConfigureEvent():
    """org.lwjgl.system.linux.XConfigureEvent"""
 
    @staticmethod
    def _wrap(java_value: _XConfigureEvent) -> 'XConfigureEvent':
        return XConfigureEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _XConfigureEvent):
        """
        Dynamic initializer for XConfigureEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_XConfigureEvent__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_XConfigureEvent__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def send_event(self, arg0: bool) -> 'XConfigureEvent':
        """public org.lwjgl.system.linux.XConfigureEvent org.lwjgl.system.linux.XConfigureEvent.send_event(boolean)"""
        return 'XConfigureEvent'._wrap(super(_XConfigureEvent, self).send_event(_boolean.valueOf(arg0)))

    @staticmethod
    @overload
    def ny(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XConfigureEvent.ny(long,int)"""
        _XConfigureEvent.ny(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def nabove(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XConfigureEvent.nabove(long,long)"""
        _XConfigureEvent.nabove(_long.valueOf(arg0), _long.valueOf(arg1))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XConfigureEvent.sizeof()"""
        return int._wrap(super(XConfigureEvent, self).sizeof())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XConfigureEvent$Buffer org.lwjgl.system.linux.XConfigureEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XConfigureEvent.callocStack(_int.valueOf(arg0), arg1))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XConfigureEvent.serial()"""
        return int._wrap(super(XConfigureEvent, self).serial())

    @staticmethod
    @overload
    def calloc() -> 'XConfigureEvent':
        """public static org.lwjgl.system.linux.XConfigureEvent org.lwjgl.system.linux.XConfigureEvent.calloc()"""
        return XConfigureEvent._wrap(_XConfigureEvent.calloc())

    @overload
    def height(self) -> int:
        """public int org.lwjgl.system.linux.XConfigureEvent.height()"""
        return int._wrap(super(XConfigureEvent, self).height())

    @staticmethod
    @overload
    def nwidth(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XConfigureEvent.nwidth(long,int)"""
        _XConfigureEvent.nwidth(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def border_width(self, arg0: int) -> 'XConfigureEvent':
        """public org.lwjgl.system.linux.XConfigureEvent org.lwjgl.system.linux.XConfigureEvent.border_width(int)"""
        return 'XConfigureEvent'._wrap(super(_XConfigureEvent, self).border_width(_int.valueOf(arg0)))

    @overload
    def serial(self, arg0: int) -> 'XConfigureEvent':
        """public org.lwjgl.system.linux.XConfigureEvent org.lwjgl.system.linux.XConfigureEvent.serial(long)"""
        return 'XConfigureEvent'._wrap(super(_XConfigureEvent, self).serial(_long.valueOf(arg0)))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XConfigureEvent.nsend_event(long)"""
        return int._wrap(_XConfigureEvent.nsend_event(_long.valueOf(arg0)))

    @overload
    def width(self) -> int:
        """public int org.lwjgl.system.linux.XConfigureEvent.width()"""
        return int._wrap(super(XConfigureEvent, self).width())

    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XConfigureEvent.nsend_event(long,int)"""
        _XConfigureEvent.nsend_event(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def ny(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XConfigureEvent.ny(long)"""
        return int._wrap(_XConfigureEvent.ny(_long.valueOf(arg0)))

    @overload
    def x(self) -> int:
        """public int org.lwjgl.system.linux.XConfigureEvent.x()"""
        return int._wrap(super(XConfigureEvent, self).x())

    @staticmethod
    @overload
    def noverride_redirect(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XConfigureEvent.noverride_redirect(long,int)"""
        _XConfigureEvent.noverride_redirect(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XConfigureEvent$Buffer org.lwjgl.system.linux.XConfigureEvent.create(long,int)"""
        return Buffer._wrap(_XConfigureEvent.create(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def nabove(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XConfigureEvent.nabove(long)"""
        return int._wrap(_XConfigureEvent.nabove(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nborder_width(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XConfigureEvent.nborder_width(long,int)"""
        _XConfigureEvent.nborder_width(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XConfigureEvent$Buffer org.lwjgl.system.linux.XConfigureEvent.create(int)"""
        return Buffer._wrap(_XConfigureEvent.create(_int.valueOf(arg0)))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XConfigureEvent':
        """public static org.lwjgl.system.linux.XConfigureEvent org.lwjgl.system.linux.XConfigureEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XConfigureEvent._wrap(_XConfigureEvent.mallocStack(arg0))

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        _Struct.validate(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), arg3)

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @overload
    def above(self, arg0: int) -> 'XConfigureEvent':
        """public org.lwjgl.system.linux.XConfigureEvent org.lwjgl.system.linux.XConfigureEvent.above(long)"""
        return 'XConfigureEvent'._wrap(super(_XConfigureEvent, self).above(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XConfigureEvent':
        """public static org.lwjgl.system.linux.XConfigureEvent org.lwjgl.system.linux.XConfigureEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XConfigureEvent._wrap(_XConfigureEvent.calloc(arg0))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XConfigureEvent$Buffer org.lwjgl.system.linux.XConfigureEvent.createSafe(long,int)"""
        return Buffer._wrap(_XConfigureEvent.createSafe(_long.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XConfigureEvent$Buffer org.lwjgl.system.linux.XConfigureEvent.mallocStack(int)"""
        return Buffer._wrap(_XConfigureEvent.mallocStack(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def nwindow(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XConfigureEvent.nwindow(long)"""
        return int._wrap(_XConfigureEvent.nwindow(_long.valueOf(arg0)))

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XConfigureEvent.window()"""
        return int._wrap(super(XConfigureEvent, self).window())

    @staticmethod
    @overload
    def nheight(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XConfigureEvent.nheight(long,int)"""
        _XConfigureEvent.nheight(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).address())

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XConfigureEvent.validate(long)"""
        _XConfigureEvent.validate(_long.valueOf(arg0))

    @staticmethod
    @overload
    def nborder_width(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XConfigureEvent.nborder_width(long)"""
        return int._wrap(_XConfigureEvent.nborder_width(_long.valueOf(arg0)))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XConfigureEvent.send_event()"""
        return bool._wrap(super(XConfigureEvent, self).send_event())

    @overload
    def override_redirect(self) -> bool:
        """public boolean org.lwjgl.system.linux.XConfigureEvent.override_redirect()"""
        return bool._wrap(super(XConfigureEvent, self).override_redirect())

    @staticmethod
    @overload
    def nwidth(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XConfigureEvent.nwidth(long)"""
        return int._wrap(_XConfigureEvent.nwidth(_long.valueOf(arg0)))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def set(self, arg0: 'XConfigureEvent') -> 'XConfigureEvent':
        """public org.lwjgl.system.linux.XConfigureEvent org.lwjgl.system.linux.XConfigureEvent.set(org.lwjgl.system.linux.XConfigureEvent)"""
        return 'XConfigureEvent'._wrap(super(_XConfigureEvent, self).set(arg0))

    @overload
    def width(self, arg0: int) -> 'XConfigureEvent':
        """public org.lwjgl.system.linux.XConfigureEvent org.lwjgl.system.linux.XConfigureEvent.width(int)"""
        return 'XConfigureEvent'._wrap(super(_XConfigureEvent, self).width(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XConfigureEvent$Buffer org.lwjgl.system.linux.XConfigureEvent.calloc(int)"""
        return Buffer._wrap(_XConfigureEvent.calloc(_int.valueOf(arg0)))

    @overload
    def border_width(self) -> int:
        """public int org.lwjgl.system.linux.XConfigureEvent.border_width()"""
        return int._wrap(super(XConfigureEvent, self).border_width())

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: int, arg10: int, arg11: bool) -> 'XConfigureEvent':
        """public org.lwjgl.system.linux.XConfigureEvent org.lwjgl.system.linux.XConfigureEvent.set(int,long,boolean,long,long,int,int,int,int,int,long,boolean)"""
        return 'XConfigureEvent'._wrap(super(_XConfigureEvent, self).set(_int.valueOf(arg0), _long.valueOf(arg1), _boolean.valueOf(arg2), _long.valueOf(arg3), _long.valueOf(arg4), _int.valueOf(arg5), _int.valueOf(arg6), _int.valueOf(arg7), _int.valueOf(arg8), _int.valueOf(arg9), _long.valueOf(arg10), _boolean.valueOf(arg11)))

    @staticmethod
    @overload
    def nx(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XConfigureEvent.nx(long,int)"""
        _XConfigureEvent.nx(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def type(self, arg0: int) -> 'XConfigureEvent':
        """public org.lwjgl.system.linux.XConfigureEvent org.lwjgl.system.linux.XConfigureEvent.type(int)"""
        return 'XConfigureEvent'._wrap(super(_XConfigureEvent, self).type(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XConfigureEvent':
        """public static org.lwjgl.system.linux.XConfigureEvent org.lwjgl.system.linux.XConfigureEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XConfigureEvent._wrap(_XConfigureEvent.callocStack(arg0))

    @overload
    def window(self, arg0: int) -> 'XConfigureEvent':
        """public org.lwjgl.system.linux.XConfigureEvent org.lwjgl.system.linux.XConfigureEvent.window(long)"""
        return 'XConfigureEvent'._wrap(super(_XConfigureEvent, self).window(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XConfigureEvent.nserial(long)"""
        return int._wrap(_XConfigureEvent.nserial(_long.valueOf(arg0)))

    @overload
    def display(self, arg0: int) -> 'XConfigureEvent':
        """public org.lwjgl.system.linux.XConfigureEvent org.lwjgl.system.linux.XConfigureEvent.display(long)"""
        return 'XConfigureEvent'._wrap(super(_XConfigureEvent, self).display(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XConfigureEvent':
        """public static org.lwjgl.system.linux.XConfigureEvent org.lwjgl.system.linux.XConfigureEvent.createSafe(long)"""
        return XConfigureEvent._wrap(_XConfigureEvent.createSafe(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def create() -> 'XConfigureEvent':
        """public static org.lwjgl.system.linux.XConfigureEvent org.lwjgl.system.linux.XConfigureEvent.create()"""
        return XConfigureEvent._wrap(_XConfigureEvent.create())

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XConfigureEvent.ndisplay(long,long)"""
        _XConfigureEvent.ndisplay(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XConfigureEvent$Buffer org.lwjgl.system.linux.XConfigureEvent.malloc(int)"""
        return Buffer._wrap(_XConfigureEvent.malloc(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def nwindow(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XConfigureEvent.nwindow(long,long)"""
        _XConfigureEvent.nwindow(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XConfigureEvent.nserial(long,long)"""
        _XConfigureEvent.nserial(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def create(arg0: int) -> 'XConfigureEvent':
        """public static org.lwjgl.system.linux.XConfigureEvent org.lwjgl.system.linux.XConfigureEvent.create(long)"""
        return XConfigureEvent._wrap(_XConfigureEvent.create(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nx(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XConfigureEvent.nx(long)"""
        return int._wrap(_XConfigureEvent.nx(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XConfigureEvent$Buffer org.lwjgl.system.linux.XConfigureEvent.callocStack(int)"""
        return Buffer._wrap(_XConfigureEvent.callocStack(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def nheight(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XConfigureEvent.nheight(long)"""
        return int._wrap(_XConfigureEvent.nheight(_long.valueOf(arg0)))

    @overload
    def y(self, arg0: int) -> 'XConfigureEvent':
        """public org.lwjgl.system.linux.XConfigureEvent org.lwjgl.system.linux.XConfigureEvent.y(int)"""
        return 'XConfigureEvent'._wrap(super(_XConfigureEvent, self).y(_int.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XConfigureEvent(java.nio.ByteBuffer)"""
        val = _XConfigureEvent(arg0)
        self.__wrapper = val

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XConfigureEvent.ntype(long)"""
        return int._wrap(_XConfigureEvent.ntype(_long.valueOf(arg0)))

    @overload
    def above(self) -> int:
        """public long org.lwjgl.system.linux.XConfigureEvent.above()"""
        return int._wrap(super(XConfigureEvent, self).above())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XConfigureEvent$Buffer org.lwjgl.system.linux.XConfigureEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XConfigureEvent.calloc(_int.valueOf(arg0), arg1))

    @overload
    def x(self, arg0: int) -> 'XConfigureEvent':
        """public org.lwjgl.system.linux.XConfigureEvent org.lwjgl.system.linux.XConfigureEvent.x(int)"""
        return 'XConfigureEvent'._wrap(super(_XConfigureEvent, self).x(_int.valueOf(arg0)))

    @overload
    def height(self, arg0: int) -> 'XConfigureEvent':
        """public org.lwjgl.system.linux.XConfigureEvent org.lwjgl.system.linux.XConfigureEvent.height(int)"""
        return 'XConfigureEvent'._wrap(super(_XConfigureEvent, self).height(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack() -> 'XConfigureEvent':
        """public static org.lwjgl.system.linux.XConfigureEvent org.lwjgl.system.linux.XConfigureEvent.mallocStack()"""
        return XConfigureEvent._wrap(_XConfigureEvent.mallocStack())

    @staticmethod
    @overload
    def noverride_redirect(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XConfigureEvent.noverride_redirect(long)"""
        return int._wrap(_XConfigureEvent.noverride_redirect(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XConfigureEvent$Buffer org.lwjgl.system.linux.XConfigureEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XConfigureEvent.mallocStack(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XConfigureEvent$Buffer org.lwjgl.system.linux.XConfigureEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XConfigureEvent.malloc(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XConfigureEvent.ndisplay(long)"""
        return int._wrap(_XConfigureEvent.ndisplay(_long.valueOf(arg0)))

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XConfigureEvent.display()"""
        return int._wrap(super(XConfigureEvent, self).display())

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XConfigureEvent.ntype(long,int)"""
        _XConfigureEvent.ntype(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XConfigureEvent.type()"""
        return int._wrap(super(XConfigureEvent, self).type())

    @overload
    def override_redirect(self, arg0: bool) -> 'XConfigureEvent':
        """public org.lwjgl.system.linux.XConfigureEvent org.lwjgl.system.linux.XConfigureEvent.override_redirect(boolean)"""
        return 'XConfigureEvent'._wrap(super(_XConfigureEvent, self).override_redirect(_boolean.valueOf(arg0)))

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool._wrap(super(_pyglsystem.Struct, self).isNull(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XConfigureEvent':
        """public static org.lwjgl.system.linux.XConfigureEvent org.lwjgl.system.linux.XConfigureEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XConfigureEvent._wrap(_XConfigureEvent.malloc(arg0))

    @staticmethod
    @overload
    def malloc() -> 'XConfigureEvent':
        """public static org.lwjgl.system.linux.XConfigureEvent org.lwjgl.system.linux.XConfigureEvent.malloc()"""
        return XConfigureEvent._wrap(_XConfigureEvent.malloc())

    @staticmethod
    @overload
    def callocStack() -> 'XConfigureEvent':
        """public static org.lwjgl.system.linux.XConfigureEvent org.lwjgl.system.linux.XConfigureEvent.callocStack()"""
        return XConfigureEvent._wrap(_XConfigureEvent.callocStack())

    @overload
    def y(self) -> int:
        """public int org.lwjgl.system.linux.XConfigureEvent.y()"""
        return int._wrap(super(XConfigureEvent, self).y())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str._wrap(super(pyglsystem.Pointer$Default, self).toString()) 
 
 
# CLASS: org.lwjgl.system.linux.X11
from pyquantum_helper import import_once as _import_once
from builtins import str
import java.lang.CharSequence as CharSequence
from pyquantum_helper import override
import java.lang.Object as _Object
_Object = _Object
try:
    import pygl
except ImportError:
    pygl = _import_once("pygl")

import java.nio.IntBuffer as IntBuffer
import java.lang.Object as _object
from builtins import type
import org.lwjgl.system.linux.X11 as _X11
_X11 = _X11
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.lang.Boolean as _boolean
import java.lang.Integer as _int
import org.lwjgl.system.SharedLibrary as _SharedLibrary
_SharedLibrary = _SharedLibrary
import org.lwjgl.system.linux.XTimeCoord as _XTimeCoord_Buffer
_Buffer = _XTimeCoord_Buffer.Buffer
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class X11():
    """org.lwjgl.system.linux.X11"""
 
    @staticmethod
    def _wrap(java_value: _X11) -> 'X11':
        return X11(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _X11):
        """
        Dynamic initializer for X11.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_X11__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_X11__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def XOpenDisplay(arg0: 'ByteBuffer') -> int:
        """public static long org.lwjgl.system.linux.X11.XOpenDisplay(java.nio.ByteBuffer)"""
        return int._wrap(_X11.XOpenDisplay(arg0))

    @staticmethod
    @overload
    def XFreeColormap(arg0: int, arg1: int) -> int:
        """public static int org.lwjgl.system.linux.X11.XFreeColormap(long,long)"""
        return int._wrap(_X11.XFreeColormap(_long.valueOf(arg0), _long.valueOf(arg1)))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def nXFree(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.X11.nXFree(long)"""
        return int._wrap(_X11.nXFree(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def XDisplayMotionBufferSize(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.X11.XDisplayMotionBufferSize(long)"""
        return int._wrap(_X11.XDisplayMotionBufferSize(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def XDestroyWindow(arg0: int, arg1: int) -> int:
        """public static int org.lwjgl.system.linux.X11.XDestroyWindow(long,long)"""
        return int._wrap(_X11.XDestroyWindow(_long.valueOf(arg0), _long.valueOf(arg1)))

    @staticmethod
    @overload
    def nXCreateWindow(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: int, arg10: int, arg11: int) -> int:
        """public static long org.lwjgl.system.linux.X11.nXCreateWindow(long,long,int,int,int,int,int,int,int,long,long,long)"""
        return int._wrap(_X11.nXCreateWindow(_long.valueOf(arg0), _long.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4), _int.valueOf(arg5), _int.valueOf(arg6), _int.valueOf(arg7), _int.valueOf(arg8), _long.valueOf(arg9), _long.valueOf(arg10), _long.valueOf(arg11)))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def XCreateColormap(arg0: int, arg1: int, arg2: 'Visual', arg3: int) -> int:
        """public static long org.lwjgl.system.linux.X11.XCreateColormap(long,long,org.lwjgl.system.linux.Visual,int)"""
        return int._wrap(_X11.XCreateColormap(_long.valueOf(arg0), _long.valueOf(arg1), arg2, _int.valueOf(arg3)))

    @staticmethod
    @overload
    def XFree(arg0: 'PointerBuffer') -> int:
        """public static int org.lwjgl.system.linux.X11.XFree(org.lwjgl.PointerBuffer)"""
        return int._wrap(_X11.XFree(arg0))

    @staticmethod
    @overload
    def XCloseDisplay(arg0: int):
        """public static void org.lwjgl.system.linux.X11.XCloseDisplay(long)"""
        _X11.XCloseDisplay(_long.valueOf(arg0))

    @staticmethod
    @overload
    def XCreateWindow(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: 'Visual', arg10: int, arg11: 'XSetWindowAttributes') -> int:
        """public static long org.lwjgl.system.linux.X11.XCreateWindow(long,long,int,int,int,int,int,int,int,org.lwjgl.system.linux.Visual,long,org.lwjgl.system.linux.XSetWindowAttributes)"""
        return int._wrap(_X11.XCreateWindow(_long.valueOf(arg0), _long.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4), _int.valueOf(arg5), _int.valueOf(arg6), _int.valueOf(arg7), _int.valueOf(arg8), arg9, _long.valueOf(arg10), arg11))

    @staticmethod
    @overload
    def XFree(arg0: 'ByteBuffer') -> int:
        """public static int org.lwjgl.system.linux.X11.XFree(java.nio.ByteBuffer)"""
        return int._wrap(_X11.XFree(arg0))

    @staticmethod
    @overload
    def nXCreateColormap(arg0: int, arg1: int, arg2: int, arg3: int) -> int:
        """public static long org.lwjgl.system.linux.X11.nXCreateColormap(long,long,long,int)"""
        return int._wrap(_X11.nXCreateColormap(_long.valueOf(arg0), _long.valueOf(arg1), _long.valueOf(arg2), _int.valueOf(arg3)))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool._wrap(super(_object, self).equals(arg0))

    @staticmethod
    @overload
    def getLibrary() -> 'pyglsystem.SharedLibrary':
        """public static org.lwjgl.system.SharedLibrary org.lwjgl.system.linux.X11.getLibrary()"""
        return pyglsystem.SharedLibrary._wrap(_X11.getLibrary())

    @staticmethod
    @overload
    def XGetMotionEvents(arg0: int, arg1: int, arg2: int, arg3: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XTimeCoord$Buffer org.lwjgl.system.linux.X11.XGetMotionEvents(long,long,long,long)"""
        return Buffer._wrap(_X11.XGetMotionEvents(_long.valueOf(arg0), _long.valueOf(arg1), _long.valueOf(arg2), _long.valueOf(arg3)))

    @staticmethod
    @overload
    def XDefaultScreen(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.X11.XDefaultScreen(long)"""
        return int._wrap(_X11.XDefaultScreen(_long.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def XOpenDisplay(arg0: 'CharSequence') -> int:
        """public static long org.lwjgl.system.linux.X11.XOpenDisplay(java.lang.CharSequence)"""
        return int._wrap(_X11.XOpenDisplay(arg0))

    @staticmethod
    @overload
    def XRootWindow(arg0: int, arg1: int) -> int:
        """public static long org.lwjgl.system.linux.X11.XRootWindow(long,int)"""
        return int._wrap(_X11.XRootWindow(_long.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.lang.Object.toString()"""
        return str._wrap(super(object, self).toString())

    @staticmethod
    @overload
    def XSendEvent(arg0: int, arg1: int, arg2: bool, arg3: int, arg4: 'XEvent') -> int:
        """public static int org.lwjgl.system.linux.X11.XSendEvent(long,long,boolean,long,org.lwjgl.system.linux.XEvent)"""
        return int._wrap(_X11.XSendEvent(_long.valueOf(arg0), _long.valueOf(arg1), _boolean.valueOf(arg2), _long.valueOf(arg3), arg4))

    @staticmethod
    @overload
    def nXSendEvent(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int) -> int:
        """public static int org.lwjgl.system.linux.X11.nXSendEvent(long,long,int,long,long)"""
        return int._wrap(_X11.nXSendEvent(_long.valueOf(arg0), _long.valueOf(arg1), _int.valueOf(arg2), _long.valueOf(arg3), _long.valueOf(arg4)))

    @staticmethod
    @overload
    def nXTranslateCoordinates(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int) -> int:
        """public static int org.lwjgl.system.linux.X11.nXTranslateCoordinates(long,long,long,int,int,long,long,long)"""
        return int._wrap(_X11.nXTranslateCoordinates(_long.valueOf(arg0), _long.valueOf(arg1), _long.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4), _long.valueOf(arg5), _long.valueOf(arg6), _long.valueOf(arg7)))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @staticmethod
    @overload
    def XTranslateCoordinates(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: 'IntBuffer', arg6: 'IntBuffer', arg7: 'CLongBuffer') -> bool:
        """public static boolean org.lwjgl.system.linux.X11.XTranslateCoordinates(long,long,long,int,int,java.nio.IntBuffer,java.nio.IntBuffer,org.lwjgl.CLongBuffer)"""
        return bool._wrap(_X11.XTranslateCoordinates(_long.valueOf(arg0), _long.valueOf(arg1), _long.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4), arg5, arg6, arg7))

    @staticmethod
    @overload
    def nXOpenDisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.X11.nXOpenDisplay(long)"""
        return int._wrap(_X11.nXOpenDisplay(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nXGetMotionEvents(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int) -> int:
        """public static long org.lwjgl.system.linux.X11.nXGetMotionEvents(long,long,long,long,long)"""
        return int._wrap(_X11.nXGetMotionEvents(_long.valueOf(arg0), _long.valueOf(arg1), _long.valueOf(arg2), _long.valueOf(arg3), _long.valueOf(arg4)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def XTranslateCoordinates(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: 'int', arg6: 'int', arg7: 'CLongBuffer') -> bool:
        """public static boolean org.lwjgl.system.linux.X11.XTranslateCoordinates(long,long,long,int,int,int[],int[],org.lwjgl.CLongBuffer)"""
        return bool._wrap(_X11.XTranslateCoordinates(_long.valueOf(arg0), _long.valueOf(arg1), _long.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4), arg5, arg6, arg7))

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int._wrap(super(object, self).hashCode()) 
 
 
# CLASS: org.lwjgl.system.linux.EpollEvent
from pyquantum_helper import import_once as _import_once
from builtins import str
import org.lwjgl.system.linux.EpollEvent as _EpollEvent
_EpollEvent = _EpollEvent
from pyquantum_helper import override
import java.lang.Object as _Object
_Object = _Object
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
from builtins import type
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import org.lwjgl.system.linux.EpollData as _EpollData
_EpollData = _EpollData
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.util.function.Consumer as Consumer
import java.lang.Integer as _int
import org.lwjgl.system.linux.EpollEvent as _EpollEvent_Buffer
_Buffer = _EpollEvent_Buffer.Buffer
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class EpollEvent():
    """org.lwjgl.system.linux.EpollEvent"""
 
    @staticmethod
    def _wrap(java_value: _EpollEvent) -> 'EpollEvent':
        return EpollEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _EpollEvent):
        """
        Dynamic initializer for EpollEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_EpollEvent__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_EpollEvent__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.EpollEvent$Buffer org.lwjgl.system.linux.EpollEvent.create(int)"""
        return Buffer._wrap(_EpollEvent.create(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc() -> 'EpollEvent':
        """public static org.lwjgl.system.linux.EpollEvent org.lwjgl.system.linux.EpollEvent.malloc()"""
        return EpollEvent._wrap(_EpollEvent.malloc())

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.EpollEvent$Buffer org.lwjgl.system.linux.EpollEvent.createSafe(long,int)"""
        return Buffer._wrap(_EpollEvent.createSafe(_long.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.EpollEvent$Buffer org.lwjgl.system.linux.EpollEvent.malloc(int)"""
        return Buffer._wrap(_EpollEvent.malloc(_int.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def data(self, arg0: 'EpollData') -> 'EpollEvent':
        """public org.lwjgl.system.linux.EpollEvent org.lwjgl.system.linux.EpollEvent.data(org.lwjgl.system.linux.EpollData)"""
        return 'EpollEvent'._wrap(super(_EpollEvent, self).data(arg0))

    @staticmethod
    @overload
    def calloc() -> 'EpollEvent':
        """public static org.lwjgl.system.linux.EpollEvent org.lwjgl.system.linux.EpollEvent.calloc()"""
        return EpollEvent._wrap(_EpollEvent.calloc())

    @staticmethod
    @overload
    def nevents(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.EpollEvent.nevents(long,int)"""
        _EpollEvent.nevents(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @staticmethod
    @overload
    def create(arg0: int) -> 'EpollEvent':
        """public static org.lwjgl.system.linux.EpollEvent org.lwjgl.system.linux.EpollEvent.create(long)"""
        return EpollEvent._wrap(_EpollEvent.create(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'EpollEvent':
        """public static org.lwjgl.system.linux.EpollEvent org.lwjgl.system.linux.EpollEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return EpollEvent._wrap(_EpollEvent.malloc(arg0))

    @staticmethod
    @overload
    def create() -> 'EpollEvent':
        """public static org.lwjgl.system.linux.EpollEvent org.lwjgl.system.linux.EpollEvent.create()"""
        return EpollEvent._wrap(_EpollEvent.create())

    @overload
    def events(self) -> int:
        """public int org.lwjgl.system.linux.EpollEvent.events()"""
        return int._wrap(super(EpollEvent, self).events())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.EpollEvent(java.nio.ByteBuffer)"""
        val = _EpollEvent(arg0)
        self.__wrapper = val

    @overload
    def data(self, arg0: 'Consumer') -> 'EpollEvent':
        """public org.lwjgl.system.linux.EpollEvent org.lwjgl.system.linux.EpollEvent.data(java.util.function.Consumer<org.lwjgl.system.linux.EpollData>)"""
        return 'EpollEvent'._wrap(super(_EpollEvent, self).data(arg0))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.EpollEvent.sizeof()"""
        return int._wrap(super(EpollEvent, self).sizeof())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.EpollEvent$Buffer org.lwjgl.system.linux.EpollEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_EpollEvent.malloc(_int.valueOf(arg0), arg1))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'EpollEvent':
        """public static org.lwjgl.system.linux.EpollEvent org.lwjgl.system.linux.EpollEvent.createSafe(long)"""
        return EpollEvent._wrap(_EpollEvent.createSafe(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        _Struct.validate(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), arg3)

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.EpollEvent$Buffer org.lwjgl.system.linux.EpollEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_EpollEvent.calloc(_int.valueOf(arg0), arg1))

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @overload
    def set(self, arg0: int, arg1: 'EpollData') -> 'EpollEvent':
        """public org.lwjgl.system.linux.EpollEvent org.lwjgl.system.linux.EpollEvent.set(int,org.lwjgl.system.linux.EpollData)"""
        return 'EpollEvent'._wrap(super(_EpollEvent, self).set(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def ndata(arg0: int) -> 'EpollData':
        """public static org.lwjgl.system.linux.EpollData org.lwjgl.system.linux.EpollEvent.ndata(long)"""
        return EpollData._wrap(_EpollEvent.ndata(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.EpollEvent$Buffer org.lwjgl.system.linux.EpollEvent.calloc(int)"""
        return Buffer._wrap(_EpollEvent.calloc(_int.valueOf(arg0)))

    @overload
    def data(self) -> 'EpollData':
        """public org.lwjgl.system.linux.EpollData org.lwjgl.system.linux.EpollEvent.data()"""
        return 'EpollData'._wrap(super(EpollEvent, self).data())

    @staticmethod
    @overload
    def nevents(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.EpollEvent.nevents(long)"""
        return int._wrap(_EpollEvent.nevents(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.EpollEvent$Buffer org.lwjgl.system.linux.EpollEvent.create(long,int)"""
        return Buffer._wrap(_EpollEvent.create(_long.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def set(self, arg0: 'EpollEvent') -> 'EpollEvent':
        """public org.lwjgl.system.linux.EpollEvent org.lwjgl.system.linux.EpollEvent.set(org.lwjgl.system.linux.EpollEvent)"""
        return 'EpollEvent'._wrap(super(_EpollEvent, self).set(arg0))

    @overload
    def events(self, arg0: int) -> 'EpollEvent':
        """public org.lwjgl.system.linux.EpollEvent org.lwjgl.system.linux.EpollEvent.events(int)"""
        return 'EpollEvent'._wrap(super(_EpollEvent, self).events(_int.valueOf(arg0)))

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool._wrap(super(_pyglsystem.Struct, self).isNull(_int.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'EpollEvent':
        """public static org.lwjgl.system.linux.EpollEvent org.lwjgl.system.linux.EpollEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return EpollEvent._wrap(_EpollEvent.calloc(arg0))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str._wrap(super(pyglsystem.Pointer$Default, self).toString())

    @staticmethod
    @overload
    def ndata(arg0: int, arg1: 'EpollData'):
        """public static void org.lwjgl.system.linux.EpollEvent.ndata(long,org.lwjgl.system.linux.EpollData)"""
        _EpollEvent.ndata(_long.valueOf(arg0), arg1)

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).address()) 
 
 
# CLASS: org.lwjgl.system.linux.XUnmapEvent$Buffer
from pyquantum_helper import import_once as _import_once
import java.lang.Object as _Object
_Object = _Object
from builtins import type
import org.lwjgl.system.CustomBuffer as _CustomBuffer
_CustomBuffer = _CustomBuffer
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Boolean as _boolean
import org.lwjgl.system.linux.XUnmapEvent as _XUnmapEvent_Buffer
_Buffer = _XUnmapEvent_Buffer.Buffer
import org.lwjgl.system.StructBuffer as _StructBuffer
_StructBuffer = _StructBuffer
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.util.Iterator as _Iterator
_Iterator = _Iterator
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
import java.util.Spliterator as _Spliterator
_Spliterator = _Spliterator
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.util.Iterator as Iterator
import java.lang.Integer as _int
import java.util.stream.Stream as _Stream
_Stream = _Stream
import java.util.stream.Stream as Stream
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class Buffer():
    """org.lwjgl.system.linux.XUnmapEvent.Buffer"""
 
    @staticmethod
    def _wrap(java_value: _Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Buffer__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Buffer__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).limit(_int.valueOf(arg0)))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XUnmapEvent$Buffer(java.nio.ByteBuffer)"""
        val = _Buffer(arg0)
        self.__wrapper = val

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str._wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def event(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XUnmapEvent$Buffer org.lwjgl.system.linux.XUnmapEvent$Buffer.event(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).event(_long.valueOf(arg0)))

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int._wrap(super(_pyglsystem.CustomBuffer, self).address(_int.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'._wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).stream())

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).position(_int.valueOf(arg0)))

    @overload
    def from_configure(self) -> int:
        """public int org.lwjgl.system.linux.XUnmapEvent$Buffer.from_configure()"""
        return int._wrap(super(Buffer, self).from_configure())

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'._wrap(super(pyglsystem.StructBuffer, self).get())

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XUnmapEvent$Buffer.window()"""
        return int._wrap(super(Buffer, self).window())

    @overload
    def event(self) -> int:
        """public long org.lwjgl.system.linux.XUnmapEvent$Buffer.event()"""
        return int._wrap(super(Buffer, self).event())

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XUnmapEvent$Buffer(long,int)"""
        val = _Buffer(_long.valueOf(arg0), _int.valueOf(arg1))
        self.__wrapper = val

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def from_configure(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XUnmapEvent$Buffer org.lwjgl.system.linux.XUnmapEvent$Buffer.from_configure(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).from_configure(_int.valueOf(arg0)))

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XUnmapEvent$Buffer org.lwjgl.system.linux.XUnmapEvent$Buffer.type(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).type(_int.valueOf(arg0)))

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XUnmapEvent$Buffer.serial()"""
        return int._wrap(super(Buffer, self).serial())

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(arg0))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XUnmapEvent$Buffer.type()"""
        return int._wrap(super(Buffer, self).type())

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XUnmapEvent$Buffer org.lwjgl.system.linux.XUnmapEvent$Buffer.display(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).display(_long.valueOf(arg0)))

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'._wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(arg0))

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XUnmapEvent$Buffer org.lwjgl.system.linux.XUnmapEvent$Buffer.send_event(boolean)"""
        return 'Buffer'._wrap(super(_Buffer, self).send_event(_boolean.valueOf(arg0)))

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).slice())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).slice(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0), arg1))

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(_int.valueOf(arg0), arg1))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).clear())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool._wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XUnmapEvent$Buffer.send_event()"""
        return bool._wrap(super(Buffer, self).send_event())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).flip())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int._wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(_int.valueOf(arg0), arg1))

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XUnmapEvent$Buffer.display()"""
        return int._wrap(super(Buffer, self).display())

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(_pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XUnmapEvent$Buffer org.lwjgl.system.linux.XUnmapEvent$Buffer.serial(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).serial(_long.valueOf(arg0)))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def window(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XUnmapEvent$Buffer org.lwjgl.system.linux.XUnmapEvent$Buffer.window(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).window(_long.valueOf(arg0)))

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(arg0)) 
 
 
# CLASS: org.lwjgl.system.linux.XSelectionRequestEvent
from pyquantum_helper import import_once as _import_once
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _Object
_Object = _Object
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
from builtins import type
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import org.lwjgl.system.linux.XSelectionRequestEvent as _XSelectionRequestEvent_Buffer
_Buffer = _XSelectionRequestEvent_Buffer.Buffer
import java.lang.String as _String
_String = _String
import java.lang.Boolean as _boolean
import java.lang.Integer as _int
import org.lwjgl.system.linux.XSelectionRequestEvent as _XSelectionRequestEvent
_XSelectionRequestEvent = _XSelectionRequestEvent
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class XSelectionRequestEvent():
    """org.lwjgl.system.linux.XSelectionRequestEvent"""
 
    @staticmethod
    def _wrap(java_value: _XSelectionRequestEvent) -> 'XSelectionRequestEvent':
        return XSelectionRequestEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _XSelectionRequestEvent):
        """
        Dynamic initializer for XSelectionRequestEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_XSelectionRequestEvent__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_XSelectionRequestEvent__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def create(arg0: int) -> 'XSelectionRequestEvent':
        """public static org.lwjgl.system.linux.XSelectionRequestEvent org.lwjgl.system.linux.XSelectionRequestEvent.create(long)"""
        return XSelectionRequestEvent._wrap(_XSelectionRequestEvent.create(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XSelectionRequestEvent.ntype(long)"""
        return int._wrap(_XSelectionRequestEvent.ntype(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc() -> 'XSelectionRequestEvent':
        """public static org.lwjgl.system.linux.XSelectionRequestEvent org.lwjgl.system.linux.XSelectionRequestEvent.malloc()"""
        return XSelectionRequestEvent._wrap(_XSelectionRequestEvent.malloc())

    @overload
    def property(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionRequestEvent.property()"""
        return int._wrap(super(XSelectionRequestEvent, self).property())

    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSelectionRequestEvent.nsend_event(long,int)"""
        _XSelectionRequestEvent.nsend_event(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def set(self, arg0: 'XSelectionRequestEvent') -> 'XSelectionRequestEvent':
        """public org.lwjgl.system.linux.XSelectionRequestEvent org.lwjgl.system.linux.XSelectionRequestEvent.set(org.lwjgl.system.linux.XSelectionRequestEvent)"""
        return 'XSelectionRequestEvent'._wrap(super(_XSelectionRequestEvent, self).set(arg0))

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionRequestEvent$Buffer org.lwjgl.system.linux.XSelectionRequestEvent.callocStack(int)"""
        return Buffer._wrap(_XSelectionRequestEvent.callocStack(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XSelectionRequestEvent':
        """public static org.lwjgl.system.linux.XSelectionRequestEvent org.lwjgl.system.linux.XSelectionRequestEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XSelectionRequestEvent._wrap(_XSelectionRequestEvent.mallocStack(arg0))

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XSelectionRequestEvent.ndisplay(long)"""
        return int._wrap(_XSelectionRequestEvent.ndisplay(_long.valueOf(arg0)))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def nowner(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XSelectionRequestEvent.nowner(long)"""
        return int._wrap(_XSelectionRequestEvent.nowner(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XSelectionRequestEvent':
        """public static org.lwjgl.system.linux.XSelectionRequestEvent org.lwjgl.system.linux.XSelectionRequestEvent.createSafe(long)"""
        return XSelectionRequestEvent._wrap(_XSelectionRequestEvent.createSafe(_long.valueOf(arg0)))

    @overload
    def requestor(self, arg0: int) -> 'XSelectionRequestEvent':
        """public org.lwjgl.system.linux.XSelectionRequestEvent org.lwjgl.system.linux.XSelectionRequestEvent.requestor(long)"""
        return 'XSelectionRequestEvent'._wrap(super(_XSelectionRequestEvent, self).requestor(_long.valueOf(arg0)))

    @overload
    def time(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionRequestEvent.time()"""
        return int._wrap(super(XSelectionRequestEvent, self).time())

    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XSelectionRequestEvent.nsend_event(long)"""
        return int._wrap(_XSelectionRequestEvent.nsend_event(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XSelectionRequestEvent':
        """public static org.lwjgl.system.linux.XSelectionRequestEvent org.lwjgl.system.linux.XSelectionRequestEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XSelectionRequestEvent._wrap(_XSelectionRequestEvent.malloc(arg0))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def type(self, arg0: int) -> 'XSelectionRequestEvent':
        """public org.lwjgl.system.linux.XSelectionRequestEvent org.lwjgl.system.linux.XSelectionRequestEvent.type(int)"""
        return 'XSelectionRequestEvent'._wrap(super(_XSelectionRequestEvent, self).type(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def ntarget(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSelectionRequestEvent.ntarget(long,long)"""
        _XSelectionRequestEvent.ntarget(_long.valueOf(arg0), _long.valueOf(arg1))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @staticmethod
    @overload
    def nowner(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSelectionRequestEvent.nowner(long,long)"""
        _XSelectionRequestEvent.nowner(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XSelectionRequestEvent':
        """public static org.lwjgl.system.linux.XSelectionRequestEvent org.lwjgl.system.linux.XSelectionRequestEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XSelectionRequestEvent._wrap(_XSelectionRequestEvent.calloc(arg0))

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionRequestEvent$Buffer org.lwjgl.system.linux.XSelectionRequestEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XSelectionRequestEvent.calloc(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def nselection(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSelectionRequestEvent.nselection(long,long)"""
        _XSelectionRequestEvent.nselection(_long.valueOf(arg0), _long.valueOf(arg1))

    @overload
    def time(self, arg0: int) -> 'XSelectionRequestEvent':
        """public org.lwjgl.system.linux.XSelectionRequestEvent org.lwjgl.system.linux.XSelectionRequestEvent.time(long)"""
        return 'XSelectionRequestEvent'._wrap(super(_XSelectionRequestEvent, self).time(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionRequestEvent$Buffer org.lwjgl.system.linux.XSelectionRequestEvent.malloc(int)"""
        return Buffer._wrap(_XSelectionRequestEvent.malloc(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XSelectionRequestEvent.nserial(long)"""
        return int._wrap(_XSelectionRequestEvent.nserial(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack() -> 'XSelectionRequestEvent':
        """public static org.lwjgl.system.linux.XSelectionRequestEvent org.lwjgl.system.linux.XSelectionRequestEvent.callocStack()"""
        return XSelectionRequestEvent._wrap(_XSelectionRequestEvent.callocStack())

    @overload
    def serial(self, arg0: int) -> 'XSelectionRequestEvent':
        """public org.lwjgl.system.linux.XSelectionRequestEvent org.lwjgl.system.linux.XSelectionRequestEvent.serial(long)"""
        return 'XSelectionRequestEvent'._wrap(super(_XSelectionRequestEvent, self).serial(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def ntarget(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XSelectionRequestEvent.ntarget(long)"""
        return int._wrap(_XSelectionRequestEvent.ntarget(_long.valueOf(arg0)))

    @overload
    def target(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionRequestEvent.target()"""
        return int._wrap(super(XSelectionRequestEvent, self).target())

    @overload
    def target(self, arg0: int) -> 'XSelectionRequestEvent':
        """public org.lwjgl.system.linux.XSelectionRequestEvent org.lwjgl.system.linux.XSelectionRequestEvent.target(long)"""
        return 'XSelectionRequestEvent'._wrap(super(_XSelectionRequestEvent, self).target(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSelectionRequestEvent.ntype(long,int)"""
        _XSelectionRequestEvent.ntype(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        _Struct.validate(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), arg3)

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionRequestEvent$Buffer org.lwjgl.system.linux.XSelectionRequestEvent.create(int)"""
        return Buffer._wrap(_XSelectionRequestEvent.create(_int.valueOf(arg0)))

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionRequestEvent.serial()"""
        return int._wrap(super(XSelectionRequestEvent, self).serial())

    @staticmethod
    @overload
    def ntime(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSelectionRequestEvent.ntime(long,long)"""
        _XSelectionRequestEvent.ntime(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionRequestEvent$Buffer org.lwjgl.system.linux.XSelectionRequestEvent.mallocStack(int)"""
        return Buffer._wrap(_XSelectionRequestEvent.mallocStack(_int.valueOf(arg0)))

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: int) -> 'XSelectionRequestEvent':
        """public org.lwjgl.system.linux.XSelectionRequestEvent org.lwjgl.system.linux.XSelectionRequestEvent.set(int,long,boolean,long,long,long,long,long,long,long)"""
        return 'XSelectionRequestEvent'._wrap(super(_XSelectionRequestEvent, self).set(_int.valueOf(arg0), _long.valueOf(arg1), _boolean.valueOf(arg2), _long.valueOf(arg3), _long.valueOf(arg4), _long.valueOf(arg5), _long.valueOf(arg6), _long.valueOf(arg7), _long.valueOf(arg8), _long.valueOf(arg9)))

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XSelectionRequestEvent':
        """public static org.lwjgl.system.linux.XSelectionRequestEvent org.lwjgl.system.linux.XSelectionRequestEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XSelectionRequestEvent._wrap(_XSelectionRequestEvent.callocStack(arg0))

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionRequestEvent$Buffer org.lwjgl.system.linux.XSelectionRequestEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XSelectionRequestEvent.mallocStack(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def ntime(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XSelectionRequestEvent.ntime(long)"""
        return int._wrap(_XSelectionRequestEvent.ntime(_long.valueOf(arg0)))

    @overload
    def send_event(self, arg0: bool) -> 'XSelectionRequestEvent':
        """public org.lwjgl.system.linux.XSelectionRequestEvent org.lwjgl.system.linux.XSelectionRequestEvent.send_event(boolean)"""
        return 'XSelectionRequestEvent'._wrap(super(_XSelectionRequestEvent, self).send_event(_boolean.valueOf(arg0)))

    @overload
    def owner(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionRequestEvent.owner()"""
        return int._wrap(super(XSelectionRequestEvent, self).owner())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSelectionRequestEvent.ndisplay(long,long)"""
        _XSelectionRequestEvent.ndisplay(_long.valueOf(arg0), _long.valueOf(arg1))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).address())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XSelectionRequestEvent.sizeof()"""
        return int._wrap(super(XSelectionRequestEvent, self).sizeof())

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XSelectionRequestEvent.validate(long)"""
        _XSelectionRequestEvent.validate(_long.valueOf(arg0))

    @staticmethod
    @overload
    def create() -> 'XSelectionRequestEvent':
        """public static org.lwjgl.system.linux.XSelectionRequestEvent org.lwjgl.system.linux.XSelectionRequestEvent.create()"""
        return XSelectionRequestEvent._wrap(_XSelectionRequestEvent.create())

    @staticmethod
    @overload
    def nproperty(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSelectionRequestEvent.nproperty(long,long)"""
        _XSelectionRequestEvent.nproperty(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionRequestEvent$Buffer org.lwjgl.system.linux.XSelectionRequestEvent.createSafe(long,int)"""
        return Buffer._wrap(_XSelectionRequestEvent.createSafe(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionRequestEvent$Buffer org.lwjgl.system.linux.XSelectionRequestEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XSelectionRequestEvent.callocStack(_int.valueOf(arg0), arg1))

    @overload
    def selection(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionRequestEvent.selection()"""
        return int._wrap(super(XSelectionRequestEvent, self).selection())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionRequestEvent$Buffer org.lwjgl.system.linux.XSelectionRequestEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XSelectionRequestEvent.malloc(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSelectionRequestEvent.nserial(long,long)"""
        _XSelectionRequestEvent.nserial(_long.valueOf(arg0), _long.valueOf(arg1))

    @overload
    def selection(self, arg0: int) -> 'XSelectionRequestEvent':
        """public org.lwjgl.system.linux.XSelectionRequestEvent org.lwjgl.system.linux.XSelectionRequestEvent.selection(long)"""
        return 'XSelectionRequestEvent'._wrap(super(_XSelectionRequestEvent, self).selection(_long.valueOf(arg0)))

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionRequestEvent.display()"""
        return int._wrap(super(XSelectionRequestEvent, self).display())

    @staticmethod
    @overload
    def nproperty(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XSelectionRequestEvent.nproperty(long)"""
        return int._wrap(_XSelectionRequestEvent.nproperty(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionRequestEvent$Buffer org.lwjgl.system.linux.XSelectionRequestEvent.calloc(int)"""
        return Buffer._wrap(_XSelectionRequestEvent.calloc(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack() -> 'XSelectionRequestEvent':
        """public static org.lwjgl.system.linux.XSelectionRequestEvent org.lwjgl.system.linux.XSelectionRequestEvent.mallocStack()"""
        return XSelectionRequestEvent._wrap(_XSelectionRequestEvent.mallocStack())

    @overload
    def property(self, arg0: int) -> 'XSelectionRequestEvent':
        """public org.lwjgl.system.linux.XSelectionRequestEvent org.lwjgl.system.linux.XSelectionRequestEvent.property(long)"""
        return 'XSelectionRequestEvent'._wrap(super(_XSelectionRequestEvent, self).property(_long.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @staticmethod
    @overload
    def nrequestor(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XSelectionRequestEvent.nrequestor(long)"""
        return int._wrap(_XSelectionRequestEvent.nrequestor(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nrequestor(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSelectionRequestEvent.nrequestor(long,long)"""
        _XSelectionRequestEvent.nrequestor(_long.valueOf(arg0), _long.valueOf(arg1))

    @overload
    def requestor(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionRequestEvent.requestor()"""
        return int._wrap(super(XSelectionRequestEvent, self).requestor())

    @overload
    def display(self, arg0: int) -> 'XSelectionRequestEvent':
        """public org.lwjgl.system.linux.XSelectionRequestEvent org.lwjgl.system.linux.XSelectionRequestEvent.display(long)"""
        return 'XSelectionRequestEvent'._wrap(super(_XSelectionRequestEvent, self).display(_long.valueOf(arg0)))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XSelectionRequestEvent.send_event()"""
        return bool._wrap(super(XSelectionRequestEvent, self).send_event())

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XSelectionRequestEvent.type()"""
        return int._wrap(super(XSelectionRequestEvent, self).type())

    @staticmethod
    @overload
    def calloc() -> 'XSelectionRequestEvent':
        """public static org.lwjgl.system.linux.XSelectionRequestEvent org.lwjgl.system.linux.XSelectionRequestEvent.calloc()"""
        return XSelectionRequestEvent._wrap(_XSelectionRequestEvent.calloc())

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionRequestEvent$Buffer org.lwjgl.system.linux.XSelectionRequestEvent.create(long,int)"""
        return Buffer._wrap(_XSelectionRequestEvent.create(_long.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool._wrap(super(_pyglsystem.Struct, self).isNull(_int.valueOf(arg0)))

    @overload
    def owner(self, arg0: int) -> 'XSelectionRequestEvent':
        """public org.lwjgl.system.linux.XSelectionRequestEvent org.lwjgl.system.linux.XSelectionRequestEvent.owner(long)"""
        return 'XSelectionRequestEvent'._wrap(super(_XSelectionRequestEvent, self).owner(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nselection(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XSelectionRequestEvent.nselection(long)"""
        return int._wrap(_XSelectionRequestEvent.nselection(_long.valueOf(arg0)))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XSelectionRequestEvent(java.nio.ByteBuffer)"""
        val = _XSelectionRequestEvent(arg0)
        self.__wrapper = val

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str._wrap(super(pyglsystem.Pointer$Default, self).toString()) 
 
 
# CLASS: org.lwjgl.system.linux.OpenHow
from pyquantum_helper import import_once as _import_once
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _Object
_Object = _Object
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
from builtins import type
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.lang.Integer as _int
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
import java.lang.Long as _long
import org.lwjgl.system.linux.OpenHow as _OpenHow_Buffer
_Buffer = _OpenHow_Buffer.Buffer
import org.lwjgl.system.linux.OpenHow as _OpenHow
_OpenHow = _OpenHow
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class OpenHow():
    """org.lwjgl.system.linux.OpenHow"""
 
    @staticmethod
    def _wrap(java_value: _OpenHow) -> 'OpenHow':
        return OpenHow(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _OpenHow):
        """
        Dynamic initializer for OpenHow.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_OpenHow__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_OpenHow__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def calloc() -> 'OpenHow':
        """public static org.lwjgl.system.linux.OpenHow org.lwjgl.system.linux.OpenHow.calloc()"""
        return OpenHow._wrap(_OpenHow.calloc())

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.OpenHow$Buffer org.lwjgl.system.linux.OpenHow.calloc(int)"""
        return Buffer._wrap(_OpenHow.calloc(_int.valueOf(arg0)))

    @overload
    def flags(self) -> int:
        """public long org.lwjgl.system.linux.OpenHow.flags()"""
        return int._wrap(super(OpenHow, self).flags())

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'OpenHow':
        """public static org.lwjgl.system.linux.OpenHow org.lwjgl.system.linux.OpenHow.malloc(org.lwjgl.system.MemoryStack)"""
        return OpenHow._wrap(_OpenHow.malloc(arg0))

    @overload
    def set(self, arg0: 'OpenHow') -> 'OpenHow':
        """public org.lwjgl.system.linux.OpenHow org.lwjgl.system.linux.OpenHow.set(org.lwjgl.system.linux.OpenHow)"""
        return 'OpenHow'._wrap(super(_OpenHow, self).set(arg0))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'OpenHow':
        """public static org.lwjgl.system.linux.OpenHow org.lwjgl.system.linux.OpenHow.calloc(org.lwjgl.system.MemoryStack)"""
        return OpenHow._wrap(_OpenHow.calloc(arg0))

    @overload
    def resolve(self, arg0: int) -> 'OpenHow':
        """public org.lwjgl.system.linux.OpenHow org.lwjgl.system.linux.OpenHow.resolve(long)"""
        return 'OpenHow'._wrap(super(_OpenHow, self).resolve(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.OpenHow$Buffer org.lwjgl.system.linux.OpenHow.createSafe(long,int)"""
        return Buffer._wrap(_OpenHow.createSafe(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'OpenHow':
        """public static org.lwjgl.system.linux.OpenHow org.lwjgl.system.linux.OpenHow.create(long)"""
        return OpenHow._wrap(_OpenHow.create(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.OpenHow$Buffer org.lwjgl.system.linux.OpenHow.malloc(int)"""
        return Buffer._wrap(_OpenHow.malloc(_int.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def flags(self, arg0: int) -> 'OpenHow':
        """public org.lwjgl.system.linux.OpenHow org.lwjgl.system.linux.OpenHow.flags(long)"""
        return 'OpenHow'._wrap(super(_OpenHow, self).flags(_long.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def set(self, arg0: int, arg1: int, arg2: int) -> 'OpenHow':
        """public org.lwjgl.system.linux.OpenHow org.lwjgl.system.linux.OpenHow.set(long,long,long)"""
        return 'OpenHow'._wrap(super(_OpenHow, self).set(_long.valueOf(arg0), _long.valueOf(arg1), _long.valueOf(arg2)))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.OpenHow(java.nio.ByteBuffer)"""
        val = _OpenHow(arg0)
        self.__wrapper = val

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.OpenHow.sizeof()"""
        return int._wrap(super(OpenHow, self).sizeof())

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.OpenHow$Buffer org.lwjgl.system.linux.OpenHow.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_OpenHow.calloc(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def nflags(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.OpenHow.nflags(long,long)"""
        _OpenHow.nflags(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def nmode(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.OpenHow.nmode(long,long)"""
        _OpenHow.nmode(_long.valueOf(arg0), _long.valueOf(arg1))

    @overload
    def resolve(self) -> int:
        """public long org.lwjgl.system.linux.OpenHow.resolve()"""
        return int._wrap(super(OpenHow, self).resolve())

    @staticmethod
    @overload
    def nmode(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.OpenHow.nmode(long)"""
        return int._wrap(_OpenHow.nmode(_long.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def nresolve(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.OpenHow.nresolve(long)"""
        return int._wrap(_OpenHow.nresolve(_long.valueOf(arg0)))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @staticmethod
    @overload
    def nflags(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.OpenHow.nflags(long)"""
        return int._wrap(_OpenHow.nflags(_long.valueOf(arg0)))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.OpenHow$Buffer org.lwjgl.system.linux.OpenHow.create(int)"""
        return Buffer._wrap(_OpenHow.create(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        _Struct.validate(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), arg3)

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @staticmethod
    @overload
    def malloc() -> 'OpenHow':
        """public static org.lwjgl.system.linux.OpenHow org.lwjgl.system.linux.OpenHow.malloc()"""
        return OpenHow._wrap(_OpenHow.malloc())

    @overload
    def mode(self) -> int:
        """public long org.lwjgl.system.linux.OpenHow.mode()"""
        return int._wrap(super(OpenHow, self).mode())

    @overload
    def mode(self, arg0: int) -> 'OpenHow':
        """public org.lwjgl.system.linux.OpenHow org.lwjgl.system.linux.OpenHow.mode(long)"""
        return 'OpenHow'._wrap(super(_OpenHow, self).mode(_long.valueOf(arg0)))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool._wrap(super(_pyglsystem.Struct, self).isNull(_int.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.OpenHow$Buffer org.lwjgl.system.linux.OpenHow.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_OpenHow.malloc(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'OpenHow':
        """public static org.lwjgl.system.linux.OpenHow org.lwjgl.system.linux.OpenHow.createSafe(long)"""
        return OpenHow._wrap(_OpenHow.createSafe(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def create() -> 'OpenHow':
        """public static org.lwjgl.system.linux.OpenHow org.lwjgl.system.linux.OpenHow.create()"""
        return OpenHow._wrap(_OpenHow.create())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str._wrap(super(pyglsystem.Pointer$Default, self).toString())

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.OpenHow$Buffer org.lwjgl.system.linux.OpenHow.create(long,int)"""
        return Buffer._wrap(_OpenHow.create(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def nresolve(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.OpenHow.nresolve(long,long)"""
        _OpenHow.nresolve(_long.valueOf(arg0), _long.valueOf(arg1))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).address()) 
 
 
# CLASS: org.lwjgl.system.linux.XKeyEvent
from pyquantum_helper import import_once as _import_once
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _Object
_Object = _Object
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
from builtins import type
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.lang.Boolean as _boolean
import java.lang.Integer as _int
import org.lwjgl.system.linux.XKeyEvent as _XKeyEvent_Buffer
_Buffer = _XKeyEvent_Buffer.Buffer
import org.lwjgl.system.linux.XKeyEvent as _XKeyEvent
_XKeyEvent = _XKeyEvent
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class XKeyEvent():
    """org.lwjgl.system.linux.XKeyEvent"""
 
    @staticmethod
    def _wrap(java_value: _XKeyEvent) -> 'XKeyEvent':
        return XKeyEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _XKeyEvent):
        """
        Dynamic initializer for XKeyEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_XKeyEvent__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_XKeyEvent__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def display(self, arg0: int) -> 'XKeyEvent':
        """public org.lwjgl.system.linux.XKeyEvent org.lwjgl.system.linux.XKeyEvent.display(long)"""
        return 'XKeyEvent'._wrap(super(_XKeyEvent, self).display(_long.valueOf(arg0)))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XKeyEvent.send_event()"""
        return bool._wrap(super(XKeyEvent, self).send_event())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XKeyEvent.sizeof()"""
        return int._wrap(super(XKeyEvent, self).sizeof())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XKeyEvent(java.nio.ByteBuffer)"""
        val = _XKeyEvent(arg0)
        self.__wrapper = val

    @staticmethod
    @overload
    def ny_root(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XKeyEvent.ny_root(long)"""
        return int._wrap(_XKeyEvent.ny_root(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nx(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XKeyEvent.nx(long)"""
        return int._wrap(_XKeyEvent.nx(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nx(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XKeyEvent.nx(long,int)"""
        _XKeyEvent.nx(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XKeyEvent.window()"""
        return int._wrap(super(XKeyEvent, self).window())

    @overload
    def x(self, arg0: int) -> 'XKeyEvent':
        """public org.lwjgl.system.linux.XKeyEvent org.lwjgl.system.linux.XKeyEvent.x(int)"""
        return 'XKeyEvent'._wrap(super(_XKeyEvent, self).x(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def nroot(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XKeyEvent.nroot(long)"""
        return int._wrap(_XKeyEvent.nroot(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nwindow(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XKeyEvent.nwindow(long,long)"""
        _XKeyEvent.nwindow(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def create() -> 'XKeyEvent':
        """public static org.lwjgl.system.linux.XKeyEvent org.lwjgl.system.linux.XKeyEvent.create()"""
        return XKeyEvent._wrap(_XKeyEvent.create())

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XKeyEvent$Buffer org.lwjgl.system.linux.XKeyEvent.calloc(int)"""
        return Buffer._wrap(_XKeyEvent.calloc(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def ny(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XKeyEvent.ny(long)"""
        return int._wrap(_XKeyEvent.ny(_long.valueOf(arg0)))

    @overload
    def serial(self, arg0: int) -> 'XKeyEvent':
        """public org.lwjgl.system.linux.XKeyEvent org.lwjgl.system.linux.XKeyEvent.serial(long)"""
        return 'XKeyEvent'._wrap(super(_XKeyEvent, self).serial(_long.valueOf(arg0)))

    @overload
    def set(self, arg0: 'XKeyEvent') -> 'XKeyEvent':
        """public org.lwjgl.system.linux.XKeyEvent org.lwjgl.system.linux.XKeyEvent.set(org.lwjgl.system.linux.XKeyEvent)"""
        return 'XKeyEvent'._wrap(super(_XKeyEvent, self).set(arg0))

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        _Struct.validate(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), arg3)

    @staticmethod
    @overload
    def calloc() -> 'XKeyEvent':
        """public static org.lwjgl.system.linux.XKeyEvent org.lwjgl.system.linux.XKeyEvent.calloc()"""
        return XKeyEvent._wrap(_XKeyEvent.calloc())

    @staticmethod
    @overload
    def nsame_screen(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XKeyEvent.nsame_screen(long)"""
        return int._wrap(_XKeyEvent.nsame_screen(_long.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XKeyEvent.serial()"""
        return int._wrap(super(XKeyEvent, self).serial())

    @staticmethod
    @overload
    def nsame_screen(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XKeyEvent.nsame_screen(long,int)"""
        _XKeyEvent.nsame_screen(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XKeyEvent$Buffer org.lwjgl.system.linux.XKeyEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XKeyEvent.malloc(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XKeyEvent.ntype(long,int)"""
        _XKeyEvent.ntype(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def y(self, arg0: int) -> 'XKeyEvent':
        """public org.lwjgl.system.linux.XKeyEvent org.lwjgl.system.linux.XKeyEvent.y(int)"""
        return 'XKeyEvent'._wrap(super(_XKeyEvent, self).y(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'XKeyEvent':
        """public static org.lwjgl.system.linux.XKeyEvent org.lwjgl.system.linux.XKeyEvent.create(long)"""
        return XKeyEvent._wrap(_XKeyEvent.create(_long.valueOf(arg0)))

    @overload
    def subwindow(self) -> int:
        """public long org.lwjgl.system.linux.XKeyEvent.subwindow()"""
        return int._wrap(super(XKeyEvent, self).subwindow())

    @staticmethod
    @overload
    def nstate(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XKeyEvent.nstate(long,int)"""
        _XKeyEvent.nstate(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XKeyEvent$Buffer org.lwjgl.system.linux.XKeyEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XKeyEvent.calloc(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XKeyEvent':
        """public static org.lwjgl.system.linux.XKeyEvent org.lwjgl.system.linux.XKeyEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XKeyEvent._wrap(_XKeyEvent.mallocStack(arg0))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XKeyEvent.type()"""
        return int._wrap(super(XKeyEvent, self).type())

    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XKeyEvent.nsend_event(long,int)"""
        _XKeyEvent.nsend_event(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def nx_root(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XKeyEvent.nx_root(long,int)"""
        _XKeyEvent.nx_root(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XKeyEvent':
        """public static org.lwjgl.system.linux.XKeyEvent org.lwjgl.system.linux.XKeyEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XKeyEvent._wrap(_XKeyEvent.malloc(arg0))

    @staticmethod
    @overload
    def callocStack() -> 'XKeyEvent':
        """public static org.lwjgl.system.linux.XKeyEvent org.lwjgl.system.linux.XKeyEvent.callocStack()"""
        return XKeyEvent._wrap(_XKeyEvent.callocStack())

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XKeyEvent':
        """public static org.lwjgl.system.linux.XKeyEvent org.lwjgl.system.linux.XKeyEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XKeyEvent._wrap(_XKeyEvent.callocStack(arg0))

    @overload
    def x_root(self, arg0: int) -> 'XKeyEvent':
        """public org.lwjgl.system.linux.XKeyEvent org.lwjgl.system.linux.XKeyEvent.x_root(int)"""
        return 'XKeyEvent'._wrap(super(_XKeyEvent, self).x_root(_int.valueOf(arg0)))

    @overload
    def y_root(self) -> int:
        """public int org.lwjgl.system.linux.XKeyEvent.y_root()"""
        return int._wrap(super(XKeyEvent, self).y_root())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XKeyEvent$Buffer org.lwjgl.system.linux.XKeyEvent.create(int)"""
        return Buffer._wrap(_XKeyEvent.create(_int.valueOf(arg0)))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XKeyEvent.nserial(long,long)"""
        _XKeyEvent.nserial(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def malloc() -> 'XKeyEvent':
        """public static org.lwjgl.system.linux.XKeyEvent org.lwjgl.system.linux.XKeyEvent.malloc()"""
        return XKeyEvent._wrap(_XKeyEvent.malloc())

    @staticmethod
    @overload
    def ny_root(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XKeyEvent.ny_root(long,int)"""
        _XKeyEvent.ny_root(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def root(self, arg0: int) -> 'XKeyEvent':
        """public org.lwjgl.system.linux.XKeyEvent org.lwjgl.system.linux.XKeyEvent.root(long)"""
        return 'XKeyEvent'._wrap(super(_XKeyEvent, self).root(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def ntime(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XKeyEvent.ntime(long,long)"""
        _XKeyEvent.ntime(_long.valueOf(arg0), _long.valueOf(arg1))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool._wrap(super(_pyglsystem.Struct, self).isNull(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def nsubwindow(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XKeyEvent.nsubwindow(long,long)"""
        _XKeyEvent.nsubwindow(_long.valueOf(arg0), _long.valueOf(arg1))

    @overload
    def window(self, arg0: int) -> 'XKeyEvent':
        """public org.lwjgl.system.linux.XKeyEvent org.lwjgl.system.linux.XKeyEvent.window(long)"""
        return 'XKeyEvent'._wrap(super(_XKeyEvent, self).window(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XKeyEvent.nserial(long)"""
        return int._wrap(_XKeyEvent.nserial(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XKeyEvent$Buffer org.lwjgl.system.linux.XKeyEvent.createSafe(long,int)"""
        return Buffer._wrap(_XKeyEvent.createSafe(_long.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def state(self) -> int:
        """public int org.lwjgl.system.linux.XKeyEvent.state()"""
        return int._wrap(super(XKeyEvent, self).state())

    @overload
    def x(self) -> int:
        """public int org.lwjgl.system.linux.XKeyEvent.x()"""
        return int._wrap(super(XKeyEvent, self).x())

    @overload
    def same_screen(self) -> bool:
        """public boolean org.lwjgl.system.linux.XKeyEvent.same_screen()"""
        return bool._wrap(super(XKeyEvent, self).same_screen())

    @staticmethod
    @overload
    def nwindow(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XKeyEvent.nwindow(long)"""
        return int._wrap(_XKeyEvent.nwindow(_long.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XKeyEvent.ntype(long)"""
        return int._wrap(_XKeyEvent.ntype(_long.valueOf(arg0)))

    @overload
    def same_screen(self, arg0: bool) -> 'XKeyEvent':
        """public org.lwjgl.system.linux.XKeyEvent org.lwjgl.system.linux.XKeyEvent.same_screen(boolean)"""
        return 'XKeyEvent'._wrap(super(_XKeyEvent, self).same_screen(_boolean.valueOf(arg0)))

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XKeyEvent.ndisplay(long)"""
        return int._wrap(_XKeyEvent.ndisplay(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XKeyEvent.validate(long)"""
        _XKeyEvent.validate(_long.valueOf(arg0))

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XKeyEvent$Buffer org.lwjgl.system.linux.XKeyEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XKeyEvent.callocStack(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XKeyEvent$Buffer org.lwjgl.system.linux.XKeyEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XKeyEvent.mallocStack(_int.valueOf(arg0), arg1))

    @overload
    def type(self, arg0: int) -> 'XKeyEvent':
        """public org.lwjgl.system.linux.XKeyEvent org.lwjgl.system.linux.XKeyEvent.type(int)"""
        return 'XKeyEvent'._wrap(super(_XKeyEvent, self).type(_int.valueOf(arg0)))

    @overload
    def y(self) -> int:
        """public int org.lwjgl.system.linux.XKeyEvent.y()"""
        return int._wrap(super(XKeyEvent, self).y())

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XKeyEvent$Buffer org.lwjgl.system.linux.XKeyEvent.mallocStack(int)"""
        return Buffer._wrap(_XKeyEvent.mallocStack(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XKeyEvent':
        """public static org.lwjgl.system.linux.XKeyEvent org.lwjgl.system.linux.XKeyEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XKeyEvent._wrap(_XKeyEvent.calloc(arg0))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @overload
    def time(self, arg0: int) -> 'XKeyEvent':
        """public org.lwjgl.system.linux.XKeyEvent org.lwjgl.system.linux.XKeyEvent.time(long)"""
        return 'XKeyEvent'._wrap(super(_XKeyEvent, self).time(_long.valueOf(arg0)))

    @overload
    def keycode(self) -> int:
        """public int org.lwjgl.system.linux.XKeyEvent.keycode()"""
        return int._wrap(super(XKeyEvent, self).keycode())

    @overload
    def x_root(self) -> int:
        """public int org.lwjgl.system.linux.XKeyEvent.x_root()"""
        return int._wrap(super(XKeyEvent, self).x_root())

    @overload
    def keycode(self, arg0: int) -> 'XKeyEvent':
        """public org.lwjgl.system.linux.XKeyEvent org.lwjgl.system.linux.XKeyEvent.keycode(int)"""
        return 'XKeyEvent'._wrap(super(_XKeyEvent, self).keycode(_int.valueOf(arg0)))

    @overload
    def y_root(self, arg0: int) -> 'XKeyEvent':
        """public org.lwjgl.system.linux.XKeyEvent org.lwjgl.system.linux.XKeyEvent.y_root(int)"""
        return 'XKeyEvent'._wrap(super(_XKeyEvent, self).y_root(_int.valueOf(arg0)))

    @overload
    def send_event(self, arg0: bool) -> 'XKeyEvent':
        """public org.lwjgl.system.linux.XKeyEvent org.lwjgl.system.linux.XKeyEvent.send_event(boolean)"""
        return 'XKeyEvent'._wrap(super(_XKeyEvent, self).send_event(_boolean.valueOf(arg0)))

    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XKeyEvent.nsend_event(long)"""
        return int._wrap(_XKeyEvent.nsend_event(_long.valueOf(arg0)))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).address())

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XKeyEvent':
        """public static org.lwjgl.system.linux.XKeyEvent org.lwjgl.system.linux.XKeyEvent.createSafe(long)"""
        return XKeyEvent._wrap(_XKeyEvent.createSafe(_long.valueOf(arg0)))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @staticmethod
    @overload
    def nstate(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XKeyEvent.nstate(long)"""
        return int._wrap(_XKeyEvent.nstate(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack() -> 'XKeyEvent':
        """public static org.lwjgl.system.linux.XKeyEvent org.lwjgl.system.linux.XKeyEvent.mallocStack()"""
        return XKeyEvent._wrap(_XKeyEvent.mallocStack())

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XKeyEvent$Buffer org.lwjgl.system.linux.XKeyEvent.create(long,int)"""
        return Buffer._wrap(_XKeyEvent.create(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def nx_root(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XKeyEvent.nx_root(long)"""
        return int._wrap(_XKeyEvent.nx_root(_long.valueOf(arg0)))

    @overload
    def root(self) -> int:
        """public long org.lwjgl.system.linux.XKeyEvent.root()"""
        return int._wrap(super(XKeyEvent, self).root())

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XKeyEvent$Buffer org.lwjgl.system.linux.XKeyEvent.malloc(int)"""
        return Buffer._wrap(_XKeyEvent.malloc(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XKeyEvent$Buffer org.lwjgl.system.linux.XKeyEvent.callocStack(int)"""
        return Buffer._wrap(_XKeyEvent.callocStack(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def nkeycode(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XKeyEvent.nkeycode(long)"""
        return int._wrap(_XKeyEvent.nkeycode(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XKeyEvent.ndisplay(long,long)"""
        _XKeyEvent.ndisplay(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def nsubwindow(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XKeyEvent.nsubwindow(long)"""
        return int._wrap(_XKeyEvent.nsubwindow(_long.valueOf(arg0)))

    @overload
    def time(self) -> int:
        """public long org.lwjgl.system.linux.XKeyEvent.time()"""
        return int._wrap(super(XKeyEvent, self).time())

    @staticmethod
    @overload
    def nkeycode(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XKeyEvent.nkeycode(long,int)"""
        _XKeyEvent.nkeycode(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: int, arg10: int, arg11: int, arg12: int, arg13: int, arg14: bool) -> 'XKeyEvent':
        """public org.lwjgl.system.linux.XKeyEvent org.lwjgl.system.linux.XKeyEvent.set(int,long,boolean,long,long,long,long,long,int,int,int,int,int,int,boolean)"""
        return 'XKeyEvent'._wrap(super(_XKeyEvent, self).set(_int.valueOf(arg0), _long.valueOf(arg1), _boolean.valueOf(arg2), _long.valueOf(arg3), _long.valueOf(arg4), _long.valueOf(arg5), _long.valueOf(arg6), _long.valueOf(arg7), _int.valueOf(arg8), _int.valueOf(arg9), _int.valueOf(arg10), _int.valueOf(arg11), _int.valueOf(arg12), _int.valueOf(arg13), _boolean.valueOf(arg14)))

    @staticmethod
    @overload
    def ntime(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XKeyEvent.ntime(long)"""
        return int._wrap(_XKeyEvent.ntime(_long.valueOf(arg0)))

    @overload
    def state(self, arg0: int) -> 'XKeyEvent':
        """public org.lwjgl.system.linux.XKeyEvent org.lwjgl.system.linux.XKeyEvent.state(int)"""
        return 'XKeyEvent'._wrap(super(_XKeyEvent, self).state(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def ny(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XKeyEvent.ny(long,int)"""
        _XKeyEvent.ny(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def subwindow(self, arg0: int) -> 'XKeyEvent':
        """public org.lwjgl.system.linux.XKeyEvent org.lwjgl.system.linux.XKeyEvent.subwindow(long)"""
        return 'XKeyEvent'._wrap(super(_XKeyEvent, self).subwindow(_long.valueOf(arg0)))

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XKeyEvent.display()"""
        return int._wrap(super(XKeyEvent, self).display())

    @staticmethod
    @overload
    def nroot(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XKeyEvent.nroot(long,long)"""
        _XKeyEvent.nroot(_long.valueOf(arg0), _long.valueOf(arg1))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str._wrap(super(pyglsystem.Pointer$Default, self).toString()) 
 
 
# CLASS: org.lwjgl.system.linux.XGraphicsExposeEvent
from pyquantum_helper import import_once as _import_once
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _Object
_Object = _Object
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
from builtins import type
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import org.lwjgl.system.linux.XGraphicsExposeEvent as _XGraphicsExposeEvent_Buffer
_Buffer = _XGraphicsExposeEvent_Buffer.Buffer
import java.lang.Boolean as _boolean
import java.lang.Integer as _int
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.nio.ByteBuffer as ByteBuffer
import org.lwjgl.system.linux.XGraphicsExposeEvent as _XGraphicsExposeEvent
_XGraphicsExposeEvent = _XGraphicsExposeEvent
from builtins import bool
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class XGraphicsExposeEvent():
    """org.lwjgl.system.linux.XGraphicsExposeEvent"""
 
    @staticmethod
    def _wrap(java_value: _XGraphicsExposeEvent) -> 'XGraphicsExposeEvent':
        return XGraphicsExposeEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _XGraphicsExposeEvent):
        """
        Dynamic initializer for XGraphicsExposeEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_XGraphicsExposeEvent__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_XGraphicsExposeEvent__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def mallocStack() -> 'XGraphicsExposeEvent':
        """public static org.lwjgl.system.linux.XGraphicsExposeEvent org.lwjgl.system.linux.XGraphicsExposeEvent.mallocStack()"""
        return XGraphicsExposeEvent._wrap(_XGraphicsExposeEvent.mallocStack())

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XGraphicsExposeEvent':
        """public static org.lwjgl.system.linux.XGraphicsExposeEvent org.lwjgl.system.linux.XGraphicsExposeEvent.createSafe(long)"""
        return XGraphicsExposeEvent._wrap(_XGraphicsExposeEvent.createSafe(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer org.lwjgl.system.linux.XGraphicsExposeEvent.createSafe(long,int)"""
        return Buffer._wrap(_XGraphicsExposeEvent.createSafe(_long.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def type(self, arg0: int) -> 'XGraphicsExposeEvent':
        """public org.lwjgl.system.linux.XGraphicsExposeEvent org.lwjgl.system.linux.XGraphicsExposeEvent.type(int)"""
        return 'XGraphicsExposeEvent'._wrap(super(_XGraphicsExposeEvent, self).type(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer org.lwjgl.system.linux.XGraphicsExposeEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XGraphicsExposeEvent.malloc(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def create() -> 'XGraphicsExposeEvent':
        """public static org.lwjgl.system.linux.XGraphicsExposeEvent org.lwjgl.system.linux.XGraphicsExposeEvent.create()"""
        return XGraphicsExposeEvent._wrap(_XGraphicsExposeEvent.create())

    @staticmethod
    @overload
    def ndrawable(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGraphicsExposeEvent.ndrawable(long,long)"""
        _XGraphicsExposeEvent.ndrawable(_long.valueOf(arg0), _long.valueOf(arg1))

    @overload
    def height(self, arg0: int) -> 'XGraphicsExposeEvent':
        """public org.lwjgl.system.linux.XGraphicsExposeEvent org.lwjgl.system.linux.XGraphicsExposeEvent.height(int)"""
        return 'XGraphicsExposeEvent'._wrap(super(_XGraphicsExposeEvent, self).height(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def nminor_code(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGraphicsExposeEvent.nminor_code(long,int)"""
        _XGraphicsExposeEvent.nminor_code(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer org.lwjgl.system.linux.XGraphicsExposeEvent.create(long,int)"""
        return Buffer._wrap(_XGraphicsExposeEvent.create(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def nmajor_code(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XGraphicsExposeEvent.nmajor_code(long)"""
        return int._wrap(_XGraphicsExposeEvent.nmajor_code(_long.valueOf(arg0)))

    @overload
    def drawable(self) -> int:
        """public long org.lwjgl.system.linux.XGraphicsExposeEvent.drawable()"""
        return int._wrap(super(XGraphicsExposeEvent, self).drawable())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def minor_code(self) -> int:
        """public int org.lwjgl.system.linux.XGraphicsExposeEvent.minor_code()"""
        return int._wrap(super(XGraphicsExposeEvent, self).minor_code())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XGraphicsExposeEvent':
        """public static org.lwjgl.system.linux.XGraphicsExposeEvent org.lwjgl.system.linux.XGraphicsExposeEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XGraphicsExposeEvent._wrap(_XGraphicsExposeEvent.malloc(arg0))

    @staticmethod
    @overload
    def ny(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGraphicsExposeEvent.ny(long,int)"""
        _XGraphicsExposeEvent.ny(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XGraphicsExposeEvent':
        """public static org.lwjgl.system.linux.XGraphicsExposeEvent org.lwjgl.system.linux.XGraphicsExposeEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XGraphicsExposeEvent._wrap(_XGraphicsExposeEvent.callocStack(arg0))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XGraphicsExposeEvent(java.nio.ByteBuffer)"""
        val = _XGraphicsExposeEvent(arg0)
        self.__wrapper = val

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XGraphicsExposeEvent.display()"""
        return int._wrap(super(XGraphicsExposeEvent, self).display())

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XGraphicsExposeEvent.validate(long)"""
        _XGraphicsExposeEvent.validate(_long.valueOf(arg0))

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XGraphicsExposeEvent.nserial(long)"""
        return int._wrap(_XGraphicsExposeEvent.nserial(_long.valueOf(arg0)))

    @overload
    def display(self, arg0: int) -> 'XGraphicsExposeEvent':
        """public org.lwjgl.system.linux.XGraphicsExposeEvent org.lwjgl.system.linux.XGraphicsExposeEvent.display(long)"""
        return 'XGraphicsExposeEvent'._wrap(super(_XGraphicsExposeEvent, self).display(_long.valueOf(arg0)))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        _Struct.validate(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), arg3)

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @overload
    def minor_code(self, arg0: int) -> 'XGraphicsExposeEvent':
        """public org.lwjgl.system.linux.XGraphicsExposeEvent org.lwjgl.system.linux.XGraphicsExposeEvent.minor_code(int)"""
        return 'XGraphicsExposeEvent'._wrap(super(_XGraphicsExposeEvent, self).minor_code(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc() -> 'XGraphicsExposeEvent':
        """public static org.lwjgl.system.linux.XGraphicsExposeEvent org.lwjgl.system.linux.XGraphicsExposeEvent.calloc()"""
        return XGraphicsExposeEvent._wrap(_XGraphicsExposeEvent.calloc())

    @staticmethod
    @overload
    def ndrawable(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XGraphicsExposeEvent.ndrawable(long)"""
        return int._wrap(_XGraphicsExposeEvent.ndrawable(_long.valueOf(arg0)))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XGraphicsExposeEvent.type()"""
        return int._wrap(super(XGraphicsExposeEvent, self).type())

    @overload
    def width(self) -> int:
        """public int org.lwjgl.system.linux.XGraphicsExposeEvent.width()"""
        return int._wrap(super(XGraphicsExposeEvent, self).width())

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XGraphicsExposeEvent.send_event()"""
        return bool._wrap(super(XGraphicsExposeEvent, self).send_event())

    @staticmethod
    @overload
    def nx(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGraphicsExposeEvent.nx(long,int)"""
        _XGraphicsExposeEvent.nx(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def nmajor_code(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGraphicsExposeEvent.nmajor_code(long,int)"""
        _XGraphicsExposeEvent.nmajor_code(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def height(self) -> int:
        """public int org.lwjgl.system.linux.XGraphicsExposeEvent.height()"""
        return int._wrap(super(XGraphicsExposeEvent, self).height())

    @overload
    def set(self, arg0: 'XGraphicsExposeEvent') -> 'XGraphicsExposeEvent':
        """public org.lwjgl.system.linux.XGraphicsExposeEvent org.lwjgl.system.linux.XGraphicsExposeEvent.set(org.lwjgl.system.linux.XGraphicsExposeEvent)"""
        return 'XGraphicsExposeEvent'._wrap(super(_XGraphicsExposeEvent, self).set(arg0))

    @overload
    def y(self) -> int:
        """public int org.lwjgl.system.linux.XGraphicsExposeEvent.y()"""
        return int._wrap(super(XGraphicsExposeEvent, self).y())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer org.lwjgl.system.linux.XGraphicsExposeEvent.mallocStack(int)"""
        return Buffer._wrap(_XGraphicsExposeEvent.mallocStack(_int.valueOf(arg0)))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).address())

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XGraphicsExposeEvent':
        """public static org.lwjgl.system.linux.XGraphicsExposeEvent org.lwjgl.system.linux.XGraphicsExposeEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XGraphicsExposeEvent._wrap(_XGraphicsExposeEvent.mallocStack(arg0))

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer org.lwjgl.system.linux.XGraphicsExposeEvent.malloc(int)"""
        return Buffer._wrap(_XGraphicsExposeEvent.malloc(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XGraphicsExposeEvent.ndisplay(long)"""
        return int._wrap(_XGraphicsExposeEvent.ndisplay(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XGraphicsExposeEvent':
        """public static org.lwjgl.system.linux.XGraphicsExposeEvent org.lwjgl.system.linux.XGraphicsExposeEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XGraphicsExposeEvent._wrap(_XGraphicsExposeEvent.calloc(arg0))

    @staticmethod
    @overload
    def nminor_code(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XGraphicsExposeEvent.nminor_code(long)"""
        return int._wrap(_XGraphicsExposeEvent.nminor_code(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nheight(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGraphicsExposeEvent.nheight(long,int)"""
        _XGraphicsExposeEvent.nheight(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def count(self) -> int:
        """public int org.lwjgl.system.linux.XGraphicsExposeEvent.count()"""
        return int._wrap(super(XGraphicsExposeEvent, self).count())

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer org.lwjgl.system.linux.XGraphicsExposeEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XGraphicsExposeEvent.callocStack(_int.valueOf(arg0), arg1))

    @overload
    def major_code(self, arg0: int) -> 'XGraphicsExposeEvent':
        """public org.lwjgl.system.linux.XGraphicsExposeEvent org.lwjgl.system.linux.XGraphicsExposeEvent.major_code(int)"""
        return 'XGraphicsExposeEvent'._wrap(super(_XGraphicsExposeEvent, self).major_code(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack() -> 'XGraphicsExposeEvent':
        """public static org.lwjgl.system.linux.XGraphicsExposeEvent org.lwjgl.system.linux.XGraphicsExposeEvent.callocStack()"""
        return XGraphicsExposeEvent._wrap(_XGraphicsExposeEvent.callocStack())

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: int, arg10: int, arg11: int) -> 'XGraphicsExposeEvent':
        """public org.lwjgl.system.linux.XGraphicsExposeEvent org.lwjgl.system.linux.XGraphicsExposeEvent.set(int,long,boolean,long,long,int,int,int,int,int,int,int)"""
        return 'XGraphicsExposeEvent'._wrap(super(_XGraphicsExposeEvent, self).set(_int.valueOf(arg0), _long.valueOf(arg1), _boolean.valueOf(arg2), _long.valueOf(arg3), _long.valueOf(arg4), _int.valueOf(arg5), _int.valueOf(arg6), _int.valueOf(arg7), _int.valueOf(arg8), _int.valueOf(arg9), _int.valueOf(arg10), _int.valueOf(arg11)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'XGraphicsExposeEvent':
        """public static org.lwjgl.system.linux.XGraphicsExposeEvent org.lwjgl.system.linux.XGraphicsExposeEvent.create(long)"""
        return XGraphicsExposeEvent._wrap(_XGraphicsExposeEvent.create(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def ncount(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XGraphicsExposeEvent.ncount(long)"""
        return int._wrap(_XGraphicsExposeEvent.ncount(_long.valueOf(arg0)))

    @overload
    def major_code(self) -> int:
        """public int org.lwjgl.system.linux.XGraphicsExposeEvent.major_code()"""
        return int._wrap(super(XGraphicsExposeEvent, self).major_code())

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGraphicsExposeEvent.nserial(long,long)"""
        _XGraphicsExposeEvent.nserial(_long.valueOf(arg0), _long.valueOf(arg1))

    @overload
    def x(self, arg0: int) -> 'XGraphicsExposeEvent':
        """public org.lwjgl.system.linux.XGraphicsExposeEvent org.lwjgl.system.linux.XGraphicsExposeEvent.x(int)"""
        return 'XGraphicsExposeEvent'._wrap(super(_XGraphicsExposeEvent, self).x(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def ny(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XGraphicsExposeEvent.ny(long)"""
        return int._wrap(_XGraphicsExposeEvent.ny(_long.valueOf(arg0)))

    @overload
    def x(self) -> int:
        """public int org.lwjgl.system.linux.XGraphicsExposeEvent.x()"""
        return int._wrap(super(XGraphicsExposeEvent, self).x())

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer org.lwjgl.system.linux.XGraphicsExposeEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XGraphicsExposeEvent.mallocStack(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGraphicsExposeEvent.ndisplay(long,long)"""
        _XGraphicsExposeEvent.ndisplay(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer org.lwjgl.system.linux.XGraphicsExposeEvent.calloc(int)"""
        return Buffer._wrap(_XGraphicsExposeEvent.calloc(_int.valueOf(arg0)))

    @overload
    def drawable(self, arg0: int) -> 'XGraphicsExposeEvent':
        """public org.lwjgl.system.linux.XGraphicsExposeEvent org.lwjgl.system.linux.XGraphicsExposeEvent.drawable(long)"""
        return 'XGraphicsExposeEvent'._wrap(super(_XGraphicsExposeEvent, self).drawable(_long.valueOf(arg0)))

    @overload
    def serial(self, arg0: int) -> 'XGraphicsExposeEvent':
        """public org.lwjgl.system.linux.XGraphicsExposeEvent org.lwjgl.system.linux.XGraphicsExposeEvent.serial(long)"""
        return 'XGraphicsExposeEvent'._wrap(super(_XGraphicsExposeEvent, self).serial(_long.valueOf(arg0)))

    @overload
    def width(self, arg0: int) -> 'XGraphicsExposeEvent':
        """public org.lwjgl.system.linux.XGraphicsExposeEvent org.lwjgl.system.linux.XGraphicsExposeEvent.width(int)"""
        return 'XGraphicsExposeEvent'._wrap(super(_XGraphicsExposeEvent, self).width(_int.valueOf(arg0)))

    @overload
    def count(self, arg0: int) -> 'XGraphicsExposeEvent':
        """public org.lwjgl.system.linux.XGraphicsExposeEvent org.lwjgl.system.linux.XGraphicsExposeEvent.count(int)"""
        return 'XGraphicsExposeEvent'._wrap(super(_XGraphicsExposeEvent, self).count(_int.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @overload
    def send_event(self, arg0: bool) -> 'XGraphicsExposeEvent':
        """public org.lwjgl.system.linux.XGraphicsExposeEvent org.lwjgl.system.linux.XGraphicsExposeEvent.send_event(boolean)"""
        return 'XGraphicsExposeEvent'._wrap(super(_XGraphicsExposeEvent, self).send_event(_boolean.valueOf(arg0)))

    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGraphicsExposeEvent.nsend_event(long,int)"""
        _XGraphicsExposeEvent.nsend_event(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def malloc() -> 'XGraphicsExposeEvent':
        """public static org.lwjgl.system.linux.XGraphicsExposeEvent org.lwjgl.system.linux.XGraphicsExposeEvent.malloc()"""
        return XGraphicsExposeEvent._wrap(_XGraphicsExposeEvent.malloc())

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer org.lwjgl.system.linux.XGraphicsExposeEvent.callocStack(int)"""
        return Buffer._wrap(_XGraphicsExposeEvent.callocStack(_int.valueOf(arg0)))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XGraphicsExposeEvent.serial()"""
        return int._wrap(super(XGraphicsExposeEvent, self).serial())

    @staticmethod
    @overload
    def nheight(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XGraphicsExposeEvent.nheight(long)"""
        return int._wrap(_XGraphicsExposeEvent.nheight(_long.valueOf(arg0)))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGraphicsExposeEvent.ntype(long,int)"""
        _XGraphicsExposeEvent.ntype(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def ncount(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGraphicsExposeEvent.ncount(long,int)"""
        _XGraphicsExposeEvent.ncount(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool._wrap(super(_pyglsystem.Struct, self).isNull(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer org.lwjgl.system.linux.XGraphicsExposeEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XGraphicsExposeEvent.calloc(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XGraphicsExposeEvent.ntype(long)"""
        return int._wrap(_XGraphicsExposeEvent.ntype(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nx(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XGraphicsExposeEvent.nx(long)"""
        return int._wrap(_XGraphicsExposeEvent.nx(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XGraphicsExposeEvent.nsend_event(long)"""
        return int._wrap(_XGraphicsExposeEvent.nsend_event(_long.valueOf(arg0)))

    @overload
    def y(self, arg0: int) -> 'XGraphicsExposeEvent':
        """public org.lwjgl.system.linux.XGraphicsExposeEvent org.lwjgl.system.linux.XGraphicsExposeEvent.y(int)"""
        return 'XGraphicsExposeEvent'._wrap(super(_XGraphicsExposeEvent, self).y(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XGraphicsExposeEvent$Buffer org.lwjgl.system.linux.XGraphicsExposeEvent.create(int)"""
        return Buffer._wrap(_XGraphicsExposeEvent.create(_int.valueOf(arg0)))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XGraphicsExposeEvent.sizeof()"""
        return int._wrap(super(XGraphicsExposeEvent, self).sizeof())

    @staticmethod
    @overload
    def nwidth(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGraphicsExposeEvent.nwidth(long,int)"""
        _XGraphicsExposeEvent.nwidth(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def nwidth(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XGraphicsExposeEvent.nwidth(long)"""
        return int._wrap(_XGraphicsExposeEvent.nwidth(_long.valueOf(arg0)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str._wrap(super(pyglsystem.Pointer$Default, self).toString()) 
 
 
# CLASS: org.lwjgl.system.linux.XVisualInfo$Buffer
from pyquantum_helper import import_once as _import_once
import org.lwjgl.system.linux.Visual as _Visual
_Visual = _Visual
import java.lang.Object as _Object
_Object = _Object
from builtins import type
import org.lwjgl.system.CustomBuffer as _CustomBuffer
_CustomBuffer = _CustomBuffer
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import org.lwjgl.system.StructBuffer as _StructBuffer
_StructBuffer = _StructBuffer
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.util.Iterator as _Iterator
_Iterator = _Iterator
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
import org.lwjgl.system.linux.XVisualInfo as _XVisualInfo_Buffer
_Buffer = _XVisualInfo_Buffer.Buffer
import java.util.Spliterator as _Spliterator
_Spliterator = _Spliterator
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.util.Iterator as Iterator
import java.lang.Integer as _int
import java.util.stream.Stream as _Stream
_Stream = _Stream
import java.util.stream.Stream as Stream
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class Buffer():
    """org.lwjgl.system.linux.XVisualInfo.Buffer"""
 
    @staticmethod
    def _wrap(java_value: _Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Buffer__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Buffer__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).limit(_int.valueOf(arg0)))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str._wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int._wrap(super(_pyglsystem.CustomBuffer, self).address(_int.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).mark())

    @overload
    def bits_per_rgb(self) -> int:
        """public int org.lwjgl.system.linux.XVisualInfo$Buffer.bits_per_rgb()"""
        return int._wrap(super(Buffer, self).bits_per_rgb())

    @overload
    def green_mask(self) -> int:
        """public long org.lwjgl.system.linux.XVisualInfo$Buffer.green_mask()"""
        return int._wrap(super(Buffer, self).green_mask())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'._wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).stream())

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).position(_int.valueOf(arg0)))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XVisualInfo$Buffer(java.nio.ByteBuffer)"""
        val = _Buffer(arg0)
        self.__wrapper = val

    @overload
    def visualid(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XVisualInfo$Buffer org.lwjgl.system.linux.XVisualInfo$Buffer.visualid(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).visualid(_long.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'._wrap(super(pyglsystem.StructBuffer, self).get())

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def screen(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XVisualInfo$Buffer org.lwjgl.system.linux.XVisualInfo$Buffer.screen(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).screen(_int.valueOf(arg0)))

    @overload
    def colormap_size(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XVisualInfo$Buffer org.lwjgl.system.linux.XVisualInfo$Buffer.colormap_size(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).colormap_size(_int.valueOf(arg0)))

    @overload
    def red_mask(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XVisualInfo$Buffer org.lwjgl.system.linux.XVisualInfo$Buffer.red_mask(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).red_mask(_long.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def visual(self, arg0: 'Visual') -> 'Buffer':
        """public org.lwjgl.system.linux.XVisualInfo$Buffer org.lwjgl.system.linux.XVisualInfo$Buffer.visual(org.lwjgl.system.linux.Visual)"""
        return 'Buffer'._wrap(super(_Buffer, self).visual(arg0))

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def red_mask(self) -> int:
        """public long org.lwjgl.system.linux.XVisualInfo$Buffer.red_mask()"""
        return int._wrap(super(Buffer, self).red_mask())

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(arg0))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'._wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def screen(self) -> int:
        """public int org.lwjgl.system.linux.XVisualInfo$Buffer.screen()"""
        return int._wrap(super(Buffer, self).screen())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(arg0))

    @overload
    def bits_per_rgb(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XVisualInfo$Buffer org.lwjgl.system.linux.XVisualInfo$Buffer.bits_per_rgb(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).bits_per_rgb(_int.valueOf(arg0)))

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).slice())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).slice(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0), arg1))

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(_int.valueOf(arg0), arg1))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).clear())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool._wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def depth(self) -> int:
        """public int org.lwjgl.system.linux.XVisualInfo$Buffer.depth()"""
        return int._wrap(super(Buffer, self).depth())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int._wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XVisualInfo$Buffer(long,int)"""
        val = _Buffer(_long.valueOf(arg0), _int.valueOf(arg1))
        self.__wrapper = val

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(_int.valueOf(arg0), arg1))

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(_pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def class$(self) -> int:
        """public int org.lwjgl.system.linux.XVisualInfo$Buffer.class$()"""
        return int._wrap(super(Buffer, self).class$())

    @overload
    def visual(self) -> 'Visual':
        """public org.lwjgl.system.linux.Visual org.lwjgl.system.linux.XVisualInfo$Buffer.visual()"""
        return 'Visual'._wrap(super(Buffer, self).visual())

    @overload
    def visualid(self) -> int:
        """public long org.lwjgl.system.linux.XVisualInfo$Buffer.visualid()"""
        return int._wrap(super(Buffer, self).visualid())

    @overload
    def colormap_size(self) -> int:
        """public int org.lwjgl.system.linux.XVisualInfo$Buffer.colormap_size()"""
        return int._wrap(super(Buffer, self).colormap_size())

    @overload
    def blue_mask(self) -> int:
        """public long org.lwjgl.system.linux.XVisualInfo$Buffer.blue_mask()"""
        return int._wrap(super(Buffer, self).blue_mask())

    @overload
    def blue_mask(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XVisualInfo$Buffer org.lwjgl.system.linux.XVisualInfo$Buffer.blue_mask(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).blue_mask(_long.valueOf(arg0)))

    @overload
    def depth(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XVisualInfo$Buffer org.lwjgl.system.linux.XVisualInfo$Buffer.depth(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).depth(_int.valueOf(arg0)))

    @overload
    def class$(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XVisualInfo$Buffer org.lwjgl.system.linux.XVisualInfo$Buffer.class$(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).class$(_int.valueOf(arg0)))

    @overload
    def green_mask(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XVisualInfo$Buffer org.lwjgl.system.linux.XVisualInfo$Buffer.green_mask(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).green_mask(_long.valueOf(arg0)))

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(arg0)) 
 
 
# CLASS: org.lwjgl.system.linux.XKeyEvent$Buffer
from pyquantum_helper import import_once as _import_once
import java.lang.Object as _Object
_Object = _Object
from builtins import type
import org.lwjgl.system.CustomBuffer as _CustomBuffer
_CustomBuffer = _CustomBuffer
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Boolean as _boolean
import org.lwjgl.system.linux.XKeyEvent as _XKeyEvent_Buffer
_Buffer = _XKeyEvent_Buffer.Buffer
import org.lwjgl.system.StructBuffer as _StructBuffer
_StructBuffer = _StructBuffer
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.util.Iterator as _Iterator
_Iterator = _Iterator
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
import java.util.Spliterator as _Spliterator
_Spliterator = _Spliterator
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.util.Iterator as Iterator
import java.lang.Integer as _int
import java.util.stream.Stream as _Stream
_Stream = _Stream
import java.util.stream.Stream as Stream
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class Buffer():
    """org.lwjgl.system.linux.XKeyEvent.Buffer"""
 
    @staticmethod
    def _wrap(java_value: _Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Buffer__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Buffer__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).limit(_int.valueOf(arg0)))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address())

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XKeyEvent$Buffer org.lwjgl.system.linux.XKeyEvent$Buffer.type(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).type(_int.valueOf(arg0)))

    @overload
    def root(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XKeyEvent$Buffer org.lwjgl.system.linux.XKeyEvent$Buffer.root(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).root(_long.valueOf(arg0)))

    @overload
    def x_root(self) -> int:
        """public int org.lwjgl.system.linux.XKeyEvent$Buffer.x_root()"""
        return int._wrap(super(Buffer, self).x_root())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str._wrap(super(pyglsystem.CustomBuffer, self).toString())

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XKeyEvent$Buffer.display()"""
        return int._wrap(super(Buffer, self).display())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def y(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XKeyEvent$Buffer org.lwjgl.system.linux.XKeyEvent$Buffer.y(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).y(_int.valueOf(arg0)))

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int._wrap(super(_pyglsystem.CustomBuffer, self).address(_int.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).mark())

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XKeyEvent$Buffer.type()"""
        return int._wrap(super(Buffer, self).type())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'._wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @overload
    def time(self) -> int:
        """public long org.lwjgl.system.linux.XKeyEvent$Buffer.time()"""
        return int._wrap(super(Buffer, self).time())

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).stream())

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).position(_int.valueOf(arg0)))

    @overload
    def window(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XKeyEvent$Buffer org.lwjgl.system.linux.XKeyEvent$Buffer.window(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).window(_long.valueOf(arg0)))

    @overload
    def state(self) -> int:
        """public int org.lwjgl.system.linux.XKeyEvent$Buffer.state()"""
        return int._wrap(super(Buffer, self).state())

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @overload
    def same_screen(self) -> bool:
        """public boolean org.lwjgl.system.linux.XKeyEvent$Buffer.same_screen()"""
        return bool._wrap(super(Buffer, self).same_screen())

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'._wrap(super(pyglsystem.StructBuffer, self).get())

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XKeyEvent$Buffer.send_event()"""
        return bool._wrap(super(Buffer, self).send_event())

    @overload
    def subwindow(self) -> int:
        """public long org.lwjgl.system.linux.XKeyEvent$Buffer.subwindow()"""
        return int._wrap(super(Buffer, self).subwindow())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XKeyEvent$Buffer(java.nio.ByteBuffer)"""
        val = _Buffer(arg0)
        self.__wrapper = val

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XKeyEvent$Buffer.window()"""
        return int._wrap(super(Buffer, self).window())

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(arg0))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def time(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XKeyEvent$Buffer org.lwjgl.system.linux.XKeyEvent$Buffer.time(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).time(_long.valueOf(arg0)))

    @overload
    def y_root(self) -> int:
        """public int org.lwjgl.system.linux.XKeyEvent$Buffer.y_root()"""
        return int._wrap(super(Buffer, self).y_root())

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XKeyEvent$Buffer org.lwjgl.system.linux.XKeyEvent$Buffer.serial(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).serial(_long.valueOf(arg0)))

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'._wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def subwindow(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XKeyEvent$Buffer org.lwjgl.system.linux.XKeyEvent$Buffer.subwindow(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).subwindow(_long.valueOf(arg0)))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XKeyEvent$Buffer.serial()"""
        return int._wrap(super(Buffer, self).serial())

    @overload
    def y(self) -> int:
        """public int org.lwjgl.system.linux.XKeyEvent$Buffer.y()"""
        return int._wrap(super(Buffer, self).y())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(arg0))

    @overload
    def keycode(self) -> int:
        """public int org.lwjgl.system.linux.XKeyEvent$Buffer.keycode()"""
        return int._wrap(super(Buffer, self).keycode())

    @overload
    def x_root(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XKeyEvent$Buffer org.lwjgl.system.linux.XKeyEvent$Buffer.x_root(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).x_root(_int.valueOf(arg0)))

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).slice())

    @overload
    def state(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XKeyEvent$Buffer org.lwjgl.system.linux.XKeyEvent$Buffer.state(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).state(_int.valueOf(arg0)))

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).slice(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def same_screen(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XKeyEvent$Buffer org.lwjgl.system.linux.XKeyEvent$Buffer.same_screen(boolean)"""
        return 'Buffer'._wrap(super(_Buffer, self).same_screen(_boolean.valueOf(arg0)))

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0), arg1))

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(_int.valueOf(arg0), arg1))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).clear())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool._wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XKeyEvent$Buffer org.lwjgl.system.linux.XKeyEvent$Buffer.display(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).display(_long.valueOf(arg0)))

    @overload
    def x(self) -> int:
        """public int org.lwjgl.system.linux.XKeyEvent$Buffer.x()"""
        return int._wrap(super(Buffer, self).x())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def y_root(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XKeyEvent$Buffer org.lwjgl.system.linux.XKeyEvent$Buffer.y_root(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).y_root(_int.valueOf(arg0)))

    @overload
    def keycode(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XKeyEvent$Buffer org.lwjgl.system.linux.XKeyEvent$Buffer.keycode(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).keycode(_int.valueOf(arg0)))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int._wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(_int.valueOf(arg0), arg1))

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XKeyEvent$Buffer(long,int)"""
        val = _Buffer(_long.valueOf(arg0), _int.valueOf(arg1))
        self.__wrapper = val

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XKeyEvent$Buffer org.lwjgl.system.linux.XKeyEvent$Buffer.send_event(boolean)"""
        return 'Buffer'._wrap(super(_Buffer, self).send_event(_boolean.valueOf(arg0)))

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(_pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def root(self) -> int:
        """public long org.lwjgl.system.linux.XKeyEvent$Buffer.root()"""
        return int._wrap(super(Buffer, self).root())

    @overload
    def x(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XKeyEvent$Buffer org.lwjgl.system.linux.XKeyEvent$Buffer.x(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).x(_int.valueOf(arg0)))

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(arg0)) 
 
 
# CLASS: org.lwjgl.system.linux.Stat
from builtins import str
import java.lang.CharSequence as CharSequence
from pyquantum_helper import override
import java.lang.Object as _Object
_Object = _Object
import java.lang.Object as _object
from builtins import type
import java.lang.String as _String
_String = _String
import java.lang.Integer as _int
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
import java.lang.Long as _long
import org.lwjgl.system.linux.Stat as _Stat
_Stat = _Stat
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class Stat():
    """org.lwjgl.system.linux.Stat"""
 
    @staticmethod
    def _wrap(java_value: _Stat) -> 'Stat':
        return Stat(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Stat):
        """
        Dynamic initializer for Stat.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Stat__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Stat__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def stat(arg0: 'ByteBuffer', arg1: int) -> int:
        """public static int org.lwjgl.system.linux.Stat.stat(java.nio.ByteBuffer,long)"""
        return int._wrap(_Stat.stat(arg0, _long.valueOf(arg1)))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.lang.Object.toString()"""
        return str._wrap(super(object, self).toString())

    @staticmethod
    @overload
    def nstat(arg0: int, arg1: int) -> int:
        """public static native int org.lwjgl.system.linux.Stat.nstat(long,long)"""
        return int._wrap(_Stat.nstat(_long.valueOf(arg0), _long.valueOf(arg1)))

    @staticmethod
    @overload
    def nfstat(arg0: int, arg1: int) -> int:
        """public static native int org.lwjgl.system.linux.Stat.nfstat(int,long)"""
        return int._wrap(_Stat.nfstat(_int.valueOf(arg0), _long.valueOf(arg1)))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def stat(arg0: 'CharSequence', arg1: int) -> int:
        """public static int org.lwjgl.system.linux.Stat.stat(java.lang.CharSequence,long)"""
        return int._wrap(_Stat.stat(arg0, _long.valueOf(arg1)))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @staticmethod
    @overload
    def fstat(arg0: int, arg1: int) -> int:
        """public static int org.lwjgl.system.linux.Stat.fstat(int,long)"""
        return int._wrap(_Stat.fstat(_int.valueOf(arg0), _long.valueOf(arg1)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool._wrap(super(_object, self).equals(arg0))

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int._wrap(super(object, self).hashCode()) 
 
 
# CLASS: org.lwjgl.system.linux.EpollData$Buffer
from pyquantum_helper import import_once as _import_once
import java.lang.Object as _Object
_Object = _Object
from builtins import type
import org.lwjgl.system.CustomBuffer as _CustomBuffer
_CustomBuffer = _CustomBuffer
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import org.lwjgl.system.StructBuffer as _StructBuffer
_StructBuffer = _StructBuffer
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.util.Iterator as _Iterator
_Iterator = _Iterator
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
import java.util.Spliterator as _Spliterator
_Spliterator = _Spliterator
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.util.Iterator as Iterator
import org.lwjgl.system.linux.EpollData as _EpollData_Buffer
_Buffer = _EpollData_Buffer.Buffer
import java.lang.Integer as _int
import java.util.stream.Stream as _Stream
_Stream = _Stream
import java.util.stream.Stream as Stream
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class Buffer():
    """org.lwjgl.system.linux.EpollData.Buffer"""
 
    @staticmethod
    def _wrap(java_value: _Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Buffer__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Buffer__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).limit(_int.valueOf(arg0)))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address0())

    @overload
    def u32(self) -> int:
        """public int org.lwjgl.system.linux.EpollData$Buffer.u32()"""
        return int._wrap(super(Buffer, self).u32())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def u64(self) -> int:
        """public long org.lwjgl.system.linux.EpollData$Buffer.u64()"""
        return int._wrap(super(Buffer, self).u64())

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str._wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int._wrap(super(_pyglsystem.CustomBuffer, self).address(_int.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'._wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).stream())

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).position(_int.valueOf(arg0)))

    @overload
    def ptr(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.EpollData$Buffer org.lwjgl.system.linux.EpollData$Buffer.ptr(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).ptr(_long.valueOf(arg0)))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.EpollData$Buffer(java.nio.ByteBuffer)"""
        val = _Buffer(arg0)
        self.__wrapper = val

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'._wrap(super(pyglsystem.StructBuffer, self).get())

    @overload
    def fd(self) -> int:
        """public int org.lwjgl.system.linux.EpollData$Buffer.fd()"""
        return int._wrap(super(Buffer, self).fd())

    @overload
    def u64(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.EpollData$Buffer org.lwjgl.system.linux.EpollData$Buffer.u64(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).u64(_long.valueOf(arg0)))

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.EpollData$Buffer(long,int)"""
        val = _Buffer(_long.valueOf(arg0), _int.valueOf(arg1))
        self.__wrapper = val

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(arg0))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'._wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def u32(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.EpollData$Buffer org.lwjgl.system.linux.EpollData$Buffer.u32(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).u32(_int.valueOf(arg0)))

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).slice())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).slice(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0), arg1))

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(_int.valueOf(arg0), arg1))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).clear())

    @overload
    def ptr(self) -> int:
        """public long org.lwjgl.system.linux.EpollData$Buffer.ptr()"""
        return int._wrap(super(Buffer, self).ptr())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool._wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).flip())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int._wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(_int.valueOf(arg0), arg1))

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def fd(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.EpollData$Buffer org.lwjgl.system.linux.EpollData$Buffer.fd(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).fd(_int.valueOf(arg0)))

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(_pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(arg0)) 
 
 
# CLASS: org.lwjgl.system.linux.XSelectionClearEvent
from pyquantum_helper import import_once as _import_once
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _Object
_Object = _Object
import org.lwjgl.system.linux.XSelectionClearEvent as _XSelectionClearEvent
_XSelectionClearEvent = _XSelectionClearEvent
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
from builtins import type
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import org.lwjgl.system.linux.XSelectionClearEvent as _XSelectionClearEvent_Buffer
_Buffer = _XSelectionClearEvent_Buffer.Buffer
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.lang.Boolean as _boolean
import java.lang.Integer as _int
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class XSelectionClearEvent():
    """org.lwjgl.system.linux.XSelectionClearEvent"""
 
    @staticmethod
    def _wrap(java_value: _XSelectionClearEvent) -> 'XSelectionClearEvent':
        return XSelectionClearEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _XSelectionClearEvent):
        """
        Dynamic initializer for XSelectionClearEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_XSelectionClearEvent__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_XSelectionClearEvent__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionClearEvent$Buffer org.lwjgl.system.linux.XSelectionClearEvent.create(int)"""
        return Buffer._wrap(_XSelectionClearEvent.create(_int.valueOf(arg0)))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def ntime(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XSelectionClearEvent.ntime(long)"""
        return int._wrap(_XSelectionClearEvent.ntime(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack() -> 'XSelectionClearEvent':
        """public static org.lwjgl.system.linux.XSelectionClearEvent org.lwjgl.system.linux.XSelectionClearEvent.callocStack()"""
        return XSelectionClearEvent._wrap(_XSelectionClearEvent.callocStack())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XSelectionClearEvent':
        """public static org.lwjgl.system.linux.XSelectionClearEvent org.lwjgl.system.linux.XSelectionClearEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XSelectionClearEvent._wrap(_XSelectionClearEvent.calloc(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XSelectionClearEvent.ntype(long)"""
        return int._wrap(_XSelectionClearEvent.ntype(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nwindow(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSelectionClearEvent.nwindow(long,long)"""
        _XSelectionClearEvent.nwindow(_long.valueOf(arg0), _long.valueOf(arg1))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def set(self, arg0: 'XSelectionClearEvent') -> 'XSelectionClearEvent':
        """public org.lwjgl.system.linux.XSelectionClearEvent org.lwjgl.system.linux.XSelectionClearEvent.set(org.lwjgl.system.linux.XSelectionClearEvent)"""
        return 'XSelectionClearEvent'._wrap(super(_XSelectionClearEvent, self).set(arg0))

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int, arg5: int, arg6: int) -> 'XSelectionClearEvent':
        """public org.lwjgl.system.linux.XSelectionClearEvent org.lwjgl.system.linux.XSelectionClearEvent.set(int,long,boolean,long,long,long,long)"""
        return 'XSelectionClearEvent'._wrap(super(_XSelectionClearEvent, self).set(_int.valueOf(arg0), _long.valueOf(arg1), _boolean.valueOf(arg2), _long.valueOf(arg3), _long.valueOf(arg4), _long.valueOf(arg5), _long.valueOf(arg6)))

    @staticmethod
    @overload
    def create() -> 'XSelectionClearEvent':
        """public static org.lwjgl.system.linux.XSelectionClearEvent org.lwjgl.system.linux.XSelectionClearEvent.create()"""
        return XSelectionClearEvent._wrap(_XSelectionClearEvent.create())

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionClearEvent$Buffer org.lwjgl.system.linux.XSelectionClearEvent.malloc(int)"""
        return Buffer._wrap(_XSelectionClearEvent.malloc(_int.valueOf(arg0)))

    @overload
    def type(self, arg0: int) -> 'XSelectionClearEvent':
        """public org.lwjgl.system.linux.XSelectionClearEvent org.lwjgl.system.linux.XSelectionClearEvent.type(int)"""
        return 'XSelectionClearEvent'._wrap(super(_XSelectionClearEvent, self).type(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSelectionClearEvent.nsend_event(long,int)"""
        _XSelectionClearEvent.nsend_event(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def mallocStack() -> 'XSelectionClearEvent':
        """public static org.lwjgl.system.linux.XSelectionClearEvent org.lwjgl.system.linux.XSelectionClearEvent.mallocStack()"""
        return XSelectionClearEvent._wrap(_XSelectionClearEvent.mallocStack())

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionClearEvent$Buffer org.lwjgl.system.linux.XSelectionClearEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XSelectionClearEvent.calloc(_int.valueOf(arg0), arg1))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionClearEvent.serial()"""
        return int._wrap(super(XSelectionClearEvent, self).serial())

    @staticmethod
    @overload
    def create(arg0: int) -> 'XSelectionClearEvent':
        """public static org.lwjgl.system.linux.XSelectionClearEvent org.lwjgl.system.linux.XSelectionClearEvent.create(long)"""
        return XSelectionClearEvent._wrap(_XSelectionClearEvent.create(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nselection(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSelectionClearEvent.nselection(long,long)"""
        _XSelectionClearEvent.nselection(_long.valueOf(arg0), _long.valueOf(arg1))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        _Struct.validate(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), arg3)

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @staticmethod
    @overload
    def ntime(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSelectionClearEvent.ntime(long,long)"""
        _XSelectionClearEvent.ntime(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionClearEvent$Buffer org.lwjgl.system.linux.XSelectionClearEvent.mallocStack(int)"""
        return Buffer._wrap(_XSelectionClearEvent.mallocStack(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionClearEvent$Buffer org.lwjgl.system.linux.XSelectionClearEvent.create(long,int)"""
        return Buffer._wrap(_XSelectionClearEvent.create(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XSelectionClearEvent.ndisplay(long)"""
        return int._wrap(_XSelectionClearEvent.ndisplay(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XSelectionClearEvent':
        """public static org.lwjgl.system.linux.XSelectionClearEvent org.lwjgl.system.linux.XSelectionClearEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XSelectionClearEvent._wrap(_XSelectionClearEvent.callocStack(arg0))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def time(self, arg0: int) -> 'XSelectionClearEvent':
        """public org.lwjgl.system.linux.XSelectionClearEvent org.lwjgl.system.linux.XSelectionClearEvent.time(long)"""
        return 'XSelectionClearEvent'._wrap(super(_XSelectionClearEvent, self).time(_long.valueOf(arg0)))

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionClearEvent.window()"""
        return int._wrap(super(XSelectionClearEvent, self).window())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).address())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XSelectionClearEvent.sizeof()"""
        return int._wrap(super(XSelectionClearEvent, self).sizeof())

    @overload
    def window(self, arg0: int) -> 'XSelectionClearEvent':
        """public org.lwjgl.system.linux.XSelectionClearEvent org.lwjgl.system.linux.XSelectionClearEvent.window(long)"""
        return 'XSelectionClearEvent'._wrap(super(_XSelectionClearEvent, self).window(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XSelectionClearEvent':
        """public static org.lwjgl.system.linux.XSelectionClearEvent org.lwjgl.system.linux.XSelectionClearEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XSelectionClearEvent._wrap(_XSelectionClearEvent.mallocStack(arg0))

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSelectionClearEvent.nserial(long,long)"""
        _XSelectionClearEvent.nserial(_long.valueOf(arg0), _long.valueOf(arg1))

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionClearEvent.display()"""
        return int._wrap(super(XSelectionClearEvent, self).display())

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XSelectionClearEvent':
        """public static org.lwjgl.system.linux.XSelectionClearEvent org.lwjgl.system.linux.XSelectionClearEvent.createSafe(long)"""
        return XSelectionClearEvent._wrap(_XSelectionClearEvent.createSafe(_long.valueOf(arg0)))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XSelectionClearEvent(java.nio.ByteBuffer)"""
        val = _XSelectionClearEvent(arg0)
        self.__wrapper = val

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XSelectionClearEvent.nserial(long)"""
        return int._wrap(_XSelectionClearEvent.nserial(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nselection(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XSelectionClearEvent.nselection(long)"""
        return int._wrap(_XSelectionClearEvent.nselection(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionClearEvent$Buffer org.lwjgl.system.linux.XSelectionClearEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XSelectionClearEvent.malloc(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionClearEvent$Buffer org.lwjgl.system.linux.XSelectionClearEvent.calloc(int)"""
        return Buffer._wrap(_XSelectionClearEvent.calloc(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def nwindow(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XSelectionClearEvent.nwindow(long)"""
        return int._wrap(_XSelectionClearEvent.nwindow(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionClearEvent$Buffer org.lwjgl.system.linux.XSelectionClearEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XSelectionClearEvent.callocStack(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XSelectionClearEvent.validate(long)"""
        _XSelectionClearEvent.validate(_long.valueOf(arg0))

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionClearEvent$Buffer org.lwjgl.system.linux.XSelectionClearEvent.callocStack(int)"""
        return Buffer._wrap(_XSelectionClearEvent.callocStack(_int.valueOf(arg0)))

    @overload
    def send_event(self, arg0: bool) -> 'XSelectionClearEvent':
        """public org.lwjgl.system.linux.XSelectionClearEvent org.lwjgl.system.linux.XSelectionClearEvent.send_event(boolean)"""
        return 'XSelectionClearEvent'._wrap(super(_XSelectionClearEvent, self).send_event(_boolean.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionClearEvent$Buffer org.lwjgl.system.linux.XSelectionClearEvent.createSafe(long,int)"""
        return Buffer._wrap(_XSelectionClearEvent.createSafe(_long.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def selection(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionClearEvent.selection()"""
        return int._wrap(super(XSelectionClearEvent, self).selection())

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSelectionClearEvent.ndisplay(long,long)"""
        _XSelectionClearEvent.ndisplay(_long.valueOf(arg0), _long.valueOf(arg1))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @staticmethod
    @overload
    def malloc() -> 'XSelectionClearEvent':
        """public static org.lwjgl.system.linux.XSelectionClearEvent org.lwjgl.system.linux.XSelectionClearEvent.malloc()"""
        return XSelectionClearEvent._wrap(_XSelectionClearEvent.malloc())

    @staticmethod
    @overload
    def calloc() -> 'XSelectionClearEvent':
        """public static org.lwjgl.system.linux.XSelectionClearEvent org.lwjgl.system.linux.XSelectionClearEvent.calloc()"""
        return XSelectionClearEvent._wrap(_XSelectionClearEvent.calloc())

    @overload
    def time(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionClearEvent.time()"""
        return int._wrap(super(XSelectionClearEvent, self).time())

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XSelectionClearEvent.send_event()"""
        return bool._wrap(super(XSelectionClearEvent, self).send_event())

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XSelectionClearEvent.type()"""
        return int._wrap(super(XSelectionClearEvent, self).type())

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSelectionClearEvent.ntype(long,int)"""
        _XSelectionClearEvent.ntype(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionClearEvent$Buffer org.lwjgl.system.linux.XSelectionClearEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XSelectionClearEvent.mallocStack(_int.valueOf(arg0), arg1))

    @overload
    def display(self, arg0: int) -> 'XSelectionClearEvent':
        """public org.lwjgl.system.linux.XSelectionClearEvent org.lwjgl.system.linux.XSelectionClearEvent.display(long)"""
        return 'XSelectionClearEvent'._wrap(super(_XSelectionClearEvent, self).display(_long.valueOf(arg0)))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool._wrap(super(_pyglsystem.Struct, self).isNull(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XSelectionClearEvent':
        """public static org.lwjgl.system.linux.XSelectionClearEvent org.lwjgl.system.linux.XSelectionClearEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XSelectionClearEvent._wrap(_XSelectionClearEvent.malloc(arg0))

    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XSelectionClearEvent.nsend_event(long)"""
        return int._wrap(_XSelectionClearEvent.nsend_event(_long.valueOf(arg0)))

    @overload
    def selection(self, arg0: int) -> 'XSelectionClearEvent':
        """public org.lwjgl.system.linux.XSelectionClearEvent org.lwjgl.system.linux.XSelectionClearEvent.selection(long)"""
        return 'XSelectionClearEvent'._wrap(super(_XSelectionClearEvent, self).selection(_long.valueOf(arg0)))

    @overload
    def serial(self, arg0: int) -> 'XSelectionClearEvent':
        """public org.lwjgl.system.linux.XSelectionClearEvent org.lwjgl.system.linux.XSelectionClearEvent.serial(long)"""
        return 'XSelectionClearEvent'._wrap(super(_XSelectionClearEvent, self).serial(_long.valueOf(arg0)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str._wrap(super(pyglsystem.Pointer$Default, self).toString()) 
 
 
# CLASS: org.lwjgl.system.linux.IOVec$Buffer
from pyquantum_helper import import_once as _import_once
import java.lang.Object as _Object
_Object = _Object
from builtins import type
import org.lwjgl.system.CustomBuffer as _CustomBuffer
_CustomBuffer = _CustomBuffer
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import org.lwjgl.system.StructBuffer as _StructBuffer
_StructBuffer = _StructBuffer
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.util.Iterator as _Iterator
_Iterator = _Iterator
from builtins import bool
from builtins import str
import org.lwjgl.system.linux.IOVec as _IOVec_Buffer
_Buffer = _IOVec_Buffer.Buffer
from pyquantum_helper import override
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
import java.nio.ByteBuffer as _ByteBuffer
_ByteBuffer = _ByteBuffer
import java.util.Spliterator as _Spliterator
_Spliterator = _Spliterator
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.util.Iterator as Iterator
import java.lang.Integer as _int
import java.util.stream.Stream as _Stream
_Stream = _Stream
import java.util.stream.Stream as Stream
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class Buffer():
    """org.lwjgl.system.linux.IOVec.Buffer"""
 
    @staticmethod
    def _wrap(java_value: _Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Buffer__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Buffer__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).limit(_int.valueOf(arg0)))

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.IOVec$Buffer(long,int)"""
        val = _Buffer(_long.valueOf(arg0), _int.valueOf(arg1))
        self.__wrapper = val

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address0())

    @overload
    def iov_base(self, arg0: 'ByteBuffer') -> 'Buffer':
        """public org.lwjgl.system.linux.IOVec$Buffer org.lwjgl.system.linux.IOVec$Buffer.iov_base(java.nio.ByteBuffer)"""
        return 'Buffer'._wrap(super(_Buffer, self).iov_base(arg0))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str._wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int._wrap(super(_pyglsystem.CustomBuffer, self).address(_int.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'._wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).stream())

    @overload
    def iov_base(self) -> 'ByteBuffer':
        """public java.nio.ByteBuffer org.lwjgl.system.linux.IOVec$Buffer.iov_base()"""
        return 'ByteBuffer'._wrap(super(Buffer, self).iov_base())

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).position(_int.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'._wrap(super(pyglsystem.StructBuffer, self).get())

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def iov_len(self) -> int:
        """public long org.lwjgl.system.linux.IOVec$Buffer.iov_len()"""
        return int._wrap(super(Buffer, self).iov_len())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.IOVec$Buffer(java.nio.ByteBuffer)"""
        val = _Buffer(arg0)
        self.__wrapper = val

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(arg0))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'._wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).slice())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).slice(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def iov_len(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.IOVec$Buffer org.lwjgl.system.linux.IOVec$Buffer.iov_len(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).iov_len(_long.valueOf(arg0)))

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0), arg1))

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(_int.valueOf(arg0), arg1))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).clear())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool._wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).flip())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int._wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(_int.valueOf(arg0), arg1))

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(_pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(arg0)) 
 
 
# CLASS: org.lwjgl.system.linux.Socket
from builtins import str
from pyquantum_helper import override
import java.lang.Integer as _int
import java.lang.Object as _Object
_Object = _Object
import java.lang.Object as _object
from builtins import type
import java.lang.String as _String
_String = _String
from builtins import bool
import java.lang.Long as _long
import org.lwjgl.system.linux.Socket as _Socket
_Socket = _Socket
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class Socket():
    """org.lwjgl.system.linux.Socket"""
 
    @staticmethod
    def _wrap(java_value: _Socket) -> 'Socket':
        return Socket(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Socket):
        """
        Dynamic initializer for Socket.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Socket__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Socket__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def socket(arg0: int, arg1: int, arg2: int) -> int:
        """public static native int org.lwjgl.system.linux.Socket.socket(int,int,int)"""
        return int._wrap(_Socket.socket(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.lang.Object.toString()"""
        return str._wrap(super(object, self).toString())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool._wrap(super(_object, self).equals(arg0))

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int._wrap(super(object, self).hashCode()) 
 
 
# CLASS: org.lwjgl.system.linux.XMapRequestEvent
from pyquantum_helper import import_once as _import_once
from builtins import str
from pyquantum_helper import override
import org.lwjgl.system.linux.XMapRequestEvent as _XMapRequestEvent
_XMapRequestEvent = _XMapRequestEvent
import java.lang.Object as _Object
_Object = _Object
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
from builtins import type
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.lang.Boolean as _boolean
import java.lang.Integer as _int
import org.lwjgl.system.linux.XMapRequestEvent as _XMapRequestEvent_Buffer
_Buffer = _XMapRequestEvent_Buffer.Buffer
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class XMapRequestEvent():
    """org.lwjgl.system.linux.XMapRequestEvent"""
 
    @staticmethod
    def _wrap(java_value: _XMapRequestEvent) -> 'XMapRequestEvent':
        return XMapRequestEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _XMapRequestEvent):
        """
        Dynamic initializer for XMapRequestEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_XMapRequestEvent__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_XMapRequestEvent__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XMapRequestEvent$Buffer org.lwjgl.system.linux.XMapRequestEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XMapRequestEvent.malloc(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XMapRequestEvent$Buffer org.lwjgl.system.linux.XMapRequestEvent.create(int)"""
        return Buffer._wrap(_XMapRequestEvent.create(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XMapRequestEvent$Buffer org.lwjgl.system.linux.XMapRequestEvent.callocStack(int)"""
        return Buffer._wrap(_XMapRequestEvent.callocStack(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack() -> 'XMapRequestEvent':
        """public static org.lwjgl.system.linux.XMapRequestEvent org.lwjgl.system.linux.XMapRequestEvent.mallocStack()"""
        return XMapRequestEvent._wrap(_XMapRequestEvent.mallocStack())

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XMapRequestEvent$Buffer org.lwjgl.system.linux.XMapRequestEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XMapRequestEvent.callocStack(_int.valueOf(arg0), arg1))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def parent(self, arg0: int) -> 'XMapRequestEvent':
        """public org.lwjgl.system.linux.XMapRequestEvent org.lwjgl.system.linux.XMapRequestEvent.parent(long)"""
        return 'XMapRequestEvent'._wrap(super(_XMapRequestEvent, self).parent(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XMapRequestEvent':
        """public static org.lwjgl.system.linux.XMapRequestEvent org.lwjgl.system.linux.XMapRequestEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XMapRequestEvent._wrap(_XMapRequestEvent.calloc(arg0))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XMapRequestEvent':
        """public static org.lwjgl.system.linux.XMapRequestEvent org.lwjgl.system.linux.XMapRequestEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XMapRequestEvent._wrap(_XMapRequestEvent.mallocStack(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def malloc() -> 'XMapRequestEvent':
        """public static org.lwjgl.system.linux.XMapRequestEvent org.lwjgl.system.linux.XMapRequestEvent.malloc()"""
        return XMapRequestEvent._wrap(_XMapRequestEvent.malloc())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @staticmethod
    @overload
    def create(arg0: int) -> 'XMapRequestEvent':
        """public static org.lwjgl.system.linux.XMapRequestEvent org.lwjgl.system.linux.XMapRequestEvent.create(long)"""
        return XMapRequestEvent._wrap(_XMapRequestEvent.create(_long.valueOf(arg0)))

    @overload
    def set(self, arg0: 'XMapRequestEvent') -> 'XMapRequestEvent':
        """public org.lwjgl.system.linux.XMapRequestEvent org.lwjgl.system.linux.XMapRequestEvent.set(org.lwjgl.system.linux.XMapRequestEvent)"""
        return 'XMapRequestEvent'._wrap(super(_XMapRequestEvent, self).set(arg0))

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XMapRequestEvent$Buffer org.lwjgl.system.linux.XMapRequestEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XMapRequestEvent.calloc(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def nparent(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XMapRequestEvent.nparent(long)"""
        return int._wrap(_XMapRequestEvent.nparent(_long.valueOf(arg0)))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XMapRequestEvent.sizeof()"""
        return int._wrap(super(XMapRequestEvent, self).sizeof())

    @overload
    def parent(self) -> int:
        """public long org.lwjgl.system.linux.XMapRequestEvent.parent()"""
        return int._wrap(super(XMapRequestEvent, self).parent())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        _Struct.validate(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), arg3)

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XMapRequestEvent$Buffer org.lwjgl.system.linux.XMapRequestEvent.calloc(int)"""
        return Buffer._wrap(_XMapRequestEvent.calloc(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XMapRequestEvent$Buffer org.lwjgl.system.linux.XMapRequestEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XMapRequestEvent.mallocStack(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XMapRequestEvent.ntype(long)"""
        return int._wrap(_XMapRequestEvent.ntype(_long.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def calloc() -> 'XMapRequestEvent':
        """public static org.lwjgl.system.linux.XMapRequestEvent org.lwjgl.system.linux.XMapRequestEvent.calloc()"""
        return XMapRequestEvent._wrap(_XMapRequestEvent.calloc())

    @staticmethod
    @overload
    def callocStack() -> 'XMapRequestEvent':
        """public static org.lwjgl.system.linux.XMapRequestEvent org.lwjgl.system.linux.XMapRequestEvent.callocStack()"""
        return XMapRequestEvent._wrap(_XMapRequestEvent.callocStack())

    @staticmethod
    @overload
    def nwindow(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMapRequestEvent.nwindow(long,long)"""
        _XMapRequestEvent.nwindow(_long.valueOf(arg0), _long.valueOf(arg1))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XMapRequestEvent.serial()"""
        return int._wrap(super(XMapRequestEvent, self).serial())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).address())

    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMapRequestEvent.nsend_event(long,int)"""
        _XMapRequestEvent.nsend_event(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XMapRequestEvent.type()"""
        return int._wrap(super(XMapRequestEvent, self).type())

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int, arg5: int) -> 'XMapRequestEvent':
        """public org.lwjgl.system.linux.XMapRequestEvent org.lwjgl.system.linux.XMapRequestEvent.set(int,long,boolean,long,long,long)"""
        return 'XMapRequestEvent'._wrap(super(_XMapRequestEvent, self).set(_int.valueOf(arg0), _long.valueOf(arg1), _boolean.valueOf(arg2), _long.valueOf(arg3), _long.valueOf(arg4), _long.valueOf(arg5)))

    @overload
    def window(self, arg0: int) -> 'XMapRequestEvent':
        """public org.lwjgl.system.linux.XMapRequestEvent org.lwjgl.system.linux.XMapRequestEvent.window(long)"""
        return 'XMapRequestEvent'._wrap(super(_XMapRequestEvent, self).window(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XMapRequestEvent.validate(long)"""
        _XMapRequestEvent.validate(_long.valueOf(arg0))

    @staticmethod
    @overload
    def nwindow(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XMapRequestEvent.nwindow(long)"""
        return int._wrap(_XMapRequestEvent.nwindow(_long.valueOf(arg0)))

    @overload
    def type(self, arg0: int) -> 'XMapRequestEvent':
        """public org.lwjgl.system.linux.XMapRequestEvent org.lwjgl.system.linux.XMapRequestEvent.type(int)"""
        return 'XMapRequestEvent'._wrap(super(_XMapRequestEvent, self).type(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XMapRequestEvent$Buffer org.lwjgl.system.linux.XMapRequestEvent.mallocStack(int)"""
        return Buffer._wrap(_XMapRequestEvent.mallocStack(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def nparent(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMapRequestEvent.nparent(long,long)"""
        _XMapRequestEvent.nparent(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XMapRequestEvent$Buffer org.lwjgl.system.linux.XMapRequestEvent.createSafe(long,int)"""
        return Buffer._wrap(_XMapRequestEvent.createSafe(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XMapRequestEvent':
        """public static org.lwjgl.system.linux.XMapRequestEvent org.lwjgl.system.linux.XMapRequestEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XMapRequestEvent._wrap(_XMapRequestEvent.malloc(arg0))

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMapRequestEvent.ndisplay(long,long)"""
        _XMapRequestEvent.ndisplay(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XMapRequestEvent.ndisplay(long)"""
        return int._wrap(_XMapRequestEvent.ndisplay(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMapRequestEvent.ntype(long,int)"""
        _XMapRequestEvent.ntype(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XMapRequestEvent.nsend_event(long)"""
        return int._wrap(_XMapRequestEvent.nsend_event(_long.valueOf(arg0)))

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XMapRequestEvent.window()"""
        return int._wrap(super(XMapRequestEvent, self).window())

    @staticmethod
    @overload
    def create() -> 'XMapRequestEvent':
        """public static org.lwjgl.system.linux.XMapRequestEvent org.lwjgl.system.linux.XMapRequestEvent.create()"""
        return XMapRequestEvent._wrap(_XMapRequestEvent.create())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XMapRequestEvent':
        """public static org.lwjgl.system.linux.XMapRequestEvent org.lwjgl.system.linux.XMapRequestEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XMapRequestEvent._wrap(_XMapRequestEvent.callocStack(arg0))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XMapRequestEvent$Buffer org.lwjgl.system.linux.XMapRequestEvent.create(long,int)"""
        return Buffer._wrap(_XMapRequestEvent.create(_long.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def display(self, arg0: int) -> 'XMapRequestEvent':
        """public org.lwjgl.system.linux.XMapRequestEvent org.lwjgl.system.linux.XMapRequestEvent.display(long)"""
        return 'XMapRequestEvent'._wrap(super(_XMapRequestEvent, self).display(_long.valueOf(arg0)))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XMapRequestEvent(java.nio.ByteBuffer)"""
        val = _XMapRequestEvent(arg0)
        self.__wrapper = val

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XMapRequestEvent':
        """public static org.lwjgl.system.linux.XMapRequestEvent org.lwjgl.system.linux.XMapRequestEvent.createSafe(long)"""
        return XMapRequestEvent._wrap(_XMapRequestEvent.createSafe(_long.valueOf(arg0)))

    @overload
    def serial(self, arg0: int) -> 'XMapRequestEvent':
        """public org.lwjgl.system.linux.XMapRequestEvent org.lwjgl.system.linux.XMapRequestEvent.serial(long)"""
        return 'XMapRequestEvent'._wrap(super(_XMapRequestEvent, self).serial(_long.valueOf(arg0)))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMapRequestEvent.nserial(long,long)"""
        _XMapRequestEvent.nserial(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XMapRequestEvent.nserial(long)"""
        return int._wrap(_XMapRequestEvent.nserial(_long.valueOf(arg0)))

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool._wrap(super(_pyglsystem.Struct, self).isNull(_int.valueOf(arg0)))

    @overload
    def send_event(self, arg0: bool) -> 'XMapRequestEvent':
        """public org.lwjgl.system.linux.XMapRequestEvent org.lwjgl.system.linux.XMapRequestEvent.send_event(boolean)"""
        return 'XMapRequestEvent'._wrap(super(_XMapRequestEvent, self).send_event(_boolean.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XMapRequestEvent$Buffer org.lwjgl.system.linux.XMapRequestEvent.malloc(int)"""
        return Buffer._wrap(_XMapRequestEvent.malloc(_int.valueOf(arg0)))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XMapRequestEvent.send_event()"""
        return bool._wrap(super(XMapRequestEvent, self).send_event())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str._wrap(super(pyglsystem.Pointer$Default, self).toString())

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XMapRequestEvent.display()"""
        return int._wrap(super(XMapRequestEvent, self).display()) 
 
 
# CLASS: org.lwjgl.system.linux.Visual
from pyquantum_helper import import_once as _import_once
from builtins import str
import org.lwjgl.system.linux.Visual as _Visual
_Visual = _Visual
import org.lwjgl.system.linux.Visual as _Visual_Buffer
_Buffer = _Visual_Buffer.Buffer
from pyquantum_helper import override
import java.lang.Object as _Object
_Object = _Object
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
from builtins import type
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.lang.Integer as _int
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class Visual():
    """org.lwjgl.system.linux.Visual"""
 
    @staticmethod
    def _wrap(java_value: _Visual) -> 'Visual':
        return Visual(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Visual):
        """
        Dynamic initializer for Visual.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Visual__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Visual__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.Visual$Buffer org.lwjgl.system.linux.Visual.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_Visual.malloc(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def nbits_per_rgb(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.Visual.nbits_per_rgb(long)"""
        return int._wrap(_Visual.nbits_per_rgb(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nvisualid(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Visual.nvisualid(long,long)"""
        _Visual.nvisualid(_long.valueOf(arg0), _long.valueOf(arg1))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.Visual$Buffer org.lwjgl.system.linux.Visual.callocStack(int)"""
        return Buffer._wrap(_Visual.callocStack(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def nvisualid(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.Visual.nvisualid(long)"""
        return int._wrap(_Visual.nvisualid(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.Visual$Buffer org.lwjgl.system.linux.Visual.create(long,int)"""
        return Buffer._wrap(_Visual.create(_long.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @staticmethod
    @overload
    def ngreen_mask(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.Visual.ngreen_mask(long)"""
        return int._wrap(_Visual.ngreen_mask(_long.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def ext_data(self, arg0: int) -> 'Visual':
        """public org.lwjgl.system.linux.Visual org.lwjgl.system.linux.Visual.ext_data(long)"""
        return 'Visual'._wrap(super(_Visual, self).ext_data(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'Visual':
        """public static org.lwjgl.system.linux.Visual org.lwjgl.system.linux.Visual.mallocStack(org.lwjgl.system.MemoryStack)"""
        return Visual._wrap(_Visual.mallocStack(arg0))

    @overload
    def blue_mask(self) -> int:
        """public long org.lwjgl.system.linux.Visual.blue_mask()"""
        return int._wrap(super(Visual, self).blue_mask())

    @staticmethod
    @overload
    def calloc() -> 'Visual':
        """public static org.lwjgl.system.linux.Visual org.lwjgl.system.linux.Visual.calloc()"""
        return Visual._wrap(_Visual.calloc())

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'Visual':
        """public static org.lwjgl.system.linux.Visual org.lwjgl.system.linux.Visual.calloc(org.lwjgl.system.MemoryStack)"""
        return Visual._wrap(_Visual.calloc(arg0))

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.Visual$Buffer org.lwjgl.system.linux.Visual.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_Visual.mallocStack(_int.valueOf(arg0), arg1))

    @overload
    def red_mask(self, arg0: int) -> 'Visual':
        """public org.lwjgl.system.linux.Visual org.lwjgl.system.linux.Visual.red_mask(long)"""
        return 'Visual'._wrap(super(_Visual, self).red_mask(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.Visual$Buffer org.lwjgl.system.linux.Visual.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_Visual.callocStack(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.Visual$Buffer org.lwjgl.system.linux.Visual.malloc(int)"""
        return Buffer._wrap(_Visual.malloc(_int.valueOf(arg0)))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.Visual.sizeof()"""
        return int._wrap(super(Visual, self).sizeof())

    @overload
    def map_entries(self) -> int:
        """public int org.lwjgl.system.linux.Visual.map_entries()"""
        return int._wrap(super(Visual, self).map_entries())

    @staticmethod
    @overload
    def create(arg0: int) -> 'Visual':
        """public static org.lwjgl.system.linux.Visual org.lwjgl.system.linux.Visual.create(long)"""
        return Visual._wrap(_Visual.create(_long.valueOf(arg0)))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @staticmethod
    @overload
    def nblue_mask(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.Visual.nblue_mask(long)"""
        return int._wrap(_Visual.nblue_mask(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        _Struct.validate(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), arg3)

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @overload
    def set(self, arg0: 'Visual') -> 'Visual':
        """public org.lwjgl.system.linux.Visual org.lwjgl.system.linux.Visual.set(org.lwjgl.system.linux.Visual)"""
        return 'Visual'._wrap(super(_Visual, self).set(arg0))

    @overload
    def visualid(self, arg0: int) -> 'Visual':
        """public org.lwjgl.system.linux.Visual org.lwjgl.system.linux.Visual.visualid(long)"""
        return 'Visual'._wrap(super(_Visual, self).visualid(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'Visual':
        """public static org.lwjgl.system.linux.Visual org.lwjgl.system.linux.Visual.createSafe(long)"""
        return Visual._wrap(_Visual.createSafe(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.Visual$Buffer org.lwjgl.system.linux.Visual.calloc(int)"""
        return Buffer._wrap(_Visual.calloc(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def ngreen_mask(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Visual.ngreen_mask(long,long)"""
        _Visual.ngreen_mask(_long.valueOf(arg0), _long.valueOf(arg1))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def green_mask(self) -> int:
        """public long org.lwjgl.system.linux.Visual.green_mask()"""
        return int._wrap(super(Visual, self).green_mask())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).address())

    @staticmethod
    @overload
    def next_data(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.Visual.next_data(long)"""
        return int._wrap(_Visual.next_data(_long.valueOf(arg0)))

    @overload
    def class$(self, arg0: int) -> 'Visual':
        """public org.lwjgl.system.linux.Visual org.lwjgl.system.linux.Visual.class$(int)"""
        return 'Visual'._wrap(super(_Visual, self).class$(_int.valueOf(arg0)))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @staticmethod
    @overload
    def next_data(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Visual.next_data(long,long)"""
        _Visual.next_data(_long.valueOf(arg0), _long.valueOf(arg1))

    @overload
    def bits_per_rgb(self) -> int:
        """public int org.lwjgl.system.linux.Visual.bits_per_rgb()"""
        return int._wrap(super(Visual, self).bits_per_rgb())

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.Visual$Buffer org.lwjgl.system.linux.Visual.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_Visual.calloc(_int.valueOf(arg0), arg1))

    @overload
    def green_mask(self, arg0: int) -> 'Visual':
        """public org.lwjgl.system.linux.Visual org.lwjgl.system.linux.Visual.green_mask(long)"""
        return 'Visual'._wrap(super(_Visual, self).green_mask(_long.valueOf(arg0)))

    @overload
    def class$(self) -> int:
        """public int org.lwjgl.system.linux.Visual.class$()"""
        return int._wrap(super(Visual, self).class$())

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'Visual':
        """public static org.lwjgl.system.linux.Visual org.lwjgl.system.linux.Visual.callocStack(org.lwjgl.system.MemoryStack)"""
        return Visual._wrap(_Visual.callocStack(arg0))

    @overload
    def blue_mask(self, arg0: int) -> 'Visual':
        """public org.lwjgl.system.linux.Visual org.lwjgl.system.linux.Visual.blue_mask(long)"""
        return 'Visual'._wrap(super(_Visual, self).blue_mask(_long.valueOf(arg0)))

    @overload
    def bits_per_rgb(self, arg0: int) -> 'Visual':
        """public org.lwjgl.system.linux.Visual org.lwjgl.system.linux.Visual.bits_per_rgb(int)"""
        return 'Visual'._wrap(super(_Visual, self).bits_per_rgb(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def nred_mask(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.Visual.nred_mask(long)"""
        return int._wrap(_Visual.nred_mask(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def create() -> 'Visual':
        """public static org.lwjgl.system.linux.Visual org.lwjgl.system.linux.Visual.create()"""
        return Visual._wrap(_Visual.create())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'Visual':
        """public static org.lwjgl.system.linux.Visual org.lwjgl.system.linux.Visual.malloc(org.lwjgl.system.MemoryStack)"""
        return Visual._wrap(_Visual.malloc(arg0))

    @staticmethod
    @overload
    def nblue_mask(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Visual.nblue_mask(long,long)"""
        _Visual.nblue_mask(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def nbits_per_rgb(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Visual.nbits_per_rgb(long,int)"""
        _Visual.nbits_per_rgb(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @overload
    def map_entries(self, arg0: int) -> 'Visual':
        """public org.lwjgl.system.linux.Visual org.lwjgl.system.linux.Visual.map_entries(int)"""
        return 'Visual'._wrap(super(_Visual, self).map_entries(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack() -> 'Visual':
        """public static org.lwjgl.system.linux.Visual org.lwjgl.system.linux.Visual.callocStack()"""
        return Visual._wrap(_Visual.callocStack())

    @staticmethod
    @overload
    def nmap_entries(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.Visual.nmap_entries(long)"""
        return int._wrap(_Visual.nmap_entries(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack() -> 'Visual':
        """public static org.lwjgl.system.linux.Visual org.lwjgl.system.linux.Visual.mallocStack()"""
        return Visual._wrap(_Visual.mallocStack())

    @staticmethod
    @overload
    def nclass$(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Visual.nclass$(long,int)"""
        _Visual.nclass$(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def set(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int) -> 'Visual':
        """public org.lwjgl.system.linux.Visual org.lwjgl.system.linux.Visual.set(long,long,int,long,long,long,int,int)"""
        return 'Visual'._wrap(super(_Visual, self).set(_long.valueOf(arg0), _long.valueOf(arg1), _int.valueOf(arg2), _long.valueOf(arg3), _long.valueOf(arg4), _long.valueOf(arg5), _int.valueOf(arg6), _int.valueOf(arg7)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.Visual$Buffer org.lwjgl.system.linux.Visual.create(int)"""
        return Buffer._wrap(_Visual.create(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def nclass$(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.Visual.nclass$(long)"""
        return int._wrap(_Visual.nclass$(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.Visual$Buffer org.lwjgl.system.linux.Visual.createSafe(long,int)"""
        return Buffer._wrap(_Visual.createSafe(_long.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def visualid(self) -> int:
        """public long org.lwjgl.system.linux.Visual.visualid()"""
        return int._wrap(super(Visual, self).visualid())

    @staticmethod
    @overload
    def nred_mask(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Visual.nred_mask(long,long)"""
        _Visual.nred_mask(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def nmap_entries(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Visual.nmap_entries(long,int)"""
        _Visual.nmap_entries(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def malloc() -> 'Visual':
        """public static org.lwjgl.system.linux.Visual org.lwjgl.system.linux.Visual.malloc()"""
        return Visual._wrap(_Visual.malloc())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.Visual(java.nio.ByteBuffer)"""
        val = _Visual(arg0)
        self.__wrapper = val

    @overload
    def red_mask(self) -> int:
        """public long org.lwjgl.system.linux.Visual.red_mask()"""
        return int._wrap(super(Visual, self).red_mask())

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool._wrap(super(_pyglsystem.Struct, self).isNull(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.Visual$Buffer org.lwjgl.system.linux.Visual.mallocStack(int)"""
        return Buffer._wrap(_Visual.mallocStack(_int.valueOf(arg0)))

    @overload
    def ext_data(self) -> int:
        """public long org.lwjgl.system.linux.Visual.ext_data()"""
        return int._wrap(super(Visual, self).ext_data())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str._wrap(super(pyglsystem.Pointer$Default, self).toString()) 
 
 
# CLASS: org.lwjgl.system.linux.XVisibilityEvent
from pyquantum_helper import import_once as _import_once
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _Object
_Object = _Object
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
from builtins import type
import org.lwjgl.system.linux.XVisibilityEvent as _XVisibilityEvent_Buffer
_Buffer = _XVisibilityEvent_Buffer.Buffer
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.lang.Boolean as _boolean
import java.lang.Integer as _int
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
import java.lang.Long as _long
import org.lwjgl.system.linux.XVisibilityEvent as _XVisibilityEvent
_XVisibilityEvent = _XVisibilityEvent
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class XVisibilityEvent():
    """org.lwjgl.system.linux.XVisibilityEvent"""
 
    @staticmethod
    def _wrap(java_value: _XVisibilityEvent) -> 'XVisibilityEvent':
        return XVisibilityEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _XVisibilityEvent):
        """
        Dynamic initializer for XVisibilityEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_XVisibilityEvent__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_XVisibilityEvent__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XVisibilityEvent.ntype(long,int)"""
        _XVisibilityEvent.ntype(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XVisibilityEvent':
        """public static org.lwjgl.system.linux.XVisibilityEvent org.lwjgl.system.linux.XVisibilityEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XVisibilityEvent._wrap(_XVisibilityEvent.malloc(arg0))

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XVisibilityEvent$Buffer org.lwjgl.system.linux.XVisibilityEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XVisibilityEvent.malloc(_int.valueOf(arg0), arg1))

    @overload
    def send_event(self, arg0: bool) -> 'XVisibilityEvent':
        """public org.lwjgl.system.linux.XVisibilityEvent org.lwjgl.system.linux.XVisibilityEvent.send_event(boolean)"""
        return 'XVisibilityEvent'._wrap(super(_XVisibilityEvent, self).send_event(_boolean.valueOf(arg0)))

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XVisibilityEvent.display()"""
        return int._wrap(super(XVisibilityEvent, self).display())

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XVisibilityEvent':
        """public static org.lwjgl.system.linux.XVisibilityEvent org.lwjgl.system.linux.XVisibilityEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XVisibilityEvent._wrap(_XVisibilityEvent.mallocStack(arg0))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XVisibilityEvent.serial()"""
        return int._wrap(super(XVisibilityEvent, self).serial())

    @staticmethod
    @overload
    def calloc() -> 'XVisibilityEvent':
        """public static org.lwjgl.system.linux.XVisibilityEvent org.lwjgl.system.linux.XVisibilityEvent.calloc()"""
        return XVisibilityEvent._wrap(_XVisibilityEvent.calloc())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def malloc() -> 'XVisibilityEvent':
        """public static org.lwjgl.system.linux.XVisibilityEvent org.lwjgl.system.linux.XVisibilityEvent.malloc()"""
        return XVisibilityEvent._wrap(_XVisibilityEvent.malloc())

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XVisibilityEvent.validate(long)"""
        _XVisibilityEvent.validate(_long.valueOf(arg0))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XVisibilityEvent(java.nio.ByteBuffer)"""
        val = _XVisibilityEvent(arg0)
        self.__wrapper = val

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XVisibilityEvent.nserial(long)"""
        return int._wrap(_XVisibilityEvent.nserial(_long.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @staticmethod
    @overload
    def create(arg0: int) -> 'XVisibilityEvent':
        """public static org.lwjgl.system.linux.XVisibilityEvent org.lwjgl.system.linux.XVisibilityEvent.create(long)"""
        return XVisibilityEvent._wrap(_XVisibilityEvent.create(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XVisibilityEvent.ndisplay(long,long)"""
        _XVisibilityEvent.ndisplay(_long.valueOf(arg0), _long.valueOf(arg1))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XVisibilityEvent.type()"""
        return int._wrap(super(XVisibilityEvent, self).type())

    @overload
    def type(self, arg0: int) -> 'XVisibilityEvent':
        """public org.lwjgl.system.linux.XVisibilityEvent org.lwjgl.system.linux.XVisibilityEvent.type(int)"""
        return 'XVisibilityEvent'._wrap(super(_XVisibilityEvent, self).type(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XVisibilityEvent$Buffer org.lwjgl.system.linux.XVisibilityEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XVisibilityEvent.calloc(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def nwindow(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XVisibilityEvent.nwindow(long,long)"""
        _XVisibilityEvent.nwindow(_long.valueOf(arg0), _long.valueOf(arg1))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        _Struct.validate(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), arg3)

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XVisibilityEvent$Buffer org.lwjgl.system.linux.XVisibilityEvent.calloc(int)"""
        return Buffer._wrap(_XVisibilityEvent.calloc(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XVisibilityEvent.ntype(long)"""
        return int._wrap(_XVisibilityEvent.ntype(_long.valueOf(arg0)))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XVisibilityEvent.send_event()"""
        return bool._wrap(super(XVisibilityEvent, self).send_event())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XVisibilityEvent.sizeof()"""
        return int._wrap(super(XVisibilityEvent, self).sizeof())

    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XVisibilityEvent.nsend_event(long,int)"""
        _XVisibilityEvent.nsend_event(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def set(self, arg0: 'XVisibilityEvent') -> 'XVisibilityEvent':
        """public org.lwjgl.system.linux.XVisibilityEvent org.lwjgl.system.linux.XVisibilityEvent.set(org.lwjgl.system.linux.XVisibilityEvent)"""
        return 'XVisibilityEvent'._wrap(super(_XVisibilityEvent, self).set(arg0))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XVisibilityEvent$Buffer org.lwjgl.system.linux.XVisibilityEvent.create(long,int)"""
        return Buffer._wrap(_XVisibilityEvent.create(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def callocStack() -> 'XVisibilityEvent':
        """public static org.lwjgl.system.linux.XVisibilityEvent org.lwjgl.system.linux.XVisibilityEvent.callocStack()"""
        return XVisibilityEvent._wrap(_XVisibilityEvent.callocStack())

    @overload
    def display(self, arg0: int) -> 'XVisibilityEvent':
        """public org.lwjgl.system.linux.XVisibilityEvent org.lwjgl.system.linux.XVisibilityEvent.display(long)"""
        return 'XVisibilityEvent'._wrap(super(_XVisibilityEvent, self).display(_long.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def nwindow(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XVisibilityEvent.nwindow(long)"""
        return int._wrap(_XVisibilityEvent.nwindow(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nstate(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XVisibilityEvent.nstate(long)"""
        return int._wrap(_XVisibilityEvent.nstate(_long.valueOf(arg0)))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).address())

    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XVisibilityEvent.nsend_event(long)"""
        return int._wrap(_XVisibilityEvent.nsend_event(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XVisibilityEvent.ndisplay(long)"""
        return int._wrap(_XVisibilityEvent.ndisplay(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XVisibilityEvent$Buffer org.lwjgl.system.linux.XVisibilityEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XVisibilityEvent.callocStack(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XVisibilityEvent':
        """public static org.lwjgl.system.linux.XVisibilityEvent org.lwjgl.system.linux.XVisibilityEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XVisibilityEvent._wrap(_XVisibilityEvent.callocStack(arg0))

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XVisibilityEvent$Buffer org.lwjgl.system.linux.XVisibilityEvent.create(int)"""
        return Buffer._wrap(_XVisibilityEvent.create(_int.valueOf(arg0)))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XVisibilityEvent':
        """public static org.lwjgl.system.linux.XVisibilityEvent org.lwjgl.system.linux.XVisibilityEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XVisibilityEvent._wrap(_XVisibilityEvent.calloc(arg0))

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XVisibilityEvent':
        """public static org.lwjgl.system.linux.XVisibilityEvent org.lwjgl.system.linux.XVisibilityEvent.createSafe(long)"""
        return XVisibilityEvent._wrap(_XVisibilityEvent.createSafe(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XVisibilityEvent$Buffer org.lwjgl.system.linux.XVisibilityEvent.createSafe(long,int)"""
        return Buffer._wrap(_XVisibilityEvent.createSafe(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XVisibilityEvent$Buffer org.lwjgl.system.linux.XVisibilityEvent.mallocStack(int)"""
        return Buffer._wrap(_XVisibilityEvent.mallocStack(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def nstate(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XVisibilityEvent.nstate(long,int)"""
        _XVisibilityEvent.nstate(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def mallocStack() -> 'XVisibilityEvent':
        """public static org.lwjgl.system.linux.XVisibilityEvent org.lwjgl.system.linux.XVisibilityEvent.mallocStack()"""
        return XVisibilityEvent._wrap(_XVisibilityEvent.mallocStack())

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XVisibilityEvent.window()"""
        return int._wrap(super(XVisibilityEvent, self).window())

    @overload
    def serial(self, arg0: int) -> 'XVisibilityEvent':
        """public org.lwjgl.system.linux.XVisibilityEvent org.lwjgl.system.linux.XVisibilityEvent.serial(long)"""
        return 'XVisibilityEvent'._wrap(super(_XVisibilityEvent, self).serial(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XVisibilityEvent$Buffer org.lwjgl.system.linux.XVisibilityEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XVisibilityEvent.mallocStack(_int.valueOf(arg0), arg1))

    @overload
    def state(self) -> int:
        """public int org.lwjgl.system.linux.XVisibilityEvent.state()"""
        return int._wrap(super(XVisibilityEvent, self).state())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @overload
    def state(self, arg0: int) -> 'XVisibilityEvent':
        """public org.lwjgl.system.linux.XVisibilityEvent org.lwjgl.system.linux.XVisibilityEvent.state(int)"""
        return 'XVisibilityEvent'._wrap(super(_XVisibilityEvent, self).state(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XVisibilityEvent$Buffer org.lwjgl.system.linux.XVisibilityEvent.callocStack(int)"""
        return Buffer._wrap(_XVisibilityEvent.callocStack(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def create() -> 'XVisibilityEvent':
        """public static org.lwjgl.system.linux.XVisibilityEvent org.lwjgl.system.linux.XVisibilityEvent.create()"""
        return XVisibilityEvent._wrap(_XVisibilityEvent.create())

    @overload
    def window(self, arg0: int) -> 'XVisibilityEvent':
        """public org.lwjgl.system.linux.XVisibilityEvent org.lwjgl.system.linux.XVisibilityEvent.window(long)"""
        return 'XVisibilityEvent'._wrap(super(_XVisibilityEvent, self).window(_long.valueOf(arg0)))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool._wrap(super(_pyglsystem.Struct, self).isNull(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XVisibilityEvent.nserial(long,long)"""
        _XVisibilityEvent.nserial(_long.valueOf(arg0), _long.valueOf(arg1))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str._wrap(super(pyglsystem.Pointer$Default, self).toString())

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int, arg5: int) -> 'XVisibilityEvent':
        """public org.lwjgl.system.linux.XVisibilityEvent org.lwjgl.system.linux.XVisibilityEvent.set(int,long,boolean,long,long,int)"""
        return 'XVisibilityEvent'._wrap(super(_XVisibilityEvent, self).set(_int.valueOf(arg0), _long.valueOf(arg1), _boolean.valueOf(arg2), _long.valueOf(arg3), _long.valueOf(arg4), _int.valueOf(arg5)))

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XVisibilityEvent$Buffer org.lwjgl.system.linux.XVisibilityEvent.malloc(int)"""
        return Buffer._wrap(_XVisibilityEvent.malloc(_int.valueOf(arg0))) 
 
 
# CLASS: org.lwjgl.system.linux.XGenericEvent$Buffer
from pyquantum_helper import import_once as _import_once
import java.lang.Object as _Object
_Object = _Object
from builtins import type
import org.lwjgl.system.CustomBuffer as _CustomBuffer
_CustomBuffer = _CustomBuffer
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Boolean as _boolean
import org.lwjgl.system.StructBuffer as _StructBuffer
_StructBuffer = _StructBuffer
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.util.Iterator as _Iterator
_Iterator = _Iterator
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
import java.util.Spliterator as _Spliterator
_Spliterator = _Spliterator
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.util.Iterator as Iterator
import org.lwjgl.system.linux.XGenericEvent as _XGenericEvent_Buffer
_Buffer = _XGenericEvent_Buffer.Buffer
import java.lang.Integer as _int
import java.util.stream.Stream as _Stream
_Stream = _Stream
import java.util.stream.Stream as Stream
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class Buffer():
    """org.lwjgl.system.linux.XGenericEvent.Buffer"""
 
    @staticmethod
    def _wrap(java_value: _Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Buffer__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Buffer__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XGenericEvent$Buffer(long,int)"""
        val = _Buffer(_long.valueOf(arg0), _int.valueOf(arg1))
        self.__wrapper = val

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).limit(_int.valueOf(arg0)))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address())

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XGenericEvent$Buffer.display()"""
        return int._wrap(super(Buffer, self).display())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str._wrap(super(pyglsystem.CustomBuffer, self).toString())

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XGenericEvent$Buffer org.lwjgl.system.linux.XGenericEvent$Buffer.send_event(boolean)"""
        return 'Buffer'._wrap(super(_Buffer, self).send_event(_boolean.valueOf(arg0)))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XGenericEvent$Buffer.send_event()"""
        return bool._wrap(super(Buffer, self).send_event())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int._wrap(super(_pyglsystem.CustomBuffer, self).address(_int.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).mark())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XGenericEvent$Buffer(java.nio.ByteBuffer)"""
        val = _Buffer(arg0)
        self.__wrapper = val

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XGenericEvent$Buffer org.lwjgl.system.linux.XGenericEvent$Buffer.serial(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).serial(_long.valueOf(arg0)))

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'._wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).stream())

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).position(_int.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'._wrap(super(pyglsystem.StructBuffer, self).get())

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XGenericEvent$Buffer org.lwjgl.system.linux.XGenericEvent$Buffer.type(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).type(_int.valueOf(arg0)))

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XGenericEvent$Buffer org.lwjgl.system.linux.XGenericEvent$Buffer.display(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).display(_long.valueOf(arg0)))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XGenericEvent$Buffer.type()"""
        return int._wrap(super(Buffer, self).type())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(arg0))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XGenericEvent$Buffer.serial()"""
        return int._wrap(super(Buffer, self).serial())

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'._wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def extension(self) -> int:
        """public int org.lwjgl.system.linux.XGenericEvent$Buffer.extension()"""
        return int._wrap(super(Buffer, self).extension())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).slice())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).slice(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0), arg1))

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(_int.valueOf(arg0), arg1))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).clear())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool._wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @overload
    def extension(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XGenericEvent$Buffer org.lwjgl.system.linux.XGenericEvent$Buffer.extension(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).extension(_int.valueOf(arg0)))

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def evtype(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XGenericEvent$Buffer org.lwjgl.system.linux.XGenericEvent$Buffer.evtype(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).evtype(_int.valueOf(arg0)))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int._wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(_int.valueOf(arg0), arg1))

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def evtype(self) -> int:
        """public int org.lwjgl.system.linux.XGenericEvent$Buffer.evtype()"""
        return int._wrap(super(Buffer, self).evtype())

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(_pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(arg0)) 
 
 
# CLASS: org.lwjgl.system.linux.Flock$Buffer
from pyquantum_helper import import_once as _import_once
import java.lang.Object as _Object
_Object = _Object
from builtins import type
import org.lwjgl.system.CustomBuffer as _CustomBuffer
_CustomBuffer = _CustomBuffer
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import java.lang.Short as _short
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import org.lwjgl.system.StructBuffer as _StructBuffer
_StructBuffer = _StructBuffer
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.util.Iterator as _Iterator
_Iterator = _Iterator
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
import java.util.Spliterator as _Spliterator
_Spliterator = _Spliterator
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.util.Iterator as Iterator
import java.lang.Integer as _int
import org.lwjgl.system.linux.Flock as _Flock_Buffer
_Buffer = _Flock_Buffer.Buffer
import java.util.stream.Stream as _Stream
_Stream = _Stream
import java.util.stream.Stream as Stream
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class Buffer():
    """org.lwjgl.system.linux.Flock.Buffer"""
 
    @staticmethod
    def _wrap(java_value: _Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Buffer__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Buffer__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).limit(_int.valueOf(arg0)))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str._wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def l_len(self) -> int:
        """public long org.lwjgl.system.linux.Flock$Buffer.l_len()"""
        return int._wrap(super(Buffer, self).l_len())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.Flock$Buffer(java.nio.ByteBuffer)"""
        val = _Buffer(arg0)
        self.__wrapper = val

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int._wrap(super(_pyglsystem.CustomBuffer, self).address(_int.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).mark())

    @overload
    def l_pid(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Flock$Buffer org.lwjgl.system.linux.Flock$Buffer.l_pid(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).l_pid(_int.valueOf(arg0)))

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'._wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).stream())

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.Flock$Buffer(long,int)"""
        val = _Buffer(_long.valueOf(arg0), _int.valueOf(arg1))
        self.__wrapper = val

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).position(_int.valueOf(arg0)))

    @overload
    def l_whence(self) -> int:
        """public short org.lwjgl.system.linux.Flock$Buffer.l_whence()"""
        return int._wrap(super(Buffer, self).l_whence())

    @overload
    def l_whence(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Flock$Buffer org.lwjgl.system.linux.Flock$Buffer.l_whence(short)"""
        return 'Buffer'._wrap(super(_Buffer, self).l_whence(_short.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @overload
    def l_pid(self) -> int:
        """public int org.lwjgl.system.linux.Flock$Buffer.l_pid()"""
        return int._wrap(super(Buffer, self).l_pid())

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'._wrap(super(pyglsystem.StructBuffer, self).get())

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def l_start(self) -> int:
        """public long org.lwjgl.system.linux.Flock$Buffer.l_start()"""
        return int._wrap(super(Buffer, self).l_start())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(arg0))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def l_type(self) -> int:
        """public short org.lwjgl.system.linux.Flock$Buffer.l_type()"""
        return int._wrap(super(Buffer, self).l_type())

    @overload
    def l_start(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Flock$Buffer org.lwjgl.system.linux.Flock$Buffer.l_start(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).l_start(_long.valueOf(arg0)))

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'._wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def l_len(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Flock$Buffer org.lwjgl.system.linux.Flock$Buffer.l_len(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).l_len(_long.valueOf(arg0)))

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).slice())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).slice(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0), arg1))

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(_int.valueOf(arg0), arg1))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).clear())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool._wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).flip())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int._wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(_int.valueOf(arg0), arg1))

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(_pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def l_type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Flock$Buffer org.lwjgl.system.linux.Flock$Buffer.l_type(short)"""
        return 'Buffer'._wrap(super(_Buffer, self).l_type(_short.valueOf(arg0)))

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(arg0)) 
 
 
# CLASS: org.lwjgl.system.linux.XVisibilityEvent$Buffer
from pyquantum_helper import import_once as _import_once
import java.lang.Object as _Object
_Object = _Object
from builtins import type
import org.lwjgl.system.CustomBuffer as _CustomBuffer
_CustomBuffer = _CustomBuffer
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Boolean as _boolean
import org.lwjgl.system.StructBuffer as _StructBuffer
_StructBuffer = _StructBuffer
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.util.Iterator as _Iterator
_Iterator = _Iterator
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
import org.lwjgl.system.linux.XVisibilityEvent as _XVisibilityEvent_Buffer
_Buffer = _XVisibilityEvent_Buffer.Buffer
import java.util.Spliterator as _Spliterator
_Spliterator = _Spliterator
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.util.Iterator as Iterator
import java.lang.Integer as _int
import java.util.stream.Stream as _Stream
_Stream = _Stream
import java.util.stream.Stream as Stream
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class Buffer():
    """org.lwjgl.system.linux.XVisibilityEvent.Buffer"""
 
    @staticmethod
    def _wrap(java_value: _Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Buffer__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Buffer__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).limit(_int.valueOf(arg0)))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address0())

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XVisibilityEvent$Buffer.serial()"""
        return int._wrap(super(Buffer, self).serial())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def state(self) -> int:
        """public int org.lwjgl.system.linux.XVisibilityEvent$Buffer.state()"""
        return int._wrap(super(Buffer, self).state())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str._wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int._wrap(super(_pyglsystem.CustomBuffer, self).address(_int.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).mark())

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XVisibilityEvent$Buffer.display()"""
        return int._wrap(super(Buffer, self).display())

    @overload
    def state(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XVisibilityEvent$Buffer org.lwjgl.system.linux.XVisibilityEvent$Buffer.state(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).state(_int.valueOf(arg0)))

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'._wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).stream())

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).position(_int.valueOf(arg0)))

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XVisibilityEvent$Buffer org.lwjgl.system.linux.XVisibilityEvent$Buffer.send_event(boolean)"""
        return 'Buffer'._wrap(super(_Buffer, self).send_event(_boolean.valueOf(arg0)))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XVisibilityEvent$Buffer.type()"""
        return int._wrap(super(Buffer, self).type())

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'._wrap(super(pyglsystem.StructBuffer, self).get())

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XVisibilityEvent$Buffer(long,int)"""
        val = _Buffer(_long.valueOf(arg0), _int.valueOf(arg1))
        self.__wrapper = val

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XVisibilityEvent$Buffer(java.nio.ByteBuffer)"""
        val = _Buffer(arg0)
        self.__wrapper = val

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XVisibilityEvent$Buffer.window()"""
        return int._wrap(super(Buffer, self).window())

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XVisibilityEvent$Buffer.send_event()"""
        return bool._wrap(super(Buffer, self).send_event())

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(arg0))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'._wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).slice())

    @overload
    def window(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XVisibilityEvent$Buffer org.lwjgl.system.linux.XVisibilityEvent$Buffer.window(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).window(_long.valueOf(arg0)))

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).slice(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0), arg1))

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XVisibilityEvent$Buffer org.lwjgl.system.linux.XVisibilityEvent$Buffer.serial(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).serial(_long.valueOf(arg0)))

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(_int.valueOf(arg0), arg1))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).clear())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool._wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XVisibilityEvent$Buffer org.lwjgl.system.linux.XVisibilityEvent$Buffer.display(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).display(_long.valueOf(arg0)))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int._wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(_int.valueOf(arg0), arg1))

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(_pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XVisibilityEvent$Buffer org.lwjgl.system.linux.XVisibilityEvent$Buffer.type(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).type(_int.valueOf(arg0)))

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(arg0)) 
 
 
# CLASS: org.lwjgl.system.linux.EpollData
from pyquantum_helper import import_once as _import_once
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _Object
_Object = _Object
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
from builtins import type
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import org.lwjgl.system.linux.EpollData as _EpollData
_EpollData = _EpollData
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import org.lwjgl.system.linux.EpollData as _EpollData_Buffer
_Buffer = _EpollData_Buffer.Buffer
import java.lang.Integer as _int
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class EpollData():
    """org.lwjgl.system.linux.EpollData"""
 
    @staticmethod
    def _wrap(java_value: _EpollData) -> 'EpollData':
        return EpollData(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _EpollData):
        """
        Dynamic initializer for EpollData.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_EpollData__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_EpollData__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def nptr(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.EpollData.nptr(long,long)"""
        _EpollData.nptr(_long.valueOf(arg0), _long.valueOf(arg1))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.EpollData(java.nio.ByteBuffer)"""
        val = _EpollData(arg0)
        self.__wrapper = val

    @overload
    def ptr(self) -> int:
        """public long org.lwjgl.system.linux.EpollData.ptr()"""
        return int._wrap(super(EpollData, self).ptr())

    @staticmethod
    @overload
    def nptr(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.EpollData.nptr(long)"""
        return int._wrap(_EpollData.nptr(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nu32(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.EpollData.nu32(long,int)"""
        _EpollData.nu32(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def u32(self, arg0: int) -> 'EpollData':
        """public org.lwjgl.system.linux.EpollData org.lwjgl.system.linux.EpollData.u32(int)"""
        return 'EpollData'._wrap(super(_EpollData, self).u32(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.EpollData$Buffer org.lwjgl.system.linux.EpollData.createSafe(long,int)"""
        return Buffer._wrap(_EpollData.createSafe(_long.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def nfd(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.EpollData.nfd(long,int)"""
        _EpollData.nfd(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def nu64(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.EpollData.nu64(long,long)"""
        _EpollData.nu64(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def calloc() -> 'EpollData':
        """public static org.lwjgl.system.linux.EpollData org.lwjgl.system.linux.EpollData.calloc()"""
        return EpollData._wrap(_EpollData.calloc())

    @staticmethod
    @overload
    def nfd(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.EpollData.nfd(long)"""
        return int._wrap(_EpollData.nfd(_long.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def fd(self, arg0: int) -> 'EpollData':
        """public org.lwjgl.system.linux.EpollData org.lwjgl.system.linux.EpollData.fd(int)"""
        return 'EpollData'._wrap(super(_EpollData, self).fd(_int.valueOf(arg0)))

    @overload
    def u32(self) -> int:
        """public int org.lwjgl.system.linux.EpollData.u32()"""
        return int._wrap(super(EpollData, self).u32())

    @overload
    def u64(self, arg0: int) -> 'EpollData':
        """public org.lwjgl.system.linux.EpollData org.lwjgl.system.linux.EpollData.u64(long)"""
        return 'EpollData'._wrap(super(_EpollData, self).u64(_long.valueOf(arg0)))

    @overload
    def fd(self) -> int:
        """public int org.lwjgl.system.linux.EpollData.fd()"""
        return int._wrap(super(EpollData, self).fd())

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'EpollData':
        """public static org.lwjgl.system.linux.EpollData org.lwjgl.system.linux.EpollData.malloc(org.lwjgl.system.MemoryStack)"""
        return EpollData._wrap(_EpollData.malloc(arg0))

    @overload
    def set(self, arg0: 'EpollData') -> 'EpollData':
        """public org.lwjgl.system.linux.EpollData org.lwjgl.system.linux.EpollData.set(org.lwjgl.system.linux.EpollData)"""
        return 'EpollData'._wrap(super(_EpollData, self).set(arg0))

    @staticmethod
    @overload
    def malloc() -> 'EpollData':
        """public static org.lwjgl.system.linux.EpollData org.lwjgl.system.linux.EpollData.malloc()"""
        return EpollData._wrap(_EpollData.malloc())

    @overload
    def u64(self) -> int:
        """public long org.lwjgl.system.linux.EpollData.u64()"""
        return int._wrap(super(EpollData, self).u64())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.EpollData.sizeof()"""
        return int._wrap(super(EpollData, self).sizeof())

    @staticmethod
    @overload
    def nu32(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.EpollData.nu32(long)"""
        return int._wrap(_EpollData.nu32(_long.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'EpollData':
        """public static org.lwjgl.system.linux.EpollData org.lwjgl.system.linux.EpollData.calloc(org.lwjgl.system.MemoryStack)"""
        return EpollData._wrap(_EpollData.calloc(arg0))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.EpollData$Buffer org.lwjgl.system.linux.EpollData.malloc(int)"""
        return Buffer._wrap(_EpollData.malloc(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        _Struct.validate(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), arg3)

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.EpollData$Buffer org.lwjgl.system.linux.EpollData.create(int)"""
        return Buffer._wrap(_EpollData.create(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.EpollData$Buffer org.lwjgl.system.linux.EpollData.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_EpollData.malloc(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def create() -> 'EpollData':
        """public static org.lwjgl.system.linux.EpollData org.lwjgl.system.linux.EpollData.create()"""
        return EpollData._wrap(_EpollData.create())

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'EpollData':
        """public static org.lwjgl.system.linux.EpollData org.lwjgl.system.linux.EpollData.createSafe(long)"""
        return EpollData._wrap(_EpollData.createSafe(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nu64(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.EpollData.nu64(long)"""
        return int._wrap(_EpollData.nu64(_long.valueOf(arg0)))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.EpollData$Buffer org.lwjgl.system.linux.EpollData.calloc(int)"""
        return Buffer._wrap(_EpollData.calloc(_int.valueOf(arg0)))

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool._wrap(super(_pyglsystem.Struct, self).isNull(_int.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def ptr(self, arg0: int) -> 'EpollData':
        """public org.lwjgl.system.linux.EpollData org.lwjgl.system.linux.EpollData.ptr(long)"""
        return 'EpollData'._wrap(super(_EpollData, self).ptr(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'EpollData':
        """public static org.lwjgl.system.linux.EpollData org.lwjgl.system.linux.EpollData.create(long)"""
        return EpollData._wrap(_EpollData.create(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.EpollData$Buffer org.lwjgl.system.linux.EpollData.create(long,int)"""
        return Buffer._wrap(_EpollData.create(_long.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str._wrap(super(pyglsystem.Pointer$Default, self).toString())

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.EpollData$Buffer org.lwjgl.system.linux.EpollData.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_EpollData.calloc(_int.valueOf(arg0), arg1))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).address()) 
 
 
# CLASS: org.lwjgl.system.linux.XResizeRequestEvent
from pyquantum_helper import import_once as _import_once
import org.lwjgl.system.linux.XResizeRequestEvent as _XResizeRequestEvent_Buffer
_Buffer = _XResizeRequestEvent_Buffer.Buffer
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _Object
_Object = _Object
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
from builtins import type
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import org.lwjgl.system.linux.XResizeRequestEvent as _XResizeRequestEvent
_XResizeRequestEvent = _XResizeRequestEvent
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.lang.Boolean as _boolean
import java.lang.Integer as _int
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class XResizeRequestEvent():
    """org.lwjgl.system.linux.XResizeRequestEvent"""
 
    @staticmethod
    def _wrap(java_value: _XResizeRequestEvent) -> 'XResizeRequestEvent':
        return XResizeRequestEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _XResizeRequestEvent):
        """
        Dynamic initializer for XResizeRequestEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_XResizeRequestEvent__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_XResizeRequestEvent__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def callocStack() -> 'XResizeRequestEvent':
        """public static org.lwjgl.system.linux.XResizeRequestEvent org.lwjgl.system.linux.XResizeRequestEvent.callocStack()"""
        return XResizeRequestEvent._wrap(_XResizeRequestEvent.callocStack())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XResizeRequestEvent$Buffer org.lwjgl.system.linux.XResizeRequestEvent.create(long,int)"""
        return Buffer._wrap(_XResizeRequestEvent.create(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def calloc() -> 'XResizeRequestEvent':
        """public static org.lwjgl.system.linux.XResizeRequestEvent org.lwjgl.system.linux.XResizeRequestEvent.calloc()"""
        return XResizeRequestEvent._wrap(_XResizeRequestEvent.calloc())

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XResizeRequestEvent.nserial(long,long)"""
        _XResizeRequestEvent.nserial(_long.valueOf(arg0), _long.valueOf(arg1))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def width(self, arg0: int) -> 'XResizeRequestEvent':
        """public org.lwjgl.system.linux.XResizeRequestEvent org.lwjgl.system.linux.XResizeRequestEvent.width(int)"""
        return 'XResizeRequestEvent'._wrap(super(_XResizeRequestEvent, self).width(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XResizeRequestEvent':
        """public static org.lwjgl.system.linux.XResizeRequestEvent org.lwjgl.system.linux.XResizeRequestEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XResizeRequestEvent._wrap(_XResizeRequestEvent.mallocStack(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @staticmethod
    @overload
    def nheight(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XResizeRequestEvent.nheight(long,int)"""
        _XResizeRequestEvent.nheight(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def type(self, arg0: int) -> 'XResizeRequestEvent':
        """public org.lwjgl.system.linux.XResizeRequestEvent org.lwjgl.system.linux.XResizeRequestEvent.type(int)"""
        return 'XResizeRequestEvent'._wrap(super(_XResizeRequestEvent, self).type(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XResizeRequestEvent':
        """public static org.lwjgl.system.linux.XResizeRequestEvent org.lwjgl.system.linux.XResizeRequestEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XResizeRequestEvent._wrap(_XResizeRequestEvent.malloc(arg0))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XResizeRequestEvent$Buffer org.lwjgl.system.linux.XResizeRequestEvent.createSafe(long,int)"""
        return Buffer._wrap(_XResizeRequestEvent.createSafe(_long.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def send_event(self, arg0: bool) -> 'XResizeRequestEvent':
        """public org.lwjgl.system.linux.XResizeRequestEvent org.lwjgl.system.linux.XResizeRequestEvent.send_event(boolean)"""
        return 'XResizeRequestEvent'._wrap(super(_XResizeRequestEvent, self).send_event(_boolean.valueOf(arg0)))

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XResizeRequestEvent.window()"""
        return int._wrap(super(XResizeRequestEvent, self).window())

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XResizeRequestEvent$Buffer org.lwjgl.system.linux.XResizeRequestEvent.create(int)"""
        return Buffer._wrap(_XResizeRequestEvent.create(_int.valueOf(arg0)))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XResizeRequestEvent.send_event()"""
        return bool._wrap(super(XResizeRequestEvent, self).send_event())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        _Struct.validate(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), arg3)

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XResizeRequestEvent$Buffer org.lwjgl.system.linux.XResizeRequestEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XResizeRequestEvent.calloc(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def create(arg0: int) -> 'XResizeRequestEvent':
        """public static org.lwjgl.system.linux.XResizeRequestEvent org.lwjgl.system.linux.XResizeRequestEvent.create(long)"""
        return XResizeRequestEvent._wrap(_XResizeRequestEvent.create(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XResizeRequestEvent.ndisplay(long)"""
        return int._wrap(_XResizeRequestEvent.ndisplay(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XResizeRequestEvent.validate(long)"""
        _XResizeRequestEvent.validate(_long.valueOf(arg0))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XResizeRequestEvent$Buffer org.lwjgl.system.linux.XResizeRequestEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XResizeRequestEvent.callocStack(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XResizeRequestEvent.nsend_event(long,int)"""
        _XResizeRequestEvent.nsend_event(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def mallocStack() -> 'XResizeRequestEvent':
        """public static org.lwjgl.system.linux.XResizeRequestEvent org.lwjgl.system.linux.XResizeRequestEvent.mallocStack()"""
        return XResizeRequestEvent._wrap(_XResizeRequestEvent.mallocStack())

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XResizeRequestEvent':
        """public static org.lwjgl.system.linux.XResizeRequestEvent org.lwjgl.system.linux.XResizeRequestEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XResizeRequestEvent._wrap(_XResizeRequestEvent.callocStack(arg0))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).address())

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XResizeRequestEvent.ntype(long)"""
        return int._wrap(_XResizeRequestEvent.ntype(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc() -> 'XResizeRequestEvent':
        """public static org.lwjgl.system.linux.XResizeRequestEvent org.lwjgl.system.linux.XResizeRequestEvent.malloc()"""
        return XResizeRequestEvent._wrap(_XResizeRequestEvent.malloc())

    @staticmethod
    @overload
    def nwindow(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XResizeRequestEvent.nwindow(long,long)"""
        _XResizeRequestEvent.nwindow(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XResizeRequestEvent.nserial(long)"""
        return int._wrap(_XResizeRequestEvent.nserial(_long.valueOf(arg0)))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XResizeRequestEvent.serial()"""
        return int._wrap(super(XResizeRequestEvent, self).serial())

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XResizeRequestEvent.ndisplay(long,long)"""
        _XResizeRequestEvent.ndisplay(_long.valueOf(arg0), _long.valueOf(arg1))

    @overload
    def set(self, arg0: 'XResizeRequestEvent') -> 'XResizeRequestEvent':
        """public org.lwjgl.system.linux.XResizeRequestEvent org.lwjgl.system.linux.XResizeRequestEvent.set(org.lwjgl.system.linux.XResizeRequestEvent)"""
        return 'XResizeRequestEvent'._wrap(super(_XResizeRequestEvent, self).set(arg0))

    @overload
    def height(self) -> int:
        """public int org.lwjgl.system.linux.XResizeRequestEvent.height()"""
        return int._wrap(super(XResizeRequestEvent, self).height())

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XResizeRequestEvent$Buffer org.lwjgl.system.linux.XResizeRequestEvent.malloc(int)"""
        return Buffer._wrap(_XResizeRequestEvent.malloc(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def nheight(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XResizeRequestEvent.nheight(long)"""
        return int._wrap(_XResizeRequestEvent.nheight(_long.valueOf(arg0)))

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XResizeRequestEvent.display()"""
        return int._wrap(super(XResizeRequestEvent, self).display())

    @overload
    def display(self, arg0: int) -> 'XResizeRequestEvent':
        """public org.lwjgl.system.linux.XResizeRequestEvent org.lwjgl.system.linux.XResizeRequestEvent.display(long)"""
        return 'XResizeRequestEvent'._wrap(super(_XResizeRequestEvent, self).display(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nwindow(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XResizeRequestEvent.nwindow(long)"""
        return int._wrap(_XResizeRequestEvent.nwindow(_long.valueOf(arg0)))

    @overload
    def window(self, arg0: int) -> 'XResizeRequestEvent':
        """public org.lwjgl.system.linux.XResizeRequestEvent org.lwjgl.system.linux.XResizeRequestEvent.window(long)"""
        return 'XResizeRequestEvent'._wrap(super(_XResizeRequestEvent, self).window(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nwidth(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XResizeRequestEvent.nwidth(long)"""
        return int._wrap(_XResizeRequestEvent.nwidth(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XResizeRequestEvent$Buffer org.lwjgl.system.linux.XResizeRequestEvent.calloc(int)"""
        return Buffer._wrap(_XResizeRequestEvent.calloc(_int.valueOf(arg0)))

    @overload
    def serial(self, arg0: int) -> 'XResizeRequestEvent':
        """public org.lwjgl.system.linux.XResizeRequestEvent org.lwjgl.system.linux.XResizeRequestEvent.serial(long)"""
        return 'XResizeRequestEvent'._wrap(super(_XResizeRequestEvent, self).serial(_long.valueOf(arg0)))

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int, arg5: int, arg6: int) -> 'XResizeRequestEvent':
        """public org.lwjgl.system.linux.XResizeRequestEvent org.lwjgl.system.linux.XResizeRequestEvent.set(int,long,boolean,long,long,int,int)"""
        return 'XResizeRequestEvent'._wrap(super(_XResizeRequestEvent, self).set(_int.valueOf(arg0), _long.valueOf(arg1), _boolean.valueOf(arg2), _long.valueOf(arg3), _long.valueOf(arg4), _int.valueOf(arg5), _int.valueOf(arg6)))

    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XResizeRequestEvent.nsend_event(long)"""
        return int._wrap(_XResizeRequestEvent.nsend_event(_long.valueOf(arg0)))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XResizeRequestEvent(java.nio.ByteBuffer)"""
        val = _XResizeRequestEvent(arg0)
        self.__wrapper = val

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XResizeRequestEvent$Buffer org.lwjgl.system.linux.XResizeRequestEvent.callocStack(int)"""
        return Buffer._wrap(_XResizeRequestEvent.callocStack(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XResizeRequestEvent.ntype(long,int)"""
        _XResizeRequestEvent.ntype(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XResizeRequestEvent$Buffer org.lwjgl.system.linux.XResizeRequestEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XResizeRequestEvent.malloc(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XResizeRequestEvent$Buffer org.lwjgl.system.linux.XResizeRequestEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XResizeRequestEvent.mallocStack(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def nwidth(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XResizeRequestEvent.nwidth(long,int)"""
        _XResizeRequestEvent.nwidth(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XResizeRequestEvent.type()"""
        return int._wrap(super(XResizeRequestEvent, self).type())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XResizeRequestEvent.sizeof()"""
        return int._wrap(super(XResizeRequestEvent, self).sizeof())

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def width(self) -> int:
        """public int org.lwjgl.system.linux.XResizeRequestEvent.width()"""
        return int._wrap(super(XResizeRequestEvent, self).width())

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XResizeRequestEvent':
        """public static org.lwjgl.system.linux.XResizeRequestEvent org.lwjgl.system.linux.XResizeRequestEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XResizeRequestEvent._wrap(_XResizeRequestEvent.calloc(arg0))

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool._wrap(super(_pyglsystem.Struct, self).isNull(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XResizeRequestEvent':
        """public static org.lwjgl.system.linux.XResizeRequestEvent org.lwjgl.system.linux.XResizeRequestEvent.createSafe(long)"""
        return XResizeRequestEvent._wrap(_XResizeRequestEvent.createSafe(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def create() -> 'XResizeRequestEvent':
        """public static org.lwjgl.system.linux.XResizeRequestEvent org.lwjgl.system.linux.XResizeRequestEvent.create()"""
        return XResizeRequestEvent._wrap(_XResizeRequestEvent.create())

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XResizeRequestEvent$Buffer org.lwjgl.system.linux.XResizeRequestEvent.mallocStack(int)"""
        return Buffer._wrap(_XResizeRequestEvent.mallocStack(_int.valueOf(arg0)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str._wrap(super(pyglsystem.Pointer$Default, self).toString())

    @overload
    def height(self, arg0: int) -> 'XResizeRequestEvent':
        """public org.lwjgl.system.linux.XResizeRequestEvent org.lwjgl.system.linux.XResizeRequestEvent.height(int)"""
        return 'XResizeRequestEvent'._wrap(super(_XResizeRequestEvent, self).height(_int.valueOf(arg0))) 
 
 
# CLASS: org.lwjgl.system.linux.X11$Functions
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _Object
_Object = _Object
import java.lang.Integer as _int
import org.lwjgl.system.linux.X11 as _X11_Functions
_Functions = _X11_Functions.Functions
import java.lang.Object as _object
from builtins import type
import java.lang.String as _String
_String = _String
from builtins import bool
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class Functions():
    """org.lwjgl.system.linux.X11.Functions"""
 
    @staticmethod
    def _wrap(java_value: _Functions) -> 'Functions':
        return Functions(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Functions):
        """
        Dynamic initializer for Functions.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Functions__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Functions__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.lang.Object.toString()"""
        return str._wrap(super(object, self).toString())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool._wrap(super(_object, self).equals(arg0))

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int._wrap(super(object, self).hashCode()) 
 
 
# CLASS: org.lwjgl.system.linux.XConfigureEvent$Buffer
from pyquantum_helper import import_once as _import_once
import java.lang.Object as _Object
_Object = _Object
from builtins import type
import org.lwjgl.system.CustomBuffer as _CustomBuffer
_CustomBuffer = _CustomBuffer
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Boolean as _boolean
import org.lwjgl.system.StructBuffer as _StructBuffer
_StructBuffer = _StructBuffer
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.util.Iterator as _Iterator
_Iterator = _Iterator
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
import java.util.Spliterator as _Spliterator
_Spliterator = _Spliterator
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.util.Iterator as Iterator
import java.lang.Integer as _int
import java.util.stream.Stream as _Stream
_Stream = _Stream
import org.lwjgl.system.linux.XConfigureEvent as _XConfigureEvent_Buffer
_Buffer = _XConfigureEvent_Buffer.Buffer
import java.util.stream.Stream as Stream
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class Buffer():
    """org.lwjgl.system.linux.XConfigureEvent.Buffer"""
 
    @staticmethod
    def _wrap(java_value: _Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Buffer__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Buffer__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def width(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XConfigureEvent$Buffer org.lwjgl.system.linux.XConfigureEvent$Buffer.width(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).width(_int.valueOf(arg0)))

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XConfigureEvent$Buffer org.lwjgl.system.linux.XConfigureEvent$Buffer.display(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).display(_long.valueOf(arg0)))

    @overload
    def x(self) -> int:
        """public int org.lwjgl.system.linux.XConfigureEvent$Buffer.x()"""
        return int._wrap(super(Buffer, self).x())

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).limit(_int.valueOf(arg0)))

    @overload
    def window(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XConfigureEvent$Buffer org.lwjgl.system.linux.XConfigureEvent$Buffer.window(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).window(_long.valueOf(arg0)))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address())

    @overload
    def override_redirect(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XConfigureEvent$Buffer org.lwjgl.system.linux.XConfigureEvent$Buffer.override_redirect(boolean)"""
        return 'Buffer'._wrap(super(_Buffer, self).override_redirect(_boolean.valueOf(arg0)))

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str._wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int._wrap(super(_pyglsystem.CustomBuffer, self).address(_int.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).mark())

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XConfigureEvent$Buffer.display()"""
        return int._wrap(super(Buffer, self).display())

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XConfigureEvent$Buffer.type()"""
        return int._wrap(super(Buffer, self).type())

    @overload
    def width(self) -> int:
        """public int org.lwjgl.system.linux.XConfigureEvent$Buffer.width()"""
        return int._wrap(super(Buffer, self).width())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'._wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XConfigureEvent$Buffer(java.nio.ByteBuffer)"""
        val = _Buffer(arg0)
        self.__wrapper = val

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).stream())

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).position(_int.valueOf(arg0)))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XConfigureEvent$Buffer.send_event()"""
        return bool._wrap(super(Buffer, self).send_event())

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'._wrap(super(pyglsystem.StructBuffer, self).get())

    @overload
    def height(self) -> int:
        """public int org.lwjgl.system.linux.XConfigureEvent$Buffer.height()"""
        return int._wrap(super(Buffer, self).height())

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def border_width(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XConfigureEvent$Buffer org.lwjgl.system.linux.XConfigureEvent$Buffer.border_width(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).border_width(_int.valueOf(arg0)))

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XConfigureEvent$Buffer org.lwjgl.system.linux.XConfigureEvent$Buffer.serial(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).serial(_long.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def y(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XConfigureEvent$Buffer org.lwjgl.system.linux.XConfigureEvent$Buffer.y(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).y(_int.valueOf(arg0)))

    @overload
    def border_width(self) -> int:
        """public int org.lwjgl.system.linux.XConfigureEvent$Buffer.border_width()"""
        return int._wrap(super(Buffer, self).border_width())

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def above(self) -> int:
        """public long org.lwjgl.system.linux.XConfigureEvent$Buffer.above()"""
        return int._wrap(super(Buffer, self).above())

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XConfigureEvent$Buffer org.lwjgl.system.linux.XConfigureEvent$Buffer.type(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).type(_int.valueOf(arg0)))

    @overload
    def above(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XConfigureEvent$Buffer org.lwjgl.system.linux.XConfigureEvent$Buffer.above(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).above(_long.valueOf(arg0)))

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XConfigureEvent$Buffer.window()"""
        return int._wrap(super(Buffer, self).window())

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(arg0))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'._wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(arg0))

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XConfigureEvent$Buffer(long,int)"""
        val = _Buffer(_long.valueOf(arg0), _int.valueOf(arg1))
        self.__wrapper = val

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).slice())

    @overload
    def override_redirect(self) -> bool:
        """public boolean org.lwjgl.system.linux.XConfigureEvent$Buffer.override_redirect()"""
        return bool._wrap(super(Buffer, self).override_redirect())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).slice(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0), arg1))

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(_int.valueOf(arg0), arg1))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).clear())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool._wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XConfigureEvent$Buffer org.lwjgl.system.linux.XConfigureEvent$Buffer.send_event(boolean)"""
        return 'Buffer'._wrap(super(_Buffer, self).send_event(_boolean.valueOf(arg0)))

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XConfigureEvent$Buffer.serial()"""
        return int._wrap(super(Buffer, self).serial())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int._wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def y(self) -> int:
        """public int org.lwjgl.system.linux.XConfigureEvent$Buffer.y()"""
        return int._wrap(super(Buffer, self).y())

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(_int.valueOf(arg0), arg1))

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(_pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def height(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XConfigureEvent$Buffer org.lwjgl.system.linux.XConfigureEvent$Buffer.height(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).height(_int.valueOf(arg0)))

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @overload
    def x(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XConfigureEvent$Buffer org.lwjgl.system.linux.XConfigureEvent$Buffer.x(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).x(_int.valueOf(arg0)))

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(arg0)) 
 
 
# CLASS: org.lwjgl.system.linux.CMsghdr
from pyquantum_helper import import_once as _import_once
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _Object
_Object = _Object
import org.lwjgl.system.linux.CMsghdr as _CMsghdr
_CMsghdr = _CMsghdr
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
from builtins import type
import java.nio.ByteBuffer as _ByteBuffer
_ByteBuffer = _ByteBuffer
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.lang.Integer as _int
import java.lang.Byte as _byte
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import org.lwjgl.system.linux.CMsghdr as _CMsghdr_Buffer
_Buffer = _CMsghdr_Buffer.Buffer
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class CMsghdr():
    """org.lwjgl.system.linux.CMsghdr"""
 
    @staticmethod
    def _wrap(java_value: _CMsghdr) -> 'CMsghdr':
        return CMsghdr(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _CMsghdr):
        """
        Dynamic initializer for CMsghdr.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_CMsghdr__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_CMsghdr__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def cmsg_data(self, arg0: 'ByteBuffer') -> 'CMsghdr':
        """public org.lwjgl.system.linux.CMsghdr org.lwjgl.system.linux.CMsghdr.cmsg_data(java.nio.ByteBuffer)"""
        return 'CMsghdr'._wrap(super(_CMsghdr, self).cmsg_data(arg0))

    @overload
    def cmsg_data(self) -> 'ByteBuffer':
        """public java.nio.ByteBuffer org.lwjgl.system.linux.CMsghdr.cmsg_data()"""
        return 'ByteBuffer'._wrap(super(CMsghdr, self).cmsg_data())

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.CMsghdr$Buffer org.lwjgl.system.linux.CMsghdr.create(int)"""
        return Buffer._wrap(_CMsghdr.create(_int.valueOf(arg0)))

    @overload
    def cmsg_data(self, arg0: int) -> int:
        """public byte org.lwjgl.system.linux.CMsghdr.cmsg_data(int)"""
        return int._wrap(super(_CMsghdr, self).cmsg_data(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def ncmsg_type(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.CMsghdr.ncmsg_type(long)"""
        return int._wrap(_CMsghdr.ncmsg_type(_long.valueOf(arg0)))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def malloc() -> 'CMsghdr':
        """public static org.lwjgl.system.linux.CMsghdr org.lwjgl.system.linux.CMsghdr.malloc()"""
        return CMsghdr._wrap(_CMsghdr.malloc())

    @staticmethod
    @overload
    def ncmsg_level(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.CMsghdr.ncmsg_level(long)"""
        return int._wrap(_CMsghdr.ncmsg_level(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'CMsghdr':
        """public static org.lwjgl.system.linux.CMsghdr org.lwjgl.system.linux.CMsghdr.create(long)"""
        return CMsghdr._wrap(_CMsghdr.create(_long.valueOf(arg0)))

    @overload
    def cmsg_level(self) -> int:
        """public int org.lwjgl.system.linux.CMsghdr.cmsg_level()"""
        return int._wrap(super(CMsghdr, self).cmsg_level())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.CMsghdr$Buffer org.lwjgl.system.linux.CMsghdr.malloc(int)"""
        return Buffer._wrap(_CMsghdr.malloc(_int.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def ncmsg_type(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.CMsghdr.ncmsg_type(long,int)"""
        _CMsghdr.ncmsg_type(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.CMsghdr$Buffer org.lwjgl.system.linux.CMsghdr.createSafe(long,int)"""
        return Buffer._wrap(_CMsghdr.createSafe(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.CMsghdr$Buffer org.lwjgl.system.linux.CMsghdr.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_CMsghdr.malloc(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'CMsghdr':
        """public static org.lwjgl.system.linux.CMsghdr org.lwjgl.system.linux.CMsghdr.createSafe(long)"""
        return CMsghdr._wrap(_CMsghdr.createSafe(_long.valueOf(arg0)))

    @overload
    def set(self, arg0: 'CMsghdr') -> 'CMsghdr':
        """public org.lwjgl.system.linux.CMsghdr org.lwjgl.system.linux.CMsghdr.set(org.lwjgl.system.linux.CMsghdr)"""
        return 'CMsghdr'._wrap(super(_CMsghdr, self).set(arg0))

    @overload
    def set(self, arg0: int, arg1: int, arg2: int, arg3: 'ByteBuffer') -> 'CMsghdr':
        """public org.lwjgl.system.linux.CMsghdr org.lwjgl.system.linux.CMsghdr.set(int,int,int,java.nio.ByteBuffer)"""
        return 'CMsghdr'._wrap(super(_CMsghdr, self).set(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), arg3))

    @overload
    def cmsg_type(self) -> int:
        """public int org.lwjgl.system.linux.CMsghdr.cmsg_type()"""
        return int._wrap(super(CMsghdr, self).cmsg_type())

    @staticmethod
    @overload
    def ncmsg_len(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.CMsghdr.ncmsg_len(long,int)"""
        _CMsghdr.ncmsg_len(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.CMsghdr$Buffer org.lwjgl.system.linux.CMsghdr.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_CMsghdr.calloc(_int.valueOf(arg0), arg1))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        _Struct.validate(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), arg3)

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @staticmethod
    @overload
    def ncmsg_data(arg0: int) -> 'ByteBuffer':
        """public static java.nio.ByteBuffer org.lwjgl.system.linux.CMsghdr.ncmsg_data(long)"""
        return ByteBuffer._wrap(_CMsghdr.ncmsg_data(_long.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).address())

    @staticmethod
    @overload
    def ncmsg_data(arg0: int, arg1: int, arg2: int):
        """public static void org.lwjgl.system.linux.CMsghdr.ncmsg_data(long,int,byte)"""
        _CMsghdr.ncmsg_data(_long.valueOf(arg0), _int.valueOf(arg1), _byte.valueOf(arg2))

    @overload
    def cmsg_len(self) -> int:
        """public int org.lwjgl.system.linux.CMsghdr.cmsg_len()"""
        return int._wrap(super(CMsghdr, self).cmsg_len())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.CMsghdr$Buffer org.lwjgl.system.linux.CMsghdr.create(long,int)"""
        return Buffer._wrap(_CMsghdr.create(_long.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def cmsg_type(self, arg0: int) -> 'CMsghdr':
        """public org.lwjgl.system.linux.CMsghdr org.lwjgl.system.linux.CMsghdr.cmsg_type(int)"""
        return 'CMsghdr'._wrap(super(_CMsghdr, self).cmsg_type(_int.valueOf(arg0)))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.CMsghdr(java.nio.ByteBuffer)"""
        val = _CMsghdr(arg0)
        self.__wrapper = val

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.CMsghdr.sizeof()"""
        return int._wrap(super(CMsghdr, self).sizeof())

    @overload
    def cmsg_len(self, arg0: int) -> 'CMsghdr':
        """public org.lwjgl.system.linux.CMsghdr org.lwjgl.system.linux.CMsghdr.cmsg_len(int)"""
        return 'CMsghdr'._wrap(super(_CMsghdr, self).cmsg_len(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.CMsghdr$Buffer org.lwjgl.system.linux.CMsghdr.calloc(int)"""
        return Buffer._wrap(_CMsghdr.calloc(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'CMsghdr':
        """public static org.lwjgl.system.linux.CMsghdr org.lwjgl.system.linux.CMsghdr.malloc(org.lwjgl.system.MemoryStack)"""
        return CMsghdr._wrap(_CMsghdr.malloc(arg0))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'CMsghdr':
        """public static org.lwjgl.system.linux.CMsghdr org.lwjgl.system.linux.CMsghdr.calloc(org.lwjgl.system.MemoryStack)"""
        return CMsghdr._wrap(_CMsghdr.calloc(arg0))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def cmsg_level(self, arg0: int) -> 'CMsghdr':
        """public org.lwjgl.system.linux.CMsghdr org.lwjgl.system.linux.CMsghdr.cmsg_level(int)"""
        return 'CMsghdr'._wrap(super(_CMsghdr, self).cmsg_level(_int.valueOf(arg0)))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @staticmethod
    @overload
    def ncmsg_level(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.CMsghdr.ncmsg_level(long,int)"""
        _CMsghdr.ncmsg_level(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def ncmsg_len(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.CMsghdr.ncmsg_len(long)"""
        return int._wrap(_CMsghdr.ncmsg_len(_long.valueOf(arg0)))

    @overload
    def cmsg_data(self, arg0: int, arg1: int) -> 'CMsghdr':
        """public org.lwjgl.system.linux.CMsghdr org.lwjgl.system.linux.CMsghdr.cmsg_data(int,byte)"""
        return 'CMsghdr'._wrap(super(_CMsghdr, self).cmsg_data(_int.valueOf(arg0), _byte.valueOf(arg1)))

    @staticmethod
    @overload
    def create() -> 'CMsghdr':
        """public static org.lwjgl.system.linux.CMsghdr org.lwjgl.system.linux.CMsghdr.create()"""
        return CMsghdr._wrap(_CMsghdr.create())

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool._wrap(super(_pyglsystem.Struct, self).isNull(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def ncmsg_data(arg0: int, arg1: int) -> int:
        """public static byte org.lwjgl.system.linux.CMsghdr.ncmsg_data(long,int)"""
        return int._wrap(_CMsghdr.ncmsg_data(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def ncmsg_data(arg0: int, arg1: 'ByteBuffer'):
        """public static void org.lwjgl.system.linux.CMsghdr.ncmsg_data(long,java.nio.ByteBuffer)"""
        _CMsghdr.ncmsg_data(_long.valueOf(arg0), arg1)

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str._wrap(super(pyglsystem.Pointer$Default, self).toString())

    @staticmethod
    @overload
    def calloc() -> 'CMsghdr':
        """public static org.lwjgl.system.linux.CMsghdr org.lwjgl.system.linux.CMsghdr.calloc()"""
        return CMsghdr._wrap(_CMsghdr.calloc()) 
 
 
# CLASS: org.lwjgl.system.linux.Visual$Buffer
from pyquantum_helper import import_once as _import_once
import java.lang.Object as _Object
_Object = _Object
from builtins import type
import org.lwjgl.system.CustomBuffer as _CustomBuffer
_CustomBuffer = _CustomBuffer
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import org.lwjgl.system.StructBuffer as _StructBuffer
_StructBuffer = _StructBuffer
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.util.Iterator as _Iterator
_Iterator = _Iterator
from builtins import bool
from builtins import str
import org.lwjgl.system.linux.Visual as _Visual_Buffer
_Buffer = _Visual_Buffer.Buffer
from pyquantum_helper import override
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
import java.util.Spliterator as _Spliterator
_Spliterator = _Spliterator
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.util.Iterator as Iterator
import java.lang.Integer as _int
import java.util.stream.Stream as _Stream
_Stream = _Stream
import java.util.stream.Stream as Stream
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class Buffer():
    """org.lwjgl.system.linux.Visual.Buffer"""
 
    @staticmethod
    def _wrap(java_value: _Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Buffer__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Buffer__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).limit(_int.valueOf(arg0)))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str._wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int._wrap(super(_pyglsystem.CustomBuffer, self).address(_int.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).mark())

    @overload
    def bits_per_rgb(self) -> int:
        """public int org.lwjgl.system.linux.Visual$Buffer.bits_per_rgb()"""
        return int._wrap(super(Buffer, self).bits_per_rgb())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'._wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).stream())

    @overload
    def bits_per_rgb(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Visual$Buffer org.lwjgl.system.linux.Visual$Buffer.bits_per_rgb(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).bits_per_rgb(_int.valueOf(arg0)))

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).position(_int.valueOf(arg0)))

    @overload
    def ext_data(self) -> int:
        """public long org.lwjgl.system.linux.Visual$Buffer.ext_data()"""
        return int._wrap(super(Buffer, self).ext_data())

    @overload
    def green_mask(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Visual$Buffer org.lwjgl.system.linux.Visual$Buffer.green_mask(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).green_mask(_long.valueOf(arg0)))

    @overload
    def ext_data(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Visual$Buffer org.lwjgl.system.linux.Visual$Buffer.ext_data(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).ext_data(_long.valueOf(arg0)))

    @overload
    def red_mask(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Visual$Buffer org.lwjgl.system.linux.Visual$Buffer.red_mask(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).red_mask(_long.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'._wrap(super(pyglsystem.StructBuffer, self).get())

    @overload
    def visualid(self) -> int:
        """public long org.lwjgl.system.linux.Visual$Buffer.visualid()"""
        return int._wrap(super(Buffer, self).visualid())

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def map_entries(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Visual$Buffer org.lwjgl.system.linux.Visual$Buffer.map_entries(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).map_entries(_int.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def green_mask(self) -> int:
        """public long org.lwjgl.system.linux.Visual$Buffer.green_mask()"""
        return int._wrap(super(Buffer, self).green_mask())

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(arg0))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def class$(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Visual$Buffer org.lwjgl.system.linux.Visual$Buffer.class$(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).class$(_int.valueOf(arg0)))

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.Visual$Buffer(long,int)"""
        val = _Buffer(_long.valueOf(arg0), _int.valueOf(arg1))
        self.__wrapper = val

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'._wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def class$(self) -> int:
        """public int org.lwjgl.system.linux.Visual$Buffer.class$()"""
        return int._wrap(super(Buffer, self).class$())

    @overload
    def map_entries(self) -> int:
        """public int org.lwjgl.system.linux.Visual$Buffer.map_entries()"""
        return int._wrap(super(Buffer, self).map_entries())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).slice())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).slice(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def visualid(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Visual$Buffer org.lwjgl.system.linux.Visual$Buffer.visualid(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).visualid(_long.valueOf(arg0)))

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0), arg1))

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(_int.valueOf(arg0), arg1))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).clear())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool._wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.Visual$Buffer(java.nio.ByteBuffer)"""
        val = _Buffer(arg0)
        self.__wrapper = val

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def blue_mask(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Visual$Buffer org.lwjgl.system.linux.Visual$Buffer.blue_mask(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).blue_mask(_long.valueOf(arg0)))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int._wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(_int.valueOf(arg0), arg1))

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def blue_mask(self) -> int:
        """public long org.lwjgl.system.linux.Visual$Buffer.blue_mask()"""
        return int._wrap(super(Buffer, self).blue_mask())

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(_pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def red_mask(self) -> int:
        """public long org.lwjgl.system.linux.Visual$Buffer.red_mask()"""
        return int._wrap(super(Buffer, self).red_mask())

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(arg0)) 
 
 
# CLASS: org.lwjgl.system.linux.XDestroyWindowEvent
from pyquantum_helper import import_once as _import_once
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _Object
_Object = _Object
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
from builtins import type
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import org.lwjgl.system.linux.XDestroyWindowEvent as _XDestroyWindowEvent_Buffer
_Buffer = _XDestroyWindowEvent_Buffer.Buffer
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.lang.Boolean as _boolean
import java.lang.Integer as _int
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import org.lwjgl.system.linux.XDestroyWindowEvent as _XDestroyWindowEvent
_XDestroyWindowEvent = _XDestroyWindowEvent
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class XDestroyWindowEvent():
    """org.lwjgl.system.linux.XDestroyWindowEvent"""
 
    @staticmethod
    def _wrap(java_value: _XDestroyWindowEvent) -> 'XDestroyWindowEvent':
        return XDestroyWindowEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _XDestroyWindowEvent):
        """
        Dynamic initializer for XDestroyWindowEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_XDestroyWindowEvent__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_XDestroyWindowEvent__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def type(self, arg0: int) -> 'XDestroyWindowEvent':
        """public org.lwjgl.system.linux.XDestroyWindowEvent org.lwjgl.system.linux.XDestroyWindowEvent.type(int)"""
        return 'XDestroyWindowEvent'._wrap(super(_XDestroyWindowEvent, self).type(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XDestroyWindowEvent$Buffer org.lwjgl.system.linux.XDestroyWindowEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XDestroyWindowEvent.mallocStack(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XDestroyWindowEvent$Buffer org.lwjgl.system.linux.XDestroyWindowEvent.callocStack(int)"""
        return Buffer._wrap(_XDestroyWindowEvent.callocStack(_int.valueOf(arg0)))

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XDestroyWindowEvent.window()"""
        return int._wrap(super(XDestroyWindowEvent, self).window())

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XDestroyWindowEvent$Buffer org.lwjgl.system.linux.XDestroyWindowEvent.malloc(int)"""
        return Buffer._wrap(_XDestroyWindowEvent.malloc(_int.valueOf(arg0)))

    @overload
    def window(self, arg0: int) -> 'XDestroyWindowEvent':
        """public org.lwjgl.system.linux.XDestroyWindowEvent org.lwjgl.system.linux.XDestroyWindowEvent.window(long)"""
        return 'XDestroyWindowEvent'._wrap(super(_XDestroyWindowEvent, self).window(_long.valueOf(arg0)))

    @overload
    def serial(self, arg0: int) -> 'XDestroyWindowEvent':
        """public org.lwjgl.system.linux.XDestroyWindowEvent org.lwjgl.system.linux.XDestroyWindowEvent.serial(long)"""
        return 'XDestroyWindowEvent'._wrap(super(_XDestroyWindowEvent, self).serial(_long.valueOf(arg0)))

    @overload
    def send_event(self, arg0: bool) -> 'XDestroyWindowEvent':
        """public org.lwjgl.system.linux.XDestroyWindowEvent org.lwjgl.system.linux.XDestroyWindowEvent.send_event(boolean)"""
        return 'XDestroyWindowEvent'._wrap(super(_XDestroyWindowEvent, self).send_event(_boolean.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc() -> 'XDestroyWindowEvent':
        """public static org.lwjgl.system.linux.XDestroyWindowEvent org.lwjgl.system.linux.XDestroyWindowEvent.malloc()"""
        return XDestroyWindowEvent._wrap(_XDestroyWindowEvent.malloc())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XDestroyWindowEvent$Buffer org.lwjgl.system.linux.XDestroyWindowEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XDestroyWindowEvent.calloc(_int.valueOf(arg0), arg1))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def event(self) -> int:
        """public long org.lwjgl.system.linux.XDestroyWindowEvent.event()"""
        return int._wrap(super(XDestroyWindowEvent, self).event())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XDestroyWindowEvent.sizeof()"""
        return int._wrap(super(XDestroyWindowEvent, self).sizeof())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XDestroyWindowEvent.type()"""
        return int._wrap(super(XDestroyWindowEvent, self).type())

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XDestroyWindowEvent$Buffer org.lwjgl.system.linux.XDestroyWindowEvent.create(long,int)"""
        return Buffer._wrap(_XDestroyWindowEvent.create(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def create() -> 'XDestroyWindowEvent':
        """public static org.lwjgl.system.linux.XDestroyWindowEvent org.lwjgl.system.linux.XDestroyWindowEvent.create()"""
        return XDestroyWindowEvent._wrap(_XDestroyWindowEvent.create())

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XDestroyWindowEvent.nserial(long,long)"""
        _XDestroyWindowEvent.nserial(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def callocStack() -> 'XDestroyWindowEvent':
        """public static org.lwjgl.system.linux.XDestroyWindowEvent org.lwjgl.system.linux.XDestroyWindowEvent.callocStack()"""
        return XDestroyWindowEvent._wrap(_XDestroyWindowEvent.callocStack())

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XDestroyWindowEvent':
        """public static org.lwjgl.system.linux.XDestroyWindowEvent org.lwjgl.system.linux.XDestroyWindowEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XDestroyWindowEvent._wrap(_XDestroyWindowEvent.calloc(arg0))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        _Struct.validate(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), arg3)

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XDestroyWindowEvent$Buffer org.lwjgl.system.linux.XDestroyWindowEvent.create(int)"""
        return Buffer._wrap(_XDestroyWindowEvent.create(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XDestroyWindowEvent.ntype(long)"""
        return int._wrap(_XDestroyWindowEvent.ntype(_long.valueOf(arg0)))

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XDestroyWindowEvent.validate(long)"""
        _XDestroyWindowEvent.validate(_long.valueOf(arg0))

    @overload
    def display(self, arg0: int) -> 'XDestroyWindowEvent':
        """public org.lwjgl.system.linux.XDestroyWindowEvent org.lwjgl.system.linux.XDestroyWindowEvent.display(long)"""
        return 'XDestroyWindowEvent'._wrap(super(_XDestroyWindowEvent, self).display(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'XDestroyWindowEvent':
        """public static org.lwjgl.system.linux.XDestroyWindowEvent org.lwjgl.system.linux.XDestroyWindowEvent.create(long)"""
        return XDestroyWindowEvent._wrap(_XDestroyWindowEvent.create(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nevent(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XDestroyWindowEvent.nevent(long,long)"""
        _XDestroyWindowEvent.nevent(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def mallocStack() -> 'XDestroyWindowEvent':
        """public static org.lwjgl.system.linux.XDestroyWindowEvent org.lwjgl.system.linux.XDestroyWindowEvent.mallocStack()"""
        return XDestroyWindowEvent._wrap(_XDestroyWindowEvent.mallocStack())

    @staticmethod
    @overload
    def nwindow(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XDestroyWindowEvent.nwindow(long,long)"""
        _XDestroyWindowEvent.nwindow(_long.valueOf(arg0), _long.valueOf(arg1))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XDestroyWindowEvent.ndisplay(long,long)"""
        _XDestroyWindowEvent.ndisplay(_long.valueOf(arg0), _long.valueOf(arg1))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).address())

    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XDestroyWindowEvent.nsend_event(long)"""
        return int._wrap(_XDestroyWindowEvent.nsend_event(_long.valueOf(arg0)))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XDestroyWindowEvent(java.nio.ByteBuffer)"""
        val = _XDestroyWindowEvent(arg0)
        self.__wrapper = val

    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XDestroyWindowEvent.nsend_event(long,int)"""
        _XDestroyWindowEvent.nsend_event(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def nwindow(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XDestroyWindowEvent.nwindow(long)"""
        return int._wrap(_XDestroyWindowEvent.nwindow(_long.valueOf(arg0)))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XDestroyWindowEvent.ntype(long,int)"""
        _XDestroyWindowEvent.ntype(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def event(self, arg0: int) -> 'XDestroyWindowEvent':
        """public org.lwjgl.system.linux.XDestroyWindowEvent org.lwjgl.system.linux.XDestroyWindowEvent.event(long)"""
        return 'XDestroyWindowEvent'._wrap(super(_XDestroyWindowEvent, self).event(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc() -> 'XDestroyWindowEvent':
        """public static org.lwjgl.system.linux.XDestroyWindowEvent org.lwjgl.system.linux.XDestroyWindowEvent.calloc()"""
        return XDestroyWindowEvent._wrap(_XDestroyWindowEvent.calloc())

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XDestroyWindowEvent':
        """public static org.lwjgl.system.linux.XDestroyWindowEvent org.lwjgl.system.linux.XDestroyWindowEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XDestroyWindowEvent._wrap(_XDestroyWindowEvent.callocStack(arg0))

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XDestroyWindowEvent.ndisplay(long)"""
        return int._wrap(_XDestroyWindowEvent.ndisplay(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XDestroyWindowEvent.nserial(long)"""
        return int._wrap(_XDestroyWindowEvent.nserial(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XDestroyWindowEvent':
        """public static org.lwjgl.system.linux.XDestroyWindowEvent org.lwjgl.system.linux.XDestroyWindowEvent.createSafe(long)"""
        return XDestroyWindowEvent._wrap(_XDestroyWindowEvent.createSafe(_long.valueOf(arg0)))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XDestroyWindowEvent.send_event()"""
        return bool._wrap(super(XDestroyWindowEvent, self).send_event())

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XDestroyWindowEvent$Buffer org.lwjgl.system.linux.XDestroyWindowEvent.createSafe(long,int)"""
        return Buffer._wrap(_XDestroyWindowEvent.createSafe(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XDestroyWindowEvent$Buffer org.lwjgl.system.linux.XDestroyWindowEvent.calloc(int)"""
        return Buffer._wrap(_XDestroyWindowEvent.calloc(_int.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XDestroyWindowEvent$Buffer org.lwjgl.system.linux.XDestroyWindowEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XDestroyWindowEvent.malloc(_int.valueOf(arg0), arg1))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XDestroyWindowEvent.serial()"""
        return int._wrap(super(XDestroyWindowEvent, self).serial())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int, arg5: int) -> 'XDestroyWindowEvent':
        """public org.lwjgl.system.linux.XDestroyWindowEvent org.lwjgl.system.linux.XDestroyWindowEvent.set(int,long,boolean,long,long,long)"""
        return 'XDestroyWindowEvent'._wrap(super(_XDestroyWindowEvent, self).set(_int.valueOf(arg0), _long.valueOf(arg1), _boolean.valueOf(arg2), _long.valueOf(arg3), _long.valueOf(arg4), _long.valueOf(arg5)))

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XDestroyWindowEvent.display()"""
        return int._wrap(super(XDestroyWindowEvent, self).display())

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XDestroyWindowEvent':
        """public static org.lwjgl.system.linux.XDestroyWindowEvent org.lwjgl.system.linux.XDestroyWindowEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XDestroyWindowEvent._wrap(_XDestroyWindowEvent.mallocStack(arg0))

    @overload
    def set(self, arg0: 'XDestroyWindowEvent') -> 'XDestroyWindowEvent':
        """public org.lwjgl.system.linux.XDestroyWindowEvent org.lwjgl.system.linux.XDestroyWindowEvent.set(org.lwjgl.system.linux.XDestroyWindowEvent)"""
        return 'XDestroyWindowEvent'._wrap(super(_XDestroyWindowEvent, self).set(arg0))

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XDestroyWindowEvent':
        """public static org.lwjgl.system.linux.XDestroyWindowEvent org.lwjgl.system.linux.XDestroyWindowEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XDestroyWindowEvent._wrap(_XDestroyWindowEvent.malloc(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool._wrap(super(_pyglsystem.Struct, self).isNull(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XDestroyWindowEvent$Buffer org.lwjgl.system.linux.XDestroyWindowEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XDestroyWindowEvent.callocStack(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def nevent(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XDestroyWindowEvent.nevent(long)"""
        return int._wrap(_XDestroyWindowEvent.nevent(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XDestroyWindowEvent$Buffer org.lwjgl.system.linux.XDestroyWindowEvent.mallocStack(int)"""
        return Buffer._wrap(_XDestroyWindowEvent.mallocStack(_int.valueOf(arg0)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str._wrap(super(pyglsystem.Pointer$Default, self).toString()) 
 
 
# CLASS: org.lwjgl.system.linux.XFocusChangeEvent$Buffer
from pyquantum_helper import import_once as _import_once
import org.lwjgl.system.linux.XFocusChangeEvent as _XFocusChangeEvent_Buffer
_Buffer = _XFocusChangeEvent_Buffer.Buffer
import java.lang.Object as _Object
_Object = _Object
from builtins import type
import org.lwjgl.system.CustomBuffer as _CustomBuffer
_CustomBuffer = _CustomBuffer
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Boolean as _boolean
import org.lwjgl.system.StructBuffer as _StructBuffer
_StructBuffer = _StructBuffer
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.util.Iterator as _Iterator
_Iterator = _Iterator
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
import java.util.Spliterator as _Spliterator
_Spliterator = _Spliterator
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.util.Iterator as Iterator
import java.lang.Integer as _int
import java.util.stream.Stream as _Stream
_Stream = _Stream
import java.util.stream.Stream as Stream
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class Buffer():
    """org.lwjgl.system.linux.XFocusChangeEvent.Buffer"""
 
    @staticmethod
    def _wrap(java_value: _Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Buffer__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Buffer__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).limit(_int.valueOf(arg0)))

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XFocusChangeEvent$Buffer org.lwjgl.system.linux.XFocusChangeEvent$Buffer.serial(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).serial(_long.valueOf(arg0)))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XFocusChangeEvent$Buffer.display()"""
        return int._wrap(super(Buffer, self).display())

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str._wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int._wrap(super(_pyglsystem.CustomBuffer, self).address(_int.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'._wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).stream())

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).position(_int.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @overload
    def window(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XFocusChangeEvent$Buffer org.lwjgl.system.linux.XFocusChangeEvent$Buffer.window(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).window(_long.valueOf(arg0)))

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'._wrap(super(pyglsystem.StructBuffer, self).get())

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def detail(self) -> int:
        """public int org.lwjgl.system.linux.XFocusChangeEvent$Buffer.detail()"""
        return int._wrap(super(Buffer, self).detail())

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def mode(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XFocusChangeEvent$Buffer org.lwjgl.system.linux.XFocusChangeEvent$Buffer.mode(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).mode(_int.valueOf(arg0)))

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(arg0))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XFocusChangeEvent$Buffer(long,int)"""
        val = _Buffer(_long.valueOf(arg0), _int.valueOf(arg1))
        self.__wrapper = val

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XFocusChangeEvent$Buffer.window()"""
        return int._wrap(super(Buffer, self).window())

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XFocusChangeEvent$Buffer org.lwjgl.system.linux.XFocusChangeEvent$Buffer.send_event(boolean)"""
        return 'Buffer'._wrap(super(_Buffer, self).send_event(_boolean.valueOf(arg0)))

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'._wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(arg0))

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XFocusChangeEvent$Buffer org.lwjgl.system.linux.XFocusChangeEvent$Buffer.display(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).display(_long.valueOf(arg0)))

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).slice())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).slice(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0), arg1))

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(_int.valueOf(arg0), arg1))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).clear())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool._wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XFocusChangeEvent$Buffer(java.nio.ByteBuffer)"""
        val = _Buffer(arg0)
        self.__wrapper = val

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def mode(self) -> int:
        """public int org.lwjgl.system.linux.XFocusChangeEvent$Buffer.mode()"""
        return int._wrap(super(Buffer, self).mode())

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XFocusChangeEvent$Buffer.type()"""
        return int._wrap(super(Buffer, self).type())

    @overload
    def detail(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XFocusChangeEvent$Buffer org.lwjgl.system.linux.XFocusChangeEvent$Buffer.detail(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).detail(_int.valueOf(arg0)))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int._wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(_int.valueOf(arg0), arg1))

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(_pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XFocusChangeEvent$Buffer.send_event()"""
        return bool._wrap(super(Buffer, self).send_event())

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XFocusChangeEvent$Buffer.serial()"""
        return int._wrap(super(Buffer, self).serial())

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XFocusChangeEvent$Buffer org.lwjgl.system.linux.XFocusChangeEvent$Buffer.type(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).type(_int.valueOf(arg0)))

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(arg0)) 
 
 
# CLASS: org.lwjgl.system.linux.XGenericEventCookie$Buffer
from pyquantum_helper import import_once as _import_once
import java.lang.Object as _Object
_Object = _Object
from builtins import type
import org.lwjgl.system.CustomBuffer as _CustomBuffer
_CustomBuffer = _CustomBuffer
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Boolean as _boolean
import org.lwjgl.system.linux.XGenericEventCookie as _XGenericEventCookie_Buffer
_Buffer = _XGenericEventCookie_Buffer.Buffer
import org.lwjgl.system.StructBuffer as _StructBuffer
_StructBuffer = _StructBuffer
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.util.Iterator as _Iterator
_Iterator = _Iterator
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
import java.nio.ByteBuffer as _ByteBuffer
_ByteBuffer = _ByteBuffer
import java.util.Spliterator as _Spliterator
_Spliterator = _Spliterator
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.util.Iterator as Iterator
import java.lang.Integer as _int
import java.util.stream.Stream as _Stream
_Stream = _Stream
import java.util.stream.Stream as Stream
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class Buffer():
    """org.lwjgl.system.linux.XGenericEventCookie.Buffer"""
 
    @staticmethod
    def _wrap(java_value: _Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Buffer__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Buffer__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def extension(self) -> int:
        """public int org.lwjgl.system.linux.XGenericEventCookie$Buffer.extension()"""
        return int._wrap(super(Buffer, self).extension())

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).limit(_int.valueOf(arg0)))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address0())

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XGenericEventCookie$Buffer org.lwjgl.system.linux.XGenericEventCookie$Buffer.display(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).display(_long.valueOf(arg0)))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XGenericEventCookie$Buffer.type()"""
        return int._wrap(super(Buffer, self).type())

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XGenericEventCookie$Buffer.display()"""
        return int._wrap(super(Buffer, self).display())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str._wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int._wrap(super(_pyglsystem.CustomBuffer, self).address(_int.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).mark())

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XGenericEventCookie$Buffer org.lwjgl.system.linux.XGenericEventCookie$Buffer.send_event(boolean)"""
        return 'Buffer'._wrap(super(_Buffer, self).send_event(_boolean.valueOf(arg0)))

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'._wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).stream())

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).position(_int.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'._wrap(super(pyglsystem.StructBuffer, self).get())

    @overload
    def cookie(self) -> int:
        """public int org.lwjgl.system.linux.XGenericEventCookie$Buffer.cookie()"""
        return int._wrap(super(Buffer, self).cookie())

    @overload
    def cookie(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XGenericEventCookie$Buffer org.lwjgl.system.linux.XGenericEventCookie$Buffer.cookie(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).cookie(_int.valueOf(arg0)))

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XGenericEventCookie$Buffer(long,int)"""
        val = _Buffer(_long.valueOf(arg0), _int.valueOf(arg1))
        self.__wrapper = val

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XGenericEventCookie$Buffer org.lwjgl.system.linux.XGenericEventCookie$Buffer.serial(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).serial(_long.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XGenericEventCookie$Buffer org.lwjgl.system.linux.XGenericEventCookie$Buffer.type(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).type(_int.valueOf(arg0)))

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(arg0))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'._wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def extension(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XGenericEventCookie$Buffer org.lwjgl.system.linux.XGenericEventCookie$Buffer.extension(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).extension(_int.valueOf(arg0)))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XGenericEventCookie$Buffer.serial()"""
        return int._wrap(super(Buffer, self).serial())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(arg0))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XGenericEventCookie$Buffer.send_event()"""
        return bool._wrap(super(Buffer, self).send_event())

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).slice())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).slice(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0), arg1))

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(_int.valueOf(arg0), arg1))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).clear())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool._wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @overload
    def evtype(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XGenericEventCookie$Buffer org.lwjgl.system.linux.XGenericEventCookie$Buffer.evtype(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).evtype(_int.valueOf(arg0)))

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).flip())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int._wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(_int.valueOf(arg0), arg1))

    @overload
    def evtype(self) -> int:
        """public int org.lwjgl.system.linux.XGenericEventCookie$Buffer.evtype()"""
        return int._wrap(super(Buffer, self).evtype())

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def data(self, arg0: int) -> 'ByteBuffer':
        """public java.nio.ByteBuffer org.lwjgl.system.linux.XGenericEventCookie$Buffer.data(int)"""
        return 'ByteBuffer'._wrap(super(_Buffer, self).data(_int.valueOf(arg0)))

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(_pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XGenericEventCookie$Buffer(java.nio.ByteBuffer)"""
        val = _Buffer(arg0)
        self.__wrapper = val

    @overload
    def data(self, arg0: 'ByteBuffer') -> 'Buffer':
        """public org.lwjgl.system.linux.XGenericEventCookie$Buffer org.lwjgl.system.linux.XGenericEventCookie$Buffer.data(java.nio.ByteBuffer)"""
        return 'Buffer'._wrap(super(_Buffer, self).data(arg0))

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(arg0)) 
 
 
# CLASS: org.lwjgl.system.linux.XTimeCoord
from pyquantum_helper import import_once as _import_once
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _Object
_Object = _Object
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
from builtins import type
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import org.lwjgl.system.linux.XTimeCoord as _XTimeCoord
_XTimeCoord = _XTimeCoord
import java.lang.Integer as _int
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import org.lwjgl.system.linux.XTimeCoord as _XTimeCoord_Buffer
_Buffer = _XTimeCoord_Buffer.Buffer
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class XTimeCoord():
    """org.lwjgl.system.linux.XTimeCoord"""
 
    @staticmethod
    def _wrap(java_value: _XTimeCoord) -> 'XTimeCoord':
        return XTimeCoord(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _XTimeCoord):
        """
        Dynamic initializer for XTimeCoord.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_XTimeCoord__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_XTimeCoord__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def y(self) -> int:
        """public short org.lwjgl.system.linux.XTimeCoord.y()"""
        return int._wrap(super(XTimeCoord, self).y())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XTimeCoord(java.nio.ByteBuffer)"""
        val = _XTimeCoord(arg0)
        self.__wrapper = val

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def ntime(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XTimeCoord.ntime(long)"""
        return int._wrap(_XTimeCoord.ntime(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XTimeCoord$Buffer org.lwjgl.system.linux.XTimeCoord.create(long,int)"""
        return Buffer._wrap(_XTimeCoord.create(_long.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def x(self) -> int:
        """public short org.lwjgl.system.linux.XTimeCoord.x()"""
        return int._wrap(super(XTimeCoord, self).x())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XTimeCoord.sizeof()"""
        return int._wrap(super(XTimeCoord, self).sizeof())

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XTimeCoord':
        """public static org.lwjgl.system.linux.XTimeCoord org.lwjgl.system.linux.XTimeCoord.createSafe(long)"""
        return XTimeCoord._wrap(_XTimeCoord.createSafe(_long.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def time(self) -> int:
        """public long org.lwjgl.system.linux.XTimeCoord.time()"""
        return int._wrap(super(XTimeCoord, self).time())

    @staticmethod
    @overload
    def create(arg0: int) -> 'XTimeCoord':
        """public static org.lwjgl.system.linux.XTimeCoord org.lwjgl.system.linux.XTimeCoord.create(long)"""
        return XTimeCoord._wrap(_XTimeCoord.create(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XTimeCoord$Buffer org.lwjgl.system.linux.XTimeCoord.createSafe(long,int)"""
        return Buffer._wrap(_XTimeCoord.createSafe(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def nx(arg0: int) -> int:
        """public static short org.lwjgl.system.linux.XTimeCoord.nx(long)"""
        return int._wrap(_XTimeCoord.nx(_long.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @staticmethod
    @overload
    def ny(arg0: int) -> int:
        """public static short org.lwjgl.system.linux.XTimeCoord.ny(long)"""
        return int._wrap(_XTimeCoord.ny(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        _Struct.validate(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), arg3)

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool._wrap(super(_pyglsystem.Struct, self).isNull(_int.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str._wrap(super(pyglsystem.Pointer$Default, self).toString())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).address()) 
 
 
# CLASS: org.lwjgl.system.linux.XReparentEvent$Buffer
from pyquantum_helper import import_once as _import_once
import java.lang.Object as _Object
_Object = _Object
from builtins import type
import org.lwjgl.system.CustomBuffer as _CustomBuffer
_CustomBuffer = _CustomBuffer
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Boolean as _boolean
import org.lwjgl.system.StructBuffer as _StructBuffer
_StructBuffer = _StructBuffer
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.util.Iterator as _Iterator
_Iterator = _Iterator
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
import java.util.Spliterator as _Spliterator
_Spliterator = _Spliterator
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import org.lwjgl.system.linux.XReparentEvent as _XReparentEvent_Buffer
_Buffer = _XReparentEvent_Buffer.Buffer
import java.lang.String as _String
_String = _String
import java.util.Iterator as Iterator
import java.lang.Integer as _int
import java.util.stream.Stream as _Stream
_Stream = _Stream
import java.util.stream.Stream as Stream
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class Buffer():
    """org.lwjgl.system.linux.XReparentEvent.Buffer"""
 
    @staticmethod
    def _wrap(java_value: _Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Buffer__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Buffer__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).limit(_int.valueOf(arg0)))

    @overload
    def x(self) -> int:
        """public int org.lwjgl.system.linux.XReparentEvent$Buffer.x()"""
        return int._wrap(super(Buffer, self).x())

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address0())

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XReparentEvent$Buffer.display()"""
        return int._wrap(super(Buffer, self).display())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0)))

    @overload
    def window(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XReparentEvent$Buffer org.lwjgl.system.linux.XReparentEvent$Buffer.window(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).window(_long.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XReparentEvent$Buffer.serial()"""
        return int._wrap(super(Buffer, self).serial())

    @overload
    def override_redirect(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XReparentEvent$Buffer org.lwjgl.system.linux.XReparentEvent$Buffer.override_redirect(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).override_redirect(_int.valueOf(arg0)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str._wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int._wrap(super(_pyglsystem.CustomBuffer, self).address(_int.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).mark())

    @overload
    def x(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XReparentEvent$Buffer org.lwjgl.system.linux.XReparentEvent$Buffer.x(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).x(_int.valueOf(arg0)))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XReparentEvent$Buffer.type()"""
        return int._wrap(super(Buffer, self).type())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'._wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).stream())

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).position(_int.valueOf(arg0)))

    @overload
    def event(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XReparentEvent$Buffer org.lwjgl.system.linux.XReparentEvent$Buffer.event(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).event(_long.valueOf(arg0)))

    @overload
    def override_redirect(self) -> int:
        """public int org.lwjgl.system.linux.XReparentEvent$Buffer.override_redirect()"""
        return int._wrap(super(Buffer, self).override_redirect())

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @overload
    def parent(self) -> int:
        """public long org.lwjgl.system.linux.XReparentEvent$Buffer.parent()"""
        return int._wrap(super(Buffer, self).parent())

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'._wrap(super(pyglsystem.StructBuffer, self).get())

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XReparentEvent$Buffer(java.nio.ByteBuffer)"""
        val = _Buffer(arg0)
        self.__wrapper = val

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XReparentEvent$Buffer org.lwjgl.system.linux.XReparentEvent$Buffer.type(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).type(_int.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def event(self) -> int:
        """public long org.lwjgl.system.linux.XReparentEvent$Buffer.event()"""
        return int._wrap(super(Buffer, self).event())

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XReparentEvent$Buffer(long,int)"""
        val = _Buffer(_long.valueOf(arg0), _int.valueOf(arg1))
        self.__wrapper = val

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(arg0))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'._wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).slice())

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XReparentEvent$Buffer org.lwjgl.system.linux.XReparentEvent$Buffer.display(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).display(_long.valueOf(arg0)))

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).slice(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0), arg1))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XReparentEvent$Buffer.send_event()"""
        return bool._wrap(super(Buffer, self).send_event())

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(_int.valueOf(arg0), arg1))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).clear())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool._wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @overload
    def y(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XReparentEvent$Buffer org.lwjgl.system.linux.XReparentEvent$Buffer.y(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).y(_int.valueOf(arg0)))

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).flip())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int._wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XReparentEvent$Buffer org.lwjgl.system.linux.XReparentEvent$Buffer.send_event(boolean)"""
        return 'Buffer'._wrap(super(_Buffer, self).send_event(_boolean.valueOf(arg0)))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(_int.valueOf(arg0), arg1))

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XReparentEvent$Buffer org.lwjgl.system.linux.XReparentEvent$Buffer.serial(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).serial(_long.valueOf(arg0)))

    @overload
    def parent(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XReparentEvent$Buffer org.lwjgl.system.linux.XReparentEvent$Buffer.parent(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).parent(_long.valueOf(arg0)))

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(_pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XReparentEvent$Buffer.window()"""
        return int._wrap(super(Buffer, self).window())

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def y(self) -> int:
        """public int org.lwjgl.system.linux.XReparentEvent$Buffer.y()"""
        return int._wrap(super(Buffer, self).y())

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(arg0)) 
 
 
# CLASS: org.lwjgl.system.linux.XConfigureRequestEvent$Buffer
from pyquantum_helper import import_once as _import_once
import java.lang.Object as _Object
_Object = _Object
from builtins import type
import org.lwjgl.system.CustomBuffer as _CustomBuffer
_CustomBuffer = _CustomBuffer
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Boolean as _boolean
import org.lwjgl.system.linux.XConfigureRequestEvent as _XConfigureRequestEvent_Buffer
_Buffer = _XConfigureRequestEvent_Buffer.Buffer
import org.lwjgl.system.StructBuffer as _StructBuffer
_StructBuffer = _StructBuffer
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.util.Iterator as _Iterator
_Iterator = _Iterator
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
import java.util.Spliterator as _Spliterator
_Spliterator = _Spliterator
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.util.Iterator as Iterator
import java.lang.Integer as _int
import java.util.stream.Stream as _Stream
_Stream = _Stream
import java.util.stream.Stream as Stream
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class Buffer():
    """org.lwjgl.system.linux.XConfigureRequestEvent.Buffer"""
 
    @staticmethod
    def _wrap(java_value: _Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Buffer__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Buffer__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def x(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XConfigureRequestEvent$Buffer org.lwjgl.system.linux.XConfigureRequestEvent$Buffer.x(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).x(_int.valueOf(arg0)))

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).limit(_int.valueOf(arg0)))

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XConfigureRequestEvent$Buffer org.lwjgl.system.linux.XConfigureRequestEvent$Buffer.type(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).type(_int.valueOf(arg0)))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XConfigureRequestEvent$Buffer org.lwjgl.system.linux.XConfigureRequestEvent$Buffer.serial(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).serial(_long.valueOf(arg0)))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address())

    @overload
    def detail(self) -> int:
        """public int org.lwjgl.system.linux.XConfigureRequestEvent$Buffer.detail()"""
        return int._wrap(super(Buffer, self).detail())

    @overload
    def window(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XConfigureRequestEvent$Buffer org.lwjgl.system.linux.XConfigureRequestEvent$Buffer.window(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).window(_long.valueOf(arg0)))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XConfigureRequestEvent$Buffer(java.nio.ByteBuffer)"""
        val = _Buffer(arg0)
        self.__wrapper = val

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str._wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int._wrap(super(_pyglsystem.CustomBuffer, self).address(_int.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).mark())

    @overload
    def width(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XConfigureRequestEvent$Buffer org.lwjgl.system.linux.XConfigureRequestEvent$Buffer.width(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).width(_int.valueOf(arg0)))

    @overload
    def above(self) -> int:
        """public long org.lwjgl.system.linux.XConfigureRequestEvent$Buffer.above()"""
        return int._wrap(super(Buffer, self).above())

    @overload
    def detail(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XConfigureRequestEvent$Buffer org.lwjgl.system.linux.XConfigureRequestEvent$Buffer.detail(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).detail(_int.valueOf(arg0)))

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'._wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).stream())

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).position(_int.valueOf(arg0)))

    @overload
    def width(self) -> int:
        """public int org.lwjgl.system.linux.XConfigureRequestEvent$Buffer.width()"""
        return int._wrap(super(Buffer, self).width())

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @overload
    def y(self) -> int:
        """public int org.lwjgl.system.linux.XConfigureRequestEvent$Buffer.y()"""
        return int._wrap(super(Buffer, self).y())

    @overload
    def height(self) -> int:
        """public int org.lwjgl.system.linux.XConfigureRequestEvent$Buffer.height()"""
        return int._wrap(super(Buffer, self).height())

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'._wrap(super(pyglsystem.StructBuffer, self).get())

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def x(self) -> int:
        """public int org.lwjgl.system.linux.XConfigureRequestEvent$Buffer.x()"""
        return int._wrap(super(Buffer, self).x())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(arg0))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'._wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XConfigureRequestEvent$Buffer.display()"""
        return int._wrap(super(Buffer, self).display())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(arg0))

    @overload
    def above(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XConfigureRequestEvent$Buffer org.lwjgl.system.linux.XConfigureRequestEvent$Buffer.above(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).above(_long.valueOf(arg0)))

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).slice())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).slice(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XConfigureRequestEvent$Buffer.type()"""
        return int._wrap(super(Buffer, self).type())

    @overload
    def border_width(self) -> int:
        """public int org.lwjgl.system.linux.XConfigureRequestEvent$Buffer.border_width()"""
        return int._wrap(super(Buffer, self).border_width())

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0), arg1))

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(_int.valueOf(arg0), arg1))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).clear())

    @overload
    def y(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XConfigureRequestEvent$Buffer org.lwjgl.system.linux.XConfigureRequestEvent$Buffer.y(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).y(_int.valueOf(arg0)))

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XConfigureRequestEvent$Buffer org.lwjgl.system.linux.XConfigureRequestEvent$Buffer.display(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).display(_long.valueOf(arg0)))

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool._wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @overload
    def height(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XConfigureRequestEvent$Buffer org.lwjgl.system.linux.XConfigureRequestEvent$Buffer.height(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).height(_int.valueOf(arg0)))

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).flip())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int._wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(_int.valueOf(arg0), arg1))

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def value_mask(self) -> int:
        """public long org.lwjgl.system.linux.XConfigureRequestEvent$Buffer.value_mask()"""
        return int._wrap(super(Buffer, self).value_mask())

    @overload
    def parent(self) -> int:
        """public long org.lwjgl.system.linux.XConfigureRequestEvent$Buffer.parent()"""
        return int._wrap(super(Buffer, self).parent())

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XConfigureRequestEvent$Buffer.serial()"""
        return int._wrap(super(Buffer, self).serial())

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XConfigureRequestEvent$Buffer.send_event()"""
        return bool._wrap(super(Buffer, self).send_event())

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(_pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XConfigureRequestEvent$Buffer(long,int)"""
        val = _Buffer(_long.valueOf(arg0), _int.valueOf(arg1))
        self.__wrapper = val

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XConfigureRequestEvent$Buffer.window()"""
        return int._wrap(super(Buffer, self).window())

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def parent(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XConfigureRequestEvent$Buffer org.lwjgl.system.linux.XConfigureRequestEvent$Buffer.parent(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).parent(_long.valueOf(arg0)))

    @overload
    def border_width(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XConfigureRequestEvent$Buffer org.lwjgl.system.linux.XConfigureRequestEvent$Buffer.border_width(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).border_width(_int.valueOf(arg0)))

    @overload
    def value_mask(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XConfigureRequestEvent$Buffer org.lwjgl.system.linux.XConfigureRequestEvent$Buffer.value_mask(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).value_mask(_long.valueOf(arg0)))

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XConfigureRequestEvent$Buffer org.lwjgl.system.linux.XConfigureRequestEvent$Buffer.send_event(boolean)"""
        return 'Buffer'._wrap(super(_Buffer, self).send_event(_boolean.valueOf(arg0)))

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(arg0)) 
 
 
# CLASS: org.lwjgl.system.linux.XCirculateEvent
from pyquantum_helper import import_once as _import_once
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _Object
_Object = _Object
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
from builtins import type
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import org.lwjgl.system.linux.XCirculateEvent as _XCirculateEvent
_XCirculateEvent = _XCirculateEvent
import org.lwjgl.system.linux.XCirculateEvent as _XCirculateEvent_Buffer
_Buffer = _XCirculateEvent_Buffer.Buffer
import java.lang.Boolean as _boolean
import java.lang.Integer as _int
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class XCirculateEvent():
    """org.lwjgl.system.linux.XCirculateEvent"""
 
    @staticmethod
    def _wrap(java_value: _XCirculateEvent) -> 'XCirculateEvent':
        return XCirculateEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _XCirculateEvent):
        """
        Dynamic initializer for XCirculateEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_XCirculateEvent__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_XCirculateEvent__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XCirculateEvent.window()"""
        return int._wrap(super(XCirculateEvent, self).window())

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCirculateEvent.ndisplay(long,long)"""
        _XCirculateEvent.ndisplay(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def nplace(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XCirculateEvent.nplace(long)"""
        return int._wrap(_XCirculateEvent.nplace(_long.valueOf(arg0)))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XCirculateEvent.nserial(long)"""
        return int._wrap(_XCirculateEvent.nserial(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def create() -> 'XCirculateEvent':
        """public static org.lwjgl.system.linux.XCirculateEvent org.lwjgl.system.linux.XCirculateEvent.create()"""
        return XCirculateEvent._wrap(_XCirculateEvent.create())

    @overload
    def window(self, arg0: int) -> 'XCirculateEvent':
        """public org.lwjgl.system.linux.XCirculateEvent org.lwjgl.system.linux.XCirculateEvent.window(long)"""
        return 'XCirculateEvent'._wrap(super(_XCirculateEvent, self).window(_long.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XCirculateEvent$Buffer org.lwjgl.system.linux.XCirculateEvent.mallocStack(int)"""
        return Buffer._wrap(_XCirculateEvent.mallocStack(_int.valueOf(arg0)))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XCirculateEvent.serial()"""
        return int._wrap(super(XCirculateEvent, self).serial())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XCirculateEvent.sizeof()"""
        return int._wrap(super(XCirculateEvent, self).sizeof())

    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XCirculateEvent.nsend_event(long)"""
        return int._wrap(_XCirculateEvent.nsend_event(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XCirculateEvent$Buffer org.lwjgl.system.linux.XCirculateEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XCirculateEvent.mallocStack(_int.valueOf(arg0), arg1))

    @overload
    def event(self, arg0: int) -> 'XCirculateEvent':
        """public org.lwjgl.system.linux.XCirculateEvent org.lwjgl.system.linux.XCirculateEvent.event(long)"""
        return 'XCirculateEvent'._wrap(super(_XCirculateEvent, self).event(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCirculateEvent.nserial(long,long)"""
        _XCirculateEvent.nserial(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def mallocStack() -> 'XCirculateEvent':
        """public static org.lwjgl.system.linux.XCirculateEvent org.lwjgl.system.linux.XCirculateEvent.mallocStack()"""
        return XCirculateEvent._wrap(_XCirculateEvent.mallocStack())

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XCirculateEvent':
        """public static org.lwjgl.system.linux.XCirculateEvent org.lwjgl.system.linux.XCirculateEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XCirculateEvent._wrap(_XCirculateEvent.mallocStack(arg0))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        _Struct.validate(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), arg3)

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XCirculateEvent$Buffer org.lwjgl.system.linux.XCirculateEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XCirculateEvent.calloc(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XCirculateEvent$Buffer org.lwjgl.system.linux.XCirculateEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XCirculateEvent.malloc(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def create(arg0: int) -> 'XCirculateEvent':
        """public static org.lwjgl.system.linux.XCirculateEvent org.lwjgl.system.linux.XCirculateEvent.create(long)"""
        return XCirculateEvent._wrap(_XCirculateEvent.create(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XCirculateEvent$Buffer org.lwjgl.system.linux.XCirculateEvent.malloc(int)"""
        return Buffer._wrap(_XCirculateEvent.malloc(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def nwindow(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCirculateEvent.nwindow(long,long)"""
        _XCirculateEvent.nwindow(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XCirculateEvent':
        """public static org.lwjgl.system.linux.XCirculateEvent org.lwjgl.system.linux.XCirculateEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XCirculateEvent._wrap(_XCirculateEvent.calloc(arg0))

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XCirculateEvent$Buffer org.lwjgl.system.linux.XCirculateEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XCirculateEvent.callocStack(_int.valueOf(arg0), arg1))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XCirculateEvent.ntype(long)"""
        return int._wrap(_XCirculateEvent.ntype(_long.valueOf(arg0)))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).address())

    @staticmethod
    @overload
    def callocStack() -> 'XCirculateEvent':
        """public static org.lwjgl.system.linux.XCirculateEvent org.lwjgl.system.linux.XCirculateEvent.callocStack()"""
        return XCirculateEvent._wrap(_XCirculateEvent.callocStack())

    @staticmethod
    @overload
    def nwindow(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XCirculateEvent.nwindow(long)"""
        return int._wrap(_XCirculateEvent.nwindow(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XCirculateEvent':
        """public static org.lwjgl.system.linux.XCirculateEvent org.lwjgl.system.linux.XCirculateEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XCirculateEvent._wrap(_XCirculateEvent.malloc(arg0))

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCirculateEvent.ntype(long,int)"""
        _XCirculateEvent.ntype(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def nevent(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCirculateEvent.nevent(long,long)"""
        _XCirculateEvent.nevent(_long.valueOf(arg0), _long.valueOf(arg1))

    @overload
    def set(self, arg0: 'XCirculateEvent') -> 'XCirculateEvent':
        """public org.lwjgl.system.linux.XCirculateEvent org.lwjgl.system.linux.XCirculateEvent.set(org.lwjgl.system.linux.XCirculateEvent)"""
        return 'XCirculateEvent'._wrap(super(_XCirculateEvent, self).set(arg0))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XCirculateEvent.send_event()"""
        return bool._wrap(super(XCirculateEvent, self).send_event())

    @overload
    def serial(self, arg0: int) -> 'XCirculateEvent':
        """public org.lwjgl.system.linux.XCirculateEvent org.lwjgl.system.linux.XCirculateEvent.serial(long)"""
        return 'XCirculateEvent'._wrap(super(_XCirculateEvent, self).serial(_long.valueOf(arg0)))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def event(self) -> int:
        """public long org.lwjgl.system.linux.XCirculateEvent.event()"""
        return int._wrap(super(XCirculateEvent, self).event())

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XCirculateEvent$Buffer org.lwjgl.system.linux.XCirculateEvent.callocStack(int)"""
        return Buffer._wrap(_XCirculateEvent.callocStack(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XCirculateEvent$Buffer org.lwjgl.system.linux.XCirculateEvent.create(long,int)"""
        return Buffer._wrap(_XCirculateEvent.create(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XCirculateEvent$Buffer org.lwjgl.system.linux.XCirculateEvent.create(int)"""
        return Buffer._wrap(_XCirculateEvent.create(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XCirculateEvent':
        """public static org.lwjgl.system.linux.XCirculateEvent org.lwjgl.system.linux.XCirculateEvent.createSafe(long)"""
        return XCirculateEvent._wrap(_XCirculateEvent.createSafe(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XCirculateEvent':
        """public static org.lwjgl.system.linux.XCirculateEvent org.lwjgl.system.linux.XCirculateEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XCirculateEvent._wrap(_XCirculateEvent.callocStack(arg0))

    @overload
    def type(self, arg0: int) -> 'XCirculateEvent':
        """public org.lwjgl.system.linux.XCirculateEvent org.lwjgl.system.linux.XCirculateEvent.type(int)"""
        return 'XCirculateEvent'._wrap(super(_XCirculateEvent, self).type(_int.valueOf(arg0)))

    @overload
    def place(self) -> int:
        """public int org.lwjgl.system.linux.XCirculateEvent.place()"""
        return int._wrap(super(XCirculateEvent, self).place())

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XCirculateEvent.ndisplay(long)"""
        return int._wrap(_XCirculateEvent.ndisplay(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCirculateEvent.nsend_event(long,int)"""
        _XCirculateEvent.nsend_event(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XCirculateEvent$Buffer org.lwjgl.system.linux.XCirculateEvent.calloc(int)"""
        return Buffer._wrap(_XCirculateEvent.calloc(_int.valueOf(arg0)))

    @overload
    def place(self, arg0: int) -> 'XCirculateEvent':
        """public org.lwjgl.system.linux.XCirculateEvent org.lwjgl.system.linux.XCirculateEvent.place(int)"""
        return 'XCirculateEvent'._wrap(super(_XCirculateEvent, self).place(_int.valueOf(arg0)))

    @overload
    def display(self, arg0: int) -> 'XCirculateEvent':
        """public org.lwjgl.system.linux.XCirculateEvent org.lwjgl.system.linux.XCirculateEvent.display(long)"""
        return 'XCirculateEvent'._wrap(super(_XCirculateEvent, self).display(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XCirculateEvent$Buffer org.lwjgl.system.linux.XCirculateEvent.createSafe(long,int)"""
        return Buffer._wrap(_XCirculateEvent.createSafe(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XCirculateEvent.validate(long)"""
        _XCirculateEvent.validate(_long.valueOf(arg0))

    @staticmethod
    @overload
    def malloc() -> 'XCirculateEvent':
        """public static org.lwjgl.system.linux.XCirculateEvent org.lwjgl.system.linux.XCirculateEvent.malloc()"""
        return XCirculateEvent._wrap(_XCirculateEvent.malloc())

    @overload
    def send_event(self, arg0: bool) -> 'XCirculateEvent':
        """public org.lwjgl.system.linux.XCirculateEvent org.lwjgl.system.linux.XCirculateEvent.send_event(boolean)"""
        return 'XCirculateEvent'._wrap(super(_XCirculateEvent, self).send_event(_boolean.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XCirculateEvent.display()"""
        return int._wrap(super(XCirculateEvent, self).display())

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XCirculateEvent.type()"""
        return int._wrap(super(XCirculateEvent, self).type())

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int, arg5: int, arg6: int) -> 'XCirculateEvent':
        """public org.lwjgl.system.linux.XCirculateEvent org.lwjgl.system.linux.XCirculateEvent.set(int,long,boolean,long,long,long,int)"""
        return 'XCirculateEvent'._wrap(super(_XCirculateEvent, self).set(_int.valueOf(arg0), _long.valueOf(arg1), _boolean.valueOf(arg2), _long.valueOf(arg3), _long.valueOf(arg4), _long.valueOf(arg5), _int.valueOf(arg6)))

    @staticmethod
    @overload
    def nevent(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XCirculateEvent.nevent(long)"""
        return int._wrap(_XCirculateEvent.nevent(_long.valueOf(arg0)))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @staticmethod
    @overload
    def nplace(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCirculateEvent.nplace(long,int)"""
        _XCirculateEvent.nplace(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool._wrap(super(_pyglsystem.Struct, self).isNull(_int.valueOf(arg0)))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XCirculateEvent(java.nio.ByteBuffer)"""
        val = _XCirculateEvent(arg0)
        self.__wrapper = val

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str._wrap(super(pyglsystem.Pointer$Default, self).toString())

    @staticmethod
    @overload
    def calloc() -> 'XCirculateEvent':
        """public static org.lwjgl.system.linux.XCirculateEvent org.lwjgl.system.linux.XCirculateEvent.calloc()"""
        return XCirculateEvent._wrap(_XCirculateEvent.calloc()) 
 
 
# CLASS: org.lwjgl.system.linux.XEvent$Buffer
from pyquantum_helper import import_once as _import_once
import org.lwjgl.system.linux.XAnyEvent as _XAnyEvent
_XAnyEvent = _XAnyEvent
import org.lwjgl.system.linux.XCreateWindowEvent as _XCreateWindowEvent
_XCreateWindowEvent = _XCreateWindowEvent
import org.lwjgl.system.linux.XSelectionClearEvent as _XSelectionClearEvent
_XSelectionClearEvent = _XSelectionClearEvent
import org.lwjgl.system.linux.XClientMessageEvent as _XClientMessageEvent
_XClientMessageEvent = _XClientMessageEvent
import org.lwjgl.system.linux.XKeymapEvent as _XKeymapEvent
_XKeymapEvent = _XKeymapEvent
import org.lwjgl.system.linux.XUnmapEvent as _XUnmapEvent
_XUnmapEvent = _XUnmapEvent
import org.lwjgl.system.linux.XResizeRequestEvent as _XResizeRequestEvent
_XResizeRequestEvent = _XResizeRequestEvent
import org.lwjgl.system.linux.XGravityEvent as _XGravityEvent
_XGravityEvent = _XGravityEvent
import org.lwjgl.system.linux.XCrossingEvent as _XCrossingEvent
_XCrossingEvent = _XCrossingEvent
import java.util.Spliterator as Spliterator
import org.lwjgl.system.linux.XMappingEvent as _XMappingEvent
_XMappingEvent = _XMappingEvent
import org.lwjgl.system.linux.XPropertyEvent as _XPropertyEvent
_XPropertyEvent = _XPropertyEvent
import org.lwjgl.system.linux.XSelectionRequestEvent as _XSelectionRequestEvent
_XSelectionRequestEvent = _XSelectionRequestEvent
import org.lwjgl.system.linux.XButtonEvent as _XButtonEvent
_XButtonEvent = _XButtonEvent
import org.lwjgl.system.linux.XFocusChangeEvent as _XFocusChangeEvent
_XFocusChangeEvent = _XFocusChangeEvent
import org.lwjgl.system.StructBuffer as _StructBuffer
_StructBuffer = _StructBuffer
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import org.lwjgl.system.linux.XMotionEvent as _XMotionEvent
_XMotionEvent = _XMotionEvent
import java.util.Iterator as _Iterator
_Iterator = _Iterator
import org.lwjgl.system.linux.XDestroyWindowEvent as _XDestroyWindowEvent
_XDestroyWindowEvent = _XDestroyWindowEvent
from builtins import bool
import org.lwjgl.system.linux.XEvent as _XEvent_Buffer
_Buffer = _XEvent_Buffer.Buffer
import org.lwjgl.system.linux.XMapRequestEvent as _XMapRequestEvent
_XMapRequestEvent = _XMapRequestEvent
import org.lwjgl.system.linux.XColormapEvent as _XColormapEvent
_XColormapEvent = _XColormapEvent
import java.lang.Object as _object
import java.util.Spliterator as _Spliterator
_Spliterator = _Spliterator
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import org.lwjgl.system.linux.XSelectionEvent as _XSelectionEvent
_XSelectionEvent = _XSelectionEvent
import org.lwjgl.system.linux.XReparentEvent as _XReparentEvent
_XReparentEvent = _XReparentEvent
import java.util.stream.Stream as _Stream
_Stream = _Stream
import org.lwjgl.system.linux.XConfigureEvent as _XConfigureEvent
_XConfigureEvent = _XConfigureEvent
import org.lwjgl.system.linux.XNoExposeEvent as _XNoExposeEvent
_XNoExposeEvent = _XNoExposeEvent
import org.lwjgl.system.linux.XExposeEvent as _XExposeEvent
_XExposeEvent = _XExposeEvent
from builtins import int
import java.lang.Class as _Class
_Class = _Class
import java.lang.Object as _Object
_Object = _Object
import org.lwjgl.system.linux.XGenericEvent as _XGenericEvent
_XGenericEvent = _XGenericEvent
from builtins import type
import org.lwjgl.system.CustomBuffer as _CustomBuffer
_CustomBuffer = _CustomBuffer
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import java.util.function.Consumer as Consumer
import org.lwjgl.system.linux.XMapEvent as _XMapEvent
_XMapEvent = _XMapEvent
import org.lwjgl.system.linux.XConfigureRequestEvent as _XConfigureRequestEvent
_XConfigureRequestEvent = _XConfigureRequestEvent
import org.lwjgl.system.linux.XGraphicsExposeEvent as _XGraphicsExposeEvent
_XGraphicsExposeEvent = _XGraphicsExposeEvent
import org.lwjgl.system.linux.XVisibilityEvent as _XVisibilityEvent
_XVisibilityEvent = _XVisibilityEvent
from builtins import str
from pyquantum_helper import override
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
import org.lwjgl.system.linux.XGenericEventCookie as _XGenericEventCookie
_XGenericEventCookie = _XGenericEventCookie
import org.lwjgl.system.linux.XErrorEvent as _XErrorEvent
_XErrorEvent = _XErrorEvent
import org.lwjgl.system.linux.XCirculateEvent as _XCirculateEvent
_XCirculateEvent = _XCirculateEvent
import java.util.Iterator as Iterator
import java.lang.Integer as _int
import org.lwjgl.system.linux.XKeyEvent as _XKeyEvent
_XKeyEvent = _XKeyEvent
import org.lwjgl.system.linux.XCirculateRequestEvent as _XCirculateRequestEvent
_XCirculateRequestEvent = _XCirculateRequestEvent
import java.util.stream.Stream as Stream
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Long as _long
 
class Buffer():
    """org.lwjgl.system.linux.XEvent.Buffer"""
 
    @staticmethod
    def _wrap(java_value: _Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Buffer__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Buffer__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).limit(_int.valueOf(arg0)))

    @overload
    def xbutton(self) -> 'XButtonEvent':
        """public org.lwjgl.system.linux.XButtonEvent org.lwjgl.system.linux.XEvent$Buffer.xbutton()"""
        return 'XButtonEvent'._wrap(super(Buffer, self).xbutton())

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def xmap(self) -> 'XMapEvent':
        """public org.lwjgl.system.linux.XMapEvent org.lwjgl.system.linux.XEvent$Buffer.xmap()"""
        return 'XMapEvent'._wrap(super(Buffer, self).xmap())

    @overload
    def xconfigure(self) -> 'XConfigureEvent':
        """public org.lwjgl.system.linux.XConfigureEvent org.lwjgl.system.linux.XEvent$Buffer.xconfigure()"""
        return 'XConfigureEvent'._wrap(super(Buffer, self).xconfigure())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address())

    @overload
    def xfocus(self) -> 'XFocusChangeEvent':
        """public org.lwjgl.system.linux.XFocusChangeEvent org.lwjgl.system.linux.XEvent$Buffer.xfocus()"""
        return 'XFocusChangeEvent'._wrap(super(Buffer, self).xfocus())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def xcirculaterequest(self) -> 'XCirculateRequestEvent':
        """public org.lwjgl.system.linux.XCirculateRequestEvent org.lwjgl.system.linux.XEvent$Buffer.xcirculaterequest()"""
        return 'XCirculateRequestEvent'._wrap(super(Buffer, self).xcirculaterequest())

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str._wrap(super(pyglsystem.CustomBuffer, self).toString())

    @overload
    def xcookie(self) -> 'XGenericEventCookie':
        """public org.lwjgl.system.linux.XGenericEventCookie org.lwjgl.system.linux.XEvent$Buffer.xcookie()"""
        return 'XGenericEventCookie'._wrap(super(Buffer, self).xcookie())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int._wrap(super(_pyglsystem.CustomBuffer, self).address(_int.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).mark())

    @overload
    def xselectionrequest(self) -> 'XSelectionRequestEvent':
        """public org.lwjgl.system.linux.XSelectionRequestEvent org.lwjgl.system.linux.XEvent$Buffer.xselectionrequest()"""
        return 'XSelectionRequestEvent'._wrap(super(Buffer, self).xselectionrequest())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'._wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).stream())

    @overload
    def xreparent(self) -> 'XReparentEvent':
        """public org.lwjgl.system.linux.XReparentEvent org.lwjgl.system.linux.XEvent$Buffer.xreparent()"""
        return 'XReparentEvent'._wrap(super(Buffer, self).xreparent())

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).position(_int.valueOf(arg0)))

    @overload
    def xcolormap(self) -> 'XColormapEvent':
        """public org.lwjgl.system.linux.XColormapEvent org.lwjgl.system.linux.XEvent$Buffer.xcolormap()"""
        return 'XColormapEvent'._wrap(super(Buffer, self).xcolormap())

    @overload
    def xmapping(self) -> 'XMappingEvent':
        """public org.lwjgl.system.linux.XMappingEvent org.lwjgl.system.linux.XEvent$Buffer.xmapping()"""
        return 'XMappingEvent'._wrap(super(Buffer, self).xmapping())

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XEvent$Buffer(long,int)"""
        val = _Buffer(_long.valueOf(arg0), _int.valueOf(arg1))
        self.__wrapper = val

    @overload
    def xany(self) -> 'XAnyEvent':
        """public org.lwjgl.system.linux.XAnyEvent org.lwjgl.system.linux.XEvent$Buffer.xany()"""
        return 'XAnyEvent'._wrap(super(Buffer, self).xany())

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'._wrap(super(pyglsystem.StructBuffer, self).get())

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XEvent$Buffer.type()"""
        return int._wrap(super(Buffer, self).type())

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def xgraphicsexpose(self) -> 'XGraphicsExposeEvent':
        """public org.lwjgl.system.linux.XGraphicsExposeEvent org.lwjgl.system.linux.XEvent$Buffer.xgraphicsexpose()"""
        return 'XGraphicsExposeEvent'._wrap(super(Buffer, self).xgraphicsexpose())

    @overload
    def xcrossing(self) -> 'XCrossingEvent':
        """public org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XEvent$Buffer.xcrossing()"""
        return 'XCrossingEvent'._wrap(super(Buffer, self).xcrossing())

    @overload
    def xexpose(self) -> 'XExposeEvent':
        """public org.lwjgl.system.linux.XExposeEvent org.lwjgl.system.linux.XEvent$Buffer.xexpose()"""
        return 'XExposeEvent'._wrap(super(Buffer, self).xexpose())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def xconfigurerequest(self) -> 'XConfigureRequestEvent':
        """public org.lwjgl.system.linux.XConfigureRequestEvent org.lwjgl.system.linux.XEvent$Buffer.xconfigurerequest()"""
        return 'XConfigureRequestEvent'._wrap(super(Buffer, self).xconfigurerequest())

    @overload
    def xmaprequest(self) -> 'XMapRequestEvent':
        """public org.lwjgl.system.linux.XMapRequestEvent org.lwjgl.system.linux.XEvent$Buffer.xmaprequest()"""
        return 'XMapRequestEvent'._wrap(super(Buffer, self).xmaprequest())

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def xmotion(self) -> 'XMotionEvent':
        """public org.lwjgl.system.linux.XMotionEvent org.lwjgl.system.linux.XEvent$Buffer.xmotion()"""
        return 'XMotionEvent'._wrap(super(Buffer, self).xmotion())

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def xcreatewindow(self) -> 'XCreateWindowEvent':
        """public org.lwjgl.system.linux.XCreateWindowEvent org.lwjgl.system.linux.XEvent$Buffer.xcreatewindow()"""
        return 'XCreateWindowEvent'._wrap(super(Buffer, self).xcreatewindow())

    @overload
    def xunmap(self) -> 'XUnmapEvent':
        """public org.lwjgl.system.linux.XUnmapEvent org.lwjgl.system.linux.XEvent$Buffer.xunmap()"""
        return 'XUnmapEvent'._wrap(super(Buffer, self).xunmap())

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(arg0))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def xerror(self) -> 'XErrorEvent':
        """public org.lwjgl.system.linux.XErrorEvent org.lwjgl.system.linux.XEvent$Buffer.xerror()"""
        return 'XErrorEvent'._wrap(super(Buffer, self).xerror())

    @overload
    def xnoexpose(self) -> 'XNoExposeEvent':
        """public org.lwjgl.system.linux.XNoExposeEvent org.lwjgl.system.linux.XEvent$Buffer.xnoexpose()"""
        return 'XNoExposeEvent'._wrap(super(Buffer, self).xnoexpose())

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'._wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def xkey(self) -> 'XKeyEvent':
        """public org.lwjgl.system.linux.XKeyEvent org.lwjgl.system.linux.XEvent$Buffer.xkey()"""
        return 'XKeyEvent'._wrap(super(Buffer, self).xkey())

    @overload
    def xclient(self) -> 'XClientMessageEvent':
        """public org.lwjgl.system.linux.XClientMessageEvent org.lwjgl.system.linux.XEvent$Buffer.xclient()"""
        return 'XClientMessageEvent'._wrap(super(Buffer, self).xclient())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(arg0))

    @overload
    def xproperty(self) -> 'XPropertyEvent':
        """public org.lwjgl.system.linux.XPropertyEvent org.lwjgl.system.linux.XEvent$Buffer.xproperty()"""
        return 'XPropertyEvent'._wrap(super(Buffer, self).xproperty())

    @overload
    def xselection(self) -> 'XSelectionEvent':
        """public org.lwjgl.system.linux.XSelectionEvent org.lwjgl.system.linux.XEvent$Buffer.xselection()"""
        return 'XSelectionEvent'._wrap(super(Buffer, self).xselection())

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).slice())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).slice(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def xcirculate(self) -> 'XCirculateEvent':
        """public org.lwjgl.system.linux.XCirculateEvent org.lwjgl.system.linux.XEvent$Buffer.xcirculate()"""
        return 'XCirculateEvent'._wrap(super(Buffer, self).xcirculate())

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0), arg1))

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(_int.valueOf(arg0), arg1))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).clear())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool._wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).flip())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int._wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XEvent$Buffer(java.nio.ByteBuffer)"""
        val = _Buffer(arg0)
        self.__wrapper = val

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(_int.valueOf(arg0), arg1))

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def xvisibility(self) -> 'XVisibilityEvent':
        """public org.lwjgl.system.linux.XVisibilityEvent org.lwjgl.system.linux.XEvent$Buffer.xvisibility()"""
        return 'XVisibilityEvent'._wrap(super(Buffer, self).xvisibility())

    @overload
    def xdestroywindow(self) -> 'XDestroyWindowEvent':
        """public org.lwjgl.system.linux.XDestroyWindowEvent org.lwjgl.system.linux.XEvent$Buffer.xdestroywindow()"""
        return 'XDestroyWindowEvent'._wrap(super(Buffer, self).xdestroywindow())

    @overload
    def xgeneric(self) -> 'XGenericEvent':
        """public org.lwjgl.system.linux.XGenericEvent org.lwjgl.system.linux.XEvent$Buffer.xgeneric()"""
        return 'XGenericEvent'._wrap(super(Buffer, self).xgeneric())

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(_pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @overload
    def xresizerequest(self) -> 'XResizeRequestEvent':
        """public org.lwjgl.system.linux.XResizeRequestEvent org.lwjgl.system.linux.XEvent$Buffer.xresizerequest()"""
        return 'XResizeRequestEvent'._wrap(super(Buffer, self).xresizerequest())

    @overload
    def xselectionclear(self) -> 'XSelectionClearEvent':
        """public org.lwjgl.system.linux.XSelectionClearEvent org.lwjgl.system.linux.XEvent$Buffer.xselectionclear()"""
        return 'XSelectionClearEvent'._wrap(super(Buffer, self).xselectionclear())

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def xgravity(self) -> 'XGravityEvent':
        """public org.lwjgl.system.linux.XGravityEvent org.lwjgl.system.linux.XEvent$Buffer.xgravity()"""
        return 'XGravityEvent'._wrap(super(Buffer, self).xgravity())

    @overload
    def xkeymap(self) -> 'XKeymapEvent':
        """public org.lwjgl.system.linux.XKeymapEvent org.lwjgl.system.linux.XEvent$Buffer.xkeymap()"""
        return 'XKeymapEvent'._wrap(super(Buffer, self).xkeymap())

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(arg0)) 
 
 
# CLASS: org.lwjgl.system.linux.XAnyEvent
from pyquantum_helper import import_once as _import_once
from builtins import str
import org.lwjgl.system.linux.XAnyEvent as _XAnyEvent
_XAnyEvent = _XAnyEvent
from pyquantum_helper import override
import java.lang.Object as _Object
_Object = _Object
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
from builtins import type
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.lang.Boolean as _boolean
import java.lang.Integer as _int
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
import java.lang.Long as _long
from builtins import int
import org.lwjgl.system.linux.XAnyEvent as _XAnyEvent_Buffer
_Buffer = _XAnyEvent_Buffer.Buffer
import java.lang.Class as _Class
_Class = _Class
 
class XAnyEvent():
    """org.lwjgl.system.linux.XAnyEvent"""
 
    @staticmethod
    def _wrap(java_value: _XAnyEvent) -> 'XAnyEvent':
        return XAnyEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _XAnyEvent):
        """
        Dynamic initializer for XAnyEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_XAnyEvent__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_XAnyEvent__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XAnyEvent.sizeof()"""
        return int._wrap(super(XAnyEvent, self).sizeof())

    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XAnyEvent.nsend_event(long)"""
        return int._wrap(_XAnyEvent.nsend_event(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XAnyEvent$Buffer org.lwjgl.system.linux.XAnyEvent.createSafe(long,int)"""
        return Buffer._wrap(_XAnyEvent.createSafe(_long.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XAnyEvent.send_event()"""
        return bool._wrap(super(XAnyEvent, self).send_event())

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XAnyEvent.display()"""
        return int._wrap(super(XAnyEvent, self).display())

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XAnyEvent.window()"""
        return int._wrap(super(XAnyEvent, self).window())

    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XAnyEvent.nsend_event(long,int)"""
        _XAnyEvent.nsend_event(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XAnyEvent$Buffer org.lwjgl.system.linux.XAnyEvent.calloc(int)"""
        return Buffer._wrap(_XAnyEvent.calloc(_int.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @staticmethod
    @overload
    def nwindow(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XAnyEvent.nwindow(long,long)"""
        _XAnyEvent.nwindow(_long.valueOf(arg0), _long.valueOf(arg1))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def display(self, arg0: int) -> 'XAnyEvent':
        """public org.lwjgl.system.linux.XAnyEvent org.lwjgl.system.linux.XAnyEvent.display(long)"""
        return 'XAnyEvent'._wrap(super(_XAnyEvent, self).display(_long.valueOf(arg0)))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XAnyEvent.type()"""
        return int._wrap(super(XAnyEvent, self).type())

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XAnyEvent$Buffer org.lwjgl.system.linux.XAnyEvent.create(long,int)"""
        return Buffer._wrap(_XAnyEvent.create(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XAnyEvent$Buffer org.lwjgl.system.linux.XAnyEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XAnyEvent.mallocStack(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def malloc() -> 'XAnyEvent':
        """public static org.lwjgl.system.linux.XAnyEvent org.lwjgl.system.linux.XAnyEvent.malloc()"""
        return XAnyEvent._wrap(_XAnyEvent.malloc())

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XAnyEvent$Buffer org.lwjgl.system.linux.XAnyEvent.mallocStack(int)"""
        return Buffer._wrap(_XAnyEvent.mallocStack(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XAnyEvent.nserial(long,long)"""
        _XAnyEvent.nserial(_long.valueOf(arg0), _long.valueOf(arg1))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XAnyEvent':
        """public static org.lwjgl.system.linux.XAnyEvent org.lwjgl.system.linux.XAnyEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XAnyEvent._wrap(_XAnyEvent.callocStack(arg0))

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        _Struct.validate(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), arg3)

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @overload
    def window(self, arg0: int) -> 'XAnyEvent':
        """public org.lwjgl.system.linux.XAnyEvent org.lwjgl.system.linux.XAnyEvent.window(long)"""
        return 'XAnyEvent'._wrap(super(_XAnyEvent, self).window(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XAnyEvent$Buffer org.lwjgl.system.linux.XAnyEvent.create(int)"""
        return Buffer._wrap(_XAnyEvent.create(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XAnyEvent.nserial(long)"""
        return int._wrap(_XAnyEvent.nserial(_long.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def create(arg0: int) -> 'XAnyEvent':
        """public static org.lwjgl.system.linux.XAnyEvent org.lwjgl.system.linux.XAnyEvent.create(long)"""
        return XAnyEvent._wrap(_XAnyEvent.create(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XAnyEvent':
        """public static org.lwjgl.system.linux.XAnyEvent org.lwjgl.system.linux.XAnyEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XAnyEvent._wrap(_XAnyEvent.malloc(arg0))

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XAnyEvent.ndisplay(long)"""
        return int._wrap(_XAnyEvent.ndisplay(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XAnyEvent.validate(long)"""
        _XAnyEvent.validate(_long.valueOf(arg0))

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XAnyEvent.ntype(long,int)"""
        _XAnyEvent.ntype(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).address())

    @overload
    def set(self, arg0: 'XAnyEvent') -> 'XAnyEvent':
        """public org.lwjgl.system.linux.XAnyEvent org.lwjgl.system.linux.XAnyEvent.set(org.lwjgl.system.linux.XAnyEvent)"""
        return 'XAnyEvent'._wrap(super(_XAnyEvent, self).set(arg0))

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XAnyEvent$Buffer org.lwjgl.system.linux.XAnyEvent.malloc(int)"""
        return Buffer._wrap(_XAnyEvent.malloc(_int.valueOf(arg0)))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XAnyEvent.serial()"""
        return int._wrap(super(XAnyEvent, self).serial())

    @staticmethod
    @overload
    def create() -> 'XAnyEvent':
        """public static org.lwjgl.system.linux.XAnyEvent org.lwjgl.system.linux.XAnyEvent.create()"""
        return XAnyEvent._wrap(_XAnyEvent.create())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XAnyEvent.ntype(long)"""
        return int._wrap(_XAnyEvent.ntype(_long.valueOf(arg0)))

    @overload
    def serial(self, arg0: int) -> 'XAnyEvent':
        """public org.lwjgl.system.linux.XAnyEvent org.lwjgl.system.linux.XAnyEvent.serial(long)"""
        return 'XAnyEvent'._wrap(super(_XAnyEvent, self).serial(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack() -> 'XAnyEvent':
        """public static org.lwjgl.system.linux.XAnyEvent org.lwjgl.system.linux.XAnyEvent.mallocStack()"""
        return XAnyEvent._wrap(_XAnyEvent.mallocStack())

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XAnyEvent':
        """public static org.lwjgl.system.linux.XAnyEvent org.lwjgl.system.linux.XAnyEvent.createSafe(long)"""
        return XAnyEvent._wrap(_XAnyEvent.createSafe(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack() -> 'XAnyEvent':
        """public static org.lwjgl.system.linux.XAnyEvent org.lwjgl.system.linux.XAnyEvent.callocStack()"""
        return XAnyEvent._wrap(_XAnyEvent.callocStack())

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XAnyEvent$Buffer org.lwjgl.system.linux.XAnyEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XAnyEvent.calloc(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XAnyEvent.ndisplay(long,long)"""
        _XAnyEvent.ndisplay(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def nwindow(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XAnyEvent.nwindow(long)"""
        return int._wrap(_XAnyEvent.nwindow(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XAnyEvent$Buffer org.lwjgl.system.linux.XAnyEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XAnyEvent.malloc(_int.valueOf(arg0), arg1))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XAnyEvent':
        """public static org.lwjgl.system.linux.XAnyEvent org.lwjgl.system.linux.XAnyEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XAnyEvent._wrap(_XAnyEvent.mallocStack(arg0))

    @overload
    def send_event(self, arg0: bool) -> 'XAnyEvent':
        """public org.lwjgl.system.linux.XAnyEvent org.lwjgl.system.linux.XAnyEvent.send_event(boolean)"""
        return 'XAnyEvent'._wrap(super(_XAnyEvent, self).send_event(_boolean.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XAnyEvent':
        """public static org.lwjgl.system.linux.XAnyEvent org.lwjgl.system.linux.XAnyEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XAnyEvent._wrap(_XAnyEvent.calloc(arg0))

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XAnyEvent$Buffer org.lwjgl.system.linux.XAnyEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XAnyEvent.callocStack(_int.valueOf(arg0), arg1))

    @overload
    def type(self, arg0: int) -> 'XAnyEvent':
        """public org.lwjgl.system.linux.XAnyEvent org.lwjgl.system.linux.XAnyEvent.type(int)"""
        return 'XAnyEvent'._wrap(super(_XAnyEvent, self).type(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc() -> 'XAnyEvent':
        """public static org.lwjgl.system.linux.XAnyEvent org.lwjgl.system.linux.XAnyEvent.calloc()"""
        return XAnyEvent._wrap(_XAnyEvent.calloc())

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XAnyEvent$Buffer org.lwjgl.system.linux.XAnyEvent.callocStack(int)"""
        return Buffer._wrap(_XAnyEvent.callocStack(_int.valueOf(arg0)))

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int) -> 'XAnyEvent':
        """public org.lwjgl.system.linux.XAnyEvent org.lwjgl.system.linux.XAnyEvent.set(int,long,boolean,long,long)"""
        return 'XAnyEvent'._wrap(super(_XAnyEvent, self).set(_int.valueOf(arg0), _long.valueOf(arg1), _boolean.valueOf(arg2), _long.valueOf(arg3), _long.valueOf(arg4)))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool._wrap(super(_pyglsystem.Struct, self).isNull(_int.valueOf(arg0)))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XAnyEvent(java.nio.ByteBuffer)"""
        val = _XAnyEvent(arg0)
        self.__wrapper = val

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str._wrap(super(pyglsystem.Pointer$Default, self).toString()) 
 
 
# CLASS: org.lwjgl.system.linux.XGenericEventCookie
from pyquantum_helper import import_once as _import_once
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _Object
_Object = _Object
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
from builtins import type
import org.lwjgl.system.linux.XGenericEventCookie as _XGenericEventCookie
_XGenericEventCookie = _XGenericEventCookie
import java.nio.ByteBuffer as _ByteBuffer
_ByteBuffer = _ByteBuffer
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.lang.Boolean as _boolean
import java.lang.Integer as _int
import org.lwjgl.system.linux.XGenericEventCookie as _XGenericEventCookie_Buffer
_Buffer = _XGenericEventCookie_Buffer.Buffer
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class XGenericEventCookie():
    """org.lwjgl.system.linux.XGenericEventCookie"""
 
    @staticmethod
    def _wrap(java_value: _XGenericEventCookie) -> 'XGenericEventCookie':
        return XGenericEventCookie(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _XGenericEventCookie):
        """
        Dynamic initializer for XGenericEventCookie.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_XGenericEventCookie__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_XGenericEventCookie__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XGenericEventCookie$Buffer org.lwjgl.system.linux.XGenericEventCookie.mallocStack(int)"""
        return Buffer._wrap(_XGenericEventCookie.mallocStack(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc() -> 'XGenericEventCookie':
        """public static org.lwjgl.system.linux.XGenericEventCookie org.lwjgl.system.linux.XGenericEventCookie.malloc()"""
        return XGenericEventCookie._wrap(_XGenericEventCookie.malloc())

    @overload
    def extension(self, arg0: int) -> 'XGenericEventCookie':
        """public org.lwjgl.system.linux.XGenericEventCookie org.lwjgl.system.linux.XGenericEventCookie.extension(int)"""
        return 'XGenericEventCookie'._wrap(super(_XGenericEventCookie, self).extension(_int.valueOf(arg0)))

    @overload
    def display(self, arg0: int) -> 'XGenericEventCookie':
        """public org.lwjgl.system.linux.XGenericEventCookie org.lwjgl.system.linux.XGenericEventCookie.display(long)"""
        return 'XGenericEventCookie'._wrap(super(_XGenericEventCookie, self).display(_long.valueOf(arg0)))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGenericEventCookie.ntype(long,int)"""
        _XGenericEventCookie.ntype(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XGenericEventCookie.serial()"""
        return int._wrap(super(XGenericEventCookie, self).serial())

    @staticmethod
    @overload
    def nextension(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XGenericEventCookie.nextension(long)"""
        return int._wrap(_XGenericEventCookie.nextension(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XGenericEventCookie$Buffer org.lwjgl.system.linux.XGenericEventCookie.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XGenericEventCookie.mallocStack(_int.valueOf(arg0), arg1))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XGenericEventCookie(java.nio.ByteBuffer)"""
        val = _XGenericEventCookie(arg0)
        self.__wrapper = val

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XGenericEventCookie.send_event()"""
        return bool._wrap(super(XGenericEventCookie, self).send_event())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def create() -> 'XGenericEventCookie':
        """public static org.lwjgl.system.linux.XGenericEventCookie org.lwjgl.system.linux.XGenericEventCookie.create()"""
        return XGenericEventCookie._wrap(_XGenericEventCookie.create())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def data(self, arg0: int) -> 'ByteBuffer':
        """public java.nio.ByteBuffer org.lwjgl.system.linux.XGenericEventCookie.data(int)"""
        return 'ByteBuffer'._wrap(super(_XGenericEventCookie, self).data(_int.valueOf(arg0)))

    @overload
    def type(self, arg0: int) -> 'XGenericEventCookie':
        """public org.lwjgl.system.linux.XGenericEventCookie org.lwjgl.system.linux.XGenericEventCookie.type(int)"""
        return 'XGenericEventCookie'._wrap(super(_XGenericEventCookie, self).type(_int.valueOf(arg0)))

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XGenericEventCookie.display()"""
        return int._wrap(super(XGenericEventCookie, self).display())

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XGenericEventCookie$Buffer org.lwjgl.system.linux.XGenericEventCookie.create(int)"""
        return Buffer._wrap(_XGenericEventCookie.create(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XGenericEventCookie.nserial(long)"""
        return int._wrap(_XGenericEventCookie.nserial(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def ncookie(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGenericEventCookie.ncookie(long,int)"""
        _XGenericEventCookie.ncookie(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        _Struct.validate(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), arg3)

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @overload
    def set(self, arg0: 'XGenericEventCookie') -> 'XGenericEventCookie':
        """public org.lwjgl.system.linux.XGenericEventCookie org.lwjgl.system.linux.XGenericEventCookie.set(org.lwjgl.system.linux.XGenericEventCookie)"""
        return 'XGenericEventCookie'._wrap(super(_XGenericEventCookie, self).set(arg0))

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int, arg5: int, arg6: int, arg7: 'ByteBuffer') -> 'XGenericEventCookie':
        """public org.lwjgl.system.linux.XGenericEventCookie org.lwjgl.system.linux.XGenericEventCookie.set(int,long,boolean,long,int,int,int,java.nio.ByteBuffer)"""
        return 'XGenericEventCookie'._wrap(super(_XGenericEventCookie, self).set(_int.valueOf(arg0), _long.valueOf(arg1), _boolean.valueOf(arg2), _long.valueOf(arg3), _int.valueOf(arg4), _int.valueOf(arg5), _int.valueOf(arg6), arg7))

    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XGenericEventCookie.nsend_event(long)"""
        return int._wrap(_XGenericEventCookie.nsend_event(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGenericEventCookie.ndisplay(long,long)"""
        _XGenericEventCookie.ndisplay(_long.valueOf(arg0), _long.valueOf(arg1))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XGenericEventCookie.sizeof()"""
        return int._wrap(super(XGenericEventCookie, self).sizeof())

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XGenericEventCookie.validate(long)"""
        _XGenericEventCookie.validate(_long.valueOf(arg0))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XGenericEventCookie':
        """public static org.lwjgl.system.linux.XGenericEventCookie org.lwjgl.system.linux.XGenericEventCookie.calloc(org.lwjgl.system.MemoryStack)"""
        return XGenericEventCookie._wrap(_XGenericEventCookie.calloc(arg0))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XGenericEventCookie$Buffer org.lwjgl.system.linux.XGenericEventCookie.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XGenericEventCookie.malloc(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def ncookie(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XGenericEventCookie.ncookie(long)"""
        return int._wrap(_XGenericEventCookie.ncookie(_long.valueOf(arg0)))

    @overload
    def evtype(self) -> int:
        """public int org.lwjgl.system.linux.XGenericEventCookie.evtype()"""
        return int._wrap(super(XGenericEventCookie, self).evtype())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).address())

    @overload
    def cookie(self) -> int:
        """public int org.lwjgl.system.linux.XGenericEventCookie.cookie()"""
        return int._wrap(super(XGenericEventCookie, self).cookie())

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XGenericEventCookie':
        """public static org.lwjgl.system.linux.XGenericEventCookie org.lwjgl.system.linux.XGenericEventCookie.createSafe(long)"""
        return XGenericEventCookie._wrap(_XGenericEventCookie.createSafe(_long.valueOf(arg0)))

    @overload
    def send_event(self, arg0: bool) -> 'XGenericEventCookie':
        """public org.lwjgl.system.linux.XGenericEventCookie org.lwjgl.system.linux.XGenericEventCookie.send_event(boolean)"""
        return 'XGenericEventCookie'._wrap(super(_XGenericEventCookie, self).send_event(_boolean.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XGenericEventCookie$Buffer org.lwjgl.system.linux.XGenericEventCookie.calloc(int)"""
        return Buffer._wrap(_XGenericEventCookie.calloc(_int.valueOf(arg0)))

    @overload
    def data(self, arg0: 'ByteBuffer') -> 'XGenericEventCookie':
        """public org.lwjgl.system.linux.XGenericEventCookie org.lwjgl.system.linux.XGenericEventCookie.data(java.nio.ByteBuffer)"""
        return 'XGenericEventCookie'._wrap(super(_XGenericEventCookie, self).data(arg0))

    @overload
    def cookie(self, arg0: int) -> 'XGenericEventCookie':
        """public org.lwjgl.system.linux.XGenericEventCookie org.lwjgl.system.linux.XGenericEventCookie.cookie(int)"""
        return 'XGenericEventCookie'._wrap(super(_XGenericEventCookie, self).cookie(_int.valueOf(arg0)))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @staticmethod
    @overload
    def nextension(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGenericEventCookie.nextension(long,int)"""
        _XGenericEventCookie.nextension(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XGenericEventCookie':
        """public static org.lwjgl.system.linux.XGenericEventCookie org.lwjgl.system.linux.XGenericEventCookie.malloc(org.lwjgl.system.MemoryStack)"""
        return XGenericEventCookie._wrap(_XGenericEventCookie.malloc(arg0))

    @staticmethod
    @overload
    def ndata(arg0: int, arg1: int) -> 'ByteBuffer':
        """public static java.nio.ByteBuffer org.lwjgl.system.linux.XGenericEventCookie.ndata(long,int)"""
        return ByteBuffer._wrap(_XGenericEventCookie.ndata(_long.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XGenericEventCookie.type()"""
        return int._wrap(super(XGenericEventCookie, self).type())

    @overload
    def extension(self) -> int:
        """public int org.lwjgl.system.linux.XGenericEventCookie.extension()"""
        return int._wrap(super(XGenericEventCookie, self).extension())

    @staticmethod
    @overload
    def nevtype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGenericEventCookie.nevtype(long,int)"""
        _XGenericEventCookie.nevtype(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def ndata(arg0: int, arg1: 'ByteBuffer'):
        """public static void org.lwjgl.system.linux.XGenericEventCookie.ndata(long,java.nio.ByteBuffer)"""
        _XGenericEventCookie.ndata(_long.valueOf(arg0), arg1)

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XGenericEventCookie$Buffer org.lwjgl.system.linux.XGenericEventCookie.create(long,int)"""
        return Buffer._wrap(_XGenericEventCookie.create(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def calloc() -> 'XGenericEventCookie':
        """public static org.lwjgl.system.linux.XGenericEventCookie org.lwjgl.system.linux.XGenericEventCookie.calloc()"""
        return XGenericEventCookie._wrap(_XGenericEventCookie.calloc())

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XGenericEventCookie.ntype(long)"""
        return int._wrap(_XGenericEventCookie.ntype(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack() -> 'XGenericEventCookie':
        """public static org.lwjgl.system.linux.XGenericEventCookie org.lwjgl.system.linux.XGenericEventCookie.mallocStack()"""
        return XGenericEventCookie._wrap(_XGenericEventCookie.mallocStack())

    @overload
    def evtype(self, arg0: int) -> 'XGenericEventCookie':
        """public org.lwjgl.system.linux.XGenericEventCookie org.lwjgl.system.linux.XGenericEventCookie.evtype(int)"""
        return 'XGenericEventCookie'._wrap(super(_XGenericEventCookie, self).evtype(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'XGenericEventCookie':
        """public static org.lwjgl.system.linux.XGenericEventCookie org.lwjgl.system.linux.XGenericEventCookie.create(long)"""
        return XGenericEventCookie._wrap(_XGenericEventCookie.create(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XGenericEventCookie':
        """public static org.lwjgl.system.linux.XGenericEventCookie org.lwjgl.system.linux.XGenericEventCookie.callocStack(org.lwjgl.system.MemoryStack)"""
        return XGenericEventCookie._wrap(_XGenericEventCookie.callocStack(arg0))

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XGenericEventCookie$Buffer org.lwjgl.system.linux.XGenericEventCookie.malloc(int)"""
        return Buffer._wrap(_XGenericEventCookie.malloc(_int.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XGenericEventCookie':
        """public static org.lwjgl.system.linux.XGenericEventCookie org.lwjgl.system.linux.XGenericEventCookie.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XGenericEventCookie._wrap(_XGenericEventCookie.mallocStack(arg0))

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGenericEventCookie.nserial(long,long)"""
        _XGenericEventCookie.nserial(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def nevtype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XGenericEventCookie.nevtype(long)"""
        return int._wrap(_XGenericEventCookie.nevtype(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XGenericEventCookie$Buffer org.lwjgl.system.linux.XGenericEventCookie.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XGenericEventCookie.callocStack(_int.valueOf(arg0), arg1))

    @overload
    def serial(self, arg0: int) -> 'XGenericEventCookie':
        """public org.lwjgl.system.linux.XGenericEventCookie org.lwjgl.system.linux.XGenericEventCookie.serial(long)"""
        return 'XGenericEventCookie'._wrap(super(_XGenericEventCookie, self).serial(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XGenericEventCookie$Buffer org.lwjgl.system.linux.XGenericEventCookie.createSafe(long,int)"""
        return Buffer._wrap(_XGenericEventCookie.createSafe(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XGenericEventCookie$Buffer org.lwjgl.system.linux.XGenericEventCookie.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XGenericEventCookie.calloc(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def callocStack() -> 'XGenericEventCookie':
        """public static org.lwjgl.system.linux.XGenericEventCookie org.lwjgl.system.linux.XGenericEventCookie.callocStack()"""
        return XGenericEventCookie._wrap(_XGenericEventCookie.callocStack())

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XGenericEventCookie.ndisplay(long)"""
        return int._wrap(_XGenericEventCookie.ndisplay(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XGenericEventCookie$Buffer org.lwjgl.system.linux.XGenericEventCookie.callocStack(int)"""
        return Buffer._wrap(_XGenericEventCookie.callocStack(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGenericEventCookie.nsend_event(long,int)"""
        _XGenericEventCookie.nsend_event(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool._wrap(super(_pyglsystem.Struct, self).isNull(_int.valueOf(arg0)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str._wrap(super(pyglsystem.Pointer$Default, self).toString()) 
 
 
# CLASS: org.lwjgl.system.linux.XFocusChangeEvent
from pyquantum_helper import import_once as _import_once
from builtins import str
import org.lwjgl.system.linux.XFocusChangeEvent as _XFocusChangeEvent_Buffer
_Buffer = _XFocusChangeEvent_Buffer.Buffer
from pyquantum_helper import override
import java.lang.Object as _Object
_Object = _Object
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
from builtins import type
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.lang.Boolean as _boolean
import java.lang.Integer as _int
import org.lwjgl.system.linux.XFocusChangeEvent as _XFocusChangeEvent
_XFocusChangeEvent = _XFocusChangeEvent
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class XFocusChangeEvent():
    """org.lwjgl.system.linux.XFocusChangeEvent"""
 
    @staticmethod
    def _wrap(java_value: _XFocusChangeEvent) -> 'XFocusChangeEvent':
        return XFocusChangeEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _XFocusChangeEvent):
        """
        Dynamic initializer for XFocusChangeEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_XFocusChangeEvent__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_XFocusChangeEvent__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XFocusChangeEvent.display()"""
        return int._wrap(super(XFocusChangeEvent, self).display())

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XFocusChangeEvent$Buffer org.lwjgl.system.linux.XFocusChangeEvent.calloc(int)"""
        return Buffer._wrap(_XFocusChangeEvent.calloc(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def ndetail(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XFocusChangeEvent.ndetail(long,int)"""
        _XFocusChangeEvent.ndetail(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XFocusChangeEvent$Buffer org.lwjgl.system.linux.XFocusChangeEvent.mallocStack(int)"""
        return Buffer._wrap(_XFocusChangeEvent.mallocStack(_int.valueOf(arg0)))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def malloc() -> 'XFocusChangeEvent':
        """public static org.lwjgl.system.linux.XFocusChangeEvent org.lwjgl.system.linux.XFocusChangeEvent.malloc()"""
        return XFocusChangeEvent._wrap(_XFocusChangeEvent.malloc())

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XFocusChangeEvent':
        """public static org.lwjgl.system.linux.XFocusChangeEvent org.lwjgl.system.linux.XFocusChangeEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XFocusChangeEvent._wrap(_XFocusChangeEvent.calloc(arg0))

    @staticmethod
    @overload
    def ndetail(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XFocusChangeEvent.ndetail(long)"""
        return int._wrap(_XFocusChangeEvent.ndetail(_long.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XFocusChangeEvent':
        """public static org.lwjgl.system.linux.XFocusChangeEvent org.lwjgl.system.linux.XFocusChangeEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XFocusChangeEvent._wrap(_XFocusChangeEvent.callocStack(arg0))

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XFocusChangeEvent$Buffer org.lwjgl.system.linux.XFocusChangeEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XFocusChangeEvent.malloc(_int.valueOf(arg0), arg1))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XFocusChangeEvent.nserial(long)"""
        return int._wrap(_XFocusChangeEvent.nserial(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XFocusChangeEvent.ndisplay(long,long)"""
        _XFocusChangeEvent.ndisplay(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XFocusChangeEvent$Buffer org.lwjgl.system.linux.XFocusChangeEvent.malloc(int)"""
        return Buffer._wrap(_XFocusChangeEvent.malloc(_int.valueOf(arg0)))

    @overload
    def set(self, arg0: 'XFocusChangeEvent') -> 'XFocusChangeEvent':
        """public org.lwjgl.system.linux.XFocusChangeEvent org.lwjgl.system.linux.XFocusChangeEvent.set(org.lwjgl.system.linux.XFocusChangeEvent)"""
        return 'XFocusChangeEvent'._wrap(super(_XFocusChangeEvent, self).set(arg0))

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XFocusChangeEvent$Buffer org.lwjgl.system.linux.XFocusChangeEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XFocusChangeEvent.callocStack(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XFocusChangeEvent$Buffer org.lwjgl.system.linux.XFocusChangeEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XFocusChangeEvent.mallocStack(_int.valueOf(arg0), arg1))

    @overload
    def send_event(self, arg0: bool) -> 'XFocusChangeEvent':
        """public org.lwjgl.system.linux.XFocusChangeEvent org.lwjgl.system.linux.XFocusChangeEvent.send_event(boolean)"""
        return 'XFocusChangeEvent'._wrap(super(_XFocusChangeEvent, self).send_event(_boolean.valueOf(arg0)))

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XFocusChangeEvent.ndisplay(long)"""
        return int._wrap(_XFocusChangeEvent.ndisplay(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XFocusChangeEvent.nserial(long,long)"""
        _XFocusChangeEvent.nserial(_long.valueOf(arg0), _long.valueOf(arg1))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @overload
    def type(self, arg0: int) -> 'XFocusChangeEvent':
        """public org.lwjgl.system.linux.XFocusChangeEvent org.lwjgl.system.linux.XFocusChangeEvent.type(int)"""
        return 'XFocusChangeEvent'._wrap(super(_XFocusChangeEvent, self).type(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def nmode(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XFocusChangeEvent.nmode(long,int)"""
        _XFocusChangeEvent.nmode(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        _Struct.validate(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), arg3)

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XFocusChangeEvent.nsend_event(long,int)"""
        _XFocusChangeEvent.nsend_event(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def detail(self, arg0: int) -> 'XFocusChangeEvent':
        """public org.lwjgl.system.linux.XFocusChangeEvent org.lwjgl.system.linux.XFocusChangeEvent.detail(int)"""
        return 'XFocusChangeEvent'._wrap(super(_XFocusChangeEvent, self).detail(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XFocusChangeEvent':
        """public static org.lwjgl.system.linux.XFocusChangeEvent org.lwjgl.system.linux.XFocusChangeEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XFocusChangeEvent._wrap(_XFocusChangeEvent.malloc(arg0))

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XFocusChangeEvent.ntype(long)"""
        return int._wrap(_XFocusChangeEvent.ntype(_long.valueOf(arg0)))

    @overload
    def mode(self) -> int:
        """public int org.lwjgl.system.linux.XFocusChangeEvent.mode()"""
        return int._wrap(super(XFocusChangeEvent, self).mode())

    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XFocusChangeEvent.nsend_event(long)"""
        return int._wrap(_XFocusChangeEvent.nsend_event(_long.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XFocusChangeEvent.serial()"""
        return int._wrap(super(XFocusChangeEvent, self).serial())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).address())

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XFocusChangeEvent.type()"""
        return int._wrap(super(XFocusChangeEvent, self).type())

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XFocusChangeEvent$Buffer org.lwjgl.system.linux.XFocusChangeEvent.create(long,int)"""
        return Buffer._wrap(_XFocusChangeEvent.create(_long.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @staticmethod
    @overload
    def mallocStack() -> 'XFocusChangeEvent':
        """public static org.lwjgl.system.linux.XFocusChangeEvent org.lwjgl.system.linux.XFocusChangeEvent.mallocStack()"""
        return XFocusChangeEvent._wrap(_XFocusChangeEvent.mallocStack())

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XFocusChangeEvent':
        """public static org.lwjgl.system.linux.XFocusChangeEvent org.lwjgl.system.linux.XFocusChangeEvent.createSafe(long)"""
        return XFocusChangeEvent._wrap(_XFocusChangeEvent.createSafe(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def create() -> 'XFocusChangeEvent':
        """public static org.lwjgl.system.linux.XFocusChangeEvent org.lwjgl.system.linux.XFocusChangeEvent.create()"""
        return XFocusChangeEvent._wrap(_XFocusChangeEvent.create())

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XFocusChangeEvent$Buffer org.lwjgl.system.linux.XFocusChangeEvent.create(int)"""
        return Buffer._wrap(_XFocusChangeEvent.create(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def nwindow(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XFocusChangeEvent.nwindow(long,long)"""
        _XFocusChangeEvent.nwindow(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def callocStack() -> 'XFocusChangeEvent':
        """public static org.lwjgl.system.linux.XFocusChangeEvent org.lwjgl.system.linux.XFocusChangeEvent.callocStack()"""
        return XFocusChangeEvent._wrap(_XFocusChangeEvent.callocStack())

    @overload
    def window(self, arg0: int) -> 'XFocusChangeEvent':
        """public org.lwjgl.system.linux.XFocusChangeEvent org.lwjgl.system.linux.XFocusChangeEvent.window(long)"""
        return 'XFocusChangeEvent'._wrap(super(_XFocusChangeEvent, self).window(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc() -> 'XFocusChangeEvent':
        """public static org.lwjgl.system.linux.XFocusChangeEvent org.lwjgl.system.linux.XFocusChangeEvent.calloc()"""
        return XFocusChangeEvent._wrap(_XFocusChangeEvent.calloc())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XFocusChangeEvent.sizeof()"""
        return int._wrap(super(XFocusChangeEvent, self).sizeof())

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int, arg5: int, arg6: int) -> 'XFocusChangeEvent':
        """public org.lwjgl.system.linux.XFocusChangeEvent org.lwjgl.system.linux.XFocusChangeEvent.set(int,long,boolean,long,long,int,int)"""
        return 'XFocusChangeEvent'._wrap(super(_XFocusChangeEvent, self).set(_int.valueOf(arg0), _long.valueOf(arg1), _boolean.valueOf(arg2), _long.valueOf(arg3), _long.valueOf(arg4), _int.valueOf(arg5), _int.valueOf(arg6)))

    @overload
    def mode(self, arg0: int) -> 'XFocusChangeEvent':
        """public org.lwjgl.system.linux.XFocusChangeEvent org.lwjgl.system.linux.XFocusChangeEvent.mode(int)"""
        return 'XFocusChangeEvent'._wrap(super(_XFocusChangeEvent, self).mode(_int.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @overload
    def detail(self) -> int:
        """public int org.lwjgl.system.linux.XFocusChangeEvent.detail()"""
        return int._wrap(super(XFocusChangeEvent, self).detail())

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XFocusChangeEvent$Buffer org.lwjgl.system.linux.XFocusChangeEvent.callocStack(int)"""
        return Buffer._wrap(_XFocusChangeEvent.callocStack(_int.valueOf(arg0)))

    @overload
    def serial(self, arg0: int) -> 'XFocusChangeEvent':
        """public org.lwjgl.system.linux.XFocusChangeEvent org.lwjgl.system.linux.XFocusChangeEvent.serial(long)"""
        return 'XFocusChangeEvent'._wrap(super(_XFocusChangeEvent, self).serial(_long.valueOf(arg0)))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XFocusChangeEvent.send_event()"""
        return bool._wrap(super(XFocusChangeEvent, self).send_event())

    @overload
    def display(self, arg0: int) -> 'XFocusChangeEvent':
        """public org.lwjgl.system.linux.XFocusChangeEvent org.lwjgl.system.linux.XFocusChangeEvent.display(long)"""
        return 'XFocusChangeEvent'._wrap(super(_XFocusChangeEvent, self).display(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XFocusChangeEvent.validate(long)"""
        _XFocusChangeEvent.validate(_long.valueOf(arg0))

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XFocusChangeEvent':
        """public static org.lwjgl.system.linux.XFocusChangeEvent org.lwjgl.system.linux.XFocusChangeEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XFocusChangeEvent._wrap(_XFocusChangeEvent.mallocStack(arg0))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XFocusChangeEvent(java.nio.ByteBuffer)"""
        val = _XFocusChangeEvent(arg0)
        self.__wrapper = val

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XFocusChangeEvent.window()"""
        return int._wrap(super(XFocusChangeEvent, self).window())

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XFocusChangeEvent$Buffer org.lwjgl.system.linux.XFocusChangeEvent.createSafe(long,int)"""
        return Buffer._wrap(_XFocusChangeEvent.createSafe(_long.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool._wrap(super(_pyglsystem.Struct, self).isNull(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XFocusChangeEvent$Buffer org.lwjgl.system.linux.XFocusChangeEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XFocusChangeEvent.calloc(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def nmode(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XFocusChangeEvent.nmode(long)"""
        return int._wrap(_XFocusChangeEvent.nmode(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nwindow(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XFocusChangeEvent.nwindow(long)"""
        return int._wrap(_XFocusChangeEvent.nwindow(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XFocusChangeEvent.ntype(long,int)"""
        _XFocusChangeEvent.ntype(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def create(arg0: int) -> 'XFocusChangeEvent':
        """public static org.lwjgl.system.linux.XFocusChangeEvent org.lwjgl.system.linux.XFocusChangeEvent.create(long)"""
        return XFocusChangeEvent._wrap(_XFocusChangeEvent.create(_long.valueOf(arg0)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str._wrap(super(pyglsystem.Pointer$Default, self).toString()) 
 
 
# CLASS: org.lwjgl.system.linux.FCNTL
from builtins import str
import java.lang.CharSequence as CharSequence
from pyquantum_helper import override
import java.lang.Object as _Object
_Object = _Object
import java.lang.Object as _object
from builtins import type
import java.lang.String as _String
_String = _String
import org.lwjgl.system.linux.FCNTL as _FCNTL
_FCNTL = _FCNTL
import java.lang.Integer as _int
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class FCNTL():
    """org.lwjgl.system.linux.FCNTL"""
 
    @staticmethod
    def _wrap(java_value: _FCNTL) -> 'FCNTL':
        return FCNTL(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _FCNTL):
        """
        Dynamic initializer for FCNTL.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_FCNTL__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_FCNTL__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def fcntli(arg0: int, arg1: int, arg2: int) -> int:
        """public static int org.lwjgl.system.linux.FCNTL.fcntli(int,int,int)"""
        return int._wrap(_FCNTL.fcntli(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2)))

    @staticmethod
    @overload
    def ncreat(arg0: int, arg1: int) -> int:
        """public static native int org.lwjgl.system.linux.FCNTL.ncreat(long,int)"""
        return int._wrap(_FCNTL.ncreat(_long.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def nfcntlp(arg0: int, arg1: int, arg2: int) -> int:
        """public static native int org.lwjgl.system.linux.FCNTL.nfcntlp(int,int,long)"""
        return int._wrap(_FCNTL.nfcntlp(_int.valueOf(arg0), _int.valueOf(arg1), _long.valueOf(arg2)))

    @staticmethod
    @overload
    def open(arg0: 'CharSequence', arg1: int, arg2: int) -> int:
        """public static int org.lwjgl.system.linux.FCNTL.open(java.lang.CharSequence,int,int)"""
        return int._wrap(_FCNTL.open(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @staticmethod
    @overload
    def nopenat(arg0: int, arg1: int, arg2: int, arg3: int) -> int:
        """public static native int org.lwjgl.system.linux.FCNTL.nopenat(int,long,int,int)"""
        return int._wrap(_FCNTL.nopenat(_int.valueOf(arg0), _long.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.lang.Object.toString()"""
        return str._wrap(super(object, self).toString())

    @staticmethod
    @overload
    def nfcntli(arg0: int, arg1: int, arg2: int) -> int:
        """public static native int org.lwjgl.system.linux.FCNTL.nfcntli(int,int,int)"""
        return int._wrap(_FCNTL.nfcntli(_int.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @staticmethod
    @overload
    def open(arg0: 'ByteBuffer', arg1: int, arg2: int) -> int:
        """public static int org.lwjgl.system.linux.FCNTL.open(java.nio.ByteBuffer,int,int)"""
        return int._wrap(_FCNTL.open(arg0, _int.valueOf(arg1), _int.valueOf(arg2)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def fcntl(arg0: int, arg1: int) -> int:
        """public static native int org.lwjgl.system.linux.FCNTL.fcntl(int,int)"""
        return int._wrap(_FCNTL.fcntl(_int.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def fcntlp(arg0: int, arg1: int, arg2: int) -> int:
        """public static int org.lwjgl.system.linux.FCNTL.fcntlp(int,int,long)"""
        return int._wrap(_FCNTL.fcntlp(_int.valueOf(arg0), _int.valueOf(arg1), _long.valueOf(arg2)))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @staticmethod
    @overload
    def openat(arg0: int, arg1: 'ByteBuffer', arg2: int, arg3: int) -> int:
        """public static int org.lwjgl.system.linux.FCNTL.openat(int,java.nio.ByteBuffer,int,int)"""
        return int._wrap(_FCNTL.openat(_int.valueOf(arg0), arg1, _int.valueOf(arg2), _int.valueOf(arg3)))

    @staticmethod
    @overload
    def nopen(arg0: int, arg1: int, arg2: int) -> int:
        """public static native int org.lwjgl.system.linux.FCNTL.nopen(long,int,int)"""
        return int._wrap(_FCNTL.nopen(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2)))

    @staticmethod
    @overload
    def creat(arg0: 'CharSequence', arg1: int) -> int:
        """public static int org.lwjgl.system.linux.FCNTL.creat(java.lang.CharSequence,int)"""
        return int._wrap(_FCNTL.creat(arg0, _int.valueOf(arg1)))

    @staticmethod
    @overload
    def creat(arg0: 'ByteBuffer', arg1: int) -> int:
        """public static int org.lwjgl.system.linux.FCNTL.creat(java.nio.ByteBuffer,int)"""
        return int._wrap(_FCNTL.creat(arg0, _int.valueOf(arg1)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def openat(arg0: int, arg1: 'CharSequence', arg2: int, arg3: int) -> int:
        """public static int org.lwjgl.system.linux.FCNTL.openat(int,java.lang.CharSequence,int,int)"""
        return int._wrap(_FCNTL.openat(_int.valueOf(arg0), arg1, _int.valueOf(arg2), _int.valueOf(arg3)))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool._wrap(super(_object, self).equals(arg0))

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int._wrap(super(object, self).hashCode()) 
 
 
# CLASS: org.lwjgl.system.linux.XCrossingEvent
from pyquantum_helper import import_once as _import_once
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _Object
_Object = _Object
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
from builtins import type
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import org.lwjgl.system.linux.XCrossingEvent as _XCrossingEvent
_XCrossingEvent = _XCrossingEvent
import java.lang.Boolean as _boolean
import java.lang.Integer as _int
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
import java.lang.Long as _long
from builtins import int
import org.lwjgl.system.linux.XCrossingEvent as _XCrossingEvent_Buffer
_Buffer = _XCrossingEvent_Buffer.Buffer
import java.lang.Class as _Class
_Class = _Class
 
class XCrossingEvent():
    """org.lwjgl.system.linux.XCrossingEvent"""
 
    @staticmethod
    def _wrap(java_value: _XCrossingEvent) -> 'XCrossingEvent':
        return XCrossingEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _XCrossingEvent):
        """
        Dynamic initializer for XCrossingEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_XCrossingEvent__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_XCrossingEvent__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XCrossingEvent.nsend_event(long)"""
        return int._wrap(_XCrossingEvent.nsend_event(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nmode(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCrossingEvent.nmode(long,int)"""
        _XCrossingEvent.nmode(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XCrossingEvent$Buffer org.lwjgl.system.linux.XCrossingEvent.malloc(int)"""
        return Buffer._wrap(_XCrossingEvent.malloc(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def nsubwindow(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCrossingEvent.nsubwindow(long,long)"""
        _XCrossingEvent.nsubwindow(_long.valueOf(arg0), _long.valueOf(arg1))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def x(self) -> int:
        """public int org.lwjgl.system.linux.XCrossingEvent.x()"""
        return int._wrap(super(XCrossingEvent, self).x())

    @staticmethod
    @overload
    def callocStack() -> 'XCrossingEvent':
        """public static org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XCrossingEvent.callocStack()"""
        return XCrossingEvent._wrap(_XCrossingEvent.callocStack())

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XCrossingEvent.serial()"""
        return int._wrap(super(XCrossingEvent, self).serial())

    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCrossingEvent.nsend_event(long,int)"""
        _XCrossingEvent.nsend_event(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def nx_root(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCrossingEvent.nx_root(long,int)"""
        _XCrossingEvent.nx_root(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XCrossingEvent$Buffer org.lwjgl.system.linux.XCrossingEvent.create(long,int)"""
        return Buffer._wrap(_XCrossingEvent.create(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def nroot(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XCrossingEvent.nroot(long)"""
        return int._wrap(_XCrossingEvent.nroot(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nx_root(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XCrossingEvent.nx_root(long)"""
        return int._wrap(_XCrossingEvent.nx_root(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nmode(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XCrossingEvent.nmode(long)"""
        return int._wrap(_XCrossingEvent.nmode(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc() -> 'XCrossingEvent':
        """public static org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XCrossingEvent.calloc()"""
        return XCrossingEvent._wrap(_XCrossingEvent.calloc())

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        _Struct.validate(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), arg3)

    @overload
    def display(self, arg0: int) -> 'XCrossingEvent':
        """public org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XCrossingEvent.display(long)"""
        return 'XCrossingEvent'._wrap(super(_XCrossingEvent, self).display(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XCrossingEvent':
        """public static org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XCrossingEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XCrossingEvent._wrap(_XCrossingEvent.calloc(arg0))

    @staticmethod
    @overload
    def create(arg0: int) -> 'XCrossingEvent':
        """public static org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XCrossingEvent.create(long)"""
        return XCrossingEvent._wrap(_XCrossingEvent.create(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XCrossingEvent.validate(long)"""
        _XCrossingEvent.validate(_long.valueOf(arg0))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XCrossingEvent.send_event()"""
        return bool._wrap(super(XCrossingEvent, self).send_event())

    @overload
    def set(self, arg0: 'XCrossingEvent') -> 'XCrossingEvent':
        """public org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XCrossingEvent.set(org.lwjgl.system.linux.XCrossingEvent)"""
        return 'XCrossingEvent'._wrap(super(_XCrossingEvent, self).set(arg0))

    @overload
    def mode(self, arg0: int) -> 'XCrossingEvent':
        """public org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XCrossingEvent.mode(int)"""
        return 'XCrossingEvent'._wrap(super(_XCrossingEvent, self).mode(_int.valueOf(arg0)))

    @overload
    def x_root(self) -> int:
        """public int org.lwjgl.system.linux.XCrossingEvent.x_root()"""
        return int._wrap(super(XCrossingEvent, self).x_root())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def ndetail(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCrossingEvent.ndetail(long,int)"""
        _XCrossingEvent.ndetail(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def y_root(self, arg0: int) -> 'XCrossingEvent':
        """public org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XCrossingEvent.y_root(int)"""
        return 'XCrossingEvent'._wrap(super(_XCrossingEvent, self).y_root(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack() -> 'XCrossingEvent':
        """public static org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XCrossingEvent.mallocStack()"""
        return XCrossingEvent._wrap(_XCrossingEvent.mallocStack())

    @staticmethod
    @overload
    def malloc() -> 'XCrossingEvent':
        """public static org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XCrossingEvent.malloc()"""
        return XCrossingEvent._wrap(_XCrossingEvent.malloc())

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XCrossingEvent$Buffer org.lwjgl.system.linux.XCrossingEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XCrossingEvent.malloc(_int.valueOf(arg0), arg1))

    @overload
    def root(self, arg0: int) -> 'XCrossingEvent':
        """public org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XCrossingEvent.root(long)"""
        return 'XCrossingEvent'._wrap(super(_XCrossingEvent, self).root(_long.valueOf(arg0)))

    @overload
    def focus(self, arg0: int) -> 'XCrossingEvent':
        """public org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XCrossingEvent.focus(int)"""
        return 'XCrossingEvent'._wrap(super(_XCrossingEvent, self).focus(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XCrossingEvent':
        """public static org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XCrossingEvent.createSafe(long)"""
        return XCrossingEvent._wrap(_XCrossingEvent.createSafe(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def ny(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XCrossingEvent.ny(long)"""
        return int._wrap(_XCrossingEvent.ny(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XCrossingEvent$Buffer org.lwjgl.system.linux.XCrossingEvent.create(int)"""
        return Buffer._wrap(_XCrossingEvent.create(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def nsame_screen(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XCrossingEvent.nsame_screen(long)"""
        return int._wrap(_XCrossingEvent.nsame_screen(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XCrossingEvent$Buffer org.lwjgl.system.linux.XCrossingEvent.calloc(int)"""
        return Buffer._wrap(_XCrossingEvent.calloc(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def nsame_screen(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCrossingEvent.nsame_screen(long,int)"""
        _XCrossingEvent.nsame_screen(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def x_root(self, arg0: int) -> 'XCrossingEvent':
        """public org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XCrossingEvent.x_root(int)"""
        return 'XCrossingEvent'._wrap(super(_XCrossingEvent, self).x_root(_int.valueOf(arg0)))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XCrossingEvent(java.nio.ByteBuffer)"""
        val = _XCrossingEvent(arg0)
        self.__wrapper = val

    @overload
    def serial(self, arg0: int) -> 'XCrossingEvent':
        """public org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XCrossingEvent.serial(long)"""
        return 'XCrossingEvent'._wrap(super(_XCrossingEvent, self).serial(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nwindow(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCrossingEvent.nwindow(long,long)"""
        _XCrossingEvent.nwindow(_long.valueOf(arg0), _long.valueOf(arg1))

    @overload
    def x(self, arg0: int) -> 'XCrossingEvent':
        """public org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XCrossingEvent.x(int)"""
        return 'XCrossingEvent'._wrap(super(_XCrossingEvent, self).x(_int.valueOf(arg0)))

    @overload
    def window(self, arg0: int) -> 'XCrossingEvent':
        """public org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XCrossingEvent.window(long)"""
        return 'XCrossingEvent'._wrap(super(_XCrossingEvent, self).window(_long.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCrossingEvent.ndisplay(long,long)"""
        _XCrossingEvent.ndisplay(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XCrossingEvent$Buffer org.lwjgl.system.linux.XCrossingEvent.createSafe(long,int)"""
        return Buffer._wrap(_XCrossingEvent.createSafe(_long.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def time(self) -> int:
        """public long org.lwjgl.system.linux.XCrossingEvent.time()"""
        return int._wrap(super(XCrossingEvent, self).time())

    @overload
    def detail(self, arg0: int) -> 'XCrossingEvent':
        """public org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XCrossingEvent.detail(int)"""
        return 'XCrossingEvent'._wrap(super(_XCrossingEvent, self).detail(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def ntime(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XCrossingEvent.ntime(long)"""
        return int._wrap(_XCrossingEvent.ntime(_long.valueOf(arg0)))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XCrossingEvent.sizeof()"""
        return int._wrap(super(XCrossingEvent, self).sizeof())

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCrossingEvent.nserial(long,long)"""
        _XCrossingEvent.nserial(_long.valueOf(arg0), _long.valueOf(arg1))

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool._wrap(super(_pyglsystem.Struct, self).isNull(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def create() -> 'XCrossingEvent':
        """public static org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XCrossingEvent.create()"""
        return XCrossingEvent._wrap(_XCrossingEvent.create())

    @staticmethod
    @overload
    def nsubwindow(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XCrossingEvent.nsubwindow(long)"""
        return int._wrap(_XCrossingEvent.nsubwindow(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XCrossingEvent':
        """public static org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XCrossingEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XCrossingEvent._wrap(_XCrossingEvent.callocStack(arg0))

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XCrossingEvent':
        """public static org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XCrossingEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XCrossingEvent._wrap(_XCrossingEvent.malloc(arg0))

    @staticmethod
    @overload
    def nfocus(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XCrossingEvent.nfocus(long)"""
        return int._wrap(_XCrossingEvent.nfocus(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XCrossingEvent$Buffer org.lwjgl.system.linux.XCrossingEvent.mallocStack(int)"""
        return Buffer._wrap(_XCrossingEvent.mallocStack(_int.valueOf(arg0)))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XCrossingEvent.type()"""
        return int._wrap(super(XCrossingEvent, self).type())

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XCrossingEvent$Buffer org.lwjgl.system.linux.XCrossingEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XCrossingEvent.callocStack(_int.valueOf(arg0), arg1))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def subwindow(self) -> int:
        """public long org.lwjgl.system.linux.XCrossingEvent.subwindow()"""
        return int._wrap(super(XCrossingEvent, self).subwindow())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @staticmethod
    @overload
    def nfocus(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCrossingEvent.nfocus(long,int)"""
        _XCrossingEvent.nfocus(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def nstate(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XCrossingEvent.nstate(long)"""
        return int._wrap(_XCrossingEvent.nstate(_long.valueOf(arg0)))

    @overload
    def send_event(self, arg0: bool) -> 'XCrossingEvent':
        """public org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XCrossingEvent.send_event(boolean)"""
        return 'XCrossingEvent'._wrap(super(_XCrossingEvent, self).send_event(_boolean.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XCrossingEvent$Buffer org.lwjgl.system.linux.XCrossingEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XCrossingEvent.mallocStack(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XCrossingEvent$Buffer org.lwjgl.system.linux.XCrossingEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XCrossingEvent.calloc(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def ny_root(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCrossingEvent.ny_root(long,int)"""
        _XCrossingEvent.ny_root(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def time(self, arg0: int) -> 'XCrossingEvent':
        """public org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XCrossingEvent.time(long)"""
        return 'XCrossingEvent'._wrap(super(_XCrossingEvent, self).time(_long.valueOf(arg0)))

    @overload
    def subwindow(self, arg0: int) -> 'XCrossingEvent':
        """public org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XCrossingEvent.subwindow(long)"""
        return 'XCrossingEvent'._wrap(super(_XCrossingEvent, self).subwindow(_long.valueOf(arg0)))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XCrossingEvent':
        """public static org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XCrossingEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XCrossingEvent._wrap(_XCrossingEvent.mallocStack(arg0))

    @staticmethod
    @overload
    def nx(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XCrossingEvent.nx(long)"""
        return int._wrap(_XCrossingEvent.nx(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def ny(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCrossingEvent.ny(long,int)"""
        _XCrossingEvent.ny(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def state(self, arg0: int) -> 'XCrossingEvent':
        """public org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XCrossingEvent.state(int)"""
        return 'XCrossingEvent'._wrap(super(_XCrossingEvent, self).state(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def nstate(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCrossingEvent.nstate(long,int)"""
        _XCrossingEvent.nstate(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XCrossingEvent.display()"""
        return int._wrap(super(XCrossingEvent, self).display())

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XCrossingEvent.ntype(long)"""
        return int._wrap(_XCrossingEvent.ntype(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCrossingEvent.ntype(long,int)"""
        _XCrossingEvent.ntype(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def same_screen(self) -> int:
        """public int org.lwjgl.system.linux.XCrossingEvent.same_screen()"""
        return int._wrap(super(XCrossingEvent, self).same_screen())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).address())

    @overload
    def detail(self) -> int:
        """public int org.lwjgl.system.linux.XCrossingEvent.detail()"""
        return int._wrap(super(XCrossingEvent, self).detail())

    @overload
    def same_screen(self, arg0: int) -> 'XCrossingEvent':
        """public org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XCrossingEvent.same_screen(int)"""
        return 'XCrossingEvent'._wrap(super(_XCrossingEvent, self).same_screen(_int.valueOf(arg0)))

    @overload
    def state(self) -> int:
        """public int org.lwjgl.system.linux.XCrossingEvent.state()"""
        return int._wrap(super(XCrossingEvent, self).state())

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XCrossingEvent.window()"""
        return int._wrap(super(XCrossingEvent, self).window())

    @overload
    def type(self, arg0: int) -> 'XCrossingEvent':
        """public org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XCrossingEvent.type(int)"""
        return 'XCrossingEvent'._wrap(super(_XCrossingEvent, self).type(_int.valueOf(arg0)))

    @overload
    def y_root(self) -> int:
        """public int org.lwjgl.system.linux.XCrossingEvent.y_root()"""
        return int._wrap(super(XCrossingEvent, self).y_root())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def y(self) -> int:
        """public int org.lwjgl.system.linux.XCrossingEvent.y()"""
        return int._wrap(super(XCrossingEvent, self).y())

    @staticmethod
    @overload
    def ndetail(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XCrossingEvent.ndetail(long)"""
        return int._wrap(_XCrossingEvent.ndetail(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XCrossingEvent.nserial(long)"""
        return int._wrap(_XCrossingEvent.nserial(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nroot(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCrossingEvent.nroot(long,long)"""
        _XCrossingEvent.nroot(_long.valueOf(arg0), _long.valueOf(arg1))

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: int, arg10: int, arg11: int, arg12: int, arg13: int, arg14: int, arg15: int, arg16: int) -> 'XCrossingEvent':
        """public org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XCrossingEvent.set(int,long,boolean,long,long,long,long,long,int,int,int,int,int,int,int,int,int)"""
        return 'XCrossingEvent'._wrap(super(_XCrossingEvent, self).set(_int.valueOf(arg0), _long.valueOf(arg1), _boolean.valueOf(arg2), _long.valueOf(arg3), _long.valueOf(arg4), _long.valueOf(arg5), _long.valueOf(arg6), _long.valueOf(arg7), _int.valueOf(arg8), _int.valueOf(arg9), _int.valueOf(arg10), _int.valueOf(arg11), _int.valueOf(arg12), _int.valueOf(arg13), _int.valueOf(arg14), _int.valueOf(arg15), _int.valueOf(arg16)))

    @staticmethod
    @overload
    def nx(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCrossingEvent.nx(long,int)"""
        _XCrossingEvent.nx(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def ntime(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XCrossingEvent.ntime(long,long)"""
        _XCrossingEvent.ntime(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XCrossingEvent$Buffer org.lwjgl.system.linux.XCrossingEvent.callocStack(int)"""
        return Buffer._wrap(_XCrossingEvent.callocStack(_int.valueOf(arg0)))

    @overload
    def root(self) -> int:
        """public long org.lwjgl.system.linux.XCrossingEvent.root()"""
        return int._wrap(super(XCrossingEvent, self).root())

    @overload
    def y(self, arg0: int) -> 'XCrossingEvent':
        """public org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XCrossingEvent.y(int)"""
        return 'XCrossingEvent'._wrap(super(_XCrossingEvent, self).y(_int.valueOf(arg0)))

    @overload
    def focus(self) -> int:
        """public int org.lwjgl.system.linux.XCrossingEvent.focus()"""
        return int._wrap(super(XCrossingEvent, self).focus())

    @overload
    def mode(self) -> int:
        """public int org.lwjgl.system.linux.XCrossingEvent.mode()"""
        return int._wrap(super(XCrossingEvent, self).mode())

    @staticmethod
    @overload
    def ny_root(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XCrossingEvent.ny_root(long)"""
        return int._wrap(_XCrossingEvent.ny_root(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nwindow(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XCrossingEvent.nwindow(long)"""
        return int._wrap(_XCrossingEvent.nwindow(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XCrossingEvent.ndisplay(long)"""
        return int._wrap(_XCrossingEvent.ndisplay(_long.valueOf(arg0)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str._wrap(super(pyglsystem.Pointer$Default, self).toString()) 
 
 
# CLASS: org.lwjgl.system.linux.UNISTD
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _Object
_Object = _Object
import java.lang.Object as _object
from builtins import type
import java.lang.String as _String
_String = _String
import org.lwjgl.system.linux.UNISTD as _UNISTD
_UNISTD = _UNISTD
import java.lang.Integer as _int
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class UNISTD():
    """org.lwjgl.system.linux.UNISTD"""
 
    @staticmethod
    def _wrap(java_value: _UNISTD) -> 'UNISTD':
        return UNISTD(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _UNISTD):
        """
        Dynamic initializer for UNISTD.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_UNISTD__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_UNISTD__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def sysconf(arg0: int) -> int:
        """public static native long org.lwjgl.system.linux.UNISTD.sysconf(int)"""
        return int._wrap(_UNISTD.sysconf(_int.valueOf(arg0)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.lang.Object.toString()"""
        return str._wrap(super(object, self).toString())

    @staticmethod
    @overload
    def getppid() -> int:
        """public static native int org.lwjgl.system.linux.UNISTD.getppid()"""
        return int._wrap(_UNISTD.getppid())

    @staticmethod
    @overload
    def close(arg0: int) -> int:
        """public static native int org.lwjgl.system.linux.UNISTD.close(int)"""
        return int._wrap(_UNISTD.close(_int.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @staticmethod
    @overload
    def read(arg0: int, arg1: 'ByteBuffer') -> int:
        """public static long org.lwjgl.system.linux.UNISTD.read(int,java.nio.ByteBuffer)"""
        return int._wrap(_UNISTD.read(_int.valueOf(arg0), arg1))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def nread(arg0: int, arg1: int, arg2: int) -> int:
        """public static native long org.lwjgl.system.linux.UNISTD.nread(int,long,long)"""
        return int._wrap(_UNISTD.nread(_int.valueOf(arg0), _long.valueOf(arg1), _long.valueOf(arg2)))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @staticmethod
    @overload
    def getpid() -> int:
        """public static native int org.lwjgl.system.linux.UNISTD.getpid()"""
        return int._wrap(_UNISTD.getpid())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def gettid() -> int:
        """public static native int org.lwjgl.system.linux.UNISTD.gettid()"""
        return int._wrap(_UNISTD.gettid())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool._wrap(super(_object, self).equals(arg0))

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int._wrap(super(object, self).hashCode()) 
 
 
# CLASS: org.lwjgl.system.linux.XMappingEvent$Buffer
from pyquantum_helper import import_once as _import_once
import java.lang.Object as _Object
_Object = _Object
from builtins import type
import org.lwjgl.system.CustomBuffer as _CustomBuffer
_CustomBuffer = _CustomBuffer
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Boolean as _boolean
import org.lwjgl.system.StructBuffer as _StructBuffer
_StructBuffer = _StructBuffer
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.util.Iterator as _Iterator
_Iterator = _Iterator
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
import java.util.Spliterator as _Spliterator
_Spliterator = _Spliterator
import org.lwjgl.system.linux.XMappingEvent as _XMappingEvent_Buffer
_Buffer = _XMappingEvent_Buffer.Buffer
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.util.Iterator as Iterator
import java.lang.Integer as _int
import java.util.stream.Stream as _Stream
_Stream = _Stream
import java.util.stream.Stream as Stream
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class Buffer():
    """org.lwjgl.system.linux.XMappingEvent.Buffer"""
 
    @staticmethod
    def _wrap(java_value: _Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Buffer__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Buffer__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XMappingEvent$Buffer.window()"""
        return int._wrap(super(Buffer, self).window())

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).limit(_int.valueOf(arg0)))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address0())

    @overload
    def request(self) -> int:
        """public int org.lwjgl.system.linux.XMappingEvent$Buffer.request()"""
        return int._wrap(super(Buffer, self).request())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address())

    @overload
    def window(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XMappingEvent$Buffer org.lwjgl.system.linux.XMappingEvent$Buffer.window(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).window(_long.valueOf(arg0)))

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def count(self) -> int:
        """public int org.lwjgl.system.linux.XMappingEvent$Buffer.count()"""
        return int._wrap(super(Buffer, self).count())

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str._wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int._wrap(super(_pyglsystem.CustomBuffer, self).address(_int.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'._wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XMappingEvent$Buffer.display()"""
        return int._wrap(super(Buffer, self).display())

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).stream())

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).position(_int.valueOf(arg0)))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XMappingEvent$Buffer(java.nio.ByteBuffer)"""
        val = _Buffer(arg0)
        self.__wrapper = val

    @overload
    def request(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XMappingEvent$Buffer org.lwjgl.system.linux.XMappingEvent$Buffer.request(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).request(_int.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'._wrap(super(pyglsystem.StructBuffer, self).get())

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XMappingEvent$Buffer org.lwjgl.system.linux.XMappingEvent$Buffer.serial(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).serial(_long.valueOf(arg0)))

    @overload
    def first_keycode(self) -> int:
        """public int org.lwjgl.system.linux.XMappingEvent$Buffer.first_keycode()"""
        return int._wrap(super(Buffer, self).first_keycode())

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XMappingEvent$Buffer org.lwjgl.system.linux.XMappingEvent$Buffer.send_event(boolean)"""
        return 'Buffer'._wrap(super(_Buffer, self).send_event(_boolean.valueOf(arg0)))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XMappingEvent$Buffer.send_event()"""
        return bool._wrap(super(Buffer, self).send_event())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(arg0))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'._wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(arg0))

    @overload
    def first_keycode(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XMappingEvent$Buffer org.lwjgl.system.linux.XMappingEvent$Buffer.first_keycode(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).first_keycode(_int.valueOf(arg0)))

    @overload
    def count(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XMappingEvent$Buffer org.lwjgl.system.linux.XMappingEvent$Buffer.count(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).count(_int.valueOf(arg0)))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XMappingEvent$Buffer.serial()"""
        return int._wrap(super(Buffer, self).serial())

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).slice())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).slice(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0), arg1))

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(_int.valueOf(arg0), arg1))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).clear())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool._wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XMappingEvent$Buffer(long,int)"""
        val = _Buffer(_long.valueOf(arg0), _int.valueOf(arg1))
        self.__wrapper = val

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int._wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(_int.valueOf(arg0), arg1))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XMappingEvent$Buffer.type()"""
        return int._wrap(super(Buffer, self).type())

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(_pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XMappingEvent$Buffer org.lwjgl.system.linux.XMappingEvent$Buffer.display(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).display(_long.valueOf(arg0)))

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XMappingEvent$Buffer org.lwjgl.system.linux.XMappingEvent$Buffer.type(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).type(_int.valueOf(arg0)))

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(arg0)) 
 
 
# CLASS: org.lwjgl.system.linux.XCrossingEvent$Buffer
from pyquantum_helper import import_once as _import_once
import java.lang.Object as _Object
_Object = _Object
from builtins import type
import org.lwjgl.system.CustomBuffer as _CustomBuffer
_CustomBuffer = _CustomBuffer
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Boolean as _boolean
import org.lwjgl.system.StructBuffer as _StructBuffer
_StructBuffer = _StructBuffer
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.util.Iterator as _Iterator
_Iterator = _Iterator
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
import java.util.Spliterator as _Spliterator
_Spliterator = _Spliterator
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.util.Iterator as Iterator
import java.lang.Integer as _int
import java.util.stream.Stream as _Stream
_Stream = _Stream
import java.util.stream.Stream as Stream
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Long as _long
import org.lwjgl.system.linux.XCrossingEvent as _XCrossingEvent_Buffer
_Buffer = _XCrossingEvent_Buffer.Buffer
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class Buffer():
    """org.lwjgl.system.linux.XCrossingEvent.Buffer"""
 
    @staticmethod
    def _wrap(java_value: _Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Buffer__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Buffer__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def time(self) -> int:
        """public long org.lwjgl.system.linux.XCrossingEvent$Buffer.time()"""
        return int._wrap(super(Buffer, self).time())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).limit(_int.valueOf(arg0)))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address())

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCrossingEvent$Buffer org.lwjgl.system.linux.XCrossingEvent$Buffer.type(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).type(_int.valueOf(arg0)))

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def focus(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCrossingEvent$Buffer org.lwjgl.system.linux.XCrossingEvent$Buffer.focus(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).focus(_int.valueOf(arg0)))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str._wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def window(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCrossingEvent$Buffer org.lwjgl.system.linux.XCrossingEvent$Buffer.window(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).window(_long.valueOf(arg0)))

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int._wrap(super(_pyglsystem.CustomBuffer, self).address(_int.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).mark())

    @overload
    def state(self) -> int:
        """public int org.lwjgl.system.linux.XCrossingEvent$Buffer.state()"""
        return int._wrap(super(Buffer, self).state())

    @overload
    def mode(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCrossingEvent$Buffer org.lwjgl.system.linux.XCrossingEvent$Buffer.mode(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).mode(_int.valueOf(arg0)))

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XCrossingEvent$Buffer.display()"""
        return int._wrap(super(Buffer, self).display())

    @overload
    def focus(self) -> int:
        """public int org.lwjgl.system.linux.XCrossingEvent$Buffer.focus()"""
        return int._wrap(super(Buffer, self).focus())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'._wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @overload
    def y_root(self) -> int:
        """public int org.lwjgl.system.linux.XCrossingEvent$Buffer.y_root()"""
        return int._wrap(super(Buffer, self).y_root())

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).stream())

    @overload
    def x_root(self) -> int:
        """public int org.lwjgl.system.linux.XCrossingEvent$Buffer.x_root()"""
        return int._wrap(super(Buffer, self).x_root())

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).position(_int.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XCrossingEvent$Buffer(long,int)"""
        val = _Buffer(_long.valueOf(arg0), _int.valueOf(arg1))
        self.__wrapper = val

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XCrossingEvent$Buffer.type()"""
        return int._wrap(super(Buffer, self).type())

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'._wrap(super(pyglsystem.StructBuffer, self).get())

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def root(self) -> int:
        """public long org.lwjgl.system.linux.XCrossingEvent$Buffer.root()"""
        return int._wrap(super(Buffer, self).root())

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCrossingEvent$Buffer org.lwjgl.system.linux.XCrossingEvent$Buffer.display(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).display(_long.valueOf(arg0)))

    @overload
    def subwindow(self) -> int:
        """public long org.lwjgl.system.linux.XCrossingEvent$Buffer.subwindow()"""
        return int._wrap(super(Buffer, self).subwindow())

    @overload
    def same_screen(self) -> int:
        """public int org.lwjgl.system.linux.XCrossingEvent$Buffer.same_screen()"""
        return int._wrap(super(Buffer, self).same_screen())

    @overload
    def detail(self) -> int:
        """public int org.lwjgl.system.linux.XCrossingEvent$Buffer.detail()"""
        return int._wrap(super(Buffer, self).detail())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XCrossingEvent$Buffer.window()"""
        return int._wrap(super(Buffer, self).window())

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def x(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCrossingEvent$Buffer org.lwjgl.system.linux.XCrossingEvent$Buffer.x(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).x(_int.valueOf(arg0)))

    @overload
    def y(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCrossingEvent$Buffer org.lwjgl.system.linux.XCrossingEvent$Buffer.y(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).y(_int.valueOf(arg0)))

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(arg0))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XCrossingEvent$Buffer.serial()"""
        return int._wrap(super(Buffer, self).serial())

    @overload
    def y_root(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCrossingEvent$Buffer org.lwjgl.system.linux.XCrossingEvent$Buffer.y_root(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).y_root(_int.valueOf(arg0)))

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'._wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCrossingEvent$Buffer org.lwjgl.system.linux.XCrossingEvent$Buffer.serial(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).serial(_long.valueOf(arg0)))

    @overload
    def state(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCrossingEvent$Buffer org.lwjgl.system.linux.XCrossingEvent$Buffer.state(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).state(_int.valueOf(arg0)))

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(arg0))

    @overload
    def x(self) -> int:
        """public int org.lwjgl.system.linux.XCrossingEvent$Buffer.x()"""
        return int._wrap(super(Buffer, self).x())

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XCrossingEvent$Buffer org.lwjgl.system.linux.XCrossingEvent$Buffer.send_event(boolean)"""
        return 'Buffer'._wrap(super(_Buffer, self).send_event(_boolean.valueOf(arg0)))

    @overload
    def y(self) -> int:
        """public int org.lwjgl.system.linux.XCrossingEvent$Buffer.y()"""
        return int._wrap(super(Buffer, self).y())

    @overload
    def x_root(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCrossingEvent$Buffer org.lwjgl.system.linux.XCrossingEvent$Buffer.x_root(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).x_root(_int.valueOf(arg0)))

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).slice())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).slice(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0), arg1))

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(_int.valueOf(arg0), arg1))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).clear())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool._wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @overload
    def time(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCrossingEvent$Buffer org.lwjgl.system.linux.XCrossingEvent$Buffer.time(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).time(_long.valueOf(arg0)))

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def root(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCrossingEvent$Buffer org.lwjgl.system.linux.XCrossingEvent$Buffer.root(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).root(_long.valueOf(arg0)))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int._wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XCrossingEvent$Buffer(java.nio.ByteBuffer)"""
        val = _Buffer(arg0)
        self.__wrapper = val

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(_int.valueOf(arg0), arg1))

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XCrossingEvent$Buffer.send_event()"""
        return bool._wrap(super(Buffer, self).send_event())

    @overload
    def detail(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCrossingEvent$Buffer org.lwjgl.system.linux.XCrossingEvent$Buffer.detail(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).detail(_int.valueOf(arg0)))

    @overload
    def mode(self) -> int:
        """public int org.lwjgl.system.linux.XCrossingEvent$Buffer.mode()"""
        return int._wrap(super(Buffer, self).mode())

    @overload
    def same_screen(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCrossingEvent$Buffer org.lwjgl.system.linux.XCrossingEvent$Buffer.same_screen(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).same_screen(_int.valueOf(arg0)))

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(_pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def subwindow(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCrossingEvent$Buffer org.lwjgl.system.linux.XCrossingEvent$Buffer.subwindow(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).subwindow(_long.valueOf(arg0)))

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(arg0)) 
 
 
# CLASS: org.lwjgl.system.linux.XEvent
from pyquantum_helper import import_once as _import_once
import org.lwjgl.system.linux.XAnyEvent as _XAnyEvent
_XAnyEvent = _XAnyEvent
import org.lwjgl.system.linux.XCreateWindowEvent as _XCreateWindowEvent
_XCreateWindowEvent = _XCreateWindowEvent
import org.lwjgl.system.linux.XSelectionClearEvent as _XSelectionClearEvent
_XSelectionClearEvent = _XSelectionClearEvent
import org.lwjgl.system.linux.XClientMessageEvent as _XClientMessageEvent
_XClientMessageEvent = _XClientMessageEvent
import org.lwjgl.system.linux.XKeymapEvent as _XKeymapEvent
_XKeymapEvent = _XKeymapEvent
import org.lwjgl.system.linux.XUnmapEvent as _XUnmapEvent
_XUnmapEvent = _XUnmapEvent
import org.lwjgl.system.linux.XResizeRequestEvent as _XResizeRequestEvent
_XResizeRequestEvent = _XResizeRequestEvent
import org.lwjgl.system.linux.XGravityEvent as _XGravityEvent
_XGravityEvent = _XGravityEvent
import org.lwjgl.system.linux.XCrossingEvent as _XCrossingEvent
_XCrossingEvent = _XCrossingEvent
import org.lwjgl.system.linux.XMappingEvent as _XMappingEvent
_XMappingEvent = _XMappingEvent
import org.lwjgl.system.linux.XPropertyEvent as _XPropertyEvent
_XPropertyEvent = _XPropertyEvent
import org.lwjgl.system.linux.XSelectionRequestEvent as _XSelectionRequestEvent
_XSelectionRequestEvent = _XSelectionRequestEvent
import org.lwjgl.system.linux.XButtonEvent as _XButtonEvent
_XButtonEvent = _XButtonEvent
import org.lwjgl.system.linux.XFocusChangeEvent as _XFocusChangeEvent
_XFocusChangeEvent = _XFocusChangeEvent
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import org.lwjgl.system.linux.XMotionEvent as _XMotionEvent
_XMotionEvent = _XMotionEvent
import org.lwjgl.system.linux.XDestroyWindowEvent as _XDestroyWindowEvent
_XDestroyWindowEvent = _XDestroyWindowEvent
from builtins import bool
import org.lwjgl.system.linux.XEvent as _XEvent_Buffer
_Buffer = _XEvent_Buffer.Buffer
import org.lwjgl.system.linux.XMapRequestEvent as _XMapRequestEvent
_XMapRequestEvent = _XMapRequestEvent
import org.lwjgl.system.linux.XColormapEvent as _XColormapEvent
_XColormapEvent = _XColormapEvent
import java.lang.Object as _object
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import org.lwjgl.system.linux.XEvent as _XEvent
_XEvent = _XEvent
import org.lwjgl.system.linux.XSelectionEvent as _XSelectionEvent
_XSelectionEvent = _XSelectionEvent
import org.lwjgl.system.linux.XReparentEvent as _XReparentEvent
_XReparentEvent = _XReparentEvent
import org.lwjgl.system.linux.XConfigureEvent as _XConfigureEvent
_XConfigureEvent = _XConfigureEvent
import org.lwjgl.system.linux.XNoExposeEvent as _XNoExposeEvent
_XNoExposeEvent = _XNoExposeEvent
import org.lwjgl.system.linux.XExposeEvent as _XExposeEvent
_XExposeEvent = _XExposeEvent
from builtins import int
import java.lang.Class as _Class
_Class = _Class
import java.lang.Object as _Object
_Object = _Object
import org.lwjgl.system.linux.XGenericEvent as _XGenericEvent
_XGenericEvent = _XGenericEvent
from builtins import type
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import org.lwjgl.system.linux.XMapEvent as _XMapEvent
_XMapEvent = _XMapEvent
import org.lwjgl.system.linux.XConfigureRequestEvent as _XConfigureRequestEvent
_XConfigureRequestEvent = _XConfigureRequestEvent
import org.lwjgl.system.linux.XGraphicsExposeEvent as _XGraphicsExposeEvent
_XGraphicsExposeEvent = _XGraphicsExposeEvent
import org.lwjgl.system.linux.XVisibilityEvent as _XVisibilityEvent
_XVisibilityEvent = _XVisibilityEvent
from builtins import str
from pyquantum_helper import override
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
import org.lwjgl.system.linux.XGenericEventCookie as _XGenericEventCookie
_XGenericEventCookie = _XGenericEventCookie
import org.lwjgl.system.linux.XErrorEvent as _XErrorEvent
_XErrorEvent = _XErrorEvent
import org.lwjgl.system.linux.XCirculateEvent as _XCirculateEvent
_XCirculateEvent = _XCirculateEvent
import java.lang.Integer as _int
import org.lwjgl.system.linux.XKeyEvent as _XKeyEvent
_XKeyEvent = _XKeyEvent
import org.lwjgl.system.linux.XCirculateRequestEvent as _XCirculateRequestEvent
_XCirculateRequestEvent = _XCirculateRequestEvent
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Long as _long
 
class XEvent():
    """org.lwjgl.system.linux.XEvent"""
 
    @staticmethod
    def _wrap(java_value: _XEvent) -> 'XEvent':
        return XEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _XEvent):
        """
        Dynamic initializer for XEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_XEvent__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_XEvent__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def nxany(arg0: int) -> 'XAnyEvent':
        """public static org.lwjgl.system.linux.XAnyEvent org.lwjgl.system.linux.XEvent.nxany(long)"""
        return XAnyEvent._wrap(_XEvent.nxany(_long.valueOf(arg0)))

    @overload
    def xfocus(self) -> 'XFocusChangeEvent':
        """public org.lwjgl.system.linux.XFocusChangeEvent org.lwjgl.system.linux.XEvent.xfocus()"""
        return 'XFocusChangeEvent'._wrap(super(XEvent, self).xfocus())

    @overload
    def xexpose(self) -> 'XExposeEvent':
        """public org.lwjgl.system.linux.XExposeEvent org.lwjgl.system.linux.XEvent.xexpose()"""
        return 'XExposeEvent'._wrap(super(XEvent, self).xexpose())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XEvent':
        """public static org.lwjgl.system.linux.XEvent org.lwjgl.system.linux.XEvent.createSafe(long)"""
        return XEvent._wrap(_XEvent.createSafe(_long.valueOf(arg0)))

    @overload
    def xgeneric(self) -> 'XGenericEvent':
        """public org.lwjgl.system.linux.XGenericEvent org.lwjgl.system.linux.XEvent.xgeneric()"""
        return 'XGenericEvent'._wrap(super(XEvent, self).xgeneric())

    @overload
    def xselectionrequest(self) -> 'XSelectionRequestEvent':
        """public org.lwjgl.system.linux.XSelectionRequestEvent org.lwjgl.system.linux.XEvent.xselectionrequest()"""
        return 'XSelectionRequestEvent'._wrap(super(XEvent, self).xselectionrequest())

    @staticmethod
    @overload
    def create() -> 'XEvent':
        """public static org.lwjgl.system.linux.XEvent org.lwjgl.system.linux.XEvent.create()"""
        return XEvent._wrap(_XEvent.create())

    @overload
    def xvisibility(self) -> 'XVisibilityEvent':
        """public org.lwjgl.system.linux.XVisibilityEvent org.lwjgl.system.linux.XEvent.xvisibility()"""
        return 'XVisibilityEvent'._wrap(super(XEvent, self).xvisibility())

    @overload
    def xclient(self) -> 'XClientMessageEvent':
        """public org.lwjgl.system.linux.XClientMessageEvent org.lwjgl.system.linux.XEvent.xclient()"""
        return 'XClientMessageEvent'._wrap(super(XEvent, self).xclient())

    @staticmethod
    @overload
    def nxfocus(arg0: int) -> 'XFocusChangeEvent':
        """public static org.lwjgl.system.linux.XFocusChangeEvent org.lwjgl.system.linux.XEvent.nxfocus(long)"""
        return XFocusChangeEvent._wrap(_XEvent.nxfocus(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nxgravity(arg0: int) -> 'XGravityEvent':
        """public static org.lwjgl.system.linux.XGravityEvent org.lwjgl.system.linux.XEvent.nxgravity(long)"""
        return XGravityEvent._wrap(_XEvent.nxgravity(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XEvent$Buffer org.lwjgl.system.linux.XEvent.create(long,int)"""
        return Buffer._wrap(_XEvent.create(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        _Struct.validate(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), arg3)

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XEvent$Buffer org.lwjgl.system.linux.XEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XEvent.malloc(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def nxcreatewindow(arg0: int) -> 'XCreateWindowEvent':
        """public static org.lwjgl.system.linux.XCreateWindowEvent org.lwjgl.system.linux.XEvent.nxcreatewindow(long)"""
        return XCreateWindowEvent._wrap(_XEvent.nxcreatewindow(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nxselection(arg0: int) -> 'XSelectionEvent':
        """public static org.lwjgl.system.linux.XSelectionEvent org.lwjgl.system.linux.XEvent.nxselection(long)"""
        return XSelectionEvent._wrap(_XEvent.nxselection(_long.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def xnoexpose(self) -> 'XNoExposeEvent':
        """public org.lwjgl.system.linux.XNoExposeEvent org.lwjgl.system.linux.XEvent.xnoexpose()"""
        return 'XNoExposeEvent'._wrap(super(XEvent, self).xnoexpose())

    @overload
    def xresizerequest(self) -> 'XResizeRequestEvent':
        """public org.lwjgl.system.linux.XResizeRequestEvent org.lwjgl.system.linux.XEvent.xresizerequest()"""
        return 'XResizeRequestEvent'._wrap(super(XEvent, self).xresizerequest())

    @staticmethod
    @overload
    def nxmap(arg0: int) -> 'XMapEvent':
        """public static org.lwjgl.system.linux.XMapEvent org.lwjgl.system.linux.XEvent.nxmap(long)"""
        return XMapEvent._wrap(_XEvent.nxmap(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nxerror(arg0: int) -> 'XErrorEvent':
        """public static org.lwjgl.system.linux.XErrorEvent org.lwjgl.system.linux.XEvent.nxerror(long)"""
        return XErrorEvent._wrap(_XEvent.nxerror(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nxgeneric(arg0: int) -> 'XGenericEvent':
        """public static org.lwjgl.system.linux.XGenericEvent org.lwjgl.system.linux.XEvent.nxgeneric(long)"""
        return XGenericEvent._wrap(_XEvent.nxgeneric(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nxreparent(arg0: int) -> 'XReparentEvent':
        """public static org.lwjgl.system.linux.XReparentEvent org.lwjgl.system.linux.XEvent.nxreparent(long)"""
        return XReparentEvent._wrap(_XEvent.nxreparent(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nxconfigurerequest(arg0: int) -> 'XConfigureRequestEvent':
        """public static org.lwjgl.system.linux.XConfigureRequestEvent org.lwjgl.system.linux.XEvent.nxconfigurerequest(long)"""
        return XConfigureRequestEvent._wrap(_XEvent.nxconfigurerequest(_long.valueOf(arg0)))

    @overload
    def xreparent(self) -> 'XReparentEvent':
        """public org.lwjgl.system.linux.XReparentEvent org.lwjgl.system.linux.XEvent.xreparent()"""
        return 'XReparentEvent'._wrap(super(XEvent, self).xreparent())

    @staticmethod
    @overload
    def nxcolormap(arg0: int) -> 'XColormapEvent':
        """public static org.lwjgl.system.linux.XColormapEvent org.lwjgl.system.linux.XEvent.nxcolormap(long)"""
        return XColormapEvent._wrap(_XEvent.nxcolormap(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nxselectionrequest(arg0: int) -> 'XSelectionRequestEvent':
        """public static org.lwjgl.system.linux.XSelectionRequestEvent org.lwjgl.system.linux.XEvent.nxselectionrequest(long)"""
        return XSelectionRequestEvent._wrap(_XEvent.nxselectionrequest(_long.valueOf(arg0)))

    @overload
    def xgraphicsexpose(self) -> 'XGraphicsExposeEvent':
        """public org.lwjgl.system.linux.XGraphicsExposeEvent org.lwjgl.system.linux.XEvent.xgraphicsexpose()"""
        return 'XGraphicsExposeEvent'._wrap(super(XEvent, self).xgraphicsexpose())

    @overload
    def xcirculate(self) -> 'XCirculateEvent':
        """public org.lwjgl.system.linux.XCirculateEvent org.lwjgl.system.linux.XEvent.xcirculate()"""
        return 'XCirculateEvent'._wrap(super(XEvent, self).xcirculate())

    @overload
    def xproperty(self) -> 'XPropertyEvent':
        """public org.lwjgl.system.linux.XPropertyEvent org.lwjgl.system.linux.XEvent.xproperty()"""
        return 'XPropertyEvent'._wrap(super(XEvent, self).xproperty())

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XEvent$Buffer org.lwjgl.system.linux.XEvent.calloc(int)"""
        return Buffer._wrap(_XEvent.calloc(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc() -> 'XEvent':
        """public static org.lwjgl.system.linux.XEvent org.lwjgl.system.linux.XEvent.malloc()"""
        return XEvent._wrap(_XEvent.malloc())

    @staticmethod
    @overload
    def nxkeymap(arg0: int) -> 'XKeymapEvent':
        """public static org.lwjgl.system.linux.XKeymapEvent org.lwjgl.system.linux.XEvent.nxkeymap(long)"""
        return XKeymapEvent._wrap(_XEvent.nxkeymap(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nxcookie(arg0: int) -> 'XGenericEventCookie':
        """public static org.lwjgl.system.linux.XGenericEventCookie org.lwjgl.system.linux.XEvent.nxcookie(long)"""
        return XGenericEventCookie._wrap(_XEvent.nxcookie(_long.valueOf(arg0)))

    @overload
    def xmapping(self) -> 'XMappingEvent':
        """public org.lwjgl.system.linux.XMappingEvent org.lwjgl.system.linux.XEvent.xmapping()"""
        return 'XMappingEvent'._wrap(super(XEvent, self).xmapping())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XEvent(java.nio.ByteBuffer)"""
        val = _XEvent(arg0)
        self.__wrapper = val

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def xany(self) -> 'XAnyEvent':
        """public org.lwjgl.system.linux.XAnyEvent org.lwjgl.system.linux.XEvent.xany()"""
        return 'XAnyEvent'._wrap(super(XEvent, self).xany())

    @staticmethod
    @overload
    def nxselectionclear(arg0: int) -> 'XSelectionClearEvent':
        """public static org.lwjgl.system.linux.XSelectionClearEvent org.lwjgl.system.linux.XEvent.nxselectionclear(long)"""
        return XSelectionClearEvent._wrap(_XEvent.nxselectionclear(_long.valueOf(arg0)))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @staticmethod
    @overload
    def nxexpose(arg0: int) -> 'XExposeEvent':
        """public static org.lwjgl.system.linux.XExposeEvent org.lwjgl.system.linux.XEvent.nxexpose(long)"""
        return XExposeEvent._wrap(_XEvent.nxexpose(_long.valueOf(arg0)))

    @overload
    def xcrossing(self) -> 'XCrossingEvent':
        """public org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XEvent.xcrossing()"""
        return 'XCrossingEvent'._wrap(super(XEvent, self).xcrossing())

    @overload
    def xcookie(self) -> 'XGenericEventCookie':
        """public org.lwjgl.system.linux.XGenericEventCookie org.lwjgl.system.linux.XEvent.xcookie()"""
        return 'XGenericEventCookie'._wrap(super(XEvent, self).xcookie())

    @staticmethod
    @overload
    def nxclient(arg0: int) -> 'XClientMessageEvent':
        """public static org.lwjgl.system.linux.XClientMessageEvent org.lwjgl.system.linux.XEvent.nxclient(long)"""
        return XClientMessageEvent._wrap(_XEvent.nxclient(_long.valueOf(arg0)))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool._wrap(super(_pyglsystem.Struct, self).isNull(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def nxcrossing(arg0: int) -> 'XCrossingEvent':
        """public static org.lwjgl.system.linux.XCrossingEvent org.lwjgl.system.linux.XEvent.nxcrossing(long)"""
        return XCrossingEvent._wrap(_XEvent.nxcrossing(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nxproperty(arg0: int) -> 'XPropertyEvent':
        """public static org.lwjgl.system.linux.XPropertyEvent org.lwjgl.system.linux.XEvent.nxproperty(long)"""
        return XPropertyEvent._wrap(_XEvent.nxproperty(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nxmaprequest(arg0: int) -> 'XMapRequestEvent':
        """public static org.lwjgl.system.linux.XMapRequestEvent org.lwjgl.system.linux.XEvent.nxmaprequest(long)"""
        return XMapRequestEvent._wrap(_XEvent.nxmaprequest(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XEvent$Buffer org.lwjgl.system.linux.XEvent.create(int)"""
        return Buffer._wrap(_XEvent.create(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def nxmapping(arg0: int) -> 'XMappingEvent':
        """public static org.lwjgl.system.linux.XMappingEvent org.lwjgl.system.linux.XEvent.nxmapping(long)"""
        return XMappingEvent._wrap(_XEvent.nxmapping(_long.valueOf(arg0)))

    @overload
    def xunmap(self) -> 'XUnmapEvent':
        """public org.lwjgl.system.linux.XUnmapEvent org.lwjgl.system.linux.XEvent.xunmap()"""
        return 'XUnmapEvent'._wrap(super(XEvent, self).xunmap())

    @staticmethod
    @overload
    def calloc() -> 'XEvent':
        """public static org.lwjgl.system.linux.XEvent org.lwjgl.system.linux.XEvent.calloc()"""
        return XEvent._wrap(_XEvent.calloc())

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XEvent$Buffer org.lwjgl.system.linux.XEvent.mallocStack(int)"""
        return Buffer._wrap(_XEvent.mallocStack(_int.valueOf(arg0)))

    @overload
    def xcolormap(self) -> 'XColormapEvent':
        """public org.lwjgl.system.linux.XColormapEvent org.lwjgl.system.linux.XEvent.xcolormap()"""
        return 'XColormapEvent'._wrap(super(XEvent, self).xcolormap())

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XEvent':
        """public static org.lwjgl.system.linux.XEvent org.lwjgl.system.linux.XEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XEvent._wrap(_XEvent.calloc(arg0))

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XEvent$Buffer org.lwjgl.system.linux.XEvent.callocStack(int)"""
        return Buffer._wrap(_XEvent.callocStack(_int.valueOf(arg0)))

    @overload
    def xdestroywindow(self) -> 'XDestroyWindowEvent':
        """public org.lwjgl.system.linux.XDestroyWindowEvent org.lwjgl.system.linux.XEvent.xdestroywindow()"""
        return 'XDestroyWindowEvent'._wrap(super(XEvent, self).xdestroywindow())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @staticmethod
    @overload
    def nxkey(arg0: int) -> 'XKeyEvent':
        """public static org.lwjgl.system.linux.XKeyEvent org.lwjgl.system.linux.XEvent.nxkey(long)"""
        return XKeyEvent._wrap(_XEvent.nxkey(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack() -> 'XEvent':
        """public static org.lwjgl.system.linux.XEvent org.lwjgl.system.linux.XEvent.callocStack()"""
        return XEvent._wrap(_XEvent.callocStack())

    @staticmethod
    @overload
    def nxmotion(arg0: int) -> 'XMotionEvent':
        """public static org.lwjgl.system.linux.XMotionEvent org.lwjgl.system.linux.XEvent.nxmotion(long)"""
        return XMotionEvent._wrap(_XEvent.nxmotion(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nxgraphicsexpose(arg0: int) -> 'XGraphicsExposeEvent':
        """public static org.lwjgl.system.linux.XGraphicsExposeEvent org.lwjgl.system.linux.XEvent.nxgraphicsexpose(long)"""
        return XGraphicsExposeEvent._wrap(_XEvent.nxgraphicsexpose(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XEvent$Buffer org.lwjgl.system.linux.XEvent.createSafe(long,int)"""
        return Buffer._wrap(_XEvent.createSafe(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def nxresizerequest(arg0: int) -> 'XResizeRequestEvent':
        """public static org.lwjgl.system.linux.XResizeRequestEvent org.lwjgl.system.linux.XEvent.nxresizerequest(long)"""
        return XResizeRequestEvent._wrap(_XEvent.nxresizerequest(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'XEvent':
        """public static org.lwjgl.system.linux.XEvent org.lwjgl.system.linux.XEvent.create(long)"""
        return XEvent._wrap(_XEvent.create(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XEvent':
        """public static org.lwjgl.system.linux.XEvent org.lwjgl.system.linux.XEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XEvent._wrap(_XEvent.callocStack(arg0))

    @staticmethod
    @overload
    def nxvisibility(arg0: int) -> 'XVisibilityEvent':
        """public static org.lwjgl.system.linux.XVisibilityEvent org.lwjgl.system.linux.XEvent.nxvisibility(long)"""
        return XVisibilityEvent._wrap(_XEvent.nxvisibility(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nxcirculate(arg0: int) -> 'XCirculateEvent':
        """public static org.lwjgl.system.linux.XCirculateEvent org.lwjgl.system.linux.XEvent.nxcirculate(long)"""
        return XCirculateEvent._wrap(_XEvent.nxcirculate(_long.valueOf(arg0)))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XEvent.type()"""
        return int._wrap(super(XEvent, self).type())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XEvent.sizeof()"""
        return int._wrap(super(XEvent, self).sizeof())

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XEvent$Buffer org.lwjgl.system.linux.XEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XEvent.callocStack(_int.valueOf(arg0), arg1))

    @overload
    def xconfigure(self) -> 'XConfigureEvent':
        """public org.lwjgl.system.linux.XConfigureEvent org.lwjgl.system.linux.XEvent.xconfigure()"""
        return 'XConfigureEvent'._wrap(super(XEvent, self).xconfigure())

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XEvent$Buffer org.lwjgl.system.linux.XEvent.malloc(int)"""
        return Buffer._wrap(_XEvent.malloc(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XEvent$Buffer org.lwjgl.system.linux.XEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XEvent.mallocStack(_int.valueOf(arg0), arg1))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @staticmethod
    @overload
    def nxdestroywindow(arg0: int) -> 'XDestroyWindowEvent':
        """public static org.lwjgl.system.linux.XDestroyWindowEvent org.lwjgl.system.linux.XEvent.nxdestroywindow(long)"""
        return XDestroyWindowEvent._wrap(_XEvent.nxdestroywindow(_long.valueOf(arg0)))

    @overload
    def xselection(self) -> 'XSelectionEvent':
        """public org.lwjgl.system.linux.XSelectionEvent org.lwjgl.system.linux.XEvent.xselection()"""
        return 'XSelectionEvent'._wrap(super(XEvent, self).xselection())

    @overload
    def xerror(self) -> 'XErrorEvent':
        """public org.lwjgl.system.linux.XErrorEvent org.lwjgl.system.linux.XEvent.xerror()"""
        return 'XErrorEvent'._wrap(super(XEvent, self).xerror())

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XEvent$Buffer org.lwjgl.system.linux.XEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XEvent.calloc(_int.valueOf(arg0), arg1))

    @overload
    def xkeymap(self) -> 'XKeymapEvent':
        """public org.lwjgl.system.linux.XKeymapEvent org.lwjgl.system.linux.XEvent.xkeymap()"""
        return 'XKeymapEvent'._wrap(super(XEvent, self).xkeymap())

    @overload
    def xcirculaterequest(self) -> 'XCirculateRequestEvent':
        """public org.lwjgl.system.linux.XCirculateRequestEvent org.lwjgl.system.linux.XEvent.xcirculaterequest()"""
        return 'XCirculateRequestEvent'._wrap(super(XEvent, self).xcirculaterequest())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).address())

    @overload
    def xmaprequest(self) -> 'XMapRequestEvent':
        """public org.lwjgl.system.linux.XMapRequestEvent org.lwjgl.system.linux.XEvent.xmaprequest()"""
        return 'XMapRequestEvent'._wrap(super(XEvent, self).xmaprequest())

    @staticmethod
    @overload
    def nxcirculaterequest(arg0: int) -> 'XCirculateRequestEvent':
        """public static org.lwjgl.system.linux.XCirculateRequestEvent org.lwjgl.system.linux.XEvent.nxcirculaterequest(long)"""
        return XCirculateRequestEvent._wrap(_XEvent.nxcirculaterequest(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nxbutton(arg0: int) -> 'XButtonEvent':
        """public static org.lwjgl.system.linux.XButtonEvent org.lwjgl.system.linux.XEvent.nxbutton(long)"""
        return XButtonEvent._wrap(_XEvent.nxbutton(_long.valueOf(arg0)))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def xcreatewindow(self) -> 'XCreateWindowEvent':
        """public org.lwjgl.system.linux.XCreateWindowEvent org.lwjgl.system.linux.XEvent.xcreatewindow()"""
        return 'XCreateWindowEvent'._wrap(super(XEvent, self).xcreatewindow())

    @overload
    def xmap(self) -> 'XMapEvent':
        """public org.lwjgl.system.linux.XMapEvent org.lwjgl.system.linux.XEvent.xmap()"""
        return 'XMapEvent'._wrap(super(XEvent, self).xmap())

    @staticmethod
    @overload
    def nxnoexpose(arg0: int) -> 'XNoExposeEvent':
        """public static org.lwjgl.system.linux.XNoExposeEvent org.lwjgl.system.linux.XEvent.nxnoexpose(long)"""
        return XNoExposeEvent._wrap(_XEvent.nxnoexpose(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XEvent':
        """public static org.lwjgl.system.linux.XEvent org.lwjgl.system.linux.XEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XEvent._wrap(_XEvent.mallocStack(arg0))

    @staticmethod
    @overload
    def mallocStack() -> 'XEvent':
        """public static org.lwjgl.system.linux.XEvent org.lwjgl.system.linux.XEvent.mallocStack()"""
        return XEvent._wrap(_XEvent.mallocStack())

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XEvent':
        """public static org.lwjgl.system.linux.XEvent org.lwjgl.system.linux.XEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XEvent._wrap(_XEvent.malloc(arg0))

    @overload
    def xselectionclear(self) -> 'XSelectionClearEvent':
        """public org.lwjgl.system.linux.XSelectionClearEvent org.lwjgl.system.linux.XEvent.xselectionclear()"""
        return 'XSelectionClearEvent'._wrap(super(XEvent, self).xselectionclear())

    @overload
    def xgravity(self) -> 'XGravityEvent':
        """public org.lwjgl.system.linux.XGravityEvent org.lwjgl.system.linux.XEvent.xgravity()"""
        return 'XGravityEvent'._wrap(super(XEvent, self).xgravity())

    @staticmethod
    @overload
    def nxunmap(arg0: int) -> 'XUnmapEvent':
        """public static org.lwjgl.system.linux.XUnmapEvent org.lwjgl.system.linux.XEvent.nxunmap(long)"""
        return XUnmapEvent._wrap(_XEvent.nxunmap(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nxconfigure(arg0: int) -> 'XConfigureEvent':
        """public static org.lwjgl.system.linux.XConfigureEvent org.lwjgl.system.linux.XEvent.nxconfigure(long)"""
        return XConfigureEvent._wrap(_XEvent.nxconfigure(_long.valueOf(arg0)))

    @overload
    def xbutton(self) -> 'XButtonEvent':
        """public org.lwjgl.system.linux.XButtonEvent org.lwjgl.system.linux.XEvent.xbutton()"""
        return 'XButtonEvent'._wrap(super(XEvent, self).xbutton())

    @overload
    def xconfigurerequest(self) -> 'XConfigureRequestEvent':
        """public org.lwjgl.system.linux.XConfigureRequestEvent org.lwjgl.system.linux.XEvent.xconfigurerequest()"""
        return 'XConfigureRequestEvent'._wrap(super(XEvent, self).xconfigurerequest())

    @overload
    def xkey(self) -> 'XKeyEvent':
        """public org.lwjgl.system.linux.XKeyEvent org.lwjgl.system.linux.XEvent.xkey()"""
        return 'XKeyEvent'._wrap(super(XEvent, self).xkey())

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XEvent.ntype(long)"""
        return int._wrap(_XEvent.ntype(_long.valueOf(arg0)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str._wrap(super(pyglsystem.Pointer$Default, self).toString())

    @overload
    def xmotion(self) -> 'XMotionEvent':
        """public org.lwjgl.system.linux.XMotionEvent org.lwjgl.system.linux.XEvent.xmotion()"""
        return 'XMotionEvent'._wrap(super(XEvent, self).xmotion()) 
 
 
# CLASS: org.lwjgl.system.linux.XGravityEvent$Buffer
from pyquantum_helper import import_once as _import_once
import java.lang.Object as _Object
_Object = _Object
from builtins import type
import org.lwjgl.system.CustomBuffer as _CustomBuffer
_CustomBuffer = _CustomBuffer
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Boolean as _boolean
import org.lwjgl.system.StructBuffer as _StructBuffer
_StructBuffer = _StructBuffer
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import org.lwjgl.system.linux.XGravityEvent as _XGravityEvent_Buffer
_Buffer = _XGravityEvent_Buffer.Buffer
import java.util.Iterator as _Iterator
_Iterator = _Iterator
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
import java.util.Spliterator as _Spliterator
_Spliterator = _Spliterator
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.util.Iterator as Iterator
import java.lang.Integer as _int
import java.util.stream.Stream as _Stream
_Stream = _Stream
import java.util.stream.Stream as Stream
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class Buffer():
    """org.lwjgl.system.linux.XGravityEvent.Buffer"""
 
    @staticmethod
    def _wrap(java_value: _Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Buffer__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Buffer__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def x(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XGravityEvent$Buffer org.lwjgl.system.linux.XGravityEvent$Buffer.x(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).x(_int.valueOf(arg0)))

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XGravityEvent$Buffer.display()"""
        return int._wrap(super(Buffer, self).display())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).limit(_int.valueOf(arg0)))

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XGravityEvent$Buffer(long,int)"""
        val = _Buffer(_long.valueOf(arg0), _int.valueOf(arg1))
        self.__wrapper = val

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address0())

    @overload
    def y(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XGravityEvent$Buffer org.lwjgl.system.linux.XGravityEvent$Buffer.y(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).y(_int.valueOf(arg0)))

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XGravityEvent$Buffer org.lwjgl.system.linux.XGravityEvent$Buffer.type(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).type(_int.valueOf(arg0)))

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XGravityEvent$Buffer.window()"""
        return int._wrap(super(Buffer, self).window())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @overload
    def y(self) -> int:
        """public int org.lwjgl.system.linux.XGravityEvent$Buffer.y()"""
        return int._wrap(super(Buffer, self).y())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str._wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int._wrap(super(_pyglsystem.CustomBuffer, self).address(_int.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'._wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).stream())

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).position(_int.valueOf(arg0)))

    @overload
    def window(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XGravityEvent$Buffer org.lwjgl.system.linux.XGravityEvent$Buffer.window(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).window(_long.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'._wrap(super(pyglsystem.StructBuffer, self).get())

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def event(self) -> int:
        """public long org.lwjgl.system.linux.XGravityEvent$Buffer.event()"""
        return int._wrap(super(Buffer, self).event())

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XGravityEvent$Buffer.send_event()"""
        return bool._wrap(super(Buffer, self).send_event())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(arg0))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XGravityEvent$Buffer org.lwjgl.system.linux.XGravityEvent$Buffer.serial(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).serial(_long.valueOf(arg0)))

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'._wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XGravityEvent$Buffer org.lwjgl.system.linux.XGravityEvent$Buffer.display(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).display(_long.valueOf(arg0)))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XGravityEvent$Buffer.type()"""
        return int._wrap(super(Buffer, self).type())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(arg0))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XGravityEvent$Buffer.serial()"""
        return int._wrap(super(Buffer, self).serial())

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).slice())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).slice(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def event(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XGravityEvent$Buffer org.lwjgl.system.linux.XGravityEvent$Buffer.event(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).event(_long.valueOf(arg0)))

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0), arg1))

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(_int.valueOf(arg0), arg1))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).clear())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool._wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).flip())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int._wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(_int.valueOf(arg0), arg1))

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(_pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XGravityEvent$Buffer org.lwjgl.system.linux.XGravityEvent$Buffer.send_event(boolean)"""
        return 'Buffer'._wrap(super(_Buffer, self).send_event(_boolean.valueOf(arg0)))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def x(self) -> int:
        """public int org.lwjgl.system.linux.XGravityEvent$Buffer.x()"""
        return int._wrap(super(Buffer, self).x())

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(arg0))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XGravityEvent$Buffer(java.nio.ByteBuffer)"""
        val = _Buffer(arg0)
        self.__wrapper = val 
 
 
# CLASS: org.lwjgl.system.linux.XCreateWindowEvent$Buffer
from pyquantum_helper import import_once as _import_once
import java.lang.Object as _Object
_Object = _Object
from builtins import type
import org.lwjgl.system.CustomBuffer as _CustomBuffer
_CustomBuffer = _CustomBuffer
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Boolean as _boolean
import org.lwjgl.system.StructBuffer as _StructBuffer
_StructBuffer = _StructBuffer
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.util.Iterator as _Iterator
_Iterator = _Iterator
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
import java.util.Spliterator as _Spliterator
_Spliterator = _Spliterator
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import org.lwjgl.system.linux.XCreateWindowEvent as _XCreateWindowEvent_Buffer
_Buffer = _XCreateWindowEvent_Buffer.Buffer
import java.util.Iterator as Iterator
import java.lang.Integer as _int
import java.util.stream.Stream as _Stream
_Stream = _Stream
import java.util.stream.Stream as Stream
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class Buffer():
    """org.lwjgl.system.linux.XCreateWindowEvent.Buffer"""
 
    @staticmethod
    def _wrap(java_value: _Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Buffer__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Buffer__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).limit(_int.valueOf(arg0)))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XCreateWindowEvent$Buffer.type()"""
        return int._wrap(super(Buffer, self).type())

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address())

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XCreateWindowEvent$Buffer org.lwjgl.system.linux.XCreateWindowEvent$Buffer.send_event(boolean)"""
        return 'Buffer'._wrap(super(_Buffer, self).send_event(_boolean.valueOf(arg0)))

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str._wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int._wrap(super(_pyglsystem.CustomBuffer, self).address(_int.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).mark())

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XCreateWindowEvent$Buffer.send_event()"""
        return bool._wrap(super(Buffer, self).send_event())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'._wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XCreateWindowEvent$Buffer.serial()"""
        return int._wrap(super(Buffer, self).serial())

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).stream())

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).position(_int.valueOf(arg0)))

    @overload
    def override_redirect(self) -> int:
        """public int org.lwjgl.system.linux.XCreateWindowEvent$Buffer.override_redirect()"""
        return int._wrap(super(Buffer, self).override_redirect())

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XCreateWindowEvent$Buffer.display()"""
        return int._wrap(super(Buffer, self).display())

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'._wrap(super(pyglsystem.StructBuffer, self).get())

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XCreateWindowEvent$Buffer(long,int)"""
        val = _Buffer(_long.valueOf(arg0), _int.valueOf(arg1))
        self.__wrapper = val

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XCreateWindowEvent$Buffer(java.nio.ByteBuffer)"""
        val = _Buffer(arg0)
        self.__wrapper = val

    @overload
    def height(self) -> int:
        """public int org.lwjgl.system.linux.XCreateWindowEvent$Buffer.height()"""
        return int._wrap(super(Buffer, self).height())

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCreateWindowEvent$Buffer org.lwjgl.system.linux.XCreateWindowEvent$Buffer.serial(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).serial(_long.valueOf(arg0)))

    @overload
    def width(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCreateWindowEvent$Buffer org.lwjgl.system.linux.XCreateWindowEvent$Buffer.width(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).width(_int.valueOf(arg0)))

    @overload
    def border_width(self) -> int:
        """public int org.lwjgl.system.linux.XCreateWindowEvent$Buffer.border_width()"""
        return int._wrap(super(Buffer, self).border_width())

    @overload
    def window(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCreateWindowEvent$Buffer org.lwjgl.system.linux.XCreateWindowEvent$Buffer.window(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).window(_long.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def parent(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCreateWindowEvent$Buffer org.lwjgl.system.linux.XCreateWindowEvent$Buffer.parent(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).parent(_long.valueOf(arg0)))

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def parent(self) -> int:
        """public long org.lwjgl.system.linux.XCreateWindowEvent$Buffer.parent()"""
        return int._wrap(super(Buffer, self).parent())

    @overload
    def x(self) -> int:
        """public int org.lwjgl.system.linux.XCreateWindowEvent$Buffer.x()"""
        return int._wrap(super(Buffer, self).x())

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XCreateWindowEvent$Buffer.window()"""
        return int._wrap(super(Buffer, self).window())

    @overload
    def width(self) -> int:
        """public int org.lwjgl.system.linux.XCreateWindowEvent$Buffer.width()"""
        return int._wrap(super(Buffer, self).width())

    @overload
    def y(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCreateWindowEvent$Buffer org.lwjgl.system.linux.XCreateWindowEvent$Buffer.y(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).y(_int.valueOf(arg0)))

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(arg0))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'._wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def border_width(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCreateWindowEvent$Buffer org.lwjgl.system.linux.XCreateWindowEvent$Buffer.border_width(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).border_width(_int.valueOf(arg0)))

    @overload
    def override_redirect(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCreateWindowEvent$Buffer org.lwjgl.system.linux.XCreateWindowEvent$Buffer.override_redirect(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).override_redirect(_int.valueOf(arg0)))

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(arg0))

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCreateWindowEvent$Buffer org.lwjgl.system.linux.XCreateWindowEvent$Buffer.type(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).type(_int.valueOf(arg0)))

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).slice())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).slice(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0), arg1))

    @overload
    def x(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCreateWindowEvent$Buffer org.lwjgl.system.linux.XCreateWindowEvent$Buffer.x(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).x(_int.valueOf(arg0)))

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(_int.valueOf(arg0), arg1))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).clear())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool._wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).flip())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int._wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def height(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCreateWindowEvent$Buffer org.lwjgl.system.linux.XCreateWindowEvent$Buffer.height(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).height(_int.valueOf(arg0)))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(_int.valueOf(arg0), arg1))

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def y(self) -> int:
        """public int org.lwjgl.system.linux.XCreateWindowEvent$Buffer.y()"""
        return int._wrap(super(Buffer, self).y())

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(_pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCreateWindowEvent$Buffer org.lwjgl.system.linux.XCreateWindowEvent$Buffer.display(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).display(_long.valueOf(arg0)))

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(arg0)) 
 
 
# CLASS: org.lwjgl.system.linux.XSelectionEvent$Buffer
from pyquantum_helper import import_once as _import_once
import java.lang.Object as _Object
_Object = _Object
from builtins import type
import org.lwjgl.system.CustomBuffer as _CustomBuffer
_CustomBuffer = _CustomBuffer
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import org.lwjgl.system.linux.XSelectionEvent as _XSelectionEvent_Buffer
_Buffer = _XSelectionEvent_Buffer.Buffer
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Boolean as _boolean
import org.lwjgl.system.StructBuffer as _StructBuffer
_StructBuffer = _StructBuffer
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.util.Iterator as _Iterator
_Iterator = _Iterator
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
import java.util.Spliterator as _Spliterator
_Spliterator = _Spliterator
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.util.Iterator as Iterator
import java.lang.Integer as _int
import java.util.stream.Stream as _Stream
_Stream = _Stream
import java.util.stream.Stream as Stream
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class Buffer():
    """org.lwjgl.system.linux.XSelectionEvent.Buffer"""
 
    @staticmethod
    def _wrap(java_value: _Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Buffer__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Buffer__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).limit(_int.valueOf(arg0)))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address())

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XSelectionEvent$Buffer.send_event()"""
        return bool._wrap(super(Buffer, self).send_event())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str._wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int._wrap(super(_pyglsystem.CustomBuffer, self).address(_int.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).mark())

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionEvent$Buffer.display()"""
        return int._wrap(super(Buffer, self).display())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'._wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).stream())

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).position(_int.valueOf(arg0)))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XSelectionEvent$Buffer.type()"""
        return int._wrap(super(Buffer, self).type())

    @overload
    def selection(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionEvent$Buffer.selection()"""
        return int._wrap(super(Buffer, self).selection())

    @overload
    def requestor(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionEvent$Buffer.requestor()"""
        return int._wrap(super(Buffer, self).requestor())

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'._wrap(super(pyglsystem.StructBuffer, self).get())

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def selection(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSelectionEvent$Buffer org.lwjgl.system.linux.XSelectionEvent$Buffer.selection(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).selection(_long.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSelectionEvent$Buffer org.lwjgl.system.linux.XSelectionEvent$Buffer.serial(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).serial(_long.valueOf(arg0)))

    @overload
    def target(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionEvent$Buffer.target()"""
        return int._wrap(super(Buffer, self).target())

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def property(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSelectionEvent$Buffer org.lwjgl.system.linux.XSelectionEvent$Buffer.property(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).property(_long.valueOf(arg0)))

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSelectionEvent$Buffer org.lwjgl.system.linux.XSelectionEvent$Buffer.type(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).type(_int.valueOf(arg0)))

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(arg0))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def time(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSelectionEvent$Buffer org.lwjgl.system.linux.XSelectionEvent$Buffer.time(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).time(_long.valueOf(arg0)))

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'._wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XSelectionEvent$Buffer org.lwjgl.system.linux.XSelectionEvent$Buffer.send_event(boolean)"""
        return 'Buffer'._wrap(super(_Buffer, self).send_event(_boolean.valueOf(arg0)))

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(arg0))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionEvent$Buffer.serial()"""
        return int._wrap(super(Buffer, self).serial())

    @overload
    def property(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionEvent$Buffer.property()"""
        return int._wrap(super(Buffer, self).property())

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).slice())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).slice(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def target(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSelectionEvent$Buffer org.lwjgl.system.linux.XSelectionEvent$Buffer.target(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).target(_long.valueOf(arg0)))

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0), arg1))

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(_int.valueOf(arg0), arg1))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).clear())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool._wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @overload
    def requestor(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSelectionEvent$Buffer org.lwjgl.system.linux.XSelectionEvent$Buffer.requestor(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).requestor(_long.valueOf(arg0)))

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).flip())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int._wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSelectionEvent$Buffer org.lwjgl.system.linux.XSelectionEvent$Buffer.display(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).display(_long.valueOf(arg0)))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(_int.valueOf(arg0), arg1))

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(_pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XSelectionEvent$Buffer(java.nio.ByteBuffer)"""
        val = _Buffer(arg0)
        self.__wrapper = val

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XSelectionEvent$Buffer(long,int)"""
        val = _Buffer(_long.valueOf(arg0), _int.valueOf(arg1))
        self.__wrapper = val

    @overload
    def time(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionEvent$Buffer.time()"""
        return int._wrap(super(Buffer, self).time())

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(arg0)) 
 
 
# CLASS: org.lwjgl.system.linux.XSelectionClearEvent$Buffer
from pyquantum_helper import import_once as _import_once
import java.lang.Object as _Object
_Object = _Object
from builtins import type
import org.lwjgl.system.CustomBuffer as _CustomBuffer
_CustomBuffer = _CustomBuffer
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import org.lwjgl.system.linux.XSelectionClearEvent as _XSelectionClearEvent_Buffer
_Buffer = _XSelectionClearEvent_Buffer.Buffer
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Boolean as _boolean
import org.lwjgl.system.StructBuffer as _StructBuffer
_StructBuffer = _StructBuffer
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.util.Iterator as _Iterator
_Iterator = _Iterator
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
import java.util.Spliterator as _Spliterator
_Spliterator = _Spliterator
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.util.Iterator as Iterator
import java.lang.Integer as _int
import java.util.stream.Stream as _Stream
_Stream = _Stream
import java.util.stream.Stream as Stream
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class Buffer():
    """org.lwjgl.system.linux.XSelectionClearEvent.Buffer"""
 
    @staticmethod
    def _wrap(java_value: _Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Buffer__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Buffer__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).limit(_int.valueOf(arg0)))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address0())

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSelectionClearEvent$Buffer org.lwjgl.system.linux.XSelectionClearEvent$Buffer.type(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).type(_int.valueOf(arg0)))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionClearEvent$Buffer.serial()"""
        return int._wrap(super(Buffer, self).serial())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str._wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int._wrap(super(_pyglsystem.CustomBuffer, self).address(_int.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).mark())

    @overload
    def time(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionClearEvent$Buffer.time()"""
        return int._wrap(super(Buffer, self).time())

    @overload
    def time(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSelectionClearEvent$Buffer org.lwjgl.system.linux.XSelectionClearEvent$Buffer.time(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).time(_long.valueOf(arg0)))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XSelectionClearEvent$Buffer.type()"""
        return int._wrap(super(Buffer, self).type())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'._wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).stream())

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).position(_int.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'._wrap(super(pyglsystem.StructBuffer, self).get())

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XSelectionClearEvent$Buffer(java.nio.ByteBuffer)"""
        val = _Buffer(arg0)
        self.__wrapper = val

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSelectionClearEvent$Buffer org.lwjgl.system.linux.XSelectionClearEvent$Buffer.serial(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).serial(_long.valueOf(arg0)))

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionClearEvent$Buffer.display()"""
        return int._wrap(super(Buffer, self).display())

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XSelectionClearEvent$Buffer org.lwjgl.system.linux.XSelectionClearEvent$Buffer.send_event(boolean)"""
        return 'Buffer'._wrap(super(_Buffer, self).send_event(_boolean.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def selection(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSelectionClearEvent$Buffer org.lwjgl.system.linux.XSelectionClearEvent$Buffer.selection(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).selection(_long.valueOf(arg0)))

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(arg0))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XSelectionClearEvent$Buffer.send_event()"""
        return bool._wrap(super(Buffer, self).send_event())

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'._wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(arg0))

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSelectionClearEvent$Buffer org.lwjgl.system.linux.XSelectionClearEvent$Buffer.display(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).display(_long.valueOf(arg0)))

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).slice())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).slice(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionClearEvent$Buffer.window()"""
        return int._wrap(super(Buffer, self).window())

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0), arg1))

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XSelectionClearEvent$Buffer(long,int)"""
        val = _Buffer(_long.valueOf(arg0), _int.valueOf(arg1))
        self.__wrapper = val

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(_int.valueOf(arg0), arg1))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).clear())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool._wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).flip())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int._wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(_int.valueOf(arg0), arg1))

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def window(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XSelectionClearEvent$Buffer org.lwjgl.system.linux.XSelectionClearEvent$Buffer.window(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).window(_long.valueOf(arg0)))

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(_pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def selection(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionClearEvent$Buffer.selection()"""
        return int._wrap(super(Buffer, self).selection())

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(arg0)) 
 
 
# CLASS: org.lwjgl.system.linux.XExposeEvent$Buffer
from pyquantum_helper import import_once as _import_once
import java.lang.Object as _Object
_Object = _Object
from builtins import type
import org.lwjgl.system.CustomBuffer as _CustomBuffer
_CustomBuffer = _CustomBuffer
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import org.lwjgl.system.linux.XExposeEvent as _XExposeEvent_Buffer
_Buffer = _XExposeEvent_Buffer.Buffer
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Boolean as _boolean
import org.lwjgl.system.StructBuffer as _StructBuffer
_StructBuffer = _StructBuffer
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.util.Iterator as _Iterator
_Iterator = _Iterator
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
import java.util.Spliterator as _Spliterator
_Spliterator = _Spliterator
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.util.Iterator as Iterator
import java.lang.Integer as _int
import java.util.stream.Stream as _Stream
_Stream = _Stream
import java.util.stream.Stream as Stream
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class Buffer():
    """org.lwjgl.system.linux.XExposeEvent.Buffer"""
 
    @staticmethod
    def _wrap(java_value: _Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Buffer__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Buffer__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def count(self) -> int:
        """public int org.lwjgl.system.linux.XExposeEvent$Buffer.count()"""
        return int._wrap(super(Buffer, self).count())

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XExposeEvent$Buffer(long,int)"""
        val = _Buffer(_long.valueOf(arg0), _int.valueOf(arg1))
        self.__wrapper = val

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).limit(_int.valueOf(arg0)))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address0())

    @overload
    def height(self) -> int:
        """public int org.lwjgl.system.linux.XExposeEvent$Buffer.height()"""
        return int._wrap(super(Buffer, self).height())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address())

    @overload
    def y(self) -> int:
        """public int org.lwjgl.system.linux.XExposeEvent$Buffer.y()"""
        return int._wrap(super(Buffer, self).y())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str._wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def count(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XExposeEvent$Buffer org.lwjgl.system.linux.XExposeEvent$Buffer.count(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).count(_int.valueOf(arg0)))

    @overload
    def width(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XExposeEvent$Buffer org.lwjgl.system.linux.XExposeEvent$Buffer.width(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).width(_int.valueOf(arg0)))

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XExposeEvent$Buffer org.lwjgl.system.linux.XExposeEvent$Buffer.send_event(boolean)"""
        return 'Buffer'._wrap(super(_Buffer, self).send_event(_boolean.valueOf(arg0)))

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int._wrap(super(_pyglsystem.CustomBuffer, self).address(_int.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).mark())

    @overload
    def height(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XExposeEvent$Buffer org.lwjgl.system.linux.XExposeEvent$Buffer.height(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).height(_int.valueOf(arg0)))

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XExposeEvent$Buffer org.lwjgl.system.linux.XExposeEvent$Buffer.serial(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).serial(_long.valueOf(arg0)))

    @overload
    def y(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XExposeEvent$Buffer org.lwjgl.system.linux.XExposeEvent$Buffer.y(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).y(_int.valueOf(arg0)))

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'._wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).stream())

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).position(_int.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'._wrap(super(pyglsystem.StructBuffer, self).get())

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XExposeEvent$Buffer org.lwjgl.system.linux.XExposeEvent$Buffer.display(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).display(_long.valueOf(arg0)))

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XExposeEvent$Buffer.window()"""
        return int._wrap(super(Buffer, self).window())

    @overload
    def x(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XExposeEvent$Buffer org.lwjgl.system.linux.XExposeEvent$Buffer.x(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).x(_int.valueOf(arg0)))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XExposeEvent$Buffer.serial()"""
        return int._wrap(super(Buffer, self).serial())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XExposeEvent$Buffer.type()"""
        return int._wrap(super(Buffer, self).type())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XExposeEvent$Buffer(java.nio.ByteBuffer)"""
        val = _Buffer(arg0)
        self.__wrapper = val

    @overload
    def x(self) -> int:
        """public int org.lwjgl.system.linux.XExposeEvent$Buffer.x()"""
        return int._wrap(super(Buffer, self).x())

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(arg0))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XExposeEvent$Buffer org.lwjgl.system.linux.XExposeEvent$Buffer.type(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).type(_int.valueOf(arg0)))

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'._wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def width(self) -> int:
        """public int org.lwjgl.system.linux.XExposeEvent$Buffer.width()"""
        return int._wrap(super(Buffer, self).width())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).slice())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).slice(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0), arg1))

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(_int.valueOf(arg0), arg1))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).clear())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool._wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).flip())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int._wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(_int.valueOf(arg0), arg1))

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(_pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XExposeEvent$Buffer.send_event()"""
        return bool._wrap(super(Buffer, self).send_event())

    @overload
    def window(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XExposeEvent$Buffer org.lwjgl.system.linux.XExposeEvent$Buffer.window(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).window(_long.valueOf(arg0)))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XExposeEvent$Buffer.display()"""
        return int._wrap(super(Buffer, self).display())

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(arg0)) 
 
 
# CLASS: org.lwjgl.system.linux.XMapEvent
from pyquantum_helper import import_once as _import_once
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _Object
_Object = _Object
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
from builtins import type
import org.lwjgl.system.linux.XMapEvent as _XMapEvent_Buffer
_Buffer = _XMapEvent_Buffer.Buffer
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.lang.Boolean as _boolean
import java.lang.Integer as _int
import org.lwjgl.system.linux.XMapEvent as _XMapEvent
_XMapEvent = _XMapEvent
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class XMapEvent():
    """org.lwjgl.system.linux.XMapEvent"""
 
    @staticmethod
    def _wrap(java_value: _XMapEvent) -> 'XMapEvent':
        return XMapEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _XMapEvent):
        """
        Dynamic initializer for XMapEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_XMapEvent__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_XMapEvent__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XMapEvent$Buffer org.lwjgl.system.linux.XMapEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XMapEvent.calloc(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XMapEvent$Buffer org.lwjgl.system.linux.XMapEvent.mallocStack(int)"""
        return Buffer._wrap(_XMapEvent.mallocStack(_int.valueOf(arg0)))

    @overload
    def override_redirect(self, arg0: int) -> 'XMapEvent':
        """public org.lwjgl.system.linux.XMapEvent org.lwjgl.system.linux.XMapEvent.override_redirect(int)"""
        return 'XMapEvent'._wrap(super(_XMapEvent, self).override_redirect(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XMapEvent$Buffer org.lwjgl.system.linux.XMapEvent.create(int)"""
        return Buffer._wrap(_XMapEvent.create(_int.valueOf(arg0)))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XMapEvent.nsend_event(long)"""
        return int._wrap(_XMapEvent.nsend_event(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMapEvent.ndisplay(long,long)"""
        _XMapEvent.ndisplay(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def calloc() -> 'XMapEvent':
        """public static org.lwjgl.system.linux.XMapEvent org.lwjgl.system.linux.XMapEvent.calloc()"""
        return XMapEvent._wrap(_XMapEvent.calloc())

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XMapEvent.send_event()"""
        return bool._wrap(super(XMapEvent, self).send_event())

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMapEvent.ntype(long,int)"""
        _XMapEvent.ntype(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XMapEvent.display()"""
        return int._wrap(super(XMapEvent, self).display())

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XMapEvent.serial()"""
        return int._wrap(super(XMapEvent, self).serial())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XMapEvent$Buffer org.lwjgl.system.linux.XMapEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XMapEvent.mallocStack(_int.valueOf(arg0), arg1))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @staticmethod
    @overload
    def malloc() -> 'XMapEvent':
        """public static org.lwjgl.system.linux.XMapEvent org.lwjgl.system.linux.XMapEvent.malloc()"""
        return XMapEvent._wrap(_XMapEvent.malloc())

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XMapEvent$Buffer org.lwjgl.system.linux.XMapEvent.calloc(int)"""
        return Buffer._wrap(_XMapEvent.calloc(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XMapEvent':
        """public static org.lwjgl.system.linux.XMapEvent org.lwjgl.system.linux.XMapEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XMapEvent._wrap(_XMapEvent.malloc(arg0))

    @overload
    def override_redirect(self) -> int:
        """public int org.lwjgl.system.linux.XMapEvent.override_redirect()"""
        return int._wrap(super(XMapEvent, self).override_redirect())

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XMapEvent$Buffer org.lwjgl.system.linux.XMapEvent.create(long,int)"""
        return Buffer._wrap(_XMapEvent.create(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def nevent(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XMapEvent.nevent(long)"""
        return int._wrap(_XMapEvent.nevent(_long.valueOf(arg0)))

    @overload
    def event(self, arg0: int) -> 'XMapEvent':
        """public org.lwjgl.system.linux.XMapEvent org.lwjgl.system.linux.XMapEvent.event(long)"""
        return 'XMapEvent'._wrap(super(_XMapEvent, self).event(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nwindow(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMapEvent.nwindow(long,long)"""
        _XMapEvent.nwindow(_long.valueOf(arg0), _long.valueOf(arg1))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @overload
    def type(self, arg0: int) -> 'XMapEvent':
        """public org.lwjgl.system.linux.XMapEvent org.lwjgl.system.linux.XMapEvent.type(int)"""
        return 'XMapEvent'._wrap(super(_XMapEvent, self).type(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        _Struct.validate(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), arg3)

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XMapEvent$Buffer org.lwjgl.system.linux.XMapEvent.malloc(int)"""
        return Buffer._wrap(_XMapEvent.malloc(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XMapEvent':
        """public static org.lwjgl.system.linux.XMapEvent org.lwjgl.system.linux.XMapEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XMapEvent._wrap(_XMapEvent.calloc(arg0))

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @staticmethod
    @overload
    def create(arg0: int) -> 'XMapEvent':
        """public static org.lwjgl.system.linux.XMapEvent org.lwjgl.system.linux.XMapEvent.create(long)"""
        return XMapEvent._wrap(_XMapEvent.create(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nwindow(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XMapEvent.nwindow(long)"""
        return int._wrap(_XMapEvent.nwindow(_long.valueOf(arg0)))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XMapEvent(java.nio.ByteBuffer)"""
        val = _XMapEvent(arg0)
        self.__wrapper = val

    @overload
    def send_event(self, arg0: bool) -> 'XMapEvent':
        """public org.lwjgl.system.linux.XMapEvent org.lwjgl.system.linux.XMapEvent.send_event(boolean)"""
        return 'XMapEvent'._wrap(super(_XMapEvent, self).send_event(_boolean.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).address())

    @staticmethod
    @overload
    def noverride_redirect(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMapEvent.noverride_redirect(long,int)"""
        _XMapEvent.noverride_redirect(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XMapEvent$Buffer org.lwjgl.system.linux.XMapEvent.createSafe(long,int)"""
        return Buffer._wrap(_XMapEvent.createSafe(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XMapEvent$Buffer org.lwjgl.system.linux.XMapEvent.callocStack(int)"""
        return Buffer._wrap(_XMapEvent.callocStack(_int.valueOf(arg0)))

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int, arg5: int, arg6: int) -> 'XMapEvent':
        """public org.lwjgl.system.linux.XMapEvent org.lwjgl.system.linux.XMapEvent.set(int,long,boolean,long,long,long,int)"""
        return 'XMapEvent'._wrap(super(_XMapEvent, self).set(_int.valueOf(arg0), _long.valueOf(arg1), _boolean.valueOf(arg2), _long.valueOf(arg3), _long.valueOf(arg4), _long.valueOf(arg5), _int.valueOf(arg6)))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XMapEvent.ntype(long)"""
        return int._wrap(_XMapEvent.ntype(_long.valueOf(arg0)))

    @overload
    def serial(self, arg0: int) -> 'XMapEvent':
        """public org.lwjgl.system.linux.XMapEvent org.lwjgl.system.linux.XMapEvent.serial(long)"""
        return 'XMapEvent'._wrap(super(_XMapEvent, self).serial(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nevent(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMapEvent.nevent(long,long)"""
        _XMapEvent.nevent(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def callocStack() -> 'XMapEvent':
        """public static org.lwjgl.system.linux.XMapEvent org.lwjgl.system.linux.XMapEvent.callocStack()"""
        return XMapEvent._wrap(_XMapEvent.callocStack())

    @overload
    def display(self, arg0: int) -> 'XMapEvent':
        """public org.lwjgl.system.linux.XMapEvent org.lwjgl.system.linux.XMapEvent.display(long)"""
        return 'XMapEvent'._wrap(super(_XMapEvent, self).display(_long.valueOf(arg0)))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XMapEvent.sizeof()"""
        return int._wrap(super(XMapEvent, self).sizeof())

    @overload
    def window(self, arg0: int) -> 'XMapEvent':
        """public org.lwjgl.system.linux.XMapEvent org.lwjgl.system.linux.XMapEvent.window(long)"""
        return 'XMapEvent'._wrap(super(_XMapEvent, self).window(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XMapEvent':
        """public static org.lwjgl.system.linux.XMapEvent org.lwjgl.system.linux.XMapEvent.createSafe(long)"""
        return XMapEvent._wrap(_XMapEvent.createSafe(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XMapEvent.validate(long)"""
        _XMapEvent.validate(_long.valueOf(arg0))

    @overload
    def event(self) -> int:
        """public long org.lwjgl.system.linux.XMapEvent.event()"""
        return int._wrap(super(XMapEvent, self).event())

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMapEvent.nserial(long,long)"""
        _XMapEvent.nserial(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def noverride_redirect(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XMapEvent.noverride_redirect(long)"""
        return int._wrap(_XMapEvent.noverride_redirect(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XMapEvent$Buffer org.lwjgl.system.linux.XMapEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XMapEvent.callocStack(_int.valueOf(arg0), arg1))

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XMapEvent.window()"""
        return int._wrap(super(XMapEvent, self).window())

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XMapEvent':
        """public static org.lwjgl.system.linux.XMapEvent org.lwjgl.system.linux.XMapEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XMapEvent._wrap(_XMapEvent.callocStack(arg0))

    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMapEvent.nsend_event(long,int)"""
        _XMapEvent.nsend_event(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def create() -> 'XMapEvent':
        """public static org.lwjgl.system.linux.XMapEvent org.lwjgl.system.linux.XMapEvent.create()"""
        return XMapEvent._wrap(_XMapEvent.create())

    @staticmethod
    @overload
    def mallocStack() -> 'XMapEvent':
        """public static org.lwjgl.system.linux.XMapEvent org.lwjgl.system.linux.XMapEvent.mallocStack()"""
        return XMapEvent._wrap(_XMapEvent.mallocStack())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XMapEvent.nserial(long)"""
        return int._wrap(_XMapEvent.nserial(_long.valueOf(arg0)))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XMapEvent':
        """public static org.lwjgl.system.linux.XMapEvent org.lwjgl.system.linux.XMapEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XMapEvent._wrap(_XMapEvent.mallocStack(arg0))

    @overload
    def set(self, arg0: 'XMapEvent') -> 'XMapEvent':
        """public org.lwjgl.system.linux.XMapEvent org.lwjgl.system.linux.XMapEvent.set(org.lwjgl.system.linux.XMapEvent)"""
        return 'XMapEvent'._wrap(super(_XMapEvent, self).set(arg0))

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XMapEvent.ndisplay(long)"""
        return int._wrap(_XMapEvent.ndisplay(_long.valueOf(arg0)))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool._wrap(super(_pyglsystem.Struct, self).isNull(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XMapEvent$Buffer org.lwjgl.system.linux.XMapEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XMapEvent.malloc(_int.valueOf(arg0), arg1))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XMapEvent.type()"""
        return int._wrap(super(XMapEvent, self).type())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str._wrap(super(pyglsystem.Pointer$Default, self).toString()) 
 
 
# CLASS: org.lwjgl.system.linux.XAnyEvent$Buffer
from pyquantum_helper import import_once as _import_once
import java.lang.Object as _Object
_Object = _Object
from builtins import type
import org.lwjgl.system.CustomBuffer as _CustomBuffer
_CustomBuffer = _CustomBuffer
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Boolean as _boolean
import org.lwjgl.system.StructBuffer as _StructBuffer
_StructBuffer = _StructBuffer
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.util.Iterator as _Iterator
_Iterator = _Iterator
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
import java.util.Spliterator as _Spliterator
_Spliterator = _Spliterator
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.util.Iterator as Iterator
import java.lang.Integer as _int
import java.util.stream.Stream as _Stream
_Stream = _Stream
import java.util.stream.Stream as Stream
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Long as _long
import org.lwjgl.system.linux.XAnyEvent as _XAnyEvent_Buffer
_Buffer = _XAnyEvent_Buffer.Buffer
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class Buffer():
    """org.lwjgl.system.linux.XAnyEvent.Buffer"""
 
    @staticmethod
    def _wrap(java_value: _Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Buffer__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Buffer__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).limit(_int.valueOf(arg0)))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str._wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int._wrap(super(_pyglsystem.CustomBuffer, self).address(_int.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).mark())

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XAnyEvent$Buffer org.lwjgl.system.linux.XAnyEvent$Buffer.serial(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).serial(_long.valueOf(arg0)))

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'._wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).stream())

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).position(_int.valueOf(arg0)))

    @overload
    def window(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XAnyEvent$Buffer org.lwjgl.system.linux.XAnyEvent$Buffer.window(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).window(_long.valueOf(arg0)))

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XAnyEvent$Buffer org.lwjgl.system.linux.XAnyEvent$Buffer.send_event(boolean)"""
        return 'Buffer'._wrap(super(_Buffer, self).send_event(_boolean.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'._wrap(super(pyglsystem.StructBuffer, self).get())

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XAnyEvent$Buffer org.lwjgl.system.linux.XAnyEvent$Buffer.display(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).display(_long.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XAnyEvent$Buffer.window()"""
        return int._wrap(super(Buffer, self).window())

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(arg0))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XAnyEvent$Buffer.serial()"""
        return int._wrap(super(Buffer, self).serial())

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'._wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(arg0))

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XAnyEvent$Buffer org.lwjgl.system.linux.XAnyEvent$Buffer.type(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).type(_int.valueOf(arg0)))

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).slice())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).slice(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XAnyEvent$Buffer.type()"""
        return int._wrap(super(Buffer, self).type())

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0), arg1))

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(_int.valueOf(arg0), arg1))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).clear())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool._wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XAnyEvent$Buffer(java.nio.ByteBuffer)"""
        val = _Buffer(arg0)
        self.__wrapper = val

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).flip())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int._wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(_int.valueOf(arg0), arg1))

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XAnyEvent$Buffer(long,int)"""
        val = _Buffer(_long.valueOf(arg0), _int.valueOf(arg1))
        self.__wrapper = val

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XAnyEvent$Buffer.display()"""
        return int._wrap(super(Buffer, self).display())

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(_pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XAnyEvent$Buffer.send_event()"""
        return bool._wrap(super(Buffer, self).send_event())

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(arg0)) 
 
 
# CLASS: org.lwjgl.system.linux.XKeymapEvent$Buffer
from pyquantum_helper import import_once as _import_once
import java.lang.Object as _Object
_Object = _Object
from builtins import type
import org.lwjgl.system.CustomBuffer as _CustomBuffer
_CustomBuffer = _CustomBuffer
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Boolean as _boolean
import java.lang.Byte as _byte
import org.lwjgl.system.StructBuffer as _StructBuffer
_StructBuffer = _StructBuffer
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.util.Iterator as _Iterator
_Iterator = _Iterator
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
import java.nio.ByteBuffer as _ByteBuffer
_ByteBuffer = _ByteBuffer
import java.util.Spliterator as _Spliterator
_Spliterator = _Spliterator
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import org.lwjgl.system.linux.XKeymapEvent as _XKeymapEvent_Buffer
_Buffer = _XKeymapEvent_Buffer.Buffer
import java.util.Iterator as Iterator
import java.lang.Integer as _int
import java.util.stream.Stream as _Stream
_Stream = _Stream
import java.util.stream.Stream as Stream
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class Buffer():
    """org.lwjgl.system.linux.XKeymapEvent.Buffer"""
 
    @staticmethod
    def _wrap(java_value: _Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Buffer__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Buffer__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).limit(_int.valueOf(arg0)))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str._wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XKeymapEvent$Buffer.display()"""
        return int._wrap(super(Buffer, self).display())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int._wrap(super(_pyglsystem.CustomBuffer, self).address(_int.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).mark())

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XKeymapEvent$Buffer.serial()"""
        return int._wrap(super(Buffer, self).serial())

    @overload
    def key_vector(self, arg0: int) -> int:
        """public byte org.lwjgl.system.linux.XKeymapEvent$Buffer.key_vector(int)"""
        return int._wrap(super(_Buffer, self).key_vector(_int.valueOf(arg0)))

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'._wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).stream())

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).position(_int.valueOf(arg0)))

    @overload
    def key_vector(self) -> 'ByteBuffer':
        """public java.nio.ByteBuffer org.lwjgl.system.linux.XKeymapEvent$Buffer.key_vector()"""
        return 'ByteBuffer'._wrap(super(Buffer, self).key_vector())

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XKeymapEvent$Buffer org.lwjgl.system.linux.XKeymapEvent$Buffer.serial(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).serial(_long.valueOf(arg0)))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XKeymapEvent$Buffer.type()"""
        return int._wrap(super(Buffer, self).type())

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'._wrap(super(pyglsystem.StructBuffer, self).get())

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XKeymapEvent$Buffer org.lwjgl.system.linux.XKeymapEvent$Buffer.type(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).type(_int.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XKeymapEvent$Buffer org.lwjgl.system.linux.XKeymapEvent$Buffer.send_event(boolean)"""
        return 'Buffer'._wrap(super(_Buffer, self).send_event(_boolean.valueOf(arg0)))

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(arg0))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def key_vector(self, arg0: int, arg1: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XKeymapEvent$Buffer org.lwjgl.system.linux.XKeymapEvent$Buffer.key_vector(int,byte)"""
        return 'Buffer'._wrap(super(_Buffer, self).key_vector(_int.valueOf(arg0), _byte.valueOf(arg1)))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XKeymapEvent$Buffer(java.nio.ByteBuffer)"""
        val = _Buffer(arg0)
        self.__wrapper = val

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XKeymapEvent$Buffer.send_event()"""
        return bool._wrap(super(Buffer, self).send_event())

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'._wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XKeymapEvent$Buffer.window()"""
        return int._wrap(super(Buffer, self).window())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(arg0))

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XKeymapEvent$Buffer org.lwjgl.system.linux.XKeymapEvent$Buffer.display(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).display(_long.valueOf(arg0)))

    @overload
    def key_vector(self, arg0: 'ByteBuffer') -> 'Buffer':
        """public org.lwjgl.system.linux.XKeymapEvent$Buffer org.lwjgl.system.linux.XKeymapEvent$Buffer.key_vector(java.nio.ByteBuffer)"""
        return 'Buffer'._wrap(super(_Buffer, self).key_vector(arg0))

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).slice())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).slice(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0), arg1))

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(_int.valueOf(arg0), arg1))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).clear())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool._wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).flip())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int._wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def window(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XKeymapEvent$Buffer org.lwjgl.system.linux.XKeymapEvent$Buffer.window(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).window(_long.valueOf(arg0)))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(_int.valueOf(arg0), arg1))

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(_pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XKeymapEvent$Buffer(long,int)"""
        val = _Buffer(_long.valueOf(arg0), _int.valueOf(arg1))
        self.__wrapper = val

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(arg0)) 
 
 
# CLASS: org.lwjgl.system.linux.XMotionEvent
from pyquantum_helper import import_once as _import_once
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _Object
_Object = _Object
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
from builtins import type
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.lang.Boolean as _boolean
import java.lang.Integer as _int
import java.lang.Byte as _byte
import org.lwjgl.system.linux.XMotionEvent as _XMotionEvent_Buffer
_Buffer = _XMotionEvent_Buffer.Buffer
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import org.lwjgl.system.linux.XMotionEvent as _XMotionEvent
_XMotionEvent = _XMotionEvent
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class XMotionEvent():
    """org.lwjgl.system.linux.XMotionEvent"""
 
    @staticmethod
    def _wrap(java_value: _XMotionEvent) -> 'XMotionEvent':
        return XMotionEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _XMotionEvent):
        """
        Dynamic initializer for XMotionEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_XMotionEvent__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_XMotionEvent__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XMotionEvent$Buffer org.lwjgl.system.linux.XMotionEvent.createSafe(long,int)"""
        return Buffer._wrap(_XMotionEvent.createSafe(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMotionEvent.ntype(long,int)"""
        _XMotionEvent.ntype(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def malloc() -> 'XMotionEvent':
        """public static org.lwjgl.system.linux.XMotionEvent org.lwjgl.system.linux.XMotionEvent.malloc()"""
        return XMotionEvent._wrap(_XMotionEvent.malloc())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def root(self) -> int:
        """public long org.lwjgl.system.linux.XMotionEvent.root()"""
        return int._wrap(super(XMotionEvent, self).root())

    @overload
    def x_root(self, arg0: int) -> 'XMotionEvent':
        """public org.lwjgl.system.linux.XMotionEvent org.lwjgl.system.linux.XMotionEvent.x_root(int)"""
        return 'XMotionEvent'._wrap(super(_XMotionEvent, self).x_root(_int.valueOf(arg0)))

    @overload
    def is_hint(self, arg0: int) -> 'XMotionEvent':
        """public org.lwjgl.system.linux.XMotionEvent org.lwjgl.system.linux.XMotionEvent.is_hint(byte)"""
        return 'XMotionEvent'._wrap(super(_XMotionEvent, self).is_hint(_byte.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XMotionEvent$Buffer org.lwjgl.system.linux.XMotionEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XMotionEvent.calloc(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def nstate(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XMotionEvent.nstate(long)"""
        return int._wrap(_XMotionEvent.nstate(_long.valueOf(arg0)))

    @overload
    def time(self) -> int:
        """public long org.lwjgl.system.linux.XMotionEvent.time()"""
        return int._wrap(super(XMotionEvent, self).time())

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XMotionEvent.type()"""
        return int._wrap(super(XMotionEvent, self).type())

    @overload
    def y(self) -> int:
        """public int org.lwjgl.system.linux.XMotionEvent.y()"""
        return int._wrap(super(XMotionEvent, self).y())

    @overload
    def y_root(self) -> int:
        """public int org.lwjgl.system.linux.XMotionEvent.y_root()"""
        return int._wrap(super(XMotionEvent, self).y_root())

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        _Struct.validate(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), arg3)

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XMotionEvent.display()"""
        return int._wrap(super(XMotionEvent, self).display())

    @overload
    def type(self, arg0: int) -> 'XMotionEvent':
        """public org.lwjgl.system.linux.XMotionEvent org.lwjgl.system.linux.XMotionEvent.type(int)"""
        return 'XMotionEvent'._wrap(super(_XMotionEvent, self).type(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def ny(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XMotionEvent.ny(long)"""
        return int._wrap(_XMotionEvent.ny(_long.valueOf(arg0)))

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: int, arg10: int, arg11: int, arg12: int, arg13: int, arg14: bool) -> 'XMotionEvent':
        """public org.lwjgl.system.linux.XMotionEvent org.lwjgl.system.linux.XMotionEvent.set(int,long,boolean,long,long,long,long,long,int,int,int,int,int,byte,boolean)"""
        return 'XMotionEvent'._wrap(super(_XMotionEvent, self).set(_int.valueOf(arg0), _long.valueOf(arg1), _boolean.valueOf(arg2), _long.valueOf(arg3), _long.valueOf(arg4), _long.valueOf(arg5), _long.valueOf(arg6), _long.valueOf(arg7), _int.valueOf(arg8), _int.valueOf(arg9), _int.valueOf(arg10), _int.valueOf(arg11), _int.valueOf(arg12), _byte.valueOf(arg13), _boolean.valueOf(arg14)))

    @overload
    def serial(self, arg0: int) -> 'XMotionEvent':
        """public org.lwjgl.system.linux.XMotionEvent org.lwjgl.system.linux.XMotionEvent.serial(long)"""
        return 'XMotionEvent'._wrap(super(_XMotionEvent, self).serial(_long.valueOf(arg0)))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XMotionEvent.send_event()"""
        return bool._wrap(super(XMotionEvent, self).send_event())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def x(self, arg0: int) -> 'XMotionEvent':
        """public org.lwjgl.system.linux.XMotionEvent org.lwjgl.system.linux.XMotionEvent.x(int)"""
        return 'XMotionEvent'._wrap(super(_XMotionEvent, self).x(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XMotionEvent$Buffer org.lwjgl.system.linux.XMotionEvent.malloc(int)"""
        return Buffer._wrap(_XMotionEvent.malloc(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XMotionEvent$Buffer org.lwjgl.system.linux.XMotionEvent.callocStack(int)"""
        return Buffer._wrap(_XMotionEvent.callocStack(_int.valueOf(arg0)))

    @overload
    def display(self, arg0: int) -> 'XMotionEvent':
        """public org.lwjgl.system.linux.XMotionEvent org.lwjgl.system.linux.XMotionEvent.display(long)"""
        return 'XMotionEvent'._wrap(super(_XMotionEvent, self).display(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XMotionEvent':
        """public static org.lwjgl.system.linux.XMotionEvent org.lwjgl.system.linux.XMotionEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XMotionEvent._wrap(_XMotionEvent.mallocStack(arg0))

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XMotionEvent$Buffer org.lwjgl.system.linux.XMotionEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XMotionEvent.malloc(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XMotionEvent.ntype(long)"""
        return int._wrap(_XMotionEvent.ntype(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMotionEvent.ndisplay(long,long)"""
        _XMotionEvent.ndisplay(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def nsame_screen(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMotionEvent.nsame_screen(long,int)"""
        _XMotionEvent.nsame_screen(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def ntime(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMotionEvent.ntime(long,long)"""
        _XMotionEvent.ntime(_long.valueOf(arg0), _long.valueOf(arg1))

    @overload
    def subwindow(self, arg0: int) -> 'XMotionEvent':
        """public org.lwjgl.system.linux.XMotionEvent org.lwjgl.system.linux.XMotionEvent.subwindow(long)"""
        return 'XMotionEvent'._wrap(super(_XMotionEvent, self).subwindow(_long.valueOf(arg0)))

    @overload
    def x_root(self) -> int:
        """public int org.lwjgl.system.linux.XMotionEvent.x_root()"""
        return int._wrap(super(XMotionEvent, self).x_root())

    @staticmethod
    @overload
    def nroot(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMotionEvent.nroot(long,long)"""
        _XMotionEvent.nroot(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def nwindow(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XMotionEvent.nwindow(long)"""
        return int._wrap(_XMotionEvent.nwindow(_long.valueOf(arg0)))

    @overload
    def same_screen(self, arg0: bool) -> 'XMotionEvent':
        """public org.lwjgl.system.linux.XMotionEvent org.lwjgl.system.linux.XMotionEvent.same_screen(boolean)"""
        return 'XMotionEvent'._wrap(super(_XMotionEvent, self).same_screen(_boolean.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XMotionEvent$Buffer org.lwjgl.system.linux.XMotionEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XMotionEvent.callocStack(_int.valueOf(arg0), arg1))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @overload
    def y_root(self, arg0: int) -> 'XMotionEvent':
        """public org.lwjgl.system.linux.XMotionEvent org.lwjgl.system.linux.XMotionEvent.y_root(int)"""
        return 'XMotionEvent'._wrap(super(_XMotionEvent, self).y_root(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc() -> 'XMotionEvent':
        """public static org.lwjgl.system.linux.XMotionEvent org.lwjgl.system.linux.XMotionEvent.calloc()"""
        return XMotionEvent._wrap(_XMotionEvent.calloc())

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XMotionEvent':
        """public static org.lwjgl.system.linux.XMotionEvent org.lwjgl.system.linux.XMotionEvent.createSafe(long)"""
        return XMotionEvent._wrap(_XMotionEvent.createSafe(_long.valueOf(arg0)))

    @overload
    def set(self, arg0: 'XMotionEvent') -> 'XMotionEvent':
        """public org.lwjgl.system.linux.XMotionEvent org.lwjgl.system.linux.XMotionEvent.set(org.lwjgl.system.linux.XMotionEvent)"""
        return 'XMotionEvent'._wrap(super(_XMotionEvent, self).set(arg0))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool._wrap(super(_pyglsystem.Struct, self).isNull(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def nx(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMotionEvent.nx(long,int)"""
        _XMotionEvent.nx(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def subwindow(self) -> int:
        """public long org.lwjgl.system.linux.XMotionEvent.subwindow()"""
        return int._wrap(super(XMotionEvent, self).subwindow())

    @staticmethod
    @overload
    def create(arg0: int) -> 'XMotionEvent':
        """public static org.lwjgl.system.linux.XMotionEvent org.lwjgl.system.linux.XMotionEvent.create(long)"""
        return XMotionEvent._wrap(_XMotionEvent.create(_long.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XMotionEvent$Buffer org.lwjgl.system.linux.XMotionEvent.calloc(int)"""
        return Buffer._wrap(_XMotionEvent.calloc(_int.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XMotionEvent$Buffer org.lwjgl.system.linux.XMotionEvent.create(int)"""
        return Buffer._wrap(_XMotionEvent.create(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XMotionEvent$Buffer org.lwjgl.system.linux.XMotionEvent.mallocStack(int)"""
        return Buffer._wrap(_XMotionEvent.mallocStack(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def nwindow(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMotionEvent.nwindow(long,long)"""
        _XMotionEvent.nwindow(_long.valueOf(arg0), _long.valueOf(arg1))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XMotionEvent.sizeof()"""
        return int._wrap(super(XMotionEvent, self).sizeof())

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XMotionEvent':
        """public static org.lwjgl.system.linux.XMotionEvent org.lwjgl.system.linux.XMotionEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XMotionEvent._wrap(_XMotionEvent.callocStack(arg0))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XMotionEvent':
        """public static org.lwjgl.system.linux.XMotionEvent org.lwjgl.system.linux.XMotionEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XMotionEvent._wrap(_XMotionEvent.calloc(arg0))

    @staticmethod
    @overload
    def ny_root(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMotionEvent.ny_root(long,int)"""
        _XMotionEvent.ny_root(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @staticmethod
    @overload
    def nx_root(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMotionEvent.nx_root(long,int)"""
        _XMotionEvent.nx_root(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XMotionEvent.nserial(long)"""
        return int._wrap(_XMotionEvent.nserial(_long.valueOf(arg0)))

    @overload
    def send_event(self, arg0: bool) -> 'XMotionEvent':
        """public org.lwjgl.system.linux.XMotionEvent org.lwjgl.system.linux.XMotionEvent.send_event(boolean)"""
        return 'XMotionEvent'._wrap(super(_XMotionEvent, self).send_event(_boolean.valueOf(arg0)))

    @staticmethod
    @overload
    def nis_hint(arg0: int) -> int:
        """public static byte org.lwjgl.system.linux.XMotionEvent.nis_hint(long)"""
        return int._wrap(_XMotionEvent.nis_hint(_long.valueOf(arg0)))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XMotionEvent.serial()"""
        return int._wrap(super(XMotionEvent, self).serial())

    @staticmethod
    @overload
    def nroot(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XMotionEvent.nroot(long)"""
        return int._wrap(_XMotionEvent.nroot(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def create() -> 'XMotionEvent':
        """public static org.lwjgl.system.linux.XMotionEvent org.lwjgl.system.linux.XMotionEvent.create()"""
        return XMotionEvent._wrap(_XMotionEvent.create())

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XMotionEvent.window()"""
        return int._wrap(super(XMotionEvent, self).window())

    @staticmethod
    @overload
    def nsame_screen(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XMotionEvent.nsame_screen(long)"""
        return int._wrap(_XMotionEvent.nsame_screen(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XMotionEvent.validate(long)"""
        _XMotionEvent.validate(_long.valueOf(arg0))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XMotionEvent$Buffer org.lwjgl.system.linux.XMotionEvent.create(long,int)"""
        return Buffer._wrap(_XMotionEvent.create(_long.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).address())

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XMotionEvent$Buffer org.lwjgl.system.linux.XMotionEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XMotionEvent.mallocStack(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMotionEvent.nserial(long,long)"""
        _XMotionEvent.nserial(_long.valueOf(arg0), _long.valueOf(arg1))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @staticmethod
    @overload
    def mallocStack() -> 'XMotionEvent':
        """public static org.lwjgl.system.linux.XMotionEvent org.lwjgl.system.linux.XMotionEvent.mallocStack()"""
        return XMotionEvent._wrap(_XMotionEvent.mallocStack())

    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMotionEvent.nsend_event(long,int)"""
        _XMotionEvent.nsend_event(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XMotionEvent.ndisplay(long)"""
        return int._wrap(_XMotionEvent.ndisplay(_long.valueOf(arg0)))

    @overload
    def time(self, arg0: int) -> 'XMotionEvent':
        """public org.lwjgl.system.linux.XMotionEvent org.lwjgl.system.linux.XMotionEvent.time(long)"""
        return 'XMotionEvent'._wrap(super(_XMotionEvent, self).time(_long.valueOf(arg0)))

    @overload
    def window(self, arg0: int) -> 'XMotionEvent':
        """public org.lwjgl.system.linux.XMotionEvent org.lwjgl.system.linux.XMotionEvent.window(long)"""
        return 'XMotionEvent'._wrap(super(_XMotionEvent, self).window(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack() -> 'XMotionEvent':
        """public static org.lwjgl.system.linux.XMotionEvent org.lwjgl.system.linux.XMotionEvent.callocStack()"""
        return XMotionEvent._wrap(_XMotionEvent.callocStack())

    @staticmethod
    @overload
    def nstate(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMotionEvent.nstate(long,int)"""
        _XMotionEvent.nstate(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def is_hint(self) -> int:
        """public byte org.lwjgl.system.linux.XMotionEvent.is_hint()"""
        return int._wrap(super(XMotionEvent, self).is_hint())

    @overload
    def x(self) -> int:
        """public int org.lwjgl.system.linux.XMotionEvent.x()"""
        return int._wrap(super(XMotionEvent, self).x())

    @overload
    def y(self, arg0: int) -> 'XMotionEvent':
        """public org.lwjgl.system.linux.XMotionEvent org.lwjgl.system.linux.XMotionEvent.y(int)"""
        return 'XMotionEvent'._wrap(super(_XMotionEvent, self).y(_int.valueOf(arg0)))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XMotionEvent(java.nio.ByteBuffer)"""
        val = _XMotionEvent(arg0)
        self.__wrapper = val

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XMotionEvent':
        """public static org.lwjgl.system.linux.XMotionEvent org.lwjgl.system.linux.XMotionEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XMotionEvent._wrap(_XMotionEvent.malloc(arg0))

    @overload
    def state(self, arg0: int) -> 'XMotionEvent':
        """public org.lwjgl.system.linux.XMotionEvent org.lwjgl.system.linux.XMotionEvent.state(int)"""
        return 'XMotionEvent'._wrap(super(_XMotionEvent, self).state(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def nsubwindow(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMotionEvent.nsubwindow(long,long)"""
        _XMotionEvent.nsubwindow(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def ntime(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XMotionEvent.ntime(long)"""
        return int._wrap(_XMotionEvent.ntime(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nx_root(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XMotionEvent.nx_root(long)"""
        return int._wrap(_XMotionEvent.nx_root(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XMotionEvent.nsend_event(long)"""
        return int._wrap(_XMotionEvent.nsend_event(_long.valueOf(arg0)))

    @overload
    def state(self) -> int:
        """public int org.lwjgl.system.linux.XMotionEvent.state()"""
        return int._wrap(super(XMotionEvent, self).state())

    @staticmethod
    @overload
    def nx(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XMotionEvent.nx(long)"""
        return int._wrap(_XMotionEvent.nx(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def ny_root(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XMotionEvent.ny_root(long)"""
        return int._wrap(_XMotionEvent.ny_root(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nis_hint(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMotionEvent.nis_hint(long,byte)"""
        _XMotionEvent.nis_hint(_long.valueOf(arg0), _byte.valueOf(arg1))

    @overload
    def same_screen(self) -> bool:
        """public boolean org.lwjgl.system.linux.XMotionEvent.same_screen()"""
        return bool._wrap(super(XMotionEvent, self).same_screen())

    @staticmethod
    @overload
    def nsubwindow(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XMotionEvent.nsubwindow(long)"""
        return int._wrap(_XMotionEvent.nsubwindow(_long.valueOf(arg0)))

    @overload
    def root(self, arg0: int) -> 'XMotionEvent':
        """public org.lwjgl.system.linux.XMotionEvent org.lwjgl.system.linux.XMotionEvent.root(long)"""
        return 'XMotionEvent'._wrap(super(_XMotionEvent, self).root(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def ny(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMotionEvent.ny(long,int)"""
        _XMotionEvent.ny(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str._wrap(super(pyglsystem.Pointer$Default, self).toString()) 
 
 
# CLASS: org.lwjgl.system.linux.Sockaddr
from pyquantum_helper import import_once as _import_once
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _Object
_Object = _Object
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
from builtins import type
import java.nio.ByteBuffer as _ByteBuffer
_ByteBuffer = _ByteBuffer
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import org.lwjgl.system.linux.Sockaddr as _Sockaddr_Buffer
_Buffer = _Sockaddr_Buffer.Buffer
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import org.lwjgl.system.linux.Sockaddr as _Sockaddr
_Sockaddr = _Sockaddr
import java.lang.String as _String
_String = _String
import java.lang.Short as _short
import java.lang.Integer as _int
import java.lang.Byte as _byte
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class Sockaddr():
    """org.lwjgl.system.linux.Sockaddr"""
 
    @staticmethod
    def _wrap(java_value: _Sockaddr) -> 'Sockaddr':
        return Sockaddr(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Sockaddr):
        """
        Dynamic initializer for Sockaddr.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Sockaddr__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Sockaddr__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.Sockaddr$Buffer org.lwjgl.system.linux.Sockaddr.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_Sockaddr.calloc(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'Sockaddr':
        """public static org.lwjgl.system.linux.Sockaddr org.lwjgl.system.linux.Sockaddr.calloc(org.lwjgl.system.MemoryStack)"""
        return Sockaddr._wrap(_Sockaddr.calloc(arg0))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.Sockaddr(java.nio.ByteBuffer)"""
        val = _Sockaddr(arg0)
        self.__wrapper = val

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.Sockaddr.sizeof()"""
        return int._wrap(super(Sockaddr, self).sizeof())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def sa_data(self) -> 'ByteBuffer':
        """public java.nio.ByteBuffer org.lwjgl.system.linux.Sockaddr.sa_data()"""
        return 'ByteBuffer'._wrap(super(Sockaddr, self).sa_data())

    @staticmethod
    @overload
    def nsa_data(arg0: int) -> 'ByteBuffer':
        """public static java.nio.ByteBuffer org.lwjgl.system.linux.Sockaddr.nsa_data(long)"""
        return ByteBuffer._wrap(_Sockaddr.nsa_data(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nsa_data(arg0: int, arg1: int) -> int:
        """public static byte org.lwjgl.system.linux.Sockaddr.nsa_data(long,int)"""
        return int._wrap(_Sockaddr.nsa_data(_long.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def sa_data(self, arg0: int) -> int:
        """public byte org.lwjgl.system.linux.Sockaddr.sa_data(int)"""
        return int._wrap(super(_Sockaddr, self).sa_data(_int.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def sa_data(self, arg0: int, arg1: int) -> 'Sockaddr':
        """public org.lwjgl.system.linux.Sockaddr org.lwjgl.system.linux.Sockaddr.sa_data(int,byte)"""
        return 'Sockaddr'._wrap(super(_Sockaddr, self).sa_data(_int.valueOf(arg0), _byte.valueOf(arg1)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def set(self, arg0: int, arg1: 'ByteBuffer') -> 'Sockaddr':
        """public org.lwjgl.system.linux.Sockaddr org.lwjgl.system.linux.Sockaddr.set(short,java.nio.ByteBuffer)"""
        return 'Sockaddr'._wrap(super(_Sockaddr, self).set(_short.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def nsa_data(arg0: int, arg1: int, arg2: int):
        """public static void org.lwjgl.system.linux.Sockaddr.nsa_data(long,int,byte)"""
        _Sockaddr.nsa_data(_long.valueOf(arg0), _int.valueOf(arg1), _byte.valueOf(arg2))

    @overload
    def sa_family(self) -> int:
        """public short org.lwjgl.system.linux.Sockaddr.sa_family()"""
        return int._wrap(super(Sockaddr, self).sa_family())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'Sockaddr':
        """public static org.lwjgl.system.linux.Sockaddr org.lwjgl.system.linux.Sockaddr.createSafe(long)"""
        return Sockaddr._wrap(_Sockaddr.createSafe(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'Sockaddr':
        """public static org.lwjgl.system.linux.Sockaddr org.lwjgl.system.linux.Sockaddr.malloc(org.lwjgl.system.MemoryStack)"""
        return Sockaddr._wrap(_Sockaddr.malloc(arg0))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.Sockaddr$Buffer org.lwjgl.system.linux.Sockaddr.createSafe(long,int)"""
        return Buffer._wrap(_Sockaddr.createSafe(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.Sockaddr$Buffer org.lwjgl.system.linux.Sockaddr.create(long,int)"""
        return Buffer._wrap(_Sockaddr.create(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def nsa_family(arg0: int) -> int:
        """public static short org.lwjgl.system.linux.Sockaddr.nsa_family(long)"""
        return int._wrap(_Sockaddr.nsa_family(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.Sockaddr$Buffer org.lwjgl.system.linux.Sockaddr.calloc(int)"""
        return Buffer._wrap(_Sockaddr.calloc(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def create() -> 'Sockaddr':
        """public static org.lwjgl.system.linux.Sockaddr org.lwjgl.system.linux.Sockaddr.create()"""
        return Sockaddr._wrap(_Sockaddr.create())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.Sockaddr$Buffer org.lwjgl.system.linux.Sockaddr.create(int)"""
        return Buffer._wrap(_Sockaddr.create(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        _Struct.validate(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), arg3)

    @overload
    def sa_family(self, arg0: int) -> 'Sockaddr':
        """public org.lwjgl.system.linux.Sockaddr org.lwjgl.system.linux.Sockaddr.sa_family(short)"""
        return 'Sockaddr'._wrap(super(_Sockaddr, self).sa_family(_short.valueOf(arg0)))

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.Sockaddr$Buffer org.lwjgl.system.linux.Sockaddr.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_Sockaddr.malloc(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def calloc() -> 'Sockaddr':
        """public static org.lwjgl.system.linux.Sockaddr org.lwjgl.system.linux.Sockaddr.calloc()"""
        return Sockaddr._wrap(_Sockaddr.calloc())

    @staticmethod
    @overload
    def create(arg0: int) -> 'Sockaddr':
        """public static org.lwjgl.system.linux.Sockaddr org.lwjgl.system.linux.Sockaddr.create(long)"""
        return Sockaddr._wrap(_Sockaddr.create(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.Sockaddr$Buffer org.lwjgl.system.linux.Sockaddr.malloc(int)"""
        return Buffer._wrap(_Sockaddr.malloc(_int.valueOf(arg0)))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool._wrap(super(_pyglsystem.Struct, self).isNull(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc() -> 'Sockaddr':
        """public static org.lwjgl.system.linux.Sockaddr org.lwjgl.system.linux.Sockaddr.malloc()"""
        return Sockaddr._wrap(_Sockaddr.malloc())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def set(self, arg0: 'Sockaddr') -> 'Sockaddr':
        """public org.lwjgl.system.linux.Sockaddr org.lwjgl.system.linux.Sockaddr.set(org.lwjgl.system.linux.Sockaddr)"""
        return 'Sockaddr'._wrap(super(_Sockaddr, self).set(arg0))

    @overload
    def sa_data(self, arg0: 'ByteBuffer') -> 'Sockaddr':
        """public org.lwjgl.system.linux.Sockaddr org.lwjgl.system.linux.Sockaddr.sa_data(java.nio.ByteBuffer)"""
        return 'Sockaddr'._wrap(super(_Sockaddr, self).sa_data(arg0))

    @staticmethod
    @overload
    def nsa_data(arg0: int, arg1: 'ByteBuffer'):
        """public static void org.lwjgl.system.linux.Sockaddr.nsa_data(long,java.nio.ByteBuffer)"""
        _Sockaddr.nsa_data(_long.valueOf(arg0), arg1)

    @staticmethod
    @overload
    def nsa_family(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.Sockaddr.nsa_family(long,short)"""
        _Sockaddr.nsa_family(_long.valueOf(arg0), _short.valueOf(arg1))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str._wrap(super(pyglsystem.Pointer$Default, self).toString())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).address()) 
 
 
# CLASS: org.lwjgl.system.linux.XButtonEvent$Buffer
from pyquantum_helper import import_once as _import_once
import java.lang.Object as _Object
_Object = _Object
from builtins import type
import org.lwjgl.system.CustomBuffer as _CustomBuffer
_CustomBuffer = _CustomBuffer
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Boolean as _boolean
import org.lwjgl.system.StructBuffer as _StructBuffer
_StructBuffer = _StructBuffer
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.util.Iterator as _Iterator
_Iterator = _Iterator
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
import java.util.Spliterator as _Spliterator
_Spliterator = _Spliterator
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.util.Iterator as Iterator
import java.lang.Integer as _int
import java.util.stream.Stream as _Stream
_Stream = _Stream
import org.lwjgl.system.linux.XButtonEvent as _XButtonEvent_Buffer
_Buffer = _XButtonEvent_Buffer.Buffer
import java.util.stream.Stream as Stream
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class Buffer():
    """org.lwjgl.system.linux.XButtonEvent.Buffer"""
 
    @staticmethod
    def _wrap(java_value: _Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Buffer__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Buffer__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).limit(_int.valueOf(arg0)))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address0())

    @overload
    def state(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XButtonEvent$Buffer org.lwjgl.system.linux.XButtonEvent$Buffer.state(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).state(_int.valueOf(arg0)))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def x(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XButtonEvent$Buffer org.lwjgl.system.linux.XButtonEvent$Buffer.x(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).x(_int.valueOf(arg0)))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @overload
    def window(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XButtonEvent$Buffer org.lwjgl.system.linux.XButtonEvent$Buffer.window(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).window(_long.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str._wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int._wrap(super(_pyglsystem.CustomBuffer, self).address(_int.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).mark())

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XButtonEvent$Buffer org.lwjgl.system.linux.XButtonEvent$Buffer.display(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).display(_long.valueOf(arg0)))

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XButtonEvent$Buffer org.lwjgl.system.linux.XButtonEvent$Buffer.type(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).type(_int.valueOf(arg0)))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XButtonEvent$Buffer(java.nio.ByteBuffer)"""
        val = _Buffer(arg0)
        self.__wrapper = val

    @overload
    def button(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XButtonEvent$Buffer org.lwjgl.system.linux.XButtonEvent$Buffer.button(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).button(_int.valueOf(arg0)))

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'._wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).stream())

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).position(_int.valueOf(arg0)))

    @overload
    def same_screen(self) -> bool:
        """public boolean org.lwjgl.system.linux.XButtonEvent$Buffer.same_screen()"""
        return bool._wrap(super(Buffer, self).same_screen())

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'._wrap(super(pyglsystem.StructBuffer, self).get())

    @overload
    def y_root(self) -> int:
        """public int org.lwjgl.system.linux.XButtonEvent$Buffer.y_root()"""
        return int._wrap(super(Buffer, self).y_root())

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XButtonEvent$Buffer.display()"""
        return int._wrap(super(Buffer, self).display())

    @overload
    def state(self) -> int:
        """public int org.lwjgl.system.linux.XButtonEvent$Buffer.state()"""
        return int._wrap(super(Buffer, self).state())

    @overload
    def x_root(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XButtonEvent$Buffer org.lwjgl.system.linux.XButtonEvent$Buffer.x_root(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).x_root(_int.valueOf(arg0)))

    @overload
    def time(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XButtonEvent$Buffer org.lwjgl.system.linux.XButtonEvent$Buffer.time(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).time(_long.valueOf(arg0)))

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XButtonEvent$Buffer(long,int)"""
        val = _Buffer(_long.valueOf(arg0), _int.valueOf(arg1))
        self.__wrapper = val

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XButtonEvent$Buffer org.lwjgl.system.linux.XButtonEvent$Buffer.serial(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).serial(_long.valueOf(arg0)))

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def time(self) -> int:
        """public long org.lwjgl.system.linux.XButtonEvent$Buffer.time()"""
        return int._wrap(super(Buffer, self).time())

    @overload
    def button(self) -> int:
        """public int org.lwjgl.system.linux.XButtonEvent$Buffer.button()"""
        return int._wrap(super(Buffer, self).button())

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XButtonEvent$Buffer.window()"""
        return int._wrap(super(Buffer, self).window())

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XButtonEvent$Buffer.serial()"""
        return int._wrap(super(Buffer, self).serial())

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(arg0))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def same_screen(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XButtonEvent$Buffer org.lwjgl.system.linux.XButtonEvent$Buffer.same_screen(boolean)"""
        return 'Buffer'._wrap(super(_Buffer, self).same_screen(_boolean.valueOf(arg0)))

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'._wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(arg0))

    @overload
    def root(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XButtonEvent$Buffer org.lwjgl.system.linux.XButtonEvent$Buffer.root(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).root(_long.valueOf(arg0)))

    @overload
    def subwindow(self) -> int:
        """public long org.lwjgl.system.linux.XButtonEvent$Buffer.subwindow()"""
        return int._wrap(super(Buffer, self).subwindow())

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).slice())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).slice(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0), arg1))

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(_int.valueOf(arg0), arg1))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).clear())

    @overload
    def subwindow(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XButtonEvent$Buffer org.lwjgl.system.linux.XButtonEvent$Buffer.subwindow(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).subwindow(_long.valueOf(arg0)))

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool._wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @overload
    def x_root(self) -> int:
        """public int org.lwjgl.system.linux.XButtonEvent$Buffer.x_root()"""
        return int._wrap(super(Buffer, self).x_root())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def y(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XButtonEvent$Buffer org.lwjgl.system.linux.XButtonEvent$Buffer.y(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).y(_int.valueOf(arg0)))

    @overload
    def x(self) -> int:
        """public int org.lwjgl.system.linux.XButtonEvent$Buffer.x()"""
        return int._wrap(super(Buffer, self).x())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int._wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(_int.valueOf(arg0), arg1))

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def y(self) -> int:
        """public int org.lwjgl.system.linux.XButtonEvent$Buffer.y()"""
        return int._wrap(super(Buffer, self).y())

    @overload
    def root(self) -> int:
        """public long org.lwjgl.system.linux.XButtonEvent$Buffer.root()"""
        return int._wrap(super(Buffer, self).root())

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @overload
    def y_root(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XButtonEvent$Buffer org.lwjgl.system.linux.XButtonEvent$Buffer.y_root(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).y_root(_int.valueOf(arg0)))

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(_pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XButtonEvent$Buffer org.lwjgl.system.linux.XButtonEvent$Buffer.send_event(boolean)"""
        return 'Buffer'._wrap(super(_Buffer, self).send_event(_boolean.valueOf(arg0)))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XButtonEvent$Buffer.type()"""
        return int._wrap(super(Buffer, self).type())

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XButtonEvent$Buffer.send_event()"""
        return bool._wrap(super(Buffer, self).send_event())

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(arg0)) 
 
 
# CLASS: org.lwjgl.system.linux.XClientMessageEvent
from pyquantum_helper import import_once as _import_once
import java.lang.Object as _Object
_Object = _Object
from builtins import type
import org.lwjgl.system.linux.XClientMessageEvent as _XClientMessageEvent
_XClientMessageEvent = _XClientMessageEvent
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import java.nio.ShortBuffer as ShortBuffer
import java.lang.Short as _short
import org.lwjgl.CLongBuffer as _CLongBuffer
_CLongBuffer = _CLongBuffer
import java.lang.Boolean as _boolean
import java.lang.Byte as _byte
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.nio.ShortBuffer as _ShortBuffer
_ShortBuffer = _ShortBuffer
import org.lwjgl.system.linux.XClientMessageEvent as _XClientMessageEvent_Buffer
_Buffer = _XClientMessageEvent_Buffer.Buffer
from builtins import bool
from builtins import str
from pyquantum_helper import override
try:
    import pygl
except ImportError:
    pygl = _import_once("pygl")

import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
import java.nio.ByteBuffer as _ByteBuffer
_ByteBuffer = _ByteBuffer
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.lang.Integer as _int
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class XClientMessageEvent():
    """org.lwjgl.system.linux.XClientMessageEvent"""
 
    @staticmethod
    def _wrap(java_value: _XClientMessageEvent) -> 'XClientMessageEvent':
        return XClientMessageEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _XClientMessageEvent):
        """
        Dynamic initializer for XClientMessageEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_XClientMessageEvent__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_XClientMessageEvent__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XClientMessageEvent.nsend_event(long,int)"""
        _XClientMessageEvent.nsend_event(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def ndata_b(arg0: int, arg1: int, arg2: int):
        """public static void org.lwjgl.system.linux.XClientMessageEvent.ndata_b(long,int,byte)"""
        _XClientMessageEvent.ndata_b(_long.valueOf(arg0), _int.valueOf(arg1), _byte.valueOf(arg2))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XClientMessageEvent$Buffer org.lwjgl.system.linux.XClientMessageEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XClientMessageEvent.calloc(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XClientMessageEvent':
        """public static org.lwjgl.system.linux.XClientMessageEvent org.lwjgl.system.linux.XClientMessageEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XClientMessageEvent._wrap(_XClientMessageEvent.calloc(arg0))

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XClientMessageEvent':
        """public static org.lwjgl.system.linux.XClientMessageEvent org.lwjgl.system.linux.XClientMessageEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XClientMessageEvent._wrap(_XClientMessageEvent.mallocStack(arg0))

    @overload
    def data_l(self, arg0: int) -> int:
        """public long org.lwjgl.system.linux.XClientMessageEvent.data_l(int)"""
        return int._wrap(super(_XClientMessageEvent, self).data_l(_int.valueOf(arg0)))

    @overload
    def message_type(self, arg0: int) -> 'XClientMessageEvent':
        """public org.lwjgl.system.linux.XClientMessageEvent org.lwjgl.system.linux.XClientMessageEvent.message_type(long)"""
        return 'XClientMessageEvent'._wrap(super(_XClientMessageEvent, self).message_type(_long.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @staticmethod
    @overload
    def ndata_l(arg0: int, arg1: 'CLongBuffer'):
        """public static void org.lwjgl.system.linux.XClientMessageEvent.ndata_l(long,org.lwjgl.CLongBuffer)"""
        _XClientMessageEvent.ndata_l(_long.valueOf(arg0), arg1)

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @staticmethod
    @overload
    def nmessage_type(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XClientMessageEvent.nmessage_type(long,long)"""
        _XClientMessageEvent.nmessage_type(_long.valueOf(arg0), _long.valueOf(arg1))

    @overload
    def data_s(self, arg0: int) -> int:
        """public short org.lwjgl.system.linux.XClientMessageEvent.data_s(int)"""
        return int._wrap(super(_XClientMessageEvent, self).data_s(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def ndata_s(arg0: int) -> 'ShortBuffer':
        """public static java.nio.ShortBuffer org.lwjgl.system.linux.XClientMessageEvent.ndata_s(long)"""
        return ShortBuffer._wrap(_XClientMessageEvent.ndata_s(_long.valueOf(arg0)))

    @overload
    def type(self, arg0: int) -> 'XClientMessageEvent':
        """public org.lwjgl.system.linux.XClientMessageEvent org.lwjgl.system.linux.XClientMessageEvent.type(int)"""
        return 'XClientMessageEvent'._wrap(super(_XClientMessageEvent, self).type(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def nwindow(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XClientMessageEvent.nwindow(long)"""
        return int._wrap(_XClientMessageEvent.nwindow(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XClientMessageEvent.ntype(long)"""
        return int._wrap(_XClientMessageEvent.ntype(_long.valueOf(arg0)))

    @overload
    def format(self, arg0: int) -> 'XClientMessageEvent':
        """public org.lwjgl.system.linux.XClientMessageEvent org.lwjgl.system.linux.XClientMessageEvent.format(int)"""
        return 'XClientMessageEvent'._wrap(super(_XClientMessageEvent, self).format(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def create() -> 'XClientMessageEvent':
        """public static org.lwjgl.system.linux.XClientMessageEvent org.lwjgl.system.linux.XClientMessageEvent.create()"""
        return XClientMessageEvent._wrap(_XClientMessageEvent.create())

    @staticmethod
    @overload
    def ndata_b(arg0: int, arg1: int) -> int:
        """public static byte org.lwjgl.system.linux.XClientMessageEvent.ndata_b(long,int)"""
        return int._wrap(_XClientMessageEvent.ndata_b(_long.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XClientMessageEvent.serial()"""
        return int._wrap(super(XClientMessageEvent, self).serial())

    @staticmethod
    @overload
    def ndata_s(arg0: int, arg1: 'ShortBuffer'):
        """public static void org.lwjgl.system.linux.XClientMessageEvent.ndata_s(long,java.nio.ShortBuffer)"""
        _XClientMessageEvent.ndata_s(_long.valueOf(arg0), arg1)

    @staticmethod
    @overload
    def create(arg0: int) -> 'XClientMessageEvent':
        """public static org.lwjgl.system.linux.XClientMessageEvent org.lwjgl.system.linux.XClientMessageEvent.create(long)"""
        return XClientMessageEvent._wrap(_XClientMessageEvent.create(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc() -> 'XClientMessageEvent':
        """public static org.lwjgl.system.linux.XClientMessageEvent org.lwjgl.system.linux.XClientMessageEvent.malloc()"""
        return XClientMessageEvent._wrap(_XClientMessageEvent.malloc())

    @staticmethod
    @overload
    def nformat(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XClientMessageEvent.nformat(long)"""
        return int._wrap(_XClientMessageEvent.nformat(_long.valueOf(arg0)))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XClientMessageEvent(java.nio.ByteBuffer)"""
        val = _XClientMessageEvent(arg0)
        self.__wrapper = val

    @staticmethod
    @overload
    def nwindow(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XClientMessageEvent.nwindow(long,long)"""
        _XClientMessageEvent.nwindow(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XClientMessageEvent$Buffer org.lwjgl.system.linux.XClientMessageEvent.calloc(int)"""
        return Buffer._wrap(_XClientMessageEvent.calloc(_int.valueOf(arg0)))

    @overload
    def message_type(self) -> int:
        """public long org.lwjgl.system.linux.XClientMessageEvent.message_type()"""
        return int._wrap(super(XClientMessageEvent, self).message_type())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int, arg5: int, arg6: int, arg7: 'ByteBuffer', arg8: 'ShortBuffer', arg9: 'CLongBuffer') -> 'XClientMessageEvent':
        """public org.lwjgl.system.linux.XClientMessageEvent org.lwjgl.system.linux.XClientMessageEvent.set(int,long,boolean,long,long,long,int,java.nio.ByteBuffer,java.nio.ShortBuffer,org.lwjgl.CLongBuffer)"""
        return 'XClientMessageEvent'._wrap(super(_XClientMessageEvent, self).set(_int.valueOf(arg0), _long.valueOf(arg1), _boolean.valueOf(arg2), _long.valueOf(arg3), _long.valueOf(arg4), _long.valueOf(arg5), _int.valueOf(arg6), arg7, arg8, arg9))

    @staticmethod
    @overload
    def calloc() -> 'XClientMessageEvent':
        """public static org.lwjgl.system.linux.XClientMessageEvent org.lwjgl.system.linux.XClientMessageEvent.calloc()"""
        return XClientMessageEvent._wrap(_XClientMessageEvent.calloc())

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XClientMessageEvent$Buffer org.lwjgl.system.linux.XClientMessageEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XClientMessageEvent.callocStack(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def ndata_l(arg0: int, arg1: int) -> int:
        """public static long org.lwjgl.system.linux.XClientMessageEvent.ndata_l(long,int)"""
        return int._wrap(_XClientMessageEvent.ndata_l(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        _Struct.validate(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), arg3)

    @staticmethod
    @overload
    def ndata_l(arg0: int, arg1: int, arg2: int):
        """public static void org.lwjgl.system.linux.XClientMessageEvent.ndata_l(long,int,long)"""
        _XClientMessageEvent.ndata_l(_long.valueOf(arg0), _int.valueOf(arg1), _long.valueOf(arg2))

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XClientMessageEvent.ndisplay(long)"""
        return int._wrap(_XClientMessageEvent.ndisplay(_long.valueOf(arg0)))

    @overload
    def serial(self, arg0: int) -> 'XClientMessageEvent':
        """public org.lwjgl.system.linux.XClientMessageEvent org.lwjgl.system.linux.XClientMessageEvent.serial(long)"""
        return 'XClientMessageEvent'._wrap(super(_XClientMessageEvent, self).serial(_long.valueOf(arg0)))

    @overload
    def send_event(self, arg0: bool) -> 'XClientMessageEvent':
        """public org.lwjgl.system.linux.XClientMessageEvent org.lwjgl.system.linux.XClientMessageEvent.send_event(boolean)"""
        return 'XClientMessageEvent'._wrap(super(_XClientMessageEvent, self).send_event(_boolean.valueOf(arg0)))

    @overload
    def display(self, arg0: int) -> 'XClientMessageEvent':
        """public org.lwjgl.system.linux.XClientMessageEvent org.lwjgl.system.linux.XClientMessageEvent.display(long)"""
        return 'XClientMessageEvent'._wrap(super(_XClientMessageEvent, self).display(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XClientMessageEvent$Buffer org.lwjgl.system.linux.XClientMessageEvent.malloc(int)"""
        return Buffer._wrap(_XClientMessageEvent.malloc(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XClientMessageEvent':
        """public static org.lwjgl.system.linux.XClientMessageEvent org.lwjgl.system.linux.XClientMessageEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XClientMessageEvent._wrap(_XClientMessageEvent.malloc(arg0))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XClientMessageEvent.type()"""
        return int._wrap(super(XClientMessageEvent, self).type())

    @overload
    def window(self, arg0: int) -> 'XClientMessageEvent':
        """public org.lwjgl.system.linux.XClientMessageEvent org.lwjgl.system.linux.XClientMessageEvent.window(long)"""
        return 'XClientMessageEvent'._wrap(super(_XClientMessageEvent, self).window(_long.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def ndata_b(arg0: int) -> 'ByteBuffer':
        """public static java.nio.ByteBuffer org.lwjgl.system.linux.XClientMessageEvent.ndata_b(long)"""
        return ByteBuffer._wrap(_XClientMessageEvent.ndata_b(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def ndata_s(arg0: int, arg1: int) -> int:
        """public static short org.lwjgl.system.linux.XClientMessageEvent.ndata_s(long,int)"""
        return int._wrap(_XClientMessageEvent.ndata_s(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XClientMessageEvent.nserial(long)"""
        return int._wrap(_XClientMessageEvent.nserial(_long.valueOf(arg0)))

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XClientMessageEvent.display()"""
        return int._wrap(super(XClientMessageEvent, self).display())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).address())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XClientMessageEvent.sizeof()"""
        return int._wrap(super(XClientMessageEvent, self).sizeof())

    @overload
    def data_l(self, arg0: 'CLongBuffer') -> 'XClientMessageEvent':
        """public org.lwjgl.system.linux.XClientMessageEvent org.lwjgl.system.linux.XClientMessageEvent.data_l(org.lwjgl.CLongBuffer)"""
        return 'XClientMessageEvent'._wrap(super(_XClientMessageEvent, self).data_l(arg0))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XClientMessageEvent$Buffer org.lwjgl.system.linux.XClientMessageEvent.create(long,int)"""
        return Buffer._wrap(_XClientMessageEvent.create(_long.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XClientMessageEvent.send_event()"""
        return bool._wrap(super(XClientMessageEvent, self).send_event())

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XClientMessageEvent':
        """public static org.lwjgl.system.linux.XClientMessageEvent org.lwjgl.system.linux.XClientMessageEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XClientMessageEvent._wrap(_XClientMessageEvent.callocStack(arg0))

    @staticmethod
    @overload
    def ndata_b(arg0: int, arg1: 'ByteBuffer'):
        """public static void org.lwjgl.system.linux.XClientMessageEvent.ndata_b(long,java.nio.ByteBuffer)"""
        _XClientMessageEvent.ndata_b(_long.valueOf(arg0), arg1)

    @staticmethod
    @overload
    def nmessage_type(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XClientMessageEvent.nmessage_type(long)"""
        return int._wrap(_XClientMessageEvent.nmessage_type(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def ndata_s(arg0: int, arg1: int, arg2: int):
        """public static void org.lwjgl.system.linux.XClientMessageEvent.ndata_s(long,int,short)"""
        _XClientMessageEvent.ndata_s(_long.valueOf(arg0), _int.valueOf(arg1), _short.valueOf(arg2))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XClientMessageEvent.ntype(long,int)"""
        _XClientMessageEvent.ntype(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def data_b(self, arg0: 'ByteBuffer') -> 'XClientMessageEvent':
        """public org.lwjgl.system.linux.XClientMessageEvent org.lwjgl.system.linux.XClientMessageEvent.data_b(java.nio.ByteBuffer)"""
        return 'XClientMessageEvent'._wrap(super(_XClientMessageEvent, self).data_b(arg0))

    @overload
    def data_l(self, arg0: int, arg1: int) -> 'XClientMessageEvent':
        """public org.lwjgl.system.linux.XClientMessageEvent org.lwjgl.system.linux.XClientMessageEvent.data_l(int,long)"""
        return 'XClientMessageEvent'._wrap(super(_XClientMessageEvent, self).data_l(_int.valueOf(arg0), _long.valueOf(arg1)))

    @overload
    def data_b(self) -> 'ByteBuffer':
        """public java.nio.ByteBuffer org.lwjgl.system.linux.XClientMessageEvent.data_b()"""
        return 'ByteBuffer'._wrap(super(XClientMessageEvent, self).data_b())

    @overload
    def data_s(self, arg0: 'ShortBuffer') -> 'XClientMessageEvent':
        """public org.lwjgl.system.linux.XClientMessageEvent org.lwjgl.system.linux.XClientMessageEvent.data_s(java.nio.ShortBuffer)"""
        return 'XClientMessageEvent'._wrap(super(_XClientMessageEvent, self).data_s(arg0))

    @staticmethod
    @overload
    def mallocStack() -> 'XClientMessageEvent':
        """public static org.lwjgl.system.linux.XClientMessageEvent org.lwjgl.system.linux.XClientMessageEvent.mallocStack()"""
        return XClientMessageEvent._wrap(_XClientMessageEvent.mallocStack())

    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XClientMessageEvent.nsend_event(long)"""
        return int._wrap(_XClientMessageEvent.nsend_event(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XClientMessageEvent.ndisplay(long,long)"""
        _XClientMessageEvent.ndisplay(_long.valueOf(arg0), _long.valueOf(arg1))

    @overload
    def format(self) -> int:
        """public int org.lwjgl.system.linux.XClientMessageEvent.format()"""
        return int._wrap(super(XClientMessageEvent, self).format())

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XClientMessageEvent$Buffer org.lwjgl.system.linux.XClientMessageEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XClientMessageEvent.mallocStack(_int.valueOf(arg0), arg1))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XClientMessageEvent.nserial(long,long)"""
        _XClientMessageEvent.nserial(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def nformat(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XClientMessageEvent.nformat(long,int)"""
        _XClientMessageEvent.nformat(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @overload
    def set(self, arg0: 'XClientMessageEvent') -> 'XClientMessageEvent':
        """public org.lwjgl.system.linux.XClientMessageEvent org.lwjgl.system.linux.XClientMessageEvent.set(org.lwjgl.system.linux.XClientMessageEvent)"""
        return 'XClientMessageEvent'._wrap(super(_XClientMessageEvent, self).set(arg0))

    @staticmethod
    @overload
    def callocStack() -> 'XClientMessageEvent':
        """public static org.lwjgl.system.linux.XClientMessageEvent org.lwjgl.system.linux.XClientMessageEvent.callocStack()"""
        return XClientMessageEvent._wrap(_XClientMessageEvent.callocStack())

    @overload
    def data_s(self, arg0: int, arg1: int) -> 'XClientMessageEvent':
        """public org.lwjgl.system.linux.XClientMessageEvent org.lwjgl.system.linux.XClientMessageEvent.data_s(int,short)"""
        return 'XClientMessageEvent'._wrap(super(_XClientMessageEvent, self).data_s(_int.valueOf(arg0), _short.valueOf(arg1)))

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XClientMessageEvent':
        """public static org.lwjgl.system.linux.XClientMessageEvent org.lwjgl.system.linux.XClientMessageEvent.createSafe(long)"""
        return XClientMessageEvent._wrap(_XClientMessageEvent.createSafe(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XClientMessageEvent$Buffer org.lwjgl.system.linux.XClientMessageEvent.callocStack(int)"""
        return Buffer._wrap(_XClientMessageEvent.callocStack(_int.valueOf(arg0)))

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XClientMessageEvent.window()"""
        return int._wrap(super(XClientMessageEvent, self).window())

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XClientMessageEvent.validate(long)"""
        _XClientMessageEvent.validate(_long.valueOf(arg0))

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XClientMessageEvent$Buffer org.lwjgl.system.linux.XClientMessageEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XClientMessageEvent.malloc(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XClientMessageEvent$Buffer org.lwjgl.system.linux.XClientMessageEvent.createSafe(long,int)"""
        return Buffer._wrap(_XClientMessageEvent.createSafe(_long.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def data_b(self, arg0: int) -> int:
        """public byte org.lwjgl.system.linux.XClientMessageEvent.data_b(int)"""
        return int._wrap(super(_XClientMessageEvent, self).data_b(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def ndata_l(arg0: int) -> 'pygl.CLongBuffer':
        """public static org.lwjgl.CLongBuffer org.lwjgl.system.linux.XClientMessageEvent.ndata_l(long)"""
        return pygl.CLongBuffer._wrap(_XClientMessageEvent.ndata_l(_long.valueOf(arg0)))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XClientMessageEvent$Buffer org.lwjgl.system.linux.XClientMessageEvent.mallocStack(int)"""
        return Buffer._wrap(_XClientMessageEvent.mallocStack(_int.valueOf(arg0)))

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool._wrap(super(_pyglsystem.Struct, self).isNull(_int.valueOf(arg0)))

    @overload
    def data_l(self) -> 'pygl.CLongBuffer':
        """public org.lwjgl.CLongBuffer org.lwjgl.system.linux.XClientMessageEvent.data_l()"""
        return 'pygl.CLongBuffer'._wrap(super(XClientMessageEvent, self).data_l())

    @overload
    def data_b(self, arg0: int, arg1: int) -> 'XClientMessageEvent':
        """public org.lwjgl.system.linux.XClientMessageEvent org.lwjgl.system.linux.XClientMessageEvent.data_b(int,byte)"""
        return 'XClientMessageEvent'._wrap(super(_XClientMessageEvent, self).data_b(_int.valueOf(arg0), _byte.valueOf(arg1)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XClientMessageEvent$Buffer org.lwjgl.system.linux.XClientMessageEvent.create(int)"""
        return Buffer._wrap(_XClientMessageEvent.create(_int.valueOf(arg0)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str._wrap(super(pyglsystem.Pointer$Default, self).toString())

    @overload
    def data_s(self) -> 'ShortBuffer':
        """public java.nio.ShortBuffer org.lwjgl.system.linux.XClientMessageEvent.data_s()"""
        return 'ShortBuffer'._wrap(super(XClientMessageEvent, self).data_s()) 
 
 
# CLASS: org.lwjgl.system.linux.XTimeCoord$Buffer
from pyquantum_helper import import_once as _import_once
import java.lang.Object as _Object
_Object = _Object
from builtins import type
import org.lwjgl.system.CustomBuffer as _CustomBuffer
_CustomBuffer = _CustomBuffer
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import org.lwjgl.system.StructBuffer as _StructBuffer
_StructBuffer = _StructBuffer
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import org.lwjgl.system.linux.XTimeCoord as _XTimeCoord_Buffer
_Buffer = _XTimeCoord_Buffer.Buffer
import java.util.Iterator as _Iterator
_Iterator = _Iterator
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
import java.util.Spliterator as _Spliterator
_Spliterator = _Spliterator
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.util.Iterator as Iterator
import java.lang.Integer as _int
import java.util.stream.Stream as _Stream
_Stream = _Stream
import java.util.stream.Stream as Stream
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class Buffer():
    """org.lwjgl.system.linux.XTimeCoord.Buffer"""
 
    @staticmethod
    def _wrap(java_value: _Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Buffer__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Buffer__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def x(self) -> int:
        """public short org.lwjgl.system.linux.XTimeCoord$Buffer.x()"""
        return int._wrap(super(Buffer, self).x())

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).limit(_int.valueOf(arg0)))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str._wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int._wrap(super(_pyglsystem.CustomBuffer, self).address(_int.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'._wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).stream())

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).position(_int.valueOf(arg0)))

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XTimeCoord$Buffer(long,int)"""
        val = _Buffer(_long.valueOf(arg0), _int.valueOf(arg1))
        self.__wrapper = val

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'._wrap(super(pyglsystem.StructBuffer, self).get())

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def time(self) -> int:
        """public long org.lwjgl.system.linux.XTimeCoord$Buffer.time()"""
        return int._wrap(super(Buffer, self).time())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(arg0))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'._wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def y(self) -> int:
        """public short org.lwjgl.system.linux.XTimeCoord$Buffer.y()"""
        return int._wrap(super(Buffer, self).y())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).slice())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).slice(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0), arg1))

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(_int.valueOf(arg0), arg1))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).clear())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool._wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).flip())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int._wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(_int.valueOf(arg0), arg1))

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XTimeCoord$Buffer(java.nio.ByteBuffer)"""
        val = _Buffer(arg0)
        self.__wrapper = val

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(_pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(arg0)) 
 
 
# CLASS: org.lwjgl.system.linux.XColormapEvent$Buffer
from pyquantum_helper import import_once as _import_once
import java.lang.Object as _Object
_Object = _Object
from builtins import type
import org.lwjgl.system.CustomBuffer as _CustomBuffer
_CustomBuffer = _CustomBuffer
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import java.util.function.Consumer as Consumer
import org.lwjgl.system.linux.XColormapEvent as _XColormapEvent_Buffer
_Buffer = _XColormapEvent_Buffer.Buffer
import java.util.Spliterator as Spliterator
import java.lang.Boolean as _boolean
import org.lwjgl.system.StructBuffer as _StructBuffer
_StructBuffer = _StructBuffer
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.util.Iterator as _Iterator
_Iterator = _Iterator
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
import java.util.Spliterator as _Spliterator
_Spliterator = _Spliterator
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.util.Iterator as Iterator
import java.lang.Integer as _int
import java.util.stream.Stream as _Stream
_Stream = _Stream
import java.util.stream.Stream as Stream
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class Buffer():
    """org.lwjgl.system.linux.XColormapEvent.Buffer"""
 
    @staticmethod
    def _wrap(java_value: _Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Buffer__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Buffer__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).limit(_int.valueOf(arg0)))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XColormapEvent$Buffer.window()"""
        return int._wrap(super(Buffer, self).window())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address())

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XColormapEvent$Buffer org.lwjgl.system.linux.XColormapEvent$Buffer.type(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).type(_int.valueOf(arg0)))

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @overload
    def state(self) -> int:
        """public int org.lwjgl.system.linux.XColormapEvent$Buffer.state()"""
        return int._wrap(super(Buffer, self).state())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def colormap(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XColormapEvent$Buffer org.lwjgl.system.linux.XColormapEvent$Buffer.colormap(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).colormap(_long.valueOf(arg0)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str._wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XColormapEvent$Buffer org.lwjgl.system.linux.XColormapEvent$Buffer.send_event(boolean)"""
        return 'Buffer'._wrap(super(_Buffer, self).send_event(_boolean.valueOf(arg0)))

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int._wrap(super(_pyglsystem.CustomBuffer, self).address(_int.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'._wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).stream())

    @overload
    def colormap(self) -> int:
        """public long org.lwjgl.system.linux.XColormapEvent$Buffer.colormap()"""
        return int._wrap(super(Buffer, self).colormap())

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).position(_int.valueOf(arg0)))

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XColormapEvent$Buffer org.lwjgl.system.linux.XColormapEvent$Buffer.display(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).display(_long.valueOf(arg0)))

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XColormapEvent$Buffer org.lwjgl.system.linux.XColormapEvent$Buffer.serial(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).serial(_long.valueOf(arg0)))

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XColormapEvent$Buffer.display()"""
        return int._wrap(super(Buffer, self).display())

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XColormapEvent$Buffer.send_event()"""
        return bool._wrap(super(Buffer, self).send_event())

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'._wrap(super(pyglsystem.StructBuffer, self).get())

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def new$(self) -> int:
        """public int org.lwjgl.system.linux.XColormapEvent$Buffer.new$()"""
        return int._wrap(super(Buffer, self).new$())

    @overload
    def state(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XColormapEvent$Buffer org.lwjgl.system.linux.XColormapEvent$Buffer.state(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).state(_int.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XColormapEvent$Buffer.type()"""
        return int._wrap(super(Buffer, self).type())

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(arg0))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XColormapEvent$Buffer(long,int)"""
        val = _Buffer(_long.valueOf(arg0), _int.valueOf(arg1))
        self.__wrapper = val

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'._wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XColormapEvent$Buffer.serial()"""
        return int._wrap(super(Buffer, self).serial())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).slice())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).slice(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0), arg1))

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(_int.valueOf(arg0), arg1))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).clear())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool._wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).flip())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int._wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(_int.valueOf(arg0), arg1))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XColormapEvent$Buffer(java.nio.ByteBuffer)"""
        val = _Buffer(arg0)
        self.__wrapper = val

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(_pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def new$(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XColormapEvent$Buffer org.lwjgl.system.linux.XColormapEvent$Buffer.new$(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).new$(_int.valueOf(arg0)))

    @overload
    def window(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XColormapEvent$Buffer org.lwjgl.system.linux.XColormapEvent$Buffer.window(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).window(_long.valueOf(arg0)))

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(arg0)) 
 
 
# CLASS: org.lwjgl.system.linux.Statx$Buffer
from pyquantum_helper import import_once as _import_once
import java.lang.Object as _Object
_Object = _Object
from builtins import type
import org.lwjgl.system.CustomBuffer as _CustomBuffer
_CustomBuffer = _CustomBuffer
import org.lwjgl.system.linux.Statx as _Statx_Buffer
_Buffer = _Statx_Buffer.Buffer
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import java.lang.Short as _short
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import org.lwjgl.system.StructBuffer as _StructBuffer
_StructBuffer = _StructBuffer
import org.lwjgl.system.linux.StatxTimestamp as _StatxTimestamp
_StatxTimestamp = _StatxTimestamp
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.util.Iterator as _Iterator
_Iterator = _Iterator
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
import java.util.Spliterator as _Spliterator
_Spliterator = _Spliterator
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.util.Iterator as Iterator
import java.lang.Integer as _int
import java.util.stream.Stream as _Stream
_Stream = _Stream
import java.util.stream.Stream as Stream
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class Buffer():
    """org.lwjgl.system.linux.Statx.Buffer"""
 
    @staticmethod
    def _wrap(java_value: _Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Buffer__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Buffer__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.Statx$Buffer(java.nio.ByteBuffer)"""
        val = _Buffer(arg0)
        self.__wrapper = val

    @overload
    def stx_mnt_id(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Statx$Buffer org.lwjgl.system.linux.Statx$Buffer.stx_mnt_id(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).stx_mnt_id(_long.valueOf(arg0)))

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).limit(_int.valueOf(arg0)))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address0())

    @overload
    def stx_ino(self) -> int:
        """public long org.lwjgl.system.linux.Statx$Buffer.stx_ino()"""
        return int._wrap(super(Buffer, self).stx_ino())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def stx_dev_minor(self) -> int:
        """public int org.lwjgl.system.linux.Statx$Buffer.stx_dev_minor()"""
        return int._wrap(super(Buffer, self).stx_dev_minor())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address())

    @overload
    def stx_atime(self, arg0: 'StatxTimestamp') -> 'Buffer':
        """public org.lwjgl.system.linux.Statx$Buffer org.lwjgl.system.linux.Statx$Buffer.stx_atime(org.lwjgl.system.linux.StatxTimestamp)"""
        return 'Buffer'._wrap(super(_Buffer, self).stx_atime(arg0))

    @overload
    def stx_btime(self, arg0: 'Consumer') -> 'Buffer':
        """public org.lwjgl.system.linux.Statx$Buffer org.lwjgl.system.linux.Statx$Buffer.stx_btime(java.util.function.Consumer<org.lwjgl.system.linux.StatxTimestamp>)"""
        return 'Buffer'._wrap(super(_Buffer, self).stx_btime(arg0))

    @overload
    def stx_ino(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Statx$Buffer org.lwjgl.system.linux.Statx$Buffer.stx_ino(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).stx_ino(_long.valueOf(arg0)))

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def stx_ctime(self) -> 'StatxTimestamp':
        """public org.lwjgl.system.linux.StatxTimestamp org.lwjgl.system.linux.Statx$Buffer.stx_ctime()"""
        return 'StatxTimestamp'._wrap(super(Buffer, self).stx_ctime())

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0)))

    @overload
    def stx_rdev_minor(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Statx$Buffer org.lwjgl.system.linux.Statx$Buffer.stx_rdev_minor(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).stx_rdev_minor(_int.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str._wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def stx_blksize(self) -> int:
        """public int org.lwjgl.system.linux.Statx$Buffer.stx_blksize()"""
        return int._wrap(super(Buffer, self).stx_blksize())

    @overload
    def stx_size(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Statx$Buffer org.lwjgl.system.linux.Statx$Buffer.stx_size(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).stx_size(_long.valueOf(arg0)))

    @overload
    def stx_blocks(self) -> int:
        """public long org.lwjgl.system.linux.Statx$Buffer.stx_blocks()"""
        return int._wrap(super(Buffer, self).stx_blocks())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int._wrap(super(_pyglsystem.CustomBuffer, self).address(_int.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).mark())

    @overload
    def stx_nlink(self) -> int:
        """public int org.lwjgl.system.linux.Statx$Buffer.stx_nlink()"""
        return int._wrap(super(Buffer, self).stx_nlink())

    @overload
    def stx_blocks(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Statx$Buffer org.lwjgl.system.linux.Statx$Buffer.stx_blocks(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).stx_blocks(_long.valueOf(arg0)))

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'._wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).stream())

    @overload
    def stx_ctime(self, arg0: 'StatxTimestamp') -> 'Buffer':
        """public org.lwjgl.system.linux.Statx$Buffer org.lwjgl.system.linux.Statx$Buffer.stx_ctime(org.lwjgl.system.linux.StatxTimestamp)"""
        return 'Buffer'._wrap(super(_Buffer, self).stx_ctime(arg0))

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).position(_int.valueOf(arg0)))

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.Statx$Buffer(long,int)"""
        val = _Buffer(_long.valueOf(arg0), _int.valueOf(arg1))
        self.__wrapper = val

    @overload
    def stx_rdev_major(self) -> int:
        """public int org.lwjgl.system.linux.Statx$Buffer.stx_rdev_major()"""
        return int._wrap(super(Buffer, self).stx_rdev_major())

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'._wrap(super(pyglsystem.StructBuffer, self).get())

    @overload
    def stx_rdev_minor(self) -> int:
        """public int org.lwjgl.system.linux.Statx$Buffer.stx_rdev_minor()"""
        return int._wrap(super(Buffer, self).stx_rdev_minor())

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def stx_blksize(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Statx$Buffer org.lwjgl.system.linux.Statx$Buffer.stx_blksize(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).stx_blksize(_int.valueOf(arg0)))

    @overload
    def stx_gid(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Statx$Buffer org.lwjgl.system.linux.Statx$Buffer.stx_gid(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).stx_gid(_int.valueOf(arg0)))

    @overload
    def stx_attributes_mask(self) -> int:
        """public long org.lwjgl.system.linux.Statx$Buffer.stx_attributes_mask()"""
        return int._wrap(super(Buffer, self).stx_attributes_mask())

    @overload
    def stx_attributes_mask(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Statx$Buffer org.lwjgl.system.linux.Statx$Buffer.stx_attributes_mask(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).stx_attributes_mask(_long.valueOf(arg0)))

    @overload
    def stx_btime(self) -> 'StatxTimestamp':
        """public org.lwjgl.system.linux.StatxTimestamp org.lwjgl.system.linux.Statx$Buffer.stx_btime()"""
        return 'StatxTimestamp'._wrap(super(Buffer, self).stx_btime())

    @overload
    def stx_attributes(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Statx$Buffer org.lwjgl.system.linux.Statx$Buffer.stx_attributes(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).stx_attributes(_long.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def stx_uid(self) -> int:
        """public int org.lwjgl.system.linux.Statx$Buffer.stx_uid()"""
        return int._wrap(super(Buffer, self).stx_uid())

    @overload
    def stx_dev_major(self) -> int:
        """public int org.lwjgl.system.linux.Statx$Buffer.stx_dev_major()"""
        return int._wrap(super(Buffer, self).stx_dev_major())

    @overload
    def stx_atime(self, arg0: 'Consumer') -> 'Buffer':
        """public org.lwjgl.system.linux.Statx$Buffer org.lwjgl.system.linux.Statx$Buffer.stx_atime(java.util.function.Consumer<org.lwjgl.system.linux.StatxTimestamp>)"""
        return 'Buffer'._wrap(super(_Buffer, self).stx_atime(arg0))

    @overload
    def stx_btime(self, arg0: 'StatxTimestamp') -> 'Buffer':
        """public org.lwjgl.system.linux.Statx$Buffer org.lwjgl.system.linux.Statx$Buffer.stx_btime(org.lwjgl.system.linux.StatxTimestamp)"""
        return 'Buffer'._wrap(super(_Buffer, self).stx_btime(arg0))

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def stx_mask(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Statx$Buffer org.lwjgl.system.linux.Statx$Buffer.stx_mask(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).stx_mask(_int.valueOf(arg0)))

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def stx_mask(self) -> int:
        """public int org.lwjgl.system.linux.Statx$Buffer.stx_mask()"""
        return int._wrap(super(Buffer, self).stx_mask())

    @overload
    def stx_dev_major(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Statx$Buffer org.lwjgl.system.linux.Statx$Buffer.stx_dev_major(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).stx_dev_major(_int.valueOf(arg0)))

    @overload
    def stx_dev_minor(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Statx$Buffer org.lwjgl.system.linux.Statx$Buffer.stx_dev_minor(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).stx_dev_minor(_int.valueOf(arg0)))

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(arg0))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def stx_mtime(self, arg0: 'StatxTimestamp') -> 'Buffer':
        """public org.lwjgl.system.linux.Statx$Buffer org.lwjgl.system.linux.Statx$Buffer.stx_mtime(org.lwjgl.system.linux.StatxTimestamp)"""
        return 'Buffer'._wrap(super(_Buffer, self).stx_mtime(arg0))

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'._wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def stx_mnt_id(self) -> int:
        """public long org.lwjgl.system.linux.Statx$Buffer.stx_mnt_id()"""
        return int._wrap(super(Buffer, self).stx_mnt_id())

    @overload
    def stx_attributes(self) -> int:
        """public long org.lwjgl.system.linux.Statx$Buffer.stx_attributes()"""
        return int._wrap(super(Buffer, self).stx_attributes())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(arg0))

    @overload
    def stx_mtime(self, arg0: 'Consumer') -> 'Buffer':
        """public org.lwjgl.system.linux.Statx$Buffer org.lwjgl.system.linux.Statx$Buffer.stx_mtime(java.util.function.Consumer<org.lwjgl.system.linux.StatxTimestamp>)"""
        return 'Buffer'._wrap(super(_Buffer, self).stx_mtime(arg0))

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).slice())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).slice(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def stx_ctime(self, arg0: 'Consumer') -> 'Buffer':
        """public org.lwjgl.system.linux.Statx$Buffer org.lwjgl.system.linux.Statx$Buffer.stx_ctime(java.util.function.Consumer<org.lwjgl.system.linux.StatxTimestamp>)"""
        return 'Buffer'._wrap(super(_Buffer, self).stx_ctime(arg0))

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0), arg1))

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(_int.valueOf(arg0), arg1))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).clear())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool._wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @overload
    def stx_atime(self) -> 'StatxTimestamp':
        """public org.lwjgl.system.linux.StatxTimestamp org.lwjgl.system.linux.Statx$Buffer.stx_atime()"""
        return 'StatxTimestamp'._wrap(super(Buffer, self).stx_atime())

    @overload
    def stx_nlink(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Statx$Buffer org.lwjgl.system.linux.Statx$Buffer.stx_nlink(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).stx_nlink(_int.valueOf(arg0)))

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def stx_mode(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Statx$Buffer org.lwjgl.system.linux.Statx$Buffer.stx_mode(short)"""
        return 'Buffer'._wrap(super(_Buffer, self).stx_mode(_short.valueOf(arg0)))

    @overload
    def stx_mode(self) -> int:
        """public short org.lwjgl.system.linux.Statx$Buffer.stx_mode()"""
        return int._wrap(super(Buffer, self).stx_mode())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int._wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(_int.valueOf(arg0), arg1))

    @overload
    def stx_size(self) -> int:
        """public long org.lwjgl.system.linux.Statx$Buffer.stx_size()"""
        return int._wrap(super(Buffer, self).stx_size())

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(_pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def stx_uid(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Statx$Buffer org.lwjgl.system.linux.Statx$Buffer.stx_uid(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).stx_uid(_int.valueOf(arg0)))

    @overload
    def stx_mtime(self) -> 'StatxTimestamp':
        """public org.lwjgl.system.linux.StatxTimestamp org.lwjgl.system.linux.Statx$Buffer.stx_mtime()"""
        return 'StatxTimestamp'._wrap(super(Buffer, self).stx_mtime())

    @overload
    def stx_gid(self) -> int:
        """public int org.lwjgl.system.linux.Statx$Buffer.stx_gid()"""
        return int._wrap(super(Buffer, self).stx_gid())

    @overload
    def stx_rdev_major(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.Statx$Buffer org.lwjgl.system.linux.Statx$Buffer.stx_rdev_major(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).stx_rdev_major(_int.valueOf(arg0)))

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(arg0)) 
 
 
# CLASS: org.lwjgl.system.linux.XKeymapEvent
from pyquantum_helper import import_once as _import_once
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _Object
_Object = _Object
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
from builtins import type
import org.lwjgl.system.linux.XKeymapEvent as _XKeymapEvent
_XKeymapEvent = _XKeymapEvent
import java.nio.ByteBuffer as _ByteBuffer
_ByteBuffer = _ByteBuffer
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import org.lwjgl.system.linux.XKeymapEvent as _XKeymapEvent_Buffer
_Buffer = _XKeymapEvent_Buffer.Buffer
import java.lang.Boolean as _boolean
import java.lang.Integer as _int
import java.lang.Byte as _byte
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class XKeymapEvent():
    """org.lwjgl.system.linux.XKeymapEvent"""
 
    @staticmethod
    def _wrap(java_value: _XKeymapEvent) -> 'XKeymapEvent':
        return XKeymapEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _XKeymapEvent):
        """
        Dynamic initializer for XKeymapEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_XKeymapEvent__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_XKeymapEvent__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def nkey_vector(arg0: int, arg1: 'ByteBuffer'):
        """public static void org.lwjgl.system.linux.XKeymapEvent.nkey_vector(long,java.nio.ByteBuffer)"""
        _XKeymapEvent.nkey_vector(_long.valueOf(arg0), arg1)

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XKeymapEvent$Buffer org.lwjgl.system.linux.XKeymapEvent.malloc(int)"""
        return Buffer._wrap(_XKeymapEvent.malloc(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XKeymapEvent$Buffer org.lwjgl.system.linux.XKeymapEvent.createSafe(long,int)"""
        return Buffer._wrap(_XKeymapEvent.createSafe(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def create() -> 'XKeymapEvent':
        """public static org.lwjgl.system.linux.XKeymapEvent org.lwjgl.system.linux.XKeymapEvent.create()"""
        return XKeymapEvent._wrap(_XKeymapEvent.create())

    @staticmethod
    @overload
    def nwindow(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XKeymapEvent.nwindow(long,long)"""
        _XKeymapEvent.nwindow(_long.valueOf(arg0), _long.valueOf(arg1))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def key_vector(self, arg0: int) -> int:
        """public byte org.lwjgl.system.linux.XKeymapEvent.key_vector(int)"""
        return int._wrap(super(_XKeymapEvent, self).key_vector(_int.valueOf(arg0)))

    @overload
    def window(self, arg0: int) -> 'XKeymapEvent':
        """public org.lwjgl.system.linux.XKeymapEvent org.lwjgl.system.linux.XKeymapEvent.window(long)"""
        return 'XKeymapEvent'._wrap(super(_XKeymapEvent, self).window(_long.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XKeymapEvent$Buffer org.lwjgl.system.linux.XKeymapEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XKeymapEvent.mallocStack(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def malloc() -> 'XKeymapEvent':
        """public static org.lwjgl.system.linux.XKeymapEvent org.lwjgl.system.linux.XKeymapEvent.malloc()"""
        return XKeymapEvent._wrap(_XKeymapEvent.malloc())

    @staticmethod
    @overload
    def nwindow(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XKeymapEvent.nwindow(long)"""
        return int._wrap(_XKeymapEvent.nwindow(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack() -> 'XKeymapEvent':
        """public static org.lwjgl.system.linux.XKeymapEvent org.lwjgl.system.linux.XKeymapEvent.mallocStack()"""
        return XKeymapEvent._wrap(_XKeymapEvent.mallocStack())

    @staticmethod
    @overload
    def nkey_vector(arg0: int, arg1: int) -> int:
        """public static byte org.lwjgl.system.linux.XKeymapEvent.nkey_vector(long,int)"""
        return int._wrap(_XKeymapEvent.nkey_vector(_long.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def type(self, arg0: int) -> 'XKeymapEvent':
        """public org.lwjgl.system.linux.XKeymapEvent org.lwjgl.system.linux.XKeymapEvent.type(int)"""
        return 'XKeymapEvent'._wrap(super(_XKeymapEvent, self).type(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XKeymapEvent$Buffer org.lwjgl.system.linux.XKeymapEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XKeymapEvent.calloc(_int.valueOf(arg0), arg1))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XKeymapEvent.ntype(long)"""
        return int._wrap(_XKeymapEvent.ntype(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        _Struct.validate(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), arg3)

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XKeymapEvent$Buffer org.lwjgl.system.linux.XKeymapEvent.create(long,int)"""
        return Buffer._wrap(_XKeymapEvent.create(_long.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XKeymapEvent$Buffer org.lwjgl.system.linux.XKeymapEvent.callocStack(int)"""
        return Buffer._wrap(_XKeymapEvent.callocStack(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XKeymapEvent.ndisplay(long,long)"""
        _XKeymapEvent.ndisplay(_long.valueOf(arg0), _long.valueOf(arg1))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def nkey_vector(arg0: int) -> 'ByteBuffer':
        """public static java.nio.ByteBuffer org.lwjgl.system.linux.XKeymapEvent.nkey_vector(long)"""
        return ByteBuffer._wrap(_XKeymapEvent.nkey_vector(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XKeymapEvent.nsend_event(long)"""
        return int._wrap(_XKeymapEvent.nsend_event(_long.valueOf(arg0)))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).address())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XKeymapEvent.sizeof()"""
        return int._wrap(super(XKeymapEvent, self).sizeof())

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XKeymapEvent$Buffer org.lwjgl.system.linux.XKeymapEvent.create(int)"""
        return Buffer._wrap(_XKeymapEvent.create(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XKeymapEvent.nserial(long,long)"""
        _XKeymapEvent.nserial(_long.valueOf(arg0), _long.valueOf(arg1))

    @overload
    def key_vector(self, arg0: int, arg1: int) -> 'XKeymapEvent':
        """public org.lwjgl.system.linux.XKeymapEvent org.lwjgl.system.linux.XKeymapEvent.key_vector(int,byte)"""
        return 'XKeymapEvent'._wrap(super(_XKeymapEvent, self).key_vector(_int.valueOf(arg0), _byte.valueOf(arg1)))

    @overload
    def send_event(self, arg0: bool) -> 'XKeymapEvent':
        """public org.lwjgl.system.linux.XKeymapEvent org.lwjgl.system.linux.XKeymapEvent.send_event(boolean)"""
        return 'XKeymapEvent'._wrap(super(_XKeymapEvent, self).send_event(_boolean.valueOf(arg0)))

    @overload
    def key_vector(self) -> 'ByteBuffer':
        """public java.nio.ByteBuffer org.lwjgl.system.linux.XKeymapEvent.key_vector()"""
        return 'ByteBuffer'._wrap(super(XKeymapEvent, self).key_vector())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XKeymapEvent':
        """public static org.lwjgl.system.linux.XKeymapEvent org.lwjgl.system.linux.XKeymapEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XKeymapEvent._wrap(_XKeymapEvent.malloc(arg0))

    @staticmethod
    @overload
    def nkey_vector(arg0: int, arg1: int, arg2: int):
        """public static void org.lwjgl.system.linux.XKeymapEvent.nkey_vector(long,int,byte)"""
        _XKeymapEvent.nkey_vector(_long.valueOf(arg0), _int.valueOf(arg1), _byte.valueOf(arg2))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XKeymapEvent':
        """public static org.lwjgl.system.linux.XKeymapEvent org.lwjgl.system.linux.XKeymapEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XKeymapEvent._wrap(_XKeymapEvent.calloc(arg0))

    @overload
    def key_vector(self, arg0: 'ByteBuffer') -> 'XKeymapEvent':
        """public org.lwjgl.system.linux.XKeymapEvent org.lwjgl.system.linux.XKeymapEvent.key_vector(java.nio.ByteBuffer)"""
        return 'XKeymapEvent'._wrap(super(_XKeymapEvent, self).key_vector(arg0))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XKeymapEvent.type()"""
        return int._wrap(super(XKeymapEvent, self).type())

    @staticmethod
    @overload
    def calloc() -> 'XKeymapEvent':
        """public static org.lwjgl.system.linux.XKeymapEvent org.lwjgl.system.linux.XKeymapEvent.calloc()"""
        return XKeymapEvent._wrap(_XKeymapEvent.calloc())

    @overload
    def set(self, arg0: 'XKeymapEvent') -> 'XKeymapEvent':
        """public org.lwjgl.system.linux.XKeymapEvent org.lwjgl.system.linux.XKeymapEvent.set(org.lwjgl.system.linux.XKeymapEvent)"""
        return 'XKeymapEvent'._wrap(super(_XKeymapEvent, self).set(arg0))

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XKeymapEvent.ndisplay(long)"""
        return int._wrap(_XKeymapEvent.ndisplay(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XKeymapEvent$Buffer org.lwjgl.system.linux.XKeymapEvent.calloc(int)"""
        return Buffer._wrap(_XKeymapEvent.calloc(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XKeymapEvent$Buffer org.lwjgl.system.linux.XKeymapEvent.mallocStack(int)"""
        return Buffer._wrap(_XKeymapEvent.mallocStack(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XKeymapEvent.nsend_event(long,int)"""
        _XKeymapEvent.nsend_event(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XKeymapEvent.display()"""
        return int._wrap(super(XKeymapEvent, self).display())

    @overload
    def display(self, arg0: int) -> 'XKeymapEvent':
        """public org.lwjgl.system.linux.XKeymapEvent org.lwjgl.system.linux.XKeymapEvent.display(long)"""
        return 'XKeymapEvent'._wrap(super(_XKeymapEvent, self).display(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XKeymapEvent$Buffer org.lwjgl.system.linux.XKeymapEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XKeymapEvent.malloc(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def callocStack() -> 'XKeymapEvent':
        """public static org.lwjgl.system.linux.XKeymapEvent org.lwjgl.system.linux.XKeymapEvent.callocStack()"""
        return XKeymapEvent._wrap(_XKeymapEvent.callocStack())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XKeymapEvent':
        """public static org.lwjgl.system.linux.XKeymapEvent org.lwjgl.system.linux.XKeymapEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XKeymapEvent._wrap(_XKeymapEvent.mallocStack(arg0))

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XKeymapEvent.validate(long)"""
        _XKeymapEvent.validate(_long.valueOf(arg0))

    @staticmethod
    @overload
    def create(arg0: int) -> 'XKeymapEvent':
        """public static org.lwjgl.system.linux.XKeymapEvent org.lwjgl.system.linux.XKeymapEvent.create(long)"""
        return XKeymapEvent._wrap(_XKeymapEvent.create(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XKeymapEvent.ntype(long,int)"""
        _XKeymapEvent.ntype(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XKeymapEvent.window()"""
        return int._wrap(super(XKeymapEvent, self).window())

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XKeymapEvent.send_event()"""
        return bool._wrap(super(XKeymapEvent, self).send_event())

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XKeymapEvent.serial()"""
        return int._wrap(super(XKeymapEvent, self).serial())

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XKeymapEvent$Buffer org.lwjgl.system.linux.XKeymapEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XKeymapEvent.callocStack(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XKeymapEvent.nserial(long)"""
        return int._wrap(_XKeymapEvent.nserial(_long.valueOf(arg0)))

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool._wrap(super(_pyglsystem.Struct, self).isNull(_int.valueOf(arg0)))

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int, arg5: 'ByteBuffer') -> 'XKeymapEvent':
        """public org.lwjgl.system.linux.XKeymapEvent org.lwjgl.system.linux.XKeymapEvent.set(int,long,boolean,long,long,java.nio.ByteBuffer)"""
        return 'XKeymapEvent'._wrap(super(_XKeymapEvent, self).set(_int.valueOf(arg0), _long.valueOf(arg1), _boolean.valueOf(arg2), _long.valueOf(arg3), _long.valueOf(arg4), arg5))

    @overload
    def serial(self, arg0: int) -> 'XKeymapEvent':
        """public org.lwjgl.system.linux.XKeymapEvent org.lwjgl.system.linux.XKeymapEvent.serial(long)"""
        return 'XKeymapEvent'._wrap(super(_XKeymapEvent, self).serial(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XKeymapEvent':
        """public static org.lwjgl.system.linux.XKeymapEvent org.lwjgl.system.linux.XKeymapEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XKeymapEvent._wrap(_XKeymapEvent.callocStack(arg0))

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XKeymapEvent':
        """public static org.lwjgl.system.linux.XKeymapEvent org.lwjgl.system.linux.XKeymapEvent.createSafe(long)"""
        return XKeymapEvent._wrap(_XKeymapEvent.createSafe(_long.valueOf(arg0)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str._wrap(super(pyglsystem.Pointer$Default, self).toString())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XKeymapEvent(java.nio.ByteBuffer)"""
        val = _XKeymapEvent(arg0)
        self.__wrapper = val 
 
 
# CLASS: org.lwjgl.system.linux.XNoExposeEvent
from pyquantum_helper import import_once as _import_once
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _Object
_Object = _Object
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
from builtins import type
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import org.lwjgl.system.linux.XNoExposeEvent as _XNoExposeEvent_Buffer
_Buffer = _XNoExposeEvent_Buffer.Buffer
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.lang.Boolean as _boolean
import java.lang.Integer as _int
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import org.lwjgl.system.linux.XNoExposeEvent as _XNoExposeEvent
_XNoExposeEvent = _XNoExposeEvent
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class XNoExposeEvent():
    """org.lwjgl.system.linux.XNoExposeEvent"""
 
    @staticmethod
    def _wrap(java_value: _XNoExposeEvent) -> 'XNoExposeEvent':
        return XNoExposeEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _XNoExposeEvent):
        """
        Dynamic initializer for XNoExposeEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_XNoExposeEvent__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_XNoExposeEvent__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def malloc() -> 'XNoExposeEvent':
        """public static org.lwjgl.system.linux.XNoExposeEvent org.lwjgl.system.linux.XNoExposeEvent.malloc()"""
        return XNoExposeEvent._wrap(_XNoExposeEvent.malloc())

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int, arg5: int, arg6: int) -> 'XNoExposeEvent':
        """public org.lwjgl.system.linux.XNoExposeEvent org.lwjgl.system.linux.XNoExposeEvent.set(int,long,boolean,long,long,int,int)"""
        return 'XNoExposeEvent'._wrap(super(_XNoExposeEvent, self).set(_int.valueOf(arg0), _long.valueOf(arg1), _boolean.valueOf(arg2), _long.valueOf(arg3), _long.valueOf(arg4), _int.valueOf(arg5), _int.valueOf(arg6)))

    @overload
    def major_code(self) -> int:
        """public int org.lwjgl.system.linux.XNoExposeEvent.major_code()"""
        return int._wrap(super(XNoExposeEvent, self).major_code())

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XNoExposeEvent.nserial(long,long)"""
        _XNoExposeEvent.nserial(_long.valueOf(arg0), _long.valueOf(arg1))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XNoExposeEvent':
        """public static org.lwjgl.system.linux.XNoExposeEvent org.lwjgl.system.linux.XNoExposeEvent.createSafe(long)"""
        return XNoExposeEvent._wrap(_XNoExposeEvent.createSafe(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XNoExposeEvent$Buffer org.lwjgl.system.linux.XNoExposeEvent.mallocStack(int)"""
        return Buffer._wrap(_XNoExposeEvent.mallocStack(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XNoExposeEvent$Buffer org.lwjgl.system.linux.XNoExposeEvent.malloc(int)"""
        return Buffer._wrap(_XNoExposeEvent.malloc(_int.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XNoExposeEvent.nsend_event(long)"""
        return int._wrap(_XNoExposeEvent.nsend_event(_long.valueOf(arg0)))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def minor_code(self) -> int:
        """public int org.lwjgl.system.linux.XNoExposeEvent.minor_code()"""
        return int._wrap(super(XNoExposeEvent, self).minor_code())

    @overload
    def minor_code(self, arg0: int) -> 'XNoExposeEvent':
        """public org.lwjgl.system.linux.XNoExposeEvent org.lwjgl.system.linux.XNoExposeEvent.minor_code(int)"""
        return 'XNoExposeEvent'._wrap(super(_XNoExposeEvent, self).minor_code(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XNoExposeEvent$Buffer org.lwjgl.system.linux.XNoExposeEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XNoExposeEvent.mallocStack(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XNoExposeEvent':
        """public static org.lwjgl.system.linux.XNoExposeEvent org.lwjgl.system.linux.XNoExposeEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XNoExposeEvent._wrap(_XNoExposeEvent.mallocStack(arg0))

    @overload
    def send_event(self, arg0: bool) -> 'XNoExposeEvent':
        """public org.lwjgl.system.linux.XNoExposeEvent org.lwjgl.system.linux.XNoExposeEvent.send_event(boolean)"""
        return 'XNoExposeEvent'._wrap(super(_XNoExposeEvent, self).send_event(_boolean.valueOf(arg0)))

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XNoExposeEvent.ntype(long,int)"""
        _XNoExposeEvent.ntype(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XNoExposeEvent.serial()"""
        return int._wrap(super(XNoExposeEvent, self).serial())

    @overload
    def major_code(self, arg0: int) -> 'XNoExposeEvent':
        """public org.lwjgl.system.linux.XNoExposeEvent org.lwjgl.system.linux.XNoExposeEvent.major_code(int)"""
        return 'XNoExposeEvent'._wrap(super(_XNoExposeEvent, self).major_code(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def nmajor_code(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XNoExposeEvent.nmajor_code(long)"""
        return int._wrap(_XNoExposeEvent.nmajor_code(_long.valueOf(arg0)))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @overload
    def set(self, arg0: 'XNoExposeEvent') -> 'XNoExposeEvent':
        """public org.lwjgl.system.linux.XNoExposeEvent org.lwjgl.system.linux.XNoExposeEvent.set(org.lwjgl.system.linux.XNoExposeEvent)"""
        return 'XNoExposeEvent'._wrap(super(_XNoExposeEvent, self).set(arg0))

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        _Struct.validate(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), arg3)

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XNoExposeEvent.ntype(long)"""
        return int._wrap(_XNoExposeEvent.ntype(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'XNoExposeEvent':
        """public static org.lwjgl.system.linux.XNoExposeEvent org.lwjgl.system.linux.XNoExposeEvent.create(long)"""
        return XNoExposeEvent._wrap(_XNoExposeEvent.create(_long.valueOf(arg0)))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XNoExposeEvent.type()"""
        return int._wrap(super(XNoExposeEvent, self).type())

    @staticmethod
    @overload
    def callocStack() -> 'XNoExposeEvent':
        """public static org.lwjgl.system.linux.XNoExposeEvent org.lwjgl.system.linux.XNoExposeEvent.callocStack()"""
        return XNoExposeEvent._wrap(_XNoExposeEvent.callocStack())

    @staticmethod
    @overload
    def create() -> 'XNoExposeEvent':
        """public static org.lwjgl.system.linux.XNoExposeEvent org.lwjgl.system.linux.XNoExposeEvent.create()"""
        return XNoExposeEvent._wrap(_XNoExposeEvent.create())

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XNoExposeEvent.send_event()"""
        return bool._wrap(super(XNoExposeEvent, self).send_event())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def display(self, arg0: int) -> 'XNoExposeEvent':
        """public org.lwjgl.system.linux.XNoExposeEvent org.lwjgl.system.linux.XNoExposeEvent.display(long)"""
        return 'XNoExposeEvent'._wrap(super(_XNoExposeEvent, self).display(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XNoExposeEvent$Buffer org.lwjgl.system.linux.XNoExposeEvent.createSafe(long,int)"""
        return Buffer._wrap(_XNoExposeEvent.createSafe(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XNoExposeEvent':
        """public static org.lwjgl.system.linux.XNoExposeEvent org.lwjgl.system.linux.XNoExposeEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XNoExposeEvent._wrap(_XNoExposeEvent.malloc(arg0))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).address())

    @staticmethod
    @overload
    def ndrawable(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XNoExposeEvent.ndrawable(long)"""
        return int._wrap(_XNoExposeEvent.ndrawable(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XNoExposeEvent$Buffer org.lwjgl.system.linux.XNoExposeEvent.create(long,int)"""
        return Buffer._wrap(_XNoExposeEvent.create(_long.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XNoExposeEvent.validate(long)"""
        _XNoExposeEvent.validate(_long.valueOf(arg0))

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XNoExposeEvent$Buffer org.lwjgl.system.linux.XNoExposeEvent.calloc(int)"""
        return Buffer._wrap(_XNoExposeEvent.calloc(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XNoExposeEvent.ndisplay(long)"""
        return int._wrap(_XNoExposeEvent.ndisplay(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def ndrawable(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XNoExposeEvent.ndrawable(long,long)"""
        _XNoExposeEvent.ndrawable(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XNoExposeEvent':
        """public static org.lwjgl.system.linux.XNoExposeEvent org.lwjgl.system.linux.XNoExposeEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XNoExposeEvent._wrap(_XNoExposeEvent.callocStack(arg0))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XNoExposeEvent':
        """public static org.lwjgl.system.linux.XNoExposeEvent org.lwjgl.system.linux.XNoExposeEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XNoExposeEvent._wrap(_XNoExposeEvent.calloc(arg0))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XNoExposeEvent.sizeof()"""
        return int._wrap(super(XNoExposeEvent, self).sizeof())

    @overload
    def drawable(self) -> int:
        """public long org.lwjgl.system.linux.XNoExposeEvent.drawable()"""
        return int._wrap(super(XNoExposeEvent, self).drawable())

    @staticmethod
    @overload
    def nminor_code(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XNoExposeEvent.nminor_code(long)"""
        return int._wrap(_XNoExposeEvent.nminor_code(_long.valueOf(arg0)))

    @overload
    def type(self, arg0: int) -> 'XNoExposeEvent':
        """public org.lwjgl.system.linux.XNoExposeEvent org.lwjgl.system.linux.XNoExposeEvent.type(int)"""
        return 'XNoExposeEvent'._wrap(super(_XNoExposeEvent, self).type(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XNoExposeEvent.nsend_event(long,int)"""
        _XNoExposeEvent.nsend_event(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def drawable(self, arg0: int) -> 'XNoExposeEvent':
        """public org.lwjgl.system.linux.XNoExposeEvent org.lwjgl.system.linux.XNoExposeEvent.drawable(long)"""
        return 'XNoExposeEvent'._wrap(super(_XNoExposeEvent, self).drawable(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc() -> 'XNoExposeEvent':
        """public static org.lwjgl.system.linux.XNoExposeEvent org.lwjgl.system.linux.XNoExposeEvent.calloc()"""
        return XNoExposeEvent._wrap(_XNoExposeEvent.calloc())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XNoExposeEvent$Buffer org.lwjgl.system.linux.XNoExposeEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XNoExposeEvent.malloc(_int.valueOf(arg0), arg1))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @overload
    def serial(self, arg0: int) -> 'XNoExposeEvent':
        """public org.lwjgl.system.linux.XNoExposeEvent org.lwjgl.system.linux.XNoExposeEvent.serial(long)"""
        return 'XNoExposeEvent'._wrap(super(_XNoExposeEvent, self).serial(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nminor_code(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XNoExposeEvent.nminor_code(long,int)"""
        _XNoExposeEvent.nminor_code(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XNoExposeEvent.display()"""
        return int._wrap(super(XNoExposeEvent, self).display())

    @staticmethod
    @overload
    def mallocStack() -> 'XNoExposeEvent':
        """public static org.lwjgl.system.linux.XNoExposeEvent org.lwjgl.system.linux.XNoExposeEvent.mallocStack()"""
        return XNoExposeEvent._wrap(_XNoExposeEvent.mallocStack())

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XNoExposeEvent$Buffer org.lwjgl.system.linux.XNoExposeEvent.callocStack(int)"""
        return Buffer._wrap(_XNoExposeEvent.callocStack(_int.valueOf(arg0)))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XNoExposeEvent(java.nio.ByteBuffer)"""
        val = _XNoExposeEvent(arg0)
        self.__wrapper = val

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XNoExposeEvent.nserial(long)"""
        return int._wrap(_XNoExposeEvent.nserial(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XNoExposeEvent$Buffer org.lwjgl.system.linux.XNoExposeEvent.create(int)"""
        return Buffer._wrap(_XNoExposeEvent.create(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def nmajor_code(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XNoExposeEvent.nmajor_code(long,int)"""
        _XNoExposeEvent.nmajor_code(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool._wrap(super(_pyglsystem.Struct, self).isNull(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XNoExposeEvent.ndisplay(long,long)"""
        _XNoExposeEvent.ndisplay(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XNoExposeEvent$Buffer org.lwjgl.system.linux.XNoExposeEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XNoExposeEvent.calloc(_int.valueOf(arg0), arg1))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str._wrap(super(pyglsystem.Pointer$Default, self).toString())

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XNoExposeEvent$Buffer org.lwjgl.system.linux.XNoExposeEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XNoExposeEvent.callocStack(_int.valueOf(arg0), arg1)) 
 
 
# CLASS: org.lwjgl.system.linux.XCirculateEvent$Buffer
from pyquantum_helper import import_once as _import_once
import java.lang.Object as _Object
_Object = _Object
from builtins import type
import org.lwjgl.system.CustomBuffer as _CustomBuffer
_CustomBuffer = _CustomBuffer
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Boolean as _boolean
import org.lwjgl.system.StructBuffer as _StructBuffer
_StructBuffer = _StructBuffer
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.util.Iterator as _Iterator
_Iterator = _Iterator
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
import java.util.Spliterator as _Spliterator
_Spliterator = _Spliterator
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.util.Iterator as Iterator
import org.lwjgl.system.linux.XCirculateEvent as _XCirculateEvent_Buffer
_Buffer = _XCirculateEvent_Buffer.Buffer
import java.lang.Integer as _int
import java.util.stream.Stream as _Stream
_Stream = _Stream
import java.util.stream.Stream as Stream
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class Buffer():
    """org.lwjgl.system.linux.XCirculateEvent.Buffer"""
 
    @staticmethod
    def _wrap(java_value: _Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Buffer__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Buffer__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def event(self) -> int:
        """public long org.lwjgl.system.linux.XCirculateEvent$Buffer.event()"""
        return int._wrap(super(Buffer, self).event())

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XCirculateEvent$Buffer.serial()"""
        return int._wrap(super(Buffer, self).serial())

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).limit(_int.valueOf(arg0)))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def event(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCirculateEvent$Buffer org.lwjgl.system.linux.XCirculateEvent$Buffer.event(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).event(_long.valueOf(arg0)))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address())

    @overload
    def window(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCirculateEvent$Buffer org.lwjgl.system.linux.XCirculateEvent$Buffer.window(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).window(_long.valueOf(arg0)))

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str._wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int._wrap(super(_pyglsystem.CustomBuffer, self).address(_int.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).mark())

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCirculateEvent$Buffer org.lwjgl.system.linux.XCirculateEvent$Buffer.type(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).type(_int.valueOf(arg0)))

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'._wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).stream())

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XCirculateEvent$Buffer(long,int)"""
        val = _Buffer(_long.valueOf(arg0), _int.valueOf(arg1))
        self.__wrapper = val

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).position(_int.valueOf(arg0)))

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCirculateEvent$Buffer org.lwjgl.system.linux.XCirculateEvent$Buffer.display(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).display(_long.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'._wrap(super(pyglsystem.StructBuffer, self).get())

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XCirculateEvent$Buffer org.lwjgl.system.linux.XCirculateEvent$Buffer.send_event(boolean)"""
        return 'Buffer'._wrap(super(_Buffer, self).send_event(_boolean.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(arg0))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCirculateEvent$Buffer org.lwjgl.system.linux.XCirculateEvent$Buffer.serial(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).serial(_long.valueOf(arg0)))

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'._wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def place(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XCirculateEvent$Buffer org.lwjgl.system.linux.XCirculateEvent$Buffer.place(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).place(_int.valueOf(arg0)))

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).slice())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XCirculateEvent$Buffer(java.nio.ByteBuffer)"""
        val = _Buffer(arg0)
        self.__wrapper = val

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).slice(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0), arg1))

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(_int.valueOf(arg0), arg1))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).clear())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool._wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XCirculateEvent$Buffer.send_event()"""
        return bool._wrap(super(Buffer, self).send_event())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).flip())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int._wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XCirculateEvent$Buffer.window()"""
        return int._wrap(super(Buffer, self).window())

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(_int.valueOf(arg0), arg1))

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XCirculateEvent$Buffer.type()"""
        return int._wrap(super(Buffer, self).type())

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(_pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XCirculateEvent$Buffer.display()"""
        return int._wrap(super(Buffer, self).display())

    @overload
    def place(self) -> int:
        """public int org.lwjgl.system.linux.XCirculateEvent$Buffer.place()"""
        return int._wrap(super(Buffer, self).place())

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(arg0)) 
 
 
# CLASS: org.lwjgl.system.linux.XGenericEvent
from pyquantum_helper import import_once as _import_once
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _Object
_Object = _Object
import org.lwjgl.system.linux.XGenericEvent as _XGenericEvent
_XGenericEvent = _XGenericEvent
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
from builtins import type
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.lang.Boolean as _boolean
import java.lang.Integer as _int
import org.lwjgl.system.linux.XGenericEvent as _XGenericEvent_Buffer
_Buffer = _XGenericEvent_Buffer.Buffer
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class XGenericEvent():
    """org.lwjgl.system.linux.XGenericEvent"""
 
    @staticmethod
    def _wrap(java_value: _XGenericEvent) -> 'XGenericEvent':
        return XGenericEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _XGenericEvent):
        """
        Dynamic initializer for XGenericEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_XGenericEvent__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_XGenericEvent__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XGenericEvent$Buffer org.lwjgl.system.linux.XGenericEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XGenericEvent.malloc(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XGenericEvent$Buffer org.lwjgl.system.linux.XGenericEvent.callocStack(int)"""
        return Buffer._wrap(_XGenericEvent.callocStack(_int.valueOf(arg0)))

    @overload
    def type(self, arg0: int) -> 'XGenericEvent':
        """public org.lwjgl.system.linux.XGenericEvent org.lwjgl.system.linux.XGenericEvent.type(int)"""
        return 'XGenericEvent'._wrap(super(_XGenericEvent, self).type(_int.valueOf(arg0)))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int, arg5: int) -> 'XGenericEvent':
        """public org.lwjgl.system.linux.XGenericEvent org.lwjgl.system.linux.XGenericEvent.set(int,long,boolean,long,int,int)"""
        return 'XGenericEvent'._wrap(super(_XGenericEvent, self).set(_int.valueOf(arg0), _long.valueOf(arg1), _boolean.valueOf(arg2), _long.valueOf(arg3), _int.valueOf(arg4), _int.valueOf(arg5)))

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XGenericEvent.display()"""
        return int._wrap(super(XGenericEvent, self).display())

    @staticmethod
    @overload
    def nevtype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGenericEvent.nevtype(long,int)"""
        _XGenericEvent.nevtype(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def display(self, arg0: int) -> 'XGenericEvent':
        """public org.lwjgl.system.linux.XGenericEvent org.lwjgl.system.linux.XGenericEvent.display(long)"""
        return 'XGenericEvent'._wrap(super(_XGenericEvent, self).display(_long.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XGenericEvent$Buffer org.lwjgl.system.linux.XGenericEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XGenericEvent.calloc(_int.valueOf(arg0), arg1))

    @overload
    def serial(self, arg0: int) -> 'XGenericEvent':
        """public org.lwjgl.system.linux.XGenericEvent org.lwjgl.system.linux.XGenericEvent.serial(long)"""
        return 'XGenericEvent'._wrap(super(_XGenericEvent, self).serial(_long.valueOf(arg0)))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XGenericEvent.send_event()"""
        return bool._wrap(super(XGenericEvent, self).send_event())

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XGenericEvent$Buffer org.lwjgl.system.linux.XGenericEvent.malloc(int)"""
        return Buffer._wrap(_XGenericEvent.malloc(_int.valueOf(arg0)))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        _Struct.validate(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), arg3)

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XGenericEvent.validate(long)"""
        _XGenericEvent.validate(_long.valueOf(arg0))

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XGenericEvent.ntype(long)"""
        return int._wrap(_XGenericEvent.ntype(_long.valueOf(arg0)))

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGenericEvent.ntype(long,int)"""
        _XGenericEvent.ntype(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def evtype(self, arg0: int) -> 'XGenericEvent':
        """public org.lwjgl.system.linux.XGenericEvent org.lwjgl.system.linux.XGenericEvent.evtype(int)"""
        return 'XGenericEvent'._wrap(super(_XGenericEvent, self).evtype(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XGenericEvent':
        """public static org.lwjgl.system.linux.XGenericEvent org.lwjgl.system.linux.XGenericEvent.createSafe(long)"""
        return XGenericEvent._wrap(_XGenericEvent.createSafe(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nextension(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGenericEvent.nextension(long,int)"""
        _XGenericEvent.nextension(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XGenericEvent.nserial(long)"""
        return int._wrap(_XGenericEvent.nserial(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack() -> 'XGenericEvent':
        """public static org.lwjgl.system.linux.XGenericEvent org.lwjgl.system.linux.XGenericEvent.mallocStack()"""
        return XGenericEvent._wrap(_XGenericEvent.mallocStack())

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XGenericEvent.type()"""
        return int._wrap(super(XGenericEvent, self).type())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def extension(self, arg0: int) -> 'XGenericEvent':
        """public org.lwjgl.system.linux.XGenericEvent org.lwjgl.system.linux.XGenericEvent.extension(int)"""
        return 'XGenericEvent'._wrap(super(_XGenericEvent, self).extension(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XGenericEvent$Buffer org.lwjgl.system.linux.XGenericEvent.createSafe(long,int)"""
        return Buffer._wrap(_XGenericEvent.createSafe(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XGenericEvent.ndisplay(long)"""
        return int._wrap(_XGenericEvent.ndisplay(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XGenericEvent$Buffer org.lwjgl.system.linux.XGenericEvent.mallocStack(int)"""
        return Buffer._wrap(_XGenericEvent.mallocStack(_int.valueOf(arg0)))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).address())

    @staticmethod
    @overload
    def create() -> 'XGenericEvent':
        """public static org.lwjgl.system.linux.XGenericEvent org.lwjgl.system.linux.XGenericEvent.create()"""
        return XGenericEvent._wrap(_XGenericEvent.create())

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XGenericEvent':
        """public static org.lwjgl.system.linux.XGenericEvent org.lwjgl.system.linux.XGenericEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XGenericEvent._wrap(_XGenericEvent.malloc(arg0))

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XGenericEvent$Buffer org.lwjgl.system.linux.XGenericEvent.calloc(int)"""
        return Buffer._wrap(_XGenericEvent.calloc(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'XGenericEvent':
        """public static org.lwjgl.system.linux.XGenericEvent org.lwjgl.system.linux.XGenericEvent.create(long)"""
        return XGenericEvent._wrap(_XGenericEvent.create(_long.valueOf(arg0)))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def set(self, arg0: 'XGenericEvent') -> 'XGenericEvent':
        """public org.lwjgl.system.linux.XGenericEvent org.lwjgl.system.linux.XGenericEvent.set(org.lwjgl.system.linux.XGenericEvent)"""
        return 'XGenericEvent'._wrap(super(_XGenericEvent, self).set(arg0))

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGenericEvent.nserial(long,long)"""
        _XGenericEvent.nserial(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XGenericEvent':
        """public static org.lwjgl.system.linux.XGenericEvent org.lwjgl.system.linux.XGenericEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XGenericEvent._wrap(_XGenericEvent.mallocStack(arg0))

    @staticmethod
    @overload
    def callocStack() -> 'XGenericEvent':
        """public static org.lwjgl.system.linux.XGenericEvent org.lwjgl.system.linux.XGenericEvent.callocStack()"""
        return XGenericEvent._wrap(_XGenericEvent.callocStack())

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XGenericEvent.serial()"""
        return int._wrap(super(XGenericEvent, self).serial())

    @overload
    def evtype(self) -> int:
        """public int org.lwjgl.system.linux.XGenericEvent.evtype()"""
        return int._wrap(super(XGenericEvent, self).evtype())

    @staticmethod
    @overload
    def nevtype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XGenericEvent.nevtype(long)"""
        return int._wrap(_XGenericEvent.nevtype(_long.valueOf(arg0)))

    @overload
    def send_event(self, arg0: bool) -> 'XGenericEvent':
        """public org.lwjgl.system.linux.XGenericEvent org.lwjgl.system.linux.XGenericEvent.send_event(boolean)"""
        return 'XGenericEvent'._wrap(super(_XGenericEvent, self).send_event(_boolean.valueOf(arg0)))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XGenericEvent.sizeof()"""
        return int._wrap(super(XGenericEvent, self).sizeof())

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XGenericEvent$Buffer org.lwjgl.system.linux.XGenericEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XGenericEvent.mallocStack(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XGenericEvent':
        """public static org.lwjgl.system.linux.XGenericEvent org.lwjgl.system.linux.XGenericEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XGenericEvent._wrap(_XGenericEvent.callocStack(arg0))

    @overload
    def extension(self) -> int:
        """public int org.lwjgl.system.linux.XGenericEvent.extension()"""
        return int._wrap(super(XGenericEvent, self).extension())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XGenericEvent(java.nio.ByteBuffer)"""
        val = _XGenericEvent(arg0)
        self.__wrapper = val

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGenericEvent.ndisplay(long,long)"""
        _XGenericEvent.ndisplay(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XGenericEvent$Buffer org.lwjgl.system.linux.XGenericEvent.create(int)"""
        return Buffer._wrap(_XGenericEvent.create(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XGenericEvent$Buffer org.lwjgl.system.linux.XGenericEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XGenericEvent.callocStack(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def nextension(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XGenericEvent.nextension(long)"""
        return int._wrap(_XGenericEvent.nextension(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc() -> 'XGenericEvent':
        """public static org.lwjgl.system.linux.XGenericEvent org.lwjgl.system.linux.XGenericEvent.calloc()"""
        return XGenericEvent._wrap(_XGenericEvent.calloc())

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool._wrap(super(_pyglsystem.Struct, self).isNull(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XGenericEvent':
        """public static org.lwjgl.system.linux.XGenericEvent org.lwjgl.system.linux.XGenericEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XGenericEvent._wrap(_XGenericEvent.calloc(arg0))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XGenericEvent$Buffer org.lwjgl.system.linux.XGenericEvent.create(long,int)"""
        return Buffer._wrap(_XGenericEvent.create(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def malloc() -> 'XGenericEvent':
        """public static org.lwjgl.system.linux.XGenericEvent org.lwjgl.system.linux.XGenericEvent.malloc()"""
        return XGenericEvent._wrap(_XGenericEvent.malloc())

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str._wrap(super(pyglsystem.Pointer$Default, self).toString())

    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XGenericEvent.nsend_event(long)"""
        return int._wrap(_XGenericEvent.nsend_event(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XGenericEvent.nsend_event(long,int)"""
        _XGenericEvent.nsend_event(_long.valueOf(arg0), _int.valueOf(arg1)) 
 
 
# CLASS: org.lwjgl.system.linux.FOwnerEx$Buffer
from pyquantum_helper import import_once as _import_once
import java.lang.Object as _Object
_Object = _Object
from builtins import type
import org.lwjgl.system.CustomBuffer as _CustomBuffer
_CustomBuffer = _CustomBuffer
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import org.lwjgl.system.linux.FOwnerEx as _FOwnerEx_Buffer
_Buffer = _FOwnerEx_Buffer.Buffer
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import org.lwjgl.system.StructBuffer as _StructBuffer
_StructBuffer = _StructBuffer
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.util.Iterator as _Iterator
_Iterator = _Iterator
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
import java.util.Spliterator as _Spliterator
_Spliterator = _Spliterator
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.util.Iterator as Iterator
import java.lang.Integer as _int
import java.util.stream.Stream as _Stream
_Stream = _Stream
import java.util.stream.Stream as Stream
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class Buffer():
    """org.lwjgl.system.linux.FOwnerEx.Buffer"""
 
    @staticmethod
    def _wrap(java_value: _Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Buffer__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Buffer__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def pid(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.FOwnerEx$Buffer org.lwjgl.system.linux.FOwnerEx$Buffer.pid(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).pid(_int.valueOf(arg0)))

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).limit(_int.valueOf(arg0)))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str._wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int._wrap(super(_pyglsystem.CustomBuffer, self).address(_int.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'._wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).stream())

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).position(_int.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.FOwnerEx$Buffer(long,int)"""
        val = _Buffer(_long.valueOf(arg0), _int.valueOf(arg1))
        self.__wrapper = val

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'._wrap(super(pyglsystem.StructBuffer, self).get())

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.FOwnerEx$Buffer(java.nio.ByteBuffer)"""
        val = _Buffer(arg0)
        self.__wrapper = val

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(arg0))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.FOwnerEx$Buffer.type()"""
        return int._wrap(super(Buffer, self).type())

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'._wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).slice())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).slice(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0), arg1))

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(_int.valueOf(arg0), arg1))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).clear())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool._wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).flip())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int._wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(_int.valueOf(arg0), arg1))

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(_pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.FOwnerEx$Buffer org.lwjgl.system.linux.FOwnerEx$Buffer.type(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).type(_int.valueOf(arg0)))

    @overload
    def pid(self) -> int:
        """public int org.lwjgl.system.linux.FOwnerEx$Buffer.pid()"""
        return int._wrap(super(Buffer, self).pid())

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(arg0)) 
 
 
# CLASS: org.lwjgl.system.linux.XResizeRequestEvent$Buffer
from pyquantum_helper import import_once as _import_once
import org.lwjgl.system.linux.XResizeRequestEvent as _XResizeRequestEvent_Buffer
_Buffer = _XResizeRequestEvent_Buffer.Buffer
import java.lang.Object as _Object
_Object = _Object
from builtins import type
import org.lwjgl.system.CustomBuffer as _CustomBuffer
_CustomBuffer = _CustomBuffer
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Boolean as _boolean
import org.lwjgl.system.StructBuffer as _StructBuffer
_StructBuffer = _StructBuffer
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.util.Iterator as _Iterator
_Iterator = _Iterator
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
import java.util.Spliterator as _Spliterator
_Spliterator = _Spliterator
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.util.Iterator as Iterator
import java.lang.Integer as _int
import java.util.stream.Stream as _Stream
_Stream = _Stream
import java.util.stream.Stream as Stream
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class Buffer():
    """org.lwjgl.system.linux.XResizeRequestEvent.Buffer"""
 
    @staticmethod
    def _wrap(java_value: _Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Buffer__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Buffer__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).limit(_int.valueOf(arg0)))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str._wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int._wrap(super(_pyglsystem.CustomBuffer, self).address(_int.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).mark())

    @overload
    def width(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XResizeRequestEvent$Buffer org.lwjgl.system.linux.XResizeRequestEvent$Buffer.width(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).width(_int.valueOf(arg0)))

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'._wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).stream())

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).position(_int.valueOf(arg0)))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XResizeRequestEvent$Buffer.serial()"""
        return int._wrap(super(Buffer, self).serial())

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XResizeRequestEvent$Buffer org.lwjgl.system.linux.XResizeRequestEvent$Buffer.display(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).display(_long.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @overload
    def width(self) -> int:
        """public int org.lwjgl.system.linux.XResizeRequestEvent$Buffer.width()"""
        return int._wrap(super(Buffer, self).width())

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'._wrap(super(pyglsystem.StructBuffer, self).get())

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XResizeRequestEvent$Buffer.type()"""
        return int._wrap(super(Buffer, self).type())

    @overload
    def height(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XResizeRequestEvent$Buffer org.lwjgl.system.linux.XResizeRequestEvent$Buffer.height(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).height(_int.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XResizeRequestEvent$Buffer(java.nio.ByteBuffer)"""
        val = _Buffer(arg0)
        self.__wrapper = val

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(arg0))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def height(self) -> int:
        """public int org.lwjgl.system.linux.XResizeRequestEvent$Buffer.height()"""
        return int._wrap(super(Buffer, self).height())

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'._wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(arg0))

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XResizeRequestEvent$Buffer(long,int)"""
        val = _Buffer(_long.valueOf(arg0), _int.valueOf(arg1))
        self.__wrapper = val

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).slice())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).slice(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0), arg1))

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(_int.valueOf(arg0), arg1))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).clear())

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XResizeRequestEvent$Buffer.window()"""
        return int._wrap(super(Buffer, self).window())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool._wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XResizeRequestEvent$Buffer.send_event()"""
        return bool._wrap(super(Buffer, self).send_event())

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XResizeRequestEvent$Buffer.display()"""
        return int._wrap(super(Buffer, self).display())

    @overload
    def window(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XResizeRequestEvent$Buffer org.lwjgl.system.linux.XResizeRequestEvent$Buffer.window(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).window(_long.valueOf(arg0)))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int._wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XResizeRequestEvent$Buffer org.lwjgl.system.linux.XResizeRequestEvent$Buffer.serial(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).serial(_long.valueOf(arg0)))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(_int.valueOf(arg0), arg1))

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(_pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XResizeRequestEvent$Buffer org.lwjgl.system.linux.XResizeRequestEvent$Buffer.type(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).type(_int.valueOf(arg0)))

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XResizeRequestEvent$Buffer org.lwjgl.system.linux.XResizeRequestEvent$Buffer.send_event(boolean)"""
        return 'Buffer'._wrap(super(_Buffer, self).send_event(_boolean.valueOf(arg0)))

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(arg0)) 
 
 
# CLASS: org.lwjgl.system.linux.OpenHow$Buffer
from pyquantum_helper import import_once as _import_once
import java.lang.Object as _Object
_Object = _Object
from builtins import type
import org.lwjgl.system.CustomBuffer as _CustomBuffer
_CustomBuffer = _CustomBuffer
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import org.lwjgl.system.StructBuffer as _StructBuffer
_StructBuffer = _StructBuffer
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.util.Iterator as _Iterator
_Iterator = _Iterator
from builtins import bool
import org.lwjgl.system.linux.OpenHow as _OpenHow_Buffer
_Buffer = _OpenHow_Buffer.Buffer
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
import java.util.Spliterator as _Spliterator
_Spliterator = _Spliterator
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.util.Iterator as Iterator
import java.lang.Integer as _int
import java.util.stream.Stream as _Stream
_Stream = _Stream
import java.util.stream.Stream as Stream
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class Buffer():
    """org.lwjgl.system.linux.OpenHow.Buffer"""
 
    @staticmethod
    def _wrap(java_value: _Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Buffer__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Buffer__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.OpenHow$Buffer(java.nio.ByteBuffer)"""
        val = _Buffer(arg0)
        self.__wrapper = val

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).limit(_int.valueOf(arg0)))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address())

    @overload
    def resolve(self) -> int:
        """public long org.lwjgl.system.linux.OpenHow$Buffer.resolve()"""
        return int._wrap(super(Buffer, self).resolve())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str._wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def flags(self) -> int:
        """public long org.lwjgl.system.linux.OpenHow$Buffer.flags()"""
        return int._wrap(super(Buffer, self).flags())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int._wrap(super(_pyglsystem.CustomBuffer, self).address(_int.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).mark())

    @overload
    def flags(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.OpenHow$Buffer org.lwjgl.system.linux.OpenHow$Buffer.flags(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).flags(_long.valueOf(arg0)))

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'._wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).stream())

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).position(_int.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'._wrap(super(pyglsystem.StructBuffer, self).get())

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.OpenHow$Buffer(long,int)"""
        val = _Buffer(_long.valueOf(arg0), _int.valueOf(arg1))
        self.__wrapper = val

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def mode(self) -> int:
        """public long org.lwjgl.system.linux.OpenHow$Buffer.mode()"""
        return int._wrap(super(Buffer, self).mode())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(arg0))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'._wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(arg0))

    @overload
    def resolve(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.OpenHow$Buffer org.lwjgl.system.linux.OpenHow$Buffer.resolve(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).resolve(_long.valueOf(arg0)))

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).slice())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).slice(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0), arg1))

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(_int.valueOf(arg0), arg1))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).clear())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool._wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).flip())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int._wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(_int.valueOf(arg0), arg1))

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(_pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @overload
    def mode(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.OpenHow$Buffer org.lwjgl.system.linux.OpenHow$Buffer.mode(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).mode(_long.valueOf(arg0)))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(arg0)) 
 
 
# CLASS: org.lwjgl.system.linux.XMapRequestEvent$Buffer
from pyquantum_helper import import_once as _import_once
import java.lang.Object as _Object
_Object = _Object
from builtins import type
import org.lwjgl.system.CustomBuffer as _CustomBuffer
_CustomBuffer = _CustomBuffer
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Boolean as _boolean
import org.lwjgl.system.linux.XMapRequestEvent as _XMapRequestEvent_Buffer
_Buffer = _XMapRequestEvent_Buffer.Buffer
import org.lwjgl.system.StructBuffer as _StructBuffer
_StructBuffer = _StructBuffer
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.util.Iterator as _Iterator
_Iterator = _Iterator
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
import java.util.Spliterator as _Spliterator
_Spliterator = _Spliterator
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.util.Iterator as Iterator
import java.lang.Integer as _int
import java.util.stream.Stream as _Stream
_Stream = _Stream
import java.util.stream.Stream as Stream
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class Buffer():
    """org.lwjgl.system.linux.XMapRequestEvent.Buffer"""
 
    @staticmethod
    def _wrap(java_value: _Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Buffer__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Buffer__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).limit(_int.valueOf(arg0)))

    @overload
    def parent(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XMapRequestEvent$Buffer org.lwjgl.system.linux.XMapRequestEvent$Buffer.parent(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).parent(_long.valueOf(arg0)))

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XMapRequestEvent$Buffer org.lwjgl.system.linux.XMapRequestEvent$Buffer.type(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).type(_int.valueOf(arg0)))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0)))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XMapRequestEvent$Buffer.serial()"""
        return int._wrap(super(Buffer, self).serial())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str._wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int._wrap(super(_pyglsystem.CustomBuffer, self).address(_int.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).mark())

    @overload
    def parent(self) -> int:
        """public long org.lwjgl.system.linux.XMapRequestEvent$Buffer.parent()"""
        return int._wrap(super(Buffer, self).parent())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'._wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).stream())

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).position(_int.valueOf(arg0)))

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XMapRequestEvent$Buffer org.lwjgl.system.linux.XMapRequestEvent$Buffer.send_event(boolean)"""
        return 'Buffer'._wrap(super(_Buffer, self).send_event(_boolean.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'._wrap(super(pyglsystem.StructBuffer, self).get())

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XMapRequestEvent$Buffer.display()"""
        return int._wrap(super(Buffer, self).display())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XMapRequestEvent$Buffer(java.nio.ByteBuffer)"""
        val = _Buffer(arg0)
        self.__wrapper = val

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XMapRequestEvent$Buffer.window()"""
        return int._wrap(super(Buffer, self).window())

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XMapRequestEvent$Buffer.type()"""
        return int._wrap(super(Buffer, self).type())

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(arg0))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XMapRequestEvent$Buffer(long,int)"""
        val = _Buffer(_long.valueOf(arg0), _int.valueOf(arg1))
        self.__wrapper = val

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'._wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XMapRequestEvent$Buffer org.lwjgl.system.linux.XMapRequestEvent$Buffer.display(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).display(_long.valueOf(arg0)))

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).slice())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).slice(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0), arg1))

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(_int.valueOf(arg0), arg1))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).clear())

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XMapRequestEvent$Buffer org.lwjgl.system.linux.XMapRequestEvent$Buffer.serial(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).serial(_long.valueOf(arg0)))

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool._wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XMapRequestEvent$Buffer.send_event()"""
        return bool._wrap(super(Buffer, self).send_event())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int._wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(_int.valueOf(arg0), arg1))

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(_pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def window(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XMapRequestEvent$Buffer org.lwjgl.system.linux.XMapRequestEvent$Buffer.window(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).window(_long.valueOf(arg0)))

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(arg0)) 
 
 
# CLASS: org.lwjgl.system.linux.XExposeEvent
from pyquantum_helper import import_once as _import_once
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _Object
_Object = _Object
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
from builtins import type
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import org.lwjgl.system.linux.XExposeEvent as _XExposeEvent_Buffer
_Buffer = _XExposeEvent_Buffer.Buffer
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.lang.Boolean as _boolean
import java.lang.Integer as _int
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
import org.lwjgl.system.linux.XExposeEvent as _XExposeEvent
_XExposeEvent = _XExposeEvent
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class XExposeEvent():
    """org.lwjgl.system.linux.XExposeEvent"""
 
    @staticmethod
    def _wrap(java_value: _XExposeEvent) -> 'XExposeEvent':
        return XExposeEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _XExposeEvent):
        """
        Dynamic initializer for XExposeEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_XExposeEvent__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_XExposeEvent__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def nwindow(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XExposeEvent.nwindow(long)"""
        return int._wrap(_XExposeEvent.nwindow(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc() -> 'XExposeEvent':
        """public static org.lwjgl.system.linux.XExposeEvent org.lwjgl.system.linux.XExposeEvent.calloc()"""
        return XExposeEvent._wrap(_XExposeEvent.calloc())

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XExposeEvent':
        """public static org.lwjgl.system.linux.XExposeEvent org.lwjgl.system.linux.XExposeEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XExposeEvent._wrap(_XExposeEvent.callocStack(arg0))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def y(self) -> int:
        """public int org.lwjgl.system.linux.XExposeEvent.y()"""
        return int._wrap(super(XExposeEvent, self).y())

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XExposeEvent.type()"""
        return int._wrap(super(XExposeEvent, self).type())

    @overload
    def height(self) -> int:
        """public int org.lwjgl.system.linux.XExposeEvent.height()"""
        return int._wrap(super(XExposeEvent, self).height())

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XExposeEvent$Buffer org.lwjgl.system.linux.XExposeEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XExposeEvent.malloc(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XExposeEvent$Buffer org.lwjgl.system.linux.XExposeEvent.malloc(int)"""
        return Buffer._wrap(_XExposeEvent.malloc(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XExposeEvent.validate(long)"""
        _XExposeEvent.validate(_long.valueOf(arg0))

    @overload
    def height(self, arg0: int) -> 'XExposeEvent':
        """public org.lwjgl.system.linux.XExposeEvent org.lwjgl.system.linux.XExposeEvent.height(int)"""
        return 'XExposeEvent'._wrap(super(_XExposeEvent, self).height(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XExposeEvent':
        """public static org.lwjgl.system.linux.XExposeEvent org.lwjgl.system.linux.XExposeEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XExposeEvent._wrap(_XExposeEvent.calloc(arg0))

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XExposeEvent':
        """public static org.lwjgl.system.linux.XExposeEvent org.lwjgl.system.linux.XExposeEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XExposeEvent._wrap(_XExposeEvent.malloc(arg0))

    @overload
    def set(self, arg0: 'XExposeEvent') -> 'XExposeEvent':
        """public org.lwjgl.system.linux.XExposeEvent org.lwjgl.system.linux.XExposeEvent.set(org.lwjgl.system.linux.XExposeEvent)"""
        return 'XExposeEvent'._wrap(super(_XExposeEvent, self).set(arg0))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def nx(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XExposeEvent.nx(long)"""
        return int._wrap(_XExposeEvent.nx(_long.valueOf(arg0)))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XExposeEvent':
        """public static org.lwjgl.system.linux.XExposeEvent org.lwjgl.system.linux.XExposeEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XExposeEvent._wrap(_XExposeEvent.mallocStack(arg0))

    @overload
    def width(self) -> int:
        """public int org.lwjgl.system.linux.XExposeEvent.width()"""
        return int._wrap(super(XExposeEvent, self).width())

    @overload
    def count(self, arg0: int) -> 'XExposeEvent':
        """public org.lwjgl.system.linux.XExposeEvent org.lwjgl.system.linux.XExposeEvent.count(int)"""
        return 'XExposeEvent'._wrap(super(_XExposeEvent, self).count(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack() -> 'XExposeEvent':
        """public static org.lwjgl.system.linux.XExposeEvent org.lwjgl.system.linux.XExposeEvent.mallocStack()"""
        return XExposeEvent._wrap(_XExposeEvent.mallocStack())

    @staticmethod
    @overload
    def callocStack() -> 'XExposeEvent':
        """public static org.lwjgl.system.linux.XExposeEvent org.lwjgl.system.linux.XExposeEvent.callocStack()"""
        return XExposeEvent._wrap(_XExposeEvent.callocStack())

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XExposeEvent.nserial(long)"""
        return int._wrap(_XExposeEvent.nserial(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XExposeEvent.nsend_event(long)"""
        return int._wrap(_XExposeEvent.nsend_event(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nheight(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XExposeEvent.nheight(long,int)"""
        _XExposeEvent.nheight(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: int) -> 'XExposeEvent':
        """public org.lwjgl.system.linux.XExposeEvent org.lwjgl.system.linux.XExposeEvent.set(int,long,boolean,long,long,int,int,int,int,int)"""
        return 'XExposeEvent'._wrap(super(_XExposeEvent, self).set(_int.valueOf(arg0), _long.valueOf(arg1), _boolean.valueOf(arg2), _long.valueOf(arg3), _long.valueOf(arg4), _int.valueOf(arg5), _int.valueOf(arg6), _int.valueOf(arg7), _int.valueOf(arg8), _int.valueOf(arg9)))

    @staticmethod
    @overload
    def nheight(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XExposeEvent.nheight(long)"""
        return int._wrap(_XExposeEvent.nheight(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        _Struct.validate(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), arg3)

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XExposeEvent$Buffer org.lwjgl.system.linux.XExposeEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XExposeEvent.callocStack(_int.valueOf(arg0), arg1))

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @staticmethod
    @overload
    def nwindow(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XExposeEvent.nwindow(long,long)"""
        _XExposeEvent.nwindow(_long.valueOf(arg0), _long.valueOf(arg1))

    @overload
    def y(self, arg0: int) -> 'XExposeEvent':
        """public org.lwjgl.system.linux.XExposeEvent org.lwjgl.system.linux.XExposeEvent.y(int)"""
        return 'XExposeEvent'._wrap(super(_XExposeEvent, self).y(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XExposeEvent.ntype(long)"""
        return int._wrap(_XExposeEvent.ntype(_long.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XExposeEvent$Buffer org.lwjgl.system.linux.XExposeEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XExposeEvent.mallocStack(_int.valueOf(arg0), arg1))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).address())

    @overload
    def window(self, arg0: int) -> 'XExposeEvent':
        """public org.lwjgl.system.linux.XExposeEvent org.lwjgl.system.linux.XExposeEvent.window(long)"""
        return 'XExposeEvent'._wrap(super(_XExposeEvent, self).window(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XExposeEvent.ntype(long,int)"""
        _XExposeEvent.ntype(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def send_event(self, arg0: bool) -> 'XExposeEvent':
        """public org.lwjgl.system.linux.XExposeEvent org.lwjgl.system.linux.XExposeEvent.send_event(boolean)"""
        return 'XExposeEvent'._wrap(super(_XExposeEvent, self).send_event(_boolean.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XExposeEvent$Buffer org.lwjgl.system.linux.XExposeEvent.calloc(int)"""
        return Buffer._wrap(_XExposeEvent.calloc(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XExposeEvent$Buffer org.lwjgl.system.linux.XExposeEvent.create(int)"""
        return Buffer._wrap(_XExposeEvent.create(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def create() -> 'XExposeEvent':
        """public static org.lwjgl.system.linux.XExposeEvent org.lwjgl.system.linux.XExposeEvent.create()"""
        return XExposeEvent._wrap(_XExposeEvent.create())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @staticmethod
    @overload
    def nwidth(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XExposeEvent.nwidth(long,int)"""
        _XExposeEvent.nwidth(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XExposeEvent.send_event()"""
        return bool._wrap(super(XExposeEvent, self).send_event())

    @overload
    def width(self, arg0: int) -> 'XExposeEvent':
        """public org.lwjgl.system.linux.XExposeEvent org.lwjgl.system.linux.XExposeEvent.width(int)"""
        return 'XExposeEvent'._wrap(super(_XExposeEvent, self).width(_int.valueOf(arg0)))

    @overload
    def x(self, arg0: int) -> 'XExposeEvent':
        """public org.lwjgl.system.linux.XExposeEvent org.lwjgl.system.linux.XExposeEvent.x(int)"""
        return 'XExposeEvent'._wrap(super(_XExposeEvent, self).x(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'XExposeEvent':
        """public static org.lwjgl.system.linux.XExposeEvent org.lwjgl.system.linux.XExposeEvent.create(long)"""
        return XExposeEvent._wrap(_XExposeEvent.create(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XExposeEvent$Buffer org.lwjgl.system.linux.XExposeEvent.callocStack(int)"""
        return Buffer._wrap(_XExposeEvent.callocStack(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XExposeEvent.nsend_event(long,int)"""
        _XExposeEvent.nsend_event(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XExposeEvent.window()"""
        return int._wrap(super(XExposeEvent, self).window())

    @staticmethod
    @overload
    def malloc() -> 'XExposeEvent':
        """public static org.lwjgl.system.linux.XExposeEvent org.lwjgl.system.linux.XExposeEvent.malloc()"""
        return XExposeEvent._wrap(_XExposeEvent.malloc())

    @staticmethod
    @overload
    def ny(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XExposeEvent.ny(long)"""
        return int._wrap(_XExposeEvent.ny(_long.valueOf(arg0)))

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XExposeEvent.display()"""
        return int._wrap(super(XExposeEvent, self).display())

    @overload
    def display(self, arg0: int) -> 'XExposeEvent':
        """public org.lwjgl.system.linux.XExposeEvent org.lwjgl.system.linux.XExposeEvent.display(long)"""
        return 'XExposeEvent'._wrap(super(_XExposeEvent, self).display(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def ncount(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XExposeEvent.ncount(long,int)"""
        _XExposeEvent.ncount(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XExposeEvent':
        """public static org.lwjgl.system.linux.XExposeEvent org.lwjgl.system.linux.XExposeEvent.createSafe(long)"""
        return XExposeEvent._wrap(_XExposeEvent.createSafe(_long.valueOf(arg0)))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XExposeEvent(java.nio.ByteBuffer)"""
        val = _XExposeEvent(arg0)
        self.__wrapper = val

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XExposeEvent.serial()"""
        return int._wrap(super(XExposeEvent, self).serial())

    @overload
    def count(self) -> int:
        """public int org.lwjgl.system.linux.XExposeEvent.count()"""
        return int._wrap(super(XExposeEvent, self).count())

    @staticmethod
    @overload
    def ncount(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XExposeEvent.ncount(long)"""
        return int._wrap(_XExposeEvent.ncount(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nx(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XExposeEvent.nx(long,int)"""
        _XExposeEvent.nx(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def ny(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XExposeEvent.ny(long,int)"""
        _XExposeEvent.ny(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def type(self, arg0: int) -> 'XExposeEvent':
        """public org.lwjgl.system.linux.XExposeEvent org.lwjgl.system.linux.XExposeEvent.type(int)"""
        return 'XExposeEvent'._wrap(super(_XExposeEvent, self).type(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XExposeEvent.ndisplay(long,long)"""
        _XExposeEvent.ndisplay(_long.valueOf(arg0), _long.valueOf(arg1))

    @overload
    def x(self) -> int:
        """public int org.lwjgl.system.linux.XExposeEvent.x()"""
        return int._wrap(super(XExposeEvent, self).x())

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XExposeEvent.ndisplay(long)"""
        return int._wrap(_XExposeEvent.ndisplay(_long.valueOf(arg0)))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XExposeEvent.sizeof()"""
        return int._wrap(super(XExposeEvent, self).sizeof())

    @staticmethod
    @overload
    def nwidth(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XExposeEvent.nwidth(long)"""
        return int._wrap(_XExposeEvent.nwidth(_long.valueOf(arg0)))

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool._wrap(super(_pyglsystem.Struct, self).isNull(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XExposeEvent$Buffer org.lwjgl.system.linux.XExposeEvent.create(long,int)"""
        return Buffer._wrap(_XExposeEvent.create(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XExposeEvent$Buffer org.lwjgl.system.linux.XExposeEvent.createSafe(long,int)"""
        return Buffer._wrap(_XExposeEvent.createSafe(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XExposeEvent$Buffer org.lwjgl.system.linux.XExposeEvent.mallocStack(int)"""
        return Buffer._wrap(_XExposeEvent.mallocStack(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XExposeEvent$Buffer org.lwjgl.system.linux.XExposeEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XExposeEvent.calloc(_int.valueOf(arg0), arg1))

    @overload
    def serial(self, arg0: int) -> 'XExposeEvent':
        """public org.lwjgl.system.linux.XExposeEvent org.lwjgl.system.linux.XExposeEvent.serial(long)"""
        return 'XExposeEvent'._wrap(super(_XExposeEvent, self).serial(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XExposeEvent.nserial(long,long)"""
        _XExposeEvent.nserial(_long.valueOf(arg0), _long.valueOf(arg1))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str._wrap(super(pyglsystem.Pointer$Default, self).toString()) 
 
 
# CLASS: org.lwjgl.system.linux.XNoExposeEvent$Buffer
from pyquantum_helper import import_once as _import_once
import java.lang.Object as _Object
_Object = _Object
from builtins import type
import org.lwjgl.system.CustomBuffer as _CustomBuffer
_CustomBuffer = _CustomBuffer
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Boolean as _boolean
import org.lwjgl.system.StructBuffer as _StructBuffer
_StructBuffer = _StructBuffer
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.util.Iterator as _Iterator
_Iterator = _Iterator
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
import org.lwjgl.system.linux.XNoExposeEvent as _XNoExposeEvent_Buffer
_Buffer = _XNoExposeEvent_Buffer.Buffer
import java.util.Spliterator as _Spliterator
_Spliterator = _Spliterator
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.util.Iterator as Iterator
import java.lang.Integer as _int
import java.util.stream.Stream as _Stream
_Stream = _Stream
import java.util.stream.Stream as Stream
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class Buffer():
    """org.lwjgl.system.linux.XNoExposeEvent.Buffer"""
 
    @staticmethod
    def _wrap(java_value: _Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Buffer__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Buffer__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def major_code(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XNoExposeEvent$Buffer org.lwjgl.system.linux.XNoExposeEvent$Buffer.major_code(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).major_code(_int.valueOf(arg0)))

    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).limit(_int.valueOf(arg0)))

    @overload
    def drawable(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XNoExposeEvent$Buffer org.lwjgl.system.linux.XNoExposeEvent$Buffer.drawable(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).drawable(_long.valueOf(arg0)))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address0())

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XNoExposeEvent$Buffer org.lwjgl.system.linux.XNoExposeEvent$Buffer.serial(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).serial(_long.valueOf(arg0)))

    @overload
    def drawable(self) -> int:
        """public long org.lwjgl.system.linux.XNoExposeEvent$Buffer.drawable()"""
        return int._wrap(super(Buffer, self).drawable())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str._wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int._wrap(super(_pyglsystem.CustomBuffer, self).address(_int.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).mark())

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XNoExposeEvent$Buffer.send_event()"""
        return bool._wrap(super(Buffer, self).send_event())

    @overload
    def minor_code(self) -> int:
        """public int org.lwjgl.system.linux.XNoExposeEvent$Buffer.minor_code()"""
        return int._wrap(super(Buffer, self).minor_code())

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XNoExposeEvent$Buffer org.lwjgl.system.linux.XNoExposeEvent$Buffer.send_event(boolean)"""
        return 'Buffer'._wrap(super(_Buffer, self).send_event(_boolean.valueOf(arg0)))

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'._wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).stream())

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).position(_int.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XNoExposeEvent$Buffer.type()"""
        return int._wrap(super(Buffer, self).type())

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'._wrap(super(pyglsystem.StructBuffer, self).get())

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XNoExposeEvent$Buffer.display()"""
        return int._wrap(super(Buffer, self).display())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def major_code(self) -> int:
        """public int org.lwjgl.system.linux.XNoExposeEvent$Buffer.major_code()"""
        return int._wrap(super(Buffer, self).major_code())

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XNoExposeEvent$Buffer(long,int)"""
        val = _Buffer(_long.valueOf(arg0), _int.valueOf(arg1))
        self.__wrapper = val

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(arg0))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'._wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).slice())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).slice(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0), arg1))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XNoExposeEvent$Buffer(java.nio.ByteBuffer)"""
        val = _Buffer(arg0)
        self.__wrapper = val

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XNoExposeEvent$Buffer org.lwjgl.system.linux.XNoExposeEvent$Buffer.type(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).type(_int.valueOf(arg0)))

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(_int.valueOf(arg0), arg1))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).clear())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool._wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).flip())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int._wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(_int.valueOf(arg0), arg1))

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(_pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XNoExposeEvent$Buffer org.lwjgl.system.linux.XNoExposeEvent$Buffer.display(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).display(_long.valueOf(arg0)))

    @overload
    def minor_code(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XNoExposeEvent$Buffer org.lwjgl.system.linux.XNoExposeEvent$Buffer.minor_code(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).minor_code(_int.valueOf(arg0)))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XNoExposeEvent$Buffer.serial()"""
        return int._wrap(super(Buffer, self).serial())

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(arg0)) 
 
 
# CLASS: org.lwjgl.system.linux.EpollEvent$Buffer
from pyquantum_helper import import_once as _import_once
import java.lang.Object as _Object
_Object = _Object
from builtins import type
import org.lwjgl.system.CustomBuffer as _CustomBuffer
_CustomBuffer = _CustomBuffer
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import org.lwjgl.system.linux.EpollData as _EpollData
_EpollData = _EpollData
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import org.lwjgl.system.StructBuffer as _StructBuffer
_StructBuffer = _StructBuffer
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.util.Iterator as _Iterator
_Iterator = _Iterator
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
import java.util.Spliterator as _Spliterator
_Spliterator = _Spliterator
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.util.Iterator as Iterator
import java.lang.Integer as _int
import org.lwjgl.system.linux.EpollEvent as _EpollEvent_Buffer
_Buffer = _EpollEvent_Buffer.Buffer
import java.util.stream.Stream as _Stream
_Stream = _Stream
import java.util.stream.Stream as Stream
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class Buffer():
    """org.lwjgl.system.linux.EpollEvent.Buffer"""
 
    @staticmethod
    def _wrap(java_value: _Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Buffer__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Buffer__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).limit(_int.valueOf(arg0)))

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.EpollEvent$Buffer(long,int)"""
        val = _Buffer(_long.valueOf(arg0), _int.valueOf(arg1))
        self.__wrapper = val

    @overload
    def data(self) -> 'EpollData':
        """public org.lwjgl.system.linux.EpollData org.lwjgl.system.linux.EpollEvent$Buffer.data()"""
        return 'EpollData'._wrap(super(Buffer, self).data())

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str._wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int._wrap(super(_pyglsystem.CustomBuffer, self).address(_int.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'._wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).stream())

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).position(_int.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'._wrap(super(pyglsystem.StructBuffer, self).get())

    @overload
    def events(self) -> int:
        """public int org.lwjgl.system.linux.EpollEvent$Buffer.events()"""
        return int._wrap(super(Buffer, self).events())

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def events(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.EpollEvent$Buffer org.lwjgl.system.linux.EpollEvent$Buffer.events(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).events(_int.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def data(self, arg0: 'Consumer') -> 'Buffer':
        """public org.lwjgl.system.linux.EpollEvent$Buffer org.lwjgl.system.linux.EpollEvent$Buffer.data(java.util.function.Consumer<org.lwjgl.system.linux.EpollData>)"""
        return 'Buffer'._wrap(super(_Buffer, self).data(arg0))

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(arg0))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'._wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(arg0))

    @overload
    def data(self, arg0: 'EpollData') -> 'Buffer':
        """public org.lwjgl.system.linux.EpollEvent$Buffer org.lwjgl.system.linux.EpollEvent$Buffer.data(org.lwjgl.system.linux.EpollData)"""
        return 'Buffer'._wrap(super(_Buffer, self).data(arg0))

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).slice())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).slice(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0), arg1))

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(_int.valueOf(arg0), arg1))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).clear())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool._wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).flip())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int._wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(_int.valueOf(arg0), arg1))

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.EpollEvent$Buffer(java.nio.ByteBuffer)"""
        val = _Buffer(arg0)
        self.__wrapper = val

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(_pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(arg0)) 
 
 
# CLASS: org.lwjgl.system.linux.XDestroyWindowEvent$Buffer
from pyquantum_helper import import_once as _import_once
import java.lang.Object as _Object
_Object = _Object
from builtins import type
import org.lwjgl.system.CustomBuffer as _CustomBuffer
_CustomBuffer = _CustomBuffer
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import org.lwjgl.system.linux.XDestroyWindowEvent as _XDestroyWindowEvent_Buffer
_Buffer = _XDestroyWindowEvent_Buffer.Buffer
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Boolean as _boolean
import org.lwjgl.system.StructBuffer as _StructBuffer
_StructBuffer = _StructBuffer
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.util.Iterator as _Iterator
_Iterator = _Iterator
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
import java.util.Spliterator as _Spliterator
_Spliterator = _Spliterator
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.util.Iterator as Iterator
import java.lang.Integer as _int
import java.util.stream.Stream as _Stream
_Stream = _Stream
import java.util.stream.Stream as Stream
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class Buffer():
    """org.lwjgl.system.linux.XDestroyWindowEvent.Buffer"""
 
    @staticmethod
    def _wrap(java_value: _Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Buffer__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Buffer__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).limit(_int.valueOf(arg0)))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address0())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address())

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XDestroyWindowEvent$Buffer org.lwjgl.system.linux.XDestroyWindowEvent$Buffer.type(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).type(_int.valueOf(arg0)))

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str._wrap(super(pyglsystem.CustomBuffer, self).toString())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int._wrap(super(_pyglsystem.CustomBuffer, self).address(_int.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).mark())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'._wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).stream())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XDestroyWindowEvent$Buffer(java.nio.ByteBuffer)"""
        val = _Buffer(arg0)
        self.__wrapper = val

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).position(_int.valueOf(arg0)))

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XDestroyWindowEvent$Buffer.window()"""
        return int._wrap(super(Buffer, self).window())

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'._wrap(super(pyglsystem.StructBuffer, self).get())

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XDestroyWindowEvent$Buffer.type()"""
        return int._wrap(super(Buffer, self).type())

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XDestroyWindowEvent$Buffer.display()"""
        return int._wrap(super(Buffer, self).display())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def event(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XDestroyWindowEvent$Buffer org.lwjgl.system.linux.XDestroyWindowEvent$Buffer.event(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).event(_long.valueOf(arg0)))

    @overload
    def window(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XDestroyWindowEvent$Buffer org.lwjgl.system.linux.XDestroyWindowEvent$Buffer.window(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).window(_long.valueOf(arg0)))

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(arg0))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'._wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def event(self) -> int:
        """public long org.lwjgl.system.linux.XDestroyWindowEvent$Buffer.event()"""
        return int._wrap(super(Buffer, self).event())

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(arg0))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XDestroyWindowEvent$Buffer.send_event()"""
        return bool._wrap(super(Buffer, self).send_event())

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).slice())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).slice(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XDestroyWindowEvent$Buffer org.lwjgl.system.linux.XDestroyWindowEvent$Buffer.serial(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).serial(_long.valueOf(arg0)))

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0), arg1))

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XDestroyWindowEvent$Buffer org.lwjgl.system.linux.XDestroyWindowEvent$Buffer.display(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).display(_long.valueOf(arg0)))

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XDestroyWindowEvent$Buffer org.lwjgl.system.linux.XDestroyWindowEvent$Buffer.send_event(boolean)"""
        return 'Buffer'._wrap(super(_Buffer, self).send_event(_boolean.valueOf(arg0)))

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(_int.valueOf(arg0), arg1))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).clear())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool._wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XDestroyWindowEvent$Buffer(long,int)"""
        val = _Buffer(_long.valueOf(arg0), _int.valueOf(arg1))
        self.__wrapper = val

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int._wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(_int.valueOf(arg0), arg1))

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(_pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XDestroyWindowEvent$Buffer.serial()"""
        return int._wrap(super(Buffer, self).serial())

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(arg0)) 
 
 
# CLASS: org.lwjgl.system.linux.LinuxLibrary
import org.lwjgl.system.SharedLibrary as _SharedLibrary_Default
_Default = _SharedLibrary_Default.Default
import org.lwjgl.system.linux.LinuxLibrary as _LinuxLibrary
_LinuxLibrary = _LinuxLibrary
from builtins import str
import java.lang.CharSequence as CharSequence
from pyquantum_helper import override
import java.lang.Object as _Object
_Object = _Object
import org.lwjgl.system.FunctionProvider as _FunctionProvider
_FunctionProvider = _FunctionProvider
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
from builtins import type
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import java.lang.String as _String
_String = _String
import java.lang.String as _string
import java.lang.Integer as _int
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class LinuxLibrary():
    """org.lwjgl.system.linux.LinuxLibrary"""
 
    @staticmethod
    def _wrap(java_value: _LinuxLibrary) -> 'LinuxLibrary':
        return LinuxLibrary(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _LinuxLibrary):
        """
        Dynamic initializer for LinuxLibrary.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_LinuxLibrary__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_LinuxLibrary__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def getFunctionAddress(self, arg0: 'ByteBuffer') -> int:
        """public long org.lwjgl.system.linux.LinuxLibrary.getFunctionAddress(java.nio.ByteBuffer)"""
        return int._wrap(super(_LinuxLibrary, self).getFunctionAddress(arg0))

    @overload
    def __init__(self, arg0: str, arg1: int):
        """public org.lwjgl.system.linux.LinuxLibrary(java.lang.String,long)"""
        val = _LinuxLibrary(arg0, _long.valueOf(arg1))
        self.__wrapper = val

    @override
    @overload
    def getName(self) -> str:
        """public java.lang.String org.lwjgl.system.SharedLibrary$Default.getName()"""
        return str._wrap(super(pyglsystem.SharedLibrary$Default, self).getName())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def __init__(self, arg0: str):
        """public org.lwjgl.system.linux.LinuxLibrary(java.lang.String)"""
        val = _LinuxLibrary(arg0)
        self.__wrapper = val

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.linux.LinuxLibrary.free()"""
        super(LinuxLibrary, self).free()

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def getFunctionAddress(self, arg0: 'CharSequence') -> int:
        """public default long org.lwjgl.system.FunctionProvider.getFunctionAddress(java.lang.CharSequence)"""
        return int._wrap(super(_pyglsystem.FunctionProvider, self).getFunctionAddress(arg0))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @override
    @overload
    def getPath(self) -> str:
        """public java.lang.String org.lwjgl.system.linux.LinuxLibrary.getPath()"""
        return str._wrap(super(LinuxLibrary, self).getPath())

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str._wrap(super(pyglsystem.Pointer$Default, self).toString())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).address()) 
 
 
# CLASS: org.lwjgl.system.linux.XButtonEvent
from pyquantum_helper import import_once as _import_once
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _Object
_Object = _Object
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
from builtins import type
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.lang.Boolean as _boolean
import java.lang.Integer as _int
import org.lwjgl.system.linux.XButtonEvent as _XButtonEvent
_XButtonEvent = _XButtonEvent
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import org.lwjgl.system.linux.XButtonEvent as _XButtonEvent_Buffer
_Buffer = _XButtonEvent_Buffer.Buffer
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class XButtonEvent():
    """org.lwjgl.system.linux.XButtonEvent"""
 
    @staticmethod
    def _wrap(java_value: _XButtonEvent) -> 'XButtonEvent':
        return XButtonEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _XButtonEvent):
        """
        Dynamic initializer for XButtonEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_XButtonEvent__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_XButtonEvent__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XButtonEvent.ntype(long,int)"""
        _XButtonEvent.ntype(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def nbutton(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XButtonEvent.nbutton(long)"""
        return int._wrap(_XButtonEvent.nbutton(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack() -> 'XButtonEvent':
        """public static org.lwjgl.system.linux.XButtonEvent org.lwjgl.system.linux.XButtonEvent.mallocStack()"""
        return XButtonEvent._wrap(_XButtonEvent.mallocStack())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XButtonEvent.ndisplay(long)"""
        return int._wrap(_XButtonEvent.ndisplay(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def ntime(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XButtonEvent.ntime(long,long)"""
        _XButtonEvent.ntime(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def nbutton(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XButtonEvent.nbutton(long,int)"""
        _XButtonEvent.nbutton(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def time(self) -> int:
        """public long org.lwjgl.system.linux.XButtonEvent.time()"""
        return int._wrap(super(XButtonEvent, self).time())

    @overload
    def x(self) -> int:
        """public int org.lwjgl.system.linux.XButtonEvent.x()"""
        return int._wrap(super(XButtonEvent, self).x())

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XButtonEvent$Buffer org.lwjgl.system.linux.XButtonEvent.malloc(int)"""
        return Buffer._wrap(_XButtonEvent.malloc(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack() -> 'XButtonEvent':
        """public static org.lwjgl.system.linux.XButtonEvent org.lwjgl.system.linux.XButtonEvent.callocStack()"""
        return XButtonEvent._wrap(_XButtonEvent.callocStack())

    @staticmethod
    @overload
    def nsame_screen(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XButtonEvent.nsame_screen(long)"""
        return int._wrap(_XButtonEvent.nsame_screen(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc() -> 'XButtonEvent':
        """public static org.lwjgl.system.linux.XButtonEvent org.lwjgl.system.linux.XButtonEvent.malloc()"""
        return XButtonEvent._wrap(_XButtonEvent.malloc())

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XButtonEvent.ntype(long)"""
        return int._wrap(_XButtonEvent.ntype(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nstate(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XButtonEvent.nstate(long,int)"""
        _XButtonEvent.nstate(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XButtonEvent.window()"""
        return int._wrap(super(XButtonEvent, self).window())

    @overload
    def y_root(self) -> int:
        """public int org.lwjgl.system.linux.XButtonEvent.y_root()"""
        return int._wrap(super(XButtonEvent, self).y_root())

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        _Struct.validate(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), arg3)

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XButtonEvent':
        """public static org.lwjgl.system.linux.XButtonEvent org.lwjgl.system.linux.XButtonEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XButtonEvent._wrap(_XButtonEvent.malloc(arg0))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XButtonEvent(java.nio.ByteBuffer)"""
        val = _XButtonEvent(arg0)
        self.__wrapper = val

    @staticmethod
    @overload
    def nroot(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XButtonEvent.nroot(long)"""
        return int._wrap(_XButtonEvent.nroot(_long.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def button(self) -> int:
        """public int org.lwjgl.system.linux.XButtonEvent.button()"""
        return int._wrap(super(XButtonEvent, self).button())

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XButtonEvent':
        """public static org.lwjgl.system.linux.XButtonEvent org.lwjgl.system.linux.XButtonEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XButtonEvent._wrap(_XButtonEvent.callocStack(arg0))

    @overload
    def x(self, arg0: int) -> 'XButtonEvent':
        """public org.lwjgl.system.linux.XButtonEvent org.lwjgl.system.linux.XButtonEvent.x(int)"""
        return 'XButtonEvent'._wrap(super(_XButtonEvent, self).x(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XButtonEvent$Buffer org.lwjgl.system.linux.XButtonEvent.create(long,int)"""
        return Buffer._wrap(_XButtonEvent.create(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def calloc() -> 'XButtonEvent':
        """public static org.lwjgl.system.linux.XButtonEvent org.lwjgl.system.linux.XButtonEvent.calloc()"""
        return XButtonEvent._wrap(_XButtonEvent.calloc())

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: int, arg10: int, arg11: int, arg12: int, arg13: int, arg14: bool) -> 'XButtonEvent':
        """public org.lwjgl.system.linux.XButtonEvent org.lwjgl.system.linux.XButtonEvent.set(int,long,boolean,long,long,long,long,long,int,int,int,int,int,int,boolean)"""
        return 'XButtonEvent'._wrap(super(_XButtonEvent, self).set(_int.valueOf(arg0), _long.valueOf(arg1), _boolean.valueOf(arg2), _long.valueOf(arg3), _long.valueOf(arg4), _long.valueOf(arg5), _long.valueOf(arg6), _long.valueOf(arg7), _int.valueOf(arg8), _int.valueOf(arg9), _int.valueOf(arg10), _int.valueOf(arg11), _int.valueOf(arg12), _int.valueOf(arg13), _boolean.valueOf(arg14)))

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XButtonEvent$Buffer org.lwjgl.system.linux.XButtonEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XButtonEvent.calloc(_int.valueOf(arg0), arg1))

    @overload
    def subwindow(self, arg0: int) -> 'XButtonEvent':
        """public org.lwjgl.system.linux.XButtonEvent org.lwjgl.system.linux.XButtonEvent.subwindow(long)"""
        return 'XButtonEvent'._wrap(super(_XButtonEvent, self).subwindow(_long.valueOf(arg0)))

    @overload
    def same_screen(self) -> bool:
        """public boolean org.lwjgl.system.linux.XButtonEvent.same_screen()"""
        return bool._wrap(super(XButtonEvent, self).same_screen())

    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XButtonEvent.nsend_event(long)"""
        return int._wrap(_XButtonEvent.nsend_event(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nwindow(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XButtonEvent.nwindow(long)"""
        return int._wrap(_XButtonEvent.nwindow(_long.valueOf(arg0)))

    @overload
    def button(self, arg0: int) -> 'XButtonEvent':
        """public org.lwjgl.system.linux.XButtonEvent org.lwjgl.system.linux.XButtonEvent.button(int)"""
        return 'XButtonEvent'._wrap(super(_XButtonEvent, self).button(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def nx(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XButtonEvent.nx(long)"""
        return int._wrap(_XButtonEvent.nx(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nwindow(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XButtonEvent.nwindow(long,long)"""
        _XButtonEvent.nwindow(_long.valueOf(arg0), _long.valueOf(arg1))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XButtonEvent.serial()"""
        return int._wrap(super(XButtonEvent, self).serial())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def ny(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XButtonEvent.ny(long)"""
        return int._wrap(_XButtonEvent.ny(_long.valueOf(arg0)))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XButtonEvent.display()"""
        return int._wrap(super(XButtonEvent, self).display())

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XButtonEvent.validate(long)"""
        _XButtonEvent.validate(_long.valueOf(arg0))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XButtonEvent.type()"""
        return int._wrap(super(XButtonEvent, self).type())

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XButtonEvent':
        """public static org.lwjgl.system.linux.XButtonEvent org.lwjgl.system.linux.XButtonEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XButtonEvent._wrap(_XButtonEvent.calloc(arg0))

    @overload
    def send_event(self, arg0: bool) -> 'XButtonEvent':
        """public org.lwjgl.system.linux.XButtonEvent org.lwjgl.system.linux.XButtonEvent.send_event(boolean)"""
        return 'XButtonEvent'._wrap(super(_XButtonEvent, self).send_event(_boolean.valueOf(arg0)))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool._wrap(super(_pyglsystem.Struct, self).isNull(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XButtonEvent$Buffer org.lwjgl.system.linux.XButtonEvent.mallocStack(int)"""
        return Buffer._wrap(_XButtonEvent.mallocStack(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def ntime(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XButtonEvent.ntime(long)"""
        return int._wrap(_XButtonEvent.ntime(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XButtonEvent.nserial(long)"""
        return int._wrap(_XButtonEvent.nserial(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def ny_root(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XButtonEvent.ny_root(long,int)"""
        _XButtonEvent.ny_root(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def type(self, arg0: int) -> 'XButtonEvent':
        """public org.lwjgl.system.linux.XButtonEvent org.lwjgl.system.linux.XButtonEvent.type(int)"""
        return 'XButtonEvent'._wrap(super(_XButtonEvent, self).type(_int.valueOf(arg0)))

    @overload
    def set(self, arg0: 'XButtonEvent') -> 'XButtonEvent':
        """public org.lwjgl.system.linux.XButtonEvent org.lwjgl.system.linux.XButtonEvent.set(org.lwjgl.system.linux.XButtonEvent)"""
        return 'XButtonEvent'._wrap(super(_XButtonEvent, self).set(arg0))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XButtonEvent.send_event()"""
        return bool._wrap(super(XButtonEvent, self).send_event())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XButtonEvent$Buffer org.lwjgl.system.linux.XButtonEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XButtonEvent.mallocStack(_int.valueOf(arg0), arg1))

    @overload
    def x_root(self, arg0: int) -> 'XButtonEvent':
        """public org.lwjgl.system.linux.XButtonEvent org.lwjgl.system.linux.XButtonEvent.x_root(int)"""
        return 'XButtonEvent'._wrap(super(_XButtonEvent, self).x_root(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def nx(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XButtonEvent.nx(long,int)"""
        _XButtonEvent.nx(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def y(self, arg0: int) -> 'XButtonEvent':
        """public org.lwjgl.system.linux.XButtonEvent org.lwjgl.system.linux.XButtonEvent.y(int)"""
        return 'XButtonEvent'._wrap(super(_XButtonEvent, self).y(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def nstate(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XButtonEvent.nstate(long)"""
        return int._wrap(_XButtonEvent.nstate(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XButtonEvent.nserial(long,long)"""
        _XButtonEvent.nserial(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def nx_root(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XButtonEvent.nx_root(long,int)"""
        _XButtonEvent.nx_root(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def time(self, arg0: int) -> 'XButtonEvent':
        """public org.lwjgl.system.linux.XButtonEvent org.lwjgl.system.linux.XButtonEvent.time(long)"""
        return 'XButtonEvent'._wrap(super(_XButtonEvent, self).time(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nsubwindow(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XButtonEvent.nsubwindow(long)"""
        return int._wrap(_XButtonEvent.nsubwindow(_long.valueOf(arg0)))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @overload
    def subwindow(self) -> int:
        """public long org.lwjgl.system.linux.XButtonEvent.subwindow()"""
        return int._wrap(super(XButtonEvent, self).subwindow())

    @overload
    def window(self, arg0: int) -> 'XButtonEvent':
        """public org.lwjgl.system.linux.XButtonEvent org.lwjgl.system.linux.XButtonEvent.window(long)"""
        return 'XButtonEvent'._wrap(super(_XButtonEvent, self).window(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XButtonEvent$Buffer org.lwjgl.system.linux.XButtonEvent.create(int)"""
        return Buffer._wrap(_XButtonEvent.create(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def create() -> 'XButtonEvent':
        """public static org.lwjgl.system.linux.XButtonEvent org.lwjgl.system.linux.XButtonEvent.create()"""
        return XButtonEvent._wrap(_XButtonEvent.create())

    @staticmethod
    @overload
    def ny(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XButtonEvent.ny(long,int)"""
        _XButtonEvent.ny(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XButtonEvent$Buffer org.lwjgl.system.linux.XButtonEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XButtonEvent.callocStack(_int.valueOf(arg0), arg1))

    @overload
    def state(self) -> int:
        """public int org.lwjgl.system.linux.XButtonEvent.state()"""
        return int._wrap(super(XButtonEvent, self).state())

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XButtonEvent$Buffer org.lwjgl.system.linux.XButtonEvent.createSafe(long,int)"""
        return Buffer._wrap(_XButtonEvent.createSafe(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XButtonEvent$Buffer org.lwjgl.system.linux.XButtonEvent.calloc(int)"""
        return Buffer._wrap(_XButtonEvent.calloc(_int.valueOf(arg0)))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).address())

    @staticmethod
    @overload
    def create(arg0: int) -> 'XButtonEvent':
        """public static org.lwjgl.system.linux.XButtonEvent org.lwjgl.system.linux.XButtonEvent.create(long)"""
        return XButtonEvent._wrap(_XButtonEvent.create(_long.valueOf(arg0)))

    @overload
    def serial(self, arg0: int) -> 'XButtonEvent':
        """public org.lwjgl.system.linux.XButtonEvent org.lwjgl.system.linux.XButtonEvent.serial(long)"""
        return 'XButtonEvent'._wrap(super(_XButtonEvent, self).serial(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XButtonEvent$Buffer org.lwjgl.system.linux.XButtonEvent.callocStack(int)"""
        return Buffer._wrap(_XButtonEvent.callocStack(_int.valueOf(arg0)))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def root(self) -> int:
        """public long org.lwjgl.system.linux.XButtonEvent.root()"""
        return int._wrap(super(XButtonEvent, self).root())

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XButtonEvent':
        """public static org.lwjgl.system.linux.XButtonEvent org.lwjgl.system.linux.XButtonEvent.createSafe(long)"""
        return XButtonEvent._wrap(_XButtonEvent.createSafe(_long.valueOf(arg0)))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XButtonEvent.sizeof()"""
        return int._wrap(super(XButtonEvent, self).sizeof())

    @staticmethod
    @overload
    def nx_root(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XButtonEvent.nx_root(long)"""
        return int._wrap(_XButtonEvent.nx_root(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XButtonEvent.ndisplay(long,long)"""
        _XButtonEvent.ndisplay(_long.valueOf(arg0), _long.valueOf(arg1))

    @overload
    def display(self, arg0: int) -> 'XButtonEvent':
        """public org.lwjgl.system.linux.XButtonEvent org.lwjgl.system.linux.XButtonEvent.display(long)"""
        return 'XButtonEvent'._wrap(super(_XButtonEvent, self).display(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nroot(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XButtonEvent.nroot(long,long)"""
        _XButtonEvent.nroot(_long.valueOf(arg0), _long.valueOf(arg1))

    @overload
    def y(self) -> int:
        """public int org.lwjgl.system.linux.XButtonEvent.y()"""
        return int._wrap(super(XButtonEvent, self).y())

    @staticmethod
    @overload
    def ny_root(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XButtonEvent.ny_root(long)"""
        return int._wrap(_XButtonEvent.ny_root(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XButtonEvent':
        """public static org.lwjgl.system.linux.XButtonEvent org.lwjgl.system.linux.XButtonEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XButtonEvent._wrap(_XButtonEvent.mallocStack(arg0))

    @overload
    def state(self, arg0: int) -> 'XButtonEvent':
        """public org.lwjgl.system.linux.XButtonEvent org.lwjgl.system.linux.XButtonEvent.state(int)"""
        return 'XButtonEvent'._wrap(super(_XButtonEvent, self).state(_int.valueOf(arg0)))

    @overload
    def same_screen(self, arg0: bool) -> 'XButtonEvent':
        """public org.lwjgl.system.linux.XButtonEvent org.lwjgl.system.linux.XButtonEvent.same_screen(boolean)"""
        return 'XButtonEvent'._wrap(super(_XButtonEvent, self).same_screen(_boolean.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XButtonEvent$Buffer org.lwjgl.system.linux.XButtonEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XButtonEvent.malloc(_int.valueOf(arg0), arg1))

    @overload
    def root(self, arg0: int) -> 'XButtonEvent':
        """public org.lwjgl.system.linux.XButtonEvent org.lwjgl.system.linux.XButtonEvent.root(long)"""
        return 'XButtonEvent'._wrap(super(_XButtonEvent, self).root(_long.valueOf(arg0)))

    @overload
    def x_root(self) -> int:
        """public int org.lwjgl.system.linux.XButtonEvent.x_root()"""
        return int._wrap(super(XButtonEvent, self).x_root())

    @staticmethod
    @overload
    def nsubwindow(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XButtonEvent.nsubwindow(long,long)"""
        _XButtonEvent.nsubwindow(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def nsame_screen(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XButtonEvent.nsame_screen(long,int)"""
        _XButtonEvent.nsame_screen(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XButtonEvent.nsend_event(long,int)"""
        _XButtonEvent.nsend_event(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def y_root(self, arg0: int) -> 'XButtonEvent':
        """public org.lwjgl.system.linux.XButtonEvent org.lwjgl.system.linux.XButtonEvent.y_root(int)"""
        return 'XButtonEvent'._wrap(super(_XButtonEvent, self).y_root(_int.valueOf(arg0)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str._wrap(super(pyglsystem.Pointer$Default, self).toString()) 
 
 
# CLASS: org.lwjgl.system.linux.XSelectionEvent
from pyquantum_helper import import_once as _import_once
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _Object
_Object = _Object
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
from builtins import type
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import org.lwjgl.system.linux.XSelectionEvent as _XSelectionEvent_Buffer
_Buffer = _XSelectionEvent_Buffer.Buffer
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import org.lwjgl.system.linux.XSelectionEvent as _XSelectionEvent
_XSelectionEvent = _XSelectionEvent
import java.lang.Boolean as _boolean
import java.lang.Integer as _int
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class XSelectionEvent():
    """org.lwjgl.system.linux.XSelectionEvent"""
 
    @staticmethod
    def _wrap(java_value: _XSelectionEvent) -> 'XSelectionEvent':
        return XSelectionEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _XSelectionEvent):
        """
        Dynamic initializer for XSelectionEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_XSelectionEvent__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_XSelectionEvent__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionEvent.display()"""
        return int._wrap(super(XSelectionEvent, self).display())

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionEvent$Buffer org.lwjgl.system.linux.XSelectionEvent.mallocStack(int)"""
        return Buffer._wrap(_XSelectionEvent.mallocStack(_int.valueOf(arg0)))

    @overload
    def target(self, arg0: int) -> 'XSelectionEvent':
        """public org.lwjgl.system.linux.XSelectionEvent org.lwjgl.system.linux.XSelectionEvent.target(long)"""
        return 'XSelectionEvent'._wrap(super(_XSelectionEvent, self).target(_long.valueOf(arg0)))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def mallocStack() -> 'XSelectionEvent':
        """public static org.lwjgl.system.linux.XSelectionEvent org.lwjgl.system.linux.XSelectionEvent.mallocStack()"""
        return XSelectionEvent._wrap(_XSelectionEvent.mallocStack())

    @overload
    def requestor(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionEvent.requestor()"""
        return int._wrap(super(XSelectionEvent, self).requestor())

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XSelectionEvent.validate(long)"""
        _XSelectionEvent.validate(_long.valueOf(arg0))

    @staticmethod
    @overload
    def ntarget(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSelectionEvent.ntarget(long,long)"""
        _XSelectionEvent.ntarget(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def nrequestor(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XSelectionEvent.nrequestor(long)"""
        return int._wrap(_XSelectionEvent.nrequestor(_long.valueOf(arg0)))

    @overload
    def property(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionEvent.property()"""
        return int._wrap(super(XSelectionEvent, self).property())

    @staticmethod
    @overload
    def malloc() -> 'XSelectionEvent':
        """public static org.lwjgl.system.linux.XSelectionEvent org.lwjgl.system.linux.XSelectionEvent.malloc()"""
        return XSelectionEvent._wrap(_XSelectionEvent.malloc())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def target(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionEvent.target()"""
        return int._wrap(super(XSelectionEvent, self).target())

    @overload
    def time(self, arg0: int) -> 'XSelectionEvent':
        """public org.lwjgl.system.linux.XSelectionEvent org.lwjgl.system.linux.XSelectionEvent.time(long)"""
        return 'XSelectionEvent'._wrap(super(_XSelectionEvent, self).time(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionEvent$Buffer org.lwjgl.system.linux.XSelectionEvent.malloc(int)"""
        return Buffer._wrap(_XSelectionEvent.malloc(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSelectionEvent.ntype(long,int)"""
        _XSelectionEvent.ntype(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XSelectionEvent':
        """public static org.lwjgl.system.linux.XSelectionEvent org.lwjgl.system.linux.XSelectionEvent.createSafe(long)"""
        return XSelectionEvent._wrap(_XSelectionEvent.createSafe(_long.valueOf(arg0)))

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int) -> 'XSelectionEvent':
        """public org.lwjgl.system.linux.XSelectionEvent org.lwjgl.system.linux.XSelectionEvent.set(int,long,boolean,long,long,long,long,long,long)"""
        return 'XSelectionEvent'._wrap(super(_XSelectionEvent, self).set(_int.valueOf(arg0), _long.valueOf(arg1), _boolean.valueOf(arg2), _long.valueOf(arg3), _long.valueOf(arg4), _long.valueOf(arg5), _long.valueOf(arg6), _long.valueOf(arg7), _long.valueOf(arg8)))

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XSelectionEvent':
        """public static org.lwjgl.system.linux.XSelectionEvent org.lwjgl.system.linux.XSelectionEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XSelectionEvent._wrap(_XSelectionEvent.callocStack(arg0))

    @staticmethod
    @overload
    def ntarget(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XSelectionEvent.ntarget(long)"""
        return int._wrap(_XSelectionEvent.ntarget(_long.valueOf(arg0)))

    @overload
    def time(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionEvent.time()"""
        return int._wrap(super(XSelectionEvent, self).time())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @staticmethod
    @overload
    def nproperty(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSelectionEvent.nproperty(long,long)"""
        _XSelectionEvent.nproperty(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        _Struct.validate(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), arg3)

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @staticmethod
    @overload
    def nselection(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XSelectionEvent.nselection(long)"""
        return int._wrap(_XSelectionEvent.nselection(_long.valueOf(arg0)))

    @overload
    def requestor(self, arg0: int) -> 'XSelectionEvent':
        """public org.lwjgl.system.linux.XSelectionEvent org.lwjgl.system.linux.XSelectionEvent.requestor(long)"""
        return 'XSelectionEvent'._wrap(super(_XSelectionEvent, self).requestor(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def create() -> 'XSelectionEvent':
        """public static org.lwjgl.system.linux.XSelectionEvent org.lwjgl.system.linux.XSelectionEvent.create()"""
        return XSelectionEvent._wrap(_XSelectionEvent.create())

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XSelectionEvent.ndisplay(long)"""
        return int._wrap(_XSelectionEvent.ndisplay(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XSelectionEvent.nserial(long)"""
        return int._wrap(_XSelectionEvent.nserial(_long.valueOf(arg0)))

    @overload
    def type(self, arg0: int) -> 'XSelectionEvent':
        """public org.lwjgl.system.linux.XSelectionEvent org.lwjgl.system.linux.XSelectionEvent.type(int)"""
        return 'XSelectionEvent'._wrap(super(_XSelectionEvent, self).type(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def nrequestor(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSelectionEvent.nrequestor(long,long)"""
        _XSelectionEvent.nrequestor(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XSelectionEvent':
        """public static org.lwjgl.system.linux.XSelectionEvent org.lwjgl.system.linux.XSelectionEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XSelectionEvent._wrap(_XSelectionEvent.malloc(arg0))

    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XSelectionEvent.nsend_event(long)"""
        return int._wrap(_XSelectionEvent.nsend_event(_long.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionEvent$Buffer org.lwjgl.system.linux.XSelectionEvent.calloc(int)"""
        return Buffer._wrap(_XSelectionEvent.calloc(_int.valueOf(arg0)))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XSelectionEvent.sizeof()"""
        return int._wrap(super(XSelectionEvent, self).sizeof())

    @overload
    def selection(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionEvent.selection()"""
        return int._wrap(super(XSelectionEvent, self).selection())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).address())

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionEvent$Buffer org.lwjgl.system.linux.XSelectionEvent.create(int)"""
        return Buffer._wrap(_XSelectionEvent.create(_int.valueOf(arg0)))

    @overload
    def display(self, arg0: int) -> 'XSelectionEvent':
        """public org.lwjgl.system.linux.XSelectionEvent org.lwjgl.system.linux.XSelectionEvent.display(long)"""
        return 'XSelectionEvent'._wrap(super(_XSelectionEvent, self).display(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionEvent$Buffer org.lwjgl.system.linux.XSelectionEvent.createSafe(long,int)"""
        return Buffer._wrap(_XSelectionEvent.createSafe(_long.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XSelectionEvent.type()"""
        return int._wrap(super(XSelectionEvent, self).type())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XSelectionEvent':
        """public static org.lwjgl.system.linux.XSelectionEvent org.lwjgl.system.linux.XSelectionEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XSelectionEvent._wrap(_XSelectionEvent.mallocStack(arg0))

    @staticmethod
    @overload
    def ntime(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSelectionEvent.ntime(long,long)"""
        _XSelectionEvent.ntime(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XSelectionEvent.ntype(long)"""
        return int._wrap(_XSelectionEvent.ntype(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionEvent$Buffer org.lwjgl.system.linux.XSelectionEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XSelectionEvent.malloc(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionEvent$Buffer org.lwjgl.system.linux.XSelectionEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XSelectionEvent.mallocStack(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def callocStack() -> 'XSelectionEvent':
        """public static org.lwjgl.system.linux.XSelectionEvent org.lwjgl.system.linux.XSelectionEvent.callocStack()"""
        return XSelectionEvent._wrap(_XSelectionEvent.callocStack())

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XSelectionEvent.send_event()"""
        return bool._wrap(super(XSelectionEvent, self).send_event())

    @overload
    def selection(self, arg0: int) -> 'XSelectionEvent':
        """public org.lwjgl.system.linux.XSelectionEvent org.lwjgl.system.linux.XSelectionEvent.selection(long)"""
        return 'XSelectionEvent'._wrap(super(_XSelectionEvent, self).selection(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nselection(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSelectionEvent.nselection(long,long)"""
        _XSelectionEvent.nselection(_long.valueOf(arg0), _long.valueOf(arg1))

    @overload
    def send_event(self, arg0: bool) -> 'XSelectionEvent':
        """public org.lwjgl.system.linux.XSelectionEvent org.lwjgl.system.linux.XSelectionEvent.send_event(boolean)"""
        return 'XSelectionEvent'._wrap(super(_XSelectionEvent, self).send_event(_boolean.valueOf(arg0)))

    @staticmethod
    @overload
    def ntime(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XSelectionEvent.ntime(long)"""
        return int._wrap(_XSelectionEvent.ntime(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nproperty(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XSelectionEvent.nproperty(long)"""
        return int._wrap(_XSelectionEvent.nproperty(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSelectionEvent.ndisplay(long,long)"""
        _XSelectionEvent.ndisplay(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSelectionEvent.nserial(long,long)"""
        _XSelectionEvent.nserial(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionEvent$Buffer org.lwjgl.system.linux.XSelectionEvent.create(long,int)"""
        return Buffer._wrap(_XSelectionEvent.create(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'XSelectionEvent':
        """public static org.lwjgl.system.linux.XSelectionEvent org.lwjgl.system.linux.XSelectionEvent.create(long)"""
        return XSelectionEvent._wrap(_XSelectionEvent.create(_long.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionEvent$Buffer org.lwjgl.system.linux.XSelectionEvent.callocStack(int)"""
        return Buffer._wrap(_XSelectionEvent.callocStack(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionEvent$Buffer org.lwjgl.system.linux.XSelectionEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XSelectionEvent.callocStack(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XSelectionEvent.nsend_event(long,int)"""
        _XSelectionEvent.nsend_event(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XSelectionEvent.serial()"""
        return int._wrap(super(XSelectionEvent, self).serial())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XSelectionEvent(java.nio.ByteBuffer)"""
        val = _XSelectionEvent(arg0)
        self.__wrapper = val

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def set(self, arg0: 'XSelectionEvent') -> 'XSelectionEvent':
        """public org.lwjgl.system.linux.XSelectionEvent org.lwjgl.system.linux.XSelectionEvent.set(org.lwjgl.system.linux.XSelectionEvent)"""
        return 'XSelectionEvent'._wrap(super(_XSelectionEvent, self).set(arg0))

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool._wrap(super(_pyglsystem.Struct, self).isNull(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc() -> 'XSelectionEvent':
        """public static org.lwjgl.system.linux.XSelectionEvent org.lwjgl.system.linux.XSelectionEvent.calloc()"""
        return XSelectionEvent._wrap(_XSelectionEvent.calloc())

    @overload
    def property(self, arg0: int) -> 'XSelectionEvent':
        """public org.lwjgl.system.linux.XSelectionEvent org.lwjgl.system.linux.XSelectionEvent.property(long)"""
        return 'XSelectionEvent'._wrap(super(_XSelectionEvent, self).property(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XSelectionEvent':
        """public static org.lwjgl.system.linux.XSelectionEvent org.lwjgl.system.linux.XSelectionEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XSelectionEvent._wrap(_XSelectionEvent.calloc(arg0))

    @overload
    def serial(self, arg0: int) -> 'XSelectionEvent':
        """public org.lwjgl.system.linux.XSelectionEvent org.lwjgl.system.linux.XSelectionEvent.serial(long)"""
        return 'XSelectionEvent'._wrap(super(_XSelectionEvent, self).serial(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XSelectionEvent$Buffer org.lwjgl.system.linux.XSelectionEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XSelectionEvent.calloc(_int.valueOf(arg0), arg1))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str._wrap(super(pyglsystem.Pointer$Default, self).toString()) 
 
 
# CLASS: org.lwjgl.system.linux.FOwnerEx
from pyquantum_helper import import_once as _import_once
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _Object
_Object = _Object
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
from builtins import type
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import org.lwjgl.system.linux.FOwnerEx as _FOwnerEx_Buffer
_Buffer = _FOwnerEx_Buffer.Buffer
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.lang.Integer as _int
import org.lwjgl.system.linux.FOwnerEx as _FOwnerEx
_FOwnerEx = _FOwnerEx
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class FOwnerEx():
    """org.lwjgl.system.linux.FOwnerEx"""
 
    @staticmethod
    def _wrap(java_value: _FOwnerEx) -> 'FOwnerEx':
        return FOwnerEx(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _FOwnerEx):
        """
        Dynamic initializer for FOwnerEx.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_FOwnerEx__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_FOwnerEx__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def set(self, arg0: 'FOwnerEx') -> 'FOwnerEx':
        """public org.lwjgl.system.linux.FOwnerEx org.lwjgl.system.linux.FOwnerEx.set(org.lwjgl.system.linux.FOwnerEx)"""
        return 'FOwnerEx'._wrap(super(_FOwnerEx, self).set(arg0))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'FOwnerEx':
        """public static org.lwjgl.system.linux.FOwnerEx org.lwjgl.system.linux.FOwnerEx.calloc(org.lwjgl.system.MemoryStack)"""
        return FOwnerEx._wrap(_FOwnerEx.calloc(arg0))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.FOwnerEx$Buffer org.lwjgl.system.linux.FOwnerEx.createSafe(long,int)"""
        return Buffer._wrap(_FOwnerEx.createSafe(_long.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.FOwnerEx$Buffer org.lwjgl.system.linux.FOwnerEx.malloc(int)"""
        return Buffer._wrap(_FOwnerEx.malloc(_int.valueOf(arg0)))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.FOwnerEx.type()"""
        return int._wrap(super(FOwnerEx, self).type())

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.FOwnerEx$Buffer org.lwjgl.system.linux.FOwnerEx.create(long,int)"""
        return Buffer._wrap(_FOwnerEx.create(_long.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'FOwnerEx':
        """public static org.lwjgl.system.linux.FOwnerEx org.lwjgl.system.linux.FOwnerEx.malloc(org.lwjgl.system.MemoryStack)"""
        return FOwnerEx._wrap(_FOwnerEx.malloc(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def pid(self) -> int:
        """public int org.lwjgl.system.linux.FOwnerEx.pid()"""
        return int._wrap(super(FOwnerEx, self).pid())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.FOwnerEx.ntype(long)"""
        return int._wrap(_FOwnerEx.ntype(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'FOwnerEx':
        """public static org.lwjgl.system.linux.FOwnerEx org.lwjgl.system.linux.FOwnerEx.create(long)"""
        return FOwnerEx._wrap(_FOwnerEx.create(_long.valueOf(arg0)))

    @overload
    def pid(self, arg0: int) -> 'FOwnerEx':
        """public org.lwjgl.system.linux.FOwnerEx org.lwjgl.system.linux.FOwnerEx.pid(int)"""
        return 'FOwnerEx'._wrap(super(_FOwnerEx, self).pid(_int.valueOf(arg0)))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.FOwnerEx(java.nio.ByteBuffer)"""
        val = _FOwnerEx(arg0)
        self.__wrapper = val

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.FOwnerEx.ntype(long,int)"""
        _FOwnerEx.ntype(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def create() -> 'FOwnerEx':
        """public static org.lwjgl.system.linux.FOwnerEx org.lwjgl.system.linux.FOwnerEx.create()"""
        return FOwnerEx._wrap(_FOwnerEx.create())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @overload
    def set(self, arg0: int, arg1: int) -> 'FOwnerEx':
        """public org.lwjgl.system.linux.FOwnerEx org.lwjgl.system.linux.FOwnerEx.set(int,int)"""
        return 'FOwnerEx'._wrap(super(_FOwnerEx, self).set(_int.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.FOwnerEx.sizeof()"""
        return int._wrap(super(FOwnerEx, self).sizeof())

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        _Struct.validate(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), arg3)

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.FOwnerEx$Buffer org.lwjgl.system.linux.FOwnerEx.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_FOwnerEx.malloc(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def calloc() -> 'FOwnerEx':
        """public static org.lwjgl.system.linux.FOwnerEx org.lwjgl.system.linux.FOwnerEx.calloc()"""
        return FOwnerEx._wrap(_FOwnerEx.calloc())

    @overload
    def type(self, arg0: int) -> 'FOwnerEx':
        """public org.lwjgl.system.linux.FOwnerEx org.lwjgl.system.linux.FOwnerEx.type(int)"""
        return 'FOwnerEx'._wrap(super(_FOwnerEx, self).type(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.FOwnerEx$Buffer org.lwjgl.system.linux.FOwnerEx.create(int)"""
        return Buffer._wrap(_FOwnerEx.create(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def npid(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.FOwnerEx.npid(long,int)"""
        _FOwnerEx.npid(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'FOwnerEx':
        """public static org.lwjgl.system.linux.FOwnerEx org.lwjgl.system.linux.FOwnerEx.createSafe(long)"""
        return FOwnerEx._wrap(_FOwnerEx.createSafe(_long.valueOf(arg0)))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @staticmethod
    @overload
    def malloc() -> 'FOwnerEx':
        """public static org.lwjgl.system.linux.FOwnerEx org.lwjgl.system.linux.FOwnerEx.malloc()"""
        return FOwnerEx._wrap(_FOwnerEx.malloc())

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.FOwnerEx$Buffer org.lwjgl.system.linux.FOwnerEx.calloc(int)"""
        return Buffer._wrap(_FOwnerEx.calloc(_int.valueOf(arg0)))

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool._wrap(super(_pyglsystem.Struct, self).isNull(_int.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.FOwnerEx$Buffer org.lwjgl.system.linux.FOwnerEx.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_FOwnerEx.calloc(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def npid(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.FOwnerEx.npid(long)"""
        return int._wrap(_FOwnerEx.npid(_long.valueOf(arg0)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str._wrap(super(pyglsystem.Pointer$Default, self).toString())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).address()) 
 
 
# CLASS: org.lwjgl.system.linux.IOVec
from pyquantum_helper import import_once as _import_once
from builtins import str
import org.lwjgl.system.linux.IOVec as _IOVec_Buffer
_Buffer = _IOVec_Buffer.Buffer
from pyquantum_helper import override
import java.lang.Object as _Object
_Object = _Object
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
from builtins import type
import java.nio.ByteBuffer as _ByteBuffer
_ByteBuffer = _ByteBuffer
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import org.lwjgl.system.linux.IOVec as _IOVec
_IOVec = _IOVec
import java.lang.Integer as _int
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class IOVec():
    """org.lwjgl.system.linux.IOVec"""
 
    @staticmethod
    def _wrap(java_value: _IOVec) -> 'IOVec':
        return IOVec(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _IOVec):
        """
        Dynamic initializer for IOVec.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_IOVec__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_IOVec__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @overload
    def set(self, arg0: 'ByteBuffer', arg1: int) -> 'IOVec':
        """public org.lwjgl.system.linux.IOVec org.lwjgl.system.linux.IOVec.set(java.nio.ByteBuffer,long)"""
        return 'IOVec'._wrap(super(_IOVec, self).set(arg0, _long.valueOf(arg1)))

    @overload
    def iov_base(self) -> 'ByteBuffer':
        """public java.nio.ByteBuffer org.lwjgl.system.linux.IOVec.iov_base()"""
        return 'ByteBuffer'._wrap(super(IOVec, self).iov_base())

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'IOVec':
        """public static org.lwjgl.system.linux.IOVec org.lwjgl.system.linux.IOVec.malloc(org.lwjgl.system.MemoryStack)"""
        return IOVec._wrap(_IOVec.malloc(arg0))

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.IOVec$Buffer org.lwjgl.system.linux.IOVec.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_IOVec.calloc(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def niov_base(arg0: int) -> 'ByteBuffer':
        """public static java.nio.ByteBuffer org.lwjgl.system.linux.IOVec.niov_base(long)"""
        return ByteBuffer._wrap(_IOVec.niov_base(_long.valueOf(arg0)))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def iov_base(self, arg0: 'ByteBuffer') -> 'IOVec':
        """public org.lwjgl.system.linux.IOVec org.lwjgl.system.linux.IOVec.iov_base(java.nio.ByteBuffer)"""
        return 'IOVec'._wrap(super(_IOVec, self).iov_base(arg0))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.IOVec(java.nio.ByteBuffer)"""
        val = _IOVec(arg0)
        self.__wrapper = val

    @staticmethod
    @overload
    def niov_len(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.IOVec.niov_len(long,long)"""
        _IOVec.niov_len(_long.valueOf(arg0), _long.valueOf(arg1))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'IOVec':
        """public static org.lwjgl.system.linux.IOVec org.lwjgl.system.linux.IOVec.calloc(org.lwjgl.system.MemoryStack)"""
        return IOVec._wrap(_IOVec.calloc(arg0))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @staticmethod
    @overload
    def niov_len(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.IOVec.niov_len(long)"""
        return int._wrap(_IOVec.niov_len(_long.valueOf(arg0)))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.IOVec.sizeof()"""
        return int._wrap(super(IOVec, self).sizeof())

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'IOVec':
        """public static org.lwjgl.system.linux.IOVec org.lwjgl.system.linux.IOVec.createSafe(long)"""
        return IOVec._wrap(_IOVec.createSafe(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc() -> 'IOVec':
        """public static org.lwjgl.system.linux.IOVec org.lwjgl.system.linux.IOVec.calloc()"""
        return IOVec._wrap(_IOVec.calloc())

    @staticmethod
    @overload
    def create() -> 'IOVec':
        """public static org.lwjgl.system.linux.IOVec org.lwjgl.system.linux.IOVec.create()"""
        return IOVec._wrap(_IOVec.create())

    @staticmethod
    @overload
    def malloc() -> 'IOVec':
        """public static org.lwjgl.system.linux.IOVec org.lwjgl.system.linux.IOVec.malloc()"""
        return IOVec._wrap(_IOVec.malloc())

    @staticmethod
    @overload
    def niov_base(arg0: int, arg1: 'ByteBuffer'):
        """public static void org.lwjgl.system.linux.IOVec.niov_base(long,java.nio.ByteBuffer)"""
        _IOVec.niov_base(_long.valueOf(arg0), arg1)

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.IOVec$Buffer org.lwjgl.system.linux.IOVec.malloc(int)"""
        return Buffer._wrap(_IOVec.malloc(_int.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        _Struct.validate(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), arg3)

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @overload
    def iov_len(self, arg0: int) -> 'IOVec':
        """public org.lwjgl.system.linux.IOVec org.lwjgl.system.linux.IOVec.iov_len(long)"""
        return 'IOVec'._wrap(super(_IOVec, self).iov_len(_long.valueOf(arg0)))

    @overload
    def set(self, arg0: 'IOVec') -> 'IOVec':
        """public org.lwjgl.system.linux.IOVec org.lwjgl.system.linux.IOVec.set(org.lwjgl.system.linux.IOVec)"""
        return 'IOVec'._wrap(super(_IOVec, self).set(arg0))

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.IOVec$Buffer org.lwjgl.system.linux.IOVec.calloc(int)"""
        return Buffer._wrap(_IOVec.calloc(_int.valueOf(arg0)))

    @overload
    def iov_len(self) -> int:
        """public long org.lwjgl.system.linux.IOVec.iov_len()"""
        return int._wrap(super(IOVec, self).iov_len())

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.IOVec$Buffer org.lwjgl.system.linux.IOVec.create(long,int)"""
        return Buffer._wrap(_IOVec.create(_long.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool._wrap(super(_pyglsystem.Struct, self).isNull(_int.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def create(arg0: int) -> 'IOVec':
        """public static org.lwjgl.system.linux.IOVec org.lwjgl.system.linux.IOVec.create(long)"""
        return IOVec._wrap(_IOVec.create(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.IOVec$Buffer org.lwjgl.system.linux.IOVec.createSafe(long,int)"""
        return Buffer._wrap(_IOVec.createSafe(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.IOVec$Buffer org.lwjgl.system.linux.IOVec.create(int)"""
        return Buffer._wrap(_IOVec.create(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.IOVec$Buffer org.lwjgl.system.linux.IOVec.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_IOVec.malloc(_int.valueOf(arg0), arg1))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str._wrap(super(pyglsystem.Pointer$Default, self).toString())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).address()) 
 
 
# CLASS: org.lwjgl.system.linux.MMAN
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _Object
_Object = _Object
import java.lang.Object as _object
from builtins import type
import java.lang.String as _String
_String = _String
import org.lwjgl.system.linux.MMAN as _MMAN
_MMAN = _MMAN
import java.lang.Integer as _int
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class MMAN():
    """org.lwjgl.system.linux.MMAN"""
 
    @staticmethod
    def _wrap(java_value: _MMAN) -> 'MMAN':
        return MMAN(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _MMAN):
        """
        Dynamic initializer for MMAN.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_MMAN__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_MMAN__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def nmunmap(arg0: int, arg1: int) -> int:
        """public static native int org.lwjgl.system.linux.MMAN.nmunmap(long,long)"""
        return int._wrap(_MMAN.nmunmap(_long.valueOf(arg0), _long.valueOf(arg1)))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @staticmethod
    @overload
    def munmap(arg0: 'ByteBuffer') -> int:
        """public static int org.lwjgl.system.linux.MMAN.munmap(java.nio.ByteBuffer)"""
        return int._wrap(_MMAN.munmap(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def mmap(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int) -> int:
        """public static native long org.lwjgl.system.linux.MMAN.mmap(long,long,int,int,int,long)"""
        return int._wrap(_MMAN.mmap(_long.valueOf(arg0), _long.valueOf(arg1), _int.valueOf(arg2), _int.valueOf(arg3), _int.valueOf(arg4), _long.valueOf(arg5)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String java.lang.Object.toString()"""
        return str._wrap(super(object, self).toString())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean java.lang.Object.equals(java.lang.Object)"""
        return bool._wrap(super(_object, self).equals(arg0))

    @override
    @overload
    def hashCode(self) -> int:
        """public native int java.lang.Object.hashCode()"""
        return int._wrap(super(object, self).hashCode()) 
 
 
# CLASS: org.lwjgl.system.linux.XConfigureRequestEvent
from pyquantum_helper import import_once as _import_once
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _Object
_Object = _Object
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
from builtins import type
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.lang.Boolean as _boolean
import java.lang.Integer as _int
import org.lwjgl.system.linux.XConfigureRequestEvent as _XConfigureRequestEvent_Buffer
_Buffer = _XConfigureRequestEvent_Buffer.Buffer
import org.lwjgl.system.linux.XConfigureRequestEvent as _XConfigureRequestEvent
_XConfigureRequestEvent = _XConfigureRequestEvent
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class XConfigureRequestEvent():
    """org.lwjgl.system.linux.XConfigureRequestEvent"""
 
    @staticmethod
    def _wrap(java_value: _XConfigureRequestEvent) -> 'XConfigureRequestEvent':
        return XConfigureRequestEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _XConfigureRequestEvent):
        """
        Dynamic initializer for XConfigureRequestEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_XConfigureRequestEvent__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_XConfigureRequestEvent__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XConfigureRequestEvent$Buffer org.lwjgl.system.linux.XConfigureRequestEvent.calloc(int)"""
        return Buffer._wrap(_XConfigureRequestEvent.calloc(_int.valueOf(arg0)))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XConfigureRequestEvent.serial()"""
        return int._wrap(super(XConfigureRequestEvent, self).serial())

    @overload
    def y(self) -> int:
        """public int org.lwjgl.system.linux.XConfigureRequestEvent.y()"""
        return int._wrap(super(XConfigureRequestEvent, self).y())

    @overload
    def set(self, arg0: 'XConfigureRequestEvent') -> 'XConfigureRequestEvent':
        """public org.lwjgl.system.linux.XConfigureRequestEvent org.lwjgl.system.linux.XConfigureRequestEvent.set(org.lwjgl.system.linux.XConfigureRequestEvent)"""
        return 'XConfigureRequestEvent'._wrap(super(_XConfigureRequestEvent, self).set(arg0))

    @staticmethod
    @overload
    def nabove(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XConfigureRequestEvent.nabove(long)"""
        return int._wrap(_XConfigureRequestEvent.nabove(_long.valueOf(arg0)))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @staticmethod
    @overload
    def nwindow(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XConfigureRequestEvent.nwindow(long)"""
        return int._wrap(_XConfigureRequestEvent.nwindow(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nwidth(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XConfigureRequestEvent.nwidth(long)"""
        return int._wrap(_XConfigureRequestEvent.nwidth(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XConfigureRequestEvent$Buffer org.lwjgl.system.linux.XConfigureRequestEvent.createSafe(long,int)"""
        return Buffer._wrap(_XConfigureRequestEvent.createSafe(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def nheight(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XConfigureRequestEvent.nheight(long)"""
        return int._wrap(_XConfigureRequestEvent.nheight(_long.valueOf(arg0)))

    @overload
    def detail(self, arg0: int) -> 'XConfigureRequestEvent':
        """public org.lwjgl.system.linux.XConfigureRequestEvent org.lwjgl.system.linux.XConfigureRequestEvent.detail(int)"""
        return 'XConfigureRequestEvent'._wrap(super(_XConfigureRequestEvent, self).detail(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XConfigureRequestEvent$Buffer org.lwjgl.system.linux.XConfigureRequestEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XConfigureRequestEvent.mallocStack(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XConfigureRequestEvent.ntype(long,int)"""
        _XConfigureRequestEvent.ntype(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        _Struct.validate(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), arg3)

    @staticmethod
    @overload
    def nx(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XConfigureRequestEvent.nx(long,int)"""
        _XConfigureRequestEvent.nx(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XConfigureRequestEvent.window()"""
        return int._wrap(super(XConfigureRequestEvent, self).window())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XConfigureRequestEvent(java.nio.ByteBuffer)"""
        val = _XConfigureRequestEvent(arg0)
        self.__wrapper = val

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XConfigureRequestEvent.validate(long)"""
        _XConfigureRequestEvent.validate(_long.valueOf(arg0))

    @overload
    def value_mask(self) -> int:
        """public long org.lwjgl.system.linux.XConfigureRequestEvent.value_mask()"""
        return int._wrap(super(XConfigureRequestEvent, self).value_mask())

    @overload
    def above(self) -> int:
        """public long org.lwjgl.system.linux.XConfigureRequestEvent.above()"""
        return int._wrap(super(XConfigureRequestEvent, self).above())

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XConfigureRequestEvent':
        """public static org.lwjgl.system.linux.XConfigureRequestEvent org.lwjgl.system.linux.XConfigureRequestEvent.createSafe(long)"""
        return XConfigureRequestEvent._wrap(_XConfigureRequestEvent.createSafe(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack() -> 'XConfigureRequestEvent':
        """public static org.lwjgl.system.linux.XConfigureRequestEvent org.lwjgl.system.linux.XConfigureRequestEvent.mallocStack()"""
        return XConfigureRequestEvent._wrap(_XConfigureRequestEvent.mallocStack())

    @staticmethod
    @overload
    def nparent(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XConfigureRequestEvent.nparent(long,long)"""
        _XConfigureRequestEvent.nparent(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XConfigureRequestEvent.ntype(long)"""
        return int._wrap(_XConfigureRequestEvent.ntype(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nabove(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XConfigureRequestEvent.nabove(long,long)"""
        _XConfigureRequestEvent.nabove(_long.valueOf(arg0), _long.valueOf(arg1))

    @overload
    def height(self) -> int:
        """public int org.lwjgl.system.linux.XConfigureRequestEvent.height()"""
        return int._wrap(super(XConfigureRequestEvent, self).height())

    @overload
    def window(self, arg0: int) -> 'XConfigureRequestEvent':
        """public org.lwjgl.system.linux.XConfigureRequestEvent org.lwjgl.system.linux.XConfigureRequestEvent.window(long)"""
        return 'XConfigureRequestEvent'._wrap(super(_XConfigureRequestEvent, self).window(_long.valueOf(arg0)))

    @overload
    def x(self) -> int:
        """public int org.lwjgl.system.linux.XConfigureRequestEvent.x()"""
        return int._wrap(super(XConfigureRequestEvent, self).x())

    @overload
    def parent(self, arg0: int) -> 'XConfigureRequestEvent':
        """public org.lwjgl.system.linux.XConfigureRequestEvent org.lwjgl.system.linux.XConfigureRequestEvent.parent(long)"""
        return 'XConfigureRequestEvent'._wrap(super(_XConfigureRequestEvent, self).parent(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XConfigureRequestEvent':
        """public static org.lwjgl.system.linux.XConfigureRequestEvent org.lwjgl.system.linux.XConfigureRequestEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XConfigureRequestEvent._wrap(_XConfigureRequestEvent.calloc(arg0))

    @overload
    def send_event(self, arg0: bool) -> 'XConfigureRequestEvent':
        """public org.lwjgl.system.linux.XConfigureRequestEvent org.lwjgl.system.linux.XConfigureRequestEvent.send_event(boolean)"""
        return 'XConfigureRequestEvent'._wrap(super(_XConfigureRequestEvent, self).send_event(_boolean.valueOf(arg0)))

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XConfigureRequestEvent.ndisplay(long)"""
        return int._wrap(_XConfigureRequestEvent.ndisplay(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nvalue_mask(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XConfigureRequestEvent.nvalue_mask(long)"""
        return int._wrap(_XConfigureRequestEvent.nvalue_mask(_long.valueOf(arg0)))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XConfigureRequestEvent.sizeof()"""
        return int._wrap(super(XConfigureRequestEvent, self).sizeof())

    @overload
    def type(self, arg0: int) -> 'XConfigureRequestEvent':
        """public org.lwjgl.system.linux.XConfigureRequestEvent org.lwjgl.system.linux.XConfigureRequestEvent.type(int)"""
        return 'XConfigureRequestEvent'._wrap(super(_XConfigureRequestEvent, self).type(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def nvalue_mask(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XConfigureRequestEvent.nvalue_mask(long,long)"""
        _XConfigureRequestEvent.nvalue_mask(_long.valueOf(arg0), _long.valueOf(arg1))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def width(self) -> int:
        """public int org.lwjgl.system.linux.XConfigureRequestEvent.width()"""
        return int._wrap(super(XConfigureRequestEvent, self).width())

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XConfigureRequestEvent$Buffer org.lwjgl.system.linux.XConfigureRequestEvent.create(long,int)"""
        return Buffer._wrap(_XConfigureRequestEvent.create(_long.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XConfigureRequestEvent.send_event()"""
        return bool._wrap(super(XConfigureRequestEvent, self).send_event())

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool._wrap(super(_pyglsystem.Struct, self).isNull(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def nparent(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XConfigureRequestEvent.nparent(long)"""
        return int._wrap(_XConfigureRequestEvent.nparent(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def create() -> 'XConfigureRequestEvent':
        """public static org.lwjgl.system.linux.XConfigureRequestEvent org.lwjgl.system.linux.XConfigureRequestEvent.create()"""
        return XConfigureRequestEvent._wrap(_XConfigureRequestEvent.create())

    @staticmethod
    @overload
    def ndetail(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XConfigureRequestEvent.ndetail(long,int)"""
        _XConfigureRequestEvent.ndetail(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XConfigureRequestEvent.nserial(long)"""
        return int._wrap(_XConfigureRequestEvent.nserial(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nwindow(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XConfigureRequestEvent.nwindow(long,long)"""
        _XConfigureRequestEvent.nwindow(_long.valueOf(arg0), _long.valueOf(arg1))

    @overload
    def detail(self) -> int:
        """public int org.lwjgl.system.linux.XConfigureRequestEvent.detail()"""
        return int._wrap(super(XConfigureRequestEvent, self).detail())

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XConfigureRequestEvent$Buffer org.lwjgl.system.linux.XConfigureRequestEvent.callocStack(int)"""
        return Buffer._wrap(_XConfigureRequestEvent.callocStack(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XConfigureRequestEvent.ndisplay(long,long)"""
        _XConfigureRequestEvent.ndisplay(_long.valueOf(arg0), _long.valueOf(arg1))

    @overload
    def serial(self, arg0: int) -> 'XConfigureRequestEvent':
        """public org.lwjgl.system.linux.XConfigureRequestEvent org.lwjgl.system.linux.XConfigureRequestEvent.serial(long)"""
        return 'XConfigureRequestEvent'._wrap(super(_XConfigureRequestEvent, self).serial(_long.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XConfigureRequestEvent.nserial(long,long)"""
        _XConfigureRequestEvent.nserial(_long.valueOf(arg0), _long.valueOf(arg1))

    @overload
    def width(self, arg0: int) -> 'XConfigureRequestEvent':
        """public org.lwjgl.system.linux.XConfigureRequestEvent org.lwjgl.system.linux.XConfigureRequestEvent.width(int)"""
        return 'XConfigureRequestEvent'._wrap(super(_XConfigureRequestEvent, self).width(_int.valueOf(arg0)))

    @overload
    def parent(self) -> int:
        """public long org.lwjgl.system.linux.XConfigureRequestEvent.parent()"""
        return int._wrap(super(XConfigureRequestEvent, self).parent())

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XConfigureRequestEvent$Buffer org.lwjgl.system.linux.XConfigureRequestEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XConfigureRequestEvent.callocStack(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XConfigureRequestEvent.nsend_event(long,int)"""
        _XConfigureRequestEvent.nsend_event(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def nwidth(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XConfigureRequestEvent.nwidth(long,int)"""
        _XConfigureRequestEvent.nwidth(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XConfigureRequestEvent':
        """public static org.lwjgl.system.linux.XConfigureRequestEvent org.lwjgl.system.linux.XConfigureRequestEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XConfigureRequestEvent._wrap(_XConfigureRequestEvent.malloc(arg0))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XConfigureRequestEvent$Buffer org.lwjgl.system.linux.XConfigureRequestEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XConfigureRequestEvent.malloc(_int.valueOf(arg0), arg1))

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @staticmethod
    @overload
    def ny(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XConfigureRequestEvent.ny(long)"""
        return int._wrap(_XConfigureRequestEvent.ny(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XConfigureRequestEvent$Buffer org.lwjgl.system.linux.XConfigureRequestEvent.malloc(int)"""
        return Buffer._wrap(_XConfigureRequestEvent.malloc(_int.valueOf(arg0)))

    @overload
    def height(self, arg0: int) -> 'XConfigureRequestEvent':
        """public org.lwjgl.system.linux.XConfigureRequestEvent org.lwjgl.system.linux.XConfigureRequestEvent.height(int)"""
        return 'XConfigureRequestEvent'._wrap(super(_XConfigureRequestEvent, self).height(_int.valueOf(arg0)))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XConfigureRequestEvent.type()"""
        return int._wrap(super(XConfigureRequestEvent, self).type())

    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XConfigureRequestEvent.nsend_event(long)"""
        return int._wrap(_XConfigureRequestEvent.nsend_event(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XConfigureRequestEvent$Buffer org.lwjgl.system.linux.XConfigureRequestEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XConfigureRequestEvent.calloc(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def ny(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XConfigureRequestEvent.ny(long,int)"""
        _XConfigureRequestEvent.ny(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).address())

    @overload
    def above(self, arg0: int) -> 'XConfigureRequestEvent':
        """public org.lwjgl.system.linux.XConfigureRequestEvent org.lwjgl.system.linux.XConfigureRequestEvent.above(long)"""
        return 'XConfigureRequestEvent'._wrap(super(_XConfigureRequestEvent, self).above(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XConfigureRequestEvent':
        """public static org.lwjgl.system.linux.XConfigureRequestEvent org.lwjgl.system.linux.XConfigureRequestEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XConfigureRequestEvent._wrap(_XConfigureRequestEvent.callocStack(arg0))

    @staticmethod
    @overload
    def nborder_width(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XConfigureRequestEvent.nborder_width(long,int)"""
        _XConfigureRequestEvent.nborder_width(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XConfigureRequestEvent.display()"""
        return int._wrap(super(XConfigureRequestEvent, self).display())

    @staticmethod
    @overload
    def malloc() -> 'XConfigureRequestEvent':
        """public static org.lwjgl.system.linux.XConfigureRequestEvent org.lwjgl.system.linux.XConfigureRequestEvent.malloc()"""
        return XConfigureRequestEvent._wrap(_XConfigureRequestEvent.malloc())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XConfigureRequestEvent':
        """public static org.lwjgl.system.linux.XConfigureRequestEvent org.lwjgl.system.linux.XConfigureRequestEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XConfigureRequestEvent._wrap(_XConfigureRequestEvent.mallocStack(arg0))

    @overload
    def border_width(self, arg0: int) -> 'XConfigureRequestEvent':
        """public org.lwjgl.system.linux.XConfigureRequestEvent org.lwjgl.system.linux.XConfigureRequestEvent.border_width(int)"""
        return 'XConfigureRequestEvent'._wrap(super(_XConfigureRequestEvent, self).border_width(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def ndetail(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XConfigureRequestEvent.ndetail(long)"""
        return int._wrap(_XConfigureRequestEvent.ndetail(_long.valueOf(arg0)))

    @overload
    def x(self, arg0: int) -> 'XConfigureRequestEvent':
        """public org.lwjgl.system.linux.XConfigureRequestEvent org.lwjgl.system.linux.XConfigureRequestEvent.x(int)"""
        return 'XConfigureRequestEvent'._wrap(super(_XConfigureRequestEvent, self).x(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def nheight(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XConfigureRequestEvent.nheight(long,int)"""
        _XConfigureRequestEvent.nheight(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: int, arg10: int, arg11: int, arg12: int, arg13: int) -> 'XConfigureRequestEvent':
        """public org.lwjgl.system.linux.XConfigureRequestEvent org.lwjgl.system.linux.XConfigureRequestEvent.set(int,long,boolean,long,long,long,int,int,int,int,int,long,int,long)"""
        return 'XConfigureRequestEvent'._wrap(super(_XConfigureRequestEvent, self).set(_int.valueOf(arg0), _long.valueOf(arg1), _boolean.valueOf(arg2), _long.valueOf(arg3), _long.valueOf(arg4), _long.valueOf(arg5), _int.valueOf(arg6), _int.valueOf(arg7), _int.valueOf(arg8), _int.valueOf(arg9), _int.valueOf(arg10), _long.valueOf(arg11), _int.valueOf(arg12), _long.valueOf(arg13)))

    @staticmethod
    @overload
    def calloc() -> 'XConfigureRequestEvent':
        """public static org.lwjgl.system.linux.XConfigureRequestEvent org.lwjgl.system.linux.XConfigureRequestEvent.calloc()"""
        return XConfigureRequestEvent._wrap(_XConfigureRequestEvent.calloc())

    @overload
    def border_width(self) -> int:
        """public int org.lwjgl.system.linux.XConfigureRequestEvent.border_width()"""
        return int._wrap(super(XConfigureRequestEvent, self).border_width())

    @staticmethod
    @overload
    def nx(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XConfigureRequestEvent.nx(long)"""
        return int._wrap(_XConfigureRequestEvent.nx(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'XConfigureRequestEvent':
        """public static org.lwjgl.system.linux.XConfigureRequestEvent org.lwjgl.system.linux.XConfigureRequestEvent.create(long)"""
        return XConfigureRequestEvent._wrap(_XConfigureRequestEvent.create(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XConfigureRequestEvent$Buffer org.lwjgl.system.linux.XConfigureRequestEvent.create(int)"""
        return Buffer._wrap(_XConfigureRequestEvent.create(_int.valueOf(arg0)))

    @overload
    def display(self, arg0: int) -> 'XConfigureRequestEvent':
        """public org.lwjgl.system.linux.XConfigureRequestEvent org.lwjgl.system.linux.XConfigureRequestEvent.display(long)"""
        return 'XConfigureRequestEvent'._wrap(super(_XConfigureRequestEvent, self).display(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack() -> 'XConfigureRequestEvent':
        """public static org.lwjgl.system.linux.XConfigureRequestEvent org.lwjgl.system.linux.XConfigureRequestEvent.callocStack()"""
        return XConfigureRequestEvent._wrap(_XConfigureRequestEvent.callocStack())

    @staticmethod
    @overload
    def nborder_width(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XConfigureRequestEvent.nborder_width(long)"""
        return int._wrap(_XConfigureRequestEvent.nborder_width(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XConfigureRequestEvent$Buffer org.lwjgl.system.linux.XConfigureRequestEvent.mallocStack(int)"""
        return Buffer._wrap(_XConfigureRequestEvent.mallocStack(_int.valueOf(arg0)))

    @overload
    def value_mask(self, arg0: int) -> 'XConfigureRequestEvent':
        """public org.lwjgl.system.linux.XConfigureRequestEvent org.lwjgl.system.linux.XConfigureRequestEvent.value_mask(long)"""
        return 'XConfigureRequestEvent'._wrap(super(_XConfigureRequestEvent, self).value_mask(_long.valueOf(arg0)))

    @overload
    def y(self, arg0: int) -> 'XConfigureRequestEvent':
        """public org.lwjgl.system.linux.XConfigureRequestEvent org.lwjgl.system.linux.XConfigureRequestEvent.y(int)"""
        return 'XConfigureRequestEvent'._wrap(super(_XConfigureRequestEvent, self).y(_int.valueOf(arg0)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str._wrap(super(pyglsystem.Pointer$Default, self).toString()) 
 
 
# CLASS: org.lwjgl.system.linux.XMappingEvent
from pyquantum_helper import import_once as _import_once
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _Object
_Object = _Object
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
from builtins import type
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import org.lwjgl.system.linux.XMappingEvent as _XMappingEvent_Buffer
_Buffer = _XMappingEvent_Buffer.Buffer
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import org.lwjgl.system.linux.XMappingEvent as _XMappingEvent
_XMappingEvent = _XMappingEvent
import java.lang.Boolean as _boolean
import java.lang.Integer as _int
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class XMappingEvent():
    """org.lwjgl.system.linux.XMappingEvent"""
 
    @staticmethod
    def _wrap(java_value: _XMappingEvent) -> 'XMappingEvent':
        return XMappingEvent(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _XMappingEvent):
        """
        Dynamic initializer for XMappingEvent.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_XMappingEvent__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_XMappingEvent__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def malloc() -> 'XMappingEvent':
        """public static org.lwjgl.system.linux.XMappingEvent org.lwjgl.system.linux.XMappingEvent.malloc()"""
        return XMappingEvent._wrap(_XMappingEvent.malloc())

    @staticmethod
    @overload
    def mallocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XMappingEvent$Buffer org.lwjgl.system.linux.XMappingEvent.mallocStack(int)"""
        return Buffer._wrap(_XMappingEvent.mallocStack(_int.valueOf(arg0)))

    @overload
    def send_event(self, arg0: bool) -> 'XMappingEvent':
        """public org.lwjgl.system.linux.XMappingEvent org.lwjgl.system.linux.XMappingEvent.send_event(boolean)"""
        return 'XMappingEvent'._wrap(super(_XMappingEvent, self).send_event(_boolean.valueOf(arg0)))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def count(self) -> int:
        """public int org.lwjgl.system.linux.XMappingEvent.count()"""
        return int._wrap(super(XMappingEvent, self).count())

    @staticmethod
    @overload
    def nwindow(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XMappingEvent.nwindow(long)"""
        return int._wrap(_XMappingEvent.nwindow(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nrequest(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMappingEvent.nrequest(long,int)"""
        _XMappingEvent.nrequest(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XMappingEvent.type()"""
        return int._wrap(super(XMappingEvent, self).type())

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @staticmethod
    @overload
    def nserial(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XMappingEvent.nserial(long)"""
        return int._wrap(_XMappingEvent.nserial(_long.valueOf(arg0)))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @staticmethod
    @overload
    def callocStack(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XMappingEvent$Buffer org.lwjgl.system.linux.XMappingEvent.callocStack(int)"""
        return Buffer._wrap(_XMappingEvent.callocStack(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def nfirst_keycode(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XMappingEvent.nfirst_keycode(long)"""
        return int._wrap(_XMappingEvent.nfirst_keycode(_long.valueOf(arg0)))

    @overload
    def serial(self, arg0: int) -> 'XMappingEvent':
        """public org.lwjgl.system.linux.XMappingEvent org.lwjgl.system.linux.XMappingEvent.serial(long)"""
        return 'XMappingEvent'._wrap(super(_XMappingEvent, self).serial(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'XMappingEvent':
        """public static org.lwjgl.system.linux.XMappingEvent org.lwjgl.system.linux.XMappingEvent.create(long)"""
        return XMappingEvent._wrap(_XMappingEvent.create(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XMappingEvent$Buffer org.lwjgl.system.linux.XMappingEvent.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XMappingEvent.malloc(_int.valueOf(arg0), arg1))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @staticmethod
    @overload
    def create() -> 'XMappingEvent':
        """public static org.lwjgl.system.linux.XMappingEvent org.lwjgl.system.linux.XMappingEvent.create()"""
        return XMappingEvent._wrap(_XMappingEvent.create())

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.XMappingEvent.sizeof()"""
        return int._wrap(super(XMappingEvent, self).sizeof())

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        _Struct.validate(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), arg3)

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @overload
    def type(self, arg0: int) -> 'XMappingEvent':
        """public org.lwjgl.system.linux.XMappingEvent org.lwjgl.system.linux.XMappingEvent.type(int)"""
        return 'XMappingEvent'._wrap(super(_XMappingEvent, self).type(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def ntype(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XMappingEvent.ntype(long)"""
        return int._wrap(_XMappingEvent.ntype(_long.valueOf(arg0)))

    @overload
    def first_keycode(self, arg0: int) -> 'XMappingEvent':
        """public org.lwjgl.system.linux.XMappingEvent org.lwjgl.system.linux.XMappingEvent.first_keycode(int)"""
        return 'XMappingEvent'._wrap(super(_XMappingEvent, self).first_keycode(_int.valueOf(arg0)))

    @overload
    def first_keycode(self) -> int:
        """public int org.lwjgl.system.linux.XMappingEvent.first_keycode()"""
        return int._wrap(super(XMappingEvent, self).first_keycode())

    @staticmethod
    @overload
    def nrequest(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XMappingEvent.nrequest(long)"""
        return int._wrap(_XMappingEvent.nrequest(_long.valueOf(arg0)))

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XMappingEvent.display()"""
        return int._wrap(super(XMappingEvent, self).display())

    @staticmethod
    @overload
    def callocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XMappingEvent$Buffer org.lwjgl.system.linux.XMappingEvent.callocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XMappingEvent.callocStack(_int.valueOf(arg0), arg1))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XMappingEvent(java.nio.ByteBuffer)"""
        val = _XMappingEvent(arg0)
        self.__wrapper = val

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'XMappingEvent':
        """public static org.lwjgl.system.linux.XMappingEvent org.lwjgl.system.linux.XMappingEvent.calloc(org.lwjgl.system.MemoryStack)"""
        return XMappingEvent._wrap(_XMappingEvent.calloc(arg0))

    @staticmethod
    @overload
    def ndisplay(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.XMappingEvent.ndisplay(long)"""
        return int._wrap(_XMappingEvent.ndisplay(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def mallocStack(arg0: 'MemoryStack') -> 'XMappingEvent':
        """public static org.lwjgl.system.linux.XMappingEvent org.lwjgl.system.linux.XMappingEvent.mallocStack(org.lwjgl.system.MemoryStack)"""
        return XMappingEvent._wrap(_XMappingEvent.mallocStack(arg0))

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).address())

    @staticmethod
    @overload
    def ncount(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XMappingEvent.ncount(long)"""
        return int._wrap(_XMappingEvent.ncount(_long.valueOf(arg0)))

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XMappingEvent.send_event()"""
        return bool._wrap(super(XMappingEvent, self).send_event())

    @staticmethod
    @overload
    def nwindow(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMappingEvent.nwindow(long,long)"""
        _XMappingEvent.nwindow(_long.valueOf(arg0), _long.valueOf(arg1))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def request(self, arg0: int) -> 'XMappingEvent':
        """public org.lwjgl.system.linux.XMappingEvent org.lwjgl.system.linux.XMappingEvent.request(int)"""
        return 'XMappingEvent'._wrap(super(_XMappingEvent, self).request(_int.valueOf(arg0)))

    @overload
    def window(self, arg0: int) -> 'XMappingEvent':
        """public org.lwjgl.system.linux.XMappingEvent org.lwjgl.system.linux.XMappingEvent.window(long)"""
        return 'XMappingEvent'._wrap(super(_XMappingEvent, self).window(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def validate(arg0: int):
        """public static void org.lwjgl.system.linux.XMappingEvent.validate(long)"""
        _XMappingEvent.validate(_long.valueOf(arg0))

    @overload
    def set(self, arg0: int, arg1: int, arg2: bool, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int) -> 'XMappingEvent':
        """public org.lwjgl.system.linux.XMappingEvent org.lwjgl.system.linux.XMappingEvent.set(int,long,boolean,long,long,int,int,int)"""
        return 'XMappingEvent'._wrap(super(_XMappingEvent, self).set(_int.valueOf(arg0), _long.valueOf(arg1), _boolean.valueOf(arg2), _long.valueOf(arg3), _long.valueOf(arg4), _int.valueOf(arg5), _int.valueOf(arg6), _int.valueOf(arg7)))

    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XMappingEvent$Buffer org.lwjgl.system.linux.XMappingEvent.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XMappingEvent.calloc(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def mallocStack() -> 'XMappingEvent':
        """public static org.lwjgl.system.linux.XMappingEvent org.lwjgl.system.linux.XMappingEvent.mallocStack()"""
        return XMappingEvent._wrap(_XMappingEvent.mallocStack())

    @staticmethod
    @overload
    def ndisplay(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMappingEvent.ndisplay(long,long)"""
        _XMappingEvent.ndisplay(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def mallocStack(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.XMappingEvent$Buffer org.lwjgl.system.linux.XMappingEvent.mallocStack(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_XMappingEvent.mallocStack(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def nsend_event(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMappingEvent.nsend_event(long,int)"""
        _XMappingEvent.nsend_event(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'XMappingEvent':
        """public static org.lwjgl.system.linux.XMappingEvent org.lwjgl.system.linux.XMappingEvent.malloc(org.lwjgl.system.MemoryStack)"""
        return XMappingEvent._wrap(_XMappingEvent.malloc(arg0))

    @overload
    def count(self, arg0: int) -> 'XMappingEvent':
        """public org.lwjgl.system.linux.XMappingEvent org.lwjgl.system.linux.XMappingEvent.count(int)"""
        return 'XMappingEvent'._wrap(super(_XMappingEvent, self).count(_int.valueOf(arg0)))

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XMappingEvent.window()"""
        return int._wrap(super(XMappingEvent, self).window())

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XMappingEvent.serial()"""
        return int._wrap(super(XMappingEvent, self).serial())

    @staticmethod
    @overload
    def ntype(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMappingEvent.ntype(long,int)"""
        _XMappingEvent.ntype(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def request(self) -> int:
        """public int org.lwjgl.system.linux.XMappingEvent.request()"""
        return int._wrap(super(XMappingEvent, self).request())

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XMappingEvent$Buffer org.lwjgl.system.linux.XMappingEvent.createSafe(long,int)"""
        return Buffer._wrap(_XMappingEvent.createSafe(_long.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def set(self, arg0: 'XMappingEvent') -> 'XMappingEvent':
        """public org.lwjgl.system.linux.XMappingEvent org.lwjgl.system.linux.XMappingEvent.set(org.lwjgl.system.linux.XMappingEvent)"""
        return 'XMappingEvent'._wrap(super(_XMappingEvent, self).set(arg0))

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XMappingEvent$Buffer org.lwjgl.system.linux.XMappingEvent.malloc(int)"""
        return Buffer._wrap(_XMappingEvent.malloc(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XMappingEvent$Buffer org.lwjgl.system.linux.XMappingEvent.create(int)"""
        return Buffer._wrap(_XMappingEvent.create(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def ncount(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMappingEvent.ncount(long,int)"""
        _XMappingEvent.ncount(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def callocStack(arg0: 'MemoryStack') -> 'XMappingEvent':
        """public static org.lwjgl.system.linux.XMappingEvent org.lwjgl.system.linux.XMappingEvent.callocStack(org.lwjgl.system.MemoryStack)"""
        return XMappingEvent._wrap(_XMappingEvent.callocStack(arg0))

    @staticmethod
    @overload
    def nserial(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMappingEvent.nserial(long,long)"""
        _XMappingEvent.nserial(_long.valueOf(arg0), _long.valueOf(arg1))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @overload
    def display(self, arg0: int) -> 'XMappingEvent':
        """public org.lwjgl.system.linux.XMappingEvent org.lwjgl.system.linux.XMappingEvent.display(long)"""
        return 'XMappingEvent'._wrap(super(_XMappingEvent, self).display(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def nsend_event(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.XMappingEvent.nsend_event(long)"""
        return int._wrap(_XMappingEvent.nsend_event(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XMappingEvent$Buffer org.lwjgl.system.linux.XMappingEvent.create(long,int)"""
        return Buffer._wrap(_XMappingEvent.create(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def nfirst_keycode(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.XMappingEvent.nfirst_keycode(long,int)"""
        _XMappingEvent.nfirst_keycode(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.XMappingEvent$Buffer org.lwjgl.system.linux.XMappingEvent.calloc(int)"""
        return Buffer._wrap(_XMappingEvent.calloc(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'XMappingEvent':
        """public static org.lwjgl.system.linux.XMappingEvent org.lwjgl.system.linux.XMappingEvent.createSafe(long)"""
        return XMappingEvent._wrap(_XMappingEvent.createSafe(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def callocStack() -> 'XMappingEvent':
        """public static org.lwjgl.system.linux.XMappingEvent org.lwjgl.system.linux.XMappingEvent.callocStack()"""
        return XMappingEvent._wrap(_XMappingEvent.callocStack())

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool._wrap(super(_pyglsystem.Struct, self).isNull(_int.valueOf(arg0)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str._wrap(super(pyglsystem.Pointer$Default, self).toString())

    @staticmethod
    @overload
    def calloc() -> 'XMappingEvent':
        """public static org.lwjgl.system.linux.XMappingEvent org.lwjgl.system.linux.XMappingEvent.calloc()"""
        return XMappingEvent._wrap(_XMappingEvent.calloc()) 
 
 
# CLASS: org.lwjgl.system.linux.XMotionEvent$Buffer
from pyquantum_helper import import_once as _import_once
import java.lang.Object as _Object
_Object = _Object
from builtins import type
import org.lwjgl.system.CustomBuffer as _CustomBuffer
_CustomBuffer = _CustomBuffer
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Boolean as _boolean
import java.lang.Byte as _byte
import org.lwjgl.system.StructBuffer as _StructBuffer
_StructBuffer = _StructBuffer
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.util.Iterator as _Iterator
_Iterator = _Iterator
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
import java.util.Spliterator as _Spliterator
_Spliterator = _Spliterator
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.util.Iterator as Iterator
import java.lang.Integer as _int
import org.lwjgl.system.linux.XMotionEvent as _XMotionEvent_Buffer
_Buffer = _XMotionEvent_Buffer.Buffer
import java.util.stream.Stream as _Stream
_Stream = _Stream
import java.util.stream.Stream as Stream
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class Buffer():
    """org.lwjgl.system.linux.XMotionEvent.Buffer"""
 
    @staticmethod
    def _wrap(java_value: _Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Buffer__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Buffer__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def window(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XMotionEvent$Buffer org.lwjgl.system.linux.XMotionEvent$Buffer.window(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).window(_long.valueOf(arg0)))

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).limit(_int.valueOf(arg0)))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address0())

    @overload
    def time(self) -> int:
        """public long org.lwjgl.system.linux.XMotionEvent$Buffer.time()"""
        return int._wrap(super(Buffer, self).time())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @overload
    def time(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XMotionEvent$Buffer org.lwjgl.system.linux.XMotionEvent$Buffer.time(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).time(_long.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str._wrap(super(pyglsystem.CustomBuffer, self).toString())

    @overload
    def state(self) -> int:
        """public int org.lwjgl.system.linux.XMotionEvent$Buffer.state()"""
        return int._wrap(super(Buffer, self).state())

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int._wrap(super(_pyglsystem.CustomBuffer, self).address(_int.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).mark())

    @overload
    def y_root(self) -> int:
        """public int org.lwjgl.system.linux.XMotionEvent$Buffer.y_root()"""
        return int._wrap(super(Buffer, self).y_root())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'._wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).stream())

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).position(_int.valueOf(arg0)))

    @overload
    def state(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XMotionEvent$Buffer org.lwjgl.system.linux.XMotionEvent$Buffer.state(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).state(_int.valueOf(arg0)))

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'._wrap(super(pyglsystem.StructBuffer, self).get())

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def x(self) -> int:
        """public int org.lwjgl.system.linux.XMotionEvent$Buffer.x()"""
        return int._wrap(super(Buffer, self).x())

    @overload
    def send_event(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XMotionEvent$Buffer org.lwjgl.system.linux.XMotionEvent$Buffer.send_event(boolean)"""
        return 'Buffer'._wrap(super(_Buffer, self).send_event(_boolean.valueOf(arg0)))

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XMotionEvent$Buffer(java.nio.ByteBuffer)"""
        val = _Buffer(arg0)
        self.__wrapper = val

    @overload
    def y(self) -> int:
        """public int org.lwjgl.system.linux.XMotionEvent$Buffer.y()"""
        return int._wrap(super(Buffer, self).y())

    @overload
    def root(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XMotionEvent$Buffer org.lwjgl.system.linux.XMotionEvent$Buffer.root(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).root(_long.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @overload
    def root(self) -> int:
        """public long org.lwjgl.system.linux.XMotionEvent$Buffer.root()"""
        return int._wrap(super(Buffer, self).root())

    @overload
    def x_root(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XMotionEvent$Buffer org.lwjgl.system.linux.XMotionEvent$Buffer.x_root(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).x_root(_int.valueOf(arg0)))

    @overload
    def is_hint(self) -> int:
        """public byte org.lwjgl.system.linux.XMotionEvent$Buffer.is_hint()"""
        return int._wrap(super(Buffer, self).is_hint())

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XMotionEvent$Buffer.type()"""
        return int._wrap(super(Buffer, self).type())

    @overload
    def send_event(self) -> bool:
        """public boolean org.lwjgl.system.linux.XMotionEvent$Buffer.send_event()"""
        return bool._wrap(super(Buffer, self).send_event())

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def is_hint(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XMotionEvent$Buffer org.lwjgl.system.linux.XMotionEvent$Buffer.is_hint(byte)"""
        return 'Buffer'._wrap(super(_Buffer, self).is_hint(_byte.valueOf(arg0)))

    @overload
    def subwindow(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XMotionEvent$Buffer org.lwjgl.system.linux.XMotionEvent$Buffer.subwindow(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).subwindow(_long.valueOf(arg0)))

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XMotionEvent$Buffer org.lwjgl.system.linux.XMotionEvent$Buffer.serial(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).serial(_long.valueOf(arg0)))

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(arg0))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def y(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XMotionEvent$Buffer org.lwjgl.system.linux.XMotionEvent$Buffer.y(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).y(_int.valueOf(arg0)))

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'._wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def same_screen(self) -> bool:
        """public boolean org.lwjgl.system.linux.XMotionEvent$Buffer.same_screen()"""
        return bool._wrap(super(Buffer, self).same_screen())

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XMotionEvent$Buffer org.lwjgl.system.linux.XMotionEvent$Buffer.display(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).display(_long.valueOf(arg0)))

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(arg0))

    @overload
    def same_screen(self, arg0: bool) -> 'Buffer':
        """public org.lwjgl.system.linux.XMotionEvent$Buffer org.lwjgl.system.linux.XMotionEvent$Buffer.same_screen(boolean)"""
        return 'Buffer'._wrap(super(_Buffer, self).same_screen(_boolean.valueOf(arg0)))

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XMotionEvent$Buffer.display()"""
        return int._wrap(super(Buffer, self).display())

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).slice())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).slice(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XMotionEvent$Buffer.serial()"""
        return int._wrap(super(Buffer, self).serial())

    @overload
    def window(self) -> int:
        """public long org.lwjgl.system.linux.XMotionEvent$Buffer.window()"""
        return int._wrap(super(Buffer, self).window())

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0), arg1))

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(_int.valueOf(arg0), arg1))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).clear())

    @overload
    def x_root(self) -> int:
        """public int org.lwjgl.system.linux.XMotionEvent$Buffer.x_root()"""
        return int._wrap(super(Buffer, self).x_root())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool._wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @overload
    def x(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XMotionEvent$Buffer org.lwjgl.system.linux.XMotionEvent$Buffer.x(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).x(_int.valueOf(arg0)))

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XMotionEvent$Buffer org.lwjgl.system.linux.XMotionEvent$Buffer.type(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).type(_int.valueOf(arg0)))

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int._wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(_int.valueOf(arg0), arg1))

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XMotionEvent$Buffer(long,int)"""
        val = _Buffer(_long.valueOf(arg0), _int.valueOf(arg1))
        self.__wrapper = val

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(_pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def subwindow(self) -> int:
        """public long org.lwjgl.system.linux.XMotionEvent$Buffer.subwindow()"""
        return int._wrap(super(Buffer, self).subwindow())

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @overload
    def y_root(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XMotionEvent$Buffer org.lwjgl.system.linux.XMotionEvent$Buffer.y_root(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).y_root(_int.valueOf(arg0)))

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(arg0)) 
 
 
# CLASS: org.lwjgl.system.linux.XErrorEvent$Buffer
from pyquantum_helper import import_once as _import_once
import java.lang.Object as _Object
_Object = _Object
from builtins import type
import org.lwjgl.system.CustomBuffer as _CustomBuffer
_CustomBuffer = _CustomBuffer
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
import java.util.function.Consumer as Consumer
import java.util.Spliterator as Spliterator
import java.lang.Byte as _byte
import org.lwjgl.system.StructBuffer as _StructBuffer
_StructBuffer = _StructBuffer
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.util.Iterator as _Iterator
_Iterator = _Iterator
from builtins import bool
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
import java.util.Spliterator as _Spliterator
_Spliterator = _Spliterator
import org.lwjgl.system.linux.XErrorEvent as _XErrorEvent_Buffer
_Buffer = _XErrorEvent_Buffer.Buffer
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.util.Iterator as Iterator
import java.lang.Integer as _int
import java.util.stream.Stream as _Stream
_Stream = _Stream
import java.util.stream.Stream as Stream
import java.nio.ByteBuffer as ByteBuffer
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class Buffer():
    """org.lwjgl.system.linux.XErrorEvent.Buffer"""
 
    @staticmethod
    def _wrap(java_value: _Buffer) -> 'Buffer':
        return Buffer(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _Buffer):
        """
        Dynamic initializer for Buffer.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_Buffer__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_Buffer__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @override
    @overload
    def limit(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.limit()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).limit())

    @overload
    def limit(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.limit(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).limit(_int.valueOf(arg0)))

    @override
    @overload
    def address0(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address0()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address0())

    @overload
    def minor_code(self) -> int:
        """public byte org.lwjgl.system.linux.XErrorEvent$Buffer.minor_code()"""
        return int._wrap(super(Buffer, self).minor_code())

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @overload
    def type(self) -> int:
        """public int org.lwjgl.system.linux.XErrorEvent$Buffer.type()"""
        return int._wrap(super(Buffer, self).type())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.CustomBuffer.address()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).address())

    @overload
    def resourceid(self) -> int:
        """public long org.lwjgl.system.linux.XErrorEvent$Buffer.resourceid()"""
        return int._wrap(super(Buffer, self).resourceid())

    @override
    @overload
    def rewind(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.rewind()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).rewind())

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @overload
    def get(self, arg0: int) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get(int)"""
        return 'pyglsystem.Struct'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.XErrorEvent$Buffer(java.nio.ByteBuffer)"""
        val = _Buffer(arg0)
        self.__wrapper = val

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.CustomBuffer.toString()"""
        return str._wrap(super(pyglsystem.CustomBuffer, self).toString())

    @overload
    def request_code(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XErrorEvent$Buffer org.lwjgl.system.linux.XErrorEvent$Buffer.request_code(byte)"""
        return 'Buffer'._wrap(super(_Buffer, self).request_code(_byte.valueOf(arg0)))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @overload
    def address(self, arg0: int) -> int:
        """public long org.lwjgl.system.CustomBuffer.address(int)"""
        return int._wrap(super(_pyglsystem.CustomBuffer, self).address(_int.valueOf(arg0)))

    @override
    @overload
    def mark(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.mark()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).mark())

    @overload
    def type(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XErrorEvent$Buffer org.lwjgl.system.linux.XErrorEvent$Buffer.type(int)"""
        return 'Buffer'._wrap(super(_Buffer, self).type(_int.valueOf(arg0)))

    @overload
    def display(self) -> int:
        """public long org.lwjgl.system.linux.XErrorEvent$Buffer.display()"""
        return int._wrap(super(Buffer, self).display())

    @override
    @overload
    def spliterator(self) -> 'Spliterator':
        """public java.util.Spliterator<T> org.lwjgl.system.StructBuffer.spliterator()"""
        return 'Spliterator'._wrap(super(pyglsystem.StructBuffer, self).spliterator())

    @override
    @overload
    def stream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.stream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).stream())

    @overload
    def display(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XErrorEvent$Buffer org.lwjgl.system.linux.XErrorEvent$Buffer.display(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).display(_long.valueOf(arg0)))

    @overload
    def position(self, arg0: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.position(int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).position(_int.valueOf(arg0)))

    @overload
    def request_code(self) -> int:
        """public byte org.lwjgl.system.linux.XErrorEvent$Buffer.request_code()"""
        return int._wrap(super(Buffer, self).request_code())

    @override
    @overload
    def reset(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.reset()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).reset())

    @override
    @overload
    def position(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.position()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).position())

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @override
    @overload
    def get(self) -> 'pyglsystem.Struct':
        """public T org.lwjgl.system.StructBuffer.get()"""
        return 'pyglsystem.Struct'._wrap(super(pyglsystem.StructBuffer, self).get())

    @override
    @overload
    def capacity(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.capacity()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).capacity())

    @overload
    def serial(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XErrorEvent$Buffer org.lwjgl.system.linux.XErrorEvent$Buffer.serial(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).serial(_long.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @override
    @overload
    def compact(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.compact()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).compact())

    @overload
    def put(self, arg0: 'CustomBuffer') -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.put(SELF)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).put(arg0))

    @overload
    def apply(self, arg0: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(arg0))

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @overload
    def error_code(self) -> int:
        """public byte org.lwjgl.system.linux.XErrorEvent$Buffer.error_code()"""
        return int._wrap(super(Buffer, self).error_code())

    @override
    @overload
    def iterator(self) -> 'Iterator':
        """public java.util.Iterator<T> org.lwjgl.system.StructBuffer.iterator()"""
        return 'Iterator'._wrap(super(pyglsystem.StructBuffer, self).iterator())

    @overload
    def resourceid(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XErrorEvent$Buffer org.lwjgl.system.linux.XErrorEvent$Buffer.resourceid(long)"""
        return 'Buffer'._wrap(super(_Buffer, self).resourceid(_long.valueOf(arg0)))

    @overload
    def put(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(arg0))

    @override
    @overload
    def slice(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).slice())

    @overload
    def slice(self, arg0: int, arg1: int) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.slice(int,int)"""
        return 'pyglsystem.CustomBuffer'._wrap(super(_pyglsystem.CustomBuffer, self).slice(_int.valueOf(arg0), _int.valueOf(arg1)))

    @overload
    def get(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(_int.valueOf(arg0), arg1))

    @overload
    def put(self, arg0: int, arg1: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.put(int,T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).put(_int.valueOf(arg0), arg1))

    @override
    @overload
    def clear(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.clear()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).clear())

    @override
    @overload
    def hasRemaining(self) -> bool:
        """public boolean org.lwjgl.system.CustomBuffer.hasRemaining()"""
        return bool._wrap(super(pyglsystem.CustomBuffer, self).hasRemaining())

    @override
    @overload
    def flip(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.flip()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).flip())

    @overload
    def error_code(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XErrorEvent$Buffer org.lwjgl.system.linux.XErrorEvent$Buffer.error_code(byte)"""
        return 'Buffer'._wrap(super(_Buffer, self).error_code(_byte.valueOf(arg0)))

    @overload
    def __init__(self, arg0: int, arg1: int):
        """public org.lwjgl.system.linux.XErrorEvent$Buffer(long,int)"""
        val = _Buffer(_long.valueOf(arg0), _int.valueOf(arg1))
        self.__wrapper = val

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.StructBuffer.sizeof()"""
        return int._wrap(super(pyglsystem.StructBuffer, self).sizeof())

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def apply(self, arg0: int, arg1: 'Consumer') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.apply(int,java.util.function.Consumer<T>)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).apply(_int.valueOf(arg0), arg1))

    @override
    @overload
    def remaining(self) -> int:
        """public int org.lwjgl.system.CustomBuffer.remaining()"""
        return int._wrap(super(pyglsystem.CustomBuffer, self).remaining())

    @overload
    def minor_code(self, arg0: int) -> 'Buffer':
        """public org.lwjgl.system.linux.XErrorEvent$Buffer org.lwjgl.system.linux.XErrorEvent$Buffer.minor_code(byte)"""
        return 'Buffer'._wrap(super(_Buffer, self).minor_code(_byte.valueOf(arg0)))

    @override
    @overload
    def parallelStream(self) -> 'Stream':
        """public java.util.stream.Stream<T> org.lwjgl.system.StructBuffer.parallelStream()"""
        return 'Stream'._wrap(super(pyglsystem.StructBuffer, self).parallelStream())

    @override
    @overload
    def forEach(self, arg0: 'Consumer'):
        """public void org.lwjgl.system.StructBuffer.forEach(java.util.function.Consumer<? super T>)"""
        super(_pyglsystem.StructBuffer, self).forEach(arg0)

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.CustomBuffer.free()"""
        super(pyglsystem.CustomBuffer, self).free()

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @overload
    def serial(self) -> int:
        """public long org.lwjgl.system.linux.XErrorEvent$Buffer.serial()"""
        return int._wrap(super(Buffer, self).serial())

    @override
    @overload
    def duplicate(self) -> 'pyglsystem.CustomBuffer':
        """public SELF org.lwjgl.system.CustomBuffer.duplicate()"""
        return 'pyglsystem.CustomBuffer'._wrap(super(pyglsystem.CustomBuffer, self).duplicate())

    @overload
    def get(self, arg0: 'Struct') -> 'pyglsystem.StructBuffer':
        """public SELF org.lwjgl.system.StructBuffer.get(T)"""
        return 'pyglsystem.StructBuffer'._wrap(super(_pyglsystem.StructBuffer, self).get(arg0)) 
 
 
# CLASS: org.lwjgl.system.linux.StatxTimestamp
from pyquantum_helper import import_once as _import_once
import org.lwjgl.system.linux.StatxTimestamp as _StatxTimestamp_Buffer
_Buffer = _StatxTimestamp_Buffer.Buffer
from builtins import str
from pyquantum_helper import override
import java.lang.Object as _Object
_Object = _Object
import java.lang.Object as _object
import org.lwjgl.system.Pointer as _Pointer_Default
_Default = _Pointer_Default.Default
from builtins import type
import org.lwjgl.system.NativeResource as _NativeResource
_NativeResource = _NativeResource
try:
    import pyglsystem
except ImportError:
    pyglsystem = _import_once("pyglsystem")

import java.lang.String as _String
_String = _String
import java.lang.Integer as _int
import org.lwjgl.system.linux.StatxTimestamp as _StatxTimestamp
_StatxTimestamp = _StatxTimestamp
import org.lwjgl.system.Struct as _Struct
_Struct = _Struct
import java.nio.ByteBuffer as ByteBuffer
from builtins import bool
import java.lang.Long as _long
from builtins import int
import java.lang.Class as _Class
_Class = _Class
 
class StatxTimestamp():
    """org.lwjgl.system.linux.StatxTimestamp"""
 
    @staticmethod
    def _wrap(java_value: _StatxTimestamp) -> 'StatxTimestamp':
        return StatxTimestamp(__dynamic__=java_value)
 
    #
    # DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
    #
    @overload
    def __init__(self, __dynamic__: _StatxTimestamp):
        """
        Dynamic initializer for StatxTimestamp.
        WARNING: DO NOT USE THIS. THIS IS FOR THE JAVA WRAPPER ONLY!
 
        :param __dynamic__: The java object to wrap
        """
        self.__wrapper = __dynamic__
 
    def __getattr__(self, name: str):
        print("Getting attribute %s" % name)
        if name == "_StatxTimestamp__wrapper":
            return object.__getattr__(self, name)
        return getattr(self.__wrapper, name)
 
    def __setattr__(self, name: str, value: Any):
        print("Setting attribute %s to %s" % (name, value))
        if name == "_StatxTimestamp__wrapper":
            return object.__setattr__(self, name, value)
        setattr(self.__wrapper, name, value)
 
    def __delattr__(self, name: str):
        raise AttributeError("Cannot delete attribute '%s' from %s" % (name, self.__wrapper.__class__.__name__))
 
    @staticmethod
    @overload
    def calloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.StatxTimestamp$Buffer org.lwjgl.system.linux.StatxTimestamp.calloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_StatxTimestamp.calloc(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def malloc() -> 'StatxTimestamp':
        """public static org.lwjgl.system.linux.StatxTimestamp org.lwjgl.system.linux.StatxTimestamp.malloc()"""
        return StatxTimestamp._wrap(_StatxTimestamp.malloc())

    @staticmethod
    @overload
    def n__reserved(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.StatxTimestamp.n__reserved(long,int)"""
        _StatxTimestamp.n__reserved(_long.valueOf(arg0), _int.valueOf(arg1))

    @overload
    def tv_nsec(self) -> int:
        """public int org.lwjgl.system.linux.StatxTimestamp.tv_nsec()"""
        return int._wrap(super(StatxTimestamp, self).tv_nsec())

    @overload
    def equals(self, arg0: object) -> bool:
        """public boolean org.lwjgl.system.Pointer$Default.equals(java.lang.Object)"""
        return bool._wrap(super(_pyglsystem.Pointer$Default, self).equals(arg0))

    @override
    @overload
    def notifyAll(self):
        """public final native void java.lang.Object.notifyAll()"""
        super(object, self).notifyAll()

    @override
    @overload
    def wait(self, arg0: int):
        """public final void java.lang.Object.wait(long) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0))

    @staticmethod
    @overload
    def create(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.StatxTimestamp$Buffer org.lwjgl.system.linux.StatxTimestamp.create(long,int)"""
        return Buffer._wrap(_StatxTimestamp.create(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def calloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.StatxTimestamp$Buffer org.lwjgl.system.linux.StatxTimestamp.calloc(int)"""
        return Buffer._wrap(_StatxTimestamp.calloc(_int.valueOf(arg0)))

    @override
    @overload
    def notify(self):
        """public final native void java.lang.Object.notify()"""
        super(object, self).notify()

    @overload
    def set(self, arg0: int, arg1: int) -> 'StatxTimestamp':
        """public org.lwjgl.system.linux.StatxTimestamp org.lwjgl.system.linux.StatxTimestamp.set(long,int)"""
        return 'StatxTimestamp'._wrap(super(_StatxTimestamp, self).set(_long.valueOf(arg0), _int.valueOf(arg1)))

    @staticmethod
    @overload
    def ntv_nsec(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.StatxTimestamp.ntv_nsec(long,int)"""
        _StatxTimestamp.ntv_nsec(_long.valueOf(arg0), _int.valueOf(arg1))

    @override
    @overload
    def hashCode(self) -> int:
        """public int org.lwjgl.system.Pointer$Default.hashCode()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).hashCode())

    @staticmethod
    @overload
    def malloc(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.StatxTimestamp$Buffer org.lwjgl.system.linux.StatxTimestamp.malloc(int)"""
        return Buffer._wrap(_StatxTimestamp.malloc(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def ntv_sec(arg0: int, arg1: int):
        """public static void org.lwjgl.system.linux.StatxTimestamp.ntv_sec(long,long)"""
        _StatxTimestamp.ntv_sec(_long.valueOf(arg0), _long.valueOf(arg1))

    @staticmethod
    @overload
    def calloc() -> 'StatxTimestamp':
        """public static org.lwjgl.system.linux.StatxTimestamp org.lwjgl.system.linux.StatxTimestamp.calloc()"""
        return StatxTimestamp._wrap(_StatxTimestamp.calloc())

    @staticmethod
    @overload
    def malloc(arg0: int, arg1: 'MemoryStack') -> 'Buffer':
        """public static org.lwjgl.system.linux.StatxTimestamp$Buffer org.lwjgl.system.linux.StatxTimestamp.malloc(int,org.lwjgl.system.MemoryStack)"""
        return Buffer._wrap(_StatxTimestamp.malloc(_int.valueOf(arg0), arg1))

    @staticmethod
    @overload
    def create(arg0: int) -> 'StatxTimestamp':
        """public static org.lwjgl.system.linux.StatxTimestamp org.lwjgl.system.linux.StatxTimestamp.create(long)"""
        return StatxTimestamp._wrap(_StatxTimestamp.create(_long.valueOf(arg0)))

    @override
    @overload
    def wait(self, arg0: int, arg1: int):
        """public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException"""
        super(_object, self).wait(_long.valueOf(arg0), _int.valueOf(arg1))

    @staticmethod
    @overload
    def create() -> 'StatxTimestamp':
        """public static org.lwjgl.system.linux.StatxTimestamp org.lwjgl.system.linux.StatxTimestamp.create()"""
        return StatxTimestamp._wrap(_StatxTimestamp.create())

    @staticmethod
    @overload
    def ntv_nsec(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.StatxTimestamp.ntv_nsec(long)"""
        return int._wrap(_StatxTimestamp.ntv_nsec(_long.valueOf(arg0)))

    @override
    @overload
    def free(self):
        """public void org.lwjgl.system.Struct.free()"""
        super(pyglsystem.Struct, self).free()

    @overload
    def set(self, arg0: 'StatxTimestamp') -> 'StatxTimestamp':
        """public org.lwjgl.system.linux.StatxTimestamp org.lwjgl.system.linux.StatxTimestamp.set(org.lwjgl.system.linux.StatxTimestamp)"""
        return 'StatxTimestamp'._wrap(super(_StatxTimestamp, self).set(arg0))

    @staticmethod
    @overload
    def calloc(arg0: 'MemoryStack') -> 'StatxTimestamp':
        """public static org.lwjgl.system.linux.StatxTimestamp org.lwjgl.system.linux.StatxTimestamp.calloc(org.lwjgl.system.MemoryStack)"""
        return StatxTimestamp._wrap(_StatxTimestamp.calloc(arg0))

    @override
    @overload
    def close(self):
        """public default void org.lwjgl.system.NativeResource.close()"""
        super(pyglsystem.NativeResource, self).close()

    @staticmethod
    @overload
    def malloc(arg0: 'MemoryStack') -> 'StatxTimestamp':
        """public static org.lwjgl.system.linux.StatxTimestamp org.lwjgl.system.linux.StatxTimestamp.malloc(org.lwjgl.system.MemoryStack)"""
        return StatxTimestamp._wrap(_StatxTimestamp.malloc(arg0))

    @staticmethod
    @overload
    def validate(arg0: int, arg1: int, arg2: int, arg3: 'StructValidation'):
        """public static void org.lwjgl.system.Struct.validate(long,int,int,org.lwjgl.system.Struct$StructValidation)"""
        _Struct.validate(_long.valueOf(arg0), _int.valueOf(arg1), _int.valueOf(arg2), arg3)

    @override
    @overload
    def clear(self):
        """public void org.lwjgl.system.Struct.clear()"""
        super(pyglsystem.Struct, self).clear()

    @override
    @overload
    def sizeof(self) -> int:
        """public int org.lwjgl.system.linux.StatxTimestamp.sizeof()"""
        return int._wrap(super(StatxTimestamp, self).sizeof())

    @staticmethod
    @overload
    def createSafe(arg0: int) -> 'StatxTimestamp':
        """public static org.lwjgl.system.linux.StatxTimestamp org.lwjgl.system.linux.StatxTimestamp.createSafe(long)"""
        return StatxTimestamp._wrap(_StatxTimestamp.createSafe(_long.valueOf(arg0)))

    @overload
    def tv_sec(self, arg0: int) -> 'StatxTimestamp':
        """public org.lwjgl.system.linux.StatxTimestamp org.lwjgl.system.linux.StatxTimestamp.tv_sec(long)"""
        return 'StatxTimestamp'._wrap(super(_StatxTimestamp, self).tv_sec(_long.valueOf(arg0)))

    @staticmethod
    @overload
    def n__reserved(arg0: int) -> int:
        """public static int org.lwjgl.system.linux.StatxTimestamp.n__reserved(long)"""
        return int._wrap(_StatxTimestamp.n__reserved(_long.valueOf(arg0)))

    @overload
    def tv_sec(self) -> int:
        """public long org.lwjgl.system.linux.StatxTimestamp.tv_sec()"""
        return int._wrap(super(StatxTimestamp, self).tv_sec())

    @override
    @overload
    def getClass(self) -> 'type.Class':
        """public final native java.lang.Class<?> java.lang.Object.getClass()"""
        return 'type.Class'._wrap(super(object, self).getClass())

    @staticmethod
    @overload
    def create(arg0: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.StatxTimestamp$Buffer org.lwjgl.system.linux.StatxTimestamp.create(int)"""
        return Buffer._wrap(_StatxTimestamp.create(_int.valueOf(arg0)))

    @overload
    def tv_nsec(self, arg0: int) -> 'StatxTimestamp':
        """public org.lwjgl.system.linux.StatxTimestamp org.lwjgl.system.linux.StatxTimestamp.tv_nsec(int)"""
        return 'StatxTimestamp'._wrap(super(_StatxTimestamp, self).tv_nsec(_int.valueOf(arg0)))

    @staticmethod
    @overload
    def ntv_sec(arg0: int) -> int:
        """public static long org.lwjgl.system.linux.StatxTimestamp.ntv_sec(long)"""
        return int._wrap(_StatxTimestamp.ntv_sec(_long.valueOf(arg0)))

    @overload
    def isNull(self, arg0: int) -> bool:
        """public boolean org.lwjgl.system.Struct.isNull(int)"""
        return bool._wrap(super(_pyglsystem.Struct, self).isNull(_int.valueOf(arg0)))

    @override
    @overload
    def wait(self):
        """public final void java.lang.Object.wait() throws java.lang.InterruptedException"""
        super(object, self).wait()

    @staticmethod
    @overload
    def createSafe(arg0: int, arg1: int) -> 'Buffer':
        """public static org.lwjgl.system.linux.StatxTimestamp$Buffer org.lwjgl.system.linux.StatxTimestamp.createSafe(long,int)"""
        return Buffer._wrap(_StatxTimestamp.createSafe(_long.valueOf(arg0), _int.valueOf(arg1)))

    @override
    @overload
    def toString(self) -> str:
        """public java.lang.String org.lwjgl.system.Pointer$Default.toString()"""
        return str._wrap(super(pyglsystem.Pointer$Default, self).toString())

    @override
    @overload
    def address(self) -> int:
        """public long org.lwjgl.system.Pointer$Default.address()"""
        return int._wrap(super(pyglsystem.Pointer$Default, self).address())

    @overload
    def __init__(self, arg0: 'ByteBuffer'):
        """public org.lwjgl.system.linux.StatxTimestamp(java.nio.ByteBuffer)"""
        val = _StatxTimestamp(arg0)
        self.__wrapper = val